/*
 * SPDX-FileCopyrightText: Copyright (c) 2014-2021 LWPU CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

#include <lwtypes.h>
#if defined(_MSC_VER)
#pragma warning(disable:4324)
#endif

//
// This file was generated with FINN, an LWPU coding tool.
// Source file: ctrl/ctrl2080/ctrl2080mc.finn
//
#if (!defined(LWRM_UNPUBLISHED) || LWRM_UNPUBLISHED == 1)
//
// Please edit the original FINN IDL file to create desired edits in this header
// See https://confluence.lwpu.com/display/CORERM/FINN for more info on how to
// edit FINN.
//
#endif // (!defined(LWRM_UNPUBLISHED) || LWRM_UNPUBLISHED == 1)

#if (!defined(LWRM_PUBLISHED_PENDING_IP_REVIEW) || LWRM_PUBLISHED_PENDING_IP_REVIEW == 1)



#include "ctrl/ctrl2080/ctrl2080base.h"

/* LW20_SUBDEVICE_XX mc control commands and parameters */

/**
 * LW2080_CTRL_CMD_MC_GET_ARCH_INFO
 *
 * This command returns chip architecture information from the
 * master control engine in the specified GPU.
 *
 *   architecture
 *       This parameter specifies the architecture level for the GPU.
 *   implementation
 *       This parameter specifies the implementation of the architecture
 *       for the GPU.
 *   revision
 *       This parameter specifies the revision of the mask used to produce
 *       the GPU.
 *   subRevision
 *       This parameter specific the sub revision of the GPU. Value is one of
 *       LW2080_CTRL_MC_ARCH_INFO_SUBREVISION_*
 *
 * Possible status values returned are:
 *   LW_OK
 *   LW_ERR_ILWALID_PARAM_STRUCT
 *   LW_ERR_ILWALID_ARGUMENT
 */
#define LW2080_CTRL_CMD_MC_GET_ARCH_INFO (0x20801701) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_GET_ARCH_INFO_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_GET_ARCH_INFO_PARAMS_MESSAGE_ID (0x1U)

typedef struct LW2080_CTRL_MC_GET_ARCH_INFO_PARAMS {
    LwU32 architecture;
    LwU32 implementation;
    LwU32 revision;
    LwU8  subRevision;
} LW2080_CTRL_MC_GET_ARCH_INFO_PARAMS;

/* valid architecture values */
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T2X           (0xE0000020)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T3X           (0xE0000030)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T4X           (0xE0000040)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T12X          (0xE0000040)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T13X          (0xE0000013)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T14X          (0xE0000014)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T17X          (0xE0000017)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T21X          (0xE0000021)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T18X          (0xE0000018)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T19X          (0xE0000019)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_T23X          (0xE0000023)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_LW40          (0x00000040)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_LW50          (0x00000050)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_G78           (0x00000060)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_G80           (0x00000080)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_G90           (0x00000090)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GT200         (0x000000A0)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GF100         (0x000000C0)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GF110         (0x000000D0)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GK100         (0x000000E0)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GK110         (0x000000F0)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GK200         (0x00000100)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GM000         (0x00000110)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GM200         (0x00000120)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GP100         (0x00000130)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GV100         (0x00000140)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GV110         (0x00000150)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_TU100         (0x00000160)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GA100         (0x00000170)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_G000          (0x000001E0)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GH100         (0x00000180)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_AD100         (0x00000190)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GB100         (0x000001A0)
#define LW2080_CTRL_MC_ARCH_INFO_ARCHITECTURE_GB102         (0x000001A2)


/* valid ARCHITECTURE_T2X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T20         (0x00000000)
/* valid ARCHITECTURE_T3X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T30         (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T35         (0x00000005)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T114        (0x00000005)
/* valid ARCHITECTURE_T12X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T40         (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T124        (0x00000000)
/* valid ARCHITECTURE_T13X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T132        (0x00000000)
/* valid ARCHITECTURE_T14X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T148        (0x00000000)
/* valid ARCHITECTURE_T17X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T177        (0x00000000)
/* valid ARCHITECTURE_T21X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T210        (0x00000000)
/* valid ARCHITECTURE_T18X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T186        (0x00000000)
/* valid ARCHITECTURE_T194 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T194        (0x00000000)
/* valid ARCHITECTURE_T23X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T234        (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T234D       (0x00000005)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_T239        (0x00000009)
/* valid ARCHITECTURE_LW40 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW40        (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW41        (0x00000001)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW42        (0x00000002)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW43        (0x00000003)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW44        (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW44A       (0x0000000A)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW46        (0x00000006)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW47        (0x00000007)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW49        (0x00000009)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW4B        (0x0000000B)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW4C        (0x0000000C)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW4E        (0x0000000E)
/* valid ARCHITECTURE_LW50 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW50        (0x00000000)
/* valid ARCHITECTURE_G78 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW63        (0x00000003)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_LW67        (0x00000007)
/* valid ARCHITECTURE_G80 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_G84         (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_G86         (0x00000006)
/* valid ARCHITECTURE_G90 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_G92         (0x00000002)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_G94         (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_G96         (0x00000006)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_G98         (0x00000008)
/* valid ARCHITECTURE_GT200 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GT200       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GT212       (0x00000002)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GT214       (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GT215       (0x00000003)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GT216       (0x00000005)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GT218       (0x00000008)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_MCP77       (0x0000000A)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GT21C       (0x0000000B)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_MCP79       (0x0000000C)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GT21A       (0x0000000D)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_MCP89       (0x0000000F)
/* valid ARCHITECTURE_GF100 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF100       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF100B      (0x00000008)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF104       (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF104B      (0x0000000E)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF106       (0x00000003)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF106B      (0x0000000F)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF108       (0x00000001)
/* valid ARCHITECTURE_GF110 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF110       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF112       (0x00000002)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF116       (0x00000006)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF117       (0x00000007)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF118       (0x00000008)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GF119       (0x00000009)
/* valid ARCHITECTURE_GK100 implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK100       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK104       (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK106       (0x00000006)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK107       (0x00000007)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK107B      (0x0000000D)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK20A       (0x0000000A)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK110       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK110B      (0x00000001)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK110C      (0x00000002)
/* valid ARCHITECTURE_GK20x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK208       (0x00000008)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GK208S      (0x00000006)
/* valid ARCHITECTURE_GM00x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM104       (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM107       (0x00000007)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM108       (0x00000008)
/* valid ARCHITECTURE_GM20x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM200       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM204       (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM206       (0x00000006)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM20B       (0x0000000B)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM20C       (0x0000000C)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM20D       (0x0000000D)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GM21B       (0x0000000E)
/* valid ARCHITECTURE_GP10x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP100       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP000       (0x00000001)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP102       (0x00000002)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP104       (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP105       (0x00000005)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP106       (0x00000006)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP107       (0x00000007)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP108       (0x00000008)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP10B       (0x0000000B)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP10D       (0x0000000D)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GP10E       (0x0000000E)
/* valid ARCHITECTURE_GV10x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GV100       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GV105       (0x00000005)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GV000       (0x00000001)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GV10B       (0x0000000B)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GV11B       (0x0000000B)
/* valid ARCHITECTURE_TU10x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_TU100       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_TU101       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_TU102       (0x00000002)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_TU104       (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_TU106       (0x00000006)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_TU116       (0x00000008)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_TU117       (0x00000007)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_TU000       (0x00000001)
/* valid ARCHITECTURE_GA10x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA100       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA000       (0x00000001)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA101       (0x00000001)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA102       (0x00000002)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA103       (0x00000003)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA104       (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA106       (0x00000006)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA107       (0x00000007)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA10B       (0x0000000B)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GA10F       (0x0000000E)
/* valid ARCHITECTURE_GH10x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GH100       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GH100_SOC   (0x00000001)
/* valid ARCHITECTURE_GH20x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GH202       (0x00000002)
/* valid ARCHITECTURE_G00X implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_G000        (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_G000_SOC    (0x00000001)
/* valid ARCHITECTURE_AD10x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_AD100       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_AD000       (0x00000001)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_AD101       (0x00000001)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_AD102       (0x00000002)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_AD103       (0x00000003)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_AD104       (0x00000004)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_AD106       (0x00000006)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_AD107       (0x00000007)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_AD10B       (0x0000000B)
/* valid ARCHITECTURE_GB10x implementation values */
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GB100       (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_IMPLEMENTATION_GB102       (0x00000002)

/* Valid Chip sub revisions */
#define LW2080_CTRL_MC_ARCH_INFO_SUBREVISION_NO_SUBREVISION (0x00000000)
#define LW2080_CTRL_MC_ARCH_INFO_SUBREVISION_P              (0x00000001)
#define LW2080_CTRL_MC_ARCH_INFO_SUBREVISION_Q              (0x00000002)
#define LW2080_CTRL_MC_ARCH_INFO_SUBREVISION_R              (0x00000003)

/*
 * LW2080_CTRL_CMD_MC_SERVICE_INTERRUPTS
 *
 * This command instructs the RM to service interrupts for the specified
 * engine(s).
 *
 *   engines
 *       This parameter specifies which engines should have their interrupts
 *       serviced.
 *
 * Possible status values returned are:
 *   LW_OK
 *   LW_ERR_ILWALID_PARAM_STRUCT
 *   LW_ERR_ILWALID_ARGUMENT
 */
#define LW2080_CTRL_CMD_MC_SERVICE_INTERRUPTS               (0x20801702) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_SERVICE_INTERRUPTS_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_ENGINE_ID_GRAPHICS                   0x00000001
#define LW2080_CTRL_MC_ENGINE_ID_ALL                        0xFFFFFFFF

#define LW2080_CTRL_MC_SERVICE_INTERRUPTS_PARAMS_MESSAGE_ID (0x2U)

typedef struct LW2080_CTRL_MC_SERVICE_INTERRUPTS_PARAMS {
    LwU32 engines;
} LW2080_CTRL_MC_SERVICE_INTERRUPTS_PARAMS;


/*
 * LW2080_CTRL_CMD_MC_GET_MANUFACTURER
 *
 * This command returns the GPU manufacturer information for the associated
 * subdevice.
 *
 *   manufacturer
 *       This parameter returns the manufacturer value for the GPU.
 *
 * Possible status values returned are:
 *   LW_OK
 *   LW_ERR_ILWALID_PARAM_STRUCT
 */
#define LW2080_CTRL_CMD_MC_GET_MANUFACTURER (0x20801703) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_GET_MANUFACTURER_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_GET_MANUFACTURER_PARAMS_MESSAGE_ID (0x3U)

typedef struct LW2080_CTRL_MC_GET_MANUFACTURER_PARAMS {
    LwU32 manufacturer;
} LW2080_CTRL_MC_GET_MANUFACTURER_PARAMS;

/*!
 * The following definition of ENGINE_ID applies to all LW2080_CTRL_MC
 * commands that are related to PowerGating.
 */
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_GRAPHICS       (0x00000000)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_VIDEO          (0x00000001)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_GR_PASSIVE     (0x00000001)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_GR_RG          (0x00000002)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_DI             (0x00000003)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_MS             (0x00000004)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_EI             (0x00000005)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_MS_LTC         (0x00000006)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_MS_PASSIVE     (0x00000007)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_EI_PASSIVE     (0x00000008)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_DFPR           (0x00000009)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_MS_DIFR_SW_ASR (0x0000000A)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_MS_DIFR_CG     (0x0000000B)
#define LW2080_CTRL_MC_POWERGATING_ENGINE_ID_MAX            (0x0000000C)

/*!
 * @brief Engine Ids for Adaptive Power and AELPG algorithms
 */
#define LW2080_CTRL_MC_ADAPTIVE_ENGINE_ID_GRAPHICS          (0x00000000)
#define LW2080_CTRL_MC_ADAPTIVE_ENGINE_ID_EXPERIMENTS       (0x00000001)

/*
 * LW2080_CTRL_CMD_MC_GATE_ENGINE_POWER
 *
 * This command simulates an ELPG PG_ON message which will trigger the RM to
 * initiate it's power gating routines
 *
 *   engineId
 *      The engine for which gating should be simulated.   The allowed values
 *      for engineId are defined by LW2080_CTRL_MC_POWERGATING_ENGINE_ID_XXXX
 *
 * Possible status values returned are:
 *   LW_OK
 *   LWOS_STATUS_ERR_ILWALID_PARAM_STRUCT
 */
#define LW2080_CTRL_CMD_MC_GATE_ENGINE_POWER                (0x20801704) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | 0x4" */

typedef struct LW2080_CTRL_MC_GATE_ENGINE_POWER_PARAMS {
    LwU32 engineId;
} LW2080_CTRL_MC_GATE_ENGINE_POWER_PARAMS;

#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_IDLE              0:0
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_IDLE_ILWALID         (0x00000000)
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_IDLE_VALID           (0x00000001)
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_IDLE_PWRRAIL      1:1
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_IDLE_PWRRAIL_ILWALID (0x00000000)
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_IDLE_PWRRAIL_VALID   (0x00000001)
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_POSTPWRUP         2:2
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_POSTPWRUP_ILWALID    (0x00000000)
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_POSTPWRUP_VALID      (0x00000001)
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_BLOCKING          3:3
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_BLOCKING_FALSE       (0x00000000)
#define LW2080_CTRL_MC_SET_POWERGATING_THRESHOLD_FLAGS_BLOCKING_TRUE        (0x00000001)

typedef struct LW2080_CTRL_POWERGATING_PARAMETER {
    LwU32 parameter;
    LwU32 parameterExtended;
    LwU32 parameterValue;
} LW2080_CTRL_POWERGATING_PARAMETER;

/*!
 * Do not Add any other Parameter ID between
 * LW2080_CTRL_MC_POWERGATING_PARAMETER_NULL and
 * LW2080_CTRL_MC_POWERGATING_PARAMETER_MAX_EXITTIME_US
 * These IDs are legacy code and are not supported further.
 */
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_NULL                                  (0x00000000)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_IDLE_THRESHOLD                        (0x00000001)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_POST_POWERUP_THRESHOLD                (0x00000002)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_DELAY_INTERVAL                        (0x00000003)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWRRAIL_IDLE_THRESHOLD                (0x00000004)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_INITIALIZED                           (0x00000005)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_GATINGCOUNT                           (0x00000006)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_DENYCOUNT                             (0x00000007)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_NUM_POWERGATEABLE_ENGINES             (0x00000008)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PSORDER                               (0x00000009)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_ZONELUT                               (0x0000000A)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_ENABLED                               (0x0000000E)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_SMU_MESSAGING_DISABLE                 (0x0000000F)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_NUM_POWERGATEABLE_PWRRAIL             (0x00000010)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWRRAIL_GATINGCOUNT                   (0x00000011)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWR_STATE_ENGINE                      (0x00000013)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWR_STATE_PWR_RAIL                    (0x00000014)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_SUPPORTED                             (0x00000015)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWRRAIL_SUPPORTED                     (0x00000016)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_LOADING_ENGINE                        (0x00000020)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AVG_ENTRYTIME_US                      (0x00000021)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AVG_EXITTIME_US                       (0x00000022)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_DEFERRED_EVENT                        (0x00000023)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_INGATINGTIME_US                       (0x00000026)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_INGATINGCOUNT                         (0x00000027)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_UNGATINGTIME_US                       (0x00000028)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_UNGATINGCOUNT                         (0x00000029)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_MAX_ENTRYTIME_US                      (0x0000002A)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_MAX_EXITTIME_US                       (0x0000002B)

#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_HISTOGRAM_BIN                   (0x00000101)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_IDLE_FILTER                     (0x00000102)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_PREV_IDLE_FILTER                (0x00000103)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_POWER_SAVING                    (0x00000104)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_BAD_DECISION_COUNT              (0x00000105)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_ACTIVE                          (0x00000106)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_PREV_ACTIVE                     (0x00000107)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_KICK                            (0x0000010C)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_ENABLED                         (0x0000010D)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_READ_PARAMS_FROM_PMU            (0x0000010E)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PG_WAKEUP_DISALLOW_COUNT              (0x00000200)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PG_WAKEUP_XVE_BLOCKER_COUNT           (0x00000202)
// Anything in 0x3XX range is a temporary PG rmctrl call until ctrl2080pg is created.
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PMU_ELPG_ENABLED                      (0x00000300)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_UNUSED_1                              (0x00000301)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_UNUSED_2                              (0x00000302)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_IDLE_THRESHOLD_US                     (0x00000303)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_POST_POWERUP_THRESHOLD_US             (0x00000304)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_ILWALID                               (0xFFFFFFFF)

#define LW2080_CTRL_MC_POWERGATING_PARAMETER_DELAY_INTERVAL_ENGINE           7:0
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_DELAY_INTERVAL_PART             15:8

#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWRRAIL_IDLE_THRESHOLD_PWRRAIL_IDX    7:0
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWRRAIL_IDLE_THRESHOLD_PREDICTIVE     8:8
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWRRAIL_IDLE_THRESHOLD_PREDICTIVE_DIS (0x00000000)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWRRAIL_IDLE_THRESHOLD_PREDICTIVE_EN  (0x00000001)


#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_HISTOGRAM_BIN_BINIDX      7:0
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_AELPG_HISTOGRAM_BIN_AELPGID    15:8

#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PSORDER_ENGINE                  7:0
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PSORDER_PART                    15:8
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PSORDER_IDX                     23:16
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PSORDER_PSEN                    23:16
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PSORDER_TYPE                    24:24
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PSORDER_TYPE_IDX                      (0x00000000)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PSORDER_TYPE_PSEN                     (0x00000001)

#define LW2080_CTRL_MC_POWERGATING_PARAMETER_ZONELUT_ENGINE                  7:0
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_ZONELUT_PART                    15:8
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_ZONELUT_TYPE                    23:16
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_ZONELUT_TYPE_IDX                      (0x00000001)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_ZONELUT_TYPE_PZEN                     (0x00000002)

/* valid values for engine power state */
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWR_STATE_ENGINE_PWR_ON               (0x00000000)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWR_STATE_ENGINE_PWR_OFF              (0x00000001)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWR_STATE_ENGINE_PWR_IN_TRANSITION    (0x00000002)

/* valid values for power rail power state */
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWR_STATE_PWR_RAIL_PWR_ON             (0x00000000)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWR_STATE_PWR_RAIL_PWR_OFF            (0x00000001)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_PWR_STATE_PWR_RAIL_UNKNOWN            (0x00000002)

/* valid values for deferred event */
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_DEFERRED_EVENT_NONE                   (0x00000000)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_DEFERRED_EVENT_PWRUP_PENDING          (0x00000001)
#define LW2080_CTRL_MC_POWERGATING_PARAMETER_DEFERRED_EVENT_PWRUP_DEFERRED         (0x00000002)


/*
 * LW2080_CTRL_CMD_MC_QUERY_POWER_GATING_PARAMETER
 *
 * This command is used to allow clients to query power-gating
 *  parameters.
 *
 *  parameter
 *    The parameter being queried.   The set of values is listed
 *    below
 *  parameterExtended
 *    This holds extended information about the parameter.   The interpretation
 *    will be dependent upon the value of parameter.
 *  parameterValue
 *    When the function returns, if it returns STATUS_SUCCESS, then this
 *    will hold the current programmed value of the requested parameter
 *
 * Possible status values returned are:
 *   LW_OK
 *   LWOS_STATUS_ERR_ILWALID_PARAM_STRUCT
 *
 */
#define LW2080_CTRL_CMD_MC_QUERY_POWERGATING_PARAMETER                             (0x20801706) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_QUERY_POWERGATING_PARAMETER_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_QUERY_POWERGATING_PARAMETER_PARAMS_MESSAGE_ID (0x6U)

typedef struct LW2080_CTRL_MC_QUERY_POWERGATING_PARAMETER_PARAMS {
    LwU32 listSize;
    LW_DECLARE_ALIGNED(LwP64 parameterList, 8);
} LW2080_CTRL_MC_QUERY_POWERGATING_PARAMETER_PARAMS;

/*
 * LW2080_CTRL_CMD_MC_SET_POWER_GATING_PARAMETER
 *
 * This command is used to allow clients to set power-gating
 *  parameters.
 *
 *  parameter
 *    The parameter being set.   The set of values is listed
 *    below
 *  parameterExtended
 *    This holds extended information about the parameter.   The interpretation
 *    will be dependent upon the value of parameter.
 *  parameterValue
 *    The value for the requested parameter to be programmed to.
 *
 * Possible status values returned are:
 *   LW_OK
 *   LWOS_STATUS_ERR_ILWALID_PARAM_STRUCT
 */
#define LW2080_CTRL_CMD_MC_SET_POWERGATING_PARAMETER (0x20801707) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_SET_POWERGATING_PARAMETER_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_SET_POWERGATING_PARAMETER_PARAMS_MESSAGE_ID (0x7U)

typedef struct LW2080_CTRL_MC_SET_POWERGATING_PARAMETER_PARAMS {
    LwU32 listSize;
    LW_DECLARE_ALIGNED(LwP64 parameterList, 8);
    LwU32 flags;
} LW2080_CTRL_MC_SET_POWERGATING_PARAMETER_PARAMS;

#define LW2080_CTRL_MC_SET_POWERGATING_PARAMETER_FLAGS_BLOCKING          0:0
#define LW2080_CTRL_MC_SET_POWERGATING_PARAMETER_FLAGS_BLOCKING_FALSE (0x00000000)
#define LW2080_CTRL_MC_SET_POWERGATING_PARAMETER_FLAGS_BLOCKING_TRUE  (0x00000001)

/*
 * LW2080_CTRL_CMD_MC_QUERY_HOSTCLK_SLOWDOWN_STATUS
 *
 * This command is used to allow clients to query whether hostclk slowdown is
 * disabled.
 *
 *  bDisabled
 *    This parameter will hold the status of hostclk slowdown
 *
 * Possible status values returned are:
 *   LW_OK
 *
 */
#define LW2080_CTRL_CMD_MC_QUERY_HOSTCLK_SLOWDOWN_STATUS              (0x20801708) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_QUERY_HOSTCLK_SLOWDOWN_STATUS_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_QUERY_HOSTCLK_SLOWDOWN_STATUS_PARAMS_MESSAGE_ID (0x8U)

typedef struct LW2080_CTRL_MC_QUERY_HOSTCLK_SLOWDOWN_STATUS_PARAMS {
    LwBool bDisabled;
} LW2080_CTRL_MC_QUERY_HOSTCLK_SLOWDOWN_STATUS_PARAMS;

/*
 * LW2080_CTRL_CMD_MC_SET_HOSTCLK_SLOWDOWN_STATUS
 *
 * This command is used to allow clients to disable/enable hostclk slowdown.
 *
 *  bDisable
 *    When this parameter is set to TRUE, RM should disable hostclk slowdown.
 *    If it is set to FALSE, RM will attempt to enable hostclk slowdown, but
 *    in this case, slowdown is NOT guaranteed to be enabled since there may
 *    be other reason (like regkey) preventing slowdown.
 *
 * Possible status values returned are:
 *   LW_OK
 *
 */
#define LW2080_CTRL_CMD_MC_SET_HOSTCLK_SLOWDOWN_STATUS (0x20801709) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_SET_HOSTCLK_SLOWDOWN_STATUS_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_SET_HOSTCLK_SLOWDOWN_STATUS_PARAMS_MESSAGE_ID (0x9U)

typedef struct LW2080_CTRL_MC_SET_HOSTCLK_SLOWDOWN_STATUS_PARAMS {
    LwBool bDisable;
} LW2080_CTRL_MC_SET_HOSTCLK_SLOWDOWN_STATUS_PARAMS;

/*
 * LW2080_CTRL_CMD_MC_INDUCE_ELPG
 *
 * This command is used to allow clients to induce ELPG power-off and power-on
 * sequences on the specified engine(s).
 *
 *  numEngines
 *    This parameter must be set to the number of engines on which ELPG is to
 *    be induced.
 *
 *  engineList
 *    This parameter is an array which specifies the list of engine(s) on which
 *    the ELPG sequence is to be induced. Each element of this array must be set
*     to one of the LW2080_CTRL_MC_POWERGATING_ENGINE_ID* defines.
 *
 * Possible status values returned are:
 *   LW_OK
 *   LW_ERR_ILWALID_ARGUMENT
 *   LW_ERR_NOT_SUPPORTED
 */
#define LW2080_CTRL_CMD_MC_INDUCE_ELPG         (0x2080170a) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | 0xA" */

#define LW2080_CTRL_MC_INDUCE_ELPG_MAX_ENGINES 16

typedef struct LW2080_CTRL_MC_INDUCE_ELPG_PARAMS {
    LwU32 numEngines;
    LwU32 engineList[LW2080_CTRL_MC_INDUCE_ELPG_MAX_ENGINES];
} LW2080_CTRL_MC_INDUCE_ELPG_PARAMS;

/*
 * LW2080_CTRL_CMD_MC_PG_PROFILER
 *
 * This command is used to allow clients to profile
 * pg entry/exit paths.
 *
 *  controlCode
 *    Control code of operation to perform.
 *
 *  enabled
 *  engineCount
 *  entryCount
 *    Fields returned by GET_CONFIG
 *
 *  engine
 *  entryIndex
 *    Fields supplied with GET_DATA
 *
 *  entry
 *    Field returned by GET_DATA
 *
 * Possible status values returned are:
 *   LW_OK
 *   LW_ERR_ILWALID_ARGUMENT
 *   LW_ERR_NOT_SUPPORTED
 */
#define LW2080_CTRL_CMD_MC_PG_PROFILER               (0x2080170b) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | 0xB" */

// control code defines
#define LW2080_CTRL_CMD_MC_PG_PROFILER_ENABLE        (0x00000000)
#define LW2080_CTRL_CMD_MC_PG_PROFILER_DISABLE       (0x00000001)
#define LW2080_CTRL_CMD_MC_PG_PROFILER_RESET         (0x00000002)
#define LW2080_CTRL_CMD_MC_PG_PROFILER_GET_CONFIG    (0x00000003)
#define LW2080_CTRL_CMD_MC_PG_PROFILER_GET_DATA      (0x00000004)

#define LW2080_CTRL_MC_PG_PROFILER_ENTRY_DESC_LENGTH (32)

typedef struct LW2080_CTRL_MC_PG_PROFILER_ENTRY {
    LwU8  description[LW2080_CTRL_MC_PG_PROFILER_ENTRY_DESC_LENGTH];
    LwU32 count;
    LwU32 avgTimeUs;
    LwU32 minTimeUs;
    LwU32 maxTimeUs;
} LW2080_CTRL_MC_PG_PROFILER_ENTRY;

typedef struct LW2080_CTRL_MC_PG_PROFILER_PARAMS {
    LwU32                            controlCode;
    LwU32                            enabled;
    LwU32                            engineCount;
    LwU32                            entryCount;
    LwU32                            engine;
    LwU32                            entryIndex;
    LW2080_CTRL_MC_PG_PROFILER_ENTRY entry;
} LW2080_CTRL_MC_PG_PROFILER_PARAMS;

/*
 * LW2080_CTRL_CMD_MC_CHANGE_REPLAYABLE_FAULT_OWNERSHIP
 *
 * This call will setup RM to either service or ignore the
 * repayable fault interrupt.
 * This is a privileged call that can only be called by the UVM driver
 * when it will take ownership of the repalayable fault interrupt.
 *
 * Possible status values returned are:
 *   LWOS_STATUS_SUCCESS
 *   LWOS_STATUS_ERROR_ILWALID_ARGUMENT
 *   LWOS_STATUS_ERROR_NOT_SUPPORTED
 */

#define LW2080_CTRL_CMD_MC_CHANGE_REPLAYABLE_FAULT_OWNERSHIP (0x2080170c) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_CHANGE_REPLAYABLE_FAULT_OWNERSHIP_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_CHANGE_REPLAYABLE_FAULT_OWNERSHIP_PARAMS_MESSAGE_ID (0xLW)

typedef struct LW2080_CTRL_MC_CHANGE_REPLAYABLE_FAULT_OWNERSHIP_PARAMS {
    LwBool bOwnedByRm;
} LW2080_CTRL_MC_CHANGE_REPLAYABLE_FAULT_OWNERSHIP_PARAMS;

/*
 *  LW2080_CTRL_CMD_MC_GET_ENGINE_NOTIFICATION_INTR_VECTORS
 *
 *  This command gets the notification interrupt vectors device for all VGPU engines from Host RM.
 *
 *  Parameters:
 *
 *    entries [out]
 *      A buffer to store up to MAX_ENGINES entries of type
 *      LW2080_CTRL_MC_ENGINE_NOTIFICATION_INTR_VECTOR_ENTRY.
 *
 *    numEntries [out]
 *      Number of populated entries in the provided buffer.
 *
 *  Possible status values returned are:
 *    LW_OK
 */
#define LW2080_CTRL_CMD_MC_GET_ENGINE_NOTIFICATION_INTR_VECTORS         (0x2080170d) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_GET_ENGINE_NOTIFICATION_INTR_VECTORS_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_GET_ENGINE_NOTIFICATION_INTR_VECTORS_MAX_ENGINES 256

typedef struct LW2080_CTRL_MC_ENGINE_NOTIFICATION_INTR_VECTOR_ENTRY {
    LwU32 lw2080EngineType;
    LwU32 notificationIntrVector;
} LW2080_CTRL_MC_ENGINE_NOTIFICATION_INTR_VECTOR_ENTRY;

#define LW2080_CTRL_MC_GET_ENGINE_NOTIFICATION_INTR_VECTORS_PARAMS_MESSAGE_ID (0xDU)

typedef struct LW2080_CTRL_MC_GET_ENGINE_NOTIFICATION_INTR_VECTORS_PARAMS {
    LwU32                                                numEntries;
    LW2080_CTRL_MC_ENGINE_NOTIFICATION_INTR_VECTOR_ENTRY entries[LW2080_CTRL_MC_GET_ENGINE_NOTIFICATION_INTR_VECTORS_MAX_ENGINES];
} LW2080_CTRL_MC_GET_ENGINE_NOTIFICATION_INTR_VECTORS_PARAMS;

/*
 *  LW2080_CTRL_CMD_MC_GET_STATIC_INTR_TABLE
 *
 *  This command gets the static interrupts needed by VGPU from Host RM.
 *
 *  Parameters:
 *
 *    entries [out]
 *      A buffer to store up to MAX_ENGINES entries of type
 *      LW2080_CTRL_MC_STATIC_INTR_ENTRY.
 *
 *    numEntries [out]
 *      Number of populated entries in the provided buffer.
 *
 *  Possible status values returned are:
 *    LW_OK
 */
#define LW2080_CTRL_CMD_MC_GET_STATIC_INTR_TABLE    (0x2080170e) /* finn: Evaluated from "(FINN_LW20_SUBDEVICE_0_MC_INTERFACE_ID << 8) | LW2080_CTRL_MC_GET_STATIC_INTR_TABLE_PARAMS_MESSAGE_ID" */

#define LW2080_CTRL_MC_GET_STATIC_INTR_TABLE_MAX    32

// Interface defines for static MC_ENGINE_IDX defines
#define LW2080_INTR_TYPE_NULL                       (0x00000000)
#define LW2080_INTR_TYPE_NON_REPLAYABLE_FAULT       (0x00000001)
#define LW2080_INTR_TYPE_NON_REPLAYABLE_FAULT_ERROR (0x00000002)
#define LW2080_INTR_TYPE_INFO_FAULT                 (0x00000003)
#define LW2080_INTR_TYPE_REPLAYABLE_FAULT           (0x00000004)
#define LW2080_INTR_TYPE_REPLAYABLE_FAULT_ERROR     (0x00000005)
#define LW2080_INTR_TYPE_ACCESS_CNTR                (0x00000006)
#define LW2080_INTR_TYPE_TMR                        (0x00000007)
#define LW2080_INTR_TYPE_CPU_DOORBELL               (0x00000008)
#define LW2080_INTR_TYPE_GR0_FECS_LOG               (0x00000009)
#define LW2080_INTR_TYPE_GR1_FECS_LOG               (0x0000000A)
#define LW2080_INTR_TYPE_GR2_FECS_LOG               (0x0000000B)
#define LW2080_INTR_TYPE_GR3_FECS_LOG               (0x0000000C)
#define LW2080_INTR_TYPE_GR4_FECS_LOG               (0x0000000D)
#define LW2080_INTR_TYPE_GR5_FECS_LOG               (0x0000000E)
#define LW2080_INTR_TYPE_GR6_FECS_LOG               (0x0000000F)
#define LW2080_INTR_TYPE_GR7_FECS_LOG               (0x00000010)

typedef struct LW2080_CTRL_MC_STATIC_INTR_ENTRY {
    LwU32 lw2080IntrType;
    LwU32 pmcIntrMask;
    LwU32 intrVectorStall;
    LwU32 intrVectorNonStall;
} LW2080_CTRL_MC_STATIC_INTR_ENTRY;

#define LW2080_CTRL_MC_GET_STATIC_INTR_TABLE_PARAMS_MESSAGE_ID (0xEU)

typedef struct LW2080_CTRL_MC_GET_STATIC_INTR_TABLE_PARAMS {
    LwU32                            numEntries;
    LW2080_CTRL_MC_STATIC_INTR_ENTRY entries[LW2080_CTRL_MC_GET_STATIC_INTR_TABLE_MAX];
} LW2080_CTRL_MC_GET_STATIC_INTR_TABLE_PARAMS;

/* _ctrl2080mc_h_ */
#endif // (!defined(LWRM_PUBLISHED_PENDING_IP_REVIEW) || LWRM_PUBLISHED_PENDING_IP_REVIEW == 1)

