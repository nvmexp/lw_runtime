/*
 * LWIDIA_COPYRIGHT_BEGIN
 *
 * Copyright 2020 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * LWIDIA_COPYRIGHT_END
 */

// This file contains a set of stock defines that may be used by the parse
// routines of protobuf library clients.  It is intended to be used with the
// protobuf C++ struct file that is generated by protobuf.py.  If the C++ struct
// file is not used then it is necessary for the client to create their own
// implementation of the macros in this file or other completely custom method
// for parsing protobuf messages.
//
// This file depends upon the reader file generated by protobuf.py
//
// See pbcommon.h for a description of a simple usage of the library

#pragma once

#include "pbreader.h"

namespace ProtobufReader
{
    // Check wire type of the current entry and report error if it's incorrect
    bool CheckWire
    (
        const char*          functionName,
        const char*          parentName,
        PBInput&             input,
        const FieldHdr&      hdr,
        ProtobufCommon::Wire expected
    );
}

#   define CHECK_WIRE(parentName, wireType)                                         \
    if (!ProtobufReader::CheckWire(__FUNCTION__, parentName, input, hdr, wireType)) \
        break

// Macros containing boilerplate to ease the pain of retrofitting log entries
// in protobuf format into old-style structures.

#define DECLARE_SIMPLE_FIELD(ns, parentName, index, dataType)                   \
    case ns::parentName::index:                                                 \
        {                                                                       \
            CHECK_WIRE(#parentName, ProtobufReader::TypeToWire<dataType>());    \
            ProtobufReader::ParseField<dataType>(input, &message.index);        \
        }                                                                       \
        break;

#define BEGIN_STRUCTURED_FIELD(ns, parentName, fieldIndex)                      \
    case ns::parentName::fieldIndex: {                                          \
        CHECK_WIRE(#parentName, ProtobufCommon::Wire::Bytes);                   \
        ProtobufReader::PBInput entryInput(input, hdr.pos);                     \
        auto& msg = message.fieldIndex;                                         \
        for (const ProtobufReader::FieldHdr& hdr : entryInput)                  \
        {                                                                       \
            switch (hdr.index)                                                  \
            {

#define DECLARE_MEMBER_FIELD(ns, parentName, fieldIndex, dataType)                     \
                case ns::parentName::fieldIndex: {                                     \
                    CHECK_WIRE(#parentName, ProtobufReader::TypeToWire<dataType>());   \
                    ProtobufReader::ParseField<dataType>(entryInput, &msg.fieldIndex); \
                }                                                                      \
                break;

#define DECLARE_REPEATED_MEMBER_FIELD(ns, parentName, fieldIndex, dataType)                             \
                case ns::parentName::fieldIndex:                                                        \
                    CHECK_WIRE(#parentName, ProtobufCommon::Wire::Bytes);                               \
                    ProtobufReader::ParseRepeatedField<dataType>(entryInput, hdr.pos, &msg.fieldIndex); \
                    break;

#define END_STRUCTURED_FIELD_NOBREAK(parentName)                                  \
                default:                                                          \
                    break;                                                        \
                }                                                                 \
            }

#define BREAK_STRUCTURED_FIELD } break;

#define END_STRUCTURED_FIELD(parentName)         \
        END_STRUCTURED_FIELD_NOBREAK(parentName) \
        BREAK_STRUCTURED_FIELD

#define BEGIN_STRUCTURED_MEMBER(newInput, parentInput)        \
    ProtobufReader::PBInput newInput(parentInput, hdr.pos);   \
    for (const auto& hdr : newInput) {                        \
        switch (hdr.index) {

#define END_STRUCTURED_MEMBER(newInput, parentName, fatal) \
            default:                                       \
                break;                                     \
        }                                                  \
    }

