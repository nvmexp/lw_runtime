/*
 * Copyright (c) 2020, LWPU CORPORATION.  All rights reserved.
 *
 * LWPU CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from LWPU CORPORATION is strictly prohibited.
 */

#if !defined(SEQUENCE_LWH_INCLUDED_)
#define SEQUENCE_LWH_INCLUDED_

#include "lwphy.h"
#include "lwphy_internal.h"
#include "descrambling.hpp"

namespace descrambling
{
// Fibonacci LFSR for second polynomial for Gold sequence generation
LWDA_BOTH inline uint32_t fibonacciLFSR2(uint32_t state, uint32_t n)
{
    uint32_t res = 0;
    // x^{31} + x^3 + x^2 + x + 1
    for(int i = 0; i < n; i++)
    {
        uint32_t bit = (state) ^ ((state >> 1)) ^ ((state >> 2)) ^ (state >> 3);
        bit          = bit & 1;
        res ^= (state & 1) << i; //(% 32);
        state >>= 1;
        state ^= (bit << 30);
    }

    return res;
}
// Fibonacci LFSR for second polynomial for Gold sequence generation
LWDA_BOTH inline uint32_t fibonacciLFSR2_1bit(uint32_t state)
{
    uint32_t res = state;
    // x^{31} + x^3 + x^2 + x + 1
    uint32_t bit = (state) ^ ((state >> 1)) ^ ((state >> 2)) ^ (state >> 3);
    bit          = bit & 1;
    state >>= 1;
    state ^= (bit << 30);
    res ^= (state >> 30) << 31;
    return res;
}
// Fibonacci LFSR for first polynomial for Gold sequence generation
// ilwerted output
LWDA_BOTH inline uint32_t fibonacciLFSR1(uint32_t& state, uint32_t n)
{
    uint32_t res = 0;
    // x^{31} + x^3 + 1

    for(int i = 0; i < n; i++)
    {
        uint32_t bit = (state) ^ (state >> 3);
        bit          = bit & 1;
        res ^= (state & 1) << i; //(% 32);
        state >>= 1;
        state ^= (bit << 30);
    }
    return res;
}
// Galois LFSR for Gold sequence generation
// computes between 1 and 32 bits, n must be at most 32
LWDA_BOTH inline uint32_t galois31LFSRWord(uint32_t state, uint32_t galoisMask, uint32_t n = 31)
{
    uint32_t res = 0;

    uint32_t msbMask = (1 << 30);
    uint32_t bit;
    uint32_t pred;
    for(int i = 0; i < n; i++)
    {
        bit  = (msbMask & state);
        pred = bit != 0;
        state <<= 1;
        pred = bit != 0;
        state ^= pred * galoisMask;
        res ^= pred << i;
    }
    return res;
}

LWDA_BOTH inline uint32_t polyMulHigh31(uint32_t a, uint32_t b)
{
    uint32_t prodHi = 0;

    for(int i = 1; i < 32; i++)
    {
        uint32_t pred = ((b >> i) & 1);
        prodHi ^= (pred * a) >> (31 - i);
    }
    return prodHi;
}

// Little-endian 31-bit Modular GF2 polynomial multiplication by monomials
// using coalesced precomputed x^{32i}, x^{32i +8}, x^{32i + 16}, x^{32i + 24}
// values
LWDA_BOTH inline uint32_t mulModPoly31_Coalesced(const uint32_t  a,
                                                 const uint32_t* table,
                                                 uint32_t        tableWordOffset,
                                                 uint32_t        poly)
{
    uint32_t     prod    = 0;
    uint32_t     msbMask = (1UL << 31);
    unsigned int offset  = 0;

#pragma unroll
    for(int bitsProcessed = 0; bitsProcessed < sizeof(uint32_t) * 8; bitsProcessed += BITS_PROCESSED_PER_LUT_ENTRY)
    {
        uint32_t inputByte = a >> (bitsProcessed)&BITS_PROCESSED_PER_LUT_ENTRY_MASK;
        for(unsigned bit = 0; bit < BITS_PROCESSED_PER_LUT_ENTRY; bit++)
        {
            uint32_t pred  = ((inputByte >> (bit)) & 1);
            uint32_t pprod = table[(offset)] * pred;
            for(unsigned shift = 0; shift < bit; shift++)
            {
                pprod <<= 1;
                uint32_t pred = (pprod & msbMask) == 0;
                pprod ^= (poly * pred);
            }
            prod ^= pprod;
        }
        offset += tableWordOffset;
    }

    return prod;
}

} // namespace descrambling

#endif
