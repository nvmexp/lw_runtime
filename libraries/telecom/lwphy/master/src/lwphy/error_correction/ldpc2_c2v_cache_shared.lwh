/*
 * Copyright (c) 2019, LWPU CORPORATION.  All rights reserved.
 *
 * LWPU CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from LWPU CORPORATION is strictly prohibited.
 */

#if !defined(LDPC2_C2V_CACHE_SHARED_LWH_INCLUDED_)
#define LDPC2_C2V_CACHE_SHARED_LWH_INCLUDED_

#include "ldpc2.lwh"

namespace ldpc2
{

////////////////////////////////////////////////////////////////////////
// c2v_cache_shared
// Check to variable (C2V) messages are stored in shared memory.
// Assumes that all APP variables are in shared memory.
// BG: Base graph (1 or 2)
// NUM_SMEM_VNODES: Number of APP variable nodes in shared memory
// TC2V: Check to variable node class
template <int BG,
          int Z,
          int NUM_SMEM_VNODES,
          class TC2V>
struct c2v_cache_shared
{
    //------------------------------------------------------------------
    // C2V message type
    typedef TC2V                  c2v_t;
    typedef typename c2v_t::app_t app_t;
    //------------------------------------------------------------------
    // process_row_init()
    template <int CHECK_IDX>
    __device__
    void process_row_init(const LDPC_kernel_params& params,
                          word_t                    (&app)[app_max_words<app_t, BG>::value],
                          int                       (&app_addr)[max_row_degree<BG>::value])
    {
        // Assuming all APP data in shared memory, so use max_parity_nodes<> here
        c2v_.process_row_init<CHECK_IDX, max_parity_nodes<BG>::value>(params, app, app_addr);
        c2v_.store_shared(params, CHECK_IDX, NUM_SMEM_VNODES * Z * sizeof(c2v_t::app_t));
    }
    //------------------------------------------------------------------
    // process_row()
    template <int CHECK_IDX>
    __device__
    void process_row(const LDPC_kernel_params& params,
                     word_t                   (&app)[app_max_words<app_t, BG>::value],
                     int                      (&app_addr)[max_row_degree<BG>::value])
    {
        // Assuming all APP data in shared memory, so use max_parity_nodes<> here
        c2v_.load_shared(params, CHECK_IDX, NUM_SMEM_VNODES * Z * sizeof(c2v_t::app_t));
        c2v_.process_row<CHECK_IDX, max_parity_nodes<BG>::value>(params, app, app_addr);
        c2v_.store_shared(params, CHECK_IDX, NUM_SMEM_VNODES * Z * sizeof(c2v_t::app_t));
    }
    //------------------------------------------------------------------
    // get_c2v_size_bytes()
    // Return the size, in bytes, required to store the given number of
    // parity nodes.
    static
    uint32_t get_c2v_size_bytes(int num_parity_nodes)
    {
        return (num_parity_nodes * Z * sizeof(typename c2v_t::c2v_storage_t));
    }
    //------------------------------------------------------------------
    // Data
    c2v_t c2v_;
};

} // namespace ldpc2

#endif // !defined(LDPC2_C2V_CACHE_SHARED_LWH_INCLUDED_)