set(CMAKE_SYSTEM_NAME Linux )
set(CMAKE_SYSTEM_PROCESSOR aarch64 )

#set(CMAKE_SYSROOT /powerpc64le-linux-gnu)

set(CMAKE_C_COMPILER /bin/aarch64-redhat-linux-gcc )
set(CMAKE_CXX_COMPILER /bin/aarch64-redhat-linux-g++ )
set(CMAKE_LWDA_COMPILER /usr/local/lwca/bin/lwcc)
set(CMAKE_ASM_COMPILER /bin/aarch64-redhat-linux-gcc )
set(CMAKE_LINKER /bin/aarch64-redhat-linux-gcc )
set(CMAKE_AR /usr/bin/ar CACHE FILEPATH "Archiver" )

set(CMAKE_C_COMPILER_TARGET aarch64 )
set(CMAKE_CXX_COMPILER_TARGET aarch64 )

set(LWDA_LWCC_EXELWTABLE /usr/local/lwca/bin/lwcc )
set(LWDA_INCLUDE_DIRS /usr/local/lwca/include )
set(LWDA_LWDART_LIBRARY /usr/local/lwca/lib64 )
set(LWDA_TOOLKIT_ROOT_DIR /usr/local/lwca )

set(CMAKE_FIND_ROOT_PATH /usr/local/lwca)

# Don't search for programs in the host environment
#set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# Search for the libraries and headers in the target environment
#set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
#set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
#set (CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

set(CMAKE_LWDA_HOST_COMPILER ${CMAKE_CXX_COMPILER} CACHE STRING "" FORCE)
#set(CMAKE_LWDA_COMPILER_FORCED TRUE)

# Set arch name for packaging purposes
set(SYS_ARCH ${CMAKE_SYSTEM_PROCESSOR})

# TODO For some reason, setting CMAKE_LWDA_HOST_COMPILER disables
# -std=c++11 on lwcc, make sure it is set
#set(CMAKE_LWDA_FLAGS "${CMAKE_LWDA_FLAGS} -std=c++11")

# TODO Need to specify target crt to linker. Lwrrently there is no way of
# passing linker flags without using general LWCA flags
#set(CMAKE_LWDA_FLAGS "${CMAKE_LWDA_FLAGS} -I${LWDA_INCLUDE_DIRS}")

# TODO Need to specify lwca libraries to target linker.
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L${LWDA_TOOLKIT_ROOT_DIR}/lib")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L${LWDA_TOOLKIT_ROOT_DIR}/lib -L${LWDA_TOOLKIT_ROOT_DIR}/lib/stubs")
