#ifdef USE_LWDNN
#include <vector>

#include "caffe/layers/lwdnn_softmax_layer.hpp"

namespace caffe {

template <typename Ftype, typename Btype>
void LwDNNSoftmaxLayer<Ftype, Btype>::Forward_gpu(const vector<Blob*>& bottom,
    const vector<Blob*>& top) {
  const Ftype* bottom_data = bottom[0]->gpu_data<Ftype>();
  Ftype* top_data = top[0]->mutable_gpu_data<Ftype>();
  LWDNN_CHECK(lwdnnSoftmaxForward(Caffe::lwdnn_handle(0), LWDNN_SOFTMAX_ACLWRATE,
        LWDNN_SOFTMAX_MODE_CHANNEL,
        lwdnn::dataType<Ftype>::one,
        fwd_bottom_desc_, bottom_data,
        lwdnn::dataType<Ftype>::zero,
        fwd_top_desc_, top_data));
  LWDA_CHECK(lwdaStreamSynchronize(Caffe::thread_stream(0)));
}

template <typename Ftype, typename Btype>
void LwDNNSoftmaxLayer<Ftype, Btype>::Backward_gpu(const vector<Blob*>& top,
    const vector<bool>& propagate_down, const vector<Blob*>& bottom) {
  if (propagate_down[0]) {
    const Btype* top_data = top[0]->gpu_data<Btype>();
    const Btype* top_diff = top[0]->gpu_diff<Btype>();
    Btype* bottom_diff = bottom[0]->mutable_gpu_diff<Btype>();

    LWDNN_CHECK(lwdnnSoftmaxBackward(
          Caffe::lwdnn_handle(0), LWDNN_SOFTMAX_ACLWRATE,
          LWDNN_SOFTMAX_MODE_CHANNEL,
          lwdnn::dataType<Btype>::one,
          bwd_top_desc_, top_data, bwd_top_desc_, top_diff,
          lwdnn::dataType<Btype>::zero,
          bwd_bottom_desc_, bottom_diff));
    LWDA_CHECK(lwdaStreamSynchronize(Caffe::thread_stream(0)));
  }
}

INSTANTIATE_LAYER_GPU_FUNCS_FB(LwDNNSoftmaxLayer);

}  // namespace caffe
#endif
