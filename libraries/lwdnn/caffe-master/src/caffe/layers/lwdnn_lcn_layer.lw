#ifdef USE_LWDNN
#include <vector>

#include "caffe/layers/lwdnn_lcn_layer.hpp"

namespace caffe {

template <typename Ftype, typename Btype>
void LwDNNLCNLayer<Ftype, Btype>::Forward_gpu(const vector<Blob*>& bottom,
    const vector<Blob*>& top) {
  const Ftype* bottom_data = bottom[0]->gpu_data<Ftype>();
  Ftype* top_data = top[0]->mutable_gpu_data<Ftype>();

  temp1_.reserve(tempDataSize_, Caffe::device());
  temp2_.reserve(tempDataSize_, Caffe::device());

  LWDNN_CHECK(lwdnnDivisiveNormalizationForward(
        Caffe::lwdnn_handle(0), norm_desc_, LWDNN_DIVNORM_PRECOMPUTED_MEANS,
        lwdnn::dataType<Ftype>::one,
        fwd_bottom_desc_, bottom_data,
        NULL,  // srcMeansData
        temp1_.data(), temp2_.data(),
        lwdnn::dataType<Ftype>::zero,
        fwd_top_desc_, top_data) );
  LWDA_CHECK(lwdaStreamSynchronize(Caffe::thread_stream(0)));

  temp1_.release();
  temp2_.release();
}

template <typename Ftype, typename Btype>
void LwDNNLCNLayer<Ftype, Btype>::Backward_gpu(const vector<Blob*>& top,
    const vector<bool>& propagate_down, const vector<Blob*>& bottom) {
  const Btype* top_diff = top[0]->gpu_diff<Btype>();
  const Btype* top_data = top[0]->gpu_data<Btype>();
  const Btype* bottom_data = bottom[0]->gpu_data<Btype>();
  Btype* bottom_diff = bottom[0]->mutable_gpu_diff<Btype>();

  temp1_.reserve(tempDataSize_, Caffe::device());
  temp2_.reserve(tempDataSize_, Caffe::device());

  LWDNN_CHECK(lwdnnDivisiveNormalizationBackward(
        Caffe::lwdnn_handle(0), norm_desc_,
        LWDNN_DIVNORM_PRECOMPUTED_MEANS,
        lwdnn::dataType<Btype>::one,
        bwd_bottom_desc_, bottom_data,
        NULL, top_diff,  // NULL - srcMeansData
        temp1_.data(), temp2_.data(),
        lwdnn::dataType<Btype>::zero,
        bwd_bottom_desc_, bottom_diff,
        NULL) );
  LWDA_CHECK(lwdaStreamSynchronize(Caffe::thread_stream(0)));

  temp1_.release();
  temp2_.release();
}

INSTANTIATE_LAYER_GPU_FUNCS_FB(LwDNNLCNLayer);

}  // namespace caffe
#endif
