CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.8)

OPTION(NDEBUG "disable asserts (WARNING: this may result in silent UB e.g. with out-of-bound indices)")
IF(NOT NDEBUG)
  MESSAGE(STATUS "Removing -DNDEBUG from compile flags")
  STRING(REPLACE "-DNDEBUG" "" CMAKE_C_FLAGS "" ${CMAKE_C_FLAGS})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_C_FLAGS_DEBUG "" ${CMAKE_C_FLAGS_DEBUG})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_C_FLAGS_RELEASE "" ${CMAKE_C_FLAGS_RELEASE})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_CXX_FLAGS "" ${CMAKE_CXX_FLAGS})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_CXX_FLAGS_DEBUG "" ${CMAKE_CXX_FLAGS_DEBUG})
  STRING(REPLACE "-DNDEBUG" "" CMAKE_CXX_FLAGS_RELEASE "" ${CMAKE_CXX_FLAGS_RELEASE})
ENDIF()

IF(NOT Torch_FOUND)
  FIND_PACKAGE(Torch REQUIRED)
ENDIF()

IF(NOT TH_LIBRARIES)
  SET(TH_LIBRARIES "TH")
ENDIF(NOT TH_LIBRARIES)
MESSAGE(STATUS "TH_LIBRARIES: ${TH_LIBRARIES}")
IF(NOT THC_LIBRARIES)
  SET(THC_LIBRARIES "THC")
ENDIF(NOT THC_LIBRARIES)
MESSAGE(STATUS "THC_LIBRARIES: ${THC_LIBRARIES}")

IF(NOT LWDA_FOUND)
  FIND_PACKAGE(LWCA 6.5 REQUIRED)
ENDIF()

IF ($ELW{TH_BINARY_BUILD})
  MESSAGE(STATUS "TH_BINARY_BUILD detected. Statically linking libstdc++")
  SET(CMAKE_CXX_FLAGS "-static-libstdc++ ${CMAKE_CXX_FLAGS}")
  IF (UNIX AND NOT APPLE)
    # hiding statically linked library symbols, this flag is not available for the linker under MACOSX
    SET(CMAKE_CXX_FLAGS "-Wl,--exclude-libs,libstdc++.a ${CMAKE_CXX_FLAGS}")
  ENDIF(UNIX AND NOT APPLE)
ENDIF()

#Â Detect LWCA architecture and get best LWCC flags
IF(NOT COMMAND LWDA_SELECT_LWCC_ARCH_FLAGS OR MSVC)
  INCLUDE(${CMAKE_LWRRENT_SOURCE_DIR}/cmake/select_compute_arch.cmake)
ENDIF()
LIST(APPEND LWDA_LWCC_FLAGS $ELW{TORCH_LWCC_FLAGS})
LWDA_SELECT_LWCC_ARCH_FLAGS(LWCC_FLAGS_EXTRA $ELW{TORCH_LWDA_ARCH_LIST})
LIST(APPEND LWDA_LWCC_FLAGS ${LWCC_FLAGS_EXTRA})

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9.3")
    if(LWDA_VERSION VERSION_LESS "8.0")
      MESSAGE(STATUS "Found gcc >=5 and LWCA <= 7.5, adding workaround C++ flags")
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_FORCE_INLINES -D_MWAITXINTRIN_H_INCLUDED -D__STRICT_ANSI__")
    endif(LWDA_VERSION VERSION_LESS "8.0")
  endif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9.3")
endif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")

if(LWDA_VERSION VERSION_GREATER "8.0")
  LIST(APPEND LWDA_LWCC_FLAGS "-D__LWDA_NO_HALF_OPERATORS__")
endif(LWDA_VERSION VERSION_GREATER "8.0")

IF(MSVC)
  LIST(APPEND LWDA_LWCC_FLAGS "-Xcompiler /wd4819")
  ADD_DEFINITIONS(-DTH_EXPORTS)
ENDIF()

IF(NOT THLWNN_INSTALL_LIB_SUBDIR)
  SET(THLWNN_INSTALL_LIB_SUBDIR "lib" CACHE PATH "THLWNN install library directory")
  SET(THLWNN_INSTALL_INCLUDE_SUBDIR "include" CACHE PATH "THLWNN install include subdirectory")
ENDIF()

FILE(GLOB src-lwca *.lw)

LWDA_INCLUDE_DIRECTORIES(${CMAKE_LWRRENT_SOURCE_DIR})
LWDA_ADD_LIBRARY(THLWNN MODULE ${src-lwca})

IF(MSVC)
  SET_TARGET_PROPERTIES(THLWNN PROPERTIES PREFIX "lib" IMPORT_PREFIX "lib")
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_LWRRENT_SOURCE_DIR})
TARGET_LINK_LIBRARIES(THLWNN ${THC_LIBRARIES} ${TH_LIBRARIES} ${LWDA_lwsparse_LIBRARY})

# Luarocks bug pre-14.04 prevents us from setting it for Lua-Torch
IF(THLWNN_SO_VERSION)
  MESSAGE(STATUS "THLWNN_SO_VERSION: ${THLWNN_SO_VERSION}")
  SET_TARGET_PROPERTIES(THLWNN PROPERTIES
    VERSION   ${THLWNN_SO_VERSION}
    SOVERSION ${THLWNN_SO_VERSION})
ENDIF(THLWNN_SO_VERSION)

INSTALL(TARGETS THLWNN LIBRARY DESTINATION ${THLWNN_INSTALL_LIB_SUBDIR})
INSTALL(FILES THLWNN.h DESTINATION "${THLWNN_INSTALL_INCLUDE_SUBDIR}/THLWNN")
INSTALL(FILES generic/THLWNN.h DESTINATION "${THLWNN_INSTALL_INCLUDE_SUBDIR}/THLWNN/generic")
