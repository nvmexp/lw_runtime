#include "lwmatrix/include/lwmatrix_kernels.lwh"
#include "lwmatrix/include/lwmatrix_operators.lwh"
#include <THC.h>
#include <algorithm>
#include "helper_lwda.h"

extern "C" {

  void addBias(THCState* state, THLwdaTensor* output, THLwdaTensor* bias) {
    int width = output->size[1];
    int height = output->size[0];
    float *odata = THLwdaTensor_data(state, output);
    float *bdata = THLwdaTensor_data(state, bias);
    dim3 threads(ADD_VEC_THREADS_X, ADD_VEC_THREADS_Y);
    dim3 blocks(std::min(512, DIVUP(width, ADD_VEC_THREADS_X)),
                std::min(NUM_BLOCKS_MAX, DIVUP(height, ADD_VEC_THREADS_Y)));
    lwdaStream_t stream = THCState_getLwrrentStream(state);
    kColVectorOp<LWMatrixBinaryOps::Add><<<blocks, threads, 0, stream>>>(
      odata, bdata, odata, width, height,
      output->stride[0], output->stride[0],
      LWMatrixBinaryOps::Add());
    getLastLwdaError("Kernel exelwtion failed");
  }

  void gradBias(THCState* state, THLwdaTensor* gradOutput, THLwdaTensor* gradBias, float scale) {
    dim3 threads(AWR_NUM_THREADS);
    dim3 blocks(1, gradOutput->size[0]);
    lwdaStream_t stream = THCState_getLwrrentStream(state);
    kAggRows_wholerow_nosync<<<blocks, threads, 0, stream>>>(
      THLwdaTensor_data(state, gradOutput),
      THLwdaTensor_data(state, gradBias),
      gradOutput->size[1],
      gradOutput->size[0],
      LWMatrixAggs::Sum(),
      LWMatrixOps::Identity(),
      LWMatrixBinaryOps::SecondScaled(scale));
  }

  // output = weights, input = wtemp
  void addSumCols(THCState* state, THLwdaTensor*output, THLwdaTensor*input) {
    int width = input->size[1];
    int height = input->size[0];
    THLwdaTensor_resize2d(state, output, 1, width);
    lwdaStream_t stream = THCState_getLwrrentStream(state);
    if ((height <= 2048 || width >= 4096)) {
      int numBlocks = DIVUP(width, NUM_SUM_COLS_THREADS_PER_BLOCK);
      THAssert(numBlocks * NUM_SUM_COLS_THREADS_PER_BLOCK >= width);
      THAssert(numBlocks < NUM_BLOCKS_MAX);
      lwdaTextureObject_t texInput = THLwdaTensor_getTextureObject(state, input);
      kDumbAggCols<LWMatrixAggs::Sum, LWMatrixOps::Identity, LWMatrixBinaryOps::SecondScaled>
        <<<numBlocks,NUM_SUM_COLS_THREADS_PER_BLOCK, 0, stream>>>(
          texInput,
          THLwdaTensor_data(state, output), width, height,
          LWMatrixAggs::Sum(), LWMatrixOps::Identity(),
          LWMatrixBinaryOps::SecondScaled(1.0));
      getLastLwdaError("kDumbAggCols: Kernel exelwtion failed");
      checkLwdaErrors(lwdaDestroyTextureObject(texInput));
    } else { // Specialize the case when we have very long columns and few of them
      const int sumLength = 128;
      THLwdaTensor* tmp = THLwdaTensor_newWithSize2d(state, DIVUP(height, sumLength), width);
      int numBlocksX = DIVUP(width, NUM_SUM_COLS_THREADS_PER_BLOCK);
      int numBlocksY = DIVUP(height, sumLength);
      dim3 blocks(numBlocksX, numBlocksY);
      dim3 threads(NUM_SUM_COLS_THREADS_PER_BLOCK);
      lwdaTextureObject_t texInput = THLwdaTensor_getTextureObject(state, input);
      kAggCols<LWMatrixAggs::Sum, LWMatrixOps::Identity><<<blocks,threads, 0, stream>>>(
        texInput, THLwdaTensor_data(state, tmp),
        width, height, sumLength, LWMatrixAggs::Sum(), LWMatrixOps::Identity());
      getLastLwdaError("kAggCols: Kernel exelwtion failed");
      checkLwdaErrors(lwdaDestroyTextureObject(texInput));

      int numBlocks = DIVUP(width, NUM_SUM_COLS_THREADS_PER_BLOCK);
      lwdaTextureObject_t texTmp = THLwdaTensor_getTextureObject(state, tmp);
      kDumbAggCols<LWMatrixAggs::Sum, LWMatrixOps::Identity, LWMatrixBinaryOps::SecondScaled>
        <<<numBlocks,NUM_SUM_COLS_THREADS_PER_BLOCK, 0, stream>>>(
          texTmp, THLwdaTensor_data(state, output), width, height,
          LWMatrixAggs::Sum(), LWMatrixOps::Identity(),
          LWMatrixBinaryOps::SecondScaled(1.0));
      getLastLwdaError("kDumbAggCols: Kernel exelwtion failed");
      checkLwdaErrors(lwdaDestroyTextureObject(texTmp));
      THLwdaTensor_free(state, tmp);
    }
  }
}
