##############################################################################
# drivers/lwme/lwmetf/makefile.lwmk
##############################################################################

# 1. Compile generate lwmetf.sys
# 2  Timestamps and create inf from inx file usnig stampinf.exe
# 3. INF2CAT to generates .cat file which is crc for sys & inf file.

include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk

include $(LW_SOURCE)/drivers/common/build/lwconfig.lwmk
LW_INCLUDES+=$(OUTPUTDIR)

include $(LW_SOURCE)/drivers/common/build/miniShared.lwmk

ifeq (,$(filter wddm2 winnext winfuture, $(LW_TARGET_OS)))
  $(error lwmetf can only be built for the wddm2, winnext, winfuture target OSes)
endif

ifeq ($(LW_TARGET_ARCH),x86)
  $(error lwmetf can only be built x64 target OSes)
endif

ifeq ($(LW_TARGET_ARCH),amd64)
  LW_CFG_ARCH_SUFFIX := _amd64
  MACHINE := AMD64
endif

# It is required to match KMDF & DDI version exactly. Otherwise in practice I see WdfFunctions* is null which is used in Wdf* calls in driver.
# In case of mismatch it resulted in page fault  WdfDriverCreate( WdfFunctions[WdfDriverCreateTableIndex](..))
# TODO: Lwrrently hardcoding Vibranium as required OS (KMDF 1.31, NTDDI_WIN10_VB, inf).
#       To fix for older OS need kmdf 1.31 spefified in inf via co-install 
        https://docs.microsoft.com/en-us/windows-hardware/drivers/wdf/installing-the-framework-s-co-installer
        
LW_NTDDI_VERSION=NTDDI_WIN10_VB      # NTDDI version - https://docs.microsoft.com/en-us/cpp/porting/modifying-wilwer-and-win32-winnt?view=msvc-160
LW_DEFINES += KMDF_VERSION_MAJOR=1   # KMDF  version - https://docs.microsoft.com/en-us/windows-hardware/drivers/wdf/kmdf-version-history
LW_DEFINES += KMDF_VERSION_MINOR=31  

ifdef LWCFG_INITIALIZED

SOURCES += Driver.cpp
SOURCES += SQueue.cpp
SOURCES += CQueue.cpp
SOURCES += $(LW_SOURCE)/drivers/common/src/lwMemoryWindows.cpp

endif # LWCFG_INITIALIZED

LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc
LW_INCLUDES += $(LW_TOOLS)/ddk/$(LW_DDK_VER)/$(LW_DDK_SUBVER)/Include/wdf/kmdf/1.31/

LW_DEFINES += LW_LDDM_KMODE

DRIVER_BASE_NAME := lwmetf

targetList_pass1 := $(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys

ifeq ($(LW_GEN_BSC),1)
  targetList_pass1 += $(LW_BSC_FILE)
endif

ifeq ($(LW_DO_INSTALL),1)
  targetList_pass2 += $(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).sys
  targetList_pass2 += $(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).map
  targetList_pass2 += $(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).inf
  targetList_pass2 += $(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).cat
  ifeq ($(LW_GEN_PDB),1)
    targetList_pass2 += $(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).pdb
  endif
endif

$(OUTPUTDIR)/$(DRIVER_BASE_NAME).map: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys
$(OUTPUTDIR)/$(DRIVER_BASE_NAME).pdb: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys
$(OUTPUTDIR)/$(DRIVER_BASE_NAME).bsc: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys

# Break our build into 2 passes that cannot be parallelized
#   In pass 1, we build our main targets, DLLs, EXEs etc.
#   In pass 2, we copy our built items to our install and symbol directories
#
# We do this in 2 passes by calling this makefile relwrsively so that our time stamps on dependencies
# are re-evaluated.  If we try to do all this in 1 pass during a parallel build, we'd find that subdirs
# could trigger a .lib to be rebuilt -- but we wouldn't relink the DLL because when the makefile for 
# this directory was STARTED... the .lib was not out of date.  [It was only out of date AFTER the child
# directory was complete.]
build: buildSequence

buildSequence:
	@$(MAKE) -f makefile.lwmk LW_TARGET_OS=$(LW_TARGET_OS) LW_TARGET_ARCH=$(LW_TARGET_ARCH) LW_BUILD_TYPE=$(LW_BUILD_TYPE) pass1
	@$(MAKE) -f makefile.lwmk LW_TARGET_OS=$(LW_TARGET_OS) LW_TARGET_ARCH=$(LW_TARGET_ARCH) LW_BUILD_TYPE=$(LW_BUILD_TYPE) pass2

pass1: $(targetList_pass1)
pass2: $(targetList_pass2)

# These are moved on clean or clobber
OTHER_FILES_TO_REMOVE += $(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).pdb
OTHER_FILES_TO_REMOVE += $(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).map
OTHER_FILES_TO_REMOVE += $(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).sys
OTHER_FILES_TO_REMOVE += $(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).inf
OTHER_FILES_TO_REMOVE += $(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).cat

include $(LW_SOURCE)/drivers/common/build/lwWindowsVersionRC.lwmk

# Code a couple of dependencies manually... since we don't auto-generate dependencies for RC files
$(OUTPUTDIR)/$(DRIVER_BASE_NAME).res: $(DRIVER_BASE_NAME).rc $(LW_SOURCE)/drivers/common/inc/lwVer.h $(LW_SOURCE)/drivers/common/inc/lwntver.h

$(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys: $(OBJECTS) $(OUTPUTDIR)/$(DRIVER_BASE_NAME).res
	@$(ECHO) linking $@
	$(FILEECHO) $(OUTPUTDIR)/linkParameters.txt $(strip $(LFLAGS)) $(OBJECTS) $(OUTPUTDIR)/$(DRIVER_BASE_NAME).res -out:$@
	$(call_linker)
	$(call LW_CHECK_GUARDWORDS_CMD,$@)

CFLAGS += -wd4005
CFLAGS += -wd4748
CFLAGS += -wd4603
CFLAGS += -wd4627
CFLAGS += -wd4986
CFLAGS += -wd4987

ifeq ($(LW_BUILD_TYPE),release)
  CFLAGS += -GS                 # Checks buffer security. /GS is on by default anyways
endif

# Compiler options to specify standard or Microsoft-specific compiler behavior.
CFLAGS += -Zc:wchar_t-
CFLAGS += -Zc:inline
CFLAGS += -Zc:forScope

LFLAGS += -merge:_page=page
LFLAGS += -merge:_text=.text
LFLAGS += -section:init,d
LFLAGS += -opt:ref
LFLAGS += -opt:icf
LFLAGS += -incremental:no       # Don't support incremental linking
LFLAGS += -release              # Adds checksum to header
LFLAGS += -nodefaultlib         # Use only specified libraries
LFLAGS += -driver
LFLAGS += -map                  # Generate a map file
LFLAGS += $(PCH_OBJECTS)

ifdef LWCFG_INITIALIZED
  ifneq (,$(findstring $(compiler), nt8_ddk msvc110 msvc110beta))
    # Kernel drivers require this flag. The compiler might generate
    # code not permitted by a kernel driver if this flag is not
    # set. Eventually the OS will refuse to load a kernel driver that
    # was linked without this flag.
    LFLAGS += -kernel
  endif
endif

ifeq ($(LW_TARGET_ARCH),amd64)
  LFLAGS += -ignore:4010,4037,4039,4065,4070,4078,4087,4089,4221,4108,4088,4218
  LFLAGS += -WX
  LFLAGS += -version:10.0              # Win10+
  LFLAGS += -subsystem:native,10.00    # Win10+

  LFLAGS += -libpath:$(LW_WDKSDK_LIB)/km/x64
  LFLAGS += -libpath:$(LW_TOOLS)/ddk/$(LW_DDK_VER)/$(LW_DDK_SUBVER)/lib/wdf/kmdf/x64/1.31

  # MSBuild sets the stub's FxDriverEntry routine as the initial entry point for framework-based drivers.
  # https://docs.microsoft.com/en-us/windows-hardware/drivers/wdf/building-and-loading-a-kmdf-driver
  LFLAGS += -entry:FxDriverEntry

endif

# Not linking cfg_support_v1.lib leads to linker errors.(Dependency not visible VCProject)
#    error LNK2001: unresolved external symbol __guard_iat_table
#    error LNK2001: unresolved external symbol __guard_iat_count
#    error LNK2001: unresolved external symbol __guard_longjmp_table
#    error LNK2001: unresolved external symbol __guard_longjmp_count

LFLAGS += cfg_support_v1.lib


LFLAGS += BufferOverflowFastFailK.lib
LFLAGS += ntoskrnl.lib
LFLAGS += hal.lib
LFLAGS += wmilib.lib
LFLAGS += WdfLdr.lib
LFLAGS += WdfDriverEntry.lib


STAMPINF = $(LW_WDKSDK_BIN)/x86/stampinf.exe
STAMPINF_ARGS += -i $(LW_WDKSDK_INC)/Shared
STAMPINF_ARGS += -a amd64
STAMPINF_ARGS += -k 1.31
STAMPINF_ARGS += -v *
STAMPINF_ARGS += -d *

INF2CAT_ARGS = /os:10_x64  /uselocaltime 

ifeq ($(LW_VERBOSE),1)
	# Noisy mode dumps verbose output
	STAMPINF_ARGS += -n
	INF2CAT_ARGS += /verbose
endif

$(OUTPUTDIR)/$(DRIVER_BASE_NAME).inf: $(DRIVER_BASE_NAME).inx $(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys
	@$(ECHO) Stamping inf
	$(COPY) $< $@
	$(LW_WDKSDK_BIN)/x86/stampinf.exe -f $@ $(STAMPINF_ARGS)

$(OUTPUTDIR)/$(DRIVER_BASE_NAME)/$(DRIVER_BASE_NAME).cat: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).inf $(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys
	@$(ECHO) Generating cat $(DRIVER_BASE_NAME).cat
	$(RMDIR) -rf $(OUTPUTDIR)/$(DRIVER_BASE_NAME)
	$(MKDIR) $(OUTPUTDIR)/$(DRIVER_BASE_NAME)
	$(COPY) $(OUTPUTDIR)/$(DRIVER_BASE_NAME).inf $(OUTPUTDIR)/$(DRIVER_BASE_NAME)\$(DRIVER_BASE_NAME).inf
	$(COPY) $(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys $(OUTPUTDIR)/$(DRIVER_BASE_NAME)\$(DRIVER_BASE_NAME).sys
	$(INF2CAT) /driver:$(OUTPUTDIR)/$(DRIVER_BASE_NAME) $(INF2CAT_ARGS)

$(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).sys: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys
	$(standard_install)

$(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).pdb: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).pdb
	$(standard_install)

$(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).map: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).map
	$(standard_install)

$(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).inf: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).inf 
	$(standard_install)

$(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).cat: $(OUTPUTDIR)/$(DRIVER_BASE_NAME)/$(DRIVER_BASE_NAME).cat $(OUTPUTDIR)/$(DRIVER_BASE_NAME).inf $(OUTPUTDIR)/$(DRIVER_BASE_NAME).sys
	$(standard_install)

# magically source-index the pdb file when required
$(eval $(call source_index_pdb,$(DRIVER_BASE_NAME).sys))

# Force the inclusion of this header
CFLAGS += -FI$(LW_TOOLS)/ddk/$(LW_DDK_VER)/$(LW_DDK_SUBVER)/Include/10.0.$(LW_DDK_SUBVER).0/shared/warning.h

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk
