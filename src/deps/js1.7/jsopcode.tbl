/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 * vim: set ts=8 sw=4 et tw=0 ft=C:
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * JavaScript operation bytecodes.  If you need to allocate a bytecode, look
 * for a name of the form JSOP_UNUSED* and claim it.  Otherwise, always add at
 * the end of the table.
 *
 * Includers must define an OPDEF macro of the following form:
 *
 * #define OPDEF(op,val,name,image,length,nuses,ndefs,prec,format) ...
 *
 * Selected arguments can be expanded in initializers.  The op argument is
 * expanded followed by comma in the JSOp enum (jsopcode.h), e.g.  The value
 * field must be dense for now, because jsopcode.c uses an OPDEF() expansion
 * inside the js_CodeSpec[] initializer.
 *
 * Field        Description
 * op           Bytecode name, which is the JSOp enumerator name
 * value        Bytecode value, which is the JSOp enumerator value
 * name         C string containing name for disassembler
 * image        C string containing "image" for pretty-printer, null if ugly
 * length       Number of bytes including any immediate operands
 * nuses        Number of stack slots consumed by bytecode, -1 if variadic
 * ndefs        Number of stack slots produced by bytecode
 * prec         Operator precedence, zero if not an operator
 * format       Bytecode plus immediate operand encoding format
 *
 * Precedence   Operators               Opcodes
 *  1           let (x = y) z, w        JSOP_LEAVEBLOCKEXPR
 *  2           ,                       JSOP_POP with SRC_PCDELTA note
 *  3           =, +=, etc.             JSOP_SETNAME, etc. (all JOF_ASSIGNING)
 *  4           ?:                      JSOP_IFEQ, JSOP_IFEQX
 *  5           ||                      JSOP_OR, JSOP_ORX
 *  6           &&                      JSOP_AND, JSOP_ANDX
 *  7           |                       JSOP_BITOR
 *  8           ^                       JSOP_BITXOR
 *  9           &                       JSOP_BITAND
 * 10           ==, !=, etc.            JSOP_EQ, JSOP_NE, etc.
 * 11           <, in, etc.             JSOP_LT, JSOP_IN, etc.
 * 12           <<, >>, >>>             JSOP_LSH, JSOP_RSH, JSOP_URSH
 * 13           +, -, etc.              JSOP_ADD, JSOP_SUB, etc.
 * 14           *, /, %                 JSOP_MUL, JSOP_DIV, JSOP_MOD
 * 15           !, ~, etc.              JSOP_NOT, JSOP_BITNOT, etc.
 * 16           0, function(){} etc.    JSOP_ZERO, JSOP_ANONFUNOBJ, etc.
 * 17           delete, new             JSOP_DEL*, JSOP_NEW
 * 18           x.y, f(), etc.          JSOP_GETPROP, JSOP_CALL, etc.
 * 19           x, null, etc.           JSOP_NAME, JSOP_NULL, etc.
 *
 * The push-numeric-constant operators, JSOP_ZERO, JSOP_NUMBER, etc., have
 * lower precedence than the member operators emitted for the . operator, to
 * cause the decompiler to parenthesize the . left operand, e.g. (0).foo.
 * Otherwise the . could be taken as a decimal point.  We use the same level
 * 16 for function expressions too, to force parenthesization.
 *
 * This file is best viewed with 128 columns:
12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
 */

/* legend:
      op                   val  name                      image            len use def prec  format */

/* Longstanding JavaScript bytecodes. */
OPDEF(JSOP_NOP,              0, MKJSID("nop"),            NULL,              1,  0,  0,   0, JOF_BYTE)
OPDEF(JSOP_PUSH,             1, MKJSID("push"),           NULL,              1,  0,  1,   0, JOF_BYTE)
OPDEF(JSOP_POPV,             2, MKJSID("popv"),           NULL,              1,  1,  0,   2, JOF_BYTE)
OPDEF(JSOP_ENTERWITH,        3, MKJSID("enterwith"),      NULL,              1,  1,  1,   0, JOF_BYTE)
OPDEF(JSOP_LEAVEWITH,        4, MKJSID("leavewith"),      NULL,              1,  1,  0,   0, JOF_BYTE)
OPDEF(JSOP_RETURN,           5, MKJSID("return"),         NULL,              1,  1,  0,   0, JOF_BYTE)
OPDEF(JSOP_GOTO,             6, MKJSID("goto"),           NULL,              3,  0,  0,   0, JOF_JUMP)
OPDEF(JSOP_IFEQ,             7, MKJSID("ifeq"),           NULL,              3,  1,  0,   4, JOF_JUMP|JOF_DETECTING)
OPDEF(JSOP_IFNE,             8, MKJSID("ifne"),           NULL,              3,  1,  0,   0, JOF_JUMP)

/* Get the arguments object for the current, lightweight function activation. */
OPDEF(JSOP_ARGUMENTS,        9, js_arguments_str,         js_arguments_str,  1,  0,  1,  18, JOF_BYTE)

/* ECMA-compliant for-in loop with argument or local variable loop control. */
OPDEF(JSOP_FORARG,          10, MKJSID("forarg"),         NULL,              3,  0,  1,  19, JOF_QARG|JOF_NAME|JOF_FOR)
OPDEF(JSOP_FORVAR,          11, MKJSID("forvar"),         NULL,              3,  0,  1,  19, JOF_QVAR|JOF_NAME|JOF_FOR)

/* More longstanding bytecodes. */
OPDEF(JSOP_DUP,             12, MKJSID("dup"),            NULL,              1,  1,  2,   0, JOF_BYTE)
OPDEF(JSOP_DUP2,            13, MKJSID("dup2"),           NULL,              1,  2,  4,   0, JOF_BYTE)
OPDEF(JSOP_SETCONST,        14, MKJSID("setconst"),       NULL,              3,  1,  1,   3, JOF_CONST|JOF_NAME|JOF_SET|JOF_ASSIGNING)
OPDEF(JSOP_BITOR,           15, MKJSID("bitor"),          MKJSID("|"),       1,  2,  1,   7, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_BITXOR,          16, MKJSID("bitxor"),         MKJSID("^"),       1,  2,  1,   8, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_BITAND,          17, MKJSID("bitand"),         MKJSID("&"),       1,  2,  1,   9, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_EQ,              18, MKJSID("eq"),             MKJSID("=="),      1,  2,  1,  10, JOF_BYTE|JOF_LEFTASSOC|JOF_DETECTING)
OPDEF(JSOP_NE,              19, MKJSID("ne"),             MKJSID("!="),      1,  2,  1,  10, JOF_BYTE|JOF_LEFTASSOC|JOF_DETECTING)
OPDEF(JSOP_LT,              20, MKJSID("lt"),             MKJSID("<"),       1,  2,  1,  11, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_LE,              21, MKJSID("le"),             MKJSID("<="),      1,  2,  1,  11, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_GT,              22, MKJSID("gt"),             MKJSID(">"),       1,  2,  1,  11, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_GE,              23, MKJSID("ge"),             MKJSID(">="),      1,  2,  1,  11, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_LSH,             24, MKJSID("lsh"),            MKJSID("<<"),      1,  2,  1,  12, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_RSH,             25, MKJSID("rsh"),            MKJSID(">>"),      1,  2,  1,  12, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_URSH,            26, MKJSID("ursh"),           MKJSID(">>>"),     1,  2,  1,  12, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_ADD,             27, MKJSID("add"),            MKJSID("+"),       1,  2,  1,  13, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_SUB,             28, MKJSID("sub"),            MKJSID("-"),       1,  2,  1,  13, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_MUL,             29, MKJSID("mul"),            MKJSID("*"),       1,  2,  1,  14, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_DIV,             30, MKJSID("div"),            MKJSID("/"),       1,  2,  1,  14, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_MOD,             31, MKJSID("mod"),            MKJSID("%"),       1,  2,  1,  14, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_NOT,             32, MKJSID("not"),            MKJSID("!"),       1,  1,  1,  15, JOF_BYTE|JOF_DETECTING)
OPDEF(JSOP_BITNOT,          33, MKJSID("bitnot"),         MKJSID("~"),       1,  1,  1,  15, JOF_BYTE)
OPDEF(JSOP_NEG,             34, MKJSID("neg"),            MKJSID("- "),      1,  1,  1,  15, JOF_BYTE)
OPDEF(JSOP_NEW,             35, js_new_str,               NULL,              3, -1,  1,  17, JOF_UINT16)
OPDEF(JSOP_DELNAME,         36, MKJSID("delname"),        NULL,              3,  0,  1,  17, JOF_CONST|JOF_NAME|JOF_DEL)
OPDEF(JSOP_DELPROP,         37, MKJSID("delprop"),        NULL,              3,  1,  1,  17, JOF_CONST|JOF_PROP|JOF_DEL)
OPDEF(JSOP_DELELEM,         38, MKJSID("delelem"),        NULL,              1,  2,  1,  17, JOF_BYTE |JOF_ELEM|JOF_DEL)
OPDEF(JSOP_TYPEOF,          39, js_typeof_str,            NULL,              1,  1,  1,  15, JOF_BYTE|JOF_DETECTING)
OPDEF(JSOP_VOID,            40, js_void_str,              NULL,              1,  1,  1,  15, JOF_BYTE)
OPDEF(JSOP_INCNAME,         41, MKJSID("incname"),        NULL,              3,  0,  1,  15, JOF_CONST|JOF_NAME|JOF_INC)
OPDEF(JSOP_INCPROP,         42, MKJSID("incprop"),        NULL,              3,  1,  1,  15, JOF_CONST|JOF_PROP|JOF_INC)
OPDEF(JSOP_INCELEM,         43, MKJSID("incelem"),        NULL,              1,  2,  1,  15, JOF_BYTE |JOF_ELEM|JOF_INC)
OPDEF(JSOP_DECNAME,         44, MKJSID("decname"),        NULL,              3,  0,  1,  15, JOF_CONST|JOF_NAME|JOF_DEC)
OPDEF(JSOP_DECPROP,         45, MKJSID("decprop"),        NULL,              3,  1,  1,  15, JOF_CONST|JOF_PROP|JOF_DEC)
OPDEF(JSOP_DECELEM,         46, MKJSID("decelem"),        NULL,              1,  2,  1,  15, JOF_BYTE |JOF_ELEM|JOF_DEC)
OPDEF(JSOP_NAMEINC,         47, MKJSID("nameinc"),        NULL,              3,  0,  1,  15, JOF_CONST|JOF_NAME|JOF_INC|JOF_POST)
OPDEF(JSOP_PROPINC,         48, MKJSID("propinc"),        NULL,              3,  1,  1,  15, JOF_CONST|JOF_PROP|JOF_INC|JOF_POST)
OPDEF(JSOP_ELEMINC,         49, MKJSID("eleminc"),        NULL,              1,  2,  1,  15, JOF_BYTE |JOF_ELEM|JOF_INC|JOF_POST)
OPDEF(JSOP_NAMEDEC,         50, MKJSID("namedec"),        NULL,              3,  0,  1,  15, JOF_CONST|JOF_NAME|JOF_DEC|JOF_POST)
OPDEF(JSOP_PROPDEC,         51, MKJSID("propdec"),        NULL,              3,  1,  1,  15, JOF_CONST|JOF_PROP|JOF_DEC|JOF_POST)
OPDEF(JSOP_ELEMDEC,         52, MKJSID("elemdec"),        NULL,              1,  2,  1,  15, JOF_BYTE |JOF_ELEM|JOF_DEC|JOF_POST)
OPDEF(JSOP_GETPROP,         53, MKJSID("getprop"),        NULL,              3,  1,  1,  18, JOF_CONST|JOF_PROP)
OPDEF(JSOP_SETPROP,         54, MKJSID("setprop"),        NULL,              3,  2,  1,   3, JOF_CONST|JOF_PROP|JOF_SET|JOF_ASSIGNING|JOF_DETECTING)
OPDEF(JSOP_GETELEM,         55, MKJSID("getelem"),        NULL,              1,  2,  1,  18, JOF_BYTE |JOF_ELEM|JOF_LEFTASSOC)
OPDEF(JSOP_SETELEM,         56, MKJSID("setelem"),        NULL,              1,  3,  1,   3, JOF_BYTE |JOF_ELEM|JOF_SET|JOF_ASSIGNING|JOF_DETECTING)
OPDEF(JSOP_PUSHOBJ,         57, MKJSID("pushobj"),        NULL,              1,  0,  1,   0, JOF_BYTE)
OPDEF(JSOP_CALL,            58, MKJSID("call"),           NULL,              3, -1,  1,  18, JOF_UINT16)
OPDEF(JSOP_NAME,            59, MKJSID("name"),           NULL,              3,  0,  1,  19, JOF_CONST|JOF_NAME)
OPDEF(JSOP_NUMBER,          60, MKJSID("number"),         NULL,              3,  0,  1,  16, JOF_CONST)
OPDEF(JSOP_STRING,          61, MKJSID("string"),         NULL,              3,  0,  1,  19, JOF_CONST)
OPDEF(JSOP_ZERO,            62, MKJSID("zero"),           MKJSID("0"),       1,  0,  1,  16, JOF_BYTE)
OPDEF(JSOP_ONE,             63, MKJSID("one"),            MKJSID("1"),       1,  0,  1,  16, JOF_BYTE)
OPDEF(JSOP_NULL,            64, js_null_str,              js_null_str,       1,  0,  1,  19, JOF_BYTE)
OPDEF(JSOP_THIS,            65, js_this_str,              js_this_str,       1,  0,  1,  19, JOF_BYTE)
OPDEF(JSOP_FALSE,           66, js_false_str,             js_false_str,      1,  0,  1,  19, JOF_BYTE)
OPDEF(JSOP_TRUE,            67, js_true_str,              js_true_str,       1,  0,  1,  19, JOF_BYTE)
OPDEF(JSOP_OR,              68, MKJSID("or"),             NULL,              3,  1,  0,   5, JOF_JUMP|JOF_DETECTING)
OPDEF(JSOP_AND,             69, MKJSID("and"),            NULL,              3,  1,  0,   6, JOF_JUMP|JOF_DETECTING)

/* The switch bytecodes have variable length. */
OPDEF(JSOP_TABLESWITCH,     70, MKJSID("tableswitch"),    NULL,             -1,  1,  0,   0, JOF_TABLESWITCH|JOF_DETECTING)
OPDEF(JSOP_LOOKUPSWITCH,    71, MKJSID("lookupswitch"),   NULL,             -1,  1,  0,   0, JOF_LOOKUPSWITCH|JOF_DETECTING)

/* New, infallible/transitive identity ops. */
OPDEF(JSOP_NEW_EQ,          72, MKJSID("eq"),             NULL,              1,  2,  1,  10, JOF_BYTE|JOF_DETECTING)
OPDEF(JSOP_NEW_NE,          73, MKJSID("ne"),             NULL,              1,  2,  1,  10, JOF_BYTE|JOF_DETECTING)

/* Lexical closure constructor. */
OPDEF(JSOP_CLOSURE,         74, MKJSID("closure"),        NULL,              3,  0,  0,   0, JOF_CONST)

/* Export and import ops. */
OPDEF(JSOP_EXPORTALL,       75, MKJSID("exportall"),      NULL,              1,  0,  0,   0, JOF_BYTE)
OPDEF(JSOP_EXPORTNAME,      76, MKJSID("exportname"),     NULL,              3,  0,  0,   0, JOF_CONST|JOF_NAME)
OPDEF(JSOP_IMPORTALL,       77, MKJSID("importall"),      NULL,              1,  1,  0,   0, JOF_BYTE)
OPDEF(JSOP_IMPORTPROP,      78, MKJSID("importprop"),     NULL,              3,  1,  0,   0, JOF_CONST|JOF_PROP|JOF_IMPORT)
OPDEF(JSOP_IMPORTELEM,      79, MKJSID("importelem"),     NULL,              1,  2,  0,   0, JOF_BYTE |JOF_ELEM|JOF_IMPORT)

/* Push object literal. */
OPDEF(JSOP_OBJECT,          80, MKJSID("object"),         NULL,              3,  0,  1,  19, JOF_CONST)

/* Pop value and discard it. */
OPDEF(JSOP_POP,             81, MKJSID("pop"),            NULL,              1,  1,  0,   2, JOF_BYTE)

/* Colwert value to number, for unary +. */
OPDEF(JSOP_POS,             82, MKJSID("pos"),            MKJSID("+ "),      1,  1,  1,  15, JOF_BYTE)

/* Trap into debugger for breakpoint, etc. */
OPDEF(JSOP_TRAP,            83, MKJSID("trap"),           NULL,              1,  0,  0,   0, JOF_BYTE)

/* Fast get/set ops for function arguments and local variables. */
OPDEF(JSOP_GETARG,          84, MKJSID("getarg"),         NULL,              3,  0,  1,  19, JOF_QARG |JOF_NAME)
OPDEF(JSOP_SETARG,          85, MKJSID("setarg"),         NULL,              3,  1,  1,   3, JOF_QARG |JOF_NAME|JOF_SET|JOF_ASSIGNING)
OPDEF(JSOP_GETVAR,          86, MKJSID("getvar"),         NULL,              3,  0,  1,  19, JOF_QVAR |JOF_NAME)
OPDEF(JSOP_SETVAR,          87, MKJSID("setvar"),         NULL,              3,  1,  1,   3, JOF_QVAR |JOF_NAME|JOF_SET|JOF_ASSIGNING|JOF_DETECTING)

/* Push unsigned 16-bit int constant. */
OPDEF(JSOP_UINT16,          88, MKJSID("uint16"),         NULL,              3,  0,  1,  16, JOF_UINT16)

/* Object and array literal support. */
OPDEF(JSOP_NEWINIT,         89, MKJSID("newinit"),        NULL,              1,  2,  1,   0, JOF_BYTE)
OPDEF(JSOP_ENDINIT,         90, MKJSID("endinit"),        NULL,              1,  0,  0,  19, JOF_BYTE)
OPDEF(JSOP_INITPROP,        91, MKJSID("initprop"),       NULL,              3,  1,  0,   3, JOF_CONST|JOF_PROP|JOF_DETECTING)
OPDEF(JSOP_INITELEM,        92, MKJSID("initelem"),       NULL,              1,  2,  0,   3, JOF_BYTE |JOF_ELEM|JOF_DETECTING)
OPDEF(JSOP_DEFSHARP,        93, MKJSID("defsharp"),       NULL,              3,  0,  0,   0, JOF_UINT16)
OPDEF(JSOP_USESHARP,        94, MKJSID("usesharp"),       NULL,              3,  0,  1,   0, JOF_UINT16)

/* Fast inc/dec ops for args and local vars. */
OPDEF(JSOP_INCARG,          95, MKJSID("incarg"),         NULL,              3,  0,  1,  15, JOF_QARG |JOF_NAME|JOF_INC)
OPDEF(JSOP_INCVAR,          96, MKJSID("incvar"),         NULL,              3,  0,  1,  15, JOF_QVAR |JOF_NAME|JOF_INC)
OPDEF(JSOP_DECARG,          97, MKJSID("decarg"),         NULL,              3,  0,  1,  15, JOF_QARG |JOF_NAME|JOF_DEC)
OPDEF(JSOP_DECVAR,          98, MKJSID("decvar"),         NULL,              3,  0,  1,  15, JOF_QVAR |JOF_NAME|JOF_DEC)
OPDEF(JSOP_ARGINC,          99, MKJSID("arginc"),         NULL,              3,  0,  1,  15, JOF_QARG |JOF_NAME|JOF_INC|JOF_POST)
OPDEF(JSOP_VARINC,         100, MKJSID("varinc"),         NULL,              3,  0,  1,  15, JOF_QVAR |JOF_NAME|JOF_INC|JOF_POST)
OPDEF(JSOP_ARGDEC,         101, MKJSID("argdec"),         NULL,              3,  0,  1,  15, JOF_QARG |JOF_NAME|JOF_DEC|JOF_POST)
OPDEF(JSOP_VARDEC,         102, MKJSID("vardec"),         NULL,              3,  0,  1,  15, JOF_QVAR |JOF_NAME|JOF_DEC|JOF_POST)

/*
 * Initialize for-in iterator. See also JSOP_FOREACH and JSOP_FOREACHKEYVAL.
 */
OPDEF(JSOP_FORIN,          103, MKJSID("forin"),          NULL,              1,  1,  1,   0, JOF_BYTE)

/* ECMA-compliant for/in ops. */
OPDEF(JSOP_FORNAME,        104, MKJSID("forname"),        NULL,              3,  0,  1,  19, JOF_CONST|JOF_NAME|JOF_FOR)
OPDEF(JSOP_FORPROP,        105, MKJSID("forprop"),        NULL,              3,  1,  1,  18, JOF_CONST|JOF_PROP|JOF_FOR)
OPDEF(JSOP_FORELEM,        106, MKJSID("forelem"),        NULL,              1,  1,  3,  18, JOF_BYTE |JOF_ELEM|JOF_FOR)
OPDEF(JSOP_POP2,           107, MKJSID("pop2"),           NULL,              1,  2,  0,   0, JOF_BYTE)

/* ECMA-compliant assignment ops. */
OPDEF(JSOP_BINDNAME,       108, MKJSID("bindname"),       NULL,              3,  0,  1,   0, JOF_CONST|JOF_NAME|JOF_SET|JOF_ASSIGNING)
OPDEF(JSOP_SETNAME,        109, MKJSID("setname"),        NULL,              3,  2,  1,   3, JOF_CONST|JOF_NAME|JOF_SET|JOF_ASSIGNING|JOF_DETECTING)

/* Exception handling ops. */
OPDEF(JSOP_THROW,          110, MKJSID("throw"),          NULL,              1,  1,  0,   0, JOF_BYTE)

/* 'in' and 'instanceof' ops. */
OPDEF(JSOP_IN,             111, js_in_str,                js_in_str,         1,  2,  1,  11, JOF_BYTE|JOF_LEFTASSOC)
OPDEF(JSOP_INSTANCEOF,     112, js_instanceof_str,        js_instanceof_str, 1,  2,  1,  11, JOF_BYTE|JOF_LEFTASSOC)

/* debugger op */
OPDEF(JSOP_DEBUGGER,       113, MKJSID("debugger"),       NULL,              1,  0,  0,   0, JOF_BYTE)

/* gosub/retsub for finally handling */
OPDEF(JSOP_GOSUB,          114, MKJSID("gosub"),          NULL,              3,  0,  0,   0, JOF_JUMP)
OPDEF(JSOP_RETSUB,         115, MKJSID("retsub"),         NULL,              1,  0,  0,   0, JOF_BYTE)

/* More exception handling ops. */
OPDEF(JSOP_EXCEPTION,      116, MKJSID("exception"),      NULL,              1,  0,  1,   0, JOF_BYTE)
OPDEF(JSOP_SETSP,          117, MKJSID("setsp"),          NULL,              3,  0,  0,   0, JOF_UINT16)

/*
 * ECMA-compliant switch statement ops.
 * CONDSWITCH is a decompilable NOP; CASE is ===, POP, jump if true, re-push
 * lval if false; and DEFAULT is POP lval and GOTO.
 */
OPDEF(JSOP_CONDSWITCH,     118, MKJSID("condswitch"),     NULL,              1,  0,  0,   0, JOF_BYTE)
OPDEF(JSOP_CASE,           119, MKJSID("case"),           NULL,              3,  1,  0,   0, JOF_JUMP)
OPDEF(JSOP_DEFAULT,        120, MKJSID("default"),        NULL,              3,  1,  0,   0, JOF_JUMP)

/*
 * ECMA-compliant call to eval op
 */
OPDEF(JSOP_EVAL,           121, MKJSID("eval"),           NULL,              3, -1,  1,  18, JOF_UINT16)

/*
 * ECMA-compliant helper for 'for (x[i] in o)' loops.
 */
OPDEF(JSOP_ENUMELEM,       122, MKJSID("enumelem"),       NULL,              1,  3,  0,   3, JOF_BYTE |JOF_SET|JOF_ASSIGNING)

/*
 * Getter and setter prefix bytecodes.  These modify the next bytecode, either
 * an assignment or a property initializer code, which then defines a property
 * getter or setter.
 */
OPDEF(JSOP_GETTER,         123, js_getter_str,            NULL,              1,  0,  0,   0, JOF_BYTE)
OPDEF(JSOP_SETTER,         124, js_setter_str,            NULL,              1,  0,  0,   0, JOF_BYTE)

/*
 * Prolog bytecodes for defining function, var, and const names.
 */
OPDEF(JSOP_DEFFUN,         125, MKJSID("deffun"),         NULL,              3,  0,  0,   0, JOF_CONST|JOF_DECLARING)
OPDEF(JSOP_DEFCONST,       126, MKJSID("defconst"),       NULL,              3,  0,  0,   0, JOF_CONST|JOF_DECLARING)
OPDEF(JSOP_DEFVAR,         127, MKJSID("defvar"),         NULL,              3,  0,  0,   0, JOF_CONST|JOF_DECLARING)

/* Auto-clone (if needed due to re-parenting) and push an anonymous function. */
OPDEF(JSOP_ANONFUNOBJ,     128, MKJSID("anonfunobj"),     NULL,              3,  0,  1,  16, JOF_CONST)

/* ECMA ed. 3 named function expression. */
OPDEF(JSOP_NAMEDFUNOBJ,    129, MKJSID("namedfunobj"),    NULL,              3,  0,  1,  16, JOF_CONST)

/*
 * Like JSOP_SETLOCAL, but specialized to avoid requiring JSOP_POP immediately
 * after to throw away the exception value.
 */
OPDEF(JSOP_SETLOCALPOP,    130, MKJSID("setlocalpop"),    NULL,              3,  1,  0,   3, JOF_LOCAL|JOF_NAME|JOF_SET)

/* ECMA-mandated parenthesization opcode, which nulls the reference base register, obj; see jsinterp.c. */
OPDEF(JSOP_GROUP,          131, MKJSID("group"),          NULL,              1,  0,  0,   0, JOF_BYTE)

/* Host object extension: given 'o.item(i) = j', the left-hand side compiles JSOP_SETCALL, rather than JSOP_CALL. */
OPDEF(JSOP_SETCALL,        132, MKJSID("setcall"),        NULL,              3, -1,  2,  18, JOF_UINT16|JOF_SET|JOF_ASSIGNING)

/*
 * Exception handling no-ops, for more economical byte-coding than SRC_TRYFIN
 * srcnote-annotated JSOP_NOPs.
 */
OPDEF(JSOP_FINALLY,        134, MKJSID("finally"),        NULL,              1,  0,  0,   0, JOF_BYTE)
OPDEF(JSOP_TRY,            133, MKJSID("try"),            NULL,              1,  0,  0,   0, JOF_BYTE)

/*
 * Swap the top two stack elements.
 */
OPDEF(JSOP_SWAP,           135, MKJSID("swap"),           NULL,              1,  2,  2,   0, JOF_BYTE)

/*
 * Bytecodes that avoid making an arguments object in most cases:
 * JSOP_ARGSUB gets arguments[i] from fp->argv, iff i is in [0, fp->argc-1].
 * JSOP_ARGCNT returns fp->argc.
 */
OPDEF(JSOP_ARGSUB,         136, MKJSID("argsub"),         NULL,              3,  0,  1,  18, JOF_QARG |JOF_NAME)
OPDEF(JSOP_ARGCNT,         137, MKJSID("argcnt"),         NULL,              1,  0,  1,  18, JOF_BYTE)

/*
 * Define a local function object as a local variable.
 * The local variable's slot number is the first immediate two-byte operand.
 * The function object's atom index is the second immediate operand.
 */
OPDEF(JSOP_DEFLOCALFUN,    138, MKJSID("deflocalfun"),    NULL,              5,  0,  0,   0, JOF_INDEXCONST|JOF_DECLARING)

/* Extended jumps. */
OPDEF(JSOP_GOTOX,          139, MKJSID("gotox"),          NULL,              5,  0,  0,   0, JOF_JUMPX)
OPDEF(JSOP_IFEQX,          140, MKJSID("ifeqx"),          NULL,              5,  1,  0,   3, JOF_JUMPX|JOF_DETECTING)
OPDEF(JSOP_IFNEX,          141, MKJSID("ifnex"),          NULL,              5,  1,  0,   0, JOF_JUMPX)
OPDEF(JSOP_ORX,            142, MKJSID("orx"),            NULL,              5,  1,  0,   5, JOF_JUMPX|JOF_DETECTING)
OPDEF(JSOP_ANDX,           143, MKJSID("andx"),           NULL,              5,  1,  0,   6, JOF_JUMPX|JOF_DETECTING)
OPDEF(JSOP_GOSUBX,         144, MKJSID("gosubx"),         NULL,              5,  0,  0,   0, JOF_JUMPX)
OPDEF(JSOP_CASEX,          145, MKJSID("casex"),          NULL,              5,  1,  0,   0, JOF_JUMPX)
OPDEF(JSOP_DEFAULTX,       146, MKJSID("defaultx"),       NULL,              5,  1,  0,   0, JOF_JUMPX)
OPDEF(JSOP_TABLESWITCHX,   147, MKJSID("tableswitchx"),   NULL,             -1,  1,  0,   0, JOF_TABLESWITCHX|JOF_DETECTING)
OPDEF(JSOP_LOOKUPSWITCHX,  148, MKJSID("lookupswitchx"),  NULL,             -1,  1,  0,   0, JOF_LOOKUPSWITCHX|JOF_DETECTING)

/* Placeholders for a real jump opcode set during backpatch chain fixup. */
OPDEF(JSOP_BACKPATCH,      149, MKJSID("backpatch"),      NULL,              3,  0,  0,   0, JOF_JUMP|JOF_BACKPATCH)
OPDEF(JSOP_BACKPATCH_POP,  150, MKJSID("backpatch_pop"),  NULL,              3,  1,  0,   0, JOF_JUMP|JOF_BACKPATCH)

/* Set pending exception from the stack, to trigger rethrow. */
OPDEF(JSOP_THROWING,       151, MKJSID("throwing"),       NULL,              1,  1,  0,   0, JOF_BYTE)

/* Set and get return value pseudo-register in stack frame. */
OPDEF(JSOP_SETRVAL,        152, MKJSID("setrval"),        NULL,              1,  1,  0,   0, JOF_BYTE)
OPDEF(JSOP_RETRVAL,        153, MKJSID("retrval"),        NULL,              1,  0,  0,   0, JOF_BYTE)

/* Optimized global variable ops (we don't bother doing a JSOP_FORGVAR op). */
OPDEF(JSOP_GETGVAR,        154, MKJSID("getgvar"),        NULL,              3,  0,  1,  19, JOF_CONST|JOF_NAME)
OPDEF(JSOP_SETGVAR,        155, MKJSID("setgvar"),        NULL,              3,  1,  1,   3, JOF_CONST|JOF_NAME|JOF_SET|JOF_ASSIGNING|JOF_DETECTING)
OPDEF(JSOP_INCGVAR,        156, MKJSID("incgvar"),        NULL,              3,  0,  1,  15, JOF_CONST|JOF_NAME|JOF_INC)
OPDEF(JSOP_DECGVAR,        157, MKJSID("decgvar"),        NULL,              3,  0,  1,  15, JOF_CONST|JOF_NAME|JOF_DEC)
OPDEF(JSOP_GVARINC,        158, MKJSID("gvarinc"),        NULL,              3,  0,  1,  15, JOF_CONST|JOF_NAME|JOF_INC|JOF_POST)
OPDEF(JSOP_GVARDEC,        159, MKJSID("gvardec"),        NULL,              3,  0,  1,  15, JOF_CONST|JOF_NAME|JOF_DEC|JOF_POST)

/* Regular expression literal requiring special MKJSID("fork on exec") handling. */
OPDEF(JSOP_REGEXP,         160, MKJSID("regexp"),         NULL,              3,  0,  1,  19, JOF_CONST)

/* XML (ECMA-357, a.k.a. MKJSID("E4X")) support. */
OPDEF(JSOP_DEFXMLNS,       161, MKJSID("defxmlns"),       NULL,              1,  1,  0,   0, JOF_BYTE)
OPDEF(JSOP_ANYNAME,        162, MKJSID("anyname"),        NULL,              1,  0,  1,  19, JOF_BYTE|JOF_XMLNAME)
OPDEF(JSOP_QNAMEPART,      163, MKJSID("qnamepart"),      NULL,              3,  0,  1,  19, JOF_CONST|JOF_XMLNAME)
OPDEF(JSOP_QNAMECONST,     164, MKJSID("qnameconst"),     NULL,              3,  1,  1,  19, JOF_CONST|JOF_XMLNAME)
OPDEF(JSOP_QNAME,          165, MKJSID("qname"),          NULL,              1,  2,  1,   0, JOF_BYTE|JOF_XMLNAME)
OPDEF(JSOP_TOATTRNAME,     166, MKJSID("toattrname"),     NULL,              1,  1,  1,  19, JOF_BYTE|JOF_XMLNAME)
OPDEF(JSOP_TOATTRVAL,      167, MKJSID("toattrval"),      NULL,              1,  1,  1,  19, JOF_BYTE)
OPDEF(JSOP_ADDATTRNAME,    168, MKJSID("addattrname"),    NULL,              1,  2,  1,  13, JOF_BYTE)
OPDEF(JSOP_ADDATTRVAL,     169, MKJSID("addattrval"),     NULL,              1,  2,  1,  13, JOF_BYTE)
OPDEF(JSOP_BINDXMLNAME,    170, MKJSID("bindxmlname"),    NULL,              1,  1,  2,   3, JOF_BYTE|JOF_SET|JOF_ASSIGNING)
OPDEF(JSOP_SETXMLNAME,     171, MKJSID("setxmlname"),     NULL,              1,  3,  1,   3, JOF_BYTE|JOF_SET|JOF_ASSIGNING|JOF_DETECTING)
OPDEF(JSOP_XMLNAME,        172, MKJSID("xmlname"),        NULL,              1,  1,  1,  19, JOF_BYTE)
OPDEF(JSOP_DESCENDANTS,    173, MKJSID("descendants"),    NULL,              1,  2,  1,  18, JOF_BYTE)
OPDEF(JSOP_FILTER,         174, MKJSID("filter"),         NULL,              3,  1,  1,   0, JOF_JUMP)
OPDEF(JSOP_ENDFILTER,      175, MKJSID("endfilter"),      NULL,              1,  1,  0,  18, JOF_BYTE)
OPDEF(JSOP_TOXML,          176, MKJSID("toxml"),          NULL,              1,  1,  1,  19, JOF_BYTE)
OPDEF(JSOP_TOXMLLIST,      177, MKJSID("toxmllist"),      NULL,              1,  1,  1,  19, JOF_BYTE)
OPDEF(JSOP_XMLTAGEXPR,     178, MKJSID("xmltagexpr"),     NULL,              1,  1,  1,   0, JOF_BYTE)
OPDEF(JSOP_XMLELTEXPR,     179, MKJSID("xmleltexpr"),     NULL,              1,  1,  1,   0, JOF_BYTE)
OPDEF(JSOP_XMLOBJECT,      180, MKJSID("xmlobject"),      NULL,              3,  0,  1,  19, JOF_CONST)
OPDEF(JSOP_XMLCDATA,       181, MKJSID("xmlcdata"),       NULL,              3,  0,  1,  19, JOF_CONST)
OPDEF(JSOP_XMLCOMMENT,     182, MKJSID("xmlcomment"),     NULL,              3,  0,  1,  19, JOF_CONST)
OPDEF(JSOP_XMLPI,          183, MKJSID("xmlpi"),          NULL,              3,  1,  1,  19, JOF_CONST)
OPDEF(JSOP_GETMETHOD,      184, MKJSID("getmethod"),      NULL,              3,  1,  1,  18, JOF_CONST|JOF_PROP)
OPDEF(JSOP_GETFUNNS,       185, MKJSID("getfunns"),       NULL,              1,  0,  1,  19, JOF_BYTE)
OPDEF(JSOP_FOREACH,        186, MKJSID("foreach"),        NULL,              1,  1,  1,   0, JOF_BYTE)
OPDEF(JSOP_DELDESC,        187, MKJSID("deldesc"),        NULL,              1,  2,  1,  17, JOF_BYTE |JOF_ELEM|JOF_DEL)

/*
 * Opcodes for extended literal addressing, using unsigned 24-bit immediate
 * operands to hold integer operands (JSOP_UINT24), extended atom indexes in
 * script->atomMap (JSOP_LITERAL, JSOP_FINDNAME), and ops prefixed by such
 * atom index immediates (JSOP_LITOPX).  See jsemit.c, EmitAtomIndexOp.
 */
OPDEF(JSOP_UINT24,         188, MKJSID("uint24"),         NULL,              4,  0,  1,  16, JOF_UINT24)
OPDEF(JSOP_LITERAL,        189, MKJSID("literal"),        NULL,              4,  0,  1,  19, JOF_UINT24)
OPDEF(JSOP_FINDNAME,       190, MKJSID("findname"),       NULL,              4,  0,  2,   0, JOF_UINT24)
OPDEF(JSOP_LITOPX,         191, MKJSID("litopx"),         NULL,              5,  0,  0,   0, JOF_LITOPX)

/*
 * Opcodes to help the decompiler deal with XML.
 */
OPDEF(JSOP_STARTXML,       192, MKJSID("startxml"),       NULL,              1,  0,  0,   0, JOF_BYTE)
OPDEF(JSOP_STARTXMLEXPR,   193, MKJSID("startxmlexpr"),   NULL,              1,  0,  0,   0, JOF_BYTE)
OPDEF(JSOP_SETMETHOD,      194, MKJSID("setmethod"),      NULL,              3,  2,  1,   3, JOF_CONST|JOF_PROP|JOF_SET|JOF_ASSIGNING|JOF_DETECTING)

/*
 * Stop interpretation, emitted at end of script to save the threaded bytecode
 * interpreter an extra branch test on every DO_NEXT_OP (see jsinterp.c).
 */
OPDEF(JSOP_STOP,           195, MKJSID("stop"),           NULL,              1,  0,  0,   0, JOF_BYTE)

/*
 * Get an extant property or element value, throwing ReferenceError if the
 * identified property does not exist.
 */
OPDEF(JSOP_GETXPROP,       196, MKJSID("getxprop"),       NULL,              3,  1,  1,  18, JOF_CONST|JOF_PROP)
OPDEF(JSOP_GETXELEM,       197, MKJSID("getxelem"),       NULL,              1,  2,  1,  18, JOF_BYTE |JOF_ELEM|JOF_LEFTASSOC)

/*
 * Specialized JSOP_TYPEOF to avoid reporting undefined for typeof(0, undef).
 */
OPDEF(JSOP_TYPEOFEXPR,     198, js_typeof_str,            NULL,              1,  1,  1,  15, JOF_BYTE|JOF_DETECTING)

/*
 * Block-local scope support.
 */
OPDEF(JSOP_ENTERBLOCK,     199, MKJSID("enterblock"),     NULL,              3,  0,  0,   0, JOF_CONST)
OPDEF(JSOP_LEAVEBLOCK,     200, MKJSID("leaveblock"),     NULL,              3,  0,  0,   0, JOF_UINT16)
OPDEF(JSOP_GETLOCAL,       201, MKJSID("getlocal"),       NULL,              3,  0,  1,  19, JOF_LOCAL|JOF_NAME)
OPDEF(JSOP_SETLOCAL,       202, MKJSID("setlocal"),       NULL,              3,  1,  1,   3, JOF_LOCAL|JOF_NAME|JOF_SET)
OPDEF(JSOP_INCLOCAL,       203, MKJSID("inclocal"),       NULL,              3,  0,  1,  15, JOF_LOCAL|JOF_NAME|JOF_INC)
OPDEF(JSOP_DECLOCAL,       204, MKJSID("declocal"),       NULL,              3,  0,  1,  15, JOF_LOCAL|JOF_NAME|JOF_DEC)
OPDEF(JSOP_LOCALINC,       205, MKJSID("localinc"),       NULL,              3,  0,  1,  15, JOF_LOCAL|JOF_NAME|JOF_INC|JOF_POST)
OPDEF(JSOP_LOCALDEC,       206, MKJSID("localdec"),       NULL,              3,  0,  1,  15, JOF_LOCAL|JOF_NAME|JOF_DEC|JOF_POST)
OPDEF(JSOP_FORLOCAL,       207, MKJSID("forlocal"),       NULL,              3,  0,  1,  19, JOF_LOCAL|JOF_NAME|JOF_FOR)

/*
 * Iterator, generator, and array comprehension support.
 */
OPDEF(JSOP_STARTITER,      208, MKJSID("startiter"),      NULL,              1,  0,  0,   0, JOF_BYTE)
OPDEF(JSOP_ENDITER,        209, MKJSID("enditer"),        NULL,              1,  1,  0,   0, JOF_BYTE)
OPDEF(JSOP_GENERATOR,      210, MKJSID("generator"),      NULL,              1,  0,  0,   0, JOF_BYTE)
OPDEF(JSOP_YIELD,          211, MKJSID("yield"),          NULL,              1,  1,  1,   1, JOF_BYTE)
OPDEF(JSOP_ARRAYPUSH,      212, MKJSID("arraypush"),      NULL,              3,  1,  0,   3, JOF_LOCAL)

OPDEF(JSOP_FOREACHKEYVAL,  213, MKJSID("foreachkeyval"),  NULL,              1,  1,  1,   0, JOF_BYTE)

/*
 * Variant of JSOP_ENUMELEM for destructuring const (const [a, b] = ...).
 */
OPDEF(JSOP_ENUMCONSTELEM,  214, MKJSID("enumconstelem"),  NULL,              1,  3,  0,   3, JOF_BYTE|JOF_SET|JOF_ASSIGNING)

/*
 * Variant of JSOP_LEAVEBLOCK has a result on the stack above the locals,
 * which must be moved down when the block pops.
 */
OPDEF(JSOP_LEAVEBLOCKEXPR, 215, MKJSID("leaveblockexpr"), NULL,              3,  0,  0,   1, JOF_UINT16)
