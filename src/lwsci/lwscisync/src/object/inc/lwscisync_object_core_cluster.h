/*
 * Copyright (c) 2019-2021, LWPU CORPORATION. All rights reserved.
 *
 * LWPU Corporation and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from LWPU Corporation is strictly prohibited.
 */

/**
 * \file
 * \brief <b>LwSciSync private core object definitions</b>
 *
 * @b Description: This file declares basic core object structures and interfaces
 *    to be used by object units
 */

#ifndef INCLUDED_LWSCISYNC_OBJECT_CLUSTER_H
#define INCLUDED_LWSCISYNC_OBJECT_CLUSTER_H

#include <stdint.h>

#include "lwscicommon_covanalysis.h"
#include "lwscisync_object_core.h"

/**
 * \brief The underlying structure that LwSciSyncObj refers to.
 *
 * \implements{18845820}
 */
typedef struct {
    /** A reference to the core structure */
    LwSciObj coreObj;
    /** Magic ID to ensure this is valid LwSciSyncObj.
     * This is initialized only once during LwSciSyncObj creation to value
     * generated by deterministic manipulation of the address of the
     * LwSciSyncCoreObj pointer.
     * This has to be reset to 0 upon freeing this structure. */
    uint64_t header;
    /**
     * A cloned/duplicated reference to the original Reconciled
     * LwSciSyncAttrList provided during creation of the LwSciSyncObj.
     */
    LwSciSyncAttrList attrList;
    /** Core Primitive Info.
     * This is initialized to the reconciled primitive using
     * LwSciSyncCoreInitPrimitive when a LwSciSyncCoreObj is initially
     * allocated, and deinitialized using LwSciSyncCoreDeinitPrimitive when
     * the LwSciSyncCoreObj is freed.
     * During import, this is initialized by LwSciSyncCorePrimitiveImport when
     * the LwSciSyncCoreObjKey_CorePrimitive Transport Key is processed, after
     * being exported by LwSciSyncCorePrimitiveExport.
     */
    LwSciSyncCorePrimitive primitive;
    /** timestamps buffer manager */
    LwSciSyncCoreTimestamps timestamps;
    /** Unique ID identifying the LwSciSyncCoreObj */
    LwSciSyncCoreObjId objId;
} LwSciSyncCoreObj;

/**
 * \brief Helper function intended to help with casting from a
 * @ref LwSciObj pointer to a @ref LwSciSyncCoreObj pointer.
 *
 * \param[in] arg The LwSciObj to cast to a LwSciSyncCoreObj*
 *
 * \return LwSciSyncCoreObj* The LwSciSyncCoreObj
 *
 * Conlwrrency:
 * - Thread-safe: yes
 * - There are no operations in the function which depend on the order of
 *   access to either global or local objects, such that a system error would
 *   be caused, or that LwSciCommonPanic() would be called.
 * - None of the access to either global or local objects requires thread
 *   synchronization.
 * - The operations are not expected to cause nor contribute to a deadlock, as
 *   there is no locking nor unlocking of any thread synchronization objects.
 *
 * \implements{18844683}
 */
static inline LwSciSyncCoreObj*
    LwSciCastObjToSyncCoreObj(LwSciObj* arg)
{
    LWCOV_ALLOWLIST_BEGIN(LWCOV_MISRA(Rule, 11_5),"LwSciSync-ADV-MISRAC2012-013")
    LWCOV_ALLOWLIST_BEGIN(LWCOV_MISRA(Rule, 1_2), "LwSciSync-ADV-MISRAC2012-001")
    LWCOV_ALLOWLIST_LINE(LWCOV_MISRA(Rule, 18_4), "LwSciSync-ADV-MISRAC2012-016")
    return (LwSciSyncCoreObj*)(void*)((char*)(void*)arg
        - LW_OFFSETOF(LwSciSyncCoreObj, coreObj));
    LWCOV_ALLOWLIST_END(LWCOV_MISRA(Rule, 1_2))
    LWCOV_ALLOWLIST_END(LWCOV_MISRA(Rule, 11_5))
}

/**
 * \brief Computes a header value for a given LwSciSyncCoreObj, intended for
 * validity checks against an input LwSciSyncCoreObj.
 *
 * \param[in] coreObj The LwSciSyncCoreObj to compute a header for.
 *
 * \return uint64_t Computed header value for the given @ref LwSciSyncCoreObj
 *
 * Conlwrrency:
 * - Thread-safe: yes
 * - There are no operations in the function which depend on the order of
 *   access to either global or local objects, such that a system error would
 *   be caused, or that LwSciCommonPanic() would be called.
 * - None of the access to either global or local objects requires thread
 *   synchronization.
 * - The operations are not expected to cause nor contribute to a deadlock, as
 *   there is no locking nor unlocking of any thread synchronization objects.
 *
 * \implements{18844680}
 */
static inline uint64_t LwSciSyncCoreGenerateObjHeader(
    const LwSciSyncCoreObj* coreObj)
{
    LWCOV_ALLOWLIST_LINE(LWCOV_MISRA(Rule, 11_4), "LwSciSync-ADV-MISRAC2012-012")
    return (((uint64_t)coreObj & (~0xFFFFULL)) | 0xEFULL);
}
#endif
