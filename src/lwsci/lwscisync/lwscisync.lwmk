###############################################################################
#
# Copyright (c) 2019-2022 LWPU CORPORATION.  All Rights Reserved.
#
# LWPU CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from LWPU CORPORATION is strictly prohibited.
#
#
###############################################################################

##############################################################################
# drivers/lwsci/lwscisync/lwscisync.lwmk
##############################################################################

##############################################################################
# Identify this module to lwCommon.lwmk so it can decide the build type
##############################################################################

LW_MODULE_BUILD_TYPE_ALIASES = lwscisync

include $(LW_SOURCE)/drivers/lwsci/lwsci.lwmk

##############################################################################
# string to prepend in unix builds when exelwting rules in this gmake instance
##############################################################################

LW_MODULE_LOGGING_NAME = "lwscisync"

##############################################################################
# Build liblwscisync as position-independent code
##############################################################################

LW_BUILD_PIC = 1

##############################################################################
# Path shorthands
##############################################################################

LWSCI_PATH     = $(LW_SOURCE)/drivers/lwsci
LWSCISYNC_PATH = $(LWSCI_PATH)/lwscisync

##############################################################################
ifndef LWCFG_GLOBAL_SAFETY_BUILD
  # TODO: This is WAR for https://jirasw.lwpu.com/browse/LWDAT-309
  CFLAGS += -DLWSCISYNC_EMU_SUPPORT
endif

##############################################################################
# define SOURCES
##############################################################################

LWSCISYNC_SOURCES += primitives/lwscisync_primitive.c
LWSCISYNC_SOURCES += primitives/semaphore/lwscisync_semaphore.c
LWSCISYNC_SOURCES += lwscisync_c2c.c
ifeq ($(LW_BACKEND_RESMAN), 0)
  LWSCISYNC_SOURCES += primitives/syncpoint/lwscisync_syncpoint.c
  LWSCISYNC_SOURCES += rm_backend/lwscisync_backend_tegra.c
  LWSCISYNC_SOURCES += primitives/platform/lwscisync_primitive_tegra.c
else #$(LW_BACKEND_RESMAN)
  LWSCISYNC_SOURCES += primitives/syncpoint/lwscisync_nosyncpoint.c
  LWSCISYNC_SOURCES += primitives/platform/lwscisync_primitive_resman.c
  LWSCISYNC_SOURCES += rm_backend/lwscisync_backend_resman.c
endif

LWSCISYNC_SOURCES += core/lwscisync_core.c
LWSCISYNC_SOURCES += module/lwscisync_module.c
LWSCISYNC_SOURCES += cpu_wait_context/lwscisync_cpu_wait_context.c
LWSCISYNC_SOURCES += attribute/core/lwscisync_attribute_core.c
LWSCISYNC_SOURCES += attribute/core/lwscisync_attribute_core_semaphore.c
LWSCISYNC_SOURCES += attribute/reconcile/lwscisync_attribute_reconcile.c
LWSCISYNC_SOURCES += attribute/reconcile/lwscisync_attribute_reconcile_semaphore.c
LWSCISYNC_SOURCES += attribute/reconcile/lwscisync_attribute_reconcile_timestamp.c
LWSCISYNC_SOURCES += attribute/transport/lwscisync_attribute_transport.c
LWSCISYNC_SOURCES += attribute/transport/lwscisync_attribute_transport_semaphore.c
LWSCISYNC_SOURCES += object/lwscisync_object_core.c
LWSCISYNC_SOURCES += object/lwscisync_object_external.c
LWSCISYNC_SOURCES += fence/lwscisync_fence.c
LWSCISYNC_SOURCES += timestamps/lwscisync_timestamps.c
LWSCISYNC_SOURCES += ipc_table/lwscisync_ipc_table.c

SOURCES += $(addprefix $(LWSCISYNC_PATH)/src/,$(LWSCISYNC_SOURCES))

ifndef LWCFG_GLOBAL_SAFETY_BUILD
  LWSCISYNC_SOURCES += attribute/core/lwscisync_attribute_core_external_primitive.c
  LWSCISYNC_SOURCES += attribute/reconcile/lwscisync_attribute_reconcile_external_primitive.c
endif

#############################################################################
# Disable pragma errors in Coverity build
##############################################################################

# When build is initiated from tmake, COVLKTMPDIR is passed in to lwmake from
# tmake if LW_BUILD_CONFIGURATION_IS_COVERITY=1 in tmake configuration.
#
# The LW_BUILD_CONFIGURATION_IS_COVERITY defined in tmake is not visible in
# lwmake. User should define environment variable
# LW_BUILD_CONFIGURATION_IS_COVERITY when locally doing Coverity build using
# unix-build.
LW_BUILD_CONFIGURATION_IS_COVERITY ?=

# Automatically set LW_BUILD_CONFIGURATION_IS_COVERITY if Coverity build is
# initiated from tmake.
ifdef COVLKTMPDIR
  LW_BUILD_CONFIGURATION_IS_COVERITY = 1
endif

ifeq ($(LW_BUILD_CONFIGURATION_IS_COVERITY),1)
  $(call BUILD_OBJECT_LIST,$(SOURCES)): LW_WARNINGS_NOERROR += unknown-pragmas
endif

##############################################################################
# define LW_INCLUDES
##############################################################################

LW_INCLUDES += $(LWSCISYNC_PATH)/inc
LW_INCLUDES += $(LWSCISYNC_PATH)/src/attribute/inc
LW_INCLUDES += $(LWSCISYNC_PATH)/src/object/inc
LW_INCLUDES += $(LWSCISYNC_PATH)/src/primitives
LW_INCLUDES += $(LWSCISYNC_PATH)/src/module
LW_INCLUDES += $(LWSCI_PATH)/inc/public
LW_INCLUDES += $(LWSCI_PATH)/inc/internal
LW_INCLUDES += $(LWSCI_PATH)/lwscicommon/inc
LW_INCLUDES += $(LWSCI_PATH)/inc

#include cheetah headers
ifeq ($(LW_TEGRA_MIRROR_INCLUDES), 1)
#get lwrm headers from sdk/inc and RMAPI_TEGRA_MIRROR if we are building
#perforce tree.
  LW_INCLUDES += $(LW_SOURCE)/sdk/lwpu/inc
  LW_INCLUDES += $(RMAPI_TEGRA_MIRROR_INCLUDES)
else
ifeq ($(LW_TEGRA_DIRECT_INCLUDES), 1)
#get lwrm headers directly from core/include
  LW_INCLUDES += $(TEGRA_TOP)/core/include
  LW_INCLUDES += $(TEGRA_TOP)/lwscic2c/include/public
endif
endif

#include x86 headers
ifeq ($(LW_BACKEND_RESMAN), 1)
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/rmapi_tegra_mirror.lwmk
  LW_INCLUDES += $(LW_SOURCE)/sdk/lwpu/inc
  LW_INCLUDES += $(RMAPI_TEGRA_MIRROR_INCLUDES)
  LW_INCLUDES += $(LW_SOURCE)/drivers/unix/allocator/include
endif

# Coverity specific includes
ifeq ($(LW_BUILD_CONFIGURATION_IS_COVERITY),1)
  LW_INCLUDES += $(LWSCI_PATH)/lwscicommon/inc/covanalysis_enable
else
  LW_INCLUDES += $(LWSCI_PATH)/lwscicommon/inc/covanalysis_disable
endif

LW_INCLUDES += $(OUTPUTDIR)

##############################################################################
# define LW_DEFINES
##############################################################################

# For lwmake builds, lwcfg feature flags are available to LWSCI.
ifdef LWCFG_INITIALIZED
  LW_DEFINES += LWCFG_ENABLED
endif

# Embedded defines this on the command line for their builds.
LW_BUILD_EMBEDDED ?= 0

LW_DEFINES += LW_BUILD_EMBEDDED=1

# Needed for gettime calls for semaphore case only on x86
ifeq ($(LW_BACKEND_RESMAN), 1)
  LDFLAGS += -lrt
endif

##############################################################################
# Definitions for the LWID string
##############################################################################

# Most binaries built as part of the UNIX GPU driver package contain a
# stamp identifying the binary. This includes a timestamp, and in
# internal builds, also username and hostname.
# The info is helpful in triage issues reported by the lwstomers.
#
# However the stamp makes the checksum of the binary unique in each build
# instance, even the codebase doesn't change. It is an undesirable feature
# in safety product.
#
# So only adds the LWID string in non-safety build.

ifndef LWCFG_GLOBAL_SAFETY_BUILD
  LWID_STRINGNAME = "LW_LWSCISYNC_ID"
  LWID_MODULENAME = "LwSciSync Shared Library"

  SOURCES += $(LWIDSTRING)
endif

##############################################################################
# define DSO stubs
##############################################################################
ifeq ($(LW_BACKEND_RESMAN), 0)
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/dso-stubs/lwrm_host1x.lwmk
ifeq ($(LW_TARGET_OS), QNX)
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/dso-stubs/lwos_s3_safety.lwmk
endif
ifeq ($(LW_TARGET_OS), Linux)
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/dso-stubs/lwos.lwmk
endif
endif
include $(LWSCI_PATH)/lwsciipc/lwsciipc-dso-stub.lwmk
include $(LWSCI_PATH)/lwscibuf/lwscibuf-dso-stub.lwmk
include $(LWSCI_PATH)/lwscicommon/lwscicommon-dso-stub.lwmk

##############################################################################
# define library dependencies
##############################################################################
ifeq ($(LW_BACKEND_RESMAN), 0)
  DSO_STUBS += $(LWRM_HOST1X_DSO_STUB)
ifeq ($(LW_TARGET_OS), QNX)
  DSO_STUBS += $(LWOS_S3_SAFETY_DSO_STUB)
endif
ifeq ($(LW_TARGET_OS), Linux)
  DSO_STUBS += $(LWOS_DSO_STUB)
endif
endif
DSO_STUBS += $(LWSCICOMMON_DSO_STUB)
DSO_STUBS += $(LWSCIBUF_DSO_STUB)
DSO_STUBS += $(LWSCIIPC_DSO_STUB)

##############################################################################
# Colwert the mobile exports file to the desktop format.
##############################################################################

LWSCISYNC_EXPORTS = $(OUTPUTDIR_COMMON)/liblwscisync-exports.txt

LWSCISYNC_EXPORTS_SOURCES = liblwscisync.export


$(LWSCISYNC_EXPORTS): $(LWSCISYNC_EXPORTS_SOURCES)
	$(CAT) $(LWSCISYNC_EXPORTS_SOURCES) | \
	$(SORT) | $(UNIQ) | \
	$(SED) -e 's/@[0-9]\+//' \
	    -e 's/^\([^#].\+\)$$/\1 func/' > $@

##############################################################################
# define how to mangle the object files
##############################################################################

ifeq ($(LW_MANGLE_SYMBOLS),1)
  # If the component has symbols needing mangling, such as internal API entry
  # points, generate a mangle list and define the mangling rule here.

  # liblwscisync contains no exposed symbols requiring mangling.
  LINK_OBJECTS = $(OBJECTS)
  LWSCISYNC_MANGLE_FILE =
else
  # If symbol mangling is disabled, LINK_OBJECTS == OBJECTS and there is
  # no mangle file.
  LINK_OBJECTS = $(OBJECTS)
  LWSCISYNC_MANGLE_FILE =
endif

##############################################################################
# define how to build the linker script used when linking liblwscisync
##############################################################################

LWSCISYNC_LINKER_SCRIPT = $(OUTPUTDIR_COMMON)/liblwscisync.map$(MANGLE_SUFFIX)

$(eval $(call LINKER_SCRIPT_RULE, \
  $(LWSCISYNC_LINKER_SCRIPT), \
  $(LWSCISYNC_EXPORTS), \
  $(LWSCISYNC_MANGLE_FILE)))

##############################################################################

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk
