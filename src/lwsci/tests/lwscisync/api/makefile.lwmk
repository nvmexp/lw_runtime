#
# Copyright (c) 2019-2022, LWPU CORPORATION. All rights reserved.
#
# LWPU CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from LWPU CORPORATION is strictly prohibited.
#

LW_MODULE_BUILD_TYPE_ALIASES = test_lwscisync_api
LW_MODULE_LOGGING_NAME = "test_lwscisync_api"

include $(LW_SOURCE)/drivers/lwsci/lwsci.lwmk
include $(LW_SOURCE)/drivers/lwsci/tests/common/gpu_wrapper/gpuwrapper.lwmk
include $(LW_SOURCE)/drivers/lwsci/tests/common/ipc_wrapper/ipcwrapper.lwmk
include $(LW_SOURCE)/drivers/lwsci/tests/gtest/gtest.lwmk

#tests now include lwsci.lwmk. However, since lwsci.lwmk is being included for
#sources as well, it is very stringent and colwerts warnings to errors.
#For test-cases, it is fine to suppress warnings for now.
#TODO: fix all warnings are remove this flag.
#fixing warnings for now.
CFLAGS += -w

##############################################################################
# Path shorthands
##############################################################################

LWSCI_PATH = $(LW_SOURCE)/drivers/lwsci
LWSCI_TESTS_PATH = $(LWSCI_PATH)/tests

# include cheetah headers
ifeq ($(LW_TEGRA_MIRROR_INCLUDES), 1)
# get lwrm headers from sdk/inc and RMAPI_TEGRA_MIRROR if we are building
# perforce tree.
  LW_INCLUDES += $(LW_SOURCE)/sdk/lwpu/inc
  LW_INCLUDES += $(RMAPI_TEGRA_MIRROR_INCLUDES)
else
ifeq ($(LW_TEGRA_DIRECT_INCLUDES), 1)
# get lwrm headers directly from core/include
  LW_INCLUDES += $(TEGRA_TOP)/core/include
  LW_INCLUDES += $(TEGRA_TOP)/core-private/include
endif
endif

# include x86 headers
ifeq ($(LW_BACKEND_RESMAN), 1)
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/rmapi_tegra_mirror.lwmk
  include $(LW_SOURCE)/drivers/resman/arch/lwalloc/unix/lib/rmapi.lwmk
  include $(LW_SOURCE)/drivers/common/build/lwconfig.lwmk
  LW_INCLUDES += $(OUTPUTDIR)
  LW_INCLUDES += $(LW_SOURCE)/sdk/lwpu/inc
  LW_INCLUDES += $(RMAPI_TEGRA_MIRROR_INCLUDES)
  LW_INCLUDES += $(LW_SOURCE)/drivers/lwsci/lwscicommon/inc/x86
  LW_INCLUDES += $(LW_SOURCE)/drivers/unix/allocator/include
endif

include $(LWSCI_PATH)/lwscisync/lwscisync-dso-stub.lwmk
ifeq ($(LW_BACKEND_RESMAN), 0)
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/dso-stubs/lwrm_gpu.lwmk
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/dso-stubs/lwrm_host1x.lwmk
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/dso-stubs/lwrm_mem.lwmk
ifeq ($(LW_TARGET_OS),QNX)
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/dso-stubs/lwos_s3_safety.lwmk
else ifeq ($(LW_TARGET_OS),Linux)
  include $(LW_SOURCE)/drivers/unix/rmapi_tegra/mirror/dso-stubs/lwos.lwmk
endif
endif
include $(LWSCI_PATH)/lwsciipc/lwsciipc-dso-stub.lwmk
include $(LWSCI_PATH)/lwscicommon/lwscicommon-dso-stub.lwmk
include $(LWSCI_PATH)/lwscibuf/lwscibuf-dso-stub.lwmk

ifeq ($(LW_BACKEND_RESMAN), 0)
  STUB_DSO_DEPENDS += $(LWRM_GPU_DSO_STUB)
  STUB_DSO_DEPENDS += $(LWRM_HOST1X_DSO_STUB)
  STUB_DSO_DEPENDS += $(LWRM_MEM_DSO_STUB)
ifeq ($(LW_TARGET_OS),QNX)
  STUB_DSO_DEPENDS += $(LWOS_S3_SAFETY_DSO_STUB)
else ifeq ($(LW_TARGET_OS),Linux)
  STUB_DSO_DEPENDS += $(LWOS_DSO_STUB)
endif
endif
STUB_DSO_DEPENDS += $(LWSCIIPC_DSO_STUB)
STUB_DSO_DEPENDS += $(LWSCISYNC_DSO_STUB)
STUB_DSO_DEPENDS += $(LWSCIBUF_DSO_STUB)
STUB_DSO_DEPENDS += $(LWSCICOMMON_DSO_STUB)

ifeq ($(LW_BACKEND_RESMAN), 0)
  STUB_LDFLAGS += \
    -llwrm_gpu-stub \
    -llwrm_host1x-stub \
    -llwrm_mem-stub

ifeq ($(LW_TARGET_OS),QNX)
  STUB_LDFLAGS += \
    -llwos_s3_safety-stub
else ifeq ($(LW_TARGET_OS),Linux)
  STUB_LDFLAGS += \
    -llwos-stub
endif
endif

STUB_LDFLAGS += -llwscisync-stub -llwscicommon-stub
STUB_LDFLAGS += -llwscibuf-stub -llwsciipc-stub

LWSCISYNC_TEST_DIR = $(LW_SOURCE)/drivers/lwsci/tests/lwscisync/api

SOURCES += $(LWSCISYNC_TEST_DIR)/common/lwscisync_test_fill_attrs.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/common/lwscisync_test_signaler.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/common/lwscisync_test_waiter.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/ipc_wrapper/ipc_wrapper_old.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/main/lwscisync_test_main.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/append_write.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/attribute_list_core.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/attribute_list_reconciliation.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/attribute_list_reconcile_conflict.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/attribute_list_transport.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/attribute_list_validation.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/automatic_permissions.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/complex_topologies.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/cpu_wait_context.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/empty_fences.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/fence_operations.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/hardware_engine.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/inter_process.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/inter_thread.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/multiple_exports.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/lwscisync_peer.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/object_external.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/stm.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/syncobj_transport.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/timestamps.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/version_check.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/umd/umd.cpp
SOURCES += $(LWSCISYNC_TEST_DIR)/tests/c2c_orin_x86.cpp

ifeq ($(LW_TARGET_OS),QNX)
  SOURCES += $(LWSCISYNC_TEST_DIR)/ipc_wrapper/ipc_wrapper_old_qnx.cpp
else ifeq ($(LW_TARGET_OS),Linux)
  SOURCES += $(LWSCISYNC_TEST_DIR)/ipc_wrapper/ipc_wrapper_old_linux.cpp
endif

ifeq ($(LW_BACKEND_RESMAN), 0)
  SOURCES += $(LWSCISYNC_TEST_DIR)/umd/umd_tegra.cpp
  SOURCES += $(LWSCISYNC_TEST_DIR)/tests/unique_sync_obj_id.cpp
  SOURCES += $(LWSCISYNC_TEST_DIR)/tests/c2c.cpp
else
  SOURCES += $(LWSCISYNC_TEST_DIR)/umd/umd_resman.cpp
endif

LW_INCLUDES += $(LWSCISYNC_TEST_DIR)/umd/
LW_INCLUDES += $(LWSCISYNC_TEST_DIR)/main/
LW_INCLUDES += $(LWSCISYNC_TEST_DIR)/common/
LW_INCLUDES += $(LWSCISYNC_TEST_DIR)/ipc_wrapper/
LW_INCLUDES += $(LW_SOURCE)/sdk/lwpu/inc/class
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/lwsci/inc/public
LW_INCLUDES += $(LW_SOURCE)/drivers/lwsci/inc/internal
LW_INCLUDES += $(LW_SOURCE)/drivers/lwsci/lwscisync/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/lwsci/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/lwsci/lwscicommon/inc

ifeq ($(LW_TEGRA_MIRROR_INCLUDES), 1)
  LW_DEFINES += LW_SCI_DESKTOP_COMPATIBLE_HEADERS
endif

# library flags
LDFLAGS += -lm
LDFLAGS += -g
LDFLAGS += -L $(OUTPUTDIR) $(STUB_LDFLAGS)
LDFLAGS += $(BIN_LDFLAGS)
# Link in libpthread
LDFLAGS += $(PTHREAD_LDFLAGS)
ifneq ($(LW_TARGET_OS),QNX)
  # Link in librt
  LDFLAGS += -lrt
  LDFLAGS += -lstdc++
else
  LDFLAGS += -lc++
endif

# os specific flags
ifeq ($(LW_TARGET_OS),QNX)
  CFLAGS += -DQNX
else ifeq ($(LW_TARGET_OS),Linux)
  CFLAGS += -DLINUX
endif

ifndef LWCFG_GLOBAL_SAFETY_BUILD
  # TODO: This is WAR for https://jirasw.lwpu.com/browse/LWDAT-309
  CFLAGS += -DLWSCISYNC_EMU_SUPPORT
endif

TESTAPP := $(OUTPUTDIR)/test_lwscisync_api

LW_SUPPORTS_SEPARATE_DEBUG_INFO = 1
TESTAPP_LD_TARGET = $(TESTAPP).unstripped
TESTAPP_DEBUG_INFO = $(TESTAPP).debug
$(eval $(call LW_DEBUG_INFO_CMD, \
  $(TESTAPP_LD_TARGET), \
  $(TESTAPP), \
  $(TESTAPP_DEBUG_INFO)))

build: $(TESTAPP)

$(TESTAPP_LD_TARGET): $(OBJECTS) $(STUB_DSO_DEPENDS)
	$(call quiet_cmd,LINK) $(OBJECTS) -o $(TESTAPP_LD_TARGET) $(LDFLAGS)

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk
