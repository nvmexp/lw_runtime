ELWIRO.NEW
ELWIRO.NAME:LWSCISYNC_ATTRIBUTE_CORE
ELWIRO.COVERAGE_TYPE:Statement+Branch
ELWIRO.INDUSTRY_MODE:ISO-26262 (Automotive)
ELWIRO.STUB_BY_FUNCTION:lwscisync_attribute_core
ELWIRO.WHITE_BOX:YES
ELWIRO.MAX_VARY_RANGE: 20
ELWIRO.STUB: ALL_BY_PROTOTYPE
ELWIRO.SEARCH_LIST: ../../../../lwscisync/inc/
ELWIRO.SEARCH_LIST: ../../../../inc/internal/
ELWIRO.SEARCH_LIST: ../../../../inc/public/
ELWIRO.SEARCH_LIST: ../../../../lwscicommon/inc/
ELWIRO.SEARCH_LIST: ../../../../lwscicommon/inc/covanalysis_disable/
ELWIRO.SEARCH_LIST: ../../../../../unix/rmapi_tegra/lwrminclude/
ELWIRO.SEARCH_LIST: ./include/
ELWIRO.SEARCH_LIST: ../../../../../../sdk/lwpu/inc/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/attribute/core/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/attribute/inc/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/attribute/reconcile/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/attribute/transport/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/core/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/cpu_wait_context/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/fence/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/ipc_table/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/module/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/object/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/object/inc/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/primitives/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/primitives/platform/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/primitives/semaphore/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/primitives/syncpoint/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/rm_backend/
ELWIRO.SEARCH_LIST: ../../../../lwscisync/src/timestamps/
ELWIRO.SEARCH_LIST: ./include/outmirror/tegra_top/core/include
ELWIRO.TYPE_HANDLED_DIRS_ALLOWED:
ELWIRO.LIBRARY_STUBS:
ELWIRO.STUB_USER_CODE_FILE:

BEGINNING_OF_STUB.uut_prototype_stubs.LwSciCommonPanic
exit(EXIT_FAILURE);
END_BEGINNING_OF_STUB.uut_prototype_stubs.LwSciCommonPanic
BEGINNING_OF_STUB.uut_prototype_stubs.LwSciCommonFreeObjAndRef
if(refCleanupCallback != NULL) {
    refCleanupCallback(ref);
}
if(objCleanupCallback != NULL) {
    objCleanupCallback(ref->objPtr);
}
END_BEGINNING_OF_STUB.uut_prototype_stubs.LwSciCommonFreeObjAndRef
BEGINNING_OF_STUB.uut_prototype_stubs.LwSciCommonSort
#define LW_SCI_SWAP_BYTES(a, b, size) \
    do { \
        size_t tempSize = (size); \
        char *tempA = (a), *tempB = (b); \
        do { \
            char tempTmp = *tempA; \
            *tempA++ = *tempB; \
            *tempB++ = tempTmp; \
        } while (--tempSize > 0UL); \
    } while (1 == 0)


   LwSciError err = LwSciError_Success;

    size_t i = 0U;
    size_t j = 0U;
    void* aStartAddr = NULL;
    void* bStartAddr = NULL;
    bool swapped = false;

    if (NULL == compare || NULL == base || 0UL == nmemb || 0UL == size) {
        LwSciCommonPanic();
    }
    /*
     * We need to meet MISRA requirements that the sorting algorithm must be:
     *
     *   1. Stable: It must "behave consistently when comparing elements" per
     *      Rule 21.9 (ie. the sort must be a stable sorting algorithm)
     *   2. Non-relwrsive: MISRA Rule 17.2
     *   3. In-place: Without implementing an object pool or using a custom
     *      allocator via LwSciCommonCalloc, we meet MISRA Rule 21.3 by sorting
     *      in-place.
     *
     * As such, we implement bubble sort since we don't expect to be sorting
     * large arrays at the moment.
     */
    for (i = 0U; i < nmemb - 1U; ++i) {
        swapped = false;
        for (j = 0U; j < nmemb - i - 1U; ++j) {
            aStartAddr = (char*)base + (j * size);
            bStartAddr = (char*)base + ((j + 1U) * size);

            /*
             * If the current value is greater than the adjacent value, then
             * we need to perform a swap.
             */
            if (1 == compare(aStartAddr, bStartAddr)) {
                LW_SCI_SWAP_BYTES(aStartAddr, bStartAddr, size);
                swapped = true;
            }
        }
        /*
         * If no swaps were performed, then break so we don't need to continue
         * with more passes.
         */
        if (false == swapped) {
            break;
        }
    }

    return err;
END_BEGINNING_OF_STUB.uut_prototype_stubs.LwSciCommonSort
ELWIRO.END_STUB_USER_CODE_FILE:
ELWIRO.USER_GLOBALS:

/*****************************************************************************
S0000008.c: This file contains the definitions of variables used in user code.
Preface all variable declarations with VCAST_USER_GLOBALS_EXTERN to ensure
that only one definition of the variable is created in the test harness.
*****************************************************************************/

#define LW_LINUX 1

#include "lwscisync_attribute_core_cluster.h"
#include "lwscisync.h"

#ifndef VCAST_USER_GLOBALS_EXTERN
#define VCAST_USER_GLOBALS_EXTERN
#endif

#ifdef __cplusplus
extern "C"{
#endif
  VCAST_USER_GLOBALS_EXTERN int VECTORCAST_INT1;
  VCAST_USER_GLOBALS_EXTERN int VECTORCAST_INT2;
  VCAST_USER_GLOBALS_EXTERN int VECTORCAST_INT3;
#ifndef VCAST_NO_FLOAT
  VCAST_USER_GLOBALS_EXTERN float VECTORCAST_FLT1;
  VCAST_USER_GLOBALS_EXTERN LwSciSyncCoreAttrListObj** coreAttrListObj;
  VCAST_USER_GLOBALS_EXTERN LwSciSyncAttrKeyValuePair** attrKeyValuePair;
  VCAST_USER_GLOBALS_EXTERN LwSciSyncInternalAttrKeyValuePair** internalAttrKeyValuePair;
  VCAST_USER_GLOBALS_EXTERN LwSciSyncAttrList attrList;
  VCAST_USER_GLOBALS_EXTERN LwSciSyncAttrList attrList2;
#endif
#ifdef __cplusplus
}
#endif
ELWIRO.END_USER_GLOBALS:
ELWIRO.END
