-- VectorCAST 20.sp5 (12/16/20)
-- Imported Coverage Results Script
IMPORT.BEGIN
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:8
IMPORT.SOURCE.ORIG_FILENAME:/home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/tests/lwscisync/unit/primitives/LWSCISYNC_PRIMITIVE/S0000008.c
IMPORT.SOURCE.TIMESTAMP:0
IMPORT.SOURCE.COVERAGE_STATUS:FALSE
IMPORT.SOURCE.COVERAGE_TYPE:None
IMPORT.SOURCE.FILE_CHECKSUM:0
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:TRUE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:TRUE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_UNKNOWN
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:TRUE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.END
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:9
IMPORT.SOURCE.ORIG_FILENAME:/home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/primitives/lwscisync_primitive.c
IMPORT.SOURCE.TIMESTAMP:1638883239
IMPORT.SOURCE.COVERAGE_STATUS:TRUE
IMPORT.SOURCE.COVERAGE_TYPE:Statement+Branch+FUNCTION_CALL
IMPORT.SOURCE.FILE_CHECKSUM:3291632854
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:FALSE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:FALSE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_INITIALIZATIONS
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:FALSE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.COVERAGE_FOR_LAMBDAS:FALSE
IMPORT.SOURCE.END
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:11
IMPORT.SOURCE.ORIG_FILENAME:/home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/primitives/platform/lwscisync_primitive_tegra.c
IMPORT.SOURCE.TIMESTAMP:1638883239
IMPORT.SOURCE.COVERAGE_STATUS:TRUE
IMPORT.SOURCE.COVERAGE_TYPE:Statement+Branch+FUNCTION_CALL
IMPORT.SOURCE.FILE_CHECKSUM:4225749817
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:FALSE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:FALSE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:FALSE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_INITIALIZATIONS
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:FALSE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.COVERAGE_FOR_LAMBDAS:FALSE
IMPORT.SOURCE.END
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:12
IMPORT.SOURCE.ORIG_FILENAME:/home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/primitives/semaphore/lwscisync_semaphore_stub.c
IMPORT.SOURCE.TIMESTAMP:1638883239
IMPORT.SOURCE.COVERAGE_STATUS:TRUE
IMPORT.SOURCE.COVERAGE_TYPE:Statement+Branch+FUNCTION_CALL
IMPORT.SOURCE.FILE_CHECKSUM:1806184511
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:FALSE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:FALSE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:FALSE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_INITIALIZATIONS
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:FALSE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.COVERAGE_FOR_LAMBDAS:FALSE
IMPORT.SOURCE.END
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:13
IMPORT.SOURCE.ORIG_FILENAME:/home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/primitives/syncpoint/lwscisync_syncpoint.c
IMPORT.SOURCE.TIMESTAMP:1638883239
IMPORT.SOURCE.COVERAGE_STATUS:TRUE
IMPORT.SOURCE.COVERAGE_TYPE:Statement+Branch+FUNCTION_CALL
IMPORT.SOURCE.FILE_CHECKSUM:3968334724
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:FALSE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:FALSE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_INITIALIZATIONS
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:FALSE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.COVERAGE_FOR_LAMBDAS:FALSE
IMPORT.SOURCE.END
RESULT.CBA.BEGIN
RESULT.CBA.RESULT: CBA_LwSciSyncCoreInitPrimitive_1
RESULT.CBA.NOTES
Safety-impact(Nill/Low/Mid/High):
Low
Justification:
Defensive Programming - This check has been added to prevent Unsupported primitive type is not being passed.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/primitives/lwscisync_primitive.c
RESULT.CBA.FUNCTION: LwSciSyncCoreInitPrimitive
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 37
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType)
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== resultPrimitive->ops) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType);
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== resultPrimitive->ops) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 39
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
== resultPrimitive->ops) {
LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
error = resultPrimitive->ops->Init(reconciledList, resultPrimitive);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 38
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
== resultPrimitive->ops) {
LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
error = resultPrimitive->ops->Init(reconciledList, resultPrimitive);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
resultPrimitive->ops = LwSciSyncPrimitiveOpsArray[index];
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== resultPrimitive->ops) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
resultPrimitive->ops = LwSciSyncPrimitiveOpsArray[index];
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== resultPrimitive->ops) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreInitPrimitive_2
RESULT.CBA.NOTES
Safety-impact(Nill/Low/Mid/High):
Low
Justification:
Defensive Programming - This check has been added to prevent Unsupported primitive type is not being passed.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/primitives/lwscisync_primitive.c
RESULT.CBA.FUNCTION: LwSciSyncCoreInitPrimitive
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.CONTEXT: if ((sizeof(LwSciSyncPrimitiveOpsArray) /
RESULT.CBA.CONTEXT_BEFORE:
resultPrimitive->type = primitiveType;
index = (uint32_t)primitiveType;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
sizeof(const LwSciSyncPrimitiveOps*)) <= index) {
LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if ((sizeof(LwSciSyncPrimitiveOpsArray) /
RESULT.CBA.CONTEXT_BEFORE:
resultPrimitive->type = primitiveType;
index = (uint32_t)primitiveType;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
sizeof(const LwSciSyncPrimitiveOps*)) <= index) {
LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 31
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType)
RESULT.CBA.CONTEXT_BEFORE:
if ((sizeof(LwSciSyncPrimitiveOpsArray) /
sizeof(const LwSciSyncPrimitiveOps*)) <= index) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 30
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType);
RESULT.CBA.CONTEXT_BEFORE:
if ((sizeof(LwSciSyncPrimitiveOpsArray) /
sizeof(const LwSciSyncPrimitiveOps*)) <= index) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 33
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
sizeof(const LwSciSyncPrimitiveOps*)) <= index) {
LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
resultPrimitive->ops = LwSciSyncPrimitiveOpsArray[index];
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 32
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
sizeof(const LwSciSyncPrimitiveOps*)) <= index) {
LwSciTracePrintf("[ERROR: %s]: " "Unsupported primitive type" "%x\n", __FUNCTION__, primitiveType);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
resultPrimitive->ops = LwSciSyncPrimitiveOpsArray[index];
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCorePrimitiveImport_1
RESULT.CBA.NOTES
Safety-impact(Nill/Low/Mid/High):
Low
Justification:
'else' branch should be added for MISRA compliance - This check has been added to prevent Unrecognized key despite performing a check before.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/primitives/lwscisync_primitive.c
RESULT.CBA.FUNCTION: LwSciSyncCorePrimitiveImport
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 57
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unrecognized key despite performing a check before: \n" "%u\n", __FUNCTION__, inputKey)
RESULT.CBA.CONTEXT_BEFORE:
resultPrimitive->id = *(uint64_t*)value;
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 58
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unrecognized key despite performing a check before: \n" "%u\n", __FUNCTION__, inputKey)
RESULT.CBA.CONTEXT_BEFORE:
resultPrimitive->id = *(uint64_t*)value;
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 55
RESULT.CBA.CONTEXT: if (LwSciSyncCorePrimitiveKey_Id == key)
RESULT.CBA.CONTEXT_BEFORE:
}
tmpInfo->expectedNum = 1U;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
resultPrimitive->id = *(uint64_t*)value;
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 55
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (LwSciSyncCorePrimitiveKey_Id == key)
RESULT.CBA.CONTEXT_BEFORE:
}
tmpInfo->expectedNum = 1U;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
resultPrimitive->id = *(uint64_t*)value;
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 60
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: " "Unrecognized key despite performing a check before: \n" "%u\n", __FUNCTION__, inputKey)
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
info->handledNum++;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 59
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: " "Unrecognized key despite performing a check before: \n" "%u\n", __FUNCTION__, inputKey)
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
info->handledNum++;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCorePrimitiveImport_2
RESULT.CBA.NOTES
Safety-impact(Nill/Low/Mid/High):
Low
Justification:
This check is to make sure 'handledNum' is 0, when key is 'LwSciSyncCorePrimitiveKey_Specific'. 
CERT-C/MISRA-C
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/primitives/lwscisync_primitive.c
RESULT.CBA.FUNCTION: LwSciSyncCorePrimitiveImport
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 74
RESULT.CBA.CONTEXT: if (0U == info->handledNum)
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = resultPrimitive->ops->Import(0U, reconciledList,
((void *)0)
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 74
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (0U == info->handledNum)
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = resultPrimitive->ops->Import(0U, reconciledList,
((void *)0)
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 53
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
tmpInfo->expectedNum = 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 52
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
tmpInfo->expectedNum = 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 73
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== info) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (0U == info->handledNum) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 72
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== info) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (0U == info->handledNum) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 51
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
(uint32_t)LwSciSyncCorePrimitiveKey_Specific,
tagInfo, numTags);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 7
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 51
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
(uint32_t)LwSciSyncCorePrimitiveKey_Specific,
tagInfo, numTags);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 7
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 71
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
info = FindPrimitiveTagInfo((uint32_t)LwSciSyncCorePrimitiveKey_Specific,
tagInfo, numTags);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== info) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 10
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 71
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
info = FindPrimitiveTagInfo((uint32_t)LwSciSyncCorePrimitiveKey_Specific,
tagInfo, numTags);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== info) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 10
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreSyncpointSignal_1
RESULT.CBA.NOTES
Covered by Inspection test:
https://lwpu.jamacloud.com/perspective.req#/testCases/23081186?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/primitives/syncpoint/lwscisync_syncpoint.c
RESULT.CBA.FUNCTION: LwSciSyncCoreSyncpointSignal
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Failed to signal syncpoint because LwRmHost1xSyncpointIncrement failed. LwError: \n" "%d\n", __FUNCTION__, lwErr)
RESULT.CBA.CONTEXT_BEFORE:
lwErr = LwRmHost1xSyncpointIncrement(info->syncpt, 1);
if (lwErr != LwSuccess) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_ResourceError;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Failed to signal syncpoint because LwRmHost1xSyncpointIncrement failed. LwError: \n" "%d\n", __FUNCTION__, lwErr);
RESULT.CBA.CONTEXT_BEFORE:
lwErr = LwRmHost1xSyncpointIncrement(info->syncpt, 1);
if (lwErr != LwSuccess) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_ResourceError;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: error = LwSciError_ResourceError;
RESULT.CBA.CONTEXT_BEFORE:
if (lwErr != LwSuccess) {
LwSciTracePrintf("[ERROR: %s]: " "Failed to signal syncpoint because LwRmHost1xSyncpointIncrement failed. LwError: \n" "%d\n", __FUNCTION__, lwErr);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
return error;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.CONTEXT: if (lwErr != LwSuccess)
RESULT.CBA.CONTEXT_BEFORE:
}
lwErr = LwRmHost1xSyncpointIncrement(info->syncpt, 1);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: " "Failed to signal syncpoint because LwRmHost1xSyncpointIncrement failed. LwError: \n" "%d\n", __FUNCTION__, lwErr);
error = LwSciError_ResourceError;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (lwErr != LwSuccess)
RESULT.CBA.CONTEXT_BEFORE:
}
lwErr = LwRmHost1xSyncpointIncrement(info->syncpt, 1);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: " "Failed to signal syncpoint because LwRmHost1xSyncpointIncrement failed. LwError: \n" "%d\n", __FUNCTION__, lwErr);
error = LwSciError_ResourceError;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.END
IMPORT.END