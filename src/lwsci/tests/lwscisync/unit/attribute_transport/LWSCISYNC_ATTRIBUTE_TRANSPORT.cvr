-- VectorCAST 20.sp5 (12/16/20)
-- Imported Coverage Results Script
IMPORT.BEGIN
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:8
IMPORT.SOURCE.ORIG_FILENAME:/home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/tests/lwscisync/unit/attribute_transport/LWSCISYNC_ATTRIBUTE_TRANSPORT/S0000008.c
IMPORT.SOURCE.TIMESTAMP:0
IMPORT.SOURCE.COVERAGE_STATUS:FALSE
IMPORT.SOURCE.COVERAGE_TYPE:None
IMPORT.SOURCE.FILE_CHECKSUM:0
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:TRUE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:TRUE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_UNKNOWN
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:TRUE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.END
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:9
IMPORT.SOURCE.ORIG_FILENAME:/home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
IMPORT.SOURCE.TIMESTAMP:1638525698
IMPORT.SOURCE.COVERAGE_STATUS:TRUE
IMPORT.SOURCE.COVERAGE_TYPE:Statement+Branch+FUNCTION_CALL
IMPORT.SOURCE.FILE_CHECKSUM:2456588602
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:FALSE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:FALSE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_INITIALIZATIONS
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:FALSE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.COVERAGE_FOR_LAMBDAS:FALSE
IMPORT.SOURCE.END
RESULT.CBA.BEGIN
RESULT.CBA.RESULT: CBA_AttrListIpcExportReconciledCheckArgs_1
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23081163?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: AttrListIpcExportReconciledCheckArgs
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.CONTEXT: if (LwSciError_Success != error)
RESULT.CBA.CONTEXT_BEFORE:
}
error = LwSciSyncAttrListIsReconciled(reconciledAttrList, &isReconciled);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto fn_exit;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != error)
RESULT.CBA.CONTEXT_BEFORE:
}
error = LwSciSyncAttrListIsReconciled(reconciledAttrList, &isReconciled);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto fn_exit;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: goto fn_exit;
RESULT.CBA.CONTEXT_BEFORE:
error = LwSciSyncAttrListIsReconciled(reconciledAttrList, &isReconciled);
if (LwSciError_Success != error) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ExportAttrList_1
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/22947472?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ExportAttrList
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.CONTEXT: error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
&addStatus);
if (1U != addStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto free_core_attr_list_tx_buf;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.CONTEXT: if (1U != addStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Add(attrListValueSize, coreAttrListBufSize[i], &attrListValueSize,
&addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto free_core_attr_list_tx_buf;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != addStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Add(attrListValueSize, coreAttrListBufSize[i], &attrListValueSize,
&addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto free_core_attr_list_tx_buf;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.CONTEXT: goto free_core_attr_list_tx_buf;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != addStatus) {
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ExportObjAttrList_1
RESULT.CBA.NOTES
Safety-impact(Nil/Low/Medium/High):
Nil

Justification:
The datatype of objAttrList->numCoreAttrList is size_t and it cannot hold a value greater than UINT32_MAX.
The error check is added for MISRA compliance and it is a defensive programming check.
Hence, this is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ExportObjAttrList
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Number of core Attr list is too big to be exported\n")
RESULT.CBA.CONTEXT_BEFORE:
(4294967295U)
< objAttrList->numCoreAttrList) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Number of core Attr list is too big to be exported\n");
RESULT.CBA.CONTEXT_BEFORE:
(4294967295U)
< objAttrList->numCoreAttrList) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
< objAttrList->numCoreAttrList) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Number of core Attr list is too big to be exported\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto fn_exit;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: goto fn_exit;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Number of core Attr list is too big to be exported\n");
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* Callwlate key count and value size for attr list desc */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
LwSciSyncInternalAttrValPrimitiveType_UpperBound;
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
(4294967295U)
< objAttrList->numCoreAttrList) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
LwSciSyncInternalAttrValPrimitiveType_UpperBound;
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
(4294967295U)
< objAttrList->numCoreAttrList) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ImportAttrList_1
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/22947908?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ImportAttrList
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Export descriptor's magic id is incorrect")
RESULT.CBA.CONTEXT_BEFORE:
}
if ((0xF00ABD57U) != params.msgMagic) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_BadParameter;
goto free_rx_buf;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Export descriptor's magic id is incorrect");
RESULT.CBA.CONTEXT_BEFORE:
}
if ((0xF00ABD57U) != params.msgMagic) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_BadParameter;
goto free_rx_buf;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.CONTEXT: if ((0xF00ABD57U) != params.msgMagic)
RESULT.CBA.CONTEXT_BEFORE:
goto free_rx_buf;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Export descriptor's magic id is incorrect");
error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if ((0xF00ABD57U) != params.msgMagic)
RESULT.CBA.CONTEXT_BEFORE:
goto free_rx_buf;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Export descriptor's magic id is incorrect");
error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE:
if ((0xF00ABD57U) != params.msgMagic) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Export descriptor's magic id is incorrect");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto free_rx_buf;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: goto free_rx_buf;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Export descriptor's magic id is incorrect");
error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
do {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ImportAttribute_1
RESULT.CBA.NOTES
Safety-impact(Nil/Low/Medium/High):
Nil

Justification:
The inputKey argument is checked for sanity for inputKey to be a valid public or internal key prior to the last else branch
and so the control cannot reach the last else branch.
The error check is added for MISRA compliance and it is a defensive programming check.
Hence, this is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ImportAttribute
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 65
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: " "Encountered an unrecognized key despite all the checks \n" "%u\n", __FUNCTION__, inputKey)
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
coreAttrList->attrs.valSize[keyIdx] = length;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 64
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: " "Encountered an unrecognized key despite all the checks \n" "%u\n", __FUNCTION__, inputKey)
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
coreAttrList->attrs.valSize[keyIdx] = length;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Encountered an unrecognized key despite all the checks \n" "%u\n", __FUNCTION__, inputKey)
RESULT.CBA.CONTEXT_BEFORE:
value, length);
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 63
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Encountered an unrecognized key despite all the checks \n" "%u\n", __FUNCTION__, inputKey)
RESULT.CBA.CONTEXT_BEFORE:
value, length);
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 59
RESULT.CBA.CONTEXT: if (inputKey ==
RESULT.CBA.CONTEXT_BEFORE:
goto fn_exit;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
(uint32_t)LwSciSyncAttrKey_WaiterContextInsensitiveFenceExports) {
LwSciCommonMemcpyS(
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 59
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (inputKey ==
RESULT.CBA.CONTEXT_BEFORE:
goto fn_exit;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
(uint32_t)LwSciSyncAttrKey_WaiterContextInsensitiveFenceExports) {
LwSciCommonMemcpyS(
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ImportKeyCoreAttrList_1
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/22947855?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ImportKeyCoreAttrList
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "slotIndex value is out of range.\n")
RESULT.CBA.CONTEXT_BEFORE:
u64Add((*slotIndex), 1U, slotIndex, &addStatus);
if (1U != addStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "slotIndex value is out of range.\n");
RESULT.CBA.CONTEXT_BEFORE:
u64Add((*slotIndex), 1U, slotIndex, &addStatus);
if (1U != addStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != addStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "slotIndex value is out of range.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto fn_exit;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: if (1U != addStatus)
RESULT.CBA.CONTEXT_BEFORE:
coreAttrList = &(*objAttrList)->coreAttrList[*slotIndex];
u64Add((*slotIndex), 1U, slotIndex, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "slotIndex value is out of range.\n");
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != addStatus)
RESULT.CBA.CONTEXT_BEFORE:
coreAttrList = &(*objAttrList)->coreAttrList[*slotIndex];
u64Add((*slotIndex), 1U, slotIndex, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "slotIndex value is out of range.\n");
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: goto fn_exit;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "slotIndex value is out of range.\n");
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
error = ImportCoreAttrList(coreAttrList, module, ipcEndpoint,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ImportObjAttrList_1
RESULT.CBA.NOTES
Safety-impact(Nil/Low/Medium/High):
Nil

Justification:
The function pointer tagInfo[tagIndex].importFunc is mapped to mapped to a valid function for each LwSciSyncCoreAttrKey key.
So, panic cannot occur for this check.
The error check is added for MISRA compliance and it is a defensive programming check.
Hence, this is non-safety impacting.

RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ImportObjAttrList
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 32
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tagInfo[tagIndex].importFunc) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
error = tagInfo[tagIndex].importFunc(&objAttrList, module,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 31
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tagInfo[tagIndex].importFunc) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
error = tagInfo[tagIndex].importFunc(&objAttrList, module,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 30
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
tagIndex = ((uint64_t)(LwSciSyncCoreAttrKey_NumCoreAttrList) - (uint64_t)LwSciSyncCoreAttrKey_LowerBound - 1U);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tagInfo[tagIndex].importFunc) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 30
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
tagIndex = ((uint64_t)(LwSciSyncCoreAttrKey_NumCoreAttrList) - (uint64_t)LwSciSyncCoreAttrKey_LowerBound - 1U);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tagInfo[tagIndex].importFunc) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ImportObjAttrList_2
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23081228?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ImportObjAttrList
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 63
RESULT.CBA.CONTEXT: continue;
RESULT.CBA.CONTEXT_BEFORE:
} else if (importReconciled) {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
} else {
LwSciTracePrintf("[ERROR: %s]: " "Key should not appear in this context: \n" "%u\n", __FUNCTION__, inputKey);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.CONTEXT: if (importReconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
numTags[tagIndex]++;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
continue;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (importReconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
numTags[tagIndex]++;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
continue;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 56
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
goto free_attr_list;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= tagInfo[tagIndex].importFunc) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 10
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 56
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
goto free_attr_list;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= tagInfo[tagIndex].importFunc) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 10
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
numTags[tagIndex]++;
} else if (importReconciled) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
continue;
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 43
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ImportObjAttrList_3
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23081230?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ImportObjAttrList
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 65
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Key should not appear in this context: \n" "%u\n", __FUNCTION__, inputKey)
RESULT.CBA.CONTEXT_BEFORE:
continue;
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_BadParameter;
goto free_attr_list;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 64
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Key should not appear in this context: \n" "%u\n", __FUNCTION__, inputKey);
RESULT.CBA.CONTEXT_BEFORE:
continue;
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_BadParameter;
goto free_attr_list;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.CONTEXT: if (importReconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
numTags[tagIndex]++;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
continue;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (importReconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
numTags[tagIndex]++;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
continue;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 66
RESULT.CBA.CONTEXT: error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE:
} else {
LwSciTracePrintf("[ERROR: %s]: " "Key should not appear in this context: \n" "%u\n", __FUNCTION__, inputKey);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto free_attr_list;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 67
RESULT.CBA.CONTEXT: goto free_attr_list;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: " "Key should not appear in this context: \n" "%u\n", __FUNCTION__, inputKey);
error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
} while (doneReading ==
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ImportPrivateKeys_1
RESULT.CBA.NOTES
Safety-impact(Nil/Low/Medium/High):
Nil

Justification:
if (LwSciSyncCoreAttrKey_IpcTable == key) can't be false and the else case can't be reached. The unrecognized key would have been detected earlier and LwSciError_BadParameter returned.
The error check is added for MISRA compliance and it is a defensive programming check.
Hence, this is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ImportPrivateKeys
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.CONTEXT: if (LwSciSyncCoreAttrKey_IpcTable == key)
RESULT.CBA.CONTEXT_BEFORE:
goto fn_exit;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciSyncCoreImportIpcTable(&coreAttrList->ipcTable,
value, length, importReconciled);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (LwSciSyncCoreAttrKey_IpcTable == key)
RESULT.CBA.CONTEXT_BEFORE:
goto fn_exit;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciSyncCoreImportIpcTable(&coreAttrList->ipcTable,
value, length, importReconciled);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: if (importReconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (importReconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
} else {
if (importReconciled) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
} else {
LwSciTracePrintf("[ERROR: %s]: " "Unrecognized private key in unreconciled import: \n" "%u\n", __FUNCTION__, inputKey)
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 11
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_ImportPrivateKeys_2
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23081237?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: ImportPrivateKeys
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unrecognized private key in unreconciled import: \n" "%u\n", __FUNCTION__, inputKey)
RESULT.CBA.CONTEXT_BEFORE:
;
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unrecognized private key in unreconciled import: \n" "%u\n", __FUNCTION__, inputKey)
RESULT.CBA.CONTEXT_BEFORE:
;
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.CONTEXT: error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: " "Unrecognized private key in unreconciled import: \n" "%u\n", __FUNCTION__, inputKey)
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto fn_exit;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: if (importReconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (importReconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: goto fn_exit;
RESULT.CBA.CONTEXT_BEFORE:
;
error = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncAttrListIpcImportReconciled_1
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/22947939?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: LwSciSyncAttrListIpcImportReconciled
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 48
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid Reconciled attr list desc\n")
RESULT.CBA.CONTEXT_BEFORE:
/* Set state and endpoint info */
if (newObjAttrList->state != LwSciSyncCoreAttrListState_Reconciled) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_AttrListValidationFailed;
goto free_new_attr_list;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 47
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid Reconciled attr list desc\n");
RESULT.CBA.CONTEXT_BEFORE:
/* Set state and endpoint info */
if (newObjAttrList->state != LwSciSyncCoreAttrListState_Reconciled) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_AttrListValidationFailed;
goto free_new_attr_list;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 46
RESULT.CBA.CONTEXT: if (newObjAttrList->state != LwSciSyncCoreAttrListState_Reconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
/* Set state and endpoint info */
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid Reconciled attr list desc\n");
error = LwSciError_AttrListValidationFailed;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 46
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (newObjAttrList->state != LwSciSyncCoreAttrListState_Reconciled)
RESULT.CBA.CONTEXT_BEFORE:
}
/* Set state and endpoint info */
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid Reconciled attr list desc\n");
error = LwSciError_AttrListValidationFailed;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 49
RESULT.CBA.CONTEXT: error = LwSciError_AttrListValidationFailed;
RESULT.CBA.CONTEXT_BEFORE:
if (newObjAttrList->state != LwSciSyncCoreAttrListState_Reconciled) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid Reconciled attr list desc\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto free_new_attr_list;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 50
RESULT.CBA.CONTEXT: goto free_new_attr_list;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid Reconciled attr list desc\n");
error = LwSciError_AttrListValidationFailed;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
newObjAttrList->writable =
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncAttrListIpcImportReconciled_2
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23081249?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/rtamvada/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscisync/src/attribute/transport/lwscisync_attribute_transport.c
RESULT.CBA.FUNCTION: LwSciSyncAttrListIpcImportReconciled
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 65
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not unlock Attribute Lists\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 64
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not unlock Attribute Lists\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 63
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not unlock Attribute Lists\n")
RESULT.CBA.CONTEXT_BEFORE:
inputUnreconciledAttrListCount);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not unlock Attribute Lists\n");
RESULT.CBA.CONTEXT_BEFORE:
inputUnreconciledAttrListCount);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciSyncCoreAttrListsUnlock(inputUnreconciledAttrListArray,
inputUnreconciledAttrListCount);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not unlock Attribute Lists\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciSyncCoreAttrListsUnlock(inputUnreconciledAttrListArray,
inputUnreconciledAttrListCount);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not unlock Attribute Lists\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.END
IMPORT.END
