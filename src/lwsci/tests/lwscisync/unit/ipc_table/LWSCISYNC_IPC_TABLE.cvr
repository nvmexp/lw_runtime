-- VectorCAST 20.sp5 (12/16/20)
-- Imported Coverage Results Script
IMPORT.BEGIN
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:8
IMPORT.SOURCE.ORIG_FILENAME:/data/embedded_5.2_lts/gpu/drv/drivers/lwsci/tests/lwscisync/unit/ipc_table/LWSCISYNC_IPC_TABLE/S0000008.c
IMPORT.SOURCE.TIMESTAMP:0
IMPORT.SOURCE.COVERAGE_STATUS:FALSE
IMPORT.SOURCE.COVERAGE_TYPE:None
IMPORT.SOURCE.FILE_CHECKSUM:0
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:TRUE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:TRUE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_UNKNOWN
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:TRUE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.END
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:9
IMPORT.SOURCE.ORIG_FILENAME:/data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
IMPORT.SOURCE.TIMESTAMP:1636362385
IMPORT.SOURCE.COVERAGE_STATUS:TRUE
IMPORT.SOURCE.COVERAGE_TYPE:Statement+Branch+FUNCTION_CALL
IMPORT.SOURCE.FILE_CHECKSUM:3758482634
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:FALSE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:FALSE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_INITIALIZATIONS
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:FALSE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.COVERAGE_FOR_LAMBDAS:FALSE
IMPORT.SOURCE.END
RESULT.CBA.BEGIN
RESULT.CBA.RESULT: CBA_LwSciSyncCoreCopyIpcTable_1
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23020192?projectId=22182 
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: LwSciSyncCoreCopyIpcTable
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Non 0/Null initialized newIpcTable. Panicking!!\n")
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
!= newIpcTable->ipcPerm)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Non 0/Null initialized newIpcTable. Panicking!!\n");
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
!= newIpcTable->ipcPerm)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: if ((0U != newIpcTable->ipcRouteEntries) ||
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
(
((void *)0)
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if ((0U != newIpcTable->ipcRouteEntries) ||
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
(
((void *)0)
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
!= newIpcTable->ipcPerm)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Non 0/Null initialized newIpcTable. Panicking!!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* copy ipcRoute */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
!= newIpcTable->ipcPerm)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Non 0/Null initialized newIpcTable. Panicking!!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* copy ipcRoute */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreCopyIpcTable_2
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23079089?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: LwSciSyncCoreCopyIpcTable
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 33
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation")
RESULT.CBA.CONTEXT_BEFORE:
&arrSize, &opStatus);
if (1U != opStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 32
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
RESULT.CBA.CONTEXT_BEFORE:
&arrSize, &opStatus);
if (1U != opStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 31
RESULT.CBA.CONTEXT: if (1U != opStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Mul(newIpcTable->ipcRouteEntries, sizeof(LwSciIpcEndpoint),
&arrSize, &opStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 31
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != opStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Mul(newIpcTable->ipcRouteEntries, sizeof(LwSciIpcEndpoint),
&arrSize, &opStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if (1U != opStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
LwSciCommonMemcpyS(newIpcTable->ipcRoute, arrSize,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if (1U != opStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
LwSciCommonMemcpyS(newIpcTable->ipcRoute, arrSize,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreCopyIpcTable_3
RESULT.CBA.NOTES
Covered by inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23079089?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: LwSciSyncCoreCopyIpcTable
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 63
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation")
RESULT.CBA.CONTEXT_BEFORE:
&arrSize, &opStatus);
if (1U != opStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
RESULT.CBA.CONTEXT_BEFORE:
&arrSize, &opStatus);
if (1U != opStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.CONTEXT: if (1U != opStatus)
RESULT.CBA.CONTEXT_BEFORE:
sizeof(LwSciIpcEndpoint),
&arrSize, &opStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != opStatus)
RESULT.CBA.CONTEXT_BEFORE:
sizeof(LwSciIpcEndpoint),
&arrSize, &opStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 65
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if (1U != opStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
LwSciCommonMemcpyS(newIpcTable->ipcPerm[i].ipcRoute, arrSize,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 64
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if (1U != opStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected overflow of size used for allocation");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
LwSciCommonMemcpyS(newIpcTable->ipcPerm[i].ipcRoute, arrSize,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreExportIpcTable_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This check has been added as per CERT-C/MISRA-C guidelines.
When var1 plus var2 equal to tmpResult so, tmpResult cant't be less than the var1 its always returns OP_SUCCESS.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: LwSciSyncCoreExportIpcTable
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.CONTEXT: error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
&valSize, &addStatus2);
if ((1U != addStatus1) || (1U != addStatus2)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto free_ipcPermTxBuf;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 40
RESULT.CBA.CONTEXT: if ((1U != addStatus1) || (1U != addStatus2))
RESULT.CBA.CONTEXT_BEFORE:
u64Add(valSize, ipcRouteExportSize,
&valSize, &addStatus2);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto free_ipcPermTxBuf;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 40
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if ((1U != addStatus1) || (1U != addStatus2))
RESULT.CBA.CONTEXT_BEFORE:
u64Add(valSize, ipcRouteExportSize,
&valSize, &addStatus2);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto free_ipcPermTxBuf;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.CONTEXT: goto free_ipcPermTxBuf;
RESULT.CBA.CONTEXT_BEFORE:
if ((1U != addStatus1) || (1U != addStatus2)) {
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* if nothing to export, just return */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreExportIpcTable_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This check has been added as per CERT-C/MISRA-C guidelines.
When var1 plus var2 equal to tmpResult so, tmpResult cant't be less than the var1 its always returns OP_SUCCESS.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: ExportIpcPerm
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if (1U != addStatus1) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if (1U != addStatus1) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n")
RESULT.CBA.CONTEXT_BEFORE:
u64Add(ipcPermEntries, 1U, &ipcPermEntries, &addStatus1);
if (1U != addStatus1) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
RESULT.CBA.CONTEXT_BEFORE:
u64Add(ipcPermEntries, 1U, &ipcPermEntries, &addStatus1);
if (1U != addStatus1) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: if (1U != addStatus1)
RESULT.CBA.CONTEXT_BEFORE:
* ipcPermEntries */
u64Add(ipcPermEntries, 1U, &ipcPermEntries, &addStatus1);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != addStatus1)
RESULT.CBA.CONTEXT_BEFORE:
* ipcPermEntries */
u64Add(ipcPermEntries, 1U, &ipcPermEntries, &addStatus1);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreExportIpcTable_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This check has been added as per CERT-C/MISRA-C guidelines.
When var1 plus var2 equal to tmpResult so, tmpResult cant't be less than the var1 its always returns OP_SUCCESS.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: ExportIpcPerm
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 43
RESULT.CBA.CONTEXT: error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
u64Add(ipcPermIdx, 1U, &ipcPermIdx, &addStatus3);
if (1U != (addStatus1 & addStatus2)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto fn_exit;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.CONTEXT: if (1U != (addStatus1 & addStatus2))
RESULT.CBA.CONTEXT_BEFORE:
&valSize, &addStatus2);
u64Add(ipcPermIdx, 1U, &ipcPermIdx, &addStatus3);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != (addStatus1 & addStatus2))
RESULT.CBA.CONTEXT_BEFORE:
&valSize, &addStatus2);
u64Add(ipcPermIdx, 1U, &ipcPermIdx, &addStatus3);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 44
RESULT.CBA.CONTEXT: goto fn_exit;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != (addStatus1 & addStatus2)) {
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* ipcPermIdx should not overflow since it is of size_t type
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreExportIpcTable_4
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This check has been added as per CERT-C/MISRA-C guidelines.
When var1 plus var2 equal to tmpResult so, tmpResult cant't be less than the var1 its always returns OP_SUCCESS.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: ExportIpcPerm
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 45
RESULT.CBA.CONTEXT: if (1U != addStatus3)
RESULT.CBA.CONTEXT_BEFORE:
/* ipcPermIdx should not overflow since it is of size_t type
* and the loop iterates at most SIZE_MAX times. */
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 45
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != addStatus3)
RESULT.CBA.CONTEXT_BEFORE:
/* ipcPermIdx should not overflow since it is of size_t type
* and the loop iterates at most SIZE_MAX times. */
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 49
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if (1U != addStatus3) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 48
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if (1U != addStatus3) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 47
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n")
RESULT.CBA.CONTEXT_BEFORE:
* and the loop iterates at most SIZE_MAX times. */
if (1U != addStatus3) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 46
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Arithmetic overflow!\n");
RESULT.CBA.CONTEXT_BEFORE:
* and the loop iterates at most SIZE_MAX times. */
if (1U != addStatus3) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreExportIpcTable_5
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This check has been added as per CERT-C/MISRA-C guidelines.
When var1 plus var2 equal to tmpResult so, tmpResult cant't be less than the var1 its always returns OP_SUCCESS.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: ExportIpcPerm
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 55
RESULT.CBA.CONTEXT: error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
&valSize, &addStatus2);
if (1U != (addStatus1 & addStatus2)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto fn_exit;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 54
RESULT.CBA.CONTEXT: if (1U != (addStatus1 & addStatus2))
RESULT.CBA.CONTEXT_BEFORE:
u64Add(valSize, sizeof(ipcTable->ipcPermEntries),
&valSize, &addStatus2);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 54
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != (addStatus1 & addStatus2))
RESULT.CBA.CONTEXT_BEFORE:
u64Add(valSize, sizeof(ipcTable->ipcPermEntries),
&valSize, &addStatus2);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 56
RESULT.CBA.CONTEXT: goto fn_exit;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != (addStatus1 & addStatus2)) {
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreImportIpcTable_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
"tagInfo" contains "LwSciSyncCoreIpcTableKey_IpcEndpoints", hence "tmpInfo" cannot be NULL. The NULL check is thus defensive check.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: NumIpcEndpointImport
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
== tmpInfo) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "_IpcEndpoints tag not found\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
tmpInfo->expectedNum = 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
== tmpInfo) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "_IpcEndpoints tag not found\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
tmpInfo->expectedNum = 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "_IpcEndpoints tag not found\n")
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "_IpcEndpoints tag not found\n");
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
(uint32_t)LwSciSyncCoreIpcTableKey_IpcEndpoints,
tagInfo, tagsNum);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
(uint32_t)LwSciSyncCoreIpcTableKey_IpcEndpoints,
tagInfo, tagsNum);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreImportIpcTable_2
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
"tagInfo" contains "LwSciSyncCoreIpcTableKey_IpcPermEntry", hence "tmpInfo" cannot be NULL. The NULL check is thus defensive check.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: NumIpcPermImport
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
== tmpInfo) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "_IpcPermEntry tag not found\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
tmpInfo->expectedNum = (uint32_t)ipcTable->ipcPermEntries;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
== tmpInfo) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "_IpcPermEntry tag not found\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
tmpInfo->expectedNum = (uint32_t)ipcTable->ipcPermEntries;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "_IpcPermEntry tag not found\n")
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "_IpcPermEntry tag not found\n");
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
(uint32_t)LwSciSyncCoreIpcTableKey_IpcPermEntry,
tagInfo, tagsNum);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
(uint32_t)LwSciSyncCoreIpcTableKey_IpcPermEntry,
tagInfo, tagsNum);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreImportIpcTable_3
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23079330?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: IpcRouteImport
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.CONTEXT: error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
&routeSize, &opStatus);
if (1U != opStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto fn_exit;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 9
RESULT.CBA.CONTEXT: goto fn_exit;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != opStatus) {
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* -1 for what we added to ipcRouteEntries above */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 7
RESULT.CBA.CONTEXT: if (1U != opStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Mul(sizeof(LwSciIpcEndpoint), ipcTable->ipcRouteEntries,
&routeSize, &opStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 7
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != opStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Mul(sizeof(LwSciIpcEndpoint), ipcTable->ipcRouteEntries,
&routeSize, &opStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreImportIpcTable_4
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23079595?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: IpcRouteImport
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if (1U != opStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible arithmetic problem\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (length != tmpSize) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if (1U != opStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible arithmetic problem\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (length != tmpSize) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible arithmetic problem\n")
RESULT.CBA.CONTEXT_BEFORE:
&tmpSize, &opStatus);
if (1U != opStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible arithmetic problem\n");
RESULT.CBA.CONTEXT_BEFORE:
&tmpSize, &opStatus);
if (1U != opStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.CONTEXT: if (1U != opStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Sub(routeSize, sizeof(LwSciIpcEndpoint),
&tmpSize, &opStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible arithmetic problem\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != opStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Sub(routeSize, sizeof(LwSciIpcEndpoint),
&tmpSize, &opStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible arithmetic problem\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreImportIpcTable_5
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
MISRA mandates that switch..case shall have default statement.
It is impossible to execute the default statement as "key" value is check prior to switch statement.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: LwSciSyncCoreImportIpcTable
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 70
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
{
LwSciTracePrintf("[ERROR: %s]: " "Unrecognized tag despite previous check: \n" "%u\n", __FUNCTION__, key);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
break;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 69
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
{
LwSciTracePrintf("[ERROR: %s]: " "Unrecognized tag despite previous check: \n" "%u\n", __FUNCTION__, key);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
break;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 68
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unrecognized tag despite previous check: \n" "%u\n", __FUNCTION__, key)
RESULT.CBA.CONTEXT_BEFORE:
default:
{
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
break;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 67
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Unrecognized tag despite previous check: \n" "%u\n", __FUNCTION__, key);
RESULT.CBA.CONTEXT_BEFORE:
default:
{
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
break;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 66
RESULT.CBA.CONTEXT: default:
RESULT.CBA.CONTEXT_BEFORE:
break;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
{
LwSciTracePrintf("[ERROR: %s]: " "Unrecognized tag despite previous check: \n" "%u\n", __FUNCTION__, key);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 66
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: default:
RESULT.CBA.CONTEXT_BEFORE:
break;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
{
LwSciTracePrintf("[ERROR: %s]: " "Unrecognized tag despite previous check: \n" "%u\n", __FUNCTION__, key);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 71
RESULT.CBA.CONTEXT: break;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: " "Unrecognized tag despite previous check: \n" "%u\n", __FUNCTION__, key);
LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreImportIpcTable_6
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
"tagInfo" contains "LwSciSyncCoreIpcTableKey_IpcEndpoints", hence "tmpInfo" cannot be NULL. The NULL check is thus defensive check.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: ImportIpcPermEntry
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 69
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Couldn't find a tag known to exist\n")
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 68
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Couldn't find a tag known to exist\n");
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 71
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
== tmpInfo) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Couldn't find a tag known to exist\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
tmpInfo->expectedNum = 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 70
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
== tmpInfo) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Couldn't find a tag known to exist\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
tmpInfo->expectedNum = 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 67
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
(uint32_t)LwSciSyncCoreIpcTableKey_IpcEndpoints,
tagInfo, numTags);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 9
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 67
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
(uint32_t)LwSciSyncCoreIpcTableKey_IpcEndpoints,
tagInfo, numTags);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== tmpInfo) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 9
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreImportIpcTable_7
RESULT.CBA.NOTES
Covered by inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23079595?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: ImportIpcPermEntry
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 79
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "expected size value is out of range.\n")
RESULT.CBA.CONTEXT_BEFORE:
&expectedSize, &mulStatus);
if (1U != mulStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 78
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "expected size value is out of range.\n");
RESULT.CBA.CONTEXT_BEFORE:
&expectedSize, &mulStatus);
if (1U != mulStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 77
RESULT.CBA.CONTEXT: if (1U != mulStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Mul((ipcPerm->ipcRouteEntries), sizeof(LwSciIpcEndpoint),
&expectedSize, &mulStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "expected size value is out of range.\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 77
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != mulStatus)
RESULT.CBA.CONTEXT_BEFORE:
u64Mul((ipcPerm->ipcRouteEntries), sizeof(LwSciIpcEndpoint),
&expectedSize, &mulStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "expected size value is out of range.\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 81
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if (1U != mulStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "expected size value is out of range.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (length != expectedSize) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 80
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if (1U != mulStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "expected size value is out of range.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (length != expectedSize) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreImportIpcTable_8
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
MISRA mandates that switch..case shall have default statement.
It is impossible to execute the default statement as "key" value is check prior to switch statement.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: ImportIpcPermEntry
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 92
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible to reach an unknown tag\n")
RESULT.CBA.CONTEXT_BEFORE:
default:
{
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
break;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 91
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible to reach an unknown tag\n");
RESULT.CBA.CONTEXT_BEFORE:
default:
{
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
break;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 90
RESULT.CBA.CONTEXT: default:
RESULT.CBA.CONTEXT_BEFORE:
break;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
{
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible to reach an unknown tag\n");
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 90
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: default:
RESULT.CBA.CONTEXT_BEFORE:
break;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
{
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible to reach an unknown tag\n");
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 94
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
{
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible to reach an unknown tag\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
break;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 93
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
{
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible to reach an unknown tag\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
break;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 95
RESULT.CBA.CONTEXT: break;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Impossible to reach an unknown tag\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreIpcTableAppend_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
Subtraction underflow is not possible here
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: LwSciSyncCoreIpcTableAppend
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Subtraction underflow. Panicking!!\n")
RESULT.CBA.CONTEXT_BEFORE:
u64Sub((ipcTable->ipcRouteEntries), 1U, &index, &subStatus);
if (0U == subStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Subtraction underflow. Panicking!!\n");
RESULT.CBA.CONTEXT_BEFORE:
u64Sub((ipcTable->ipcRouteEntries), 1U, &index, &subStatus);
if (0U == subStatus) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: if (0U == subStatus)
RESULT.CBA.CONTEXT_BEFORE:
/* The subtraction won't fail since ipcRouteEntries won't be less than one */
u64Sub((ipcTable->ipcRouteEntries), 1U, &index, &subStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Subtraction underflow. Panicking!!\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (0U == subStatus)
RESULT.CBA.CONTEXT_BEFORE:
/* The subtraction won't fail since ipcRouteEntries won't be less than one */
u64Sub((ipcTable->ipcRouteEntries), 1U, &index, &subStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Subtraction underflow. Panicking!!\n");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if (0U == subStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Subtraction underflow. Panicking!!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ipcTable->ipcRoute[index] = ipcEndpoint;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if (0U == subStatus) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Subtraction underflow. Panicking!!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ipcTable->ipcRoute[index] = ipcEndpoint;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreIpcTableLwtSubTree_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
Here dest and source memory are coming from API LwSciSyncCoreIpcTableLwtSubTree() which has same memory, so this if statement cannot be covered.  
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: ExportIpcPerm
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.CONTEXT: if (1U != addStatus1)
RESULT.CBA.CONTEXT_BEFORE:
*bufSize = ipcPermBufSize;
u64Add((*totalBufSize), valSize, totalBufSize, &addStatus1);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != addStatus1)
RESULT.CBA.CONTEXT_BEFORE:
*bufSize = ipcPermBufSize;
u64Add((*totalBufSize), valSize, totalBufSize, &addStatus1);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
error = LwSciError_Overflow;
goto fn_exit;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.CONTEXT: error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
u64Add((*totalBufSize), valSize, totalBufSize, &addStatus1);
if (1U != addStatus1) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto fn_exit;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 63
RESULT.CBA.CONTEXT: goto fn_exit;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != addStatus1) {
error = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
*ipcPermEntriesPtr = ipcPermEntries;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.FUNCTION: MoveIpcPermEntry
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 4
RESULT.CBA.CONTEXT: LwSciCommonMemcpyS(dest, sizeof(LwSciSyncCoreAttrIpcPerm),
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonFree(dest->ipcRoute);
if (dest != src) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
src, sizeof(LwSciSyncCoreAttrIpcPerm));
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 5
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonMemcpyS(dest, sizeof(LwSciSyncCoreAttrIpcPerm),
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonFree(dest->ipcRoute);
if (dest != src) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
src, sizeof(LwSciSyncCoreAttrIpcPerm));
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 3
RESULT.CBA.CONTEXT: if (dest != src)
RESULT.CBA.CONTEXT_BEFORE:
{
LwSciCommonFree(dest->ipcRoute);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonMemcpyS(dest, sizeof(LwSciSyncCoreAttrIpcPerm),
src, sizeof(LwSciSyncCoreAttrIpcPerm));
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 3
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (dest != src)
RESULT.CBA.CONTEXT_BEFORE:
{
LwSciCommonFree(dest->ipcRoute);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonMemcpyS(dest, sizeof(LwSciSyncCoreAttrIpcPerm),
src, sizeof(LwSciSyncCoreAttrIpcPerm));
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreIpcTableGetPermAtSubTree_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
High
Justification:
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23079282?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: LwSciSyncCoreIpcTableGetPermAtSubTree
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected empty ipc perm branch")
RESULT.CBA.CONTEXT_BEFORE:
for (i = 0U; i < ipcTable->ipcPermEntries; i++) {
if (0U == ipcTable->ipcPerm[i].ipcRouteEntries) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected empty ipc perm branch");
RESULT.CBA.CONTEXT_BEFORE:
for (i = 0U; i < ipcTable->ipcPermEntries; i++) {
if (0U == ipcTable->ipcPerm[i].ipcRouteEntries) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: if (0U == ipcTable->ipcPerm[i].ipcRouteEntries)
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonMemcpyS(perm, sizeof(*perm), &tmp1, sizeof(tmp1));
for (i = 0U; i < ipcTable->ipcPermEntries; i++) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected empty ipc perm branch");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (0U == ipcTable->ipcPerm[i].ipcRouteEntries)
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonMemcpyS(perm, sizeof(*perm), &tmp1, sizeof(tmp1));
for (i = 0U; i < ipcTable->ipcPermEntries; i++) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected empty ipc perm branch");
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if (0U == ipcTable->ipcPerm[i].ipcRouteEntries) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected empty ipc perm branch");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
lastEntry = ipcTable->ipcPerm[i].ipcRouteEntries - 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if (0U == ipcTable->ipcPerm[i].ipcRouteEntries) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Unexpected empty ipc perm branch");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
lastEntry = ipcTable->ipcPerm[i].ipcRouteEntries - 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciSyncCoreIpcTableTreeAlloc_1
RESULT.CBA.NOTES
Covered by Inspection test: https://lwpu.jamacloud.com/perspective.req#/testCases/23020118?projectId=22182 
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscisync/src/ipc_table/lwscisync_ipc_table.c
RESULT.CBA.FUNCTION: LwSciSyncCoreIpcTableTreeAlloc
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 9
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "invalid ipcTable. Panicking!!\n")
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
!= ipcTable->ipcPerm) || (0U != ipcTable->ipcRouteEntries)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "invalid ipcTable. Panicking!!\n");
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
!= ipcTable->ipcPerm) || (0U != ipcTable->ipcRouteEntries)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 7
RESULT.CBA.CONTEXT: if ((
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= ipcTable->ipcRoute) || (0U != ipcTable->ipcPermEntries) ||
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 7
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if ((
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= ipcTable->ipcRoute) || (0U != ipcTable->ipcPermEntries) ||
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
!= ipcTable->ipcPerm) || (0U != ipcTable->ipcRouteEntries)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "invalid ipcTable. Panicking!!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (0U == size) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
!= ipcTable->ipcPerm) || (0U != ipcTable->ipcRouteEntries)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "invalid ipcTable. Panicking!!\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (0U == size) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.END
IMPORT.END