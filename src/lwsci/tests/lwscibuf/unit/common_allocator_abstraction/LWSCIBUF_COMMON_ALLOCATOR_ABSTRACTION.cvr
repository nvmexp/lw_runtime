-- VectorCAST 20.sp5 (12/16/20)
-- Imported Coverage Results Script
IMPORT.BEGIN
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:8
IMPORT.SOURCE.ORIG_FILENAME:/data/embedded_5.2_lts/gpu/drv/drivers/lwsci/tests/lwscibuf/unit/common_allocator_abstraction/LWSCIBUF_COMMON_ALLOCATOR_ABSTRACTION/S0000008.c
IMPORT.SOURCE.TIMESTAMP:0
IMPORT.SOURCE.COVERAGE_STATUS:FALSE
IMPORT.SOURCE.COVERAGE_TYPE:None
IMPORT.SOURCE.FILE_CHECKSUM:0
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:TRUE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:TRUE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_UNKNOWN
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:TRUE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.END
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:9
IMPORT.SOURCE.ORIG_FILENAME:/data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
IMPORT.SOURCE.TIMESTAMP:1636362385
IMPORT.SOURCE.COVERAGE_STATUS:TRUE
IMPORT.SOURCE.COVERAGE_TYPE:Statement+Branch+FUNCTION_CALL
IMPORT.SOURCE.FILE_CHECKSUM:2001990835
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:FALSE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:FALSE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_INITIALIZATIONS
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:FALSE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.COVERAGE_FOR_LAMBDAS:FALSE
IMPORT.SOURCE.END
RESULT.CBA.BEGIN
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceAlloc_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceCreateAllocVal is a function pointer pointing to address of static function LwSciBufAllocIfaceCreateSysMemAllocVal, so iFaceCreateAllocVal cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceAlloc
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
sciErr = LwSciError_NotSupported;
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
iFaceAlloc = allocIfaceFvt[allocType].iFaceAlloc;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
iFaceCreateAllocVal = allocIfaceHelperFvt[allocType].iFaceCreateAllocVal;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceCreateAllocVal) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
iFaceCreateAllocVal = allocIfaceHelperFvt[allocType].iFaceCreateAllocVal;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceCreateAllocVal) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
} else {
sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 17
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceAlloc_2
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceAlloc is a function pointer pointing to address of function LwSciBufSysMemAlloc, so iFaceAlloc cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceAlloc
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 37
RESULT.CBA.CONTEXT: goto free_allocVal;
RESULT.CBA.CONTEXT_BEFORE:
;
sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
free_allocVal:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.CONTEXT: sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto free_allocVal;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
iFaceAlloc = allocIfaceFvt[allocType].iFaceAlloc;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceAlloc) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
iFaceAlloc = allocIfaceFvt[allocType].iFaceAlloc;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceAlloc) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
sciErr = LwSciError_NotSupported;
goto free_allocVal;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 23
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceAlloc_3
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceDestroyAllocVal is a function pointer pointing to address of static function LwSciBufAllocIfaceDestroySysMemAllocVal, so iFaceDestroyAllocVal cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceAlloc
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 39
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
free_allocVal:
iFaceDestroyAllocVal = allocIfaceHelperFvt[allocType].iFaceDestroyAllocVal;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceDestroyAllocVal) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 39
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
free_allocVal:
iFaceDestroyAllocVal = allocIfaceHelperFvt[allocType].iFaceDestroyAllocVal;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceDestroyAllocVal) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
iFaceDestroyAllocVal(allocVal);
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 28
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 29
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceClose_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceClose is a function pointer pointing to address of function LwSciBufSysMemClose, so iFaceClose cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceClose
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceClose = allocIfaceFvt[allocType].iFaceClose;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceClose) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceClose = allocIfaceFvt[allocType].iFaceClose;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceClose) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
iFaceClose(context);
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 9
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceCpuCacheFlush_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceCpuCacheFlush is a function pointer pointing to address of function LwSciBufSysMemCpuCacheFlush, so iFaceCpuCacheFlush cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceCpuCacheFlush
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
;
sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceCpuCacheFlush = allocIfaceFvt[allocType].iFaceCpuCacheFlush;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceCpuCacheFlush) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceCpuCacheFlush = allocIfaceFvt[allocType].iFaceCpuCacheFlush;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceCpuCacheFlush) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
sciErr = iFaceCpuCacheFlush(context, rmHandle, cpuPtr, len);
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
sciErr = LwSciError_NotSupported;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 11
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceDeAlloc_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceDeAlloc is a function pointer pointing to address of function LwSciBufSysMemDealloc, so iFaceDeAlloc cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceDeAlloc
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
;
sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceDeAlloc = allocIfaceFvt[allocType].iFaceDeAlloc;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceDeAlloc) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceDeAlloc = allocIfaceFvt[allocType].iFaceDeAlloc;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceDeAlloc) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
sciErr = LwSciError_NotSupported;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 12
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceDeAlloc_2
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Nil
Justification:
Here sciErr gets error code from API LwSciBufSysMemDealloc where LwSciBufSysMemDealloc cannot return error code other than LwSciError_Success
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceDeAlloc
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "DeAllocation failed for allocation type \n" "%u\n", __FUNCTION__, (uint32_t)allocType)
RESULT.CBA.CONTEXT_BEFORE:
sciErr = iFaceDeAlloc(context, rmHandle);
if (LwSciError_Success != sciErr) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "DeAllocation failed for allocation type \n" "%u\n", __FUNCTION__, (uint32_t)allocType)
RESULT.CBA.CONTEXT_BEFORE:
sciErr = iFaceDeAlloc(context, rmHandle);
if (LwSciError_Success != sciErr) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: if (LwSciError_Success != sciErr)
RESULT.CBA.CONTEXT_BEFORE:
!= iFaceDeAlloc) {
sciErr = iFaceDeAlloc(context, rmHandle);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: " "DeAllocation failed for allocation type \n" "%u\n", __FUNCTION__, (uint32_t)allocType)
;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != sciErr)
RESULT.CBA.CONTEXT_BEFORE:
!= iFaceDeAlloc) {
sciErr = iFaceDeAlloc(context, rmHandle);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: " "DeAllocation failed for allocation type \n" "%u\n", __FUNCTION__, (uint32_t)allocType)
;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: " "DeAllocation failed for allocation type \n" "%u\n", __FUNCTION__, (uint32_t)allocType)
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceDupHandle_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceDupHandle is a function pointer pointing to address of function LwSciBufSysMemDupHandle, so iFaceDupHandle cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceDupHandle
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
;
sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceDupHandle = allocIfaceFvt[allocType].iFaceDupHandle;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceDupHandle) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceDupHandle = allocIfaceFvt[allocType].iFaceDupHandle;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceDupHandle) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
sciErr = LwSciError_NotSupported;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 12
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceGetAllocContext_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceCreateAllocContextParam is a function pointer pointing to address of function LwSciBufAllocIfaceCreateSysMemAllocContextParams, so iFaceCreateAllocContextParam cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceGetAllocContext
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.CONTEXT: err = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
;
err = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
iFaceGetAllocContext = allocIfaceFvt[allocType].iFaceGetAllocContext;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
iFaceCreateAllocContextParam =
allocIfaceHelperFvt[allocType].iFaceCreateAllocContextParams;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceCreateAllocContextParam) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
iFaceCreateAllocContextParam =
allocIfaceHelperFvt[allocType].iFaceCreateAllocContextParams;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceCreateAllocContextParam) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_NotSupported;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 15
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceGetAllocContext_2
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceGetAllocContext is a function pointer pointing to address of function LwSciBufSysMemGetAllocContext, so iFaceGetAllocContext cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceGetAllocContext
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 33
RESULT.CBA.CONTEXT: goto free_allocContext;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
free_allocContext:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
iFaceGetAllocContext = allocIfaceFvt[allocType].iFaceGetAllocContext;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceGetAllocContext) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
iFaceGetAllocContext = allocIfaceFvt[allocType].iFaceGetAllocContext;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceGetAllocContext) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 32
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto free_allocContext;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 22
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceGetAllocContext_3
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceDestroyAllocContextParam is a function pointer pointing to address of function LwSciBufAllocIfaceDestroySysMemAllocContextParams, so iFaceDestroyAllocContextParam cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceGetAllocContext
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
iFaceDestroyAllocContextParam =
allocIfaceHelperFvt[allocType].iFaceDestroyAllocContextParams;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceDestroyAllocContextParam) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
iFaceDestroyAllocContextParam =
allocIfaceHelperFvt[allocType].iFaceDestroyAllocContextParams;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceDestroyAllocContextParam) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 37
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
iFaceDestroyAllocContextParam(allocContextParams);
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 26
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 38
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 27
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceGetSize_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceGetSize is a function pointer pointing to address of function LwSciBufSysMemGetSize, so iFaceGetSize cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceGetSize
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.CONTEXT: sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
sciErr = LwSciError_NotSupported;
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* print output parameters */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceGetSize = allocIfaceFvt[allocType].iFaceGetSize;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceGetSize) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceGetSize = allocIfaceFvt[allocType].iFaceGetSize;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceGetSize) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
} else {
sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 13
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceMemMap_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceMemMap is a function pointer pointing to address of function LwSciBufSysMemMemMap, so iFaceMemMap cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceMemMap
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
;
sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* print output parameter */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
iFaceMemMap = allocIfaceFvt[allocType].iFaceMemMap;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceMemMap) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
}
iFaceMemMap = allocIfaceFvt[allocType].iFaceMemMap;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceMemMap) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
sciErr = LwSciError_NotSupported;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 14
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceMemUnMap_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceMemUnMap is a function pointer pointing to address of function LwSciBufSysMemMemUnMap, so iFaceMemUnMap cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceMemUnMap
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
;
sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceMemUnMap = allocIfaceFvt[allocType].iFaceMemUnMap;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceMemUnMap) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceMemUnMap = allocIfaceFvt[allocType].iFaceMemUnMap;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceMemUnMap) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
sciErr = LwSciError_NotSupported;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 13
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceOpen_1
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Low
Justification:
iFaceOpen is function pointer pointing to address of function LwSciBufSysMemOpen, so iFaceOpen cannot point to NULL pointer.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceOpen
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceOpen = allocIfaceFvt[allocType].iFaceOpen;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceOpen) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
;
iFaceOpen = allocIfaceFvt[allocType].iFaceOpen;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
!= iFaceOpen) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAllocIfaceOpen_2
RESULT.CBA.NOTES
Safety-impact (Nill/Low/Mid/High):
Nil
Justification:
Here sciErr 
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /data/embedded_5.2_lts/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_alloc_interface.c
RESULT.CBA.FUNCTION: LwSciBufAllocIfaceOpen
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: if (LwSciError_NotSupported == sciErr)
RESULT.CBA.CONTEXT_BEFORE:
sciErr = iFaceOpen(devHandle, context);
if (LwSciError_Success != sciErr) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_NotSupported == sciErr)
RESULT.CBA.CONTEXT_BEFORE:
sciErr = iFaceOpen(devHandle, context);
if (LwSciError_Success != sciErr) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
} else {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.CONTEXT: sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE:
} else {
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
;
sciErr = LwSciError_NotSupported;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* print output parameters */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != sciErr) {
if (LwSciError_NotSupported == sciErr) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
} else {
LwSciTracePrintf("[ERROR: %s]: " "open call to interface type failed: \n" "%u\n", __FUNCTION__, (uint32_t)allocType);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 10
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: ;
RESULT.CBA.CONTEXT_BEFORE:
}
} else {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
sciErr = LwSciError_NotSupported;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 13
RESULT.CBA.LINE.END
RESULT.CBA.END
IMPORT.END
