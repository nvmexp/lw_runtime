-- VectorCAST 20.sp5 (12/16/20)
-- Imported Coverage Results Script
IMPORT.BEGIN
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:8
IMPORT.SOURCE.ORIG_FILENAME:/home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/tests/lwscibuf/unit/attribute_constraint/LWSCIBUF_ATTR_CONSTRAINT/S0000008.c
IMPORT.SOURCE.TIMESTAMP:0
IMPORT.SOURCE.COVERAGE_STATUS:FALSE
IMPORT.SOURCE.COVERAGE_TYPE:None
IMPORT.SOURCE.FILE_CHECKSUM:0
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:TRUE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:TRUE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_UNKNOWN
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:TRUE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.END
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:9
IMPORT.SOURCE.ORIG_FILENAME:/home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
IMPORT.SOURCE.TIMESTAMP:1638305008
IMPORT.SOURCE.COVERAGE_STATUS:TRUE
IMPORT.SOURCE.COVERAGE_TYPE:Statement+Branch+FUNCTION_CALL
IMPORT.SOURCE.FILE_CHECKSUM:7831813
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:FALSE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:FALSE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_INITIALIZATIONS
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:FALSE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.COVERAGE_FOR_LAMBDAS:FALSE
IMPORT.SOURCE.END
RESULT.CBA.BEGIN
RESULT.CBA.RESULT: CBA_LwSciBufApplyConstraints_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufApplyConstraints
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 49
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not get value of key LwSciBufImageAttrKey_Layout from attrlist\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 48
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not get value of key LwSciBufImageAttrKey_Layout from attrlist\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 84
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufPrivateAttrKey_Size value.\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 83
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufPrivateAttrKey_Size value.\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 38
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetInternalAttrs failed\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 37
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetInternalAttrs failed\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 39
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetInternalAttrs failed\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
engineArray = (const LwSciBufHwEngine*)internalKeyValPair.value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetInternalAttrs failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetInternalAttrs failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 50
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not get value of key LwSciBufImageAttrKey_Layout from attrlist\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (0U != keyValPair.len) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 47
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not get value of key LwSciBufImageAttrKey_Layout from attrlist\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 47
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Could not get value of key LwSciBufImageAttrKey_Layout from attrlist\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 82
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufPrivateAttrKey_Size value.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 8
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 82
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufPrivateAttrKey_Size value.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 8
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 85
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufPrivateAttrKey_Size value.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
bufSize = *(const uint64_t*)pvtKeyValPair.value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 9
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufApplyConstraints_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListGetDataTypes() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufApplyConstraints
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 31
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n")
RESULT.CBA.CONTEXT_BEFORE:
&numBufTypes);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 30
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n");
RESULT.CBA.CONTEXT_BEFORE:
&numBufTypes);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 32
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* get HW engines operating on the buffer */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufAttrListGetDataTypes(reconcileList, &bufTypePtr,
&numBufTypes);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufAttrListGetDataTypes(reconcileList, &bufTypePtr,
&numBufTypes);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufArrayConstraint_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil

Justification:
The error check has been added for MISRA compliance and it is defensive programming check.
Hence, this non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufArrayConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Bad parametere supplied to LwSciBufArrayConstraint\n")
RESULT.CBA.CONTEXT_BEFORE:
== constraints)) {
err = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Bad parametere supplied to LwSciBufArrayConstraint\n");
RESULT.CBA.CONTEXT_BEFORE:
== constraints)) {
err = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: if ((
RESULT.CBA.CONTEXT_BEFORE:
;
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== attrList) || (
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if ((
RESULT.CBA.CONTEXT_BEFORE:
;
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== attrList) || (
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.CONTEXT: err = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== constraints)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Bad parametere supplied to LwSciBufArrayConstraint\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciError_BadParameter;
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Bad parametere supplied to LwSciBufArrayConstraint\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufArrayConstraints_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufArrayConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get keys\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get keys\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get keys\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get keys\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get keys\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
valDataType =
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufArrayConstraints_4
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufArrayConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 63
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set array keys\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set array keys\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 77
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set public key")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 76
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set public key");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set array keys\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set array keys\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 75
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set public key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 75
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set public key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 64
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set array keys\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
(void)memset(opArrPublicKeyValPair, 0x0, sizeof(opArrPublicKeyValPair));
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 78
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set public key");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 7
RESULT.CBA.LINE.END
RESULT.CBA.FUNCTION: LwSciBufRawConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
rawBufferSize = *(const uint64_t*)rawBufPublicKeyValPair[0].value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufArrayConstraints_5
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufGetConstraints() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufApplyConstraints
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufGetConstraints failed\n")
RESULT.CBA.CONTEXT_BEFORE:
&constraints, (void *)&imageLayout);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 60
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufGetConstraints failed\n");
RESULT.CBA.CONTEXT_BEFORE:
&constraints, (void *)&imageLayout);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 59
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
engineArray, (uint32_t)engineCount,
&constraints, (void *)&imageLayout);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufGetConstraints failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 59
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
engineArray, (uint32_t)engineCount,
&constraints, (void *)&imageLayout);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufGetConstraints failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufGetConstraints failed\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 7
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufArrayConstraints_6
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
Defensive programming, Thsi is impossible error check.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufApplyConstraints
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 65
RESULT.CBA.CONTEXT: if ((LwSciBufType_General > bufType) || (LwSciBufType_MaxValid <= bufType))
RESULT.CBA.CONTEXT_BEFORE:
for (index = 0; index < numBufTypes; index++) {
bufType = bufTypePtr[index];
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
// This is impossible error
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 65
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if ((LwSciBufType_General > bufType) || (LwSciBufType_MaxValid <= bufType))
RESULT.CBA.CONTEXT_BEFORE:
for (index = 0; index < numBufTypes; index++) {
bufType = bufTypePtr[index];
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
// This is impossible error
LwSciCommonPanic();
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 67
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
if ((LwSciBufType_General > bufType) || (LwSciBufType_MaxValid <= bufType)) {
// This is impossible error
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
typeConstraint = typeConstraintMap[bufType];
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 66
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
if ((LwSciBufType_General > bufType) || (LwSciBufType_MaxValid <= bufType)) {
// This is impossible error
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
typeConstraint = typeConstraintMap[bufType];
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAttrListContainsEngine_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufAttrListContainsEngine
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
len = (uint64_t)intKeyValPair.len;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufAttrListIsIsoEngine_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufAttrListIsIsoEngine
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != sciErr) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != sciErr) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != sciErr) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
len = (uint64_t)intKeyValPair.len;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.CONTEXT: if (LwSciError_Success != sciErr)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != sciErr)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListCommonGetAttr failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufCommonImageConstraint_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufConstrainComputeAlignment() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufCommonImageConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 7
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute alignment constraints.\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufConstrainComputeAlignment(attrList, constraints, level);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 6
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute alignment constraints.\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufConstrainComputeAlignment(attrList, constraints, level);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute alignment constraints.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciBufConstrainComputePitch(attrList, constraints, level);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 5
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
;
err = LwSciBufConstrainComputeAlignment(attrList, constraints, level);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute alignment constraints.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 5
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
;
err = LwSciBufConstrainComputeAlignment(attrList, constraints, level);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute alignment constraints.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufCommonImageConstraint_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufComputeImageOutputAttr() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufCommonImageConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 31
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute image output constraint.\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufComputeImageOutputAttr(attrList);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 30
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute image output constraint.\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufComputeImageOutputAttr(attrList);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 32
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute image output constraint.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciBufConstrainComputeImageSizeAlign(attrList, level);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufComputeImageOutputAttr(attrList);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute image output constraint.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufComputeImageOutputAttr(attrList);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute image output constraint.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufCommonImageConstraint_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufConstrainComputeImageSizeAlign() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufCommonImageConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 37
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute size and alignment.\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufConstrainComputeImageSizeAlign(attrList, level);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute size and alignment.\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufConstrainComputeImageSizeAlign(attrList, level);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 38
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute size and alignment.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufConstrainComputeImageSizeAlign(attrList, level);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute size and alignment.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufConstrainComputeImageSizeAlign(attrList, level);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to compute size and alignment.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufComputeImageOutputAttr_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufComputeImageOutputAttr
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* LwSciBufImageAttrKey_PlaneCount
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufComputeImageOutputAttr_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufComputeImageOutputAttr
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 74
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set internal keys\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 73
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set internal keys\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 88
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 87
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 75
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set internal keys\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
(void)memset(opImagePublicKeyValPair, 0x0, sizeof(opImagePublicKeyValPair));
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 72
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set internal keys\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 72
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set internal keys\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 89
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 86
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 86
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufComputeImageOutputAttr_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciColorToLwColor() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufComputeImageOutputAttr
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 37
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciColorToLwColor(planeColorFmt[planeNum], &colorFmt);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciColorGetComponentCount(planeColorFmt[planeNum],
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
gobPerBlockZ[planeNum] = 0U;
err = LwSciColorToLwColor(planeColorFmt[planeNum], &colorFmt);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
gobPerBlockZ[planeNum] = 0U;
err = LwSciColorToLwColor(planeColorFmt[planeNum], &colorFmt);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufComputeImageOutputAttr_4
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciColorGetComponentCount() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufComputeImageOutputAttr
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Failed to get channel count from LwSciColor\n" "%lu\n", __FUNCTION__, (uint64_t)planeColorFmt[planeNum])
RESULT.CBA.CONTEXT_BEFORE:
&channelCount[planeNum]);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Failed to get channel count from LwSciColor\n" "%lu\n", __FUNCTION__, (uint64_t)planeColorFmt[planeNum]);
RESULT.CBA.CONTEXT_BEFORE:
&channelCount[planeNum]);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 43
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: " "Failed to get channel count from LwSciColor\n" "%lu\n", __FUNCTION__, (uint64_t)planeColorFmt[planeNum]);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
colorDataType = LwColorGetDataType(colorFmt);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 40
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciColorGetComponentCount(planeColorFmt[planeNum],
&channelCount[planeNum]);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: " "Failed to get channel count from LwSciColor\n" "%lu\n", __FUNCTION__, (uint64_t)planeColorFmt[planeNum]);
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 40
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciColorGetComponentCount(planeColorFmt[planeNum],
&channelCount[planeNum]);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: " "Failed to get channel count from LwSciColor\n" "%lu\n", __FUNCTION__, (uint64_t)planeColorFmt[planeNum]);
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeAlignedHeight_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeAlignedHeight
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* LwSciBufImageAttrKey_PlaneCount
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeAlignedHeight_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeAlignedHeight
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 63
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 64
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeAlignedHeight_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is removing the overflow check which would result in MISRA violation.
It does not harm to have a redundant error check even though we know that overflow will never occur. 
Also, this adds protection against future modifications in code such that if variables causing overflow are allowed to take any values then we have protection against overflow errors.
Hence this is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeAlignedHeight
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 40
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n")
RESULT.CBA.CONTEXT_BEFORE:
u32Add(planeNum, tmpMul, &index, &addStatus);
if (1U != (mulStatus & addStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 39
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
RESULT.CBA.CONTEXT_BEFORE:
u32Add(planeNum, tmpMul, &index, &addStatus);
if (1U != (mulStatus & addStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.CONTEXT: err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != (mulStatus & addStatus)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 38
RESULT.CBA.CONTEXT: if (1U != (mulStatus & addStatus))
RESULT.CBA.CONTEXT_BEFORE:
u32Mul(planeCount, level, &tmpMul, &mulStatus);
u32Add(planeNum, tmpMul, &index, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 38
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != (mulStatus & addStatus))
RESULT.CBA.CONTEXT_BEFORE:
u32Mul(planeCount, level, &tmpMul, &mulStatus);
u32Add(planeNum, tmpMul, &index, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (LwSciBufScan_InterlaceType == scanType) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeAlignment_1
RESULT.CBA.NOTES
Covered by inspection test:
https://lwpu.jamacloud.com/perspective.req#/testCases/23066939?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeAlignment
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.CONTEXT: if (0U == planeAlignment[index])
RESULT.CBA.CONTEXT_BEFORE:
goto ret;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
/* Default value */
planeAlignment[index] = 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: if (0U == planeAlignment[index])
RESULT.CBA.CONTEXT_BEFORE:
goto ret;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
/* Default value */
planeAlignment[index] = 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeImageSizeAlign_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeImageSizeAlign
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* LwSciBufImageAttrKey_PlaneCount
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeImageSizeAlign_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeImageSizeAlign
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 64
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 63
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 62
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 65
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeImageSizeAlign_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is removing the overflow check which would result in MISRA violation.
It does not harm to have a redundant error check even though we know that overflow will never occur.
Also, this adds protection against future modifications in code such that if variables causing overflow are allowed to take any values then we have protection against overflow errors.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeImageSizeAlign
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 45
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n")
RESULT.CBA.CONTEXT_BEFORE:
u64Add(imageSize, planeAlignedSize[index], &imageSize, &addStatus2);
if (1U != (mulStatus & addStatus & addStatus2)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 44
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
RESULT.CBA.CONTEXT_BEFORE:
u64Add(imageSize, planeAlignedSize[index], &imageSize, &addStatus2);
if (1U != (mulStatus & addStatus & addStatus2)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 46
RESULT.CBA.CONTEXT: err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != (mulStatus & addStatus & addStatus2)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 43
RESULT.CBA.CONTEXT: if (1U != (mulStatus & addStatus & addStatus2))
RESULT.CBA.CONTEXT_BEFORE:
//imageSize += planeAlignedSize[index]
u64Add(imageSize, planeAlignedSize[index], &imageSize, &addStatus2);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 43
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != (mulStatus & addStatus & addStatus2))
RESULT.CBA.CONTEXT_BEFORE:
//imageSize += planeAlignedSize[index]
u64Add(imageSize, planeAlignedSize[index], &imageSize, &addStatus2);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 47
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (0U == index) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputePitch_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputePitch
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* LwSciBufImageAttrKey_PlaneCount
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputePitch_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputePitch
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 75
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 74
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 73
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 73
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 76
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputePitch_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is removing the overflow check which would result in MISRA violation.
It does not harm to have a redundant error check even though we know that overflow will never occur. 
Also, this adds protection against future modifications in code such that if variables causing overflow are allowed to take any values then we have protection against overflow errors.
Hence this is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputePitch
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n")
RESULT.CBA.CONTEXT_BEFORE:
u32Add(planeNum, tmpMul, &index, &addStatus);
if (1U != (addStatus & mulStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
RESULT.CBA.CONTEXT_BEFORE:
u32Add(planeNum, tmpMul, &index, &addStatus);
if (1U != (addStatus & mulStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 43
RESULT.CBA.CONTEXT: err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != (addStatus & mulStatus)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 40
RESULT.CBA.CONTEXT: if (1U != (addStatus & mulStatus))
RESULT.CBA.CONTEXT_BEFORE:
u32Mul(planeCount, level, &tmpMul, &mulStatus);
u32Add(planeNum, tmpMul, &index, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 40
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != (addStatus & mulStatus))
RESULT.CBA.CONTEXT_BEFORE:
u32Mul(planeCount, level, &tmpMul, &mulStatus);
u32Add(planeNum, tmpMul, &index, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 44
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciColorToLwColor(planeColorFmt[planeNum], &lwColorFmt);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeSize_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeSize
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* LwSciBufImageAttrKey_PlaneCount
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 33
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 33
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeSize_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeSize
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 100
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 99
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 98
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 98
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 101
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstrainComputeSize_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is removing the overflow check which would result in MISRA violation.
It does not harm to have a redundant error check even though we know that overflow will never occur. 
Also, this adds protection against future modifications in code such that if variables causing overflow are allowed to take any values then we have protection against overflow errors.
Hence this is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeSize
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 58
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n")
RESULT.CBA.CONTEXT_BEFORE:
u32Add(planeNum, tmpMul, &index, &addStatus);
if (1U != (addStatus & mulStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 57
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
RESULT.CBA.CONTEXT_BEFORE:
u32Add(planeNum, tmpMul, &index, &addStatus);
if (1U != (addStatus & mulStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 59
RESULT.CBA.CONTEXT: err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != (addStatus & mulStatus)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 56
RESULT.CBA.CONTEXT: if (1U != (addStatus & mulStatus))
RESULT.CBA.CONTEXT_BEFORE:
u32Mul(planeCount, level, &tmpMul, &mulStatus);
u32Add(planeNum, tmpMul, &index, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 56
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != (addStatus & mulStatus))
RESULT.CBA.CONTEXT_BEFORE:
u32Mul(planeCount, level, &tmpMul, &mulStatus);
u32Add(planeNum, tmpMul, &index, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 60
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
planeOffset[index] = offset;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstraintMatchBufType_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeAlignment
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
planeCount = *(const uint32_t*)ipImageKeyValPair[0].value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstraintMatchBufType_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeAlignment
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 58
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 57
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 56
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 56
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 59
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufConstraintMatchBufType_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is removing the overflow check which would result in MISRA violation.
It does not harm to have a redundant error check even though we know that overflow will never occur. 
Also, this adds protection against future modifications in code such that if variables causing overflow are allowed to take any values then we have protection against overflow errors.
Hence this is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufConstrainComputeAlignment
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 46
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n")
RESULT.CBA.CONTEXT_BEFORE:
u32Add(level, 1U, &tmpAdd, &addStatus);
if (1U != (mulStatus & addStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 45
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
RESULT.CBA.CONTEXT_BEFORE:
u32Add(level, 1U, &tmpAdd, &addStatus);
if (1U != (mulStatus & addStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 33
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n")
RESULT.CBA.CONTEXT_BEFORE:
u32Add(planeNum, tmpMul, &index, &addStatus);
if (1U != (addStatus & mulStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 32
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
RESULT.CBA.CONTEXT_BEFORE:
u32Add(planeNum, tmpMul, &index, &addStatus);
if (1U != (addStatus & mulStatus)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Overflow;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 31
RESULT.CBA.CONTEXT: if (1U != (addStatus & mulStatus))
RESULT.CBA.CONTEXT_BEFORE:
u32Mul(level, planeCount, &tmpMul, &mulStatus);
u32Add(planeNum, tmpMul, &index, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 31
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != (addStatus & mulStatus))
RESULT.CBA.CONTEXT_BEFORE:
u32Mul(level, planeCount, &tmpMul, &mulStatus);
u32Add(planeNum, tmpMul, &index, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 44
RESULT.CBA.CONTEXT: if (1U != (mulStatus & addStatus))
RESULT.CBA.CONTEXT_BEFORE:
u64Mul(sizeof(planeAlignment[0]), planeCount, &tmpMul2, &mulStatus);
u32Add(level, 1U, &tmpAdd, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 44
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U != (mulStatus & addStatus))
RESULT.CBA.CONTEXT_BEFORE:
u64Mul(sizeof(planeAlignment[0]), planeCount, &tmpMul2, &mulStatus);
u32Add(level, 1U, &tmpAdd, &addStatus);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.CONTEXT: err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != (addStatus & mulStatus)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 47
RESULT.CBA.CONTEXT: err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE:
if (1U != (mulStatus & addStatus)) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (0U == planeAlignment[index]) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 48
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Buffer Overflow\n");
err = LwSciError_Overflow;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
(void)memset(opImageKeyValPair, 0x0, sizeof(opImageKeyValPair));
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufImageConstraint_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufImageConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get image size.\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get image size.\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get image size.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
imageSize = *(const uint64_t*)ipImagePublicKeyValPair[0].value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get image size.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get image size.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufImageConstraint_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufImageConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 47
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set private keys.\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 46
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set private keys.\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 45
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set private keys.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 45
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set private keys.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 48
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set private keys.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufPyramidConstraint_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufPyramidConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Attributes\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Attributes\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 33
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Attributes\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 33
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Attributes\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Attributes\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
levelCount = *(const uint32_t*)ipPyramidKeyValPair[0].value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufPyramidConstraint_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufPyramidConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 81
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 80
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 110
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 109
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 79
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 79
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 124
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 123
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 82
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 108
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 108
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 122
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 122
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 111
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
(void)memset(privatePyramidKeyValPair, 0x0,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 125
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 7
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufPyramidConstraint_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil

Justification:
The error check has been added for MISRA compliance and it is defensive programming check.lwscibuf_attr_constraint - #3
Hence, this non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufPyramidConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid argument to LwSciBufPyramidConstraint\n")
RESULT.CBA.CONTEXT_BEFORE:
== constraints)) {
err = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid argument to LwSciBufPyramidConstraint\n");
RESULT.CBA.CONTEXT_BEFORE:
== constraints)) {
err = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: err = LwSciError_BadParameter;
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== constraints)) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid argument to LwSciBufPyramidConstraint\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciError_BadParameter;
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Invalid argument to LwSciBufPyramidConstraint\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: if ((
RESULT.CBA.CONTEXT_BEFORE:
privatePyramidKeyValPair[2];
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== attrList) || (
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if ((
RESULT.CBA.CONTEXT_BEFORE:
privatePyramidKeyValPair[2];
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== attrList) || (
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufRawConstraint_2
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufRawConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 43
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Setting LwSciBufRawBufferAttrKey_Align failed.")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 28
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Setting LwSciBufRawBufferAttrKey_Align failed.");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 30
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Setting LwSciBufRawBufferAttrKey_Align failed.");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
(void)memset(rawBufPrivateKeyValPair, 0x0, sizeof(rawBufPrivateKeyValPair));
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Setting LwSciBufRawBufferAttrKey_Align failed.");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Setting LwSciBufRawBufferAttrKey_Align failed.");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 44
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set key \n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufSetCommonOutput_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufSetCommonOutput
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 43
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
needCPUAccess = (const
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 44
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (0U == keyValPair.len) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get cpu access key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufSetCommonOutput_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufSetCommonOutput
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set CpuNeedSwCacheCoherency key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set CpuNeedSwCacheCoherency key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 55
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 54
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 37
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set CpuNeedSwCacheCoherency key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* Actual Permission */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set CpuNeedSwCacheCoherency key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set CpuNeedSwCacheCoherency key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 56
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 53
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 53
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufSetMemDomainPrivKey_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufSetMemDomainPrivKey
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Memory Domain key")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Memory Domain key");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get VidMem_GpuId key")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get VidMem_GpuId key");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 51
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Internal Memory Domain key")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 50
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Internal Memory Domain key");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 60
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Private Memory Domain key")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 59
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Private Memory Domain key");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 93
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 92
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 20
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Memory Domain key");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* if LwSciBufGeneralAttrKey_VidMem_GpuId key is set, override memdomain
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Memory Domain key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get Memory Domain key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get VidMem_GpuId key");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
vidMemIdLen = (uint64_t)keyValPair.len;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get VidMem_GpuId key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get VidMem_GpuId key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 49
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Internal Memory Domain key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 49
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Internal Memory Domain key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 58
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Private Memory Domain key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 58
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Private Memory Domain key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 52
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Internal Memory Domain key");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
// Set Private Key
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 5
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 61
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set Private Memory Domain key");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciBufAttrListIsIsoEngine(attrList, &isIsoEngine);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 91
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 8
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 91
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 8
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 94
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set actual permission key");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 10
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorComputeAlignmentPerDim_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorComputeAlignmentPerDim
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get raw buffer size key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get raw buffer size key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get raw buffer size key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
len = tensorKeyValPair.len;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get raw buffer size key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get raw buffer size key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorComputeAlignmentPerDim_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListGetDataTypes() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorComputeAlignmentPerDim
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufAttrListGetDataTypes(attrList, &bufTypePtr, &numBufTypes);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufAttrListGetDataTypes(attrList, &bufTypePtr, &numBufTypes);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
LwSciBufConstraintMatchBufType(bufTypePtr, numBufTypes,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
len = tensorKeyValPair.len;
err = LwSciBufAttrListGetDataTypes(attrList, &bufTypePtr, &numBufTypes);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 21
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
len = tensorKeyValPair.len;
err = LwSciBufAttrListGetDataTypes(attrList, &bufTypePtr, &numBufTypes);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "LwSciBufAttrListGetDataTypes failed\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorConstraint_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufTensorGetAttrDataType() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 18
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key DataType\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorGetAttrDataType(attrList, &bitsPerElement);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key DataType\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorGetAttrDataType(attrList, &bitsPerElement);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 19
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key DataType\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciBufTensorGetAttrNumDims(attrList, &numDims);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
;
err = LwSciBufTensorGetAttrDataType(attrList, &bitsPerElement);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key DataType\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
;
err = LwSciBufTensorGetAttrDataType(attrList, &bitsPerElement);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key DataType\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorConstraint_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufTensorGetAttrNumDims() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorGetAttrNumDims(attrList, &numDims);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorGetAttrNumDims(attrList, &numDims);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciBufTensorGetAttrSizePerDim(attrList, &sizePerDims);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufTensorGetAttrNumDims(attrList, &numDims);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufTensorGetAttrNumDims(attrList, &numDims);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorConstraint_3
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
However, LwSciBufTensorGetAttrSizePerDim() calls LwSciBufAttrListCommonGetAttrs() which may return an error and thus we cannot make this function void.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 30
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key SizePerDim\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorGetAttrSizePerDim(attrList, &sizePerDims);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 29
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key SizePerDim\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorGetAttrSizePerDim(attrList, &sizePerDims);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 31
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key SizePerDim\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciBufTensorGetAttrStridesPerDim(attrList, &stridePerDims[0]);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 28
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufTensorGetAttrSizePerDim(attrList, &sizePerDims);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key SizePerDim\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 28
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufTensorGetAttrSizePerDim(attrList, &sizePerDims);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key SizePerDim\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorConstraint_4
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
However, LwSciBufTensorGetAttrStridesPerDim() calls LwSciBufAttrListCommonGetAttrs() which may return an error and thus we cannot make this function void.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key StridesPerDim\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorGetAttrStridesPerDim(attrList, &stridePerDims[0]);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key StridesPerDim\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorGetAttrStridesPerDim(attrList, &stridePerDims[0]);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 37
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key StridesPerDim\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciBufTensorComputeAlignmentPerDim(attrList,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufTensorGetAttrStridesPerDim(attrList, &stridePerDims[0]);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key StridesPerDim\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufTensorGetAttrStridesPerDim(attrList, &stridePerDims[0]);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key StridesPerDim\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 4
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorConstraint_5
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
However, LwSciBufTensorSetAttrSizeStride() calls LwSciBufAttrListCommonGetAttrs() which may return an error and thus we cannot make this function void.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 75
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set keys size and StridePerDims\n")
RESULT.CBA.CONTEXT_BEFORE:
numDims);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 74
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set keys size and StridePerDims\n");
RESULT.CBA.CONTEXT_BEFORE:
numDims);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 73
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorSetAttrSizeStride(attrList, &size, stridePerDims,
numDims);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set keys size and StridePerDims\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 8
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 73
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorSetAttrSizeStride(attrList, &size, stridePerDims,
numDims);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set keys size and StridePerDims\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 8
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 76
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set keys size and StridePerDims\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
err = LwSciBufTensorSetAttrAlignment(attrList, constraints);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 10
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorConstraint_6
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 81
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to modify alignment key\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorSetAttrAlignment(attrList, constraints);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 80
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to modify alignment key\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufTensorSetAttrAlignment(attrList, constraints);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 79
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufTensorSetAttrAlignment(attrList, constraints);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to modify alignment key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 9
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 79
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufTensorSetAttrAlignment(attrList, constraints);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to modify alignment key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 9
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 82
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to modify alignment key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 11
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorConstraint_7
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil

Justification:
During LwSciBufAttrListSetAttrs, when user tried to set the value of  LwSciBufTensorAttrKey_NumDims, LwSciBuf checks if the value given by user is within range [1, LW_SCI_BUF_TENSOR_MAX_DIMS].
Hence during reconciliation it is guaranteed to have value within range [1, LW_SCI_BUF_TENSOR_MAX_DIMS]. This check although impossible is added as defensive programming.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorConstraint
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 47
RESULT.CBA.CONTEXT: err = LwSciError_Unknown;
RESULT.CBA.CONTEXT_BEFORE:
if (1U > numDims) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 44
RESULT.CBA.CONTEXT: if (1U > numDims)
RESULT.CBA.CONTEXT_BEFORE:
goto ret;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n");
err = LwSciError_Unknown;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 44
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (1U > numDims)
RESULT.CBA.CONTEXT_BEFORE:
goto ret;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n");
err = LwSciError_Unknown;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 46
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n")
RESULT.CBA.CONTEXT_BEFORE:
}
if (1U > numDims) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Unknown;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 45
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n");
RESULT.CBA.CONTEXT_BEFORE:
}
if (1U > numDims) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
err = LwSciError_Unknown;
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 48
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key NumDims\n");
err = LwSciError_Unknown;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
numDims1 = numDims - 1U;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 6
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorGetAttrDataType_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorGetAttrDataType
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 9
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
dataType = (const LwSciBufAttrValDataType*)tensorKeyValPair.value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 7
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 7
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorGetAttrNumDims_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorGetAttrNumDims
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 9
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
*numDims = *(const uint32_t*)tensorKeyValPair.value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorGetAttrSizePerDim_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorGetAttrSizePerDim
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 9
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
*sizePerDims = (const uint64_t*)tensorKeyValPair.value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorGetAttrStridesPerDim_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorGetAttrStridesPerDim
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 9
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
*stridePerDims = *(const uint64_t*)tensorKeyValPair.value;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get tensor key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorSetAttrAlignment_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorSetAttrAlignment
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufTensorAttrKey_BaseAddrAlign key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufTensorAttrKey_BaseAddrAlign key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufTensorAttrKey_BaseAddrAlign key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
if (0U != tensorKeyValPair.len) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufTensorAttrKey_BaseAddrAlign key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to get LwSciBufTensorAttrKey_BaseAddrAlign key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorSetAttrAlignment_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorSetAttrAlignment
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 36
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Alignment key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 35
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Alignment key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 27
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_BaseAddrAlign key.")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 26
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_BaseAddrAlign key.");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 28
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_BaseAddrAlign key.");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
pvtKeyValPair.key = LwSciBufPrivateAttrKey_Alignment;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_BaseAddrAlign key.");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_BaseAddrAlign key.");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 37
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Alignment key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Alignment key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 34
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Alignment key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 3
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufTensorSetAttrSizeStride_1
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High):
Nil
Justification:
This cannot be fixed since the only way to fix this is type-cast the return type to void to avoid MISRA violation of not validating the return type.
Since type-casting to void isn't good solution as in future if LwSciBufAttrListCommonGetAttrs() returns any other internal error, then it will be ignored.
Hence not fixing it and have this error check is better approach.
This is non-safety impacting.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_attr_constraint.c
RESULT.CBA.FUNCTION: LwSciBufTensorSetAttrSizeStride
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Sizelen key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 9
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Sizelen key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 24
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_StridesPerDim key\n")
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 23
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_StridesPerDim key\n");
RESULT.CBA.CONTEXT_BEFORE:
);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Sizelen key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
(void)memset(tensorPublicKeyValPair, 0x0, sizeof(tensorPublicKeyValPair));
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Sizelen key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 8
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufPrivateAttrKey_Sizelen key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_StridesPerDim key\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
ret:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_StridesPerDim key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 22
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
1
);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to set LwSciBufTensorAttrKey_StridesPerDim key\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.END
IMPORT.END