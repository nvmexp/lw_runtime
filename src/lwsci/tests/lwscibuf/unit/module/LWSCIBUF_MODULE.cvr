-- VectorCAST 20.sp5 (12/16/20)
-- Imported Coverage Results Script
IMPORT.BEGIN
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:8
IMPORT.SOURCE.ORIG_FILENAME:/home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/tests/lwscibuf/unit/module/LWSCIBUF_MODULE/S0000008.c
IMPORT.SOURCE.TIMESTAMP:0
IMPORT.SOURCE.COVERAGE_STATUS:FALSE
IMPORT.SOURCE.COVERAGE_TYPE:None
IMPORT.SOURCE.FILE_CHECKSUM:0
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:TRUE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:TRUE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_UNKNOWN
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:TRUE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.END
IMPORT.SOURCE.BEGIN
IMPORT.SOURCE.UNIT:9
IMPORT.SOURCE.ORIG_FILENAME:/home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_module.c
IMPORT.SOURCE.TIMESTAMP:1638305008
IMPORT.SOURCE.COVERAGE_STATUS:TRUE
IMPORT.SOURCE.COVERAGE_TYPE:Statement+Branch+FUNCTION_CALL
IMPORT.SOURCE.FILE_CHECKSUM:4230925398
IMPORT.SOURCE.COVER_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.HAS_EMPTY_STATEMENTS:TRUE
IMPORT.SOURCE.COVER_CATCH_AS_BRANCH:TRUE
IMPORT.SOURCE.HAS_CATCH_STATEMENTS:FALSE
IMPORT.SOURCE.EDG_COVERAGE:TRUE
IMPORT.SOURCE.COVER_FUNCTION_PARAMETERS:TRUE
IMPORT.SOURCE.HAS_LOGICAL_OPS_IN_PARAMETERS:FALSE
IMPORT.SOURCE.COVER_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_NESTED_CONDITIONAL_OPERATOR:TRUE
IMPORT.SOURCE.HAS_NESTED_CONDITIONAL_OPERATOR:FALSE
IMPORT.SOURCE.COVER_STATEMENTS_BY_BLOCK:FALSE
IMPORT.SOURCE.COVERAGE_FOR_DECLARATIONS:INSTRUMENT_VARIABLE_DECLARATIONS_INITIALIZATIONS
IMPORT.SOURCE.HAS_CONSTANT_BRANCH:FALSE
IMPORT.SOURCE.BASIS_PATHS_FOR_CONSTANT_BRANCHES:TRUE
IMPORT.SOURCE.COVERAGE_FOR_LAMBDAS:FALSE
IMPORT.SOURCE.END
RESULT.CBA.BEGIN
RESULT.CBA.RESULT: CBA_LwSciBufModuleCleanupObj_1
RESULT.CBA.NOTES
Covered by inspection test:https://lwpu.jamacloud.com/perspective.req#/testCases/22945327?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_module.c
RESULT.CBA.FUNCTION: LwSciBufModuleCleanupObj
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 6
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== obj) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
moduleObj = LwSciCastObjToBufModuleObjPriv(obj);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 5
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== obj) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
moduleObj = LwSciCastObjToBufModuleObjPriv(obj);
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 4
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
uint32_t iFaceType = (uint32_t)LwSciBufAllocIfaceType_SysMem;
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== obj) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 4
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
uint32_t iFaceType = (uint32_t)LwSciBufAllocIfaceType_SysMem;
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== obj) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufModuleCleanupObj_2
RESULT.CBA.NOTES
Covered by inspection test:https://lwpu.jamacloud.com/perspective.req#/testCases/22945326?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_module.c
RESULT.CBA.FUNCTION: LwSciBufModuleCleanupObj
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.CONTEXT: if (0x1A2B3C4DU != moduleObj->magic)
RESULT.CBA.CONTEXT_BEFORE:
/* print input parameters */
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (0x1A2B3C4DU != moduleObj->magic)
RESULT.CBA.CONTEXT_BEFORE:
/* print input parameters */
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
;
if (0x1A2B3C4DU != moduleObj->magic) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* close all alloc interfaces */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
;
if (0x1A2B3C4DU != moduleObj->magic) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* close all alloc interfaces */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufModuleGetAllocIfaceOpenContext_1
RESULT.CBA.NOTES
Covered by Inspection test:https://lwpu.jamacloud.com/perspective.req#/testCases/22945297?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_module.c
RESULT.CBA.FUNCTION: LwSciBufModuleGetAllocIfaceOpenContext
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 16
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to validate LwSciBufModule reference.\n")
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufModuleValidate(module);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 15
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to validate LwSciBufModule reference.\n");
RESULT.CBA.CONTEXT_BEFORE:
err = LwSciBufModuleValidate(module);
if (LwSciError_Success != err) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
goto ret;
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufModuleValidate(module);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to validate LwSciBufModule reference.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_Success != err)
RESULT.CBA.CONTEXT_BEFORE:
}
err = LwSciBufModuleValidate(module);
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to validate LwSciBufModule reference.\n");
goto ret;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 17
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
if (LwSciError_Success != err) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Failed to validate LwSciBufModule reference.\n");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* print input variables */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufModuleGetDevHandle_1
RESULT.CBA.NOTES
Covered by Inspection test:https://lwpu.jamacloud.com/perspective.req#/testCases/23053740?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_module.c
RESULT.CBA.FUNCTION: LwSciBufModuleGetDevHandle
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 14
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonPanic()
RESULT.CBA.CONTEXT_BEFORE:
== dev) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Bad parameter supplied to LwSciBufModuleGetDevHandle");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* print input variables */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 13
RESULT.CBA.CONTEXT: LwSciCommonPanic();
RESULT.CBA.CONTEXT_BEFORE:
== dev) {
LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Bad parameter supplied to LwSciBufModuleGetDevHandle");
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
/* print input variables */
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 1
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 12
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Bad parameter supplied to LwSciBufModuleGetDevHandle")
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== dev) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 11
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: %s\n", __FUNCTION__, "Bad parameter supplied to LwSciBufModuleGetDevHandle");
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
== dev) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciCommonPanic();
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
goto ret;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== dev) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 10
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (
RESULT.CBA.CONTEXT_BEFORE:
goto ret;
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
((void *)0)
== dev) {
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufModuleGetDevHandle_2
RESULT.CBA.NOTES
Safety impact (Nil/Low/Medium/High)
Nil
Justification:
This goto is no-op and is used here to avoid cert-c violations.
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_module.c
RESULT.CBA.FUNCTION: LwSciBufModuleGetDevHandle
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 25
RESULT.CBA.CONTEXT: goto ret;
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonPanic();
/* This goto is no-op and is used here to avoid cert-c violations. */
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
*dev = moduleObj->dev;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.MATCHING_LINE_INDEX: 2
RESULT.CBA.LINE.END
RESULT.CBA.RESULT: CBA_LwSciBufModuleOpen_1
RESULT.CBA.NOTES
Covered by inspection test:https://lwpu.jamacloud.com/perspective.req#/testCases/23056189?projectId=22182
RESULT.CBA.NOTES_END
RESULT.CBA.UNIT: /home/daalla/git/embedded_5_2-lts/auto/gpu/drv/drivers/lwsci/lwscibuf/src/lwscibuf_module.c
RESULT.CBA.FUNCTION: LwSciBufModuleOpen
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 53
RESULT.CBA.CONTEXT: LwSciBufAllocIfaceClose(allocType,
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonMemcpyS(&allocType, sizeof(allocType),
&interface, sizeof(interface));
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
&moduleObj->iFaceOpenContext[interface]);
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 54
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciBufAllocIfaceClose(allocType,
RESULT.CBA.CONTEXT_BEFORE:
LwSciCommonMemcpyS(&allocType, sizeof(allocType),
&interface, sizeof(interface));
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
&moduleObj->iFaceOpenContext[interface]);
}
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 56
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciBufDevClose(moduleObj->dev)
RESULT.CBA.CONTEXT_BEFORE:
&moduleObj->iFaceOpenContext[interface]);
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
free_module:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 55
RESULT.CBA.CONTEXT: LwSciBufDevClose(moduleObj->dev);
RESULT.CBA.CONTEXT_BEFORE:
&moduleObj->iFaceOpenContext[interface]);
}
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
}
free_module:
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 51
RESULT.CBA.CONTEXT: LwSciCommonMemcpyS(&allocType, sizeof(allocType),
RESULT.CBA.CONTEXT_BEFORE:
for (interface = (uint32_t)LwSciBufAllocIfaceType_SysMem;
interface < iFaceType; ++interface) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
&interface, sizeof(interface));
LwSciBufAllocIfaceClose(allocType,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 52
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciCommonMemcpyS(&allocType, sizeof(allocType),
RESULT.CBA.CONTEXT_BEFORE:
for (interface = (uint32_t)LwSciBufAllocIfaceType_SysMem;
interface < iFaceType; ++interface) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
&interface, sizeof(interface));
LwSciBufAllocIfaceClose(allocType,
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 41
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Failed opening allocation interface for alloc type \n" "%u\n", __FUNCTION__, iFaceType)
RESULT.CBA.CONTEXT_BEFORE:
;
if (LwSciError_NotSupported != sciErr) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
goto free_alloc_interface;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 42
RESULT.CBA.COVERAGE: FC
RESULT.CBA.CONTEXT: LwSciTracePrintf("[ERROR: %s]: " "Failed opening allocation interface for alloc type \n" "%u\n", __FUNCTION__, iFaceType)
RESULT.CBA.CONTEXT_BEFORE:
;
if (LwSciError_NotSupported != sciErr) {
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
;
goto free_alloc_interface;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 50
RESULT.CBA.CONTEXT: for (interface = (uint32_t)LwSciBufAllocIfaceType_SysMem;
RESULT.CBA.CONTEXT_BEFORE:
uint32_t interface = 0U;
LwSciBufAllocIfaceType allocType;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
interface < iFaceType; ++interface) {
LwSciCommonMemcpyS(&allocType, sizeof(allocType),
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 50
RESULT.CBA.COVERAGE: F
RESULT.CBA.CONTEXT: for (interface = (uint32_t)LwSciBufAllocIfaceType_SysMem;
RESULT.CBA.CONTEXT_BEFORE:
uint32_t interface = 0U;
LwSciBufAllocIfaceType allocType;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
interface < iFaceType; ++interface) {
LwSciCommonMemcpyS(&allocType, sizeof(allocType),
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 50
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: for (interface = (uint32_t)LwSciBufAllocIfaceType_SysMem;
RESULT.CBA.CONTEXT_BEFORE:
uint32_t interface = 0U;
LwSciBufAllocIfaceType allocType;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
interface < iFaceType; ++interface) {
LwSciCommonMemcpyS(&allocType, sizeof(allocType),
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 43
RESULT.CBA.CONTEXT: goto free_alloc_interface;
RESULT.CBA.CONTEXT_BEFORE:
LwSciTracePrintf("[ERROR: %s]: " "Failed opening allocation interface for alloc type \n" "%u\n", __FUNCTION__, iFaceType)
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
} else {
;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 40
RESULT.CBA.CONTEXT: if (LwSciError_NotSupported != sciErr)
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: " "Failed opening allocation interface for alloc type \n" "%u\n", __FUNCTION__, iFaceType)
;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 40
RESULT.CBA.COVERAGE: T
RESULT.CBA.CONTEXT: if (LwSciError_NotSupported != sciErr)
RESULT.CBA.CONTEXT_BEFORE:
((void *)0)
;
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciTracePrintf("[ERROR: %s]: " "Failed opening allocation interface for alloc type \n" "%u\n", __FUNCTION__, iFaceType)
;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.LINE.BEGIN
RESULT.CBA.LINE: 49
RESULT.CBA.CONTEXT: uint32_t interface = 0U;
RESULT.CBA.CONTEXT_BEFORE:
{
// Close any allocation interfaces that have been opened
RESULT.CBA.CONTEXT_BEFORE_END
RESULT.CBA.CONTEXT_AFTER:
LwSciBufAllocIfaceType allocType;
for (interface = (uint32_t)LwSciBufAllocIfaceType_SysMem;
RESULT.CBA.CONTEXT_AFTER_END
RESULT.CBA.LINE.END
RESULT.CBA.END
IMPORT.END