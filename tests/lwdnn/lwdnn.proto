/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package lwidia_libs_test.proto;

// Disable linter warning about '8x4' enum below.
// LINT: LEGACY_NAMES

// lwDNN API parameters represented as protos, plus aggregate messages that
// specify lwDNN tests and benchmarks.

// The enums below correspond to the lwdnn*_t enum identifiers with LWDNN_*
// enumerators. Enumerator fields are wrapped in oneofs because the zero-valued
// enumerators do not correspond to default values.

// Type of colwolution to use.
enum ColwolutionMode {
  COLWOLUTION = 0;
  CROSS_CORRELATION = 1;
}

// Data type of tensors and filters.
enum DataType {
  DATA_FLOAT = 0;
  DATA_DOUBLE = 1;
  DATA_HALF = 2;
  DATA_INT8 = 3;
  DATA_INT32 = 4;
  DATA_INT8x4 = 5;
}

// Element ordering for 4D tensors and filters.
enum TensorFormat {
  TENSOR_NCHW = 0;
  TENSOR_NHWC = 1;
  TENSOR_NCHW_VECT_C = 2;
}

// Math ops to use for colwolution.
enum MathType {
  DEFAULT_MATH = 0;
  // Use Volta's tensor ALUs if available, default otherwise.
  TENSOR_OP_MATH = 1;
}

// The colwolution algorithm to use, or how to find the most suitable one.
enum ColwolutionFwdAlgo {
  COLWOLUTION_FWD_ALGO_IMPLICIT_GEMM = 0;
  COLWOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM = 1;
  COLWOLUTION_FWD_ALGO_GEMM = 2;
  COLWOLUTION_FWD_ALGO_DIRECT = 3;
  COLWOLUTION_FWD_ALGO_FFT = 4;
  COLWOLUTION_FWD_ALGO_FFT_TILING = 5;
  COLWOLUTION_FWD_ALGO_WINOGRAD = 6;
  COLWOLUTION_FWD_ALGO_WINOGRAD_NONFUSED = 7;
}

enum ColwolutionBwdDataAlgo {
  COLWOLUTION_BWD_DATA_ALGO_0 = 0;  // non-deterministic
  COLWOLUTION_BWD_DATA_ALGO_1 = 1;
  COLWOLUTION_BWD_DATA_ALGO_FFT = 2;
  COLWOLUTION_BWD_DATA_ALGO_FFT_TILING = 3;
  COLWOLUTION_BWD_DATA_ALGO_WINOGRAD = 4;
  COLWOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED = 5;
}

enum ColwolutionBwdFilterAlgo {
  COLWOLUTION_BWD_FILTER_ALGO_0 = 0;  // non-deterministic
  COLWOLUTION_BWD_FILTER_ALGO_1 = 1;
  COLWOLUTION_BWD_FILTER_ALGO_FFT = 2;
  COLWOLUTION_BWD_FILTER_ALGO_3 = 3;  // non-deterministic, algo0 with workspace
  COLWOLUTION_BWD_FILTER_ALGO_WINOGRAD = 4;  // not implemented
  COLWOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED = 5;
  COLWOLUTION_BWD_FILTER_ALGO_FFT_TILING = 6;
}

// End of enums with lwDNN equivalents.

// Describes a tensor of some rank. Passed to lwdnnSetTensor?dDescriptor.
message TensorDescriptor {
  // The length is the rank of the tensor.
  // NCHW order even if format below is NHWC.
  repeated int32 dimension = 1;

  oneof data_type_oneof {
    DataType data_type = 2;
  }

  oneof format_oneof {
    // For ranks other than 4, only TENSOR_NCHW (corresponding to fully packed)
    // is supported.
    TensorFormat format = 3;
  }
  // Must be empty if format is specified, otherwise must have same length as
  // dimension.
  repeated int32 stride = 4;
}

// Describes a filter. Passed to lwdnnSetFilterNdDescriptor.
message FilterDescriptor {
  repeated int32 dimension = 1;

  oneof data_type_oneof {
    DataType data_type = 2;
  }
  oneof format_oneof {
    TensorFormat format = 3;
  }
}

// Describes a colwolution. Passed to lwdnnSetColwolutionNdDescriptor.
message ColwolutionDescriptor {
  // Repeated fields below are expanded to same size using the default.
  // The size is the number of spatial dimensions (i.e. 2 for 2D colwolution).
  repeated int32 pad = 1;            // default = 0
  repeated int32 filter_stride = 2;  // default = 1
  repeated int32 dilation = 3;       // default = 1

  oneof compute_mode_oneof {
    DataType compute_mode = 4;
  }

  oneof mode_oneof {
    ColwolutionMode mode = 5;
  }

  oneof math_type_oneof {
    MathType math_type = 6;  // TENSOR_OP_MATH requires lwDNN 7.
  }

  int32 group_count = 7;  // >1 requires lwDNN 7.
}

enum ColwolutionDirection {
  COLWOLUTION_DIRECTION_UNSPECIFIED = 0;
  COLWOLUTION_FWD = 1;
  COLWOLUTION_BWD_DATA = 2;
  COLWOLUTION_BWD_FILTER = 3;
}

// Describes a forward, backward data, or backward filter colwolution.
message ColwolutionConfig {
  TensorDescriptor input = 1;   // required
  FilterDescriptor filter = 2;  // required
  ColwolutionDescriptor colwolution = 3;
  TensorDescriptor output = 4;
  double one_minus_alpha = 5;
  double beta = 6;

  oneof algo_oneof {
    ColwolutionFwdAlgo fwd_algo = 7;
    ColwolutionBwdDataAlgo bwd_data_algo = 8;
    ColwolutionBwdFilterAlgo bwd_filter_algo = 9;
    // Only allowed for colwolution_test.test. Runs all supported algos.
    ColwolutionDirection all_algos = 10;
    // Only allowed for colwolution_benchmark. Finds the fastest algo.
    ColwolutionDirection find_algo = 11;
  }

  oneof workspace_oneof {
    // Only relevant for all_algos and find_algo. Default is all
    // unallocated memory up to the device_memory_limit flag value.
    uint64 workspace_limit = 12;
  }

  string label = 13;
}

// ColwolutionTest.CompareResults checks that element-wise maximum difference
// between the results of two colwolutions is within a threshold. The threshold
// is computed based on the parameters, see lwdnn_all_test.cc.
//
// A ColwolutionTest instance can specify a series of comparisons against the
// colwolution specified by the 'reference' field. The other colwolution is
// specified by merging one 'test' message with the 'reference' message,
// and running one of the algorithms requested.
message ColwolutionTest {
  ColwolutionConfig reference = 1;
  repeated ColwolutionConfig test = 2;

  // The two numbers describe an interval [values_lower_bound,
  // values_upper_bound] such that, all randomly generated device data are
  // scaled to that range, uniformly.
  double values_lower_bound = 3;
  oneof values_bound_oneof {
    double values_upper_bound = 4;
  }
}

message Tests {
  repeated ColwolutionTest colwolution_test = 1;
}

message Benchmarks {
  repeated ColwolutionConfig colwolution_benchmark = 1;
}
