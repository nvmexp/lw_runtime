/*-------------------------------------------------------------------------------------
 *
 * Copyright (c) Microsoft Corporation
 *
 *-------------------------------------------------------------------------------------*/
import "oaidl.idl";
import "ocidl.idl";

import "d3d11.idl";
import "d3d12.idl";

cpp_quote( "" )
cpp_quote( "///////////////////////////////////////////////////////////////////////////" )
cpp_quote( "// D3D11CreateDeviceForD3D12" )
cpp_quote( "// ------------------" )
cpp_quote( "//" )
cpp_quote( "// pDevice" )
cpp_quote( "//      Specifies a pre-existing D3D12 device to use for D3D11 interop." )
cpp_quote( "//      May not be NULL." )
cpp_quote( "// Flags" )
cpp_quote( "//      Any of those dolwmented for D3D11CreateDeviceAndSwapChain." )
cpp_quote( "// pFeatureLevels" )
cpp_quote( "//      Array of any of the following:" )
cpp_quote( "//          D3D_FEATURE_LEVEL_11_1" )
cpp_quote( "//          D3D_FEATURE_LEVEL_11_0" )
cpp_quote( "//          D3D_FEATURE_LEVEL_10_1" )
cpp_quote( "//          D3D_FEATURE_LEVEL_10_0" )
cpp_quote( "//          D3D_FEATURE_LEVEL_9_3" )
cpp_quote( "//          D3D_FEATURE_LEVEL_9_2" )
cpp_quote( "//          D3D_FEATURE_LEVEL_9_1" )
cpp_quote( "//       The first feature level which is less than or equal to the" )
cpp_quote( "//       D3D12 device's feature level will be used to perform D3D11 validation." )
cpp_quote( "//       Creation will fail if no acceptable feature levels are provided." )
cpp_quote( "//       Providing NULL will default to the D3D12 device's feature level." )
cpp_quote( "// FeatureLevels" )
cpp_quote( "//      Size of feature levels array." )
cpp_quote( "// SDKVersion" )
cpp_quote( "//      SDK version. Use the D3D11_SDK_VERSION macro." )
cpp_quote( "// ppDevice" )
cpp_quote( "//      Pointer to returned interface. May be NULL." )
cpp_quote( "// ppImmediateContext" )
cpp_quote( "//      Pointer to returned interface. May be NULL." )
cpp_quote( "// pChosenFeatureLevel" )
cpp_quote( "//      Pointer to returned feature level. May be NULL." )
cpp_quote( "//" )
cpp_quote( "// Return Values" )
cpp_quote( "//  Any of those dolwmented for " )
cpp_quote( "//          D3D11CreateDevice" )
cpp_quote( "//" )
cpp_quote( "///////////////////////////////////////////////////////////////////////////" )
cpp_quote( "typedef HRESULT (WINAPI* PFN_D3D11_CREATE_DEVICE_FOR_D3D12)( _In_ IUnknown*, UINT, " )
cpp_quote( "    _In_reads_opt_( FeatureLevels ) CONST D3D_FEATURE_LEVEL*, " )
cpp_quote( "    UINT FeatureLevels, UINT, _COM_Outptr_opt_ ID3D11Device**, _COM_Outptr_opt_ ID3D11DeviceContext**, " )
cpp_quote( "    _Out_opt_ D3D_FEATURE_LEVEL* );" )
cpp_quote( "" )
cpp_quote( "HRESULT WINAPI D3D11CreateDeviceForD3D12(" )
cpp_quote( "    _In_ IUnknown* pDevice," )
cpp_quote( "    UINT Flags," )
cpp_quote( "    _In_reads_opt_( FeatureLevels ) CONST D3D_FEATURE_LEVEL* pFeatureLevels," )
cpp_quote( "    UINT FeatureLevels," )
cpp_quote( "    UINT SDKVersion," )
cpp_quote( "    _COM_Outptr_opt_ ID3D11Device** ppDevice," )
cpp_quote( "    _COM_Outptr_opt_ ID3D11DeviceContext** ppImmediateContext," )
cpp_quote( "    _Out_opt_ D3D_FEATURE_LEVEL* pChosenFeatureLevel );" )
cpp_quote( "" )


cpp_quote( "#if !defined( D3D12_NO_HELPERS ) && defined( __cplusplus )" )
cpp_quote( "}" ) // extern C
cpp_quote( "struct CD3D12_HEAP_PROPERTIES_FROM11 : public CD3D12_HEAP_PROPERTIES" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_HEAP_PROPERTIES_FROM11() : CD3D12_HEAP_PROPERTIES() { }" )
cpp_quote( "    static CD3D12_HEAP_PROPERTIES ColwertD3D11Usage( D3D11_USAGE Usage, UINT CPUAccessFlags )" )
cpp_quote( "    {" )
cpp_quote( "        switch (Usage)" )
cpp_quote( "        {" )
cpp_quote( "        case D3D11_USAGE_DEFAULT:" )
cpp_quote( "            if (CPUAccessFlags)" )
cpp_quote( "            {" )
cpp_quote( "                return CD3D12_HEAP_PROPERTIES(" )
cpp_quote( "                    CPUAccessFlags == D3D11_CPU_ACCESS_WRITE ? D3D12_CPU_PAGE_WRITE_COMBINE : D3D12_CPU_PAGE_WRITE_BACK" )
cpp_quote( "                    , D3D12_MEMORY_POOL_L0" )
cpp_quote( "                    );" )
cpp_quote( "            }" )
cpp_quote( "            else" )
cpp_quote( "            {" )
cpp_quote( "                return CD3D12_HEAP_PROPERTIES( D3D12_HEAP_TYPE_DEFAULT );" )
cpp_quote( "            }" )
cpp_quote( "        case D3D11_USAGE_IMMUTABLE:" )
cpp_quote( "            return CD3D12_HEAP_PROPERTIES( CPUAccessFlags ? D3D12_HEAP_TYPE( 0 ) : D3D12_HEAP_TYPE_DEFAULT );" )
cpp_quote( "        case D3D11_USAGE_DYNAMIC:" )
cpp_quote( "            return CD3D12_HEAP_PROPERTIES( CPUAccessFlags == D3D11_CPU_ACCESS_WRITE ? D3D12_HEAP_TYPE_UPLOAD : D3D12_HEAP_TYPE( 0 ) );" )
cpp_quote( "        case D3D11_USAGE_STAGING:" )
cpp_quote( "            return CD3D12_HEAP_PROPERTIES( CPUAccessFlags == D3D11_CPU_ACCESS_WRITE" )
cpp_quote( "                ? D3D12_HEAP_TYPE_UPLOAD" )
cpp_quote( "                : (CPUAccessFlags ? D3D12_HEAP_TYPE_READBACK : D3D12_HEAP_TYPE( 0 ))" )
cpp_quote( "                );" )
cpp_quote( "        default: return CD3D12_HEAP_PROPERTIES( D3D12_HEAP_TYPE( 0 ) );" )
cpp_quote( "        }" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_PROPERTIES_FROM11( const D3D11_BUFFER_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_HEAP_PROPERTIES*>(this) = ColwertD3D11Usage( o.Usage, o.CPUAccessFlags );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_PROPERTIES_FROM11( const D3D11_TEXTURE1D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_HEAP_PROPERTIES*>(this) = ColwertD3D11Usage( o.Usage, o.CPUAccessFlags );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_PROPERTIES_FROM11( const D3D11_TEXTURE2D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_HEAP_PROPERTIES*>(this) = ColwertD3D11Usage( o.Usage, o.CPUAccessFlags );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_PROPERTIES_FROM11( const D3D11_TEXTURE3D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_HEAP_PROPERTIES*>(this) = ColwertD3D11Usage( o.Usage, o.CPUAccessFlags );" )
cpp_quote( "    }" )
cpp_quote( "};" )

cpp_quote( "struct CD3D12_HEAP_DESC_FROM11 : public CD3D12_HEAP_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_HEAP_DESC_FROM11() : CD3D12_HEAP_DESC() { }" )
cpp_quote( "    static D3D12_HEAP_MISC_FLAG ColwertD3D11MiscFlags( UINT miscFlags )" )
cpp_quote( "    {" )
cpp_quote( "        D3D12_HEAP_MISC_FLAG MiscFlags = D3D12_HEAP_MISC_NONE;" )
cpp_quote( "        if ((miscFlags & (D3D11_RESOURCE_MISC_SHARED_NTHANDLE | D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX)) == " )
cpp_quote( "            D3D11_RESOURCE_MISC_SHARED_NTHANDLE)" )
cpp_quote( "        {" )
cpp_quote( "            MiscFlags |= D3D12_HEAP_MISC_SHARED;" )
cpp_quote( "        }" )
cpp_quote( "        return MiscFlags;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_DESC_FROM11( const D3D11_BUFFER_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_HEAP_DESC*>(this) = CD3D12_HEAP_DESC( 0, CD3D12_HEAP_PROPERTIES_FROM11( o ), 0, ColwertD3D11MiscFlags( o.MiscFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_DESC_FROM11( const D3D11_TEXTURE1D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_HEAP_DESC*>(this) = CD3D12_HEAP_DESC( 0, CD3D12_HEAP_PROPERTIES_FROM11( o ), 0, ColwertD3D11MiscFlags( o.MiscFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_DESC_FROM11( const D3D11_TEXTURE2D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_HEAP_DESC*>(this) = CD3D12_HEAP_DESC( 0, CD3D12_HEAP_PROPERTIES_FROM11( o ), 0, ColwertD3D11MiscFlags( o.MiscFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_HEAP_DESC_FROM11( const D3D11_TEXTURE3D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_HEAP_DESC*>(this) = CD3D12_HEAP_DESC( 0, CD3D12_HEAP_PROPERTIES_FROM11( o ), 0, ColwertD3D11MiscFlags( o.MiscFlags ) );" )
cpp_quote( "    }" )
cpp_quote( "};" )

cpp_quote( "struct CD3D12_RESOURCE_DESC_FROM11 : public CD3D12_RESOURCE_DESC" )
cpp_quote( "{" )
cpp_quote( "    CD3D12_RESOURCE_DESC_FROM11() : CD3D12_RESOURCE_DESC() { }" )
cpp_quote( "    static D3D12_RESOURCE_MISC_FLAG ColwertD3D11Flags( UINT bindFlags )" )
cpp_quote( "    {" )
cpp_quote( "        D3D12_RESOURCE_MISC_FLAG MiscFlags = D3D12_RESOURCE_MISC_NONE;" )
cpp_quote( "        if (!(bindFlags & D3D11_BIND_SHADER_RESOURCE) && (bindFlags & D3D11_BIND_DEPTH_STENCIL)) MiscFlags |= D3D12_RESOURCE_MISC_DENY_SHADER_RESOURCE;" )
cpp_quote( "        if (bindFlags & D3D11_BIND_RENDER_TARGET) MiscFlags |= D3D12_RESOURCE_MISC_ALLOW_RENDER_TARGET;" )
cpp_quote( "        if (bindFlags & D3D11_BIND_DEPTH_STENCIL) MiscFlags |= D3D12_RESOURCE_MISC_ALLOW_DEPTH_STENCIL;" )
cpp_quote( "        if (bindFlags & D3D11_BIND_UNORDERED_ACCESS) MiscFlags |= D3D12_RESOURCE_MISC_ALLOW_UNORDERED_ACCESS;" )
cpp_quote( "        return MiscFlags;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_RESOURCE_DESC_FROM11( const D3D11_BUFFER_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_RESOURCE_DESC*>(this) = Buffer( o.ByteWidth, D3D12_RESOURCE_MISC_NONE );" )
cpp_quote( "        MiscFlags |= ColwertD3D11Flags( o.BindFlags );" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_RESOURCE_DESC_FROM11( const D3D11_TEXTURE1D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_RESOURCE_DESC*>(this) = Tex1D( o.Format, o.Width, UINT16( o.ArraySize ), UINT16( o.MipLevels ) );" )
cpp_quote( "        MiscFlags |= ColwertD3D11Flags( o.BindFlags );" )
cpp_quote( "        if (o.MiscFlags & D3D11_RESOURCE_MISC_TILED) Layout = D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_RESOURCE_DESC_FROM11( const D3D11_TEXTURE2D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_RESOURCE_DESC*>(this) = Tex2D( o.Format, o.Width, o.Height, UINT16( o.ArraySize ), UINT16( o.MipLevels ), " )
cpp_quote( "            o.SampleDesc.Count, o.SampleDesc.Quality );" )
cpp_quote( "        MiscFlags |= ColwertD3D11Flags( o.BindFlags );" )
cpp_quote( "        if (o.MiscFlags & D3D11_RESOURCE_MISC_TILED) Layout = D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE;" )
cpp_quote( "    }" )
cpp_quote( "    explicit CD3D12_RESOURCE_DESC_FROM11( const D3D11_TEXTURE3D_DESC& o )" )
cpp_quote( "    {" )
cpp_quote( "        *static_cast<CD3D12_RESOURCE_DESC*>(this) = Tex3D( o.Format, o.Width, o.Height, UINT16( o.Depth ), UINT16( o.MipLevels ) );" )
cpp_quote( "        MiscFlags |= ColwertD3D11Flags( o.BindFlags );" )
cpp_quote( "        if (o.MiscFlags & D3D11_RESOURCE_MISC_TILED) Layout = D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE;" )
cpp_quote( "    }" )
cpp_quote( "};" )

cpp_quote( "extern \"C\"{" )
cpp_quote( "#endif" )


