#************************ BEGIN COPYRIGHT NOTICE ***************************#
#                                                                           #
#          Copyright (c) LWPU Corporation.  All rights reserved.          #
#                                                                           #
# All information contained herein is proprietary and confidential to       #
# LWPU Corporation.  Any use, reproduction, or disclosure without the     #
# written permission of LWPU Corporation is prohibited.                   #
#                                                                           #
#************************** END COPYRIGHT NOTICE ***************************#


#***************************************************************************#
#                        Module : allDefs                                   #
#              generates list of all available definition files             #
#                                                                           #
#***************************************************************************#

$:.unshift File.dirname(__FILE__)

require 'fileParseUtils'
require 'commonInfo'


out_dir = "#{$unitBranch}/drivers/resman/arch/lwalloc/unittest/#{$buildType}"
$:.unshift(out_dir)

# load the database only, if it exists
if File.exist?("#{out_dir}/g_extDb.rb")
	require 'g_extDb'
else
	$defList = {}
end

# tells if we need to update anything 
isDirty = false

# assuming if one doesnt exist, all three don't exist
unless File.exist?("#{out_dir}/exports.c")

	allTestsBuffer = String.new($cCopyright)
	cExportsBuffer = String.new($cCopyright)
	cExportsBuffer.appendOnNextLine!("#include \"exports.h\"")
	cExportsBuffer.appendOnNextLine!("#include \"testMacros.h\"")
	hExportsBuffer = String.new($cCopyright)
	macrosBuffer = String.new($cCopyright)
	macrosBuffer.appendOnNextLine!("#define ADD_ALL_TESTS ")

else

	allTestsBuffer = String.new
	cExportsBuffer = String.new
	hExportsBuffer = String.new
	macrosBuffer = String.new

end

readBuffer = IO.read("#{$unizenPath}/defines.mk")

match = readBuffer.scan(/(#\s*)?rbDefs\s+\+=.+\$\(BRANCH\)\/([^\s]+)/)

alldefsBuffer = String.new($rCopyright)

alldefsBuffer.appendOnNextLine!

dbBuffer = String.new
# write header information only if the database is not already present
unless File.exist?("#{out_dir}/g_extDb.rb")
	dbBuffer.appendOnNextLine! $rCopyright
	dbBuffer.appendOnNextLine! "# "
	dbBuffer.appendOnNextLine! "# This is an autogenerated file "
	dbBuffer.appendOnNextLine! "# Please Do not Edit "
	dbBuffer.appendOnNextLine! "# "
	dbBuffer.appendOnNextLine!
	dbBuffer.appendOnNextLine! "$extList = {}"
	dbBuffer.appendOnNextLine!
	dbBuffer.appendOnNextLine! "$defList = {}"
	dbBuffer.appendOnNextLine!
end

match.each do |m|

	# write the definition names to g_allDefs.rb which would, basically create the tree.

	defName = m[1].to_s.scan(/\/([^\/]+)\.rb/)[0].to_s

	if ! m[0] and (! $defList or ! $defList[defName])

		alldefsBuffer.appendOnNextLine!("require '#{m[1].to_s}'") 
		dbBuffer.appendOnNextLine!("$defList[\"#{defName}\"] = true")
		allTestsBuffer.appendOnNextLine!("#include \"allTest_#{defName}.h\"")
		cExportsBuffer.appendOnNextLine!("#include \"exp_#{defName}.c\"")
		hExportsBuffer.appendOnNextLine!("#include \"exp_#{defName}.h\"")
		macrosBuffer += "\\\n    ADD_TEST_#{defName} "

		# mark it dirty
		isDirty = true

	end

end

if isDirty

	wAlldefs = File.new("#{out_dir}/g_allDefs.rb", "a")
	rbExtDb = File.new("#{out_dir}/g_extDb.rb", "a")
	allTests = File.new("#{out_dir}/alltests.h", "a")
	hExports = File.new("#{out_dir}/exports.h", "a")
	cExports = File.new("#{out_dir}/exports.c", "a")
	tstMacros = File.new("#{out_dir}/testMacros.h", "a")

	rbExtDb.puts dbBuffer
	rbExtDb.flush
	rbExtDb.close

	wAlldefs.puts alldefsBuffer
	wAlldefs.flush
	wAlldefs.close


	allTests.puts allTestsBuffer
	allTests.flush
	allTests.close

	hExports.puts hExportsBuffer
	hExports.flush
	hExports.close

	cExports.puts cExportsBuffer
	cExports.flush
	cExports.close

	tstMacros.puts macrosBuffer
	tstMacros.flush
	tstMacros.close

end
