/*
 * Copyright 1993-2018 LWPU Corporation.  All rights reserved.
 *
 * LWPU CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from LWPU CORPORATION is strictly prohibited.
 *
 */

#ifndef __dcgm_uuid_h__
#define __dcgm_uuid_h__

#include <stdio.h>

/*
 * Check that etbl is initialized properly and that function exists in this version
 * of the export table
 */
#define DCGM_CALL_ETBL(etbl, function, args)                                                                \
    ((NULL == (etbl)) ||                                                                                    \
     (((size_t) ((const char *) &(etbl)->function - (const char *) &(etbl)->struct_size)) >=                \
               (etbl)->struct_size) ?                                                                       \
      DCGM_ST_UNINITIALIZED :                                                                               \
      NULL == (etbl)->function ? DCGM_ST_NOT_SUPPORTED : (etbl)->function args)

/**
 * UUID for dcgmGetExportTable
 */
typedef struct dcgmUuid_st
{                              
    char bytes[16];
} dcgmUuid_t;

dcgmReturn_t DECLDIR dcgmInternalGetExportTable(const void **ppExportTable, const dcgmUuid_t *pExportTableId);
    

// Utility macros for defining and using UUID values for use with
// the DCGM library.
//
// DCGM_INIT_UUID must be #defined in exactly one translation unit
// per linkage unit (i.e. one .c or .cpp file per binary).  This
// allows multiple .c and .cpp files to include headers that define
// UUIDs using DCGM_DEFINE_UUID: The translation unit that #defines
// DCGM_INIT_UUID will define and initialize the UUIDs, and all other
// translation units will link to that definition.


// Define helper macro: DCGM_INIT_EXTERN_CONST 
// In C, global consts have external linkage by default.  In C++,
// global consts have internal linkage by default, and require the
// "extern" storage class specifier to have external linkage.  C++
// allows using "extern" with initializers, but it is illegal in C.
// Thus, there is no common syntax for C and C++ to declare and
// initialize global constants with external linkage.  This macro
// helps reduce duplication of other macros by factoring out the
// C/C++ discrepancy.
#ifdef __cplusplus
#define DCGM_INIT_EXTERN_CONST extern const
#else
#define DCGM_INIT_EXTERN_CONST const
#endif


// Define macro DCGM_DEFINE_UUID.  The parameters are the commonly
// used "int-short-short-char[8]" style, which can be generated by
// Microsoft's guidgen.exe tool, Visual Studio's "Create GUID"
// option in the Tools menu (select style #2), and many web-based
// UUID generator tools.  Here's an example of what "Create GUID"
// style #2 generates:
//
//   DEFINE_GUID( <<name>>, 
//   0x2446054, 0xbb8e, 0x4b2f, 0x8b, 0xfc, 0xa4, 0xfe, 0x44, 0x9, 0x8f, 0xb8);
//
// So to use one of these with DCGM, just change the macro to
// DCGM_DEFINE_UUID and choose a symbol name.  For example:
//
//   DCGM_DEFINE_UUID( MyUuid, 
//   0x2446054, 0xbb8e, 0x4b2f, 0x8b, 0xfc, 0xa4, 0xfe, 0x44, 0x9, 0x8f, 0xb8);
//
#if defined(DCGM_INIT_UUID)

#define DCGM_CHAR(x) (char)((x) & 0xff)
// Define the symbol as exportable to other translation units, and
// initialize the value.  Inner set of parens is necessary because
// "bytes" array needs parens within the struct initializer, which
// also needs parens.  
#define DCGM_DEFINE_UUID(name, a, b, c, d0, d1, d2, d3, d4, d5, d6, d7)                 \
    DCGM_INIT_EXTERN_CONST dcgmUuid_t name =                                            \
    {                                                                                   \
      {                                                                                 \
        DCGM_CHAR(a), DCGM_CHAR((a) >> 8), DCGM_CHAR((a) >> 16), DCGM_CHAR((a) >> 24),  \
        DCGM_CHAR(b), DCGM_CHAR((b) >> 8),                                              \
        DCGM_CHAR(c), DCGM_CHAR((c) >> 8),                                              \
        DCGM_CHAR(d0),                                                                  \
        DCGM_CHAR(d1),                                                                  \
        DCGM_CHAR(d2),                                                                  \
        DCGM_CHAR(d3),                                                                  \
        DCGM_CHAR(d4),                                                                  \
        DCGM_CHAR(d5),                                                                  \
        DCGM_CHAR(d6),                                                                  \
        DCGM_CHAR(d7)                                                                   \
      }                                                                                 \
    }
#else

// Declare the symbol to be imported from another translation unit.
#define DCGM_DEFINE_UUID(name, a, b, c, d0, d1, d2, d3, d4, d5, d6, d7) \
    extern const dcgmUuid_t name
#endif


#endif // file guard
