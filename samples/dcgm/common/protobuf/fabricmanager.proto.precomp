
import "topology.proto";

package lwswitch;


//
// This next section defines messages passed between nodes or within a node
// by the Global and Local Fabric Managers\
//

// All Fabric Manager messages are carried in lwcm Msg protobufs, in the binary
// blob They take the form of an enumerated message type and a raw bytes member 
// containing the protobuf.  
// Aligning them with the protobuf definition of optional messages

enum FabricManagerMessageType
{
// heartbeat group
    FM_HEARTBEAT                              = 10;
    FM_HEARTBEAT_ACK                          = 11;

//  configuration group
    FM_NODE_GLOBAL_CONFIG_REQ                 = 40;
    FM_NODE_GLOBAL_CONFIG_RSP                 = 41;
    FM_SWITCH_PORT_CONFIG_REQ                 = 42;
    FM_SWITCH_PORT_CONFIG_RSP                 = 43;
    FM_INGRESS_REQUEST_TABLE_REQ              = 44;
    FM_INGRESS_REQUEST_TABLE_RSP              = 45;
    FM_INGRESS_RESPONSE_TABLE_REQ             = 46;
    FM_INGRESS_RESPONSE_TABLE_RSP             = 47;
    FM_GPU_CONFIG_REQ                         = 48;
    FM_GPU_CONFIG_RSP                         = 49;
    FM_GANGED_LINK_TABLE_REQ                  = 50;
    FM_GANGED_LINK_TABLE_RSP                  = 51;
    FM_GPU_ATTACH_REQ                         = 52;
    FM_GPU_ATTACH_RSP                         = 53;
    FM_GPU_DETACH_REQ                         = 54;
    FM_GPU_DETACH_RSP                         = 55;
    FM_SWITCH_DISABLE_LINK_REQ                = 56;
    FM_SWITCH_DISABLE_LINK_RSP                = 57;
    FM_GPU_SET_DISABLED_LINK_MASK_REQ         = 58;
    FM_GPU_SET_DISABLED_LINK_MASK_RSP         = 59;

// All the node init/info related requests and response
    FM_NODE_GET_LWLINK_DEVICE_INFO_REQ        = 81;
    FM_NODE_GET_LWLINK_DEVICE_INFO_RSP        = 82;
    FM_NODE_GET_LWSWITCH_DEVICE_INFO_REQ      = 83;
    FM_NODE_GET_LWSWITCH_DEVICE_INFO_RSP      = 84;
    FM_NODE_GET_GPU_DEVICE_INFO_REQ           = 85;
    FM_NODE_GET_GPU_DEVICE_INFO_RSP           = 86;

// All the master link training messages - Send from GFM to LFMs
    FM_MASTER_LWLINK_CONN_SWITCH_OFF          = 101;
    FM_MASTER_LWLINK_CONN_TRAIN_TO_SAFE       = 102;
    FM_MASTER_LWLINK_CONN_TRAIN_TO_HIGH       = 103;
    FM_MASTER_LWLINK_CONN_TRAIN_HIGH_TO_SAFE  = 104;
    FM_MASTER_LWLINK_CONN_TRAIN_SAFE_TO_OFF   = 105;

//  All the slave link training messages - Send from LFM to peer LFM
    FM_SLAVE_LWLINK_CONN_SWITCH_OFF           = 131;
    FM_SLAVE_LWLINK_CONN_TRAIN_TO_SAFE        = 132;
    FM_SLAVE_LWLINK_CONN_TRAIN_TO_HIGH        = 133;
    FM_SLAVE_LWLINK_CONN_TRAIN_HIGH_TO_SAFE   = 134;
    FM_SLAVE_LWLINK_CONN_TRAIN_SAFE_TO_OFF    = 135;

//  All the link training response types - LFM to GFM and LFM to Peer LFM
    FM_LWLINK_TRAIN_RSP_MASTER_SYNC           = 181;
    FM_LWLINK_TRAIN_RSP_SLAVE_SYNC            = 182;
    FM_LWLINK_TRAIN_RSP_SLAVE_CONFIRM         = 183;
    FM_LWLINK_TRAIN_RSP_SLAVE_COMPLETE        = 184;
    FM_LWLINK_TRAIN_RSP_COMPLETE              = 185;

//  All the link training msgs where there is no master/slave sync
//  These messages are sent from GFM to a specific LFM (node)
    FM_LWLINK_ENABLE_TX_COMMON_MODE           = 201;
    FM_LWLINK_DISABLE_TX_COMMON_MODE          = 202;
    FM_LWLINK_CALIBRATE                       = 203;
    FM_LWLINK_ENABLE_DATA                     = 204;
    FM_LWLINK_INIT                            = 205;
    FM_LWLINK_INIT_STATUS                     = 206;
    FM_LWLINK_DISCOVER_INTRANODE_CONNS        = 207;
    FM_LWLINK_ADD_INTERNODE_CONN              = 208;
    FM_LWLINK_GET_INTRANODE_CONNS             = 209;
    FM_LWLINK_WRITE_DISCOVERY_TOKENS          = 210;
    FM_LWLINK_READ_DISCOVERY_TOKENS           = 211;
    FM_LWLINK_RESET_SWITCH_LINKS              = 212;
    FM_LWLINK_RESET_ALL_SWITCH_LINKS          = 213;
#ifdef BUILD_LR_TOPOLOGY
//These messages are for additional LWLink 3.0 training steps introduced 
//in Ampere/Limerock chips
    FM_LWLINK_INITPHASE1                      = 214;
    FM_LWLINK_RX_INIT_TERM                    = 215;
    FM_LWLINK_SET_RX_DETECT                   = 216;
    FM_LWLINK_GET_RX_DETECT                   = 217;
    FM_LWLINK_INITNEGOTIATE                   = 218;
#endif

// Messages to tell LFM to allow/stop peer access and set RM state accordingly.
    FM_CONFIG_INIT_DONE_REQ                   = 240;
    FM_CONFIG_INIT_DONE_RSP                   = 241;
    FM_CONFIG_DEINIT_REQ                      = 242;
    FM_CONFIG_DEINIT_RSP                      = 243;

// error reporting
    FM_LWSWITCH_ERROR_FATAL                   = 300;
    FM_LWSWITCH_ERROR_FATAL_ACK               = 301;
    FM_LWSWITCH_ERROR_NON_FATAL               = 302;
    FM_LWSWITCH_ERROR_NON_FATAL_ACK           = 303;
    FM_GET_ERROR_REQ                          = 304;
    FM_GET_ERROR_RSP                          = 305;
    FM_LWLINK_ERROR_LWSWITCH_RECOVERY         = 306;
    FM_LWLINK_ERROR_LWSWITCH_RECOVERY_ACK     = 307;
    FM_LWLINK_ERROR_GPU_RECOVERY              = 308;
    FM_LWLINK_ERROR_GPU_RECOVERY_ACK          = 309;
    FM_LWLINK_ERROR_GPU_FATAL                 = 310;
    FM_LWLINK_ERROR_GPU_FATAL_ACK             = 311;

// statistics reporting
    FM_NODE_STATS_REPORT                      = 401;
    FM_NODE_STATS_ACK                         = 402;
    FM_GET_NODE_STATS_REQ                     = 403;
    FM_GET_NODE_STATS_RSP                     = 404;

    FM_NODE_INFO_MSG                          = 500;
    FM_NODE_INFO_ACK                          = 501;
    
    //FM messages for memory import/unimport
    FM_MEMORY_IMPORT_REQ                      = 600;
    FM_MEMORY_IMPORT_RSP                      = 601;
    FM_KT_MEMORY_IMPORT_ERR                   = 602;        //### KT specific message
    FM_MEMORY_UNIMPORT_REQ                    = 603;
    FM_MEMORY_UNIMPORT_RSP                    = 604;

#ifdef BUILD_LR_TOPOLOGY
    // Lime Rock specific configuration messages

    FM_RMAP_TABLE_REQ                         = 10020;
    FM_RMAP_TABLE_RSP                         = 10021;
    FM_RID_TABLE_REQ                          = 10022;
    FM_RID_TABLE_RSP                          = 10023;
    FM_RLAN_TABLE_REQ                         = 10024;
    FM_RLAN_TABLE_RSP                         = 10025;

    // (remember to use similar ifdef below for message definitons)
#endif

}   

message fmMessage
{
    required int32 version                                              = 1;
    required uint32 nodeId                                              = 2;
    required FabricManagerMessageType type                              = 3;
    required int32 requestId                                            = 4;

// heartbeat group
    optional heartbeat heartbeat                                        = 10;                              
    optional heartbeatAck heartbeatAck                                  = 11;

//  configuration group
    optional nodeGlobalConfigRequest globalConfigRequest                = 20;
    optional nodeGlobalConfigResponse globalConfigResponse              = 21;
    optional switchPortConfigRequest portConfigRequest                  = 22;
    optional switchPortConfigResponse portConfigResponse                = 23;
    optional switchPortRequestTable requestTableRequest                 = 24;
    optional switchPortRequestTableResponse requestTableResponse        = 25;
    optional switchPortResponseTable responseTableRequest               = 26;
    optional switchPortResponseTableResponse responseTableResponse      = 27;
    optional gpuConfigRequest gpuConfigReq                              = 28;
    optional gpuConfigResponse gpuConfigRsp                             = 29;
    optional switchPortGangedLinkTable gangedLinkTableRequest           = 30;
    optional switchPortGangedLinkTableResponse gangedLinkTableResponse  = 31;
    optional gpuAttachRequest gpuAttachReq                              = 32;
    optional gpuAttachResponse gpuAttachRsp                             = 33;
    optional gpuDetachRequest gpuDetachReq                              = 34;
    optional gpuDetachResponse gpuDetachRsp                             = 35;
    optional switchDisableLinkRequest switchDisableLinkReq              = 36;
    optional switchDisableLinkResponse switchDisableLinkRsp             = 37;
    optional gpuSetDisabledLinkMaskRequest gpuSetDisabledLinkMaskReq    = 38;
    optional gpuSetDisabledLinkMaskResponse gpuSetDisabledLinkMaskRsp   = 39;

// node init/info related requests
    optional deviceInfoRequestMsg   devInfoReq                          = 61;
    optional deviceInfoResponseMsg  devInfoRsp                          = 62;

//  lwlink related initialization/training messages group
    optional lwlinkMsg lwlinkMsg                                        = 71;

//  lwlink related error request/response messages group
    optional lwlinkErrorMsg lwlinkErrorMsg                              = 72;

// Messages to tell LFM to allow/stop peer access and set RM state accordingly.
// ###TODO Determine whether this only gets sent after all nodes are configured, or 
// if it should be sent per node as they are configured, with a separate fabric 
// done message

    optional configInitDoneReq initDoneReq                              = 90;
    optional configInitDoneRsp initDoneRsp                              = 91;
    optional configDeInitReq   deInitReq                                = 92;
    optional configDeInitRsp   deInitRsp                                = 93;

//  error report group
    optional switchErrorReport       errorReport                        = 120;
    optional switchErrorReportAck    errorReportAck                     = 121;
    optional getSwitchErrorRequest   getErrorRequest                    = 122;
    optional switchErrorReport       getErrorResponse                   = 123;
    
//  statistics report group
    optional nodeStats               statsReport                        = 130;
    optional getNodeStatsRequest     getStatsRequest                    = 131;
    optional nodeStats               getStatsResponse                   = 132;
    optional nodeStatsAck            nodeStatsAck                       = 133;

    optional nodeInfoMsg            nodeInfoMsg                         = 140;
    optional nodeInfoAck            nodeInfoAck                         = 141;
    
    optional memoryImportReq        memoryImportReq                     = 150;
    optional memoryImportRsp        memoryImportRsp                     = 151;
    optional ktMemoryImportErr      ktMemoryImportErr                   = 152;      //### KT specific message
    optional memoryUnimportReq      memoryUnimportReq                   = 153;
    optional memoryUnimportRsp      memoryUnimportRsp                   = 154;

#ifdef BUILD_LR_TOPOLOGY

    optional portRmapTableRequest         rmapTableReq                = 10020;
    optional portRmapTableResponse        rmapTableRsp                = 10021;
    optional portRidTableRequest          ridTableReq                 = 10022;
    optional portRidTableResponse         ridTableRsp                 = 10023;
    optional portRlanTableRequest         rlanTableReq                = 10024;
    optional portRlanTableResponse        rlanTableRsp                = 10025;

#endif    

};

//
// The Global Fabric Manager sends the following messages to
// request the Local Fabric manager to configure devices on its
// node.
//

message gpuInfo
{
    optional uint32 gpuPhysicalId           = 1; //physical id of the GPU
    optional uint64 fabricAddressBase       = 2;
    optional uint64 fabricAddressRange      = 3;
    repeated peerIDPortMap map              = 4;
    optional int32 logicalToPhyPortMap      = 5;
    optional int32 gpuEnumIndex             = 6; // gpu local id or driver enumeration index
    optional bytes uuid                     = 7;
    
#ifdef BUILD_LR_TOPOLOGY
    optional uint64 GpaAddressBase          = 8;
    optional uint64 GpaAddressRange         = 9;
    optional uint64 FlaAddressBase          = 10;
    optional uint64 FlaAddressRange         = 11;
#endif
};

message gpuConfigRequest
{
    repeated gpuInfo info                   = 1;
    optional uint32 partitionId             = 2;
};

message gpuAttachRequest
{
    repeated gpuInfo info                   = 1;
    optional uint32 partitionId             = 2;
};

message gpuDetachRequest
{
    repeated gpuInfo info                   = 1;
    optional uint32 partitionId             = 2;
};

message nodeGlobalConfigRequest          
{
    // this is the message to inform a node about its properties, such as nodeId
    // since this is the first time nodeId is exchanged, making it explicit here
    // instead of the one in fmMessage
    required uint32 localNodeId             = 1;
}

message switchInfo
{
    optional uint32 switchPhysicalId        = 1;
    optional switchConfig config            = 2;
}

message switchPortInfo  
{
    optional uint32 port                    = 1;
    optional switchPortConfig config        = 2;
}

message switchPortConfigRequest  
{            
    optional uint32 switchPhysicalId       = 1;
    repeated switchPortInfo info           = 2;
};

message switchPortRequestTableInfo 
{
    optional uint32 switchPhysicalId        = 1;
    optional uint32 port                    = 2;
    optional int32 firstIndex               = 3;
    repeated ingressRequestTable entry      = 4;
    optional uint32 partitionId             = 5;
};

message switchPortRequestTable  
{
    optional uint32  switchPhysicalId        = 1;
    repeated switchPortRequestTableInfo info = 2;
};

message switchPortResponseTableInfo
{
    optional uint32 switchPhysicalId        = 1;
    optional uint32 port                    = 2;
    optional int32 firstIndex               = 3;
    repeated ingressResponseTable entry     = 4;
    optional uint32 partitionId             = 5;
};

message switchPortResponseTable  
{
    optional uint32 switchPhysicalId          = 1;
    repeated switchPortResponseTableInfo info = 2;
};

message switchPortGangedLinkTableInfo
{
    optional uint32 switchPhysicalId  = 1;
    optional uint32 port              = 2;
    optional gangedLinkTable table    = 3;
};

message switchPortGangedLinkTable 
{
    optional uint32  switchPhysicalId           = 1;
    repeated switchPortGangedLinkTableInfo info = 2;
};

#ifdef BUILD_LR_TOPOLOGY

message portRmapTableInfo 
{
    optional uint32 switchPhysicalId        = 1;
    optional uint32 port                    = 2;
    optional int32 firstIndex               = 3;
    repeated rmapPolicyEntry entry          = 4;
    optional uint32 partitionId             = 5;
};

message portRmapTableRequest  
{
    optional uint32 switchPhysicalId        = 1;
    repeated portRmapTableInfo info         = 2;
};

message portRidTableInfo
{
    optional uint32 switchPhysicalId        = 1;
    optional uint32 port                    = 2;
    optional int32 firstIndex               = 3;
    repeated ridRouteEntry entry            = 4;
    optional uint32 partitionId             = 5;
};

message portRidTableRequest  
{
    optional uint32 switchPhysicalId        = 1;
    repeated portRidTableInfo info          = 2;
};

message portRlanTableInfo
{
    optional uint32 switchPhysicalId        = 1;
    optional uint32 port                    = 2;
    optional int32 firstIndex               = 3;
    repeated rlanRouteEntry entry           = 4;
    optional uint32 partitionId             = 5;
};

message portRlanTableRequest  
{
    optional uint32 switchPhysicalId        = 1;
    repeated portRlanTableInfo info         = 2;
};


#endif


// Messages to tell LFM to allow/stop peer access and set RM state accordingly.
message configInitDoneReq
{
    // nothing as of now
};

message configInitDoneRsp
{
    optional configStatus status = 1;
};

message configDeInitReq
{
    // nothing as of now
};

message configDeInitRsp
{
    optional configStatus status  = 1;
};

// place-holder for now.  Need to decide what error conditions to check for and report.

enum configStatus
{
    CONFIG_SUCCESS = 0;
    CONFIG_FAILURE = 1;
// skip some values to get to memory manager status
};

message configResponse
{
    optional uint32 devicePhysicalId  = 1; // switch or GPU physical Id
    optional uint32 port              = 2;
    optional configStatus status      = 3;
    optional uint32 partitionId       = 4;
}; 

message gpuConfigResponse
{
    repeated configResponse response = 1;
};

message gpuAttachResponse
{
    repeated configResponse response = 1;
};

message gpuDetachResponse
{
    repeated configResponse response = 1;
};    
    
message nodeGlobalConfigResponse          
{
    optional configStatus status = 1;
};

message switchPortConfigResponse  
{
    repeated configResponse response = 1;
};

message switchPortRequestTableResponse  
{
    repeated configResponse response = 1;
};

message switchPortResponseTableResponse  
{
    repeated configResponse response = 1;
};

message switchPortGangedLinkTableResponse  
{
    repeated configResponse response = 1;
};

#ifdef BUILD_LR_TOPOLOGY

message portConfigResponse  
{
    repeated configResponse response = 1;
};

message portRmapTableResponse  
{
    repeated configResponse response = 1;
};

message portRidTableResponse  
{
    repeated configResponse response = 1;
};

message portRlanTableResponse  
{
    repeated configResponse response = 1;
};

#endif

message switchDisableLinkRequest
{
    optional uint32 switchPhysicalId  = 1;
    repeated uint32 portNum           = 2;
}

message switchDisableLinkResponse
{
    optional configStatus status  = 1;
}

message gpuDisabledLinkMaskInfoMsg
{
    optional bytes uuid         = 1;
    optional uint64 disableMask = 2;
}

message gpuSetDisabledLinkMaskRequest
{
    repeated gpuDisabledLinkMaskInfoMsg gpuInfo = 1;
    optional uint32 partitionId                 = 2;
}

message gpuSetDisabledLinkMaskResponse
{
    optional configStatus status = 1;
    optional bytes uuid          = 2; // indicate first failed GPU
    optional uint32 partitionId  = 3;
}

//
// Heartbeat
// Global Fabric Manager sends heartbeat. 
// Local Fabric Manager sends heartbeatAck to Global Fabric Manager
//
//
message heartbeat
{
    // nothing as of now
};

message heartbeatAck
{
    // nothing as of now
};

//
// Node statistics
// These messages record the latest and alwmulate totals for statistics that 
// come in from Local Fabric Manager heartbeat acks.
//
//
// The following query and response are sent when the application
// calls lwFabricOpenMemHandle, to make a remote GPUs memory accessible
//

// stats for an individual node
message nodeStats
{
    repeated switchLatencyHist   latestLatency         = 1;
    repeated switchLatencyHist   aclwmulatedLatency    = 2;
    repeated switchLwlinkCounter lwlinkCounter         = 3;
};

message getNodeStatsRequest
{
    repeated getSwitchLatencyHist   latestLatency      = 1;
    repeated getSwitchLatencyHist   aclwmulatedLatency = 2;
    repeated getSwitchLwlinkCounter lwlinkCounter      = 3;
}

//
// The following messages are used by the performance and diagnostic library
// to configure and request information from the switch.  The messages are
// sent from the runtime to the Local or Global Fabric Manager, depending on 
// whether the target node is the one making the request.
//

message targetSwitch
{
    optional int32 reqPID                   = 1;    // PID of requester
    optional uint32 reqNodeId               = 2;    // handle of requesting node
    optional uint32 targetSwitchPhysicalId  = 3;    // list of targeted switches
};

enum switchErrorSrc
{
// LWSWITCH_ERROR_SRC_TYPE

    LWSWITCH_ERROR_SRC_NONE           = 0;
    LWSWITCH_ERROR_SRC_SW             = 1;
    LWSWITCH_ERROR_SRC_HW             = 2;
};

enum switchErrorSeverity
{
// LWSWITCH_ERROR_SEVERITY_TYPE

    LWSWITCH_ERROR_SEVERITY_INFO        = 0;
    LWSWITCH_ERROR_SEVERITY_CONFIG      = 1;
    LWSWITCH_ERROR_SEVERITY_STATUS      = 2;
    LWSWITCH_ERROR_SEVERITY_WARNING     = 3;
    LWSWITCH_ERROR_SEVERITY_ERROR       = 4;
    LWSWITCH_ERROR_SEVERITY_FATAL       = 5;
};

enum switchErrorType
{
// LWSWITCH_ERR_TYPE
    LWSWITCH_ERR_NO_ERROR               = 0x0;
};

message switchErrorInfo
{
    optional uint32                  errorType      = 1;   //  switchErrorType
    optional switchErrorSeverity     severity       = 2;
    optional switchErrorSrc          errorSrc       = 3;
    optional uint32                  instance       = 4;
    optional uint32                  subinstance    = 5;
    optional uint64                  time           = 6;
    optional bool                    resolved       = 7;
}

message getSwitchErrorRequest
{
    repeated targetSwitch targetSwitches      = 1;
    optional uint32 errorMask                 = 2;    // LWSWITCH_ERROR_SEVERITY_INFO_* mask, filter based on severity
};

message switchError
{
    optional uint32 switchPhysicalId         = 1;
    repeated switchErrorInfo errorInfo       = 2;    // error details
};

//
// If the device interrupts with an error condition LWSWITCH_GET_ERRORS_FATAL, the Local Fabric Manager
// informs Global.
//
// Local Fabric Manager reports all other errors periodically

message switchErrorReport
{
    repeated switchError switchError        = 1;
};

message switchErrorReportAck
{
    optional configStatus status            = 1;
};

message setSwitchLinkCountersResponse
{
    optional configResponse response        = 1;
};

message lwlinkCounter
{
    optional uint32 portNum                 = 1;
    optional uint64 txCounter0              = 2;
    optional uint64 rxCounter0              = 3;
    optional uint64 txCounter1              = 4;
    optional uint64 rxCounter1              = 5;
};

message switchLwlinkCounter
{
    optional uint32 switchPhysicalId        = 1;
    repeated lwlinkCounter linkCounter      = 2;
};

message getSwitchLwlinkCounter
{
    repeated targetSwitch targetSwitches    = 1;
};

message portLatencyBin
{
    optional uint32 portNum                 = 1;
    optional uint32 lowMark                 = 2;
    optional uint32 medMark                 = 3;
    optional uint32 hiMark                  = 4;
    optional uint32 panicMark               = 5;
};

message getSwitchLatencyBins
{
    required int32 version                  = 1;
    repeated targetSwitch targetSwitches    = 2;
};

message portLatencyHist
{
    optional uint32  portNum                = 1;
    optional uint64 elapsedTimeMsec         = 2;
    optional uint64 low                     = 3;
    optional uint64 med                     = 4;
    optional uint64 high                    = 5;
    optional uint64 panic                   = 6;
};

message switchLatencyHist
{
    optional uint32  switchPhysicalId       = 1;
    repeated portLatencyHist latencyHist    = 2;
};

message getSwitchLatencyHist
{
    repeated targetSwitch targetSwitches    = 1;
}

message nodeStatsAck
{
    // nothing as of now
};

// Used by GlobalFM to send all the available node's information to each Local FMs
// nodeId here is other node's ID for multi-node systems. (ie not self nodeId)
message nodeInfo
{
    optional uint32 nodeId     = 1;
    optional string ipAddress  = 2;
};

message nodeInfoMsg
{
    repeated nodeInfo info    = 1;
};

message nodeInfoAck
{
    optional configStatus status = 1;
};

// All memory import/Unimport req/rsp

//One Page Table Entry. Set of these is returned in the Memory Import Response message  ###KT specific message
message ktPageTableEntries
{
    optional uint64 offset                          = 1;
    repeated uint32 pageFrameNumberArray            = 2;
};

message memoryImportReq
{
    optional uint32         fabricAddrMsb           = 1;    //Contains top 32-bits of addr. Used to get Node ID/GPU ID of exporting node
    optional uint32         handleToExportClient    = 2;    //handle to exporting RM client
    optional uint32         handleToExportObject    = 3;    //handle to exported RM memory Object
    optional uint64         memorySize              = 4;
    optional uint32         ktHandleToImportDup     = 5;    //handle to importing RM client ###KT specific
    optional uint32         gpuId                   = 6;    //GPU ID of GPU on exporting node
};

message memoryImportRsp
{
    optional uint32             fabricAddrMsb           = 1;    //Contains top 32-bits of addr. Used to get Node ID/GPU ID of exporting node
    optional uint32             handleToExportClient    = 2;    //handle to exporting RM client
    optional uint32             handleToExportObject    = 3;    //handle to exported RM memory Object
    optional uint32             ktHandleToImportDup     = 4;    //handle to importing RM client ###KT specific
    optional uint32             errCode                 = 5;
    optional ktPageTableEntries ktPtEntries             = 6;    //page table entries for memory object ###KT specific
    optional uint32             gpuId                   = 7;    //GPU ID of GPU on exporting node
};

//###KT specific message
message ktMemoryImportErr
{
    optional uint32         fabricAddrMsb           = 1;    //Contains top 32-bits of addr. Used to get Node ID/GPU ID of exporting node
    optional uint32         handleToExportClient    = 2;    //handle to exporting RM client
    optional uint32         handleToExportObject    = 3;    //handle to exported RM memory Object
    optional uint32         errCode                 = 4;
    optional uint32         gpuId                   = 5;    //GPU ID of GPU on exporting node
};

message memoryUnimportReq
{
    optional uint32         fabricAddrMsb           = 1;    //Contains top 32-bits of addr. Used to get Node ID/GPU ID of exporting node
    optional uint32         handleToExportClient    = 2;    //handle to exporting RM client
    optional uint32         handleToExportObject    = 3;    //handle to exported RM memory Object
    optional uint32         gpuId                   = 4;    //GPU ID of GPU on exporting node
};

message memoryUnimportRsp
{
    optional uint32         fabricAddrMsb           = 1;    //Contains top 32-bits of addr. Used to get Node ID/GPU ID of exporting node
    optional uint32         handleToExportClient    = 2;    //handle to exporting RM client
    optional uint32         handleToExportObject    = 3;    //handle to exported RM memory Object
    optional uint32         errCode                 = 4;
};

// All the device information request/response types

message devicePciInfo
{
    optional uint32 domain   = 1;
    optional uint32 bus      = 2;
    optional uint32 device   = 3;
    optional uint32 function = 4;
}

// request/response to query all the enumerated lwswitches on a node
message lwswitchDeviceInfoReq
{
    // nothing
}

message lwswitchDeviceInfoMsg
{
    optional uint32 switchIndex     = 1; //driver index
    optional uint32 physicalId      = 2; // GPIO based id
    optional devicePciInfo pciInfo  = 3;
    optional bytes  ecid            = 4;
    optional uint64 enabledLinkMask = 5;
}

message lwswitchDeviceInfoRsp
{
    repeated lwswitchDeviceInfoMsg switchInfo = 1;
}

// request/response to query all the enumerated gpus on a node
message gpuDeviceInfoReq
{
    // nothing
}

message gpuDeviceInfoMsg
{
    optional uint32 gpuIndex       = 1;
    optional devicePciInfo pciInfo = 2;
    optional bytes uuid            = 3;
}

message gpuDeviceInfoRsp
{
    repeated gpuDeviceInfoMsg gpuInfo          = 1;
    repeated gpuDeviceInfoMsg blacklistGpuInfo = 2;
}

message lwlinkDeviceInfoReq
{
    // nothing
}

/* 
 * detailed information about each lwlink device.
 * deviceId information is used later to address each device
 * within a node
 */
message lwlinkDeviceInfoMsg
{
    optional devicePciInfo pciInfo  = 1;
    optional bytes  deviceName      = 2;
    optional uint64 deviceId        = 3;
    optional uint32 numLinks        = 4;
    optional uint64 devType         = 5;
    optional uint64 enabledLinkMask = 6;
    optional bytes  uuid            = 7;
}

message lwlinkDeviceInfoRsp
{
    repeated lwlinkDeviceInfoMsg devInfo = 1;
}

message deviceInfoRequestMsg
{
    required uint64                 infoReqId     = 1;
    optional lwswitchDeviceInfoReq  switchDevReq  = 2;
    optional gpuDeviceInfoReq       gpuDevReq     = 3;
    optional lwlinkDeviceInfoReq    lwlinkDevReq  = 4;
};

message deviceInfoResponseMsg
{
    required uint64                 infoReqId     = 1;
    optional lwswitchDeviceInfoRsp  switchDevRsp  = 2;
    optional gpuDeviceInfoRsp       gpuDevRsp     = 3;
    optional lwlinkDeviceInfoRsp    lwlinkDevRsp  = 4;
};

// End of all the device information request/response types

// Note: nodeId here is the ID seen by LWLinKCoreLib driver.
message lwlinkEndPointInfo
{
    optional uint32 nodeId          = 1; //uniquely identify a node in the system
    optional uint64 gpuOrSwitchId   = 2; //unique gpu or switch id within a node
    optional uint32 linkIndex       = 3; //lwlink port number within a switch or gpu
};

// Note: nodeId here is the remote node's id as seen by LWLinKCoreLib driver.
message lwlinkRemoteEndPointInfo
{
    optional uint32 nodeId          = 1;
    optional uint32 linkIndex       = 2;
    optional devicePciInfo pciInfo  = 3;
    optional uint64 devType         = 4;
    optional bytes  uuid            = 5;
};

message lwlinkConnectionInfo
{
    optional lwlinkEndPointInfo masterEnd = 1;
    optional lwlinkEndPointInfo slaveEnd  = 2;
};

message lwlinkInterNodeConnInfo
{
    optional lwlinkEndPointInfo       localEnd  = 1;
    optional lwlinkRemoteEndPointInfo remoteEnd = 2;
};

message lwlinkTrainConnReqMsg
{
    optional lwlinkConnectionInfo connInfo = 1;
};

// this message is used for all the initilization related message group
// like Common Mode, RX Cal, Data Enable, and Link Init
message lwlinkNodeInitReqMsg
{
    // nothing as of now
};

message lwlinkNodeInitStatusReqMsg
{
    // nothing as of now
};

message lwlinkNodeInitResetSwitchLinksReqMsg
{
    optional uint32 switchPhysicalId = 1;
    optional uint64 linkMask         = 2;
};

message lwlinkNodeInitResetAllSwitchLinksReqMsg
{
    // nothing as of now
};

message lwlinkDiscoverIntraNodeConnReqMsg
{
    // nothing as of now
};

message lwlinkWriteDiscoveryTokenReqMsg
{
    // nothing as of now
};

message lwlinkReadDiscoveryTokenReqMsg
{
    // nothing as of now
};

message lwlinkGetIntraNodeConnReqMsg
{
    // nothing as of now
};

message lwlinkAddInterNodeConnReqMsg
{
    optional lwlinkInterNodeConnInfo connInfo = 1;
};

// All the lwlink related request messages.
message lwlinkRequestMsg
{
    optional lwlinkNodeInitReqMsg                     nodeInitReqMsg                    = 1;
    optional lwlinkNodeInitStatusReqMsg               nodeInitStatusReqMsg              = 2;
    optional lwlinkNodeInitResetSwitchLinksReqMsg     nodeInitResetSwitchLinksReqMsg    = 3;
    optional lwlinkNodeInitResetAllSwitchLinksReqMsg  nodeInitResetAllSwitchLinksReqMsg = 4;
    optional lwlinkTrainConnReqMsg                    connTrainReqMsg                   = 5;
    optional lwlinkDiscoverIntraNodeConnReqMsg        discoverIntraNodeConnReqMsg       = 6;
    optional lwlinkReadDiscoveryTokenReqMsg           readDiscTokenReqMsg               = 7;
    optional lwlinkWriteDiscoveryTokenReqMsg          writeDiscTokenReqMsg              = 8;
    optional lwlinkAddInterNodeConnReqMsg             addInterNodeConnReqMsg            = 9;
    optional lwlinkGetIntraNodeConnReqMsg             getIntraNodeConnReqMsg            = 10;
};

message lwlinkStateInfo
{
    optional uint32 linkMode        = 1;
    optional uint32 txSubLinkMode   = 2;
    optional uint32 rxSubLinkMode   = 3;
};

message lwlinkTrainConnRspMsg
{
    optional lwlinkStateInfo   masterState  = 1;
    optional lwlinkStateInfo   slaveState   = 2;
};

message lwlinkNodeInitRspMsg
{
    // nothing as of now.
};

message lwlinkLinkInitStatus
{
    optional uint32 linkIndex  = 1;
    optional bool status       = 2;
};

message lwlinkDeviceLinkInitStatus
{
    optional uint64 gpuOrSwitchId            = 1;
    repeated lwlinkLinkInitStatus linkStatus = 2;
};

// Note: nodeId here is the ID seen by LWLinKCoreLib driver.
message lwlinkNodeInitStatusRspMsg
{
    optional uint32 nodeId                         = 1;
    repeated lwlinkDeviceLinkInitStatus initStatus = 2;
};

message lwlinkNodeInitResetSwitchLinksRspMsg
{
    // nothing as of now.
};

message lwlinkNodeInitResetAllSwitchLinksRspMsg 
{
    // nothing as of now.
};

message lwlinkDiscoverIntraNodeConnRspMsg
{
    // nothing as of now.
};

// Note: nodeId here is the ID seen by LWLinKCoreLib driver.
message lwlinkDiscoveryTokenInfo
{
   optional uint32 nodeId          = 1;
   optional uint64 gpuOrSwitchId   = 2;
   optional uint32 linkIndex       = 3;
   optional uint64 tokelwalue      = 4;
};

message lwlinkWriteDiscoveryTokenRspMsg
{
    repeated lwlinkDiscoveryTokenInfo tokenInfo = 1;
};

message lwlinkReadDiscoveryTokenRspMsg
{
    repeated lwlinkDiscoveryTokenInfo tokenInfo = 1;
};

message lwlinkAddInterNodeConnRspMsg
{
    // nothing as of now.
};

message lwlinkGetIntraNodeConnRspMsg
{
   repeated lwlinkConnectionInfo connInfo = 1;
};

// all the lwlink related config req/response messages.
message lwlinkResponseMsg
{
    optional int32                                   status                            = 1;
    optional lwlinkNodeInitRspMsg                    nodeInitRspMsg                    = 2;
    optional lwlinkNodeInitStatusRspMsg              nodeInitStatusRspMsg              = 3;
    optional lwlinkNodeInitResetSwitchLinksRspMsg    nodeInitResetSwitchLinksRspMsg    = 4;
    optional lwlinkNodeInitResetAllSwitchLinksRspMsg nodeInitResetAllSwitchLinksRspMsg = 5;
    optional lwlinkTrainConnRspMsg                   connTrainRspMsg                   = 6;
    optional lwlinkDiscoverIntraNodeConnRspMsg       discoverIntraNodeConnRspMsg       = 7;
    optional lwlinkReadDiscoveryTokenRspMsg          readDiscTokenRspMsg               = 8;
    optional lwlinkWriteDiscoveryTokenRspMsg         writeDiscTokenRspMsg              = 9;
    optional lwlinkAddInterNodeConnRspMsg            addInterNodeConnRspMsg            = 10;
    optional lwlinkGetIntraNodeConnRspMsg            getIntraNodeConnRspMsg            = 11;
};

// place holder for all the lwlink request and response.
// will have either reqMsg or rspMsg depending on the actual message type.
message lwlinkMsg
{
    required uint64 trainReqId               = 1;
    optional lwlinkRequestMsg reqMsg         = 2;
    optional lwlinkResponseMsg rspMsg        = 3;
};

message lwlinkErrorRecoveryMsg
{
    optional uint64 gpuOrSwitchId  = 1;
    repeated uint32 linkIndex      = 2; //lwlink port number within a switch or gpu
};

message lwlinkErrorRecoveryAck
{
    // nothing as of now.
};

message lwlinkErrorGpuFatalMsg
{
    optional uint64 gpuOrSwitchId  = 1;
};

message lwlinkErrorGpuFatalAck
{
    // nothing as of now.
};

// place holder for all the lwlink error request and response
message lwlinkErrorMsg
{
    optional lwlinkErrorRecoveryMsg recoveryMsg  = 1;
    optional lwlinkErrorRecoveryAck recoveryAck  = 2;
    optional lwlinkErrorGpuFatalMsg gpuFatalMsg  = 3;
    optional lwlinkErrorGpuFatalAck gpuFatalAck  = 4;
};
