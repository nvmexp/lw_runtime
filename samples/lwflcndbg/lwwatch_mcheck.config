#
# A list of all chips.  Chips with a 1 are checked, those with a 0 are skipped.
#
check_hash(\%verify_chips,
"t30" => 1,
"t114" => 1,
"t124" => 1,
"lw50" => 1,
"g84" => 1,
"g86" => 1,
"g92" => 1,
"g94" => 1,
"g96" => 1,
"g98" => 1,
"gt200" => 1,
"gt206" => 0,
"igt206" => 0,
"mcp77" => 0,         # Headers are not copied. Uses igt206.
"igt209" => 0,        # Should be on
"mcp79" => 0,         # Headers are not copied. Uses igt209.
"gt215" => 1,
"gt216" => 1,
"gt218" => 1,
"igt21a" => 1,
"mcp89" => 0,         # Headers are not copied.  Uses igt21a.
"gf100" => 1,
"gf110f" => 0,
"gf110f2" => 0,
"gf110f3" => 0,
"gf119" => 1,
"gk104" => 1,
"gk106" => 1,
"gk107" => 1,
"gk208" => 1,
"gm107" => 1,
"gm200" => 1,
);

#
# Define new directories for IP chip include files
#
check_hash(\%ip_chip_dirs,
"gf119" => "disp:v02_00:dpu:v02_00",
"gk104" => "disp:v02_01:dpu:v02_01",
"gk106" => "disp:v02_01:dpu:v02_01",
"gk107" => "disp:v02_01:dpu:v02_01",
"gk110" => "disp:v02_02:dpu:v02_02",
"gk208" => "disp:v02_03:dpu:v02_02",
"gm107" => "disp:v02_04:dpu:v02_02",
"gm200" => "disp:v02_05:dpu:v02_02",
);


#
# These two hashs allow mcheck to automatically create manual
# snapshots from <chip>/net/netlist.h.  This is typically used
# for chips once they stabalize in emulation but still are in
# emulation.  Once they tape out, we should be able to remove
# them and lower the mcheck runtime.
#
# DVS is similar but for the DVS netlist tagged DVS.
#
# The following values are supported:
#   0 - disabled
#   1 - enable with exact match required (exceptions still apply)
#   2 - enable with automatic exceptions for added bitfields
#   3 - enable with automatic exceptions for anything added
#
$snapshot_p4path = "";
check_hash(\%enforce_emulation_compat,
    "gf100" => 0,
);
check_hash(\%enforce_dvs_compat,
    "gf100" => 0,
);

#
# Mapping to lwwatch-config name.  Is usually 1:1.
#
check_hash(\%chip_to_rmconfig,
   "gt206" => "dgt206",
);

#
# Mapping chip name to alias for #include file <.../chip/dev_foo.h> cross checking
#
check_hash(\%include_chip_aliases,
    "vaio1" => "lw50",
    "vaio2" => "gt200",
    "igt206" => "mcp77",
    "igt209" => "mcp79",
);

# some of the older manuals are incomplete
# and require additional registers from lw_ref.h
# (the newer chips have these shared)
#
# Allow for additional manuals to be specified.
#    !chip     read listed chips manuals
#    file      read file
#    dir/...   read whole directory
#
# Evaluation order
#    native chip directory then inheritance list from left to right
#
# Note:
#   inheriting a !chip also evaluates that chips inheritance rules
#   Any filename dev_foo.h is only included once
#   Multiple defintions are ignored.  This is a hole for old chips.
#
check_hash(\%manual_inheritance,
    "lw50" => ["$kernel_inc/vaio1/..."],
    "gt200" => ["$kernel_inc/vaio2/..."],
    "mcp77" => ["$kernel_inc/igt206/..."],
    "mcp79" => ["$kernel_inc/igt209/..."],
    "mcp89" => ["$kernel_inc/igt21a/..."],
);

#
# Some disabled chips have HAL functions in use by enabled chips.  They are 
# disabled, so there are no HW-manual errors or warnings.  However, there are 
# errors when an enabled chip uses a HAL function from a disabled chip.  In
# cases such as using older HAL code, we can treat these as warnings by listing
# them here.
#
check_hash(\%warning_on_disabled_chip_use,
    "lw63" => 1,    # disabled chip. warn on errors from use of its HALs.
    "gf110" => 1,   # disabled chip. warn on errors from use of its HALs.
    "gf108" => 1,   # disabled chip. warn on errors from use of its HALs.
    "gf104" => 1,   # disabled chip. warn on errors from use of its HALs.
    "gt206" => 1,   # disabled chip. warn on errors from use of its HALs.
    "igt206" => 1,  # disabled chip. warn on errors from use of its HALs.
    "t20" => 1,     # disabled chip. warn on errors from use of its HALs.
    "gk20a" => 1,   # disabled chip. warn on errors from use of its HALs.
    "gk110" => 1,   # disabled chip. warn on errors from use of its HALs.
    "gf117" => 1,   # disabled till all Display exceptions can be cleaned up.
    "mcp77" => 1,   # mcp77 was never hooked up in lwwatch
    "00" => 1,      # mcheck bug? This corresponds to IP "v02_00"
    "01" => 1,      # mcheck bug? This corresponds to IP "v02_01"
    "04" => 1,      # mcheck bug? This corresponds to IP "v02_04"
    "05" => 1,      # mcheck bug? This corresponds to IP "v02_05"
);

#
# Some files are excluded, mostly ucode files.  This is done
# both for speed, and to make the code coverage results more
# accurate.
#
check_hash(\%excluded_files,
    "exts.c" => 1,
    "os.c"   => 1,
    "osMac.c"   => 1,
    "osMods.c"   => 1,
    "osVxWorks.c"   => 1,
    "osWin.c"   => 1,
    "userWinOs.c"   => 1,
    "dfagen.c"  => 1,
);

#
# Some functions just do not work well with mcheck.   Allow these to
# be not be errors when not found when looking up functions.
# Please use this with care, and normally use the normal exclusion
# list mechanism for most cases.
#
check_hash(\%excluded_hal_functions,
);

#
# Exceptions for matching functions in the first pass of mcheck
# Child functions must themselves be found during the parsing
# step to be added to the list to be checked.  This covers almost
# all common code cases.  Therefore this list should stay very
# short.
#
check_hash(\%child_exceptions,
   # C keywords
   "if"     => 1,
   "switch" => 1,
   "while"  => 1,
   "for"    => 1,
   "sizeof" => 1,
   "return" => 1,
);

# To handle global register renaming or aliases, provide global aliases.
# [a,b] means when you see b while parsing, you pretend you also saw a
# with the same value now these must be exact token matches.
@global_register_aliases = (
    ["LW_PTRIM_HPLL_CFG65_PDIV", "LW_PTRIM_HPLL_CFG65_PLDIV"],
);

# Per chip translation aliases to cover oddities in the manuals.
#
# For each chip, as the manuals are scanned in, each define has
# this edit script applied to it, and the new field added as an
# alias to the actual value.
#
check_hash(\%chip_register_translations,
    "dev_lw_ixve_c11.h,igt206" => "s/LW_IXVE_C11/LW_XVE/",
    "dev_lw_ixve_c11.h,igt209" => "s/LW_IXVE_C11/LW_XVE/",
    "dev_lw_ixve_c11.h,igt21a" => "s/LW_IXVE_C11/LW_XVE/",
);


#
# Known failues that are either acceptable (listed first) or temporary until the code can be fixed.
# Please list a bug number for things that are not on a SCS and you cannot get to now.
#
# Rules should be written as specifically as possible so new problems are not masked.
#
# Acceptable syntax:
#   "full-define,function" => 1,
#      * for all chips ignore full-define in function
#   "full-define,function,chip" => 1,
#      * for the listed chip ignore full-define in function
#   "function,chip" => "regex-pattern"
#      * for the listed chip, apply s/regex-pattern// in function.  If the result differs
#        from the original then then this define is ignored.  This is per chip lwrrently
#        as it is easy to write too broad of a rule.
#
check_hash(\%known_failures,
    #
    # EXPECTED FAILURES - These are not bugs.  Please add hacks to the BOTTOM.
    #

# these registers are conditionally skipped on gk104
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GRED,_dumpTPCL1CExceptionState_GF100,gk104" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GATOM,_dumpTPCL1CExceptionState_GF100,gk104" => 1,
"LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,gk104" => 1,
"LW_PGRAPH_EXCEPTION_CWD_PENDING,_dumpPgraphExceptionsState_GF100,gk104" => 1,
"LW_PGRAPH_PRI_CWD_HWW_ESR,_dumpPgraphExceptionsState_GF100,gk104" => 1,
"LW_PMSVLD_PRI_MEMDAT,msdecGetInfo_G98,gk104" => 1,
"LW_PMSVLD_PRI_MEMCTL,msdecGetInfo_G98,gk104" => 1,
"LW_PMSPDEC_PRI_MEMDAT,msdecGetInfo_G98,gk104" => 1,
"LW_PMSPDEC_PRI_MEMCTL,msdecGetInfo_G98,gk104" => 1,
"LW_PMSPPP_PRI_MEMDAT,msdecGetInfo_G98,gk104" => 1,
"LW_PMSPPP_PRI_MEMCTL,msdecGetInfo_G98,gk104" => 1,
"LW_PMSPDEC_PRI_MEMCTL_ADDR,msdecGetInfo_G98,gk104" => 1,
"LW_PMSPDEC_PRI_MEMCTL_READ,msdecGetInfo_G98,gk104" => 1,
"LW_PMSVLD_PRI_MEMCTL_IMEM,msdecGetInfo_G98,gk104" => 1,
"LW_PMSVLD_FBIF_CTXDMA__SIZE_1,getMSVLDPriv_G98,gk104" => 1,
"LW_PMSVLD_FBIF_CTXDMA,getMSVLDPriv_G98,gk104" => 1,
"LW_PMSPPP_FBIF_CTXDMA__SIZE_1,getMSPPPPriv_G98,gk104" => 1,
"LW_PMSPPP_FBIF_CTXDMA,getMSPPPPriv_G98,gk104" => 1,
"LW_PMSPDEC_FBIF_CTXDMA__SIZE_1,getMSPDECPriv_G98,gk104" => 1,
"LW_PMSPDEC_FBIF_CTXDMA,getMSPDECPriv_G98,gk104" => 1,
"LW_PMSPDEC_PRI_ADDR,getMSPDECPriv_G98,gk104" => 1,
"LW_PMSVLD_PRI_MEMCTL,testMsvldState_GT215,gk104" => 1,
"LW_PMSPDEC_PRI_MEMCTL,testMspdecState_GT215,gk104" => 1,
"LW_PMSPPP_PRI_MEMCTL,testMspppState_GT215,gk104" => 1,

# these registers are conditionally skipped on gk107
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GRED,_dumpTPCL1CExceptionState_GF100,gk107" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GATOM,_dumpTPCL1CExceptionState_GF100,gk107" => 1,
"LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,gk107" => 1,
"LW_PGRAPH_EXCEPTION_CWD_PENDING,_dumpPgraphExceptionsState_GF100,gk107" => 1,
"LW_PGRAPH_PRI_CWD_HWW_ESR,_dumpPgraphExceptionsState_GF100,gk107" => 1,
"LW_PMSVLD_PRI_MEMDAT,msdecGetInfo_G98,gk107" => 1,
"LW_PMSVLD_PRI_MEMCTL,msdecGetInfo_G98,gk107" => 1,
"LW_PMSPDEC_PRI_MEMDAT,msdecGetInfo_G98,gk107" => 1,
"LW_PMSPDEC_PRI_MEMCTL,msdecGetInfo_G98,gk107" => 1,
"LW_PMSPPP_PRI_MEMDAT,msdecGetInfo_G98,gk107" => 1,
"LW_PMSPPP_PRI_MEMCTL,msdecGetInfo_G98,gk107" => 1,
"LW_PMSPDEC_PRI_MEMCTL_ADDR,msdecGetInfo_G98,gk107" => 1,
"LW_PMSPDEC_PRI_MEMCTL_READ,msdecGetInfo_G98,gk107" => 1,
"LW_PMSVLD_PRI_MEMCTL_IMEM,msdecGetInfo_G98,gk107" => 1,
"LW_PMSVLD_FBIF_CTXDMA__SIZE_1,getMSVLDPriv_G98,gk107" => 1,
"LW_PMSVLD_FBIF_CTXDMA,getMSVLDPriv_G98,gk107" => 1,
"LW_PMSPPP_FBIF_CTXDMA__SIZE_1,getMSPPPPriv_G98,gk107" => 1,
"LW_PMSPPP_FBIF_CTXDMA,getMSPPPPriv_G98,gk107" => 1,
"LW_PMSPDEC_FBIF_CTXDMA__SIZE_1,getMSPDECPriv_G98,gk107" => 1,
"LW_PMSPDEC_FBIF_CTXDMA,getMSPDECPriv_G98,gk107" => 1,
"LW_PMSPDEC_PRI_ADDR,getMSPDECPriv_G98,gk107" => 1,
"LW_PMSVLD_PRI_MEMCTL,testMsvldState_GT215,gk107" => 1,
"LW_PMSPDEC_PRI_MEMCTL,testMspdecState_GT215,gk107" => 1,
"LW_PMSPPP_PRI_MEMCTL,testMspppState_GT215,gk107" => 1,

# these registers are conditionally skipped on gf117
"LW_PDISP_CLK_REM_VPLL_CFG,_clkReadSysCoreRegOffset_GF100" => 1,
"LW_PDISP_CLK_REM_VPLL_COEFF,_clkReadSysCoreRegOffset_GF100" => 1,

# these registers are conditionally skipped on gf119
"LW_PGRAPH_PRI_GPC0_TPC0_SM_HALFCTL_CTRL_SCTL_READ_QUAD_CTL,grDumpTpcInfo_GK104,gf119" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_SM_HALFCTL_CTRL_SCTL_READ_QUAD_CTL_0,grDumpTpcInfo_GK104,gf119" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_SM_HALFCTL_CTRL_SCTL_READ_QUAD_CTL_1,grDumpTpcInfo_GK104,gf119" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_SM_HALFCTL_CTRL_SCTL_READ_QUAD_CTL_INIT,grDumpTpcInfo_GK104,gf119" => 1,
"LW_PMSVLD_PRI_MEMDAT,msdecGetInfo_G98,gf119" => 1,
"LW_PMSVLD_PRI_MEMCTL,msdecGetInfo_G98,gf119" => 1,
"LW_PMSPDEC_PRI_MEMDAT,msdecGetInfo_G98,gf119" => 1,
"LW_PMSPDEC_PRI_MEMCTL,msdecGetInfo_G98,gf119" => 1,
"LW_PMSPPP_PRI_MEMDAT,msdecGetInfo_G98,gf119" => 1,
"LW_PMSPPP_PRI_MEMCTL,msdecGetInfo_G98,gf119" => 1,
"LW_PMSPDEC_PRI_MEMCTL_ADDR,msdecGetInfo_G98,gf119" => 1,
"LW_PMSPDEC_PRI_MEMCTL_READ,msdecGetInfo_G98,gf119" => 1,
"LW_PMSVLD_PRI_MEMCTL_IMEM,msdecGetInfo_G98,gf119" => 1,
"LW_PMSVLD_FBIF_CTXDMA__SIZE_1,getMSVLDPriv_G98,gf119" => 1,
"LW_PMSVLD_FBIF_CTXDMA,getMSVLDPriv_G98,gf119" => 1,
"LW_PMSPPP_FBIF_CTXDMA__SIZE_1,getMSPPPPriv_G98,gf119" => 1,
"LW_PMSPPP_FBIF_CTXDMA,getMSPPPPriv_G98,gf119" => 1,
"LW_PMSPDEC_FBIF_CTXDMA__SIZE_1,getMSPDECPriv_G98,gf119" => 1,
"LW_PMSPDEC_FBIF_CTXDMA,getMSPDECPriv_G98,gf119" => 1,
"LW_PMSPDEC_PRI_ADDR,getMSPDECPriv_G98,gf119" => 1,
"LW_PMSVLD_PRI_MEMCTL,testMsvldState_GT215,gf119" => 1,
"LW_PMSPDEC_PRI_MEMCTL,testMspdecState_GT215,gf119" => 1,
"LW_PMSPPP_PRI_MEMCTL,testMspppState_GT215,gf119" => 1,

# these registers exist only for fermi but are being accessed by tesla GPUs
"LW_RAMIN_PDE_BASE,mmuGetPDETableStartAddress_LW50" => 1,
"LW_RAMIN_PDE_SIZE_VAL,vmemGetByChId_LW50" => 1,


"LW_PHOST_CLKSRC_REF_MPLLA_FB_REFCLK,getMclk_G84" => 1,
"LW_PHOST_CLKSRC_PMGRCLK_XTAL,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_PMGRCLK_XCLK3X,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_DISPCLK_PEX_REFCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_DISPCLK_TESTCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_DISPCLK_XCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_DISPCLK_XCLK3DIV128,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKDEBUG_CLKSRC_MCLKBYPASS_SPPLL0,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_HPLL_GPU_REFCLK_1,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_HPLL_NULL,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_HPLL_PEX_REFCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_HPLL_GPU_REFCLK,clkGetClockRouting_G94" => 1,
"LW_PHOST_CLKSRC_1_REF_MPLLA_FB_REFCLK_1,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_MPLLA_XTAL,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_MPLLA_PEX_REFCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_MPLLA_FB_REFCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_MPLLA_XTALS,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_MPLLC_FB_REFCLK_1,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_MPLLC_XTAL,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_MPLLC_PEX_REFCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_MPLLC_FB_REFCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_MPLLC_XTALS,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_LWPLL_XTAL,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_LWPLL_PEX_REFCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_LWPLL_GPU_REFCLK,clkGetClockRouting_G94" => 1, 
"LW_PHOST_CLKSRC_1_REF_LWPLL_XTALS,clkGetClockRouting_G94" => 1, 

"LW_PHOST_CLKSRC_1_REF_LWPLL_GPU_REFCLK_1,clkGetClockRouting_G94,gt200" => 1,

"LW_PMC_BOOT_0_ARCHITECTURE_G100,IsGT2XX" => 1,
"LW_PMC_BOOT_0_ARCHITECTURE_G100,IsGT200Arch" => 1,
"LW_PMC_BOOT_0_ARCHITECTURE_GF100,IsGF100Arch" => 1,

"LW_PMSVLD_FBIF_CTXDMA__SIZE_1,getMSVLDPriv_G98,gf100" => 1,
"LW_PMSVLD_FBIF_CTXDMA,getMSVLDPriv_G98,gf100" => 1,
"LW_PMSPPP_FBIF_CTXDMA__SIZE_1,getMSPPPPriv_G98,gf100" => 1,
"LW_PMSPPP_FBIF_CTXDMA,getMSPPPPriv_G98,gf100" => 1,
"LW_PMSPDEC_FBIF_CTXDMA__SIZE_1,getMSPDECPriv_G98,gf100" => 1,
"LW_PMSPDEC_FBIF_CTXDMA,getMSPDECPriv_G98,gf100" => 1,

"LW_PMSPDEC_FBIF_DBG_STAT__SIZE_1,getMSVLDPriv_G98" => 1,
"LW_PSEC_PRI_MEMDAT,msdecGetInfo_G98" => 1,
"LW_PSEC_PRI_MEMCTL,msdecGetInfo_G98" => 1,

"LW_PGRAPH_CTXSW_LWRRENT_CTX,grGetLwrrentAndPendingInfo_LW50,gf100" => 1,
"LW_PGRAPH_CTXSW_LWRRENT_CTX_VALID_TRUE,grGetLwrrentAndPendingInfo_LW50,gf100" => 1,
"LW_PGRAPH_CTXSW_NEW_CTX,grGetLwrrentAndPendingInfo_LW50,gf100" => 1,
"LW_PGRAPH_CTXSW_NEW_CTX_VALID_TRUE,grGetLwrrentAndPendingInfo_LW50,gf100" => 1,

"LW_PGRAPH_ACTIVITY2_WID_EMPTY,grGetStatus_LW50" => 1,
"LW_PGRAPH_ACTIVITY2_WID_ACTIVE,grGetStatus_LW50" => 1,
"LW_PGRAPH_ACTIVITY2_WID_QUIESCENT,grGetStatus_LW50" => 1,
"LW_PGRAPH_ACTIVITY2_WID_STALLED,grGetStatus_LW50" => 1,
"LW_PGRAPH_ACTIVITY2_WID_HALTED,grGetStatus_LW50" => 1,


"LW_PFB_MMU_PDE_BASE,mmuGetPDETableStartAddress_G82,lw50" => 1,

"LW_RAMIN_HEAP_BASE,mmuGetPDETableStartAddress_G82" => 1,

"LW_RAMIN_CTXBUFFER_CTXDMA,getPBCDMAStart_LW50" => 1,
"LW_RAMIN_SIZE_ADR,getInstRamSizeAddr_LW50" => 1,
"LW_RAMIN_VP_CTXBUFFER_CTXDMA,getVPCtxDma_LW50" => 1,
"LW_RAMIN_ME_CTXBUFFER_CTXDMA,getMeCtxDma_LW50" => 1,
"LW_RAMIN_MDEC_CTXBUFFER_CTXDMA,getMdecCtxDma_LW50" => 1,
"LW_RAMIN_FIFO_BASE,getFifoBase_LW50" => 1,
"LW_RAMIN_HEAP_BASE,getHeapBase_LW50" => 1,




"LW_PFIFO_ENGINES_STATE_ENG5_BUSY,showEngineStates_GT215,lw50" => 1,
"LW_PFIFO_ENGINES_STATE_ENG6_BUSY,showEngineStates_GT215,lw50" => 1,
"LW_PFIFO_CHANNEL_RAMFC_TARGET_VID_MEM,fbTestSysmem_GT215,lw50" => 1, 
"LW_RAMFC_INSTANCE,fbTestSysmem_GT215,lw50" => 1, 
"LW_PFIFO_INSTANCE_ADDR_TARGET_VID_MEM,fbTestSysmem_GT215,lw50" => 1, 
"LW_PFIFO_INTR_0_PREVENT_CHSW_MASK,checkInterrupts_GT215,lw50" => 1, 
"LW_PFIFO_CACHE1_PULL1_ENGINE_ENG5,showEngineStates_GT215,lw50" => 1, 
"LW_PFIFO_CACHE1_PULL1_ENGINE_ENG6,showEngineStates_GT215,lw50" => 1,
"LW_PFIFO_LWRRENT_RUNLIST_CHID_NULL,fifoTestHostState_GT215,lw50" => 1, 
"LW_PFIFO_CHANNEL_ACQUIRE_PENDING_OFF,fifoTestHostState_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_STREAM_CNTR_CTX_VCNTR,checkPostGeomStatus_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_STREAM_CNTR_CTX_BCNTR,checkPostGeomStatus_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_CAS_BUNDLE_DRAIN,checkVAttributeStatus_GT215,lw50" => 1, 

"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK_GRED_COHERENT_LIMIT_OFF,dumpExceptionsState_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK_GRED_COHERENT_VADDR_OFF,dumpExceptionsState_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK_GRED_INCOHERENT_LIMIT_OFF,dumpExceptionsState_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK_GRED_INCOHERENT_VADDR_OFF,dumpExceptionsState_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK_GATOM_COHERENT_LIMIT_OFF,dumpExceptionsState_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK_GATOM_COHERENT_VADDR_OFF,dumpExceptionsState_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK_GATOM_INCOHERENT_LIMIT_OFF,dumpExceptionsState_GT215,lw50" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK_GATOM_INCOHERENT_VADDR_OFF,dumpExceptionsState_GT215,lw50" => 1,
 
"LW_PFB_MMU_LIMITV_TRAP_INFO_ENGINE_ID_BSP,mmuAnalyzeLimitError_GT215,lw50" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_ENGINE_ID_CD,mmuAnalyzeLimitError_GT215,lw50" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_ENGINE_ID_PM,mmuAnalyzeLimitError_GT215,lw50" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_ENGINE_ID_HOSTSR,mmuAnalyzeLimitError_GT215,lw50" => 1,
"LW_PFB_MMU_LIMITV_TRAP_INFO_CLIENT_ID_VP2,mmuAnalyzeLimitError_GT215,lw50" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_CLIENT_ID_BSP,mmuAnalyzeLimitError_GT215,lw50" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_CLIENT_ID_CD,mmuAnalyzeLimitError_GT215,lw50" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_CLIENT_ID_PM,mmuAnalyzeLimitError_GT215,lw50" => 1,

# these exceptions are for g98,igt206 and gt206 where these regs are undefined
"LW_PMSVLD_VLD_BIT_ERROR_MASK,printVldBitErrorCode_GT215" => 1, 
"LW_PMSVLD_VLD_BIT_ERROR_CODE_CODE_EXCEED_SLICE_OFFSET_LIMIT,printVldBitErrorCode_GT215" => 1, 
"LW_PMSVLD_VLD_SLICE_LIMIT,printVldBitErrorCode_GT215" => 1, 
"LW_PMSVLD_VLD_BIT_ERROR_CODE_CODE_MB_DATA_EXCEED_EDOB_FIFO_LIMIT,printVldBitErrorCode_GT215" => 1, 
"LW_PMSVLD_BAR0_CSR,testMsvldState_GT215" => 1, 
"LW_PMSVLD_BAR0_CSR_STATUS_IDLE,testMsvldState_GT215" => 1, 
"LW_PMSVLD_BAR0_CSR_STATUS_BUSY,testMsvldState_GT215" => 1, 
"LW_PMSVLD_BAR0_CSR_STATUS_TMOUT,testMsvldState_GT215" => 1, 
"LW_PMSVLD_BAR0_CSR_STATUS_DIS,testMsvldState_GT215" => 1, 
"LW_PMSVLD_FALCON_ENGCTL,testMsvldState_GT215" => 1, 
"LW_PMSPDEC_MVERRORSTAT,testMspdecState_GT215" => 1, 
"LW_PMSPDEC_MVERRORMASK,testMspdecState_GT215" => 1, 
"LW_PMSPDEC_FALCON_ENGCTL,testMspdecState_GT215" => 1,
"LW_PMSPDEC_MCINTRPTSTAT,testMspdecState_GT215" => 1, 
"LW_PMSPDEC_MCINTRPTEN,testMspdecState_GT215" => 1, 
"LW_PMSPPP_FALCON_ENGCTL,testMspppState_GT215" => 1, 
"LW_PCE_FALCON_MAILBOX0,falconPrintMailbox_GT215" => 1, 
"LW_PCE_FALCON_MAILBOX1,falconPrintMailbox_GT215" => 1, 

"LW_PMSPDEC_FALCON_DMEMC,msdecGetInfo_G98" => 1,
"LW_PMSPDEC_FALCON_DMEMD,msdecGetInfo_G98" => 1,
"LW_PMSPDEC_FALCON_IMEMC,msdecGetInfo_G98" => 1,
"LW_PMSPDEC_FALCON_IMEMD,msdecGetInfo_G98" => 1,
"LW_PMSPDEC_FALCON_IMEMT,msdecGetInfo_G98" => 1,
"LW_PMSPPP_FALCON_DMEMC,msdecGetInfo_G98" => 1,
"LW_PMSPPP_FALCON_DMEMD,msdecGetInfo_G98" => 1,
"LW_PMSPPP_FALCON_IMEMC,msdecGetInfo_G98" => 1,
"LW_PMSPPP_FALCON_IMEMD,msdecGetInfo_G98" => 1,
"LW_PMSPPP_FALCON_IMEMT,msdecGetInfo_G98" => 1,
"LW_PMSVLD_FALCON_DMEMC,msdecGetInfo_G98" => 1,
"LW_PMSVLD_FALCON_DMEMC_OFFS,msdecGetInfo_G98" => 1,
"LW_PMSVLD_FALCON_DMEMD,msdecGetInfo_G98" => 1,
"LW_PMSVLD_FALCON_IMEMC,msdecGetInfo_G98" => 1,
"LW_PMSVLD_FALCON_IMEMC_OFFS,msdecGetInfo_G98" => 1,
"LW_PMSVLD_FALCON_IMEMD,msdecGetInfo_G98" => 1,
"LW_PMSVLD_FALCON_IMEMT,msdecGetInfo_G98" => 1,

"LW_PFB_MMU_LIMITV_TRAP_INFO_ENGINE_ID_SEC,mmuAnalyzeLimitError_GT215" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_ENGINE_ID_PWR,mmuAnalyzeLimitError_GT215" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_TYPE_FAULT_PTE_REQUEST,mmuAnalyzeLimitError_GT215" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_TYPE_FAULT_PDE_REQUEST,mmuAnalyzeLimitError_GT215" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_TYPE_FAULT_CTXDMA_REQUEST,mmuAnalyzeLimitError_GT215" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_TYPE_FAULT_PTE_CARVEOUT,mmuAnalyzeLimitError_GT215" => 1,
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK_SM2_OFF,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_LS_RADDR,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_ADDR_HI,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_ADDR_LO,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_SM,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_COORD,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_FORMAT,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_STATE,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_STATE_SM_CMD_NONE,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_STATE_SM_CMD_LD,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_STATE_SM_CMD_ST,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR_STATE_SM_CMD_GATOM,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC1_PROP_HWW_ESR,grTestGraphicsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR,grTestGraphicsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_FRSTR_PM,grTestGraphicsState_GT215" => 1, 
"LW_MMU_PTE_COMPTAGLINE,checkPDE" => 1, 
"LW_MMU_PDE_TYPE_16K,checkPDE" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_CLIENT_ID_PWR,mmuAnalyzeLimitError_GT215" => 1, 
"LW_PFB_MMU_LIMITV_TRAP_INFO_CLIENT_ID_CE0,mmuAnalyzeLimitError_GT215" => 1, 
"LW_PFIFO_ENGINES_STATE_ENG7_BUSY,showEngineStates_GT215" => 1, 
"LW_PFIFO_CACHE1_PULL1_ENGINE_ENG7,showEngineStates_GT215" => 1, 
"LW_PGRAPH_PRI_TPC1_PROP_HWW_ESR,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_SM_CTX_5__SIZE_1,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_SM_CTX_5,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_SM_CTX_8,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_SM_CTX_9,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_SM_CTX_28,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_SM_CTX_29,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_SM_CTX_21,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_SM_CTX_23,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_STATUS,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_PERSM_STATUS__SIZE_1,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_PERSM_STATUS,checkSmcStatus_GT215" => 1, 
"LW_PGRAPH_PRI_XBUF_WC_CTX_CNTR_HI,checkPostGeomStatus_GT215" => 1, 
"LW_PGRAPH_PRI_XBUF_WC_CTX_CNTR_LO,checkPostGeomStatus_GT215" => 1, 
"LW_PGRAPH_PRI_STREAM_CNTR_CTX_BBCNTR__SIZE_1,checkPostGeomStatus_GT215" => 1, 
"LW_PGRAPH_PRI_STREAM_CNTR_CTX_BBCNTR,checkPostGeomStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC1_PROP_HWW_ESR,checkPropStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR,checkPropStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_STATE_0,checkPropStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_STATUS1,checkPropStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_STATUS2,checkPropStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_STATUS3,checkPropStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_STATUS4,checkPropStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_CTXSW0,checkPropStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC1_PROP_HWW_ESR,checkTexStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_PROP_HWW_ESR,checkTexStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_TEX_M_TEX_SUBUNITS_STATUS,checkTexStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_CBAR_STATUS,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_CBAR_CROP_STATUS1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_CBAR_IFIFO_STATUS1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_CBAR_IFIFO_STATUS2,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_CBAR_OFIFO_STATUS1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_PBAR_STATUS,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_PBAR_IFIFO_STATUS1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_PBAR_OFIFO_STATUS1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_PBAR_OFIFO_STATUS2,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_STATE1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_BLIT_STATE1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_CBAR_BLIT_STATE2,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_ZBAR_ZROP_STATUS1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_ZBAR_IFIFO_STATUS1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_ZBAR_IFIFO_STATUS2,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_ZBAR_OFIFO_STATUS1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_ZBAR_STATE1,checkBeStatus_GT215" => 1, 
"LW_PGRAPH_PRI_TPC1_SMC_HWW_ESR,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_TEX_M_HWW_ESR,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_TEX_M_HWW_ESR_REQ,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_TEX_M_HWW_ESR_ADDR,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_TEX_M_HWW_ESR_CTXDMA,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_TEX_M_HWW_ESR_MMU,dumpExceptionsState_GT215" => 1, 
"LW_PGRAPH_PRI_TPC0_SMC_HWW_ESR_MASK,dumpExceptionsState_GT215" => 1,
"LW_PFIFO_INTR_0_MMU_ERR_FLT_NOT_PENDING,checkInterrupts_GT215" => 1, 
"LW_PFIFO_INTR_0_HOLDOFF_MTHDCTX_NOT_PENDING,checkInterrupts_GT215" => 1, 
"LW_PFIFO_ENG_HOLDOFF_STATUS,checkInterrupts_GT215" => 1, 
"LW_PFIFO_ENG_HOLDOFF_STATUS_ENG1_MTHDCTX_PENDING,checkInterrupts_GT215" => 1, 
"LW_PFIFO_ENG_HOLDOFF_STATUS_ENG2_MTHDCTX_PENDING,checkInterrupts_GT215" => 1, 
"LW_PFIFO_ENG_HOLDOFF_STATUS_ENG3_MTHDCTX_PENDING,checkInterrupts_GT215" => 1, 
"LW_PFIFO_ENG_HOLDOFF_STATUS_ENG4_MTHDCTX_PENDING,checkInterrupts_GT215" => 1, 
"LW_PFIFO_ENG_HOLDOFF_STATUS_ENG5_MTHDCTX_PENDING,checkInterrupts_GT215" => 1, 
"LW_PFIFO_ENG_HOLDOFF_STATUS_ENG6_MTHDCTX_PENDING,checkInterrupts_GT215" => 1, 
"LW_PFIFO_ENG_HOLDOFF_STATUS_ENG7_MTHDCTX_PENDING,checkInterrupts_GT215" => 1, 
"LW_PFIFO_INTR_0_HOLDOFF_ILWALID_PRI_NOT_PENDING,checkInterrupts_GT215" => 1,

# the following registers are undefined for g84,g86 and lw50
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_IDLE,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE1_IDLE,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_GO_SNOOZE,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_SEND_SNOOZE,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_SNOOZE,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_GO_SAFE,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_SEND_SAFE,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_SAFE,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_UPD1,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_SEND_UPD1,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_UPD1,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_LV1,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_POLL1,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_POLL1,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_GO_SLEEP,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_SEND_SLEEP,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_SLEEP,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_UPD2,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_SEND_UPD2,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_UPD2,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_LV2,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_POLL2,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_POLL2,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_GO_DETACH,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_WAIT_DETACH,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_PRE0_DONE,checkDispUpdatePreFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_IDLE,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST1_IDLE,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_ATTACH,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_ATTACH,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_POLL1,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_POLL1,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_UNSLEEP,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_SEND_UNSLEEP,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_UNSLEEP,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_UNSAFE,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_SEND_UNSAFE,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_UNSAFE,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_UPD2,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_SEND_UPD2,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_UPD2,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_LV2,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_POLL2,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_POLL2,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_BACK2MAIN,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_UNSNOOZE,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_SEND_UNSNOOZE,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_UNSNOOZE,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_UPD3,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_SEND_UPD3,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_UPD3,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_LV3,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_POLL3,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_POLL3,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_LV_ONLY,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_WAIT_4_LV_ONLY,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE2_POST0_DONE,checkDispUpdatePostFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB0_IDLE,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB1_IDLE,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB0_WAITPOLL,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB0_START,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB0_WAIT4BASE,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB0_BSEND,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB0_BWAIT,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB0_OSEND,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB0_OWAIT,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_USUB0_DONE,checkDispUpdateUsubFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_IDLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_BEGIN_PRECLK,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_FOR_ACK_PLLRESET_ENABLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_GOTO_SAFE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_SAFE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_SAFE_SETTLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_BYPASS,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_BYPASS,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_BYPASS_SETTLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_DISABLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ON,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_BEGIN_POSTCLK,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_COEFF,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_ENABLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_VPLL_LOCK_SETTLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_UNBYPASS,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_UNBYPASS_SETTLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_SET_OWNER,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_SET_OWNER,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_PLL_RESET_DISABLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_FOR_ACK_PLLRESET_DISABLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_MACROPLL_SETTLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_GOTO_UNSAFE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_UNSAFE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_UNSAFE_SETTLE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_POSTOFF,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_GOTO_FAST,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_FAST,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_FASTDONE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_GOTO_NORM,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_WAIT_4_ACK_OF_NORM,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_CMGR_NORMDONE,checkDispUpdateCmgrFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_IDLE,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_TO_BEGIN,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_START,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_RM1,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_FAST,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_PRE,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_PRECLK,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_RM2,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_USUB,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_USUB,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_POSTCLK,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_POST1,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_RM3,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_POST2,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_NOTIF,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_WAIT_4_NORMAL,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_DONE,checkDispCoreUpdateFSM_GT215" => 1, 
"LW_PDISP_DSI_CORE_UPD_STATE1_MAIN_QUITTING,checkDispCoreUpdateFSM_GT215" => 1,

# these regs are undefined for g84,g86,lw50,g92 and gt200 
"LW_PDISP_SOR_DP_LINKCTL__SIZE_1,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL__SIZE_2,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL_ENABLE_NO,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL_SYNCMODE_ENABLE,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL_SCRAMBLEREN_DISABLE,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL_SCRAMBLEREN_ENABLE_GALIOS,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL_SCRAMBLEREN_ENABLE_FIBONACCI,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL_LANECOUNT_ZERO,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL_LANECOUNT_ONE,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL_LANECOUNT_TWO,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_LINKCTL_LANECOUNT_FOUR,checkDispDpStatus_GT215" => 1, 
"LW_PDISP_SOR_DP_CONFIG0_IDLE_BEFORE_ATTACH_DISABLE,checkDispDpStatus_GT215" => 1,

# regs are undefined for g92/g84/g98/gt200/g96/igt206/g94/g86/lw50/gt206 
"LW_PDISP_SOR_HDMI_CTRL__SIZE_1,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_CTRL,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_CTRL_ENABLE_NO,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_SPARE,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_SPARE_HW_CTS_ENABLE,checkDispHdmiStatus_GT215" => 1,
"LW_PDISP_SOR_HDMI_SPARE_ACR_PRIORITY_HIGH,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_ACR_CTRL,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_ACR_CTRL_FREQS_INIT,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_ACR_CTRL_FREQS_32KHZ,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_ACR_CTRL_FREQS_44_1KHZ,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_ACR_CTRL_FREQS_88_2KHZ,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_ACR_CTRL_FREQS_96KHZ,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_ACR_CTRL_FREQS_176_4KHZ,checkDispHdmiStatus_GT215" => 1,
"LW_PDISP_SOR_HDMI_ACR_CTRL_FREQS_192KHZ,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_ACR_0441_SUBPACK_HIGH,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_ACR_0441_SUBPACK_HIGH_ENABLE_YES,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_SPDIF_CHN_STATUS1__SIZE_1,checkDispHdmiStatus_GT215" => 1, 
"LW_PDISP_SOR_HDMI_SPDIF_CHN_STATUS1,checkDispHdmiStatus_GT215" => 1,

# different def for g92/g84/gt200/g86/lw50 from gt212
"LW_PDISP_SOR_TEST__SIZE_1,checkDispOrStatus_GT215" => 1,

"LW_PDISP_AUDIO_CNTRL0,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_CNTRL0_SAMPLING_FREQ_32_0KHZ,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_CNTRL0_SAMPLING_FREQ_44_1KHZ,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_CNTRL0_SAMPLING_FREQ_88_2KHZ,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_CNTRL0_SAMPLING_FREQ_176_4KHZ,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_CNTRL0_SAMPLING_FREQ_48_0KHZ,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_CNTRL0_SAMPLING_FREQ_96_0KHZ,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_CNTRL0_SAMPLING_FREQ_192_0KHZ,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_CNTRL0_SAMPLING_FREQ_UNKNOWN,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_DEBUG0,checkDispHdmiStatus_GT215,lw50" => 1, 
"LW_PDISP_AUDIO_DEBUG2,checkDispHdmiStatus_GT215,lw50" => 1,
"LW_PDISP_SOR_TEST_ATTACHED_FALSE,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_SOR_TEST_ACT_HEAD_OPMODE_SLEEP,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_SOR_TEST_ACT_HEAD_OPMODE_SNOOZE,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_SOR_TEST_ACT_HEAD_OPMODE_AWAKE,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_PIOR_TEST_ATTACHED_FALSE,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_PIOR_TEST_ACT_HEAD_OPMODE_SLEEP,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_PIOR_TEST_ACT_HEAD_OPMODE_SNOOZE,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_PIOR_TEST_ACT_HEAD_OPMODE_AWAKE,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_DAC_TEST_ATTACHED_FALSE,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_DAC_TEST_ACT_HEAD_OPMODE_SLEEP,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_DAC_TEST_ACT_HEAD_OPMODE_SNOOZE,checkDispOrStatus_GT215,lw50" => 1, 
"LW_PDISP_DAC_TEST_ACT_HEAD_OPMODE_AWAKE,checkDispOrStatus_GT215,lw50" => 1, 

"LW_PTRIM_MPLLA_CFG,clkGetMClkFreqKHz_GT215,igt21a" => 1, 
"LW_PTRIM_MPLLA_COEFF,clkGetMClkFreqKHz_GT215,igt21a" => 1,
"LW_PPWR_PMU_MUTEX__SIZE_1,pmuMutexGetNum_GT215,igt21a" => 1,
"LW_PTRIM_ONESRC_NAMEMAP_INDEX_REF_MPLLA,clkGetMClkFreqKHz_GT215,igt21a" => 1,
"LW_XVE_AER_UNCORR_ERR,pmuSanityTest_CheckImage_GT215,igt21a" => 1,

# These registers are conditionally skipped on gf100
"LW_PGRAPH_PRI_GPC0_TPC0_SM_HALFCTL_CTRL_SCTL_READ_QUAD_CTL,grDumpTpcInfo_GK104,gf100" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_SM_HALFCTL_CTRL_SCTL_READ_QUAD_CTL_0,grDumpTpcInfo_GK104,gf100" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_SM_HALFCTL_CTRL_SCTL_READ_QUAD_CTL_1,grDumpTpcInfo_GK104,gf100" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_SM_HALFCTL_CTRL_SCTL_READ_QUAD_CTL_INIT,grDumpTpcInfo_GK104,gf100" => 1,
"LW_PDISP_UPSTREAM_HDCP_CMODE_INDEX_SOR,dispHdcpGetApIndex,gf100" => 1,
"LW_PDISP_UPSTREAM_HDCP_CMODE_INDEX_DAC,dispHdcpGetApIndex,gf100" => 1,
"LW_PDISP_UPSTREAM_HDCP_CMODE_INDEX_PIOR,dispHdcpGetApIndex,gf100" => 1,
"LW_UDISP_DSI_CHN_ARMED_BASEADR,dispHdcpGetApIndex,gf100" => 1,
"LW_UDISP_DSI_CHN_ARMED_BASEADR,dispHdcpGetOrOwner,gf100" => 1,

# These registers are conditionally skipped on gk106
"LW_PMSVLD_PRI_MEMDAT,msdecGetInfo_G98,gk106" => 1,
"LW_PMSVLD_PRI_MEMCTL,msdecGetInfo_G98,gk106" => 1,
"LW_PMSPDEC_PRI_MEMDAT,msdecGetInfo_G98,gk106" => 1,
"LW_PMSPDEC_PRI_MEMCTL,msdecGetInfo_G98,gk106" => 1,
"LW_PMSPPP_PRI_MEMDAT,msdecGetInfo_G98,gk106" => 1,
"LW_PMSPPP_PRI_MEMCTL,msdecGetInfo_G98,gk106" => 1,
"LW_PMSPDEC_PRI_MEMCTL_ADDR,msdecGetInfo_G98,gk106" => 1,
"LW_PMSPDEC_PRI_MEMCTL_READ,msdecGetInfo_G98,gk106" => 1,
"LW_PMSVLD_PRI_MEMCTL_IMEM,msdecGetInfo_G98,gk106" => 1,
"LW_PMSVLD_FBIF_CTXDMA__SIZE_1,getMSVLDPriv_G98,gk106" => 1,
"LW_PMSVLD_FBIF_CTXDMA,getMSVLDPriv_G98,gk106" => 1,
"LW_PMSPPP_FBIF_CTXDMA__SIZE_1,getMSPPPPriv_G98,gk106" => 1,
"LW_PMSPPP_FBIF_CTXDMA,getMSPPPPriv_G98,gk106" => 1,
"LW_PMSPDEC_FBIF_CTXDMA__SIZE_1,getMSPDECPriv_G98,gk106" => 1,
"LW_PMSPDEC_FBIF_CTXDMA,getMSPDECPriv_G98,gk106" => 1,
"LW_PMSPDEC_PRI_ADDR,getMSPDECPriv_G98,gk106" => 1,
"LW_PMSVLD_PRI_MEMCTL,testMsvldState_GT215,gk106" => 1,
"LW_PMSPDEC_PRI_MEMCTL,testMspdecState_GT215,gk106" => 1,
"LW_PMSPPP_PRI_MEMCTL,testMspppState_GT215,gk106" => 1,
"LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,gk106" => 1,
"LW_PGRAPH_EXCEPTION_CWD_PENDING,_dumpPgraphExceptionsState_GF100,gk106" => 1,
"LW_PGRAPH_PRI_CWD_HWW_ESR,_dumpPgraphExceptionsState_GF100,gk106" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GRED,_dumpTPCL1CExceptionState_GF100,gk106" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GATOM,_dumpTPCL1CExceptionState_GF100,gk106" => 1,

# These registers are conditionally skipped on gk208
"LW_PMSVLD_PRI_MEMDAT,msdecGetInfo_G98,gk208" => 1,
"LW_PMSVLD_PRI_MEMCTL,msdecGetInfo_G98,gk208" => 1,
"LW_PMSPDEC_PRI_MEMDAT,msdecGetInfo_G98,gk208" => 1,
"LW_PMSPDEC_PRI_MEMCTL,msdecGetInfo_G98,gk208" => 1,
"LW_PMSPPP_PRI_MEMDAT,msdecGetInfo_G98,gk208" => 1,
"LW_PMSPPP_PRI_MEMCTL,msdecGetInfo_G98,gk208" => 1,
"LW_PMSPDEC_PRI_MEMCTL_ADDR,msdecGetInfo_G98,gk208" => 1,
"LW_PMSPDEC_PRI_MEMCTL_READ,msdecGetInfo_G98,gk208" => 1,
"LW_PMSVLD_PRI_MEMCTL_IMEM,msdecGetInfo_G98,gk208" => 1,
"LW_PMSVLD_FBIF_CTXDMA__SIZE_1,getMSVLDPriv_G98,gk208" => 1,
"LW_PMSVLD_FBIF_CTXDMA,getMSVLDPriv_G98,gk208" => 1,
"LW_PMSPPP_FBIF_CTXDMA__SIZE_1,getMSPPPPriv_G98,gk208" => 1,
"LW_PMSPPP_FBIF_CTXDMA,getMSPPPPriv_G98,gk208" => 1,
"LW_PMSPDEC_FBIF_CTXDMA__SIZE_1,getMSPDECPriv_G98,gk208" => 1,
"LW_PMSPDEC_FBIF_CTXDMA,getMSPDECPriv_G98,gk208" => 1,
"LW_PMSPDEC_PRI_ADDR,getMSPDECPriv_G98,gk208" => 1,
"LW_PMSVLD_PRI_MEMCTL,testMsvldState_GT215,gk208" => 1,
"LW_PMSPDEC_PRI_MEMCTL,testMspdecState_GT215,gk208" => 1,
"LW_PMSPPP_PRI_MEMCTL,testMspppState_GT215,gk208" => 1,
"LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,gk208" => 1,
"LW_PGRAPH_EXCEPTION_CWD_PENDING,_dumpPgraphExceptionsState_GF100,gk208" => 1,
"LW_PGRAPH_PRI_CWD_HWW_ESR,_dumpPgraphExceptionsState_GF100,gk208" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GRED,_dumpTPCL1CExceptionState_GF100,gk208" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GATOM,_dumpTPCL1CExceptionState_GF100,gk208" => 1,
"LW_PFIFO_ENGINE_GRCOPY,fifoCheckEngStates_GK104,gk208" => 1,
"LW_PFIFO_ENGINE_MSENC,fifoCheckEngStates_GK104,gk208" => 1,
"LW_PFIFO_LB_RAM_ADDR,fifoGetLBInfo_GF100,gk208" => 1,
"LW_PFIFO_LB_RAM_DATA,fifoGetLBInfo_GF100,gk208" => 1,

# These registers are skipped on gm107 to remove mcheck errors to help enable mcheck protection for lwwatch in DVS.
# They will eventually need to be fixed.
"LW_PMSVLD_PRI_MEMCTL,testMsvldState_GT215,gm107" => 1,
"LW_PMSPDEC_PRI_MEMCTL,testMspdecState_GT215,gm107" => 1,
"LW_PMSPPP_PRI_MEMCTL,testMspppState_GT215,gm107" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_TEX_TRM_DBG,_grGetTexParityCounts,gm107" => 1,
"LW_PFIFO_LB_RAM_ADDR,fifoGetLBInfo_GF100,gm107" => 1,
"LW_PFIFO_LB_RAM_DATA,fifoGetLBInfo_GF100,gm107" => 1,
"LW_PFIFO_ENGINE_GRAPHICS,grPrintEngineGraphicsStatus_GK104,gm107" => 1,
"printVldBitErrorCode_GT215,gm107" => "LW_PMSVLD_VLD_\\w*",
"testMsvldState_GT215,gm107" => "LW_PMSVLD_\\w*",
"dumpPriFeSemaphoreState_GF100,gm107" => "LW_PGRAPH_PRI_FE_SEMAPHORE_STATE_D_\\w*",
"LW_PGRAPH_PRI_FE_SEMAPHORE_ACQUIRE_1,dumpFeSemaphoreAcquireState_GK104,gm107" => 1,

# L2 space restructure moved these registers for Maxwell. Adding exceptions until fixed.
"LW_PLTCG_LTCS_LTSS_TSTG_SET_MGMT_2,fbTest_GF100,gm107" => 1,
"LW_PLTCG_LTCS_LTSS_TSTG_SET_MGMT_2,fbTest_GF100,gm200" => 1,
"fbL2IlwalEvict_GF100,gm107" => "LW_PLTCG_LTC\\w*",
"fbL2IlwalEvict_GF100,gm200" => "LW_PLTCG_LTC\\w*",
"fbL2State_GF100,gm107" => "LW_PLTCG_LTC\\w*",
"fbReadL2ColorZBCindex_GF100,gm107" => "LW_PLTCG_LTCS_LTSS_DSTG_ZBC_\\w*",
"fbReadL2DepthZBCindex_GF100,gm107" => "LW_PLTCG_LTCS_LTSS_DSTG_ZBC_\\w*",
"fbReadL2ColorZBCindex_GF100,gm200" => "LW_PLTCG_LTCS_LTSS_DSTG_ZBC_\\w*",
"fbReadL2DepthZBCindex_GF100,gm200" => "LW_PLTCG_LTCS_LTSS_DSTG_ZBC_\\w*",
"LW_LTS_PRI_STRIDE,fbL2State_GK104,gm107" => 1,
"LW_LTS_PRI_STRIDE,fbIsMemReq_GK104,gm107" => 1,
"fbL2State_GK104,gm107" => "LW_PLTCG_\\w*",
"fbIsMemReq_GK104,gm107" => "LW_PLTCG_\\w*",
"dumpFeSemaphoreAcquireState_GF100,gm107" => "LW_PGRAPH_PRI_FE_SEMAPHORE_\\w*",
"_dumpTPCL1CExceptionState_GF100,gm107" => "LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_\\w*",

# These registers are skipped on gm200 to remove mcheck errors to help enable mcheck protection for lwwatch in DVS.
# They will eventually need to be fixed.
"LW_PGRAPH_PRI_GPC0_TPC0_TEX_TRM_DBG,_grGetTexParityCounts,gm200" => 1,
"LW_PFIFO_LB_RAM_ADDR,fifoGetLBInfo_GF100,gm200" => 1,
"LW_PFIFO_LB_RAM_DATA,fifoGetLBInfo_GF100,gm200" => 1,
"LW_HOST_NUM_PBDMA,fifoGetNumPbdma_GK208,gm200"  => 1,
"instmemGetRamfcFormattedMemory_GK208,gm200" => "LW_RAMFC_\\w*",
"LW_PCCSR_CHANNEL__SIZE_1,fifoGetNumChannels_GM107,gm200" => 1,
"LW_PFIFO_ENG_RUNLIST_BASE__SIZE_1,fifoGetEngRunlistBaseSize_GM107,gm200" => 1,
"LW_PFIFO_ENGINE_STATUS__SIZE_1,fifoGetNumEng_GM107,gm200" => 1,
"dumpFeSemaphoreAcquireState_GF100,gm200" => "LW_PGRAPH_PRI_FE_SEMAPHORE_\\w*",
"_dumpTPCL1CExceptionState_GF100,gm200" => "LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_\\w*",
"LW_PFIFO_ENGINE_GRAPHICS,grPrintEngineGraphicsStatus_GK104,gm200" => 1,
"printVldBitErrorCode_GT215,gm200" => "LW_PMSVLD_VLD_\\w*",
"testMsvldState_GT215,gm200" => "LW_PMSVLD_\\w*",
"dumpPriFeSemaphoreState_GF100,gm200" => "LW_PGRAPH_PRI_FE_SEMAPHORE_STATE_D_\\w*",
"LW_PGRAPH_PRI_FE_SEMAPHORE_ACQUIRE_1,dumpFeSemaphoreAcquireState_GK104,gm200" => 1,

# These registers are used by msdec and msdecstate extensions. We have now moved to lwdec. Adding exceptions for now.
"testMspdecState_GT215,gm107" => "LW_PMSPDEC_\\w*",
"testMspdecState_GT215,gm200" => "LW_PMSPDEC_\\w*",
"testMspppState_GT215,gm107" => "LW_PMSPPP_\\w*",
"testMspppState_GT215,gm200" => "LW_PMSPPP_\\w*",

# These registers are used by grState extension. Adding exceptions until fixed.
"LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,gm107" => 1,
"LW_PGRAPH_EXCEPTION_CWD_PENDING,_dumpPgraphExceptionsState_GF100,gm107" => 1,
"LW_PGRAPH_PRI_CWD_HWW_ESR,_dumpPgraphExceptionsState_GF100,gm107" => 1,
"LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,gm200" => 1,
"LW_PGRAPH_EXCEPTION_CWD_PENDING,_dumpPgraphExceptionsState_GF100,gm200" => 1,
"LW_PGRAPH_PRI_CWD_HWW_ESR,_dumpPgraphExceptionsState_GF100,gm200" => 1,
"LW_PGRAPH_PRI_GPC0_GCC_BAD_TEX_HDR_INDEX,_dumpGCCExceptionState_GF100,gm107" => 1,
"LW_PGRAPH_PRI_GPC0_GCC_BAD_TEX_SMP_INDEX,_dumpGCCExceptionState_GF100,gm107" => 1,
"LW_PGRAPH_PRI_GPC0_GCC_BAD_TEX_HDR_INDEX,_dumpGCCExceptionState_GF100,gm200" => 1,
"LW_PGRAPH_PRI_GPC0_GCC_BAD_TEX_SMP_INDEX,_dumpGCCExceptionState_GF100,gm200" => 1,

# LW_FALCON_FECS_BASE is undefined gf119 onwards. Adding temporary exception.
"LW_FALCON_FECS_BASE,fecsGetFalconBase_GF100" => 1,

# following register is undefined for G8X/G9X
"LW_MMU_PDE_TYPE_16K,pteIndexFromVirtualAndPde" => 1,
"LW_MMU_PDE_TYPE_16K,vmemBeginBar1Mapping_LW50" => 1,

#following registers are for gf11x
"LW_PFIFO_ENGINE_STATUS__SIZE_1,__dumpEngStates" => 1,
"LW_PFIFO_ENGINE_STATUS__SIZE_1,checkEngStates" => 1,

# g98 file includes multiple chips manuals. Should be fixed.
"msdecg98.c,gt215/dev_msvld_pri.h" => 1,
"msdecg98.c,gt215/dev_mspdec_pri.h" => 1,
"msdecg98.c,gt215/dev_msppp_pri.h" => 1,

# gt216 manuals accessed from lw50 file. Should be fixed 
"mmulw50.c,gt216/dev_mmu.h" => 1,

# Possibly an mcheck bug? computeGetInfo doesn't reference these regs...
# Affected chips: lw50, g84, g86, g94, g96, gt200
"LW_PMSVLD_PRI_PC,computeGetInfo_LW50" => 1,
"LW_PMSVLD_PRI_SP,computeGetInfo_LW50" => 1,
"LW_PMSPDEC_PRI_PC,computeGetInfo_LW50" => 1,
"LW_PMSPDEC_PRI_SP,computeGetInfo_LW50" => 1,
"LW_PMSPPP_PRI_PC,computeGetInfo_LW50" => 1,
"LW_PMSPPP_PRI_SP,computeGetInfo_LW50" => 1,

# t124 only uses clkGetClkSrcFreqKHz_GF100 for GPCPLL
"clkGetSppllFreqKHz_GF100,t124" => "LW_PVTRIM_SYS_SPPLL\\w*",
"_clkGetOneSrcPllFreq_FERMI,t124" => "LW_PDISP_CLK_REM_VPLL_SETUP_CONTROL\\w*",
"_clkIsVclk_GF100,t124" => "LW_PVTRIM_CLK_NAMEMAP_INDEX_VCLK\\w*",
"clkReadAltSrcDIV_GF100,t124" => "LW_PTRIM_SYS_\\w*",
"_clkReadRefSrcDIV_GF100,t124" => "LW_PTRIM_SYS_\\w*",
"clkGetClkSrcFreqKHz_GF100,t124" => "LW_PEXTDEV_BOOT_0_STRAP_CRYSTAL\\w*",
"LW_PVTRIM_PLL_NAMEMAP_INDEX_VPLL,_clkReadRefSrcDIV_GF100,t124" => 1,
"LW_PVTRIM_SYS_VCLK_REF_LDIV,_clkReadRefSrcDIV_GF100,t124" => 1,
"LW_PFB_FBPA_FBIO_BROADCAST,_clkIsClockDrivenfromBYPASS_GF100,t124" => 1,
"LW_PFB_FBPA_FBIO_BROADCAST_DDR_MODE,_clkIsClockDrivenfromBYPASS_GF100,t124" => 1,
"LW_PFB_FBPA_FBIO_BROADCAST_DDR_MODE_GDDR5,_clkIsClockDrivenfromBYPASS_GF100,t124" => 1,
"LW_PVTRIM_SYS_STATUS_SEL_VCO,_clkIsClockDrivenfromBYPASS_GF100,t124" => 1,
"LW_PVTRIM_CLK_NAMEMAP_INDEX_DISPCLK,_clkIsClockDrivenfromBYPASS_GF100,t124" => 1,
"LW_PVTRIM_CLK_NAMEMAP_INDEX_AZA2BITCLK,_clkIsClockDrivenfromBYPASS_GF100,t124" => 1,
"LW_PVTRIM_CLK_NAMEMAP_INDEX_SPDIFCLK,_clkIsClockDrivenfromBYPASS_GF100,t124" => 1,
"LW_PTRIM_SYS_LTCPLL_CFG,_clkReadSysCoreRegOffset_GF100,t124" => 1,
"LW_PTRIM_SYS_LTCPLL_COEFF,_clkReadSysCoreRegOffset_GF100,t124" => 1,
"LW_PVTRIM_PLL_NAMEMAP_INDEX_SPPLL0,_clkReadSysCoreRegOffset_GF100,t124" => 1,
"LW_PVTRIM_SYS_SPPLL0_CFG,_clkReadSysCoreRegOffset_GF100,t124" => 1,
"LW_PVTRIM_SYS_SPPLL0_COEFF,_clkReadSysCoreRegOffset_GF100,t124" => 1,
"LW_PVTRIM_PLL_NAMEMAP_INDEX_SPPLL1,_clkReadSysCoreRegOffset_GF100,t124" => 1,
"LW_PVTRIM_SYS_SPPLL1_CFG,_clkReadSysCoreRegOffset_GF100,t124" => 1,
"LW_PVTRIM_SYS_VCLK_OUT,_clkReadSysCoreRegOffset_GF100,t124" => 1,
"LW_PTRIM_SYS_LTC2CLK_OUT,_clkReadSysCoreRegOffset_GF100,t124" => 1,
"LW_PTRIM_SYS_CLK_CNTR_NCLTCPLL_CFG,configFreqCounter,t124" => 1,
#"LW_FALCON_MSENC_BASE,msencTestState_v02_00,t124" => 1,
# Copied from GK104
# T124 values changed names slightly (_MEMBAR_GRP_0/1)
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GRED,_dumpTPCL1CExceptionState_GF100,t124" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_L1C_HWW_ESR_REQ_OPCODE_GATOM,_dumpTPCL1CExceptionState_GF100,t124" => 1,
"LW_PGRAPH_EXCEPTION_EN_CWD_DISABLED,_dumpPgraphExceptionsState_GF100,t124" => 1,
"LW_PGRAPH_EXCEPTION_CWD_PENDING,_dumpPgraphExceptionsState_GF100,t124" => 1,
"LW_PGRAPH_PRI_CWD_HWW_ESR,_dumpPgraphExceptionsState_GF100,t124" => 1,

# Temporary exceptions...
"LW_PVTRIM_SYS_DISPCLK_OUT_SWITCH,clkGetInputSelReg_GF100,gm200" => 1,
"LW_PVTRIM_SYS_DISPCLK_OUT_LDIV,clkGetDividerRegOffset_GF100,gm200" => 1,
"LW_PDISP_ISOHUB_MISC_CTL,elpgPowerUp_GK104,t124" => 1,
"LW_PPWR_PMU_PG_PGOFF_ENG__SIZE_1,elpgPowerUp_GK104,t124" => 1,
"LW_PDISP_ISOHUB_MISC_CTL,elpgStart_GK104,t124" => 1,
);
