//---------------------------------
// Original vertex shader
//  Modified from %GWSAMPLES%/applications/lwn/ScreenSpaceAA/assets/src_shaders/cmaac_processZShapeC.glsl
//---------------------------------
//#version 440 core
//#extension GL_LW_gpu_shader5 : require
//
//// half-precision float will cause some quality loss, use with caution.
//#define USE_HALF_FLOAT 0
//#include "half_prec.h"
//
//#define SETTINGS_ALLOW_SHORT_Zs
//
//struct CMAAConstants
//{
//	vec4   LumWeights;                         // .rgb - luminance weight for each colour channel; .w unused for now (maybe will be used for gamma correction before edge detect)
//
//	float  ColorThreshold;                     // for simple edge detection
//	float  DepthThreshold;                     // for depth (unused at the moment)
//	float  NonDominantEdgeRemovalAmount;       // how much non-dominant edges to remove
//	float  Dummy0;
//
//	vec2   OneOverScreenSize;
//	int    ScreenWidth;
//	int    ScreenHeight;
//
//	vec4   DebugZoomTool;
//};
//
//layout(std140, binding = 0) uniform B0
//{
//	CMAAConstants g_CMAA;
//};
//
////layout(binding = 0) uniform sampler2D g_copyPixelsTex;
//
//layout(binding = 0, rgba8) uniform writeonly image2D g_screenImg;
////layout(binding = 1, rgba8) uniform readonly image2D g_copyPixelsImg;
//
//layout(binding = 0) uniform sampler2D g_copyPixelsTex;	 // color buffer (only around edges)
//layout(binding = 2) uniform usampler2D g_packedEdgesTex;
//layout(binding = 3) uniform isampler2D g_edgePosStorageTex;
//layout(binding = 4) uniform isampler1D g_edgeCounterTex;
//layout(binding = 5) uniform isampler2D g_zShapeStorageTex;
//
//
//#define THREAD_GROUP_DIM_X 16
//#define THREAD_GROUP_DIM_Y 8
//layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
//
//const uint c_maxLineLength = 64;
//
//void FindLineLength(out uint lineLengthLeft, out uint lineLengthRight, in ivec2 screenPos, in bool horizontal, in bool ilwertedZShape, in ivec2 stepRight)
//{
//	/////////////////////////////////////////////////////////////////////////////////////////////////////////
//	// TODO: there must be a cleaner and faster way to get to these - a precallwlated array indexing maybe?
//	uint maskLeft, bitsContinueLeft, maskRight, bitsContinueRight;
//	{
//		// Horizontal (vertical is the same, just rotated 90?counter-clockwise)
//		// Ilwerted Z case:              // Normal Z case:
//		//   __                          // __
//		//  X|                           //  X|
//		// __                            //   __
//		uint maskTraceLeft, maskTraceRight;
//		uint maskStopLeft, maskStopRight;
//		if (horizontal)
//		{
//			if (ilwertedZShape)
//			{
//				maskTraceLeft = 0x02; // tracing bottom edge
//				maskTraceRight = 0x08; // tracing top edge
//			}
//			else
//			{
//				maskTraceLeft = 0x08; // tracing top edge
//				maskTraceRight = 0x02; // tracing bottom edge
//			}
//			maskStopLeft = 0x01; // stop on right edge
//			maskStopRight = 0x04; // stop on left edge
//		}
//		else
//		{
//			if (ilwertedZShape)
//			{
//				maskTraceLeft = 0x01; // tracing right edge
//				maskTraceRight = 0x04; // tracing left edge
//			}
//			else
//			{
//				maskTraceLeft = 0x04; // tracing left edge
//				maskTraceRight = 0x01; // tracing right edge
//			}
//			maskStopLeft = 0x08; // stop on top edge
//			maskStopRight = 0x02; // stop on bottom edge
//		}
//
//		maskLeft = maskTraceLeft | maskStopLeft;
//		bitsContinueLeft = maskTraceLeft;
//		maskRight = maskTraceRight | maskStopRight;
//		bitsContinueRight = maskTraceRight;
//	}
//	/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	uint stopLimiter = c_maxLineLength * 2;
//#ifdef SETTINGS_ALLOW_SHORT_Zs
//	uint i = 1;
//#else
//	uint i = 2; // starting from 2 because we already know it's at least 2...
//#endif
//
//	lineLengthLeft = lineLengthRight = c_maxLineLength;
//
//	for (; i < c_maxLineLength; i++)
//	{
//		uint edgeLeft = texelFetch(g_packedEdgesTex, ivec2(screenPos.xy - stepRight * i), 0).x;
//		uint edgeRight = texelFetch(g_packedEdgesTex, ivec2(screenPos.xy + stepRight * (i + 1)), 0).x;
//
//		// stop on encountering 'stopping' edge (as defined by masks)
//		//bool stopLeft  = ( (edgeLeft & maskStopLeft) != 0   ) || ( (edgeLeft & maskTraceLeft) == 0 );
//		//bool stopRight = ( (edgeRight & maskStopRight) != 0 ) || ( (edgeRight & maskTraceRight) == 0 );
//		bool stopLeft = (edgeLeft & maskLeft) != bitsContinueLeft;
//		bool stopRight = (edgeRight & maskRight) != bitsContinueRight;
//
//		if (stopLeft || stopRight)
//		{
//			lineLengthLeft = 1 + i;
//			if (stopLeft)
//				lineLengthLeft -= 1;
//
//			lineLengthRight = 1 + i;
//			if (stopRight)
//				lineLengthRight -= 1;
//
//			break;
//		}
//	}
//
//}
//
//void ProcessDetectedZ(ivec2 screenPos, bool horizontal, bool ilwertedZShape)
//{
//	uint lineLengthLeft, lineLengthRight;
//
//	const ivec2 stepRight = (horizontal) ? (ivec2(1, 0)) : (ivec2(0, 1));
//	const vec2 blendDir = (horizontal) ? (vec2(0, 1)) : (vec2(-1, 0));
//	ivec2 blendDirI = (horizontal) ? (ivec2(0, 1)) : (ivec2(-1, 0));
//	if (ilwertedZShape)
//		blendDirI = -blendDirI;
//
//	FindLineLength(lineLengthLeft, lineLengthRight, screenPos, horizontal, ilwertedZShape, stepRight);
//
//	vec2 pixelSize = g_CMAA.OneOverScreenSize;
//
//	float leftOdd = 0.15 * float(lineLengthLeft % 2);
//	float rightOdd = 0.15 * float(lineLengthRight % 2);
//
//	int loopFrom = -(int)((lineLengthLeft + 1) / 2) + 1;
//	int loopTo = (int)((lineLengthRight + 1) / 2);
//
//	float totalLength = (float)(loopTo - loopFrom) + 1.0 - leftOdd - rightOdd;
//
//	for (int i = loopFrom; i <= loopTo; i++)
//	{
//		ivec2	pixelPos = screenPos + stepRight * i;
//		vec2	pixelPosFlt = vec2(pixelPos.x + 0.5, pixelPos.y + 0.5);
//
//		float m = (float(i) + 0.5 - leftOdd - float(loopFrom)) / totalLength;
//		m = clamp(m, 0.0, 1.0);
//		float k = m;
//		if (i > 0)
//			k -= 1.0;
//
//#if 1
//		k = (ilwertedZShape) ? (-k) : (k);
//		vec4 outCol = textureLod(g_copyPixelsTex, vec2(pixelPosFlt + blendDir * k) * pixelSize, 0.0); // sampling with Linear filtering.
//#else
//		vec4 cCol = imageLoad(g_copyPixelsImg, screenPos);
//		vec4 bCol = imageLoad(g_copyPixelsImg, screenPos + blendDirI);
//		vec4 outCol = mix(cCol, bCol, k);
//#endif
//
//		//WAR
//		outCol.a = 1.0;
//
//		imageStore(g_screenImg, pixelPos, outCol.rgba);
//	}
//}
//
//void main()
//{
//	uint zCount = texelFetch(g_edgeCounterTex, 1, 0).x;
//
//	ivec2 pos = (ivec2)gl_GlobalIlwocationID.xy;
//
//	for (;;) { 
//		if (zCount <= (pos.y * 64 * THREAD_GROUP_DIM_X + (pos.x & 0xFFFFFFC0)))
//			return;
//
//		if (zCount > pos.y * 64 * THREAD_GROUP_DIM_X + pos.x) {
//			ivec4 zInfo = texelFetch(g_zShapeStorageTex, pos, 0);
//			ProcessDetectedZ(zInfo.xy, (bool)zInfo.z, (bool)zInfo.w);
//			// this is just for a test to visualize thread invocation.
////			imageStore(g_screenImg, zInfo.xy, vec4(1, 0, 0, 1));
//		}
//
//		pos.y += THREAD_GROUP_DIM_Y;
//	}
//}

//---------------------------------
// Compiled data
//---------------------------------
static const size_t cmaacProcessZShapeC_computeControlDataSize = 6088;
static const uint8_t cmaacProcessZShapeC_computeControlData[cmaacProcessZShapeC_computeControlDataSize] __attribute__((aligned(8))) = {
    0x34, 0x12, 0x76, 0x98, 0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 
    0x48, 0x08, 0x00, 0x00, 0x79, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x17, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0xCF, 0x41, 0xEC, 0x42, 0x41, 0x5A, 0x57, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x02, 0x20, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xEA, 0xF2, 0x09, 0x0E, 0x03, 0x28, 0xD2, 0xBD, 0x26, 0xBA, 0x10, 0xF2, 0xEF, 0xDC, 0xE9, 0xC4, 0xFA, 0x85, 0xFD, 0xDD, 
    0x32, 0xEB, 0x2F, 0xE4, 0xC8, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 
    0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x05, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x21, 0x21, 0x4E, 0x56, 0x63, 0x70, 0x35, 0x2E, 0x30, 0x0A, 0x4F, 0x50, 0x54, 0x49, 0x4F, 0x4E, 0x20, 0x4E, 0x56, 0x5F, 
    0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x3B, 0x0A, 0x4F, 0x50, 0x54, 0x49, 0x4F, 0x4E, 0x20, 0x4E, 0x56, 0x5F, 
    0x67, 0x70, 0x75, 0x5F, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x5F, 0x66, 0x70, 0x36, 0x34, 0x3B, 0x0A, 0x4F, 0x50, 
    0x54, 0x49, 0x4F, 0x4E, 0x20, 0x4E, 0x56, 0x5F, 0x62, 0x69, 0x6E, 0x64, 0x6C, 0x65, 0x73, 0x73, 0x5F, 0x74, 0x65, 0x78, 
    0x74, 0x75, 0x72, 0x65, 0x3B, 0x0A, 0x47, 0x52, 0x4F, 0x55, 0x50, 0x5F, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x36, 0x34, 0x3B, 
    0x0A, 0x43, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x20, 0x62, 0x75, 0x66, 0x30, 0x5B, 0x5D, 0x20, 0x3D, 0x20, 0x7B, 0x20, 
    0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x2E, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5B, 0x30, 0x5D, 0x20, 0x7D, 0x3B, 
    0x0A, 0x43, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x20, 0x62, 0x75, 0x66, 0x31, 0x34, 0x5B, 0x5D, 0x20, 0x3D, 0x20, 0x7B, 
    0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x2E, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5B, 0x31, 0x34, 0x5D, 0x20, 
    0x7D, 0x3B, 0x0A, 0x54, 0x45, 0x4D, 0x50, 0x20, 0x52, 0x30, 0x2C, 0x20, 0x52, 0x31, 0x2C, 0x20, 0x52, 0x32, 0x2C, 0x20, 
    0x52, 0x33, 0x2C, 0x20, 0x52, 0x34, 0x2C, 0x20, 0x52, 0x35, 0x3B, 0x0A, 0x4C, 0x4F, 0x4E, 0x47, 0x20, 0x54, 0x45, 0x4D, 
    0x50, 0x20, 0x44, 0x30, 0x3B, 0x0A, 0x54, 0x45, 0x4D, 0x50, 0x20, 0x54, 0x3B, 0x0A, 0x54, 0x45, 0x4D, 0x50, 0x20, 0x52, 
    0x43, 0x3B, 0x0A, 0x53, 0x48, 0x4F, 0x52, 0x54, 0x20, 0x54, 0x45, 0x4D, 0x50, 0x20, 0x48, 0x43, 0x3B, 0x0A, 0x4C, 0x44, 
    0x43, 0x2E, 0x55, 0x36, 0x34, 0x20, 0x44, 0x30, 0x2E, 0x78, 0x2C, 0x20, 0x62, 0x75, 0x66, 0x31, 0x34, 0x5B, 0x33, 0x32, 
    0x5D, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x53, 0x20, 0x52, 0x30, 0x2E, 0x7A, 0x77, 0x2C, 0x20, 0x69, 0x6E, 0x76, 0x6F, 
    0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x69, 0x64, 0x2E, 0x78, 0x79, 0x78, 0x79, 
    0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x30, 0x2E, 0x79, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 
    0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x54, 0x58, 0x46, 0x2E, 0x53, 0x20, 0x52, 0x30, 0x2E, 0x78, 
    0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2C, 0x20, 0x68, 0x61, 0x6E, 0x64, 
    0x6C, 0x65, 0x28, 0x44, 0x30, 0x2E, 0x78, 0x29, 0x2C, 0x20, 0x31, 0x44, 0x3B, 0x0A, 0x52, 0x45, 0x50, 0x2E, 0x53, 0x20, 
    0x3B, 0x0A, 0x53, 0x45, 0x51, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 0x48, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x30, 0x2E, 
    0x79, 0x2C, 0x20, 0x7B, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x3B, 0x0A, 0x42, 0x52, 0x4B, 
    0x20, 0x28, 0x4E, 0x45, 0x2E, 0x78, 0x29, 0x3B, 0x0A, 0x41, 0x4E, 0x44, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 
    0x20, 0x52, 0x30, 0x2E, 0x7A, 0x2C, 0x20, 0x7B, 0x2D, 0x36, 0x34, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 
    0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x55, 0x4C, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x30, 0x2E, 
    0x77, 0x2C, 0x20, 0x7B, 0x36, 0x34, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x3B, 0x0A, 0x4D, 0x41, 
    0x44, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x2C, 0x20, 0x7B, 0x31, 0x36, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x3B, 0x0A, 0x53, 0x4C, 0x45, 0x2E, 0x55, 
    0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x30, 0x2C, 0x20, 0x52, 0x31, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 
    0x2E, 0x43, 0x43, 0x20, 0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x2D, 0x52, 0x31, 0x3B, 0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 
    0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x30, 0x2E, 0x79, 0x2C, 0x20, 0x7B, 0x30, 0x2C, 0x20, 
    0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x4D, 
    0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x30, 0x2E, 0x79, 0x3B, 0x0A, 
    0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x55, 0x4C, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 
    0x20, 0x52, 0x30, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 0x36, 0x34, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 
    0x3B, 0x0A, 0x4D, 0x41, 0x44, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x2C, 0x20, 0x7B, 0x31, 
    0x36, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2C, 0x20, 0x52, 0x30, 0x2E, 0x7A, 0x3B, 0x0A, 0x53, 
    0x47, 0x54, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x30, 0x2C, 0x20, 0x52, 0x31, 0x3B, 0x0A, 0x4D, 
    0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x2D, 0x52, 0x31, 0x3B, 0x0A, 0x49, 
    0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x79, 0x2C, 
    0x20, 0x52, 0x30, 0x2E, 0x7A, 0x77, 0x7A, 0x77, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x7A, 
    0x2C, 0x20, 0x7B, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4C, 0x44, 
    0x43, 0x2E, 0x55, 0x36, 0x34, 0x20, 0x44, 0x30, 0x2E, 0x78, 0x2C, 0x20, 0x62, 0x75, 0x66, 0x31, 0x34, 0x5B, 0x34, 0x30, 
    0x5D, 0x3B, 0x0A, 0x54, 0x58, 0x46, 0x2E, 0x53, 0x20, 0x52, 0x33, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x79, 0x7A, 0x7A, 
    0x2C, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x28, 0x44, 0x30, 0x2E, 0x78, 0x29, 0x2C, 0x20, 0x32, 0x44, 0x3B, 0x0A, 
    0x53, 0x4E, 0x45, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x33, 0x2E, 0x7A, 0x2C, 0x20, 0x7B, 0x30, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x53, 0x4E, 0x45, 0x2E, 0x53, 0x20, 
    0x52, 0x31, 0x2E, 0x7A, 0x2C, 0x20, 0x52, 0x33, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 0x52, 0x43, 0x2E, 
    0x78, 0x2C, 0x20, 0x2D, 0x52, 0x31, 0x2E, 0x79, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x78, 
    0x2C, 0x20, 0x2D, 0x52, 0x31, 0x2E, 0x79, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x34, 0x2E, 0x7A, 0x2C, 
    0x20, 0x2D, 0x52, 0x31, 0x3B, 0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x53, 
    0x20, 0x52, 0x34, 0x2E, 0x78, 0x79, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 
    0x3B, 0x0A, 0x45, 0x4C, 0x53, 0x45, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x53, 0x20, 0x52, 0x34, 0x2E, 0x78, 0x79, 0x2C, 
    0x20, 0x7B, 0x30, 0x2C, 0x20, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 0x49, 0x46, 
    0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x3B, 
    0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x46, 0x20, 0x52, 0x33, 0x2E, 0x7A, 
    0x77, 0x2C, 0x20, 0x7B, 0x30, 0x2C, 0x20, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x79, 0x78, 0x79, 
    0x3B, 0x0A, 0x45, 0x4C, 0x53, 0x45, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x46, 0x20, 0x52, 0x33, 0x2E, 0x7A, 0x77, 0x2C, 
    0x20, 0x7B, 0x2D, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x79, 0x78, 0x79, 0x3B, 
    0x0A, 0x45, 0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 0x52, 0x43, 0x2E, 
    0x78, 0x2C, 0x20, 0x52, 0x31, 0x3B, 0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 
    0x55, 0x2E, 0x43, 0x43, 0x20, 0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x34, 0x2E, 0x7A, 0x3B, 0x0A, 0x49, 0x46, 0x20, 
    0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 0x32, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 
    0x52, 0x35, 0x2E, 0x7A, 0x2C, 0x20, 0x7B, 0x38, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 
    0x3B, 0x0A, 0x45, 0x4C, 0x53, 0x45, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 0x77, 0x2C, 0x20, 
    0x7B, 0x38, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 
    0x55, 0x20, 0x52, 0x35, 0x2E, 0x7A, 0x2C, 0x20, 0x7B, 0x32, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 
    0x2E, 0x78, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 
    0x78, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 
    0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x7B, 0x34, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 
    0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x45, 0x4C, 0x53, 0x45, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 
    0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x34, 0x2E, 0x7A, 0x3B, 0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 
    0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 
    0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 0x7A, 0x2C, 
    0x20, 0x7B, 0x34, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x45, 0x4C, 0x53, 
    0x45, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 0x34, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 
    0x7A, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x45, 
    0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x7B, 0x38, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x31, 
    0x2E, 0x79, 0x2C, 0x20, 0x7B, 0x32, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 
    0x45, 0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x4F, 0x52, 0x2E, 0x55, 0x20, 0x52, 0x34, 0x2E, 0x77, 0x2C, 0x20, 0x52, 0x35, 
    0x2C, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x3B, 0x0A, 0x4F, 0x52, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 0x78, 0x2C, 0x20, 0x52, 
    0x35, 0x2E, 0x7A, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 
    0x79, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 
    0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 0x36, 0x34, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x32, 0x2E, 0x77, 0x2C, 0x20, 
    0x7B, 0x36, 0x34, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x52, 0x45, 0x50, 
    0x2E, 0x53, 0x20, 0x7B, 0x36, 0x33, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x3B, 0x0A, 0x4D, 0x41, 
    0x44, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x79, 0x2C, 0x20, 0x2D, 0x52, 0x34, 0x2C, 0x20, 0x52, 0x35, 0x2E, 0x79, 
    0x2C, 0x20, 0x52, 0x33, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x7A, 0x2C, 0x20, 0x7B, 0x30, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4C, 0x44, 0x43, 0x2E, 0x55, 0x36, 
    0x34, 0x20, 0x44, 0x30, 0x2E, 0x78, 0x2C, 0x20, 0x62, 0x75, 0x66, 0x31, 0x34, 0x5B, 0x31, 0x36, 0x5D, 0x3B, 0x0A, 0x54, 
    0x58, 0x46, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x79, 0x7A, 0x7A, 0x2C, 0x20, 
    0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x28, 0x44, 0x30, 0x2E, 0x78, 0x29, 0x2C, 0x20, 0x32, 0x44, 0x3B, 0x0A, 0x41, 0x44, 
    0x44, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x35, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 
    0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x41, 0x4E, 0x44, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x78, 
    0x2C, 0x20, 0x52, 0x31, 0x2C, 0x20, 0x52, 0x34, 0x2E, 0x77, 0x3B, 0x0A, 0x53, 0x4E, 0x45, 0x2E, 0x55, 0x20, 0x52, 0x31, 
    0x2E, 0x7A, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x35, 0x2E, 0x77, 0x3B, 0x0A, 0x4D, 0x41, 0x44, 0x2E, 
    0x55, 0x20, 0x52, 0x32, 0x2E, 0x78, 0x79, 0x2C, 0x20, 0x52, 0x34, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 
    0x33, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x53, 0x20, 0x52, 0x32, 0x2E, 0x7A, 0x2C, 0x20, 0x7B, 0x30, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x54, 0x58, 0x46, 0x2E, 0x55, 0x20, 0x52, 0x32, 0x2E, 
    0x78, 0x2C, 0x20, 0x52, 0x32, 0x2E, 0x78, 0x79, 0x7A, 0x7A, 0x2C, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x28, 0x44, 
    0x30, 0x2E, 0x78, 0x29, 0x2C, 0x20, 0x32, 0x44, 0x3B, 0x0A, 0x41, 0x4E, 0x44, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x79, 
    0x2C, 0x20, 0x52, 0x32, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x35, 0x2E, 0x78, 0x3B, 0x0A, 0x53, 0x4E, 0x45, 0x2E, 0x55, 0x20, 
    0x52, 0x32, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x35, 0x2E, 0x7A, 0x3B, 0x0A, 0x4F, 0x52, 
    0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 0x48, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x2D, 0x52, 0x31, 0x2E, 0x7A, 0x2C, 0x20, 0x2D, 
    0x52, 0x32, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x2D, 0x52, 0x31, 0x2E, 
    0x7A, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x2D, 0x52, 0x32, 0x2E, 0x78, 
    0x3B, 0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 
    0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x55, 0x20, 0x52, 0x32, 0x2E, 0x77, 
    0x2C, 0x20, 0x52, 0x35, 0x2E, 0x79, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 
    0x2E, 0x78, 0x3B, 0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x55, 0x20, 0x52, 
    0x32, 0x2E, 0x77, 0x2C, 0x20, 0x52, 0x32, 0x2C, 0x20, 0x2D, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 
    0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 
    0x43, 0x20, 0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x55, 0x20, 
    0x52, 0x31, 0x2E, 0x77, 0x2C, 0x20, 0x52, 0x35, 0x2E, 0x79, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x41, 0x44, 0x44, 
    0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x77, 0x2C, 0x20, 0x52, 0x31, 0x2C, 0x20, 0x2D, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 
    0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 
    0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x7D, 0x3B, 0x0A, 0x42, 0x52, 0x4B, 0x20, 0x28, 0x4E, 0x45, 0x2E, 0x78, 0x29, 0x3B, 0x0A, 0x45, 0x4E, 
    0x44, 0x49, 0x46, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x35, 0x2C, 
    0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 
    0x52, 0x45, 0x50, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x31, 0x2E, 
    0x77, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x44, 
    0x49, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x35, 0x2E, 0x77, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x7B, 0x32, 0x2C, 
    0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x55, 0x20, 0x52, 
    0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x32, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 
    0x20, 0x30, 0x7D, 0x3B, 0x0A, 0x44, 0x49, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x2C, 
    0x20, 0x7B, 0x32, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x41, 0x44, 0x44, 
    0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x2D, 0x52, 0x31, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 
    0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x7A, 0x2C, 0x20, 
    0x2D, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x35, 0x2E, 0x77, 0x3B, 0x0A, 0x49, 0x32, 0x46, 0x2E, 0x53, 0x20, 0x52, 
    0x32, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x7A, 0x3B, 0x0A, 0x4D, 0x4F, 0x44, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 
    0x79, 0x2C, 0x20, 0x52, 0x32, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 0x32, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 
    0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x49, 0x32, 0x46, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x31, 0x3B, 
    0x0A, 0x4D, 0x4F, 0x44, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x7A, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 
    0x32, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x55, 0x4C, 0x2E, 0x46, 
    0x33, 0x32, 0x20, 0x52, 0x35, 0x2E, 0x7A, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x7B, 0x30, 0x2E, 0x31, 0x35, 
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 
    0x0A, 0x41, 0x44, 0x44, 0x2E, 0x46, 0x33, 0x32, 0x20, 0x52, 0x31, 0x2E, 0x77, 0x2C, 0x20, 0x2D, 0x52, 0x35, 0x2E, 0x7A, 
    0x2C, 0x20, 0x52, 0x32, 0x2E, 0x78, 0x3B, 0x0A, 0x49, 0x32, 0x46, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 
    0x52, 0x31, 0x2E, 0x7A, 0x3B, 0x0A, 0x4D, 0x41, 0x44, 0x2E, 0x46, 0x33, 0x32, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 
    0x2D, 0x52, 0x31, 0x2C, 0x20, 0x7B, 0x30, 0x2E, 0x31, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x77, 0x3B, 0x0A, 0x41, 0x44, 0x44, 
    0x2E, 0x46, 0x33, 0x32, 0x20, 0x52, 0x35, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x31, 0x2C, 0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x53, 0x20, 0x52, 0x35, 0x2E, 
    0x78, 0x2C, 0x20, 0x52, 0x31, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x53, 0x20, 0x52, 0x34, 0x2E, 0x77, 0x2C, 0x20, 0x52, 
    0x31, 0x2E, 0x78, 0x3B, 0x0A, 0x52, 0x45, 0x50, 0x2E, 0x53, 0x20, 0x3B, 0x0A, 0x53, 0x47, 0x54, 0x2E, 0x53, 0x2E, 0x43, 
    0x43, 0x20, 0x48, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x34, 0x2E, 0x77, 0x2C, 0x20, 0x52, 0x35, 0x2E, 0x77, 0x3B, 0x0A, 
    0x42, 0x52, 0x4B, 0x20, 0x28, 0x4E, 0x45, 0x2E, 0x78, 0x29, 0x3B, 0x0A, 0x4D, 0x41, 0x44, 0x2E, 0x53, 0x20, 0x52, 0x32, 
    0x2E, 0x78, 0x79, 0x2C, 0x20, 0x52, 0x34, 0x2C, 0x20, 0x52, 0x34, 0x2E, 0x77, 0x2C, 0x20, 0x52, 0x33, 0x3B, 0x0A, 0x49, 
    0x32, 0x46, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x34, 0x2E, 0x77, 0x3B, 0x0A, 0x53, 0x47, 0x54, 
    0x2E, 0x53, 0x20, 0x52, 0x32, 0x2E, 0x7A, 0x2C, 0x20, 0x52, 0x34, 0x2E, 0x77, 0x2C, 0x20, 0x7B, 0x30, 0x2C, 0x20, 0x30, 
    0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 
    0x52, 0x43, 0x2E, 0x78, 0x2C, 0x20, 0x2D, 0x52, 0x32, 0x2E, 0x7A, 0x3B, 0x0A, 0x49, 0x32, 0x46, 0x2E, 0x53, 0x20, 0x52, 
    0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x32, 0x3B, 0x0A, 0x49, 0x32, 0x46, 0x2E, 0x53, 0x20, 0x52, 0x31, 0x2E, 0x7A, 0x2C, 
    0x20, 0x52, 0x35, 0x2E, 0x78, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x46, 0x33, 0x32, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 
    0x20, 0x52, 0x31, 0x2C, 0x20, 0x2D, 0x52, 0x35, 0x2E, 0x7A, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x46, 0x33, 0x32, 0x20, 
    0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x31, 0x2C, 0x20, 0x2D, 0x52, 0x31, 0x2E, 0x7A, 0x3B, 0x0A, 0x41, 0x44, 0x44, 
    0x2E, 0x46, 0x33, 0x32, 0x20, 0x52, 0x31, 0x2E, 0x7A, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x7B, 0x30, 0x2E, 
    0x35, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x49, 0x32, 0x46, 0x2E, 0x53, 
    0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x32, 0x2E, 0x79, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x46, 0x33, 0x32, 
    0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x31, 0x2C, 0x20, 0x7B, 0x30, 0x2E, 0x35, 0x2C, 0x20, 0x30, 0x2C, 0x20, 
    0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x44, 0x49, 0x56, 0x2E, 0x46, 0x33, 0x32, 0x2E, 0x53, 0x41, 0x54, 
    0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x31, 0x2C, 0x20, 0x52, 0x35, 0x2E, 0x79, 0x3B, 0x0A, 0x41, 0x44, 0x44, 
    0x2E, 0x46, 0x33, 0x32, 0x20, 0x52, 0x31, 0x2E, 0x77, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x7B, 0x30, 0x2E, 
    0x35, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x46, 
    0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x3B, 0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 
    0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x46, 0x33, 0x32, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x78, 
    0x2C, 0x20, 0x7B, 0x2D, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x45, 
    0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x2E, 0x43, 0x43, 0x20, 0x52, 0x43, 0x2E, 0x78, 0x2C, 
    0x20, 0x52, 0x34, 0x2E, 0x7A, 0x3B, 0x0A, 0x49, 0x46, 0x20, 0x4E, 0x45, 0x2E, 0x78, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 
    0x46, 0x20, 0x52, 0x32, 0x2E, 0x7A, 0x2C, 0x20, 0x2D, 0x52, 0x31, 0x2E, 0x79, 0x3B, 0x0A, 0x45, 0x4C, 0x53, 0x45, 0x3B, 
    0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x46, 0x20, 0x52, 0x32, 0x2E, 0x7A, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x79, 0x3B, 0x0A, 0x45, 
    0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x4D, 0x41, 0x44, 0x2E, 0x46, 0x33, 0x32, 0x20, 0x52, 0x31, 0x2E, 0x7A, 0x77, 0x2C, 
    0x20, 0x52, 0x33, 0x2C, 0x20, 0x52, 0x32, 0x2E, 0x7A, 0x2C, 0x20, 0x52, 0x31, 0x3B, 0x0A, 0x4C, 0x44, 0x43, 0x2E, 0x46, 
    0x33, 0x32, 0x58, 0x32, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x79, 0x2C, 0x20, 0x62, 0x75, 0x66, 0x30, 0x5B, 0x33, 0x32, 0x5D, 
    0x3B, 0x0A, 0x4D, 0x55, 0x4C, 0x2E, 0x46, 0x33, 0x32, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x79, 0x2C, 0x20, 0x52, 0x31, 0x2E, 
    0x7A, 0x77, 0x7A, 0x77, 0x2C, 0x20, 0x52, 0x31, 0x3B, 0x0A, 0x4C, 0x44, 0x43, 0x2E, 0x55, 0x36, 0x34, 0x20, 0x44, 0x30, 
    0x2E, 0x78, 0x2C, 0x20, 0x62, 0x75, 0x66, 0x31, 0x34, 0x5B, 0x30, 0x5D, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x46, 0x20, 
    0x52, 0x31, 0x2E, 0x7A, 0x2C, 0x20, 0x7B, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 
    0x3B, 0x0A, 0x54, 0x58, 0x4C, 0x2E, 0x46, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x79, 0x7A, 0x2C, 0x20, 0x52, 0x31, 0x2E, 0x78, 
    0x79, 0x7A, 0x7A, 0x2C, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x28, 0x44, 0x30, 0x2E, 0x78, 0x29, 0x2C, 0x20, 0x32, 
    0x44, 0x3B, 0x0A, 0x4C, 0x44, 0x43, 0x2E, 0x55, 0x36, 0x34, 0x20, 0x44, 0x30, 0x2E, 0x78, 0x2C, 0x20, 0x62, 0x75, 0x66, 
    0x31, 0x34, 0x5B, 0x32, 0x35, 0x36, 0x5D, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x46, 0x20, 0x52, 0x31, 0x2E, 0x77, 0x2C, 
    0x20, 0x7B, 0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x53, 0x54, 0x4F, 
    0x52, 0x45, 0x49, 0x4D, 0x2E, 0x46, 0x20, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x28, 0x44, 0x30, 0x2E, 0x78, 0x29, 0x2C, 
    0x20, 0x52, 0x31, 0x2C, 0x20, 0x52, 0x32, 0x2C, 0x20, 0x32, 0x44, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x46, 0x20, 0x52, 
    0x32, 0x2C, 0x20, 0x52, 0x31, 0x3B, 0x0A, 0x4D, 0x4F, 0x56, 0x2E, 0x55, 0x20, 0x52, 0x31, 0x2E, 0x78, 0x2C, 0x20, 0x52, 
    0x31, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x53, 0x20, 0x52, 0x34, 0x2E, 0x77, 0x2C, 0x20, 0x52, 0x34, 0x2C, 0x20, 0x7B, 
    0x31, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 0x52, 0x45, 
    0x50, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x41, 0x44, 0x44, 0x2E, 0x53, 0x20, 0x52, 0x30, 0x2E, 0x77, 
    0x2C, 0x20, 0x52, 0x30, 0x2C, 0x20, 0x7B, 0x38, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x30, 0x7D, 0x2E, 0x78, 
    0x3B, 0x0A, 0x45, 0x4E, 0x44, 0x49, 0x46, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 0x52, 0x45, 0x50, 0x3B, 0x0A, 0x45, 0x4E, 0x44, 
    0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
