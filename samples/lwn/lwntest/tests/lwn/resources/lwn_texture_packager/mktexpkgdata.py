#!/usr/bin/elw python3

# Copyright (c) 2020, LWPU CORPORATION.  All rights reserved.
#
# LWPU CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from LWPU CORPORATION is strictly prohibited.

import argparse
import os
import shutil
import subprocess
import sys
import tempfile


DESCRIPTION = """\
Produce the files g_lwn_texpkg_data.h and g_lwn_texpkg_astc_data.h by
processing image files with the texture packager, and then colwerting the
resulting archive a C++ byte array."""


ARCHIVES = {}


def addArchive(name, numImages, extraParams):
    """Add a a description of how to generate a named archive. By default source images
    are generated names based on the archive name and an index."""

    defaultImages = ["{}_xtx_{}.dds".format(name, str(i)) for i in range(numImages)]
    ARCHIVES[name] = (extraParams, defaultImages)


addArchive("out", 35, [])
addArchive("array", 1, [])
addArchive("sparse", 3, ["--sparse"])
addArchive("minimal_layout", 1, ["--minimal-layout"])
addArchive("small", 1, [])
addArchive("astc0", 10, [])
addArchive("astc1", 1, [])
addArchive("astc2", 1, [])

# Use preexisting test images instead of generated ones where the result is the same.
ARCHIVES["out"][1][0:14] = [
    "c.dds",
    "c_mip.dds",
    "popo_botleft.tga",
    "popo_topleft_rle.tga",
    "popo_dxt1.dds",
    "popo_rgba8.dds",
    "popo_rgba4.dds",
    "popo_16f.dds",
    "popo_dxt2.dds",
    "popo_dxt3.dds",
    "popo_dxt4.dds",
    "popo_dxt5.dds",
    "popo_bc4.dds",
    "popo_bc5.dds"
]
ARCHIVES["out"][1][17:19] = [
    "qube.dds",
    "qube_rgba1555_mips.dds"
]
ARCHIVES["out"][1][33:35] = [
    "v.dds",
    "v_rgba10.dds"
]
ARCHIVES["small"][1][0] = "test_4depth_2x2.dds"


# Header files to generate and the texture archive data they contain.
HEADERS = {
    "g_lwn_texpkg_data.h": ["out", "array", "sparse", "minimal_layout", "small"],
    "g_lwn_texpkg_astc_data.h": ["astc0", "astc1", "astc2"]
}


def dataToArray(fileName, fileData):
    """Given a file name and a bytes array representing its contents, generate C+++
    variable definitions for a byte array and its length."""

    arrayName = fileName
    for c in ("./\\"):
        arrayName = arrayName.replace(c, "_")

    result = "static unsigned int {}_size = {};\n".format(arrayName, len(fileData))
    result += "static unsigned char {}[] = {{\n    ".format(arrayName)

    for i, value in enumerate(fileData):
        result += "{:#04x}".format(value)
        if i == len(fileData) - 1:
            result += "\n"
        elif i % 25 == 24:
            result += ",\n    "
        else:
            result += ", "

    result += "};\n"
    return result


def main(image_dir, packager, dest, scratch):
    """Colwert .dds and .tga image files into C++ header files containing
    in-memory .xtx texture archives that are expected by the lwn_texture_packager*
    tests."""

    if not os.path.isdir(image_dir):
        print(image_dir + " is not a directory.")
        exit(1)
    if not os.path.isfile(packager):
        print(packager + " is not a file.")
        exit(1)
    if not os.path.isdir(dest):
        print(dest + " is not a directory.")
        exit(1)
    with tempfile.TemporaryDirectory() as tempDir:
        # Create a temporary directory anyway, even if it's not used.
        if not scratch:
            scratch = tempDir
        if not os.path.isdir(scratch):
            print(scratch + " is not a directory.")
            exit(1)
        for header, archiveList in HEADERS.items():
            with open(os.path.join(dest, header), "wt") as header:
                header.write(\
"""/*
** Copyright (c) 2015-2020, LWPU CORPORATION.  All rights reserved.
**
** LWPU CORPORATION and its licensors retain all intellectual property
** and proprietary rights in and to this software, related documentation
** and any modifications thereto.  Any use, reproduction, disclosure or
** distribution of this software and related documentation without an express
** license agreement from LWPU CORPORATION is strictly prohibited.
*/

// This file is generated by the script resources/lwn_texture_packager/mktexpkgdata.py.
// Any changes should be made by modifying the script and the set of image files
// located at //sw/apps/gpu/drivers/lwn/lwntest_images/...

""")
                first = True
                for archiveName in archiveList:
                    print("Processing " + archiveName)
                    extraParams, images = ARCHIVES[archiveName]
                    archiveFilename = archiveName + ".xtx"
                    command = [packager, "-o", archiveFilename] + extraParams
                    for image in images:
                        command += ["-i", image]
                        shutil.copyfile(os.path.join(image_dir, image), os.path.join(scratch, image))
                    command.append("-v")
                    subprocess.run(command, cwd=scratch)
                    archiveData = open(os.path.join(scratch, archiveFilename), "rb").read()
                    if not first:
                        header.write("\n")
                    header.write(dataToArray(archiveFilename, archiveData))
                    first = False


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument("image_dir",
            help="Directory containing input images. Typically a local workspace mapping of '//sw/apps/gpu/drivers/lwn/lwntest_images.'")
    parser.add_argument("packager",
            help="Path to the texture packager exelwtable. Usually of the form '...\\_out\\winxp_amd64_debug\\LwnTexpkg.exe.'")
    parser.add_argument("--dest", default=os.path.join(os.path.dirname(os.path.realpath(__file__)), "..", ".."),
            help="Directory to store the result headers. By default, the grandparent of the directory containing the script.")
    parser.add_argument("--scratch", default="",
            help="Directory to store the generated archive files. By default, a temporary directory that gets removed automatically.")
    args = parser.parse_args()
    main(args.image_dir, args.packager, args.dest, args.scratch)
