diff --git a/gpu/drivers/opengl/lwogtest/shaderc/libshaderc/src/shaderc.cc b/gpu/drivers/opengl/lwogtest/shaderc/libshaderc/src/shaderc.cc
index 6b7f4a0..f313651 100644
--- a/gpu/drivers/opengl/lwogtest/shaderc/libshaderc/src/shaderc.cc
+++ b/gpu/drivers/opengl/lwogtest/shaderc/libshaderc/src/shaderc.cc
@@ -135,7 +135,7 @@ shaderc_compiler_t shaderc_compiler_initialize() {
   ++glsl_state.compiler_initialization_count;
   bool success = true;
   if (glsl_state.compiler_initialization_count == 1) {
-    TRY_IF_EXCEPTIONS_ENABLED { success = ShInitialize(); }
+    TRY_IF_EXCEPTIONS_ENABLED { success = (ShInitialize() != 0); }
     CATCH_IF_EXCEPTIONS_ENABLED(...) { success = false; }
   }
   if (!success) {
diff --git a/gpu/drivers/opengl/lwogtest/shaderc/libshaderc_util/src/compiler.cc b/gpu/drivers/opengl/lwogtest/shaderc/libshaderc_util/src/compiler.cc
index 9348f30..110f259 100644
--- a/gpu/drivers/opengl/lwogtest/shaderc/libshaderc_util/src/compiler.cc
+++ b/gpu/drivers/opengl/lwogtest/shaderc/libshaderc_util/src/compiler.cc
@@ -138,7 +138,7 @@ bool Compiler::Compile(
 
   glslang::TShader shader(used_shader_stage);
   const char* shader_strings = input_source_string.data();
-  const int shader_lengths = input_source_string.size();
+  const int shader_lengths = static_cast<int>(input_source_string.size());
   const char* string_names = error_tag.c_str();
   shader.setStringsWithLengthsAndNames(&shader_strings, &shader_lengths,
                                        &string_names, 1);
@@ -213,7 +213,7 @@ std::tuple<bool, std::string, std::string> Compiler::PreprocessShader(
   // The stage does not matter for preprocessing.
   glslang::TShader shader(EShLangVertex);
   const char* shader_strings = shader_source.data();
-  const int shader_lengths = shader_source.size();
+  const int shader_lengths = static_cast<int>(shader_source.size());
   const char* string_names = error_tag.c_str();
   shader.setStringsWithLengthsAndNames(&shader_strings, &shader_lengths,
                                        &string_names, 1);
diff --git a/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/SPIRV/GlslangToSpv.cpp b/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/SPIRV/GlslangToSpv.cpp
index d054217..a37deae 100644
--- a/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/SPIRV/GlslangToSpv.cpp
+++ b/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/SPIRV/GlslangToSpv.cpp
@@ -2906,7 +2906,7 @@ spv::Id TGlslangToSpvTraverser::createMiscOperation(glslang::TOperator op, spv::
 
     spv::Op opCode = spv::OpNop;
     int libCall = -1;
-    int consumedOperands = operands.size();
+    size_t consumedOperands = operands.size();
     spv::Id typeId0 = 0;
     if (consumedOperands > 0)
         typeId0 = builder.getTypeId(operands[0]);
diff --git a/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/SPIRV/SpvBuilder.cpp b/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/SPIRV/SpvBuilder.cpp
index 7af9595..0537f81 100644
--- a/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/SPIRV/SpvBuilder.cpp
+++ b/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/SPIRV/SpvBuilder.cpp
@@ -1357,7 +1357,7 @@ Id Builder::createTextureQueryCall(Op opCode, const TextureParameters& parameter
     case OpImageQuerySize:
     case OpImageQuerySizeLod:
     {
-        int numComponents;
+        int numComponents = 0;
         switch (getTypeDimensionality(getImageType(parameters.sampler))) {
         case Dim1D:
         case DimBuffer:
diff --git a/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/glslang/MachineIndependent/Scan.cpp b/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/glslang/MachineIndependent/Scan.cpp
index 68f777a..f3c98aa 100644
--- a/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/glslang/MachineIndependent/Scan.cpp
+++ b/gpu/drivers/opengl/lwogtest/shaderc/third_party/glslang/glslang/MachineIndependent/Scan.cpp
@@ -309,7 +309,7 @@ struct str_hash
         unsigned long hash = 5381;
         int c;
 
-        while ((c = *str++))
+        while ((c = *str++) != 0)
             hash = ((hash << 5) + hash) + c;
 
         return hash;
