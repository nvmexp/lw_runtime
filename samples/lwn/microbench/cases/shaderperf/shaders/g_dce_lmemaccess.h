#ifndef __g_dce_lmemaccess_h_
#define __g_dce_lmemaccess_h_

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! AUTOMATICALLY GENERATED - DO NOT EDIT !!!
// !!! Please refer to README.txt on how to  !!!
// !!! generate such files                   !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

static const char *shader_dce_lmemaccess =
    "#version 450\n"
    "\n"
    "#define IS_PREPROCESSED 0\n"
    "\n"
    "// Possible values:\n"
    "// UNI_COUNT:  [0-4]\n"
    "// UNI_INDEX:  [0-1]\n"
    "// UNI_BRANCH: [0-1]\n"
    "\n"
    "#if IS_PREPROCESSED\n"
    "#define UNI_COUNT 0\n"
    "#define UNI_INDEX 0\n"
    "#define UNI_BRANCH 0\n"
    "#else\n"
    "#define UNI_COUNT specConstCount\n"
    "#define UNI_INDEX specConstIndex\n"
    "#define UNI_BRANCH specConstBranch\n"
    "#endif\n"
    "\n"
    "uniform block\n"
    "{\n"
    "    int specConstCount;\n"
    "    int specConstIndex;\n"
    "    int specConstBranch;\n"
    "};\n"
    "\n"
    "out vec4 color;\n"
    "\n"
    "vec3 foo( vec4 lhs, vec4 rhs ) {\n"
    "    vec4 ret = vec4( 0 );\n"
    "    ret.x = ((lhs.x < 0.5) ? (lhs.x * rhs.x * 2) : (1 - 2*(1-lhs.x)*(1-rhs.x)));\n"
    "    return ret.xyz;\n"
    "}\n"
    "\n"
    "vec4 hoge() {\n"
    "    vec4 ret[ 2 ] = vec4[]( vec4( 0 ), vec4( 0 ) );\n"
    "    vec4 ret2[ 2 ] = vec4[]( vec4(0.3), vec4(0.3) );\n"
    "\n"
    "    #define LOOPS 32\n"
    "    int loops = 0;\n"
    "\n"
    "    while (true) {\n"
    "        if (loops >= LOOPS) {\n"
    "            break;\n"
    "        }\n"
    "        loops++;\n"
    "        if( UNI_COUNT >= 1 ) {\n"
    "            ret[ UNI_INDEX ].xyz = foo( vec4( 0 ), vec4( 0 ) );\n"
    "        }\n"
    "\n"
    "        if( UNI_COUNT >= 2 ) {\n"
    "            vec4 lhs = vec4( 0 );\n"
    "            vec4 rhs = vec4( 0 );\n"
    "            if( UNI_BRANCH == 1 ) lhs = ret2[ 0 ];\n"
    "\n"
    "            ret2[ UNI_INDEX ].xyz += foo( lhs, rhs );\n"
    "        }\n"
    "\n"
    "        if( UNI_COUNT >= 3 ) {\n"
    "            vec4 lhs = vec4( 0 );\n"
    "            vec4 rhs = vec4( 0 );\n"
    "            if( UNI_BRANCH == 1 ) lhs = ret[ 0 ];\n"
    "\n"
    "            ret[ UNI_INDEX ].xyz += foo( lhs, rhs );\n"
    "        }\n"
    "    }\n"
    "\n"
    "    return ret[ UNI_INDEX ] + 0.5 * ret2[ UNI_INDEX ];\n"
    "}\n"
    "\n"
    "void main() {\n"
    "    vec4 hogehoge = vec4( 1.0 );\n"
    "    hogehoge *= hoge();\n"
    "    color = vec4( 0 );\n"
    "}\n";

#endif /* __g_dce_lmemaccess_h_ */
