LWMK_SOURCE = $(LW_SOURCE)/drivers/common/build

# Lwstomize for your own disk layout.
# This is for the layout on jjuliano's disk.
LW_DRIVER_SOURCE = $(LW_SOURCE)

##############################################################################

# Include lwcommon before including anything else
include $(LWMK_SOURCE)/lwCommon.lwmk

# This generates and includes LWCFG_* makefile vars and C #defines in g_lwconfig.h
include $(LW_SOURCE)/drivers/common/build/lwconfig.lwmk

# Normally I put the "ifdef LWCFG_INITIALIZED" stuff into a separate
# makefile. But since this one is so simple it is left inline in a
# single makefile. To indent or not to indent, that is the question.
ifdef LWCFG_INITIALIZED

##############################################################################

TARGET_EXE = LwAPISLITests.exe

include $(LW_SOURCE)/drivers/lwapi/lwapi_iface.lwmk

# SOURCES must be specified after including lwCommon.lwmk.
SOURCES += main.cpp
SOURCES += d3dclass.cpp
SOURCES += graphicsclass.cpp
SOURCES += inputclass.cpp
SOURCES += cameraclass.cpp
SOURCES += modelclass.cpp
SOURCES += systemclass.cpp
##############################################################################

LW_TARGET_OS_FAMILY := Windows
LW_TARGET_OS_ARCH = $(LW_TARGET_OS)_$(LW_TARGET_ARCH)

ifeq (,$(findstring $(LW_BUILD_TYPE),"debug release"))
  $(error Only release and debug builds are supported)
endif

ifeq (,$(findstring $(LW_TARGET_ARCH),"x86 amd64 ARMv7"))
  $(error Only x86, amd64, and ARMv7 architectures are supported)
endif

ifeq (,$(findstring $(LW_TARGET_OS),"win7 win8 wddm winnext"))
  $(error Only win7, win8 wddm and winnext target OS are supported)
endif

##############################################################################

LW_COMPILER ?= msvc110

LW_SDK_DIR ?= $(LW_TOOLS)/ddk/nt8/9200
LW_REQUIRED_DIRS += $(LW_SDK_DIR)

# Define these before including the _tools_ file.
#LW_DDK_VER = nt8
#LW_DDK_SUBVER = 9200

include $(LWMK_SOURCE)/$(LW_COMPILER)_tools_$(LW_TARGET_ARCH).lwmk
LW_REQUIRED_DIRS += $(MSVC_COMPILER_DIR)

ifeq (,$(findstring "/ddk/",$(LW_SDK_DIR)))
  LW_TOOLS_INCLUDES += $(LW_SDK_DIR)/Include/um
  LW_TOOLS_INCLUDES += $(LW_SDK_DIR)/Include/shared

  # Needed for d3dkmthk.h
  LW_TOOLS_INCLUDES += $(LW_SDK_DIR)/Include/km
else
  LW_TOOLS_INCLUDES += $(LW_SDK_DIR)/Include
endif
LW_TOOLS_INCLUDES += $(MSVC_COMPILER_DIR)/include

LW_INCLUDES += $(OUTPUTDIR)
LW_INCLUDES += $(LW_TOOLS_INCLUDES)
LW_INCLUDES += $(LW_TOOLS)/sdk/DirectX_Jun2010/Include
ifeq (,$(findstring "/ddk/",$(LW_SDK_DIR)))
  ifeq ($(LW_TARGET_ARCH),x86)
    libraryDirs += $(LW_SDK_DIR)/Lib/win8/um/x86
  else ifeq ($(LW_TARGET_ARCH),amd64)
    libraryDirs += $(LW_SDK_DIR)/Lib/win8/um/x64
  else
    libraryDirs += $(LW_SDK_DIR)/Lib/win8/um/arm
  endif
else
  ifeq ($(LW_TARGET_ARCH),x86)
   libraryDirs += $(LW_SDK_DIR)/Lib
  else ifeq ($(LW_TARGET_ARCH),amd64)
    libraryDirs += $(LW_SDK_DIR)/Lib/x64
  else
    $(error missing SDK library dir for LW_TARGET_ARCH $(LW_TARGET_ARCH))
  endif
endif

  ifeq ($(LW_TARGET_ARCH),x86)
    libraryDirs += $(LW_SOURCE)/apps/LwAPISLITests/lib/x86/
  else ifeq ($(LW_TARGET_ARCH),amd64)
    libraryDirs += $(LW_SOURCE)/apps/LwAPISLITests/lib/x64/
endif

ifeq ($(LW_TARGET_ARCH),x86)
  libraryDirs += $(MSVC_COMPILER_DIR)/lib
else ifeq ($(LW_TARGET_ARCH),amd64)
  libraryDirs += $(MSVC_COMPILER_DIR)/lib/amd64
else
  libraryDirs += $(MSVC_COMPILER_DIR)/lib/arm
endif

ifeq ($(LW_TARGET_ARCH),x86)
  libraryDirs += $(LW_TOOLS)/sdk/DirectX_Jun2010/Lib/x86
else ifeq ($(LW_TARGET_ARCH),amd64)
  libraryDirs += $(LW_TOOLS)/sdk/DirectX_Jun2010/Lib/x64
endif

##############################################################################

LW_INCLUDES += $(LW_DRIVER_SOURCE)/sdk/lwpu/inc
LW_INCLUDES += $(LW_DRIVER_SOURCE)/drivers/common/inc

# This is not needed if the DDK include/um directory contains all
# necessary bits. So far it does.
#
#     LW_INCLUDES += $(LW_TOOLS)/sdk/DirectX_Jun2010/Include

##############################################################################

# Enable warnings and treated warnings as errors
CFLAGS += -W3 -WX
LFLAGS += -WX

# catches C++ exceptions only and tells the compiler to assume that
# extern C functions never throw a C++ exception
CFLAGS += -EHsc

# Default to unicode system calls
LW_DEFINES += _UNICODE
LW_DEFINES += UNICODE

# Console app
LW_DEFINES += _CONSOLE
LFLAGS += -subsystem:WINDOWS

LFLAGS += -OUT:./$@
LFLAGS += -INCREMENTAL:NO

LFLAGS += $(addprefix -libpath:,$(libraryDirs))
#LFLAGS += $(LWAPI_LIB)

libraries += setupapi.lib
libraries += kernel32.lib
libraries += user32.lib
libraries += gdi32.lib
libraries += winspool.lib
libraries += comdlg32.lib
libraries += advapi32.lib
libraries += shell32.lib
libraries += ole32.lib
libraries += oleaut32.lib
libraries += uuid.lib
libraries += odbc32.lib
libraries += odbccp32.lib
libraries += kernel32.lib
libraries += user32.lib
libraries += gdi32.lib
libraries += winspool.lib
libraries += comdlg32.lib
libraries += advapi32.lib
libraries += shell32.lib
libraries += ole32.lib
libraries += oleaut32.lib
libraries += uuid.lib
libraries += odbc32.lib
libraries += odbccp32.lib
libraries += d3dx10.lib
#libraries += D3D11.lib
ifeq ($(LW_TARGET_ARCH),x86)
  libraries += lwapi.lib
else ifeq ($(LW_TARGET_ARCH),amd64)
  libraries += lwapi64.lib
else
  libraries += lwapi.lib
endif

##############################################################################


##############################################################################

# all OBJECTS depend on the top-level makefile
$(call BUILD_OBJECT_LIST,$(OBJECTS)) $(OUTPUTDIR)/$(TARGET_EXE): makefile.lwmk

$(OUTPUTDIR)/$(TARGET_EXE): $(OBJECTS)
	@$(ECHO) Building $@...
	$(LINK) $(strip $(LFLAGS)) $(OBJECTS) $(libraries)

build: $(LW_REQUIRED_DIRS) $(OUTPUTDIR)/$(TARGET_EXE)

endif # LWCFG_INITIALIZED

# Always include this last.
include $(LWMK_SOURCE)/lwCommonRules.lwmk


##############################################################################
