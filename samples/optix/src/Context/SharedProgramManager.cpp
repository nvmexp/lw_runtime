// Copyright (c) 2017, LWPU CORPORATION.
// TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
// *AS IS* AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
// OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS
// BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
// WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
// BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS)
// ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS
// BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES

#include <Context/SharedProgramManager.h>

#include <Context/Context.h>
#include <Context/ObjectManager.h>
#include <Context/ProgramManager.h>
#include <FrontEnd/PTX/Canonical/CanonicalType.h>
#include <Objects/Program.h>
#include <Util/MakeUnique.h>

#include <prodlib/exceptions/Assert.h>
#include <prodlib/exceptions/IlwalidValue.h>
#include <prodlib/system/Thread.h>

#include <cstring>

using namespace optix;
using namespace optix::lwca;
using namespace prodlib;
using namespace corelib;

// Defined in ProgramManager.cpp
extern Thread::Mutex g_compileMutex;

bool SharedProgramManager::PtxListParams::operator<( const PtxListParams& other ) const
{
    if( ptxList != other.ptxList )
        return ptxList < other.ptxList;
    else
        return func < other.func;
}

SharedProgramManager::SharedProgramManager( Context* context )
    : m_context( context )
{
}

Program* SharedProgramManager::getProgram( const char** ptxList, const std::string& func, bool useDiskCache )
{
    PtxListParams params = {ptxList, func};
    auto          it     = m_ptxListMap.find( params );
    if( it == m_ptxListMap.end() )
    {
        m_ptxListMap[params] = createPtx( params, useDiskCache );
        it                   = m_ptxListMap.find( params );
    }

    return it->second;
}

Program* SharedProgramManager::getCachedProgram( const char** ptxList, const std::string& func )
{
    PtxListParams params = {ptxList, func};
    auto          it     = m_ptxListMap.find( params );
    if( it == m_ptxListMap.end() )
        return nullptr;
    return it->second;
}

Program* SharedProgramManager::getTraverserRuntimeProgram( const std::string& traverser, bool isGeom, bool hasMotion, bool bakedChildPtrs )
{
    return getRuntimeProgram( traverser, isGeom, hasMotion, bakedChildPtrs );
}

Program* SharedProgramManager::getBoundsRuntimeProgram( const std::string& traverser, bool isGeom, bool hasMotion )
{
    return getRuntimeProgram( traverser, isGeom, hasMotion, false );
}

Program* SharedProgramManager::getRuntimeProgram( const std::string& traverser, bool isGeom, bool hasMotion, bool bakedChildPtrs )
{
    TraverserParams params = {traverser, isGeom, hasMotion, bakedChildPtrs, 0};
    auto            it     = m_programMap.find( params );
    if( it == m_programMap.end() )
    {
        if( traverser.find( "traverse_bvh8" ) == 0 )
            m_programMap[params] = createTraverser( params, {30, 50} );
        else if( traverser.find( "traverse_bvh" ) == 0 )
            m_programMap[params] = createTraverser( params, {30, 50} );
        else if( traverser.find( "traverse_noaccel" ) == 0 )
            m_programMap[params] = createTraverser( params, {0} );
        // Group all bounds_* programs together, since they have the same sm versions argument.
        else if( traverser.find( "bounds_" ) == 0 )
            m_programMap[params] = createTraverser( params, {0} );
        else
            throw IlwalidValue( RT_EXCEPTION_INFO, "Invalid traverser", traverser );
        it = m_programMap.find( params );
    }

    return it->second;
}

Program* SharedProgramManager::getNullProgram()
{
    if( !m_nullProgram )
    {
        static const char* ptx[] = {"SharedProgramManager.cpp",
                                    ".version 3.2\n"
                                    ".target sm_30\n"
                                    ".address_size 64\n"
                                    ".visible .entry null_program() {ret;}\n",
                                    nullptr, nullptr};

        // We are not adding the null program to the disk cache, because the
        // null program needs to be created early in Context creation, before
        // the disk cache has been initialized.
        PtxListParams params = {ptx, "null_program"};
        m_nullProgram        = createPtx( params, /* useDiskCache */ false );
    }
    return m_nullProgram;
}

extern const char* g_ptx_trivial_exception_program;

Program* SharedProgramManager::getTrivialExceptionProgram()
{
    if( !m_trivialExceptionProgram )
    {
        static const char* ptx[]  = {"SharedProgramManager.cpp", g_ptx_trivial_exception_program, nullptr, nullptr};
        PtxListParams      params = {ptx, "trivial_exception_program"};
        m_trivialExceptionProgram = createPtx( params );
    }
    return m_trivialExceptionProgram;
}

Program* SharedProgramManager::getRtcBvhDummyTraverserProgram()
{
    if( !m_rtcBvhDummyTraverserProgram )
    {
        // This string needs to be different from the one for the null program.  Otherwise they
        // generate the same canonical program which is not what we want.
        static const char* ptx[] = {"SharedProgramManager.cpp",
                                    ".version 3.2\n"
                                    ".target sm_30\n"
                                    ".address_size 64\n"
                                    ".visible .entry rtc_bvh_dummy_traverser_program() {ret;}\n",
                                    nullptr, nullptr};
        PtxListParams params          = {ptx, "rtc_bvh_dummy_traverser_program"};
        m_rtcBvhDummyTraverserProgram = createPtx( params );
    }
    return m_rtcBvhDummyTraverserProgram;
}

Program* SharedProgramManager::createPtx( const PtxListParams& p, bool useDiskCache )
{
    // Note, programs are not destroyed until
    // ObjectManager::destroyAllObjects is ilwoked at context destroy.
    std::unique_ptr<Program> prog( makeUnique<Program>( m_context ) );

    // Add PTX for multiple SM versions by computing the non-inclusive
    // target_max from the next one in the list.
    for( size_t i = 1; p.ptxList[i] != nullptr; i += 2 )
    {
        lwca::ComputeCapability targetMax( 9999 );
        if( p.ptxList[i + 2] != nullptr )
        {
            const char* target = std::strstr( p.ptxList[i + 2], ".target sm_" );
            RT_ASSERT_MSG( target != nullptr, "Internal PTX string must contain .target directive" );

            int       smVersion;
            const int n = sscanf( target + 11, "%d", &smVersion );
            RT_ASSERT_MSG( n == 1, "Cannot parse sm version in PTX string" );

            targetMax = lwca::ComputeCapability( smVersion );
        }
        prog->addPTX( toStringView( p.ptxList[i] ), p.ptxList[i - 1], p.func, targetMax, useDiskCache );
    }
    prog->finishAddingCanonicalPrograms();

    return prog.release();
}

Program* SharedProgramManager::createTraverser( const TraverserParams& params, const std::vector<unsigned>& smVersions )
{
    Thread::Lock lock( g_compileMutex );

    std::unique_ptr<Program> prog( makeUnique<Program>( m_context ) );
    for( size_t i = 0; i < smVersions.size(); ++i )
    {
        TraverserParams p            = params;
        p.smVersion                  = smVersions[i];
        llvm::Function*         func = createTraverserFunc( p, m_context->getLLVMManager() );
        lwca::ComputeCapability targetMax( i + 1 < smVersions.size() ? smVersions[i + 1] : 9999 );
        prog->addLLVM( func, CanonicalizationType::CT_TRAVERSER, ComputeCapability( smVersions[i] ), targetMax );
    }
    prog->finishAddingCanonicalPrograms();

    return prog.release();
}

// PTX generated from
//
// #include <optix_world.h>
//
// __device__ int remainingExceptionsToPrint = 32;
//
// RT_PROGRAM void trivial_exception_program()
// {
//     int lwrrentValue = atomicAdd( &remainingExceptionsToPrint, -1 );
//     if( lwrrentValue == 0 )
//         rtPrintf( "Caught too many exceptions, remaining exceptions will not be printed\n." );
//     if( lwrrentValue < 0 )
//         return;
//
//     rtPrintExceptionDetails();
// }
//
// Generated by putting these lines into a .lw file of some unit test, then using the default
// settings of our build system to generate the PTX, and piping the generated PTX file through
// grep -v "^\W\.loc\>\|^\W\.file\>" | sed 's/^\(.*\)$/"\1 \\n"/' .
//
// clang-format off
const char* g_ptx_trivial_exception_program =
"// \n"
"// Generated by LWPU LWVM Compiler \n"
"// \n"
"// Compiler Build ID: CL-24210273 \n"
"// Lwca compilation tools, release 10.0, V10.0.0 \n"
"// Based on LLVM 3.4svn \n"
"// \n"
" \n"
".version 6.3 \n"
".target sm_30 \n"
".address_size 64 \n"
" \n"
"	// .globl	_Z25trivial_exception_programv \n"
".extern .func  (.param .b32 func_retval0) vprintf \n"
"( \n"
"	.param .b64 vprintf_param_0, \n"
"	.param .b64 vprintf_param_1 \n"
") \n"
"; \n"
".global .align 4 .u32 remainingExceptionsToPrint = 32; \n"
".global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E; \n"
".global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E; \n"
".global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E; \n"
".global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE; \n"
".global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE; \n"
".global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE; \n"
".global .align 1 .b8 $str[64] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 83, 84, 65, 67, 75, 95, 79, 86, 69, 82, 70, 76, 79, 87, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0}; \n"
".global .align 1 .b8 $str1[70] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 84, 82, 65, 67, 69, 95, 68, 69, 80, 84, 72, 95, 69, 88, 67, 69, 69, 68, 69, 68, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0}; \n"
".global .align 1 .b8 $str2[236] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 66, 85, 70, 70, 69, 82, 95, 73, 78, 68, 69, 88, 95, 79, 85, 84, 95, 79, 70, 95, 66, 79, 85, 78, 68, 83, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 97, 108, 105, 116, 121, 32, 58, 32, 37, 100, 10, 32, 32, 98, 117, 102, 102, 101, 114, 32, 100, 101, 116, 97, 105, 108, 115, 32, 58, 32, 37, 115, 10, 32, 32, 98, 117, 102, 102, 101, 114, 32, 73, 68, 32, 32, 32, 32, 32, 32, 58, 32, 37, 100, 10, 32, 32, 115, 105, 122, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 108, 108, 100, 120, 37, 108, 108, 100, 120, 37, 108, 108, 100, 10, 32, 32, 101, 108, 101, 109, 101, 110, 116, 32, 115, 105, 122, 101, 32, 32, 32, 58, 32, 37, 100, 10, 32, 32, 97, 99, 99, 101, 115, 115, 101, 100, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 108, 108, 100, 44, 32, 37, 108, 108, 100, 44, 32, 37, 108, 108, 100, 10, 0}; \n"
".global .align 1 .b8 $str3[138] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 80, 82, 79, 71, 82, 65, 77, 95, 73, 68, 95, 73, 78, 86, 65, 76, 73, 68, 10, 32, 32, 112, 114, 111, 103, 114, 97, 109, 32, 73, 68, 32, 101, 113, 117, 97, 108, 32, 116, 111, 32, 82, 84, 95, 80, 82, 79, 71, 82, 65, 77, 95, 73, 68, 95, 78, 85, 76, 76, 32, 117, 115, 101, 100, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 0}; \n"
".global .align 1 .b8 $str4[148] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 80, 82, 79, 71, 82, 65, 77, 95, 73, 68, 95, 73, 78, 86, 65, 76, 73, 68, 10, 32, 32, 112, 114, 111, 103, 114, 97, 109, 32, 73, 68, 32, 40, 37, 100, 41, 32, 105, 115, 32, 110, 111, 116, 32, 105, 110, 32, 116, 104, 101, 32, 118, 97, 108, 105, 100, 32, 114, 97, 110, 103, 101, 32, 111, 102, 32, 91, 49, 44, 115, 105, 122, 101, 41, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 0}; \n"
".global .align 1 .b8 $str5[136] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 80, 82, 79, 71, 82, 65, 77, 95, 73, 68, 95, 73, 78, 86, 65, 76, 73, 68, 10, 32, 32, 112, 114, 111, 103, 114, 97, 109, 32, 73, 68, 32, 40, 37, 100, 41, 32, 111, 102, 32, 97, 32, 100, 101, 108, 101, 116, 101, 100, 32, 112, 114, 111, 103, 114, 97, 109, 32, 117, 115, 101, 100, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 0}; \n"
".global .align 1 .b8 $str6[98] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 84, 69, 88, 84, 85, 82, 69, 95, 73, 68, 95, 73, 78, 86, 65, 76, 73, 68, 10, 32, 32, 116, 101, 120, 116, 117, 114, 101, 32, 73, 68, 32, 105, 115, 32, 105, 110, 118, 97, 108, 105, 100, 32, 40, 48, 41, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0}; \n"
".global .align 1 .b8 $str7[126] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 84, 69, 88, 84, 85, 82, 69, 95, 73, 68, 95, 73, 78, 86, 65, 76, 73, 68, 10, 32, 32, 116, 101, 120, 116, 117, 114, 101, 32, 73, 68, 32, 40, 37, 100, 41, 32, 105, 115, 32, 110, 111, 116, 32, 105, 110, 32, 116, 104, 101, 32, 118, 97, 108, 105, 100, 32, 114, 97, 110, 103, 101, 32, 111, 102, 32, 91, 49, 44, 115, 105, 122, 101, 41, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0}; \n"
".global .align 1 .b8 $str8[99] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 84, 69, 88, 84, 85, 82, 69, 95, 73, 68, 95, 73, 78, 86, 65, 76, 73, 68, 10, 32, 32, 116, 101, 120, 116, 117, 114, 101, 32, 73, 68, 32, 105, 115, 32, 105, 110, 118, 97, 108, 105, 100, 32, 40, 45, 49, 41, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0}; \n"
".global .align 1 .b8 $str9[135] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 66, 85, 70, 70, 69, 82, 95, 73, 68, 95, 73, 78, 86, 65, 76, 73, 68, 10, 32, 32, 98, 117, 102, 102, 101, 114, 32, 73, 68, 32, 101, 113, 117, 97, 108, 32, 116, 111, 32, 82, 84, 95, 66, 85, 70, 70, 69, 82, 95, 73, 68, 95, 78, 85, 76, 76, 32, 117, 115, 101, 100, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 0}; \n"
".global .align 1 .b8 $str10[94] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 66, 85, 70, 70, 69, 82, 95, 73, 68, 95, 73, 78, 86, 65, 76, 73, 68, 10, 32, 32, 98, 117, 102, 102, 101, 114, 32, 73, 68, 32, 40, 37, 100, 41, 32, 105, 115, 32, 110, 111, 116, 32, 105, 110, 32, 116, 104, 101, 32, 118, 97, 108, 105, 100, 32, 114, 97, 110, 103, 101, 32, 111, 102, 32, 91, 49, 44, 115, 105, 122, 101, 41, 10, 0}; \n"
".global .align 1 .b8 $str11[53] = {32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 0}; \n"
".global .align 1 .b8 $str12[133] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 66, 85, 70, 70, 69, 82, 95, 73, 68, 95, 73, 78, 86, 65, 76, 73, 68, 10, 32, 32, 98, 117, 102, 102, 101, 114, 32, 73, 68, 32, 40, 37, 100, 41, 32, 111, 102, 32, 97, 32, 100, 101, 108, 101, 116, 101, 100, 32, 98, 117, 102, 102, 101, 114, 32, 117, 115, 101, 100, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 0}; \n"
".global .align 1 .b8 $str13[141] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 73, 78, 68, 69, 88, 95, 79, 85, 84, 95, 79, 70, 95, 66, 79, 85, 78, 68, 83, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 32, 32, 115, 105, 122, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 108, 108, 100, 10, 32, 32, 97, 99, 99, 101, 115, 115, 101, 100, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 108, 108, 100, 10, 0}; \n"
".global .align 1 .b8 $str14[200] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 73, 78, 86, 65, 76, 73, 68, 95, 82, 65, 89, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 32, 32, 114, 97, 121, 32, 111, 114, 105, 103, 105, 110, 32, 32, 32, 32, 58, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 32, 32, 114, 97, 121, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 32, 58, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 32, 32, 114, 97, 121, 32, 116, 121, 112, 101, 32, 32, 32, 32, 32, 32, 58, 32, 37, 100, 10, 32, 32, 114, 97, 121, 32, 116, 109, 105, 110, 32, 32, 32, 32, 32, 32, 58, 32, 37, 102, 10, 32, 32, 114, 97, 121, 32, 116, 109, 97, 120, 32, 32, 32, 32, 32, 32, 58, 32, 37, 102, 10, 0}; \n"
".global .align 1 .b8 $str15[164] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 80, 65, 89, 76, 79, 65, 68, 95, 65, 67, 67, 69, 83, 83, 95, 79, 85, 84, 95, 79, 70, 95, 66, 79, 85, 78, 68, 83, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 32, 32, 118, 97, 108, 117, 101, 32, 111, 102, 102, 115, 101, 116, 32, 58, 32, 37, 108, 108, 100, 10, 32, 32, 118, 97, 108, 117, 101, 32, 115, 105, 122, 101, 32, 32, 32, 58, 32, 37, 108, 108, 100, 10, 32, 32, 112, 97, 121, 108, 111, 97, 100, 32, 115, 105, 122, 101, 32, 58, 32, 37, 108, 108, 100, 10, 0}; \n"
".global .align 1 .b8 $str16[123] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 85, 83, 69, 82, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 67, 79, 68, 69, 95, 79, 85, 84, 95, 79, 70, 95, 66, 79, 85, 78, 68, 83, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 32, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 32, 32, 32, 32, 58, 32, 37, 115, 10, 32, 32, 99, 111, 100, 101, 32, 32, 32, 32, 32, 32, 32, 32, 32, 58, 32, 37, 100, 10, 0}; \n"
".global .align 1 .b8 $str17[57] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 85, 83, 69, 82, 43, 37, 100, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0}; \n"
".global .align 1 .b8 $str18[64] = {67, 97, 117, 103, 104, 116, 32, 82, 84, 95, 69, 88, 67, 69, 80, 84, 73, 79, 78, 95, 73, 78, 84, 69, 82, 78, 65, 76, 95, 69, 82, 82, 79, 82, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0}; \n"
".global .align 1 .b8 $str19[54] = {67, 97, 117, 103, 104, 116, 32, 117, 110, 107, 110, 111, 119, 110, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 10, 32, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 58, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 10, 0}; \n"
".global .align 1 .b8 $str20[71] = {67, 97, 117, 103, 104, 116, 32, 116, 111, 111, 32, 109, 97, 110, 121, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 115, 44, 32, 114, 101, 109, 97, 105, 110, 105, 110, 103, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 115, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 98, 101, 32, 112, 114, 105, 110, 116, 101, 100, 10, 46, 0}; \n"
" \n"
".visible .entry _Z25trivial_exception_programv( \n"
" \n"
") \n"
"{ \n"
"	.local .align 16 .b8 	__local_depot0[400]; \n"
"	.reg .b64 	%SP; \n"
"	.reg .b64 	%SPL; \n"
"	.reg .pred 	%p<46>; \n"
"	.reg .f32 	%f<9>; \n"
"	.reg .b32 	%r<121>; \n"
"	.reg .f64 	%fd<9>; \n"
"	.reg .b64 	%rd<121>; \n"
" \n"
" \n"
"	mov.u64 	%SPL, __local_depot0; \n"
"	cvta.local.u64 	%SP, %SPL; \n"
"	mov.u64 	%rd28, remainingExceptionsToPrint; \n"
"	atom.global.add.u32 	%r1, [%rd28], -1; \n"
"	setp.ne.s32	%p1, %r1, 0; \n"
"	@%p1 bra 	BB0_3; \n"
" \n"
"	// inline asm \n"
"	call (%r76), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p2, %r76, 0; \n"
"	@%p2 bra 	BB0_3; \n"
" \n"
"	mov.u64 	%rd29, $str20; \n"
"	cvta.global.u64 	%rd30, %rd29; \n"
"	mov.u64 	%rd31, 0; \n"
"	// Callseq Start 0 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd30; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd31; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r77, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 0 \n"
" \n"
"BB0_3: \n"
"	setp.lt.s32	%p3, %r1, 0; \n"
"	@%p3 bra 	BB0_67; \n"
" \n"
"	// inline asm \n"
"	call (%r78), _rt_get_exception_code, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p4, %r78, 1020; \n"
"	add.u64 	%rd32, %SP, 384; \n"
"	add.u64 	%rd33, %SPL, 384; \n"
"	add.s64 	%rd1, %rd33, 4; \n"
"	@%p4 bra 	BB0_65; \n"
"	bra.uni 	BB0_5; \n"
" \n"
"BB0_65: \n"
"	ld.volatile.global.u32 	%r73, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r74, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r75, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	// inline asm \n"
"	call (%r118), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p45, %r118, 0; \n"
"	@%p45 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd33], %r73; \n"
"	st.local.u32 	[%rd1], %r74; \n"
"	st.local.u32 	[%rd1+4], %r75; \n"
"	mov.u64 	%rd117, $str; \n"
"	cvta.global.u64 	%rd118, %rd117; \n"
"	// Callseq Start 19 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd118; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd32; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r119, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 19 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_5: \n"
"	setp.eq.s32	%p5, %r78, 1005; \n"
"	@%p5 bra 	BB0_63; \n"
"	bra.uni 	BB0_6; \n"
" \n"
"BB0_63: \n"
"	ld.volatile.global.u32 	%r70, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r71, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r72, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	// inline asm \n"
"	call (%r116), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p44, %r116, 0; \n"
"	@%p44 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd33], %r70; \n"
"	st.local.u32 	[%rd1], %r71; \n"
"	st.local.u32 	[%rd1+4], %r72; \n"
"	mov.u64 	%rd113, $str1; \n"
"	cvta.global.u64 	%rd114, %rd113; \n"
"	// Callseq Start 18 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd114; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd32; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r117, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 18 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_6: \n"
"	setp.eq.s32	%p6, %r78, 1021; \n"
"	@%p6 bra 	BB0_57; \n"
"	bra.uni 	BB0_7; \n"
" \n"
"BB0_57: \n"
"	ld.volatile.global.u32 	%r64, [_ZN21rti_internal_register21reg_exception_detail0E]; \n"
"	ld.volatile.global.u32 	%r65, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r66, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r67, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd19, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	ld.volatile.global.u32 	%r68, [_ZN21rti_internal_register21reg_exception_detail2E]; \n"
"	ld.volatile.global.u64 	%rd20, [_ZN21rti_internal_register24reg_exception_64_detail1E]; \n"
"	mov.u64 	%rd120, 1; \n"
"	setp.lt.u32	%p41, %r64, 2; \n"
"	mov.u64 	%rd119, %rd120; \n"
"	@%p41 bra 	BB0_59; \n"
" \n"
"	ld.volatile.global.u64 	%rd119, [_ZN21rti_internal_register24reg_exception_64_detail2E]; \n"
" \n"
"BB0_59: \n"
"	setp.lt.u32	%p42, %r64, 3; \n"
"	@%p42 bra 	BB0_61; \n"
" \n"
"	ld.volatile.global.u64 	%rd120, [_ZN21rti_internal_register24reg_exception_64_detail3E]; \n"
" \n"
"BB0_61: \n"
"	ld.volatile.global.u32 	%r69, [_ZN21rti_internal_register21reg_exception_detail1E]; \n"
"	ld.volatile.global.u64 	%rd25, [_ZN21rti_internal_register24reg_exception_64_detail4E]; \n"
"	ld.volatile.global.u64 	%rd26, [_ZN21rti_internal_register24reg_exception_64_detail5E]; \n"
"	ld.volatile.global.u64 	%rd27, [_ZN21rti_internal_register24reg_exception_64_detail6E]; \n"
"	// inline asm \n"
"	call (%r114), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p43, %r114, 0; \n"
"	@%p43 bra 	BB0_67; \n"
" \n"
"	add.u64 	%rd107, %SP, 296; \n"
"	add.u64 	%rd108, %SPL, 296; \n"
"	st.local.v2.u32 	[%rd108], {%r65, %r66}; \n"
"	st.local.u32 	[%rd108+24], %r68; \n"
"	st.local.u32 	[%rd108+56], %r69; \n"
"	st.local.v2.u32 	[%rd108+8], {%r67, %r64}; \n"
"	st.local.u64 	[%rd108+16], %rd19; \n"
"	st.local.u64 	[%rd108+32], %rd20; \n"
"	st.local.u64 	[%rd108+40], %rd119; \n"
"	st.local.u64 	[%rd108+48], %rd120; \n"
"	st.local.u64 	[%rd108+64], %rd25; \n"
"	st.local.u64 	[%rd108+72], %rd26; \n"
"	st.local.u64 	[%rd108+80], %rd27; \n"
"	mov.u64 	%rd109, $str2; \n"
"	cvta.global.u64 	%rd110, %rd109; \n"
"	// Callseq Start 17 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd110; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd107; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r115, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 17 \n"
" \n"
"BB0_67: \n"
"	ret; \n"
" \n"
"BB0_7: \n"
"	setp.eq.s32	%p7, %r78, 1006; \n"
"	add.u64 	%rd34, %SP, 272; \n"
"	add.u64 	%rd35, %SPL, 272; \n"
"	add.s64 	%rd2, %rd35, 4; \n"
"	@%p7 bra 	BB0_48; \n"
"	bra.uni 	BB0_8; \n"
" \n"
"BB0_48: \n"
"	ld.volatile.global.u32 	%r107, [_ZN21rti_internal_register21reg_exception_detail1E]; \n"
"	setp.eq.s32	%p35, %r107, 1; \n"
"	@%p35 bra 	BB0_55; \n"
" \n"
"	setp.eq.s32	%p36, %r107, 2; \n"
"	@%p36 bra 	BB0_53; \n"
"	bra.uni 	BB0_50; \n"
" \n"
"BB0_53: \n"
"	ld.volatile.global.u32 	%r57, [_ZN21rti_internal_register21reg_exception_detail0E]; \n"
"	ld.volatile.global.u32 	%r58, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r59, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r60, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd17, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	// inline asm \n"
"	call (%r110), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p39, %r110, 0; \n"
"	@%p39 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd35], %r57; \n"
"	st.local.u32 	[%rd2], %r58; \n"
"	st.local.v2.u32 	[%rd2+4], {%r59, %r60}; \n"
"	st.local.u64 	[%rd2+12], %rd17; \n"
"	mov.u64 	%rd99, $str4; \n"
"	cvta.global.u64 	%rd100, %rd99; \n"
"	// Callseq Start 15 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd100; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd34; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r111, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 15 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_8: \n"
"	setp.eq.s32	%p8, %r78, 1007; \n"
"	add.u64 	%rd36, %SP, 256; \n"
"	add.u64 	%rd37, %SPL, 256; \n"
"	add.s64 	%rd3, %rd37, 4; \n"
"	@%p8 bra 	BB0_39; \n"
"	bra.uni 	BB0_9; \n"
" \n"
"BB0_39: \n"
"	ld.volatile.global.u32 	%r100, [_ZN21rti_internal_register21reg_exception_detail1E]; \n"
"	setp.eq.s32	%p29, %r100, 1; \n"
"	@%p29 bra 	BB0_46; \n"
" \n"
"	setp.eq.s32	%p30, %r100, 2; \n"
"	@%p30 bra 	BB0_44; \n"
"	bra.uni 	BB0_41; \n"
" \n"
"BB0_44: \n"
"	ld.volatile.global.u32 	%r46, [_ZN21rti_internal_register21reg_exception_detail0E]; \n"
"	ld.volatile.global.u32 	%r47, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r48, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r49, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	// inline asm \n"
"	call (%r103), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p33, %r103, 0; \n"
"	@%p33 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd37], %r46; \n"
"	st.local.u32 	[%rd3], %r47; \n"
"	st.local.v2.u32 	[%rd3+4], {%r48, %r49}; \n"
"	mov.u64 	%rd87, $str7; \n"
"	cvta.global.u64 	%rd88, %rd87; \n"
"	// Callseq Start 12 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd88; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd36; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r104, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 12 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_9: \n"
"	setp.eq.s32	%p9, %r78, 1018; \n"
"	@%p9 bra 	BB0_30; \n"
"	bra.uni 	BB0_10; \n"
" \n"
"BB0_30: \n"
"	ld.volatile.global.u32 	%r93, [_ZN21rti_internal_register21reg_exception_detail1E]; \n"
"	setp.eq.s32	%p23, %r93, 1; \n"
"	@%p23 bra 	BB0_37; \n"
" \n"
"	setp.eq.s32	%p24, %r93, 2; \n"
"	@%p24 bra 	BB0_35; \n"
"	bra.uni 	BB0_32; \n"
" \n"
"BB0_35: \n"
"	ld.volatile.global.u32 	%r36, [_ZN21rti_internal_register21reg_exception_detail0E]; \n"
"	ld.volatile.global.u32 	%r37, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r38, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r39, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd14, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	// inline asm \n"
"	call (%r96), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p27, %r96, 0; \n"
"	@%p27 bra 	BB0_67; \n"
" \n"
"	mov.u64 	%rd71, $str11; \n"
"	cvta.global.u64 	%rd72, %rd71; \n"
"	add.u64 	%rd73, %SP, 224; \n"
"	add.u64 	%rd74, %SPL, 224; \n"
"	st.local.u64 	[%rd74], %rd72; \n"
"	st.local.u64 	[%rd74+24], %rd14; \n"
"	st.local.v2.u32 	[%rd74+8], {%r36, %r37}; \n"
"	st.local.v2.u32 	[%rd74+16], {%r38, %r39}; \n"
"	mov.u64 	%rd75, $str10; \n"
"	cvta.global.u64 	%rd76, %rd75; \n"
"	// Callseq Start 9 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd76; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd73; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r97, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 9 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_55: \n"
"	ld.volatile.global.u32 	%r61, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r62, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r63, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd18, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	// inline asm \n"
"	call (%r112), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p40, %r112, 0; \n"
"	@%p40 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd35], %r61; \n"
"	st.local.u32 	[%rd2], %r62; \n"
"	st.local.u32 	[%rd2+4], %r63; \n"
"	st.local.u64 	[%rd2+12], %rd18; \n"
"	mov.u64 	%rd103, $str3; \n"
"	cvta.global.u64 	%rd104, %rd103; \n"
"	// Callseq Start 16 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd104; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd34; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r113, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 16 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_50: \n"
"	setp.ne.s32	%p37, %r107, 3; \n"
"	@%p37 bra 	BB0_67; \n"
" \n"
"	ld.volatile.global.u32 	%r53, [_ZN21rti_internal_register21reg_exception_detail0E]; \n"
"	ld.volatile.global.u32 	%r54, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r55, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r56, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd16, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	// inline asm \n"
"	call (%r108), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p38, %r108, 0; \n"
"	@%p38 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd35], %r53; \n"
"	st.local.u32 	[%rd2], %r54; \n"
"	st.local.v2.u32 	[%rd2+4], {%r55, %r56}; \n"
"	st.local.u64 	[%rd2+12], %rd16; \n"
"	mov.u64 	%rd95, $str5; \n"
"	cvta.global.u64 	%rd96, %rd95; \n"
"	// Callseq Start 14 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd96; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd34; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r109, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 14 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_10: \n"
"	setp.eq.s32	%p10, %r78, 1019; \n"
"	@%p10 bra 	BB0_28; \n"
"	bra.uni 	BB0_11; \n"
" \n"
"BB0_28: \n"
"	ld.volatile.global.u32 	%r29, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r30, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r31, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd10, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	ld.volatile.global.u64 	%rd11, [_ZN21rti_internal_register24reg_exception_64_detail1E]; \n"
"	ld.volatile.global.u64 	%rd12, [_ZN21rti_internal_register24reg_exception_64_detail2E]; \n"
"	// inline asm \n"
"	call (%r91), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p22, %r91, 0; \n"
"	@%p22 bra 	BB0_67; \n"
" \n"
"	add.u64 	%rd63, %SP, 176; \n"
"	add.u64 	%rd64, %SPL, 176; \n"
"	st.local.v2.u32 	[%rd64], {%r29, %r30}; \n"
"	st.local.u32 	[%rd64+8], %r31; \n"
"	st.local.u64 	[%rd64+16], %rd10; \n"
"	st.local.u64 	[%rd64+24], %rd11; \n"
"	st.local.u64 	[%rd64+32], %rd12; \n"
"	mov.u64 	%rd65, $str13; \n"
"	cvta.global.u64 	%rd66, %rd65; \n"
"	// Callseq Start 7 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd66; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd63; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r92, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 7 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_46: \n"
"	ld.volatile.global.u32 	%r50, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r51, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r52, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	// inline asm \n"
"	call (%r105), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p34, %r105, 0; \n"
"	@%p34 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd33], %r50; \n"
"	st.local.u32 	[%rd1], %r51; \n"
"	st.local.u32 	[%rd1+4], %r52; \n"
"	mov.u64 	%rd91, $str6; \n"
"	cvta.global.u64 	%rd92, %rd91; \n"
"	// Callseq Start 13 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd92; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd32; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r106, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 13 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_41: \n"
"	setp.ne.s32	%p31, %r100, 3; \n"
"	@%p31 bra 	BB0_67; \n"
" \n"
"	ld.volatile.global.u32 	%r43, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r44, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r45, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	// inline asm \n"
"	call (%r101), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p32, %r101, 0; \n"
"	@%p32 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd33], %r43; \n"
"	st.local.u32 	[%rd1], %r44; \n"
"	st.local.u32 	[%rd1+4], %r45; \n"
"	mov.u64 	%rd83, $str8; \n"
"	cvta.global.u64 	%rd84, %rd83; \n"
"	// Callseq Start 11 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd84; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd32; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r102, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 11 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_11: \n"
"	setp.eq.s32	%p11, %r78, 1022; \n"
"	@%p11 bra 	BB0_26; \n"
"	bra.uni 	BB0_12; \n"
" \n"
"BB0_26: \n"
"	ld.volatile.global.u32 	%r17, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r18, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r19, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd9, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	ld.volatile.global.u32 	%r20, [_ZN21rti_internal_register21reg_exception_detail0E]; \n"
"	ld.volatile.global.u32 	%r21, [_ZN21rti_internal_register21reg_exception_detail1E]; \n"
"	ld.volatile.global.u32 	%r22, [_ZN21rti_internal_register21reg_exception_detail2E]; \n"
"	ld.volatile.global.u32 	%r23, [_ZN21rti_internal_register21reg_exception_detail3E]; \n"
"	ld.volatile.global.u32 	%r24, [_ZN21rti_internal_register21reg_exception_detail4E]; \n"
"	ld.volatile.global.u32 	%r25, [_ZN21rti_internal_register21reg_exception_detail5E]; \n"
"	ld.volatile.global.u32 	%r26, [_ZN21rti_internal_register21reg_exception_detail6E]; \n"
"	ld.volatile.global.u32 	%r27, [_ZN21rti_internal_register21reg_exception_detail7E]; \n"
"	ld.volatile.global.u32 	%r28, [_ZN21rti_internal_register21reg_exception_detail8E]; \n"
"	// inline asm \n"
"	call (%r89), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p21, %r89, 0; \n"
"	@%p21 bra 	BB0_67; \n"
" \n"
"	mov.b32 	 %f1, %r20; \n"
"	cvt.ftz.f64.f32	%fd1, %f1; \n"
"	mov.b32 	 %f2, %r21; \n"
"	mov.b32 	 %f3, %r22; \n"
"	mov.b32 	 %f4, %r23; \n"
"	mov.b32 	 %f5, %r24; \n"
"	mov.b32 	 %f6, %r25; \n"
"	cvt.ftz.f64.f32	%fd2, %f6; \n"
"	mov.b32 	 %f7, %r27; \n"
"	mov.b32 	 %f8, %r28; \n"
"	add.u64 	%rd58, %SP, 80; \n"
"	add.u64 	%rd59, %SPL, 80; \n"
"	st.local.v2.u32 	[%rd59], {%r17, %r18}; \n"
"	st.local.u32 	[%rd59+8], %r19; \n"
"	mov.b64 	 %rd60, %fd1; \n"
"	st.local.u32 	[%rd59+72], %r26; \n"
"	st.local.v2.u64 	[%rd59+16], {%rd9, %rd60}; \n"
"	cvt.ftz.f64.f32	%fd3, %f3; \n"
"	cvt.ftz.f64.f32	%fd4, %f2; \n"
"	st.local.v2.f64 	[%rd59+32], {%fd4, %fd3}; \n"
"	cvt.ftz.f64.f32	%fd5, %f5; \n"
"	cvt.ftz.f64.f32	%fd6, %f4; \n"
"	st.local.v2.f64 	[%rd59+48], {%fd6, %fd5}; \n"
"	st.local.f64 	[%rd59+64], %fd2; \n"
"	cvt.ftz.f64.f32	%fd7, %f8; \n"
"	cvt.ftz.f64.f32	%fd8, %f7; \n"
"	st.local.v2.f64 	[%rd59+80], {%fd8, %fd7}; \n"
"	mov.u64 	%rd61, $str14; \n"
"	cvta.global.u64 	%rd62, %rd61; \n"
"	// Callseq Start 6 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd62; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd58; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r90, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 6 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_37: \n"
"	ld.volatile.global.u32 	%r40, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r41, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r42, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd15, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	// inline asm \n"
"	call (%r98), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p28, %r98, 0; \n"
"	@%p28 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd35], %r40; \n"
"	st.local.u32 	[%rd2], %r41; \n"
"	st.local.u32 	[%rd2+4], %r42; \n"
"	st.local.u64 	[%rd2+12], %rd15; \n"
"	mov.u64 	%rd79, $str9; \n"
"	cvta.global.u64 	%rd80, %rd79; \n"
"	// Callseq Start 10 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd80; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd34; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r99, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 10 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_32: \n"
"	setp.ne.s32	%p25, %r93, 3; \n"
"	@%p25 bra 	BB0_67; \n"
" \n"
"	ld.volatile.global.u32 	%r32, [_ZN21rti_internal_register21reg_exception_detail0E]; \n"
"	ld.volatile.global.u32 	%r33, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r34, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r35, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd13, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	// inline asm \n"
"	call (%r94), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p26, %r94, 0; \n"
"	@%p26 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd35], %r32; \n"
"	st.local.u32 	[%rd2], %r33; \n"
"	st.local.v2.u32 	[%rd2+4], {%r34, %r35}; \n"
"	st.local.u64 	[%rd2+12], %rd13; \n"
"	mov.u64 	%rd69, $str12; \n"
"	cvta.global.u64 	%rd70, %rd69; \n"
"	// Callseq Start 8 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd70; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd34; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r95, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 8 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_12: \n"
"	setp.eq.s32	%p12, %r78, 1003; \n"
"	@%p12 bra 	BB0_24; \n"
"	bra.uni 	BB0_13; \n"
" \n"
"BB0_24: \n"
"	ld.volatile.global.u32 	%r14, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r15, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r16, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd5, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	ld.volatile.global.u64 	%rd6, [_ZN21rti_internal_register24reg_exception_64_detail1E]; \n"
"	ld.volatile.global.u64 	%rd7, [_ZN21rti_internal_register24reg_exception_64_detail2E]; \n"
"	ld.volatile.global.u64 	%rd8, [_ZN21rti_internal_register24reg_exception_64_detail3E]; \n"
"	// inline asm \n"
"	call (%r87), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p20, %r87, 0; \n"
"	@%p20 bra 	BB0_67; \n"
" \n"
"	add.u64 	%rd54, %SP, 32; \n"
"	add.u64 	%rd55, %SPL, 32; \n"
"	st.local.v2.u32 	[%rd55], {%r14, %r15}; \n"
"	st.local.u32 	[%rd55+8], %r16; \n"
"	st.local.v2.u64 	[%rd55+16], {%rd5, %rd6}; \n"
"	st.local.v2.u64 	[%rd55+32], {%rd7, %rd8}; \n"
"	mov.u64 	%rd56, $str15; \n"
"	cvta.global.u64 	%rd57, %rd56; \n"
"	// Callseq Start 5 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd57; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd54; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r88, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 5 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_13: \n"
"	setp.eq.s32	%p13, %r78, 1004; \n"
"	@%p13 bra 	BB0_22; \n"
"	bra.uni 	BB0_14; \n"
" \n"
"BB0_22: \n"
"	ld.volatile.global.u32 	%r10, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r11, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r12, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	ld.volatile.global.u64 	%rd4, [_ZN21rti_internal_register24reg_exception_64_detail0E]; \n"
"	ld.volatile.global.u32 	%r13, [_ZN21rti_internal_register21reg_exception_detail0E]; \n"
"	// inline asm \n"
"	call (%r85), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p19, %r85, 0; \n"
"	@%p19 bra 	BB0_67; \n"
" \n"
"	add.u64 	%rd50, %SP, 0; \n"
"	add.u64 	%rd51, %SPL, 0; \n"
"	st.local.v2.u32 	[%rd51], {%r10, %r11}; \n"
"	st.local.u32 	[%rd51+8], %r12; \n"
"	st.local.u32 	[%rd51+24], %r13; \n"
"	st.local.u64 	[%rd51+16], %rd4; \n"
"	mov.u64 	%rd52, $str16; \n"
"	cvta.global.u64 	%rd53, %rd52; \n"
"	// Callseq Start 4 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd53; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd50; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r86, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 4 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_14: \n"
"	add.s32 	%r3, %r78, -1024; \n"
"	setp.lt.u32	%p14, %r3, 64512; \n"
"	@%p14 bra 	BB0_20; \n"
"	bra.uni 	BB0_15; \n"
" \n"
"BB0_20: \n"
"	ld.volatile.global.u32 	%r7, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r8, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r9, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	// inline asm \n"
"	call (%r83), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p18, %r83, 0; \n"
"	@%p18 bra 	BB0_67; \n"
" \n"
"	add.s32 	%r120, %r78, -1024; \n"
"	st.local.u32 	[%rd37], %r120; \n"
"	st.local.u32 	[%rd3], %r7; \n"
"	st.local.v2.u32 	[%rd3+4], {%r8, %r9}; \n"
"	mov.u64 	%rd48, $str17; \n"
"	cvta.global.u64 	%rd49, %rd48; \n"
"	// Callseq Start 3 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd49; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd36; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r84, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 3 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_15: \n"
"	setp.eq.s32	%p15, %r78, 1023; \n"
"	ld.volatile.global.u32 	%r4, [_ZN21rti_internal_register14reg_rayIndex_xE]; \n"
"	ld.volatile.global.u32 	%r5, [_ZN21rti_internal_register14reg_rayIndex_yE]; \n"
"	ld.volatile.global.u32 	%r6, [_ZN21rti_internal_register14reg_rayIndex_zE]; \n"
"	@%p15 bra 	BB0_18; \n"
"	bra.uni 	BB0_16; \n"
" \n"
"BB0_18: \n"
"	// inline asm \n"
"	call (%r81), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p17, %r81, 0; \n"
"	@%p17 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd33], %r4; \n"
"	st.local.u32 	[%rd1], %r5; \n"
"	st.local.u32 	[%rd1+4], %r6; \n"
"	mov.u64 	%rd44, $str18; \n"
"	cvta.global.u64 	%rd45, %rd44; \n"
"	// Callseq Start 2 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd45; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd32; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r82, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 2 \n"
"	bra.uni 	BB0_67; \n"
" \n"
"BB0_16: \n"
"	// inline asm \n"
"	call (%r79), _rt_print_active, (); \n"
"	// inline asm \n"
"	setp.eq.s32	%p16, %r79, 0; \n"
"	@%p16 bra 	BB0_67; \n"
" \n"
"	st.local.u32 	[%rd33], %r4; \n"
"	st.local.u32 	[%rd1], %r5; \n"
"	st.local.u32 	[%rd1+4], %r6; \n"
"	mov.u64 	%rd40, $str19; \n"
"	cvta.global.u64 	%rd41, %rd40; \n"
"	// Callseq Start 1 \n"
"	{ \n"
"	.reg .b32 temp_param_reg; \n"
"	// <end>} \n"
"	.param .b64 param0; \n"
"	st.param.b64	[param0+0], %rd41; \n"
"	.param .b64 param1; \n"
"	st.param.b64	[param1+0], %rd32; \n"
"	.param .b32 retval0; \n"
"	call.uni (retval0),  \n"
"	vprintf,  \n"
"	( \n"
"	param0,  \n"
"	param1 \n"
"	); \n"
"	ld.param.b32	%r80, [retval0+0]; \n"
"	 \n"
"	//{ \n"
"	}// Callseq End 1 \n"
"	bra.uni 	BB0_67; \n"
"} \n"
" \n"
" \n"
;
// clang-format on
