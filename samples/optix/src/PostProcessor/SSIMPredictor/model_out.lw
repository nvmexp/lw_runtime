/******************************************************************************
 * Copyright 2019 LWPU Corporation. All rights reserved.
 *****************************************************************************/

#include <cmath>

#include <algorithm>
#include <map>
#include <memory>
#include <vector>

#include <lwda_runtime.h>
#include <device_launch_parameters.h>


#include "model.h"
#include "model_inline.h"
#include "util.h"

namespace LW {
namespace SSIM {

template <typename T, typename Out, bool apply_clip>
static __global__ void k_copy_output( Out*     out,
                                      const T* in,
                                      int      yoffset,
                                      int      w,
                                      int      h,
                                      int      xr,
                                      int      yr,
                                      int      inc,        // in channels, 1 or 3
                                      int      outc,       // out channels, 1 or 3
                                      int      out_field,  // 1 for nchw, 3 or more for nhwc
                                      int      copy_h )
{
    const int x = blockIdx.x * blockDim.x + threadIdx.x;
    const int y = blockIdx.y * blockDim.y + threadIdx.y;

    // hack to workaround partial function template specialization with In=int8
    // Note: cannot use half computations, there is no half-to-unsigned char colwersion.
    float mul = sizeof( Out ) == 1 ? 255.0f : 1.0f;

    if( x < xr && y < copy_h )
    {
        const int N  = w * h;
        const int IN = xr * yr;
        float     v0 = float( in[( yoffset + y ) * w + x + 0 * N] ) * mul;
        if( apply_clip )
            v0 = __saturate( v0 );

        float v1 = 0.0f;
        float v2 = 0.0f;

        if( inc == 3 )
        {
            v1 = float( in[( yoffset + y ) * w + x + 1 * N] ) * mul;
            if( apply_clip )
                v1 = __saturatef( v1 );

            v2 = float( in[( yoffset + y ) * w + x + 2 * N] ) * mul;
            if( apply_clip )
                v2 = __saturatef( v2 );
        }

        if( outc == 3 )
        {
            int i0, i1, i2;
            if( out_field > 1 )
            {
                i0 = ( y * xr + x ) * out_field;
                i1 = i0 + 1;
                i2 = i0 + 2;
            }
            else
            {
                i0 = y * xr + x;
                i1 = i0 + IN;
                i2 = i0 + 2 * IN;
            }

            out[i0] = v0;
            out[i1] = inc == 1 ? v0 : v1;
            out[i2] = inc == 1 ? v0 : v2;
        }
        else
        {
            if( inc == 3 )
                out[( y * xr + x ) * out_field] = ( v0 + v1 + v2 ) / 3.0f;
            else
                out[( y * xr + x ) * out_field] = v0;
        }
    }
}


// Copy back output data
template <typename T>
template <typename Out>
void Layer<T>::copy_output( Out* result,
                            bool tohost,
                            Out* tmp,
                            int  width,
                            int  height,
                            int  inc,        // in-channels, 1 or 3
                            int  outc,       // out-channels, 1 or 3
                            int  out_field,  // 1 for nchw, 3 or more for nhwc
                            int  yoffset,
                            int  copy_h,
                            bool apply_clip )
{
    if( out_field < 3 )
        out_field = 1;

    // need to zero-out tmp memory if not everything is initialized explicitly
    if( out_field > outc )
        checkLwdaErrors( lwdaMemsetAsync( tmp, 0, sizeof( Out ) * m_width * copy_h * out_field, m_stream ) );

    //printf("copy output: width %d, height %d, nchannel %d, yoffset %d, copy_h %d\n", width, height, nchannel, yoffset, copy_h);

    dim3 dimBlock( LWDA_BLOCK, LWDA_BLOCK );
    dim3 blockGrid = dim3( RoundUp( width, dimBlock.x ), RoundUp( copy_h, dimBlock.y ) );

    if( apply_clip )
        k_copy_output<T, Out, true><<<blockGrid, dimBlock, 0, m_stream>>>( tmp, static_cast<T*>( m_outData ), yoffset,
                                                                           m_outWidth, m_outHeight, m_width, m_height,
                                                                           inc, outc, out_field, copy_h );
    else
        k_copy_output<T, Out, false><<<blockGrid, dimBlock, 0, m_stream>>>( tmp, static_cast<T*>( m_outData ), yoffset,
                                                                            m_outWidth, m_outHeight, m_width, m_height,
                                                                            inc, outc, out_field, copy_h );

    if( out_field == 1 )
    {
        for( int i = 0; i < outc; i++ )
            checkLwdaErrors( lwdaMemcpy2DAsync( result + i * width * height, sizeof( Out ) * width, tmp + i * m_width * m_height,
                                                sizeof( Out ) * m_width, sizeof( Out ) * std::min( width, (int)m_width ), copy_h,
                                                tohost ? lwdaMemcpyDeviceToHost : lwdaMemcpyDeviceToDevice, m_stream ) );
    }
    else
    {
        checkLwdaErrors( lwdaMemcpy2DAsync( result, sizeof( Out ) * width * out_field, tmp, sizeof( Out ) * m_width * out_field,
                                            sizeof( Out ) * std::min( width, (int)m_width ) * out_field, copy_h,
                                            tohost ? lwdaMemcpyDeviceToHost : lwdaMemcpyDeviceToDevice, m_stream ) );
    }
}

// In order to speed up compilation, we need put template implementation code into .lw instead of .h/_inline.h,
// so we need to explicitly instantiate all template parameters possibly used.

template void Layer<float>::copy_output<float>( float* result,
                                                bool   tohost,
                                                float* tmp,
                                                int    width,
                                                int    height,
                                                int    inc,
                                                int    outc,
                                                int    out_field,
                                                int    yoffset,
                                                int    copy_h,
                                                bool   apply_clip );

template void Layer<float>::copy_output<__half>( __half* result,
                                                 bool    tohost,
                                                 __half* tmp,
                                                 int     width,
                                                 int     height,
                                                 int     inc,
                                                 int     outc,
                                                 int     out_field,
                                                 int     yoffset,
                                                 int     copy_h,
                                                 bool    apply_clip );

template void Layer<float>::copy_output<unsigned char>( unsigned char* result,
                                                        bool           tohost,
                                                        unsigned char* tmp,
                                                        int            width,
                                                        int            height,
                                                        int            inc,
                                                        int            outc,
                                                        int            out_field,
                                                        int            yoffset,
                                                        int            copy_h,
                                                        bool           apply_clip );

template void Layer<__half>::copy_output<float>( float* result,
                                                 bool   tohost,
                                                 float* tmp,
                                                 int    width,
                                                 int    height,
                                                 int    inc,
                                                 int    outc,
                                                 int    out_field,
                                                 int    yoffset,
                                                 int    copy_h,
                                                 bool   apply_clip );

template void Layer<__half>::copy_output<__half>( __half* result,
                                                  bool    tohost,
                                                  __half* tmp,
                                                  int     width,
                                                  int     height,
                                                  int     inc,
                                                  int     outc,
                                                  int     out_field,
                                                  int     yoffset,
                                                  int     copy_h,
                                                  bool    apply_clip );

template void Layer<__half>::copy_output<unsigned char>( unsigned char* result,
                                                         bool           tohost,
                                                         unsigned char* tmp,
                                                         int            width,
                                                         int            height,
                                                         int            inc,
                                                         int            outc,
                                                         int            out_field,
                                                         int            yoffset,
                                                         int            copy_h,
                                                         bool           apply_clip );


}  // namespace SSIM
}  // namespace LW
