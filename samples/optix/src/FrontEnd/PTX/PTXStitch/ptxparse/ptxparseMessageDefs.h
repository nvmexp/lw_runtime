/*
 * LWIDIA_COPYRIGHT_BEGIN
 *
 * Copyright (c) 2021, LWPU CORPORATION.  All rights reserved.
 *
 * LWPU CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from LWPU CORPORATION is strictly prohibited.
 *
 * LWIDIA_COPYRIGHT_END
 */

/*
 *  Module name              : ptxparseMessageDefs.h
 *
 *  Description              :
 *
 *         This file defines the messages generated
 *         by the VP compiler
 */

#ifndef ptxparseMessageDefs_INCLUDED
#define ptxparseMessageDefs_INCLUDED

#include <misc/stdMessageDefsBegin.h>

MSG( ptxMsgInputFileNotFound,         Fatal,  "Input file '%s' could not be opened"                                               )
MSG( ptxMsgParsingError,              Fatal,  "Parsing error near '%s': %s"                                                       )
MSG( ptxMsgParsingErrorNonFatal,      Error,  "Parsing error near '%s': %s"                                                       )
MSG( ptxMsgParsingObfuscatedError,    Fatal,  "Error reading obfuscated PTX file"                                                 )
MSG( ptxMsgIllegalAddressSize,        Error,  "Illegal value for .address_size directive (must be 32 or 64)"                      )
MSG( ptxMsgIllegalKernelAttr,         Error,  "Illegal placement of kernel parameter attribute"                                   )
MSG( ptxMsgKernelParamOverflow,       Error,  "Entry function '%s' uses too much parameter space (0x%x bytes, 0x%x max)."         )
MSG( ptxMsgConstantOverflow,          Error,  "Constant overflow"                                                                 )
MSG( ptxMsgIntConstantExpected,       Error,  "Integer constant expression expected"                                              )
MSG( ptxMsgConstExprTypeMismatch,     Error,  "Constant expression type mismatch"                                                 )
MSG( ptxMsgConstDivByZero,            Error,  "Constant expression has division by zero"                                          )
MSG( ptxMsgUnsupportedCast,           Error,  "Unsupported cast operation"                                                        )
MSG( ptxMsgDuplicateLabel,            Error,  "Duplicate definition of label '%s'"                                                )
MSG( ptxMsgDuplicateVariable,         Error,  "Duplicate definition of variable '%s'"                                             )
MSG( ptxMsgDuplicateFunction,         Error,  "Duplicate definition of function '%s'"                                             )
MSG( ptxMsgDuplicateMacro,            Error,  "Duplicate definition of macro '%s'"                                                )
MSG( ptxMsgBuiltilwariableRedeclared, Warning,"Duplicate definition of built-in variable '%s'"                                    )
MSG( ptxMsgEntryMismatch,             Error,  "Inconsistent redefinition of '%s' as entry and function"                           )
MSG( ptxMsgFunctionArgsDiffer,        Error,  "Inconsistent prototypes of '%s', %s differ"                                        )
MSG( ptxMsgFunctionArgsAllOrNoAllocNo,Error,  "Function '%s' uses .allocno for some input and return parameters but not all"      )
MSG( ptxMsgFunctionArgAlignError,     Error,  "Parameter '%s' has illegal alignment (must be aligned to 1, 2, 4, 8, 16, 32, 64, or 128 bytes)" )
MSG( ptxMsgUnalignedAllocNo,          Error,  "Parameter '%s' uses .allocno %d which is not aligned for type '%s'"                )
MSG( ptxMsgOverlappedAllocno,         Error,  "Parameter '%s' uses .allocno %d which overlaps with other parameter\'s .allocno"   )
MSG( ptxMsgFunctionNotDeclared,       Error,  "Function '%s' not declared in this scope"                                          )
MSG( ptxMsgCallTargetUnrecognized,    Fatal,  "Call target not recognized"                                                        )
MSG( ptxMsgCallNArgsDiffer,           Error,  "Call has wrong number of parameters"                                               )
MSG( ptxMsgCallArgTypesDiffer,        Error,  "Type of argument does not match formal parameter '%s'"                             )
MSG( ptxMsgCallArgAlignmentsDiffer,   Error,  "Alignment of argument does not match formal parameter '%s'"                        )
MSG( ptxMsgIllegalCallArg,            Error,  "Illegal argument for formal parameter '%s'"                                        )
MSG( ptxMsgIllegalTarget,             Error,  "Illegal target for instruction '%s'"                                               )
MSG( ptxMsgIncompleteArrayType,       Error,  "Array of incomplete type"                                                          )
MSG( ptxMsgU32orU64TypeRequired,      Error,  "Variable '%s' must be type .u32 or .u64"                                           )
MSG( ptxMsgIllegalBranchtarget,       Error,  "Illegal branch target, label expected"                                             )
MSG( ptxMsgIllegalCalltarget,         Error,  "Illegal call target, device function expected"                                     )
MSG( ptxMsgIllegalLabelReference,     Fatal,  "Label expected for forward reference of '%s'"                                      )
MSG( ptxMsgLabelExpected,             Error,  "Label expected for argument %d of instruction '%s'"                                )
MSG( ptxMsgBranchTargetExpected,      Error,  "Label with '.branchtargets' directive expected for argument %d of instruction '%s'")
MSG( ptxMsgLabelOrRegExpected,        Error,  "Label or register expected for argument %d of instruction '%s'"                    )
MSG( ptxMsgLabelOrArrayExpected,      Fatal,  "Label or %s array expected for argument %d of instruction '%s'"                    )
MSG( ptxMsgConstOrGlobalArrayExpected,Fatal,  ".const or .global array expected for argument %d of instruction '%s'"              )
MSG( ptxMsgAddressExpected,           Error,  "Address expected for argument %d of instruction '%s'"                              )
MSG( ptxMsgIllegalAddressingMode,     Error,  "Illegal Addressing Mode in instruction '%s'"                                       )
MSG( ptxMsgUnaddressableParam,        Error,  "Illegal to take address of parameter '%s'"                                         )
MSG( ptxMsgBasicVectorType,           Error,  "Vector type only allowed over basic types"                                         )
MSG( ptxMsgIncompleteType,            Error,  "Non-external variable '%s' has incomplete type"                                    )
MSG( ptxMsgPredVarMustBeInRegister,   Error,  "Predicate variable '%s' must be in register state space"                           )
MSG( ptxMsgPredTypeNotRegisterVar,    Error,  "Predicate type can only be used to define scalar register variables"               )
MSG( ptxMsgNotInRegister,             Error,  "Variable '%s' cannot be allocated into a register"                                 )
MSG( ptxMsgNotInParameter,            Error,  "Variable '%s' cannot be allocated in .param state space"                           )
MSG( ptxMsgIllegalImmediateAddress,   Error,  "Immediate addresses allowed only for .local state space"                           )
MSG( ptxMsgIllegalScope,              Error,  "Illegal scope for variable '%s'"                                                   )
MSG( ptxMsgInconsistentRedef,         Error,  "Inconsistent redefinition of variable '%s'"                                        )
MSG( ptxMsgMustBeGlobal,              Error,  "'.extern' variable '%s' cannot be resolved by a '.static'"                         )
MSG( ptxMsgIllegalExternFunction,     Error,  "Function definition conflicts with '.extern' declaration for function '%s'"        )
MSG( ptxMsgTexRequiresModuleScope,    Error,  "Texture variables must be declared at module scope"                                )
MSG( ptxMsgOpaqueModuleOrEntryScope,  Error,  "Texture/surface variable must be at module or entry parameter scope"               )
MSG( ptxMsgRequiresGlobalSpace,       Error,  "%s variables must be declared in .global space"                                    )
MSG( ptxMsgParamRequiresEntryScope,   Error,  "Parameter variables must be declared within .entry function"                       )
MSG( ptxMsgParamIllegalAtModuleScope, Error,  "Parameter variables may not be declared at module scope"                           )
MSG( ptxMsgEntryParamListRequired,    Error,  "Parameter variables must be declared within .entry parameter list"                 )
MSG( ptxMsgEntryParamIllegalSpace,    Error,  "Entry parameter '%s' must have .param state space"                                 )
MSG( ptxMsgIllegalParamName,          Error,  "Illegal parameter name '%s'"                                                       )
MSG( ptxMsgFunctionParamIllegalSpace, Error,  "Function parameter '%s' has illegal state space"                                   )
MSG( ptxMsgMultiReturnMustBeRegister, Error,  "Multiple return parameters require .register state space"                          )
MSG( ptxMsgIllegalReadOfReturnParam,  Error,  "Illegal to read function return parameter '%s'"                                    )
MSG( ptxMsgIllegalWriteToInputParam,  Error,  "Illegal to write to function input parameter '%s'"                                 )
MSG( ptxMsgCallArgIllegalSpace,       Error,  "Call argument '%s' has illegal state space"                                        )
MSG( ptxMsgFormalParamAsCallArg,      Error,  "Formal parameter '%s' declared in .param space cannot be used as argument to call" )
MSG( ptxMsgCallArgSpacesDiffer,       Error,  "Inconsistent state space for parameter '%s'"                                       )
MSG( ptxMsgConstBankReserved,         Error,  "Constant banks 1..%d are reserved for external incomplete arrays"                  )
MSG( ptxMsgIllegalConstBank,          Error,  "Illegal bank number: %d"                                                           )
MSG( ptxMsgIllegalVectorSize,         Error,  "Illegal vector size: %d"                                                           )
MSG( ptxMsgVaryingVectorType,         Error,  "Vector with elements of different types are not allowed in %s instruction"         )
MSG( ptxMsgArrayIndexTypeMismatch,    Error,  "Array index in the '%s' instruction has unexpected type. Expecting type .u32"      )
MSG( ptxMsgVectorTypeTooLarge,        Error,  "Vector type too large, exceeds 128 bit limit"                                      )
MSG( ptxMsgTypeRestricted,            Error,  "Type %s may only be used as an instruction type"                                   )
MSG( ptxMsgIllegalIndex,              Error,  "Array indexing on non-array"                                                       )
MSG( ptxMsgUnknownField,              Error,  "Unknown field '%s'"                                                                )
MSG( ptxMsgUnknownSymbol,             Error,  "Unknown symbol '%s'"                                                               )
MSG( ptxMsgIllegalExpression,         Error,  "Illegal expression '%s'"                                                           )
MSG( ptxMsgNonMatchingInstrArgs,      Error,  "Arguments mismatch for instruction '%s'"                                           )
MSG( ptxMsgNonMatchingInstrTypes,     Error,  "Unexpected instruction types specified for '%s'"                                   )
MSG( ptxMsgNonMatchingInstrTypesWarn, Warning,"Unexpected instruction types specified for '%s'"                                   )
MSG( ptxMsgNotAllowedModForShape,     Error,  "Modifier %s not allowed for shape '%s'"                                            )
MSG( ptxMsgNonMatchingShapeTypes,     Error,  "Incorrect instruction type specified for %s with shape '%s'"                       )
MSG( ptxMsgNotAllowedModForInstShape, Error,  "Modifier %s not allowed for instruction %s with shape '%s'"                        )
MSG( ptxMsgShapeRequiresModifier,     Error,  "Modifier '%s' require for instruction %s with shape '%s'"                          )
MSG( ptxMsgCDTypeMismatchForShape,    Error,  ".dtype must be '%s' when .ctype is '%s' for '%s' instruction with shape '%s'"      )
MSG( ptxMsgNonMatchingOperations,     Error,  "Incorrect operations specified for %s with shape '%s'"                             )
MSG( ptxMsgIncorrectNumberOperations, Error,  "Unexpected number of operations specified for %s with shape '%s'"                  )
MSG( ptxMsgIncorrectNumberInstrTypes, Error,  "Unexpected number of instruction types specified for %s with shape '%s'"           )
MSG( ptxMsgUnknownInstructionName,    Error,  "Not a name of any known instruction: '%s'"                                         )
MSG( ptxMsgIllegalShapeType,          Error,  "Illegal instruction types specified for '%s' with shape '%s'"                      )
MSG( ptxMsgResultPredNotAllowed,      Error,  "Predicate output not allowed for instruction '%s'"                                 )
MSG( ptxMsgResultPredExpected,        Error,  "Predicate output expected for instruction '%s'"                                    )
MSG( ptxMsgNoOrderOnSpace,            Error,  "Modifier '%s' cannot be applied to '%s' space"                                     )
MSG( ptxMsgModIlwalidWithStateSpace,  Error,  "Modifier '%s' cannot be applied to '%s' space for instruction '%s'"                )
MSG( ptxMsgIllegalModifierPair,       Error,  "Modifier '%s' cannot be combined with modifier '%s'"                               )
MSG( ptxMsgModifierRequiresFeature,   Error,  "Modifier '%s' requires %s with '%s' instruction"                                   )
MSG( ptxMsgModifierRequiresModifier,  Error,  "Modifier '%s' requires modifier '%s'"                                              )
MSG( ptxMsgNCWrongSpace,              Error,  "Modifier '.nc' requires .global space"                                             )
MSG( ptxMsgNCIllegalCacheOp,          Error,  "Illegal cache operation for instruction 'ld.nc'"                                   )
MSG( ptxMsgModifierRequired,          Error,  "%s modifier required for instruction '%s'"                                         )
MSG( ptxMsgModifierRequiredWithArgs,  Error,  "%s modifier required for instruction '%s' with %d arguments"                       )
MSG( ptxMsgModifierRequiredWithType,  Error,  "'%s' modifier required for instruction '%s' with type '%s'"                          )
MSG( ptxMsgModifierRequiredWithTypeAndOp,  Error,  "Modifier '%s' required for instruction '%s' with type '%s' and operation '%s'"  )
MSG( ptxMsgModRequiredWithMod,        Error,  "%s modifier required for instruction '%s' with modifier '%s'"                      )
MSG( ptxMsgCvtFTZNotAllowed,          Error,  "Modifier '.ftz' does not apply to this type of colwert operation"                  )
MSG( ptxMsgSATNotAllowed,             Error,  "Modifier '.sat' does not apply to '%s' type"                                       )
MSG( ptxMsgCCRequiresIntType,         Error,  "Modifier '.cc' applies only to %s integer types"                                   )
MSG( ptxMsgPredicateExpected,         Error,  "Predicate expression expected"                                                     )
MSG( ptxMsgVectorResultExpected,      Error,  "Result vector expected"                                                            )
MSG( ptxMsgVectorArgumentExpected,    Error,  "Vector expected for argument %d"                                                   )
MSG( ptxMsgVectorArgumentNotExpected, Error,  "Vector is not expected for argument %d of instruction '%s'"                        )
MSG( ptxMsgVectorArgumentSizeExpected,Error,  "Vector of size %d is expected for argument %d of instruction '%s'"                 )
MSG( ptxMsgArgumentVectorMismatch,    Error,  "Argument vector size mismatch for instruction '%s'"                                )
MSG( ptxMsgVectorOperandNotAllowed,   Error,  "Vector operand is not allowed for instruction '%s'"                                )
MSG( ptxMsgIllegalVecVecMov,          Error,  "Illegal vector-vector operands for vector-scalar or scalar-vector mov instruction" )
MSG( ptxMsgDoubleCMP,                 Error,  "Multiple comparisons set"                                                          )
MSG( ptxMsgDoublePtxOp,               Error,  "Multiple instruction post-operation flags set"                                     )
MSG( ptxMsgDoubleVmadModifier,        Error,  "Conflicting use of '.po' modifier with operand negation"                           )
MSG( ptxMsgUnknowlwectorSelector,     Error,  "Unknown vector selector: '%c'"                                                     )
MSG( ptxMsgUnknowlwideoSelector,      Error,  "Unknown video selector: '%s'"                                                      )
MSG( ptxMsgIncorrectVideoSelector,    Error,  "Incorrect video selector for operand %d"                                           )
MSG( ptxMsgIncorrectByteSelector,     Error,  "Incorrect byte selector for operand %d of instruction '%s'"                        )
MSG( ptxMsgByteSelectorRequired,      Error,  "Byte selector is required for operand %d of instruction '%s'"                      )
MSG( ptxMsgArgIllegalByteSelectMods,  Error,  "Argument %d of instruction '%s': incompatible Byte/word selector when '%s' and '%s'" )
MSG( ptxMsgArgumentVectorMismatchArgNum,  Error,  "Argument %d of instruction '%s': Argument vector size mismatch"                )
MSG( ptxMsgByteWordSelectorRequired,      Error, "Byte/Word selector is required for operand %d of instruction '%s'"              )
MSG( ptxMsgMismatchByteSelectorForMods,   Error, "Incompatible Byte/Word selector when '%s' and '%s'"                             )
MSG( ptxMsgByteSelectorNotAllowedForMods, Error, "Unexpected Byte/Word selector when '%s' and '%s'"                               )
MSG( ptxMsgVideoNoDestSlctWithSecOp,  Error,  "Video instruction cannot have destination selector and secondary operation"        )
MSG( ptxMsgVideoDestSlctNotAllowed,   Error,  "Video selector is not allowed on destination for instruction '%s'"                 )
MSG( ptxMsgVideoSrcSlctNotAllowed,    Error,  "Video selector is not allowed on source operand for instruction '%s'"              )
MSG( ptxMsgVideoSrcCSlctNotAllowed,   Error,  "Video selector is not allowed on 'source C' operand"                               )
MSG( ptxMsgVideoIllegalSecOp,         Error,  "Illegal secondary operation for video instruction '%s'"                            )
MSG( ptxMsgVideoIllegalSatAddCombo,   Error,  "Illegal combination of .sat and .add modifiers"                                    )
MSG( ptxMsgIllegalMinusCombination,   Error,  "Operand negation limited to either (source A xor source B) or source C"            )
MSG( ptxMsgIllegalMinusArgument,      Error,  "Illegal argument to unary minus"                                                   )
MSG( ptxMsgIllegalNotArgument,        Error,  "Illegal argument to predicate negation"                                            )
MSG( ptxMsgOutputVectorModeNotAllowed,Error,  "Vector qualifier is not allowed for instruction '%s'"                              )
MSG( ptxMsgGlobalExpected,            Error,  "Global state space expected for instruction '%s'"                                  )
MSG( ptxMsgCMPTypeMismatch,           Error,  "Mismatch between instruction type and comparison qualifier"                        )
MSG( ptxMsgOutputCMPNotAllowed,       Error,  "Comparison qualifier is not allowed for instruction '%s'"                          )
MSG( ptxMsgOutputBOPExpected,         Error,  "Boolean operation is required for instruction '%s'"                                )
MSG( ptxMsgOutputAOPNotAllowed,       Error,  "Illegal reduction operation for instruction '%s%s%s'"                              )
MSG( ptxMsgOutputAOPExpected,         Error,  "Reduction operation is required for instruction '%s'"                              )
MSG( ptxMsgOutputCASExpected,         Error,  "Operation 'cas' expected for '%s' with three source operands"                      )
MSG( ptxMsgIllegalOp,                 Error,  "Illegal operation '%s' for instruction '%s'"                                       )
MSG( ptxMsgOpRequiresType,            Error,  "Operation %s requires %s type for instuction '%s'"                                 )
MSG( ptxMsgOpRequiresU32,             Error,  "Operation requires .u32 type"                                                      )
MSG( ptxMsgOpRequiresPred,            Error,  "Operation requires .pred type"                                                     )
MSG( ptxMsgOpIncorrectType,           Error,  "Incorrect type '%s' for operation '%s' in instruction '%s'"                        )
MSG( ptxMsgInstRequiresType,          Error,  "Instruction '%s' requires '%s' type"                                               )
MSG( ptxMsgInstRequiresTypeModifier,  Error,  "Instruction '%s' requires '%s' type with '%s' modifier."                           )
MSG( ptxMsgInstRequiresU32orU64,      Error,  "Instruction '%s' requires .u32 or .u64 type"                                       )
MSG( ptxMsgResultExpected,            Error,  "Result register required for instruction '%s'"                                     )
MSG( ptxMsgRegisterExpected,          Error,  "Argument %d of instruction '%s': must be register"                                 )
MSG( ptxMsgTexRefExpected,            Error,  "Argument %d of instruction '%s': .texref expected"                                 )
MSG( ptxMsgSamplerRefExpected,        Error,  "Argument %d of instruction '%s': .samplerref expected"                             )
MSG( ptxMsgSurfRefExpected,           Error,  "Argument %d of instruction '%s': .surfref expected"                                )
MSG( ptxMsgTexRefOrU64Expected,       Error,  "Argument %d of instruction '%s': .texref or .u64 register expected"                )
MSG( ptxMsgSurfRefOrU64Expected,      Error,  "Argument %d of instruction '%s': .surfref or .u64 register expected"               )
MSG( ptxMsgSamplerRefOrU64Expected,   Error,  "Argument %d of instruction '%s': .samplerref or .u64 register expected"            )
MSG( ptxMsgSpecialPredicateExpected,  Error,  "Argument %d of instruction '%s': special predicate register '%%pred<7>' expected"  )
MSG( ptxMsgSpecialPredsNotDescending, Error,  "Argument %d of instruction '%s': special predicates expected in descending order"  )
MSG( ptxMsgDuplicateNotAllowed,       Error,  "Argument %d of instruction '%s': duplicate elements are not allowed in destination vector")
MSG( ptxMsgVectorSizeNotEqualToMask,  Error,  "Argument %d of instruction '%s': vector size should be equal to number of bits set in mask")
MSG( ptxMsgMaskSizeIncorrect,         Error,  "Argument %d of instruction '%s': value of mask should be between 1 and 127"        )
MSG( ptxMsgTexModeViolation,          Error,  "Instruction or declaration violates .target texmode_%s setting"                    )
MSG( ptxMsgIndirectTexRequiresU64,    Error,  "Indirect access to texture requires .u64 type"                                     )
MSG( ptxMsgIndirectSamplerRequiresU64,Error,  "Indirect access to sampler requires .u64 type"                                     )
MSG( ptxMsgIndirectSurfRequiresU64,   Error,  "Indirect access to surface requires .u64 type"                                     )
MSG( ptxMsgIndirectTexRequiresUnified,Error,  "Indirect access to texture requires unified texture mode"                          )
MSG( ptxMsgConstOrRegArgRequired,     Error,  "Argument %d of instruction '%s': must be register or constant"                     )
MSG( ptxMsgConstantArgRequired,       Error,  "Argument %d of instruction '%s': must be constant"                                 )
MSG( ptxMsgDifferentArgSizeExpected,  Error,  "Argument %d of instruction '%s': must be %d-bit size"                              )
MSG( ptxMsgArgValueOutOfRange,        Error,  "Argument %d of instruction '%s': value '%lld' out of range, expected to be in range [%d..%d]" )
MSG( ptxMsgFloatArgValOutOfRangeExclMin, Error,  "Argument %d of instruction '%s': value '%f' out of range, expected to be in range (%f .. %f]" )
MSG( ptxMsgArgValueOutOfRangeMod,     Error,  "Argument %d of instruction '%s': value '%lld' expected to be in range [%d..%d] when %s" )
MSG( ptxMsgArgValueReqMultiple,       Error,  "Argument %d of instruction '%s': unexpected value '%lld', expected to be multiple of %d")
MSG( ptxMsgArgValueUnexpected,        Error,  "Argument %d of instruction '%s': unexpected value '%lld', expected to be %s"       )
MSG( ptxMsgArgValueIllegalMods,       Error,  "Argument %d of instruction '%s': unexpected value '%lld' when '%s' and '%s'"       )
MSG( ptxMsgIncorrectTransferSize,     Error,  "Incorrect data transfer size for instruction '%s'"                                 )
MSG( ptxMsgDuplicateModifier,         Error,  "Duplicate %s modifier"                                                             )
MSG( ptxMsgDuplicateModifierInstr,    Error,  "Duplicate '%s' modifier specified for instruction '%s'"                            )
MSG( ptxMsgMultipleModifiers,         Error,  "Multiple %s modifiers specified"                                                   )
MSG( ptxMsgUnknownModifier,           Error,  "Unknown modifier '%s'"                                                             )
MSG( ptxMsgIllegalModifier,           Error,  "Illegal modifier '%s' for instruction '%s'"                                        )
MSG( ptxMsgIllegalModifierArch,       Error,  "Illegal modifier '%s' for instruction '%s', for arch '%s'"                         )
MSG( ptxMsgIllegalModifierWithType,   Error,  "Illegal modifier '%s' for instruction '%s' with type '%s'"                         )
MSG( ptxMsgIllegalModifierWithMod,    Error,  "Illegal modifier '%s' for instruction '%s' with '%s'"                              )
MSG( ptxMsgIllegalRoundingModifier,   Error,  "Illegal rounding modifier for instruction '%s'"                                    )
MSG( ptxMsgSinkNotAllowedAsSource,    Error,  "Sink '_' not allowed as a source operand"                                          )
MSG( ptxMsgSinkNotAllowedAsDest,      Error,  "Sink '_' not allowed as a destination operand for instruction '%s'"                )
MSG( ptxMsgSinkButNoResult,           Error,  "Result discard mode is not allowed for instruction '%s'"                           )
MSG( ptxMsgNoMemSpaceExpected,        Error,  "No state space qualifier expected for instruction '%s'"                            )
MSG( ptxMsgSpaceIncorrect,            Error,  "State space incorrect for instruction '%s'"                                        )
MSG( ptxMsgSpaceMismatch,             Error,  "State space mismatch between instruction and address in instruction '%s'"          )
MSG( ptxMsgSpaceIncorrectForFeature,  Error,  "State space incorrect for feature '%s'"                                            )
MSG( ptxMsgSpaceExpectedForFeature,   Error,  "%s state space expected for feature '%s'"                                          )
MSG( ptxMsgSregSpaceNodecl,           Error,  "Declarations not allowed in .sreg space"                                           )
MSG( ptxMsgLevelModRequired,          Error,  "Membar level required for instruction '%s'"                                        )
MSG( ptxMsgBarArriveRequiresThdCnt,   Error,  "Instruction '%s' requires a non-zero thread count argument"                        )
MSG( ptxMsgArgValBeMoreThanOne,       Error,  "Argument %d of instruction '%s' : value '%lld' expected to be a non-zero positive" )
MSG( ptxMsgWrongAlignmentValue,       Error,  "Alignment must be a power of two"                                                  )
MSG( ptxMsgAlignmentValueTooLarge,    Error,  "Alignment value too large, exceeds 2^23"                                           )
MSG( ptxMsgWrongValue,                Error,  "%s %d is invalid for %s"                                                           )
MSG( ptxMsgMultipleSpace,             Error,  "Multiple state spaces specified"                                                   )
MSG( ptxMsgIncorrectMemspaces,        Error,  "Unexpected number of state spaces specified in instruction '%s'"                   )
MSG( ptxMsgSpaceNotInitializable,     Error,  "No initial value is allowed for '%s' in this state space"                          )
MSG( ptxMsgNoExternInitAllowed,       Error,  "No initial value is allowed for external symbol '%s'"                              )
MSG( ptxMsgNoF16InitValAllowed,       Fatal,  "No initial value is allowed for .f16 type"                                         )
MSG( ptxMsgQueryIllegal,              Error,  "Illegal query modifier for instruction '%s'"                                       )
MSG( ptxMsgTexGeomMismatch,           Error,  "Operand vector size doesn't match geometry for instruction '%s'"                   )
MSG( ptxMsgWrongTexGeom,              Error,  "Geometry '%s' is invalid for instruction '%s'"                                     )
MSG( ptxMsgRequiresVectorType,        Error,  "Instruction '%s' requires .v%d type"                                               )
MSG( ptxMsgBarrierNumOutOfRange,      Error,  "Barrier number '%llu' out of range, expected to be in range [0..15]"               )
MSG( ptxMsgPositiveValueExpected,     Error,  "Positive non-zero value expected for %s"                                           )
MSG( ptxMsgDwarfValueOutOfRange,      Error,  "Value out of range for type .b%d %lld"                                             )
MSG( ptxMsgIllegalType,               Error,  "Illegal type for %s"                                                               )
MSG( ptxMsgSignedIntCoordRequired,    Error,  "Integer coordinates require .s32 instruction type"                                 )
MSG( ptxMsgFloatCoordRequired,        Error,  "Floating-point coordinates required"                                               )
MSG( ptxMsgVmadNegNotAllowed,         Error,  "Operand negation not allowed for instruction '%s'"                                 )
MSG( ptxMsgIlwalidDirective,          Error,  "Invalid directive '%s' for function '%s'"                                          )
MSG( ptxMsgDirectiveUnsupportedScope, Error,  "Directive '%s' is supported only for '%s' functions"                               )
MSG( ptxMsgInitValTypeMismatch,       Fatal,  "Initial value type mismatch"                                                       )
MSG( ptxMsgInitValUnrecognized,       Error,  "Unrecognized initial value symbol '%s'"                                            )
MSG( ptxMsgInitValIlwalidSymbol,      Fatal,  "Invalid initial value symbol '%s'"                                                 )
MSG( ptxMsgInitValIlwalidMask,        Error,  "Invalid mask value '0x%llx' used in initializer"                                   )
MSG( ptxMsgInitValIlwalidExpression,  Fatal,  "Invalid initial value expression"                                                  )
MSG( ptxMsgInitValExpected,           Fatal,  "Expected initializer for symbol '%s'."                                             )
MSG( ptxMsgInitValIllegalSpace,       Fatal,  "Variable used as initial value not in .global or .const state space"               )
MSG( ptxMsgVectorSizeMismatch,        Fatal,  "Incorrect number of elements in vector initializer"                                )
MSG( ptxMsgArraySizeMismatch,         Error,  "Incorrect number of elements in array initializer"                                 )
MSG( ptxMsgArraySizeLarge,            Fatal,  "Greater number of elements in array initializer"                                   )
MSG( ptxMsgOpaqueRequiresNamedFields, Error,  "Opaque structure initializer requires named fields"                                )
MSG( ptxMsgOpaqueSizeMismatch,        Fatal,  "Too many elements in opaque struct initializer"                                    )
MSG( ptxMsgOpaqueNameMismatch,        Fatal,  "Unrecognized field name '%s' in opaque struct initializer"                         )
MSG( ptxMsgTexrefFieldIgnored,        Info,   "Field '%s' is ignored in .texref variables in independent texture mode"            )
MSG( ptxMsgElementsMismatch,          Error,  "Incompatible elements of vector expression"                                        )
MSG( ptxMsgVectorNoTypeInferred,      Error,  "Unable to infer type of vector elements (assuming .b8)"                            )
MSG( ptxMsgDuplicateFileIndex,        Error,  "Duplicate file index #%d"                                                          )
MSG( ptxMsgUnknownFileIndex,          Error,  "Undefined file index #%d"                                                          )
MSG( ptxMsgModuleScopeWithABI,        Error,  "Module-scoped variables in %s state space are not allowed with ABI"                )
MSG( ptxMsgSRegArgNotAllowed,         Error,  "Special register argument not allowed for instruction '%s'"                        )
MSG( ptxMsgSRegReadOnly,              Error,  "Read-only special register cannot be destination argument"                         )
MSG( ptxMsgSignedRequired,            Error,  "Instruction '%s' applies only to signed numeric types"                             )
/* OPTIX_HAND_EDIT: relax PTX ISA version check (bug 200549319) */
MSG( ptxMsgVersionUnsupported,        Warning,"Unsupported .version %s; current version is '%s'"                                  )
MSG( ptxMsgVersionMissing,            Fatal,  "Missing .version directive at start of file '%s'"                                  )
MSG( ptxMsgTargetUnsupported,         Fatal,  "Unsupported .target '%s'"                                                          )
MSG( ptxMsgTargetConflict,            Error,  "Conflicting .target option '%s'"                                                   )
MSG( ptxMsgTargetNotDefined,          Fatal,  "Target architecture not defined at start of file '%s'"                             )
MSG( ptxMsgTargetMissing,             Fatal,  "Missing .target directive at start of file '%s'"                                   )
MSG( ptxMsgFPRequired,                Error,  "Instruction '%s' requires SM 1.3 or higher, or map_f64_to_f32 directive"           )
MSG( ptxMsgSquashingNotSupported,     Error,  "Directive map_f64_to_f32 is not supported with SM 1.3 or higher"                   )
MSG( ptxMsgConflictingDirectives,     Error,  "Conflicting directives: %s"                                                        )
MSG( ptxMsgNoDebugInfo,               Error,  "Debug information not found in presence of .target debug"                          )
MSG( ptxMsgNoInlineLoc,               Error,  "Source location %d %d %d used in inlined_at directive must be used in a preceding .loc directive")
MSG( ptxMsgUnimplementedFeature,      Error,  "Unimplemented feature: %s"                                                         )
MSG( ptxMsgDeprecatedFeature,         Error,  "Deprecated feature: '%s' not supported as of PTX version %s"                       )
MSG( ptxMsgUniqueMacroFormals,        Error,  "Formal parameter names must be all different."                                     )
MSG( ptxMsgReservedMacroFormals,      Error,  "Formal parameter '%s' is also the name of a reserved macro parameter."             )
MSG( ptxMsgTooFewOperands,            Error,  "Too few operands for macro '%s'"                                                   )
MSG( ptxMsgTooManyOperands,           Error,  "Too many operands for macro '%s'"                                                  )
MSG( ptxMsgTooManyOperandsInstr,      Error,  "Too many operands for instruction '%s'"                                            )
MSG( ptxMsgTooManyValues,             Error,  "Too many values specified for '%s'"                                                )
MSG( ptxMsgUnterminatedMacroParameter,Error,  "Non-terminated parameter in macro '%s'"                                            )
MSG( ptxMsgUnknownMacroParameter,     Error,  "Undefined parameter '%s' used in macro '%s'"                                       )
MSG( ptxMsgUnusedMacroParameter,      Error,  "Parameter '%s' has a value ('%s'), but it is not used in expansion of macro '%s'"  )
MSG( ptxMsgIllformedConditional,      Fatal,  "Ill formed conditional"                                                            )
MSG( ptxMsgMissingSemicolon,          Warning,"Missing semicolon"                                                                 )
MSG( ptxMsgMissingENDIF,              Fatal,  "Missing .ENDIF"                                                                    )
MSG( ptxMsgMissingENDMACRO,           Fatal,  "Missing .ENDMACRO"                                                                 )
MSG( ptxMsgNonterminatedPreprMacro,   Fatal,  "Non-terminated preprocessor macro"                                                 )
MSG( ptxMsgUnknownPreprMacro,         Error,  "Undefined preprocessor macro '%s'"                                                 )
MSG( ptxMsgSMVersionRequired,         Error,  "Instruction '%s' requires .target %s or higher"                                    )
MSG( ptxMsgSMVersionRequired2,        Error,  "Instruction '%s%s%s%s' requires .target sm_%d or higher"                           )
MSG( ptxMsgInstRequiresPTXVersion,    Error,  "Instruction '%s%s%s%s' requires PTX ISA .version %d.%d or later"                   )
MSG( ptxMsgFeatureRequiresPTXVersion, Error,  "Feature '%s' requires PTX ISA .version %s or later"                                )
MSG( ptxMsgInstModRequiresPTXVersion, Error,  "Modifier '%s' on '%s' requires PTX ISA .version %s or later"                       )
MSG( ptxMsgInstModRequiresSMVersion,  Error,  "Modifier '%s' on '%s' requires .target %s or higher"                               )
MSG( ptxMsgFeatureRequiresSMVersion,  Error,  "Feature '%s' requires .target %s or higher"                                        )
MSG( ptxMsgModifierRequiresPTXVersion, Error, "Modifier '%s' requires PTX ISA .version %s or later"                               )
MSG( ptxMsgModifierRequiresSMVersion, Error,  "Modifier '%s' requires .target %s or higher"                                       )
MSG( ptxMsgDoubleToFloat,             Warning,"Double is not supported. Demoting to float"                                        )
MSG( ptxMsgWarning,                   Warning,"%s"                                                                                )
MSG( ptxMsgIllegalOperandType,        Error,  "Illegal operand type to instruction '%s'"                                          )
MSG( ptxMsgIllegalAttribute,          Error,  "Illegal attribute '%s' for symbol '%s'"                                            )
MSG( ptxMsgIllegalPredication,        Error,  "Illegal to predicate instruction '%s' with operand '%s'"                           )
MSG( ptxMsgIllegalPredicationInstr,   Error,  "Illegal to predicate instruction '%s%s'"                                             )
MSG( ptxMsgDuplicateMetaDataSection,  Error,  "Duplicate metadata section definition"                                             )
MSG( ptxMsgDuplicateMetaDataNode,     Error,  "Duplicate metadata node with index '%d'"                                           )
MSG( ptxMsgUnknownMetaDataIndex,      Error,  "Undefined metadata index '%d'"                                                     )
MSG( ptxMsgDoubleUse,                 Warning,"Program is doing double precision computations."                                   )
MSG( ptxMsgNoIncompleteArray,         Error,  "%s cannot be an incomplete array."                                                 )
MSG( ptxMsgIncompleteArrayIsLastInput,Error,  "Only the last input parameter can be an incomplete array."                         )
MSG( ptxMsgIlwalidStorage,            Error,  "%s must be in '%s' space"                                                          )
MSG( ptxMsgModRequiresStateSpace,     Error,  "Modifier '%s' requires '%s' space for instruction '%s'"                            )
MSG( ptxMsgIllegalMatrixShape,        Error,  "Illegal matrix shape '%s' for instruction '%s'"                                    )
MSG( ptxMsgIlwalidInstTargetArch,     Error,  "Instruction '%s' not supported on .target '%s'"                                    )
MSG( ptxMsgIlwalidInstCompilationArch,Error,  "Instruction '%s' cannot be compiled for architecture '%s'"                         )
MSG( ptxMsgIllegalLayout,             Error,  "Illegal %clayout '%s' for instruction '%s'"                                        )
MSG( ptxMsgIlwalidPragmaValue,        Error,   "Invalid value '%s' specified for .pragma '%s'"                                    )
MSG( ptxMsgIlwalidPragmaRange,        Error,   "Invalid range '%s' specified for .pragma '%s'"                                    )
MSG( ptxMsgMultiplePragmaSpecified,   Error,   "Pragma '%s' specified multiple times in function '%s'"                            )
MSG( ptxMsgIlwalidPragma,             Error,   "Pragma '%s' cannot be specified for function '%s'"                                )
MSG( ptxMsgNonEmptyPragmaValue,       Error,   "Argument(s) to pragma '%s' cannot be empty"                                       )
MSG( ptxMsgWarnNonSyncOutcome,        Warning, "Instruction '%s' without '.sync' may produce unpredictable results on %s and later architectures" )
MSG( ptxMsgNonSyncDeprecated,         Warning, "Instruction '%s' without '.sync' is deprecated since PTX ISA version 6.0 and will be discontinued in a future PTX ISA version")
MSG( ptxMsgNonSynlwnsupportedError,   Error,   "Instruction '%s' without '.sync' is not supported on .target sm_70 and higher from PTX ISA version 6.4")
MSG( ptxMsgModifierUnsupportedError,  Error,   "Instruction '%s' with '%s' is not supported starting from PTX ISA version %s")
MSG( ptxMsgModResultUnexp,            Warning, "'%s' modifier on instruction %s may produce unexpected results on %s and later architectures")
MSG( ptxMsgModDeprecated,             Warning, "'%s' modifier on instruction %s is deprecated since PTX ISA version %s and will be discontinued from future PTX ISA version")
MSG( ptxMsgModDeprecateSoonWithHint,  Warning, "'%s' modifier on instruction '%s' is deprecated and will soon be removed, instead please use '%s'")
MSG( ptxMsgModUnsupportedArchError,   Error,   "Modifier '%s' on instruction '%s' %s is not supported starting %s and later architectures")
MSG( ptxMsgAliasFunctionDefined,      Error,   "Illegal redefinition of function '%s' as alias"                                   )
MSG( ptxMsgAliasToEntryFunction,      Error,   "Cannot define alias to entry function '%s'"                                       )
MSG( ptxMsgAliasToSelf,               Error,   "Cannot alias a function to itself"                                                )
MSG( ptxMsgReAliasingNotAllowed,      Error,   "'%s' is already aliased to '%s' and cannot be redefined"                          )
MSG( ptxMsgAliasPrototypeMismatch,    Error,   "Mismatch in prototype of alias '%s' and aliasee '%s'. %s differ(s)"               )
MSG( ptxMsgIlwalidAliaseeScope,       Error,   "Function '%s' with %s scope cannot be aliased"                                    )
MSG( ptxMsgAliasToNonFunctions,       Error,   "Cannot define alias to variable object '%s'"                                      )
MSG( ptxMsgUnknownPragma,             Warning, "Unknown pragma '%s'. Ignoring pragma"                                             )
MSG( ptxMsgIgnoreUnsupportedPragma,   Warning, "Pragma '%s' not supported on %s, will be ignored."                                )
MSG( ptxMsgIncorrectPragmaArgs,       Error,   "Unexpected number of arguments specified for pragma %s"                           )
MSG( ptxMsgParameterPoolOverflow,     Error,   "Minimum parameter register %d and number of parameter registers %d together overflows maximum register limit %d for %s" )
MSG( ptxMsgABIReservedRegsUsage,      Error,   "Registers 0-3 are reserved by ABI and cannot be used for %s"                      )
MSG( ptxMsgConstArgMaxNoBitsSet,      Error,   "Argument %d of instruction '%s': Maximum of %d-bits are expected to be set"       )
MSG( ptxMsgTooManyArgsInlineFunc,     Fatal,   "Number of %s arguments (%d) to inline function '%s' crosses the limit %d. Consider increasing the limit")
MSG( ptxMsgIlwalidCombinationForInstr,Error,   "Invalid combination of '%s' and '%s' for instruction '%s' %s")
MSG( ptxMsgMisplacedTTUInstr,         Error,   "Instruction '%s' cannot be present outside of a %s block"                         )
MSG( ptxMsgIlwalidInstrInTTUBlock,    Error,   "Instruction '%s' cannot be part a %s block"                                       )
MSG( ptxMsgMultipleTTUOpenInstr,      Error,   "Multiple '%s' instruction cannot be present in a %s block"                        )
MSG( ptxMsgIllegalTypeForSymbolUsage, Error,   "Illegal to use symbol '%s' of type %s as %s. Use %s only."                        )
MSG( ptxMacroExpansionTagLength,      Warning, "Begin-End tag truncated due to large file name length"                            )
MSG( ptxMsgCallPrototypeRequired,     Error,   "Call to '%s' requires call prototype"                                             )
MSG( ptxMsgBarrierThreadCntNotAllowed,Error,   "Number of threads participating in barrier must be in multiple of warp size"      )
MSG( ptxMsgUnspecifiedVarStorage,     Fatal,   "No variable storage specified"                                                    )
MSG( ptxMsgUnexpectedNumOfModifiers,  Error,   "Unexpected number of '%s' modifiers specified"                                    )
MSG( ptxMsgUnsupportedModWithInfo,    Error,   "Unsupported modifier '%s' %s for instruction '%s'"                                )
MSG( ptxMsgUnsupportedModifier,       Error,   "Unsupported modifier '%s' for instruction '%s'"                                   )
MSG( ptxMsgIlwalidRelativeValue,      Error,   "Argument %d of instruction '%s': value '%d' must be %s the value '%d' of argument %d" )
MSG( ptxMsgSyntaxExpected,            Error,   "'%s' syntax expected for instruction '%s'"                                        )

#include <misc/stdMessageDefsEnd.h>

#endif

