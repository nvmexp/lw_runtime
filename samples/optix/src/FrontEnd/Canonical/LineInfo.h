// Copyright (c) 2018, LWPU CORPORATION.
// TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
// *AS IS* AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
// OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS
// BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
// WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
// BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS)
// ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS
// BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES

#pragma once


#include <llvm/ADT/StringRef.h>
#include <llvm/IR/Function.h>

#include <prodlib/system/Knobs.h>

namespace optix {

extern Knob<bool> k_addMissingLineInfo;

const char* getGeneratedCodeDirectory();

// If k_addMissingLineInfo is set, add generated lineinfo to a function. This is intended for internal
// analysis, with the filename indicating the transformation at which the function was created (or discovered)
void addLineInfoToFunction( llvm::Function* func, llvm::Module& module, const llvm::StringRef& filename );
void addLineInfoToFunction( llvm::Function* func, const llvm::StringRef& filename );


// Returns true if the module contains non-trivial line info, i.e. at least one non-empty, non-unknown and
// non-generated location. This is used to check whether user code was generated with line info, i.e.
// whether the output of line info in the final generated code is desired.
bool hasLineInfo( const llvm::Module* module );

// Sets line info on all instructions that do not have valid line info.
// This is used to avoid misattribution by tagging all non-annotated instructions as generated by optix.
// It is also used for internal analysis by tagging newly created instructions with the transformation
// that created them.
void addMissingLineInfo( llvm::Module* module, const std::string& filename );

// If k_addMissingLineInfo is set, set line info on all instructions that do not have valid line info.
// If outfile_pattern is non-empty, dump the LLVM IR to the specified file.
// If both of the above, dump one file before and after line info modification, respectively, for easy diffing.
// Note: outfile_pattern is expected to be passed the result of getting a knob, e.g. k_saveLLVM.get().
// (Evaluating the knob inside this function would couple dumping behavior for RTX and megakernel since this
// function is used in both.)
void addMissingLineInfoAndDump( llvm::Module*      module,
                                const std::string& outfile_pattern,
                                const std::string& identifier,
                                int                dumpId,
                                int                launchCounter,
                                const std::string& functionName = {} );
}
