//
// Generated by LWPU LWVM Compiler
// Compiler built on Wed Jul 10 21:41:20 2013 (1373485280)
// Lwca compilation tools, release 5.5, V5.5.0
//

.version 3.2
.target sm_20
.address_size 64

	.file	1 "C:/cygwin64/home/GSG1/Sources/stellar.git/src/rendering/components/optix/programs/Miss.lw", 1445430338, 2308
	.file	2 "c:\\users\\gideon_smeding\\appdata\\local\\temp\\artifactory\\optix-win64-3.8.5\\include\\internal/optix_internal.h", 1438915874, 18808
	.file	3 "c:\\users\\gideon_smeding\\appdata\\local\\temp\\artifactory\\optix-win64-3.8.5\\include\\optix_device.h", 1438915874, 118510
	.file	4 "c:\\cygwin64\\home\\gsg1\\sources\\stellar.git\\src\\rendering\\components\\optix\\programs\\OptixBufferPtr.hpp", 1445430338, 6355
.visible .func stlr_main
(
	.param .b64 stlr_main_param_0,
	.param .b64 stlr_main_param_1,
	.param .b64 stlr_main_param_2,
	.param .b64 stlr_main_param_3,
	.param .b64 stlr_main_param_4,
	.param .b64 stlr_main_param_5,
	.param .b64 stlr_main_param_6
)
;
.global .align 8 .b8 launch_index[8];
.global .align 16 .b8 ray_data[80];
.global .align 1 .b8 render_task_data[1];
.global .align 4 .u32 render_task_id;
.global .align 4 .u32 use_exa_compositing;
.global .align 4 .u32 compositing_color_sampler;
.global .align 4 .u32 compositing_distance_sampler;
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZTVSt14error_category[72];
.global .align 8 .b8 _ZTVSt23_Generic_error_category[72];
.global .align 8 .b8 _ZTVSt24_Iostream_error_category[72];
.global .align 8 .b8 _ZTVSt22_System_error_category[72];
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8ray_dataE[8] = {82, 97, 121, 0, 80, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14render_task_idE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19use_exa_compositingE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo25compositing_color_samplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo28compositing_distance_samplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[5] = {105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8ray_dataE[8] = {82, 97, 121, 68, 97, 116, 97, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14render_task_idE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename19use_exa_compositingE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename25compositing_color_samplerE[12] = {114, 116, 84, 101, 120, 116, 117, 114, 101, 73, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_typename28compositing_distance_samplerE[12] = {114, 116, 84, 101, 120, 116, 117, 114, 101, 73, 100, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8ray_dataE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14render_task_idE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19use_exa_compositingE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum25compositing_color_samplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum28compositing_distance_samplerE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic8ray_dataE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14render_task_idE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19use_exa_compositingE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic25compositing_color_samplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic28compositing_distance_samplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8ray_dataE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14render_task_idE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19use_exa_compositingE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation25compositing_color_samplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation28compositing_distance_samplerE[1];

.visible .entry _Z4missv(

)
{
	.local .align 16 .b8 	__local_depot0[112];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .s32 	%r<24>;
	.reg .f32 	%f<43>;
	.reg .s64 	%rd<32>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd12, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd12;
	add.u64 	%rd13, %SP, 64;
	cvta.to.local.u64 	%rd2, %rd13;
	add.u64 	%rd14, %SP, 80;
	cvta.to.local.u64 	%rd3, %rd14;
	add.u64 	%rd15, %SP, 88;
	cvta.to.local.u64 	%rd4, %rd15;
	.loc 1 36 1
	ldu.global.u32 	%r3, [render_task_id];
	cvt.s64.s32	%rd8, %r3;
	cvta.global.u64 	%rd7, render_task_data;
	mov.u32 	%r1, 1;
	mov.u32 	%r2, 216;
	mov.u64 	%rd11, 0;
	.loc 2 217 1
	// inline asm
	call (%rd6), _rt_buffer_get_64, (%rd7, %r1, %r2, %rd8, %rd11, %rd11, %rd11);
	// inline asm
	mov.f32 	%f1, 0f3F800000;
	mov.f32 	%f2, 0f00000000;
	.loc 1 39 1
	st.local.v4.f32 	[%rd2], {%f2, %f2, %f1, %f1};
	mov.u32 	%r4, 2139095040;
	.loc 1 40 50
	st.local.u32 	[%rd3], %r4;
	.loc 1 41 1
	ld.global.u32 	%r5, [use_exa_compositing];
	setp.lt.s32	%p1, %r5, 1;
	@%p1 bra 	BB0_2;

	.loc 1 43 1
	ld.u32 	%r10, [%rd6+16];
	ld.global.v2.u32 	{%r11, %r12}, [launch_index];
	sub.s32 	%r14, %r11, %r10;
	sub.s32 	%r16, %r12, %r10;
	cvt.rn.f32.s32	%f15, %r14;
	cvt.rn.f32.s32	%f16, %r16;
	.loc 1 45 1
	ld.global.u32 	%r6, [compositing_color_sampler];
	mov.u32 	%r9, 2;
	.loc 2 157 1
	// inline asm
	call (%f3, %f4, %f5, %f6), _rt_texture_get_f_id, (%r6, %r9, %f15, %f16, %f2, %f2);
	// inline asm
	.loc 1 45 244
	st.local.v4.f32 	[%rd2], {%f3, %f4, %f5, %f6};
	.loc 1 46 1
	ld.local.f32 	%f19, [%rd2+12];
	sub.f32 	%f21, %f1, %f19;
	st.local.f32 	[%rd2+12], %f21;
	.loc 1 48 1
	ld.global.u32 	%r8, [compositing_distance_sampler];
	.loc 2 157 1
	// inline asm
	call (%f11, %f12, %f13, %f14), _rt_texture_get_f_id, (%r8, %r9, %f15, %f16, %f2, %f2);
	// inline asm
	st.local.f32 	[%rd3], %f11;

BB0_2:
	.loc 4 63 1
	ld.u32 	%r17, [%rd6+12];
	mov.u64 	%rd17, 512;
	.loc 1 51 1
	ld.v2.u32 	{%r20, %r21}, [%rd6];
	st.local.v2.u32 	[%rd4], {%r20, %r21};
	.loc 2 241 1
	// inline asm
	call (%rd16), _rt_buffer_get_id_64, (%r17, %r1, %r1, %rd17, %rd11, %rd11, %rd11);
	// inline asm
	.loc 1 51 108
	ld.u64 	%rd21, [%rd16];
	ld.u64 	%rd22, [%rd16+8];
	st.local.u64 	[%rd4+16], %rd22;
	st.local.u64 	[%rd4+8], %rd21;
	.loc 1 53 116
	ld.global.u64 	%rd23, [ray_data+16];
	mov.u64 	%rd24, ray_data;
	add.s64 	%rd25, %rd24, 32;
	cvta.global.u64 	%rd26, %rd25;
	.loc 4 85 1
	ld.u64 	%rd27, [%rd6+72];
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64	[param0+0], %rd12;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd27;
	.param .b64 param2;
	st.param.b64	[param2+0], %rd23;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd26;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd15;
	.param .b64 param5;
	st.param.b64	[param5+0], %rd13;
	.param .b64 param6;
	st.param.b64	[param6+0], %rd14;
	.loc 1 53 1
	call.uni 
	stlr_main, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5, 
	param6
	);
	}
	// Callseq End 0
	.loc 1 62 1
	ld.local.f32 	%f22, [%rd1+48];
	ld.local.v4.f32 	{%f23, %f24, %f25, %f26}, [%rd1+32];
	.loc 1 62 1
	ld.global.v4.f32 	{%f28, %f29, %f30, %f31}, [ray_data];
	add.f32 	%f33, %f28, %f23;
	add.f32 	%f36, %f29, %f24;
	add.f32 	%f39, %f30, %f25;
	add.f32 	%f41, %f31, %f22;
	st.global.v4.f32 	[ray_data], {%f33, %f36, %f39, %f41};
	.loc 1 63 1
	ld.local.f32 	%f42, [%rd3];
	st.global.f32 	[ray_data+64], %f42;
	.loc 1 64 2
	ret;
}

.visible .func  (.param .align 16 .b8 func_retval0[16]) _ZN5optix19rt_texture_get_f_idEiiffff(
	.param .b32 _ZN5optix19rt_texture_get_f_idEiiffff_param_0,
	.param .b32 _ZN5optix19rt_texture_get_f_idEiiffff_param_1,
	.param .b32 _ZN5optix19rt_texture_get_f_idEiiffff_param_2,
	.param .b32 _ZN5optix19rt_texture_get_f_idEiiffff_param_3,
	.param .b32 _ZN5optix19rt_texture_get_f_idEiiffff_param_4,
	.param .b32 _ZN5optix19rt_texture_get_f_idEiiffff_param_5
)
{
	.reg .s32 	%r<3>;
	.reg .f32 	%f<9>;


	ld.param.u32 	%r1, [_ZN5optix19rt_texture_get_f_idEiiffff_param_0];
	ld.param.u32 	%r2, [_ZN5optix19rt_texture_get_f_idEiiffff_param_1];
	ld.param.f32 	%f5, [_ZN5optix19rt_texture_get_f_idEiiffff_param_2];
	ld.param.f32 	%f6, [_ZN5optix19rt_texture_get_f_idEiiffff_param_3];
	ld.param.f32 	%f7, [_ZN5optix19rt_texture_get_f_idEiiffff_param_4];
	ld.param.f32 	%f8, [_ZN5optix19rt_texture_get_f_idEiiffff_param_5];
	.loc 2 157 1
	// inline asm
	call (%f1, %f2, %f3, %f4), _rt_texture_get_f_id, (%r1, %r2, %f5, %f6, %f7, %f8);
	// inline asm
	st.param.f32	[func_retval0+0], %f1;
	st.param.f32	[func_retval0+4], %f2;
	st.param.f32	[func_retval0+8], %f3;
	st.param.f32	[func_retval0+12], %f4;
	.loc 2 167 1
	ret;
}

.visible .func  (.param .b64 func_retval0) _ZNK3rtt7stellar14OptixBufferPtrIPKvE9asPointerEv(
	.param .b64 _ZNK3rtt7stellar14OptixBufferPtrIPKvE9asPointerEv_param_0
)
{
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [_ZNK3rtt7stellar14OptixBufferPtrIPKvE9asPointerEv_param_0];
	.loc 4 85 1
	ld.u64 	%rd2, [%rd1];
	st.param.b64	[func_retval0+0], %rd2;
	ret;
}


//
// Generated by LLVM LWPTX Back-End
//





	// .globl	stlr_create_for_stellarcheck

.visible .func stlr_create_for_stellarcheck(
	.param .b64 stlr_create_for_stellarcheck_param_0,
	.param .b64 stlr_create_for_stellarcheck_param_1,
	.param .b64 stlr_create_for_stellarcheck_param_2
)
{
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;

	ld.param.u64 	%rd1, [stlr_create_for_stellarcheck_param_0];
	ld.param.u64 	%rd2, [stlr_create_for_stellarcheck_param_2];
	ld.u32 	%r1, [%rd2];
	st.u32 	[%rd1], %r1;
	ret;
}

	// .globl	stlr_light_closures_type
.visible .func stlr_light_closures_type(
	.param .b64 stlr_light_closures_type_param_0,
	.param .b64 stlr_light_closures_type_param_1,
	.param .b64 stlr_light_closures_type_param_2
)
{
	.reg .s64 	%rd<13>;

	ld.param.u64 	%rd1, [stlr_light_closures_type_param_0];
	ld.param.u64 	%rd2, [stlr_light_closures_type_param_2];
	ld.u64 	%rd3, [%rd2];
	ld.u64 	%rd4, [%rd2+8];
	ld.u64 	%rd5, [%rd2+16];
	ld.u64 	%rd6, [%rd2+24];
	ld.u64 	%rd7, [%rd2+32];
	ld.u64 	%rd8, [%rd2+40];
	ld.u64 	%rd9, [%rd2+48];
	ld.u64 	%rd10, [%rd2+56];
	ld.u64 	%rd11, [%rd2+64];
	ld.u64 	%rd12, [%rd2+72];
	st.u64 	[%rd1+72], %rd12;
	st.u64 	[%rd1+64], %rd11;
	st.u64 	[%rd1+56], %rd10;
	st.u64 	[%rd1+48], %rd9;
	st.u64 	[%rd1+40], %rd8;
	st.u64 	[%rd1+32], %rd7;
	st.u64 	[%rd1+24], %rd6;
	st.u64 	[%rd1+16], %rd5;
	st.u64 	[%rd1+8], %rd4;
	st.u64 	[%rd1], %rd3;
	ret;
}

	// .globl	stlr_main
.visible .func stlr_main(
	.param .b64 stlr_main_param_0,
	.param .b64 stlr_main_param_1,
	.param .b64 stlr_main_param_2,
	.param .b64 stlr_main_param_3,
	.param .b64 stlr_main_param_4,
	.param .b64 stlr_main_param_5,
	.param .b64 stlr_main_param_6
)
{
	.local .align 16 .b8 	__local_depot2[256];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<20>;
	.reg .f32 	%f<149>;
	.reg .s32 	%r<139>;
	.reg .s64 	%rd<218>;

	mov.u64 	%rd217, __local_depot2;
	cvta.local.u64 	%SP, %rd217;
	ld.param.u64 	%rd215, [stlr_main_param_1];
	ld.param.u64 	%rd21, [stlr_main_param_0];
	ld.param.u64 	%rd23, [stlr_main_param_2];
	ld.u64 	%rd1, [%rd23];
	ld.u64 	%rd2, [%rd23+8];
	ld.u64 	%rd3, [%rd23+16];
	ld.u32 	%r22, [%rd1];
	add.s32 	%r23, %r22, -1;
	mul.wide.s32 	%rd24, %r23, 112;
	add.s64 	%rd25, %rd2, %rd24;
	ld.f32 	%f18, [%rd25+88];
	ld.f32 	%f17, [%rd25+84];
	ld.f32 	%f16, [%rd25+80];
	ld.f32 	%f15, [%rd25+72];
	ld.f32 	%f14, [%rd25+68];
	ld.f32 	%f13, [%rd25+64];
	ld.f32 	%f12, [%rd25+56];
	ld.f32 	%f11, [%rd25+52];
	ld.f32 	%f10, [%rd25+48];
	ld.f32 	%f9, [%rd25+40];
	ld.f32 	%f8, [%rd25+36];
	ld.f32 	%f7, [%rd25+32];
	ld.f32 	%f6, [%rd25+24];
	ld.f32 	%f5, [%rd25+20];
	ld.f32 	%f4, [%rd25+16];
	ld.f32 	%f3, [%rd25+8];
	ld.f32 	%f2, [%rd25+4];
	ld.f32 	%f1, [%rd25];
	add.s64 	%rd26, %rd3, %rd24;
	ld.u32 	%r5, [%rd26+108];
	ld.f32 	%f36, [%rd26+104];
	ld.f32 	%f135, [%rd26+100];
	ld.u32 	%r3, [%rd26+40];
	ld.f32 	%f144, [%rd26+32];
	ld.f32 	%f39, [%rd26+24];
	ld.f32 	%f38, [%rd26+20];
	ld.f32 	%f37, [%rd26+16];
	ld.u32 	%r6, [%rd26+4];
	st.u32 	[%rd1], %r23;
	and.b32  	%r24, %r6, 32;
	setp.eq.s32	%p1, %r24, 0;
	and.b32  	%r7, %r6, 1;
	@%p1 bra 	LBB2_2;
	setp.eq.s32	%p2, %r7, 0;
	selp.f32	%f146, 0f00000000, %f38, %p2;
	selp.f32	%f145, 0f00000000, %f37, %p2;
	selp.f32	%f147, 0f00000000, %f39, %p2;
	selp.f32	%f144, 0f00000000, %f144, %p2;
	bra.uni 	LBB2_24;
LBB2_2:
	setp.eq.s32	%p3, %r7, 0;
	@%p3 bra 	LBB2_4;
	mov.f32 	%f144, 0f00000000;
	mov.f32 	%f136, %f135;
	mov.f32 	%f137, %f135;
	bra.uni 	LBB2_23;
LBB2_4:
	setp.ne.s32	%p4, %r5, -1;
	@%p4 bra 	LBB2_6;
	bra.uni 	LBB2_5;
LBB2_6:
	// inline asm
	mov.b64 {_,%r25}, %rd215;
	// inline asm
	mov.u32 	%r28, 1;
	mov.u64 	%rd32, 0;
	// inline asm
	call (%rd213), _rt_buffer_get_id_64, (%r25, %r28, %r28, %rd32, %rd32, %rd32, %rd32);
	// inline asm
	setp.lt.s32	%p5, %r3, 1;
	@%p5 bra 	LBB2_25;
	ld.u64 	%rd33, [%rd213+528];
	mul.wide.s32 	%rd39, %r5, 8;
	// inline asm
	mov.b64 {_,%r30}, %rd33;
	// inline asm
	// inline asm
	call (%rd34), _rt_buffer_get_id_64, (%r30, %r28, %r28, %rd32, %rd32, %rd32, %rd32);
	// inline asm
	add.s64 	%rd40, %rd39, %rd34;
	add.s64 	%rd216, %rd40, 512;
	bra.uni 	LBB2_9;
LBB2_5:
	// inline asm
	mov.b64 {_,%r34}, %rd215;
	// inline asm
	mov.u32 	%r35, 1;
	mov.u64 	%rd45, 0;
	// inline asm
	call (%rd213), _rt_buffer_get_id_64, (%r34, %r35, %r35, %rd45, %rd45, %rd45, %rd45);
	// inline asm
	bra.uni 	LBB2_8;
LBB2_25:
LBB2_8:
	ld.u64 	%rd47, [%rd213+520];
	// inline asm
	mov.b64 {_,%r38}, %rd47;
	// inline asm
	mov.u32 	%r39, 1;
	mov.u64 	%rd51, 0;
	// inline asm
	call (%rd48), _rt_buffer_get_id_64, (%r38, %r39, %r39, %rd51, %rd51, %rd51, %rd51);
	// inline asm
	add.s64 	%rd216, %rd48, 512;
LBB2_9:
	ld.u64 	%rd15, [%rd216];
	// inline asm
	mov.b64 {_,%r41}, %rd15;
	// inline asm
	mov.u32 	%r44, 1;
	mov.u64 	%rd58, 0;
	// inline asm
	call (%rd54), _rt_buffer_get_id_64, (%r41, %r44, %r44, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	ld.u32 	%r9, [%rd54+508];
	setp.lt.s32	%p6, %r9, 2;
	@%p6 bra 	LBB2_10;
	and.b32  	%r10, %r6, 16;
	mul.wide.s32 	%rd16, %r5, 8;
	mov.f32 	%f136, 0f00000000;
	lg2.approx.ftz.f32 	%f118, %f135;
	mul.ftz.f32 	%f119, %f118, 0f3FC00000;
	ex2.approx.ftz.f32 	%f120, %f119;
	mov.u32 	%r135, %r44;
	mov.f32 	%f135, %f136;
	mov.f32 	%f137, %f136;
LBB2_12:
	mul.wide.s32 	%rd79, %r135, 20;
	// inline asm
	mov.b64 {_,%r46}, %rd15;
	// inline asm
	// inline asm
	call (%rd60), _rt_buffer_get_id_64, (%r46, %r44, %r44, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	add.s64 	%rd80, %rd60, %rd79;
	ld.u32 	%r60, [%rd80+528];
	// inline asm
	mov.b64 {_,%r50}, %rd215;
	// inline asm
	// inline asm
	call (%rd66), _rt_buffer_get_id_64, (%r50, %r44, %r44, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	ld.u64 	%rd71, [%rd66+512];
	mul.wide.s32 	%rd81, %r60, 80;
	// inline asm
	mov.b64 {_,%r54}, %rd71;
	// inline asm
	// inline asm
	call (%rd72), _rt_buffer_get_id_64, (%r54, %r44, %r44, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	add.s64 	%rd82, %rd81, %rd72;
	ld.u64 	%rd83, [%rd82+520];
	ld.u64 	%rd77, [%rd82+512];
	ld.u32 	%r12, [%rd80+520];
	// inline asm
	mov.b64 {_,%r58}, %rd77;
	// inline asm
	// inline asm
	call (%rd78), _rt_callable_program_from_id_64, (%r58);
	// inline asm
	st.u32 	[%SP+32], %r12;
	add.u64 	%rd84, %SP, 48;
	or.b64  	%rd85, %rd84, 8;
	st.f32 	[%rd85], %f3;
	st.f32 	[%SP+88], %f9;
	st.f32 	[%SP+72], %f6;
	mov.b32 	 %r61, %f4;
	cvt.u64.u32	%rd86, %r61;
	mov.b32 	 %r62, %f5;
	cvt.u64.u32	%rd87, %r62;
	shl.b64 	%rd88, %rd87, 32;
	or.b64  	%rd89, %rd86, %rd88;
	st.u64 	[%SP+64], %rd89;
	mov.b32 	 %r63, %f1;
	cvt.u64.u32	%rd90, %r63;
	mov.b32 	 %r64, %f2;
	cvt.u64.u32	%rd91, %r64;
	shl.b64 	%rd92, %rd91, 32;
	or.b64  	%rd93, %rd90, %rd92;
	st.u64 	[%SP+48], %rd93;
	mov.b32 	 %r65, %f7;
	cvt.u64.u32	%rd94, %r65;
	mov.b32 	 %r66, %f8;
	cvt.u64.u32	%rd95, %r66;
	shl.b64 	%rd96, %rd95, 32;
	or.b64  	%rd97, %rd94, %rd96;
	st.u64 	[%SP+80], %rd97;
	add.u64 	%rd98, %SP, 96;
	or.b64  	%rd99, %rd98, 8;
	st.f32 	[%rd99], %f12;
	st.f32 	[%SP+136], %f18;
	mov.b32 	 %r67, %f16;
	cvt.u64.u32	%rd100, %r67;
	mov.b32 	 %r68, %f17;
	cvt.u64.u32	%rd101, %r68;
	shl.b64 	%rd102, %rd101, 32;
	or.b64  	%rd103, %rd100, %rd102;
	st.u64 	[%SP+128], %rd103;
	st.f32 	[%SP+120], %f15;
	mov.b32 	 %r69, %f13;
	cvt.u64.u32	%rd104, %r69;
	mov.b32 	 %r70, %f14;
	cvt.u64.u32	%rd105, %r70;
	shl.b64 	%rd106, %rd105, 32;
	or.b64  	%rd107, %rd104, %rd106;
	st.u64 	[%SP+112], %rd107;
	mov.b32 	 %r71, %f10;
	cvt.u64.u32	%rd108, %r71;
	mov.b32 	 %r72, %f11;
	cvt.u64.u32	%rd109, %r72;
	shl.b64 	%rd110, %rd109, 32;
	or.b64  	%rd111, %rd108, %rd110;
	st.u64 	[%SP+96], %rd111;
	add.u64 	%rd112, %SP, 0;
	add.u64 	%rd113, %SP, 32;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd112;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd83;
	.param .b64 param2;
	st.param.b64	[param2+0], %rd113;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd84;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd98;
	prototype_0 : .callprototype ()_ (.param .b64 _, .param .b64 _, .param .b64 _, .param .b64 _, .param .b64 _);
	call 
	%rd78, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	)
	, prototype_0;
	
	//{
	}// Callseq End 0
	or.b64  	%rd114, %rd112, 8;
	ld.f32 	%f72, [%rd114];
	or.b64  	%rd115, %rd112, 4;
	ld.f32 	%f71, [%rd115];
	ld.f32 	%f70, [%SP+0];
	setp.ne.s32	%p7, %r10, 0;
	@%p7 bra 	LBB2_14;
	bra.uni 	LBB2_13;
LBB2_14:
	mul.ftz.f32 	%f106, %f72, 0f3D93D07D;
	mov.f32 	%f107, 0f3F371437;
	fma.rn.ftz.f32 	%f108, %f107, %f71, %f106;
	mov.f32 	%f109, 0f3E59C6ED;
	fma.rn.ftz.f32 	%f110, %f109, %f70, %f108;
	setp.leu.ftz.f32	%p8, %f110, 0f00000000;
	@%p8 bra 	LBB2_27;
	cvt.s64.s32	%rd18, %r60;
	mov.u32 	%r108, 1;
	// inline asm
	mov.b64 {_,%r77}, %rd215;
	// inline asm
	// inline asm
	call (%rd123), _rt_buffer_get_id_64, (%r77, %r108, %r108, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	ld.u64 	%rd128, [%rd123+536];
	// inline asm
	mov.b64 {_,%r81}, %rd128;
	// inline asm
	// inline asm
	call (%rd129), _rt_buffer_get_id_64, (%r81, %r108, %r108, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	add.s64 	%rd142, %rd129, %rd16;
	ld.u64 	%rd19, [%rd142+512];
	// inline asm
	mov.b64 {_,%r85}, %rd19;
	// inline asm
	// inline asm
	call (%rd135), _rt_buffer_get_id_64, (%r85, %r108, %r108, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	ld.u32 	%r89, [%rd135+508];
	add.s32 	%r137, %r89, -1;
	mov.f32 	%f134, 0f00000000;
	setp.lt.s32	%p9, %r137, 0;
	@%p9 bra 	LBB2_26;
	cvt.s64.s32	%rd17, %r135;
	mul.lo.s64 	%rd140, %rd17, 20;
	// inline asm
	mov.b64 {_,%r73}, %rd15;
	// inline asm
	// inline asm
	call (%rd117), _rt_buffer_get_id_64, (%r73, %r108, %r108, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	add.s64 	%rd141, %rd140, %rd117;
	ld.u32 	%r13, [%rd141+516];
	// inline asm
	mov.b64 {_,%r91}, %rd19;
	// inline asm
	// inline asm
	call (%rd144), _rt_buffer_get_id_64, (%r91, %r108, %r108, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	mov.u32 	%r138, 0;
	mov.u32 	%r136, -1;
LBB2_17:
	add.s32 	%r96, %r138, %r137;
	shr.u32 	%r97, %r96, 31;
	add.s32 	%r98, %r96, %r97;
	shr.s32 	%r99, %r98, 1;
	mul.wide.s32 	%rd149, %r99, 20;
	add.s64 	%rd150, %rd149, %rd144;
	ld.u32 	%r100, [%rd150+516];
	setp.eq.s32	%p10, %r100, %r13;
	add.s32 	%r101, %r137, 1;
	setp.gt.s32	%p11, %r100, %r13;
	add.s32 	%r102, %r99, -1;
	add.s32 	%r103, %r99, 1;
	selp.b32	%r104, %r102, %r137, %p11;
	selp.b32	%r105, %r138, %r103, %p11;
	selp.b32	%r136, %r99, %r136, %p10;
	selp.b32	%r137, %r137, %r104, %p10;
	selp.b32	%r138, %r101, %r105, %p10;
	setp.le.s32	%p12, %r138, %r137;
	@%p12 bra 	LBB2_17;
	setp.eq.s32	%p13, %r136, -1;
	@%p13 bra 	LBB2_20;
	mul.wide.s32 	%rd157, %r136, 20;
	// inline asm
	mov.b64 {_,%r107}, %rd19;
	// inline asm
	// inline asm
	call (%rd152), _rt_buffer_get_id_64, (%r107, %r108, %r108, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	add.s64 	%rd158, %rd152, 512;
	add.s32 	%r110, %r136, -1;
	mul.wide.s32 	%rd159, %r110, 20;
	add.s64 	%rd160, %rd159, %rd158;
	add.s64 	%rd161, %rd157, %rd158;
	ld.f32 	%f113, [%rd161];
	ld.f32 	%f114, [%rd160];
	sub.ftz.f32 	%f134, %f113, %f114;
	bra.uni 	LBB2_20;
LBB2_13:
	add.ftz.f32 	%f135, %f135, %f70;
	add.ftz.f32 	%f136, %f136, %f71;
	add.ftz.f32 	%f137, %f137, %f72;
	bra.uni 	LBB2_21;
LBB2_27:
	bra.uni 	LBB2_21;
LBB2_26:
LBB2_20:
	// inline asm
	mov.b64 {_,%r112}, %rd215;
	// inline asm
	// inline asm
	call (%rd163), _rt_buffer_get_id_64, (%r112, %r108, %r108, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	ld.u64 	%rd168, [%rd163+512];
	mul.lo.s64 	%rd176, %rd18, 80;
	// inline asm
	mov.b64 {_,%r116}, %rd168;
	// inline asm
	// inline asm
	call (%rd169), _rt_buffer_get_id_64, (%r116, %r108, %r108, %rd58, %rd58, %rd58, %rd58);
	// inline asm
	add.s64 	%rd177, %rd176, %rd169;
	ld.u64 	%rd178, [%rd177+552];
	ld.u64 	%rd174, [%rd177+544];
	// inline asm
	mov.b64 {_,%r120}, %rd174;
	// inline asm
	// inline asm
	call (%rd175), _rt_callable_program_from_id_64, (%r120);
	// inline asm
	st.u32 	[%SP+156], %r12;
	add.u64 	%rd179, %SP, 160;
	or.b64  	%rd180, %rd179, 8;
	st.f32 	[%rd180], %f3;
	st.f32 	[%SP+200], %f9;
	st.f32 	[%SP+184], %f6;
	st.u64 	[%SP+176], %rd89;
	st.u64 	[%SP+160], %rd93;
	st.u64 	[%SP+192], %rd97;
	add.u64 	%rd193, %SP, 208;
	or.b64  	%rd194, %rd193, 8;
	st.f32 	[%rd194], %f12;
	st.f32 	[%SP+248], %f18;
	st.u64 	[%SP+240], %rd103;
	st.f32 	[%SP+232], %f15;
	st.u64 	[%SP+224], %rd107;
	st.u64 	[%SP+208], %rd111;
	add.u64 	%rd207, %SP, 144;
	add.u64 	%rd208, %SP, 156;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd207;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd178;
	.param .b64 param2;
	st.param.b64	[param2+0], %rd208;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd179;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd193;
	prototype_1 : .callprototype ()_ (.param .b64 _, .param .b64 _, .param .b64 _, .param .b64 _, .param .b64 _);
	call 
	%rd175, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	)
	, prototype_1;
	
	//{
	}// Callseq End 1
	ld.f32 	%f115, [%SP+144];
	mul.ftz.f32 	%f116, %f134, %f115;
	mul.ftz.f32 	%f117, %f36, %f116;
	lg2.approx.ftz.f32 	%f121, %f117;
	mul.ftz.f32 	%f122, %f121, 0f3FC00000;
	ex2.approx.ftz.f32 	%f123, %f122;
	add.ftz.f32 	%f124, %f120, %f123;
	div.approx.ftz.f32 	%f125, %f120, %f124;
	setp.lt.ftz.f32	%p14, %f125, 0f7F800000;
	selp.f32	%f126, %f125, 0f00000000, %p14;
	fma.rn.ftz.f32 	%f137, %f72, %f126, %f137;
	fma.rn.ftz.f32 	%f136, %f71, %f126, %f136;
	fma.rn.ftz.f32 	%f135, %f70, %f126, %f135;
LBB2_21:
	add.s32 	%r135, %r135, 1;
	setp.ne.s32	%p15, %r135, %r9;
	@%p15 bra 	LBB2_12;
	bra.uni 	LBB2_22;
LBB2_10:
	mov.f32 	%f135, 0f00000000;
	mov.f32 	%f136, %f135;
	mov.f32 	%f137, %f135;
LBB2_22:
LBB2_23:
	mul.ftz.f32 	%f145, %f37, %f135;
	mul.ftz.f32 	%f146, %f38, %f136;
	mul.ftz.f32 	%f147, %f39, %f137;
LBB2_24:
	setp.nan.ftz.f32	%p16, %f145, %f146;
	setp.nan.ftz.f32	%p17, %f147, %f147;
	or.pred  	%p18, %p16, %p17;
	selp.f32	%f127, 0f00000000, %f145, %p18;
	mov.b32 	 %r133, %f127;
	cvt.u64.u32	%rd209, %r133;
	selp.f32	%f128, 0f00000000, %f146, %p18;
	mov.b32 	 %r134, %f128;
	cvt.u64.u32	%rd210, %r134;
	shl.b64 	%rd211, %rd210, 32;
	or.b64  	%rd212, %rd209, %rd211;
	selp.f32	%f129, 0f00000000, %f147, %p18;
	setp.nan.ftz.f32	%p19, %f144, %f144;
	selp.f32	%f130, 0f3F800000, %f144, %p19;
	st.u64 	[%rd21+16], %rd3;
	st.u64 	[%rd21+8], %rd2;
	st.u64 	[%rd21], %rd1;
	st.f32 	[%rd21+48], %f130;
	st.f32 	[%rd21+40], %f129;
	st.u64 	[%rd21+32], %rd212;
	ret;
}


