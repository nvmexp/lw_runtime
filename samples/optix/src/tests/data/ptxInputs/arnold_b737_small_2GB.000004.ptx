//
// Generated by LWPU LWVM Compiler
//
// Compiler Build ID: CL-19324607
// Lwca compilation tools, release 7.0, V7.0.27
// Based on LLVM 3.4svn
//

.version 4.2
.target sm_20
.address_size 64

	// .globl	_Z9intersecti
.global .align 1 .b8 verts[1];
.global .align 1 .b8 tris[1];
.global .align 1 .b8 norms[1];
.global .align 1 .b8 tri_norms[1];
.global .align 1 .b8 uvs[1];
.global .align 1 .b8 tri_uvs[1];
.global .align 8 .b8 N[12];
.global .align 8 .b8 Ng[12];
.global .align 8 .b8 UV[8];
.global .align 4 .b8 ray[36];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo1NE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo2NgE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo2UVE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename1NE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename2NgE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 1 .b8 _ZN21rti_internal_typename2UVE[7] = {102, 108, 111, 97, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum1NE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum2NgE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum2UVE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic1NE[12] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 78, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic2NgE[13] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 78, 103, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic2UVE[13] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 85, 86, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation1NE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation2NgE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation2UVE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];

.visible .entry _Z9intersecti(
	.param .u32 _Z9intersecti_param_0
)
{
	.reg .pred 	%p<13>;
	.reg .f32 	%f<122>;
	.reg .s32 	%r<34>;
	.reg .s64 	%rd<92>;


	ld.param.s32 	%rd4, [_Z9intersecti_param_0];
	mov.u64 	%rd26, tris;
	cvta.global.u64 	%rd3, %rd26;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 12;
	mov.u64 	%rd25, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r7, %r8, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.u32 	%rd10, [%rd2];
	mov.u64 	%rd27, verts;
	cvta.global.u64 	%rd9, %rd27;
	ld.u32 	%rd16, [%rd2+4];
	ld.u32 	%rd22, [%rd2+8];
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r7, %r8, %rd10, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f7, [%rd8+8];
	ld.f32 	%f8, [%rd8+4];
	ld.f32 	%f9, [%rd8];
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd9, %r7, %r8, %rd16, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f10, [%rd14+8];
	ld.f32 	%f11, [%rd14+4];
	ld.f32 	%f12, [%rd14];
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd9, %r7, %r8, %rd22, %rd25, %rd25, %rd25);
	// inline asm
	sub.ftz.f32 	%f13, %f12, %f9;
	sub.ftz.f32 	%f14, %f11, %f8;
	sub.ftz.f32 	%f15, %f10, %f7;
	ld.f32 	%f16, [%rd20+8];
	ld.f32 	%f17, [%rd20+4];
	ld.f32 	%f18, [%rd20];
	sub.ftz.f32 	%f19, %f9, %f18;
	sub.ftz.f32 	%f20, %f8, %f17;
	sub.ftz.f32 	%f21, %f7, %f16;
	mul.ftz.f32 	%f22, %f15, %f20;
	mul.ftz.f32 	%f23, %f14, %f21;
	sub.ftz.f32 	%f1, %f22, %f23;
	mul.ftz.f32 	%f24, %f13, %f21;
	mul.ftz.f32 	%f25, %f15, %f19;
	sub.ftz.f32 	%f2, %f24, %f25;
	mul.ftz.f32 	%f26, %f14, %f19;
	mul.ftz.f32 	%f27, %f13, %f20;
	sub.ftz.f32 	%f3, %f26, %f27;
	ld.global.f32 	%f28, [ray+12];
	ld.global.f32 	%f29, [ray+16];
	mul.ftz.f32 	%f30, %f29, %f2;
	fma.rn.ftz.f32 	%f31, %f28, %f1, %f30;
	ld.global.f32 	%f32, [ray+20];
	fma.rn.ftz.f32 	%f33, %f32, %f3, %f31;
	rcp.approx.ftz.f32 	%f34, %f33;
	ld.global.f32 	%f35, [ray];
	sub.ftz.f32 	%f36, %f9, %f35;
	ld.global.f32 	%f37, [ray+4];
	sub.ftz.f32 	%f38, %f8, %f37;
	ld.global.f32 	%f39, [ray+8];
	sub.ftz.f32 	%f40, %f7, %f39;
	mul.ftz.f32 	%f41, %f34, %f36;
	mul.ftz.f32 	%f42, %f34, %f38;
	mul.ftz.f32 	%f43, %f34, %f40;
	mul.ftz.f32 	%f44, %f29, %f43;
	mul.ftz.f32 	%f45, %f42, %f32;
	sub.ftz.f32 	%f46, %f44, %f45;
	mul.ftz.f32 	%f47, %f41, %f32;
	mul.ftz.f32 	%f48, %f43, %f28;
	sub.ftz.f32 	%f49, %f47, %f48;
	mul.ftz.f32 	%f50, %f42, %f28;
	mul.ftz.f32 	%f51, %f41, %f29;
	sub.ftz.f32 	%f52, %f50, %f51;
	mul.ftz.f32 	%f53, %f20, %f49;
	fma.rn.ftz.f32 	%f54, %f19, %f46, %f53;
	fma.rn.ftz.f32 	%f4, %f21, %f52, %f54;
	mul.ftz.f32 	%f55, %f14, %f49;
	fma.rn.ftz.f32 	%f56, %f13, %f46, %f55;
	fma.rn.ftz.f32 	%f5, %f15, %f52, %f56;
	mul.ftz.f32 	%f57, %f2, %f42;
	fma.rn.ftz.f32 	%f58, %f1, %f41, %f57;
	fma.rn.ftz.f32 	%f6, %f3, %f43, %f58;
	ld.global.f32 	%f59, [ray+32];
	setp.lt.ftz.f32	%p1, %f6, %f59;
	ld.global.f32 	%f60, [ray+28];
	setp.gt.ftz.f32	%p2, %f6, %f60;
	and.pred  	%p3, %p1, %p2;
	setp.ge.ftz.f32	%p4, %f4, 0f00000000;
	and.pred  	%p5, %p3, %p4;
	setp.ge.ftz.f32	%p6, %f5, 0f00000000;
	and.pred  	%p7, %p5, %p6;
	add.ftz.f32 	%f61, %f4, %f5;
	setp.le.ftz.f32	%p8, %f61, 0f3F800000;
	and.pred  	%p9, %p7, %p8;
	@!%p9 bra 	BB0_7;
	bra.uni 	BB0_1;

BB0_1:
	// inline asm
	call (%r9), _rt_potential_intersection, (%f6);
	// inline asm
	setp.eq.s32	%p10, %r9, 0;
	@%p10 bra 	BB0_7;

	mul.ftz.f32 	%f63, %f2, %f2;
	fma.rn.ftz.f32 	%f64, %f1, %f1, %f63;
	fma.rn.ftz.f32 	%f65, %f3, %f3, %f64;
	sqrt.approx.ftz.f32 	%f66, %f65;
	rcp.approx.ftz.f32 	%f67, %f66;
	mul.ftz.f32 	%f68, %f3, %f67;
	mul.ftz.f32 	%f69, %f2, %f67;
	mul.ftz.f32 	%f70, %f1, %f67;
	st.global.v2.f32 	[Ng], {%f70, %f69};
	st.global.f32 	[Ng+8], %f68;
	st.global.v2.f32 	[N], {%f70, %f69};
	st.global.f32 	[N+8], %f68;
	mov.f32 	%f71, 0f00000000;
	st.global.v2.f32 	[UV], {%f71, %f71};
	mov.u64 	%rd33, norms;
	cvta.global.u64 	%rd32, %rd33;
	// inline asm
	call (%rd28, %rd29, %rd30, %rd31), _rt_buffer_get_size_64, (%rd32, %r7, %r8);
	// inline asm
	cvt.u32.u64	%r12, %rd28;
	setp.eq.s32	%p11, %r12, 0;
	@%p11 bra 	BB0_4;

	mov.u64 	%rd58, tri_norms;
	cvta.global.u64 	%rd35, %rd58;
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd35, %r7, %r8, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.u32 	%rd42, [%rd34];
	ld.u32 	%rd48, [%rd34+4];
	ld.u32 	%rd54, [%rd34+8];
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd32, %r7, %r8, %rd42, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f72, [%rd40+8];
	ld.f32 	%f73, [%rd40+4];
	ld.f32 	%f74, [%rd40];
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd32, %r7, %r8, %rd48, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f75, [%rd46+8];
	ld.f32 	%f76, [%rd46+4];
	ld.f32 	%f77, [%rd46];
	// inline asm
	call (%rd52), _rt_buffer_get_64, (%rd32, %r7, %r8, %rd54, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f78, [%rd52+8];
	ld.f32 	%f79, [%rd52+4];
	ld.f32 	%f80, [%rd52];
	mul.ftz.f32 	%f81, %f5, %f80;
	mul.ftz.f32 	%f82, %f5, %f79;
	mul.ftz.f32 	%f83, %f5, %f78;
	fma.rn.ftz.f32 	%f84, %f4, %f77, %f81;
	fma.rn.ftz.f32 	%f85, %f4, %f76, %f82;
	fma.rn.ftz.f32 	%f86, %f4, %f75, %f83;
	mov.f32 	%f87, 0f3F800000;
	sub.ftz.f32 	%f88, %f87, %f4;
	sub.ftz.f32 	%f89, %f88, %f5;
	fma.rn.ftz.f32 	%f90, %f89, %f74, %f84;
	fma.rn.ftz.f32 	%f91, %f89, %f73, %f85;
	fma.rn.ftz.f32 	%f92, %f89, %f72, %f86;
	mul.ftz.f32 	%f93, %f91, %f91;
	fma.rn.ftz.f32 	%f94, %f90, %f90, %f93;
	fma.rn.ftz.f32 	%f95, %f92, %f92, %f94;
	sqrt.approx.ftz.f32 	%f96, %f95;
	rcp.approx.ftz.f32 	%f97, %f96;
	mul.ftz.f32 	%f98, %f97, %f92;
	mul.ftz.f32 	%f99, %f97, %f91;
	mul.ftz.f32 	%f100, %f97, %f90;
	st.global.v2.f32 	[N], {%f100, %f99};
	st.global.f32 	[N+8], %f98;

BB0_4:
	mov.u64 	%rd65, uvs;
	cvta.global.u64 	%rd64, %rd65;
	mov.u32 	%r22, 8;
	// inline asm
	call (%rd60, %rd61, %rd62, %rd63), _rt_buffer_get_size_64, (%rd64, %r7, %r22);
	// inline asm
	cvt.u32.u64	%r23, %rd60;
	setp.eq.s32	%p12, %r23, 0;
	@%p12 bra 	BB0_6;

	mov.u64 	%rd90, tri_uvs;
	cvta.global.u64 	%rd67, %rd90;
	// inline asm
	call (%rd66), _rt_buffer_get_64, (%rd67, %r7, %r8, %rd4, %rd25, %rd25, %rd25);
	// inline asm
	ld.u32 	%rd74, [%rd66];
	ld.u32 	%rd80, [%rd66+4];
	ld.u32 	%rd86, [%rd66+8];
	// inline asm
	call (%rd72), _rt_buffer_get_64, (%rd64, %r7, %r22, %rd74, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f101, %f102}, [%rd72];
	// inline asm
	call (%rd78), _rt_buffer_get_64, (%rd64, %r7, %r22, %rd80, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f105, %f106}, [%rd78];
	// inline asm
	call (%rd84), _rt_buffer_get_64, (%rd64, %r7, %r22, %rd86, %rd25, %rd25, %rd25);
	// inline asm
	ld.v2.f32 	{%f109, %f110}, [%rd84];
	mul.ftz.f32 	%f113, %f5, %f109;
	mul.ftz.f32 	%f114, %f5, %f110;
	fma.rn.ftz.f32 	%f115, %f4, %f105, %f113;
	fma.rn.ftz.f32 	%f116, %f4, %f106, %f114;
	mov.f32 	%f117, 0f3F800000;
	sub.ftz.f32 	%f118, %f117, %f4;
	sub.ftz.f32 	%f119, %f118, %f5;
	fma.rn.ftz.f32 	%f120, %f119, %f102, %f116;
	fma.rn.ftz.f32 	%f121, %f119, %f101, %f115;
	st.global.v2.f32 	[UV], {%f121, %f120};

BB0_6:
	mov.u32 	%r33, 0;
	// inline asm
	call (%r32), _rt_report_intersection, (%r33);
	// inline asm

BB0_7:
	ret;
}

	// .globl	_Z12bounding_boxiPf
.visible .entry _Z12bounding_boxiPf(
	.param .u32 _Z12bounding_boxiPf_param_0,
	.param .u64 _Z12bounding_boxiPf_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<43>;
	.reg .s32 	%r<11>;
	.reg .s64 	%rd<30>;


	ld.param.u64 	%rd3, [_Z12bounding_boxiPf_param_1];
	ld.param.s32 	%rd6, [_Z12bounding_boxiPf_param_0];
	mov.u64 	%rd28, tris;
	cvta.global.u64 	%rd5, %rd28;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 12;
	mov.u64 	%rd27, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r7, %r8, %rd6, %rd27, %rd27, %rd27);
	// inline asm
	ld.u32 	%rd12, [%rd4];
	mov.u64 	%rd29, verts;
	cvta.global.u64 	%rd11, %rd29;
	ld.u32 	%rd18, [%rd4+4];
	ld.u32 	%rd24, [%rd4+8];
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd12, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f4, [%rd10+8];
	ld.f32 	%f2, [%rd10+4];
	ld.f32 	%f1, [%rd10];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd18, %rd27, %rd27, %rd27);
	// inline asm
	ld.f32 	%f7, [%rd16+8];
	ld.f32 	%f6, [%rd16+4];
	ld.f32 	%f5, [%rd16];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd11, %r7, %r8, %rd24, %rd27, %rd27, %rd27);
	// inline asm
	sub.ftz.f32 	%f12, %f5, %f1;
	sub.ftz.f32 	%f13, %f6, %f2;
	sub.ftz.f32 	%f14, %f7, %f4;
	ld.f32 	%f10, [%rd22+8];
	ld.f32 	%f9, [%rd22+4];
	ld.f32 	%f8, [%rd22];
	sub.ftz.f32 	%f15, %f8, %f1;
	sub.ftz.f32 	%f16, %f9, %f2;
	sub.ftz.f32 	%f17, %f10, %f4;
	mul.ftz.f32 	%f18, %f13, %f17;
	mul.ftz.f32 	%f19, %f14, %f16;
	sub.ftz.f32 	%f20, %f18, %f19;
	mul.ftz.f32 	%f21, %f14, %f15;
	mul.ftz.f32 	%f22, %f12, %f17;
	sub.ftz.f32 	%f23, %f21, %f22;
	mul.ftz.f32 	%f24, %f12, %f16;
	mul.ftz.f32 	%f25, %f13, %f15;
	sub.ftz.f32 	%f26, %f24, %f25;
	mul.ftz.f32 	%f27, %f23, %f23;
	fma.rn.ftz.f32 	%f28, %f20, %f20, %f27;
	fma.rn.ftz.f32 	%f29, %f26, %f26, %f28;
	sqrt.approx.ftz.f32 	%f11, %f29;
	mov.pred 	%p5, 0;
	setp.leu.ftz.f32	%p4, %f11, 0f00000000;
	@%p4 bra 	BB1_2;

	abs.ftz.f32 	%f30, %f11;
	setp.neu.ftz.f32	%p5, %f30, 0f7F800000;

BB1_2:
	cvta.to.global.u64 	%rd2, %rd3;
	@%p5 bra 	BB1_4;
	bra.uni 	BB1_3;

BB1_4:
	min.ftz.f32 	%f31, %f1, %f5;
	min.ftz.f32 	%f32, %f2, %f6;
	min.ftz.f32 	%f33, %f31, %f8;
	min.ftz.f32 	%f34, %f32, %f9;
	min.ftz.f32 	%f35, %f4, %f7;
	min.ftz.f32 	%f36, %f35, %f10;
	st.global.f32 	[%rd2], %f33;
	st.global.f32 	[%rd2+4], %f34;
	st.global.f32 	[%rd2+8], %f36;
	max.ftz.f32 	%f37, %f1, %f5;
	max.ftz.f32 	%f38, %f2, %f6;
	max.ftz.f32 	%f39, %f37, %f8;
	max.ftz.f32 	%f40, %f38, %f9;
	max.ftz.f32 	%f41, %f4, %f7;
	max.ftz.f32 	%f42, %f41, %f10;
	st.global.f32 	[%rd2+12], %f39;
	st.global.f32 	[%rd2+16], %f40;
	st.global.f32 	[%rd2+20], %f42;
	bra.uni 	BB1_5;

BB1_3:
	mov.u32 	%r9, 2096152002;
	st.global.u32 	[%rd2+8], %r9;
	st.global.u32 	[%rd2+4], %r9;
	st.global.u32 	[%rd2], %r9;
	mov.u32 	%r10, -51331646;
	st.global.u32 	[%rd2+20], %r10;
	st.global.u32 	[%rd2+16], %r10;
	st.global.u32 	[%rd2+12], %r10;

BB1_5:
	ret;
}

	// .globl	_ZN5optix3RayC1Ev
.visible .func _ZN5optix3RayC1Ev(
	.param .b64 _ZN5optix3RayC1Ev_param_0
)
{



	ret;
}

	// .globl	_ZN5optix3RayC2Ev
.visible .func _ZN5optix3RayC2Ev(
	.param .b64 _ZN5optix3RayC2Ev_param_0
)
{



	ret;
}


