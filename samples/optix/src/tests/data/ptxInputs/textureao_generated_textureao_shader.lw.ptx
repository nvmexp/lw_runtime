//
// Generated by LWPU LWVM Compiler
// Compiler built on Tue Feb 25 03:01:39 2014 (1393293699)
// Lwca compilation tools, release 6.0, V6.0.1
//

.version 4.0
.target sm_20
.address_size 64

.global .align 4 .b8 prd_occlusion[4];
.global .align 1 .b8 output_buffer[1];
.global .align 1 .b8 triangle_index_buffer[1];
.global .align 1 .b8 vindex_buffer[1];
.global .align 1 .b8 tindex_buffer[1];
.global .align 1 .b8 nindex_buffer[1];
.global .align 1 .b8 vertex_buffer[1];
.global .align 1 .b8 normal_buffer[1];
.global .align 1 .b8 texcoord_buffer[1];
.global .align 8 .b8 launch_index[8];
.global .align 8 .b8 launch_dim[8];
.global .align 16 .b8 bad_color[16];
.global .align 4 .b8 transform_matrix[64];
.global .align 4 .f32 scene_epsilon;
.global .align 4 .f32 occlusion_distance;
.global .align 4 .u32 sqrt_samples;
.global .align 4 .u32 frame;
.global .align 8 .b8 top_object[4];
.global .align 1 .b8 rnd_seeds[1];
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .f32 jitter_factor;
.global .align 4 .b8 _ZN21rti_internal_typeinfo13prd_occlusionE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10launch_dimE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9bad_colorE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo16transform_matrixE[8] = {82, 97, 121, 0, 64, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13scene_epsilonE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo18occlusion_distanceE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12sqrt_samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo5frameE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13jitter_factorE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10top_objectE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename13prd_occlusionE[21] = {80, 101, 114, 82, 97, 121, 68, 97, 116, 97, 95, 111, 99, 99, 108, 117, 115, 105, 111, 110, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename10launch_dimE[6] = {117, 105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename9bad_colorE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename16transform_matrixE[10] = {77, 97, 116, 114, 105, 120, 52, 120, 52, 0};
.global .align 1 .b8 _ZN21rti_internal_typename13scene_epsilonE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename18occlusion_distanceE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12sqrt_samplesE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename5frameE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename13jitter_factorE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename10top_objectE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum13prd_occlusionE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum10launch_dimE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum9bad_colorE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum16transform_matrixE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum13scene_epsilonE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum18occlusion_distanceE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum12sqrt_samplesE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum5frameE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum13jitter_factorE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum10top_objectE = 256;
.global .align 1 .b8 _ZN21rti_internal_semantic13prd_occlusionE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic10launch_dimE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic9bad_colorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic16transform_matrixE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13scene_epsilonE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic18occlusion_distanceE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12sqrt_samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic5frameE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13jitter_factorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10top_objectE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13prd_occlusionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10launch_dimE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9bad_colorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation16transform_matrixE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13scene_epsilonE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation18occlusion_distanceE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12sqrt_samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation5frameE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13jitter_factorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10top_objectE[1];
.global .align 1 .b8 $str[21] = {37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 44, 32, 37, 100, 32, 45, 32, 37, 100, 10, 0};
.global .align 1 .b8 $str1[17] = {116, 114, 105, 95, 105, 110, 100, 101, 120, 32, 101, 114, 114, 111, 114, 10, 0};

.visible .entry _Z16textureao_raygelw(

)
{
	.local .align 8 .b8 	__local_depot0[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<21>;
	.reg .s16 	%rs<16>;
	.reg .s32 	%r<196>;
	.reg .f32 	%f<198>;
	.reg .s64 	%rd<155>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd39, %SPL, 4;
	add.u64 	%rd40, %SPL, 8;
	cvta.global.u64 	%rd32, output_buffer;
	mov.u32 	%r55, 2;
	mov.u32 	%r56, 4;
	// inline asm
	call (%rd28, %rd29, %rd30, %rd31), _rt_buffer_get_size_64, (%rd32, %r55, %r56);
	// inline asm
	ld.global.v2.u32 	{%r57, %r58}, [launch_index];
	cvt.u64.u32	%rd35, %r57;
	cvt.u64.u32	%rd36, %r58;
	cvta.global.u64 	%rd34, triangle_index_buffer;
	mov.u64 	%rd38, 0;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r55, %r56, %rd35, %rd36, %rd38, %rd38);
	// inline asm
	ld.v4.u8 	{%rs6, %rs7, %rs8, %rs9}, [%rd33];
	cvt.u32.u16	%r61, %rs6;
	and.b32  	%r181, %r61, 255;
	shl.b32 	%r62, %r181, 16;
	cvt.u32.u16	%r63, %rs7;
	and.b32  	%r184, %r63, 255;
	shl.b32 	%r64, %r184, 8;
	cvt.u32.u16	%r65, %rs8;
	and.b32  	%r187, %r65, 255;
	add.s32 	%r66, %r64, %r187;
	add.s32 	%r4, %r66, %r62;
	setp.eq.s32	%p1, %r4, 16777215;
	mov.u64 	%rd151, %rd40;
	mov.u64 	%rd152, %rd39;
	@%p1 bra 	BB0_35;

	cvt.u64.u32	%rd8, %r4;
	cvta.global.u64 	%rd45, nindex_buffer;
	mov.u32 	%r191, 1;
	mov.u32 	%r68, 12;
	// inline asm
	call (%rd41, %rd42, %rd43, %rd44), _rt_buffer_get_size_64, (%rd45, %r191, %r68);
	// inline asm
	and.b64  	%rd46, %rd41, 4294967295;
	setp.lt.u64	%p2, %rd8, %rd46;
	@%p2 bra 	BB0_27;

	cvta.global.u64 	%rd10, $str;
	// inline asm
	call (%r69), _rt_print_active, ();
	// inline asm
	setp.eq.s32	%p3, %r69, 0;
	mov.u64 	%rd148, $str;
	@%p3 bra 	BB0_19;

	mov.u64 	%rd147, %rd10;

BB0_4:
	mov.u64 	%rd12, %rd148;
	mov.u64 	%rd11, %rd147;
	add.s64 	%rd13, %rd11, 1;
	add.s64 	%rd148, %rd12, 1;
	ld.global.u8 	%rs10, [%rd12+1];
	setp.ne.s16	%p4, %rs10, 0;
	mov.u64 	%rd147, %rd13;
	@%p4 bra 	BB0_4;

	sub.s64 	%rd49, %rd13, %rd10;
	cvt.u32.u64	%r72, %rd49;
	max.u32 	%r75, %r56, %r191;
	shl.b32 	%r76, %r75, 2;
	add.s32 	%r77, %r72, 32;
	and.b32  	%r78, %r77, -4;
	add.s32 	%r71, %r78, %r76;
	// inline asm
	call (%r70), _rt_print_start_64, (%rd10, %r71);
	// inline asm
	setp.eq.s32	%p5, %r70, 0;
	@%p5 bra 	BB0_19;

	st.local.u32 	[%rd40], %r181;
	mov.u32 	%r79, 0;
	// inline asm
	call (), _rt_print_write32, (%r79, %r70);
	// inline asm
	max.s32 	%r6, %r56, %r191;
	shr.s32 	%r83, %r6, 31;
	shr.u32 	%r84, %r83, 30;
	add.s32 	%r85, %r6, %r84;
	shr.s32 	%r7, %r85, 2;
	setp.lt.s32	%p6, %r6, 4;
	@%p6 bra 	BB0_9;

	add.s32 	%r180, %r70, 4;
	mov.u32 	%r182, 1;
	mov.u64 	%rd149, %rd40;

BB0_8:
	mov.u32 	%r10, %r181;
	mov.u64 	%rd15, %rd149;
	// inline asm
	call (), _rt_print_write32, (%r10, %r180);
	// inline asm
	setp.lt.s32	%p7, %r182, %r7;
	@%p7 bra 	BB0_26;

BB0_9:
	add.s32 	%r12, %r70, 4;
	add.s32 	%r90, %r12, %r6;
	st.local.u32 	[%rd39], %r184;
	// inline asm
	call (), _rt_print_write32, (%r79, %r90);
	// inline asm
	@%p6 bra 	BB0_12;

	add.s32 	%r92, %r70, %r6;
	add.s32 	%r183, %r92, 8;
	mov.u32 	%r185, 1;
	mov.u64 	%rd150, %rd39;

BB0_11:
	mov.u32 	%r15, %r184;
	mov.u64 	%rd16, %rd150;
	// inline asm
	call (), _rt_print_write32, (%r15, %r183);
	// inline asm
	setp.lt.s32	%p9, %r185, %r7;
	@%p9 bra 	BB0_25;

BB0_12:
	st.local.u32 	[%rd40], %r187;
	mad.lo.s32 	%r97, %r6, 2, %r12;
	add.s32 	%r17, %r97, -4;
	add.s32 	%r96, %r97, 4;
	// inline asm
	call (), _rt_print_write32, (%r79, %r96);
	// inline asm
	@%p6 bra 	BB0_15;

	mad.lo.s32 	%r99, %r6, 2, %r70;
	add.s32 	%r186, %r99, 12;
	mov.u32 	%r188, 1;

BB0_14:
	mov.u32 	%r20, %r187;
	mov.u64 	%rd17, %rd151;
	// inline asm
	call (), _rt_print_write32, (%r20, %r186);
	// inline asm
	setp.lt.s32	%p11, %r188, %r7;
	@%p11 bra 	BB0_24;

BB0_15:
	cvt.u32.u16	%r104, %rs9;
	and.b32  	%r190, %r104, 255;
	st.local.u32 	[%rd39], %r190;
	add.s32 	%r105, %r6, %r17;
	add.s32 	%r103, %r105, 12;
	// inline asm
	call (), _rt_print_write32, (%r79, %r103);
	// inline asm
	@%p6 bra 	BB0_18;

	mad.lo.s32 	%r107, %r6, 3, %r70;
	add.s32 	%r189, %r107, 16;

BB0_17:
	mov.u32 	%r25, %r190;
	mov.u64 	%rd18, %rd152;
	// inline asm
	call (), _rt_print_write32, (%r25, %r189);
	// inline asm
	setp.lt.s32	%p13, %r191, %r7;
	@%p13 bra 	BB0_23;

BB0_18:
	mad.lo.s32 	%r114, %r6, 2, %r17;
	add.s32 	%r111, %r114, 16;
	// inline asm
	call (), _rt_print_write32, (%r79, %r111);
	// inline asm
	add.s32 	%r113, %r114, 20;
	// inline asm
	call (), _rt_print_write32, (%r4, %r113);
	// inline asm

BB0_19:
	cvta.global.u64 	%rd23, $str1;
	// inline asm
	call (%r115), _rt_print_active, ();
	// inline asm
	setp.eq.s32	%p14, %r115, 0;
	mov.u64 	%rd154, $str1;
	@%p14 bra 	BB0_36;

	mov.u64 	%rd153, %rd23;

BB0_21:
	mov.u64 	%rd25, %rd154;
	mov.u64 	%rd24, %rd153;
	add.s64 	%rd26, %rd24, 1;
	add.s64 	%rd154, %rd25, 1;
	ld.global.u8 	%rs11, [%rd25+1];
	setp.ne.s16	%p15, %rs11, 0;
	mov.u64 	%rd153, %rd26;
	@%p15 bra 	BB0_21;

	sub.s64 	%rd52, %rd26, %rd23;
	cvt.u32.u64	%r118, %rd52;
	add.s32 	%r119, %r118, 8;
	and.b32  	%r117, %r119, -4;
	// inline asm
	call (%r116), _rt_print_start_64, (%rd23, %r117);
	// inline asm
	bra.uni 	BB0_36;

BB0_23:
	add.s64 	%rd152, %rd18, 4;
	ld.local.u32 	%r190, [%rd18+4];
	add.s32 	%r191, %r191, 1;
	add.s32 	%r189, %r189, 4;
	bra.uni 	BB0_17;

BB0_24:
	add.s64 	%rd151, %rd17, 4;
	ld.local.u32 	%r187, [%rd17+4];
	add.s32 	%r188, %r188, 1;
	add.s32 	%r186, %r186, 4;
	bra.uni 	BB0_14;

BB0_25:
	add.s64 	%rd21, %rd16, 4;
	ld.local.u32 	%r184, [%rd16+4];
	add.s32 	%r185, %r185, 1;
	add.s32 	%r183, %r183, 4;
	mov.u64 	%rd150, %rd21;
	bra.uni 	BB0_11;

BB0_26:
	add.s64 	%rd22, %rd15, 4;
	ld.local.u32 	%r181, [%rd15+4];
	add.s32 	%r182, %r182, 1;
	add.s32 	%r180, %r180, 4;
	mov.u64 	%rd149, %rd22;
	bra.uni 	BB0_8;

BB0_27:
	mov.u32 	%r144, 1;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd45, %r144, %r68, %rd8, %rd38, %rd38, %rd38);
	// inline asm
	cvta.global.u64 	%rd60, tindex_buffer;
	ld.s32 	%rd115, [%rd53];
	ld.s32 	%rd121, [%rd53+4];
	ld.s32 	%rd127, [%rd53+8];
	// inline asm
	call (%rd59), _rt_buffer_get_64, (%rd60, %r144, %r68, %rd8, %rd38, %rd38, %rd38);
	// inline asm
	ld.s32 	%rd67, [%rd59];
	cvta.global.u64 	%rd78, texcoord_buffer;
	mov.u32 	%r129, 8;
	ld.s32 	%rd73, [%rd59+4];
	ld.s32 	%rd79, [%rd59+8];
	// inline asm
	call (%rd65), _rt_buffer_get_64, (%rd78, %r144, %r129, %rd67, %rd38, %rd38, %rd38);
	// inline asm
	ld.v2.f32 	{%f20, %f21}, [%rd65];
	// inline asm
	call (%rd71), _rt_buffer_get_64, (%rd78, %r144, %r129, %rd73, %rd38, %rd38, %rd38);
	// inline asm
	ld.v2.f32 	{%f22, %f23}, [%rd71];
	// inline asm
	call (%rd77), _rt_buffer_get_64, (%rd78, %r144, %r129, %rd79, %rd38, %rd38, %rd38);
	// inline asm
	ld.v2.f32 	{%f24, %f25}, [%rd77];
	cvta.global.u64 	%rd84, vindex_buffer;
	// inline asm
	call (%rd83), _rt_buffer_get_64, (%rd84, %r144, %r68, %rd8, %rd38, %rd38, %rd38);
	// inline asm
	ld.s32 	%rd91, [%rd83];
	cvta.global.u64 	%rd102, vertex_buffer;
	ld.s32 	%rd97, [%rd83+4];
	ld.s32 	%rd103, [%rd83+8];
	// inline asm
	call (%rd89), _rt_buffer_get_64, (%rd102, %r144, %r68, %rd91, %rd38, %rd38, %rd38);
	// inline asm
	ld.f32 	%f26, [%rd89+8];
	ld.f32 	%f27, [%rd89+4];
	ld.f32 	%f28, [%rd89];
	// inline asm
	call (%rd95), _rt_buffer_get_64, (%rd102, %r144, %r68, %rd97, %rd38, %rd38, %rd38);
	// inline asm
	ld.f32 	%f29, [%rd95+8];
	ld.f32 	%f30, [%rd95+4];
	ld.f32 	%f31, [%rd95];
	// inline asm
	call (%rd101), _rt_buffer_get_64, (%rd102, %r144, %r68, %rd103, %rd38, %rd38, %rd38);
	// inline asm
	ld.f32 	%f32, [%rd101+8];
	ld.f32 	%f33, [%rd101+4];
	ld.f32 	%f34, [%rd101];
	ld.global.v2.u32 	{%r146, %r147}, [launch_index];
	cvt.u64.u32	%rd109, %r146;
	cvt.u64.u32	%rd110, %r147;
	cvta.global.u64 	%rd108, rnd_seeds;
	// inline asm
	call (%rd107), _rt_buffer_get_64, (%rd108, %r55, %r56, %rd109, %rd110, %rd38, %rd38);
	// inline asm
	ld.global.u32 	%r150, [frame];
	ld.u32 	%r151, [%rd107];
	xor.b32  	%r194, %r150, %r151;
	ld.global.v2.u32 	{%r152, %r153}, [launch_index];
	cvt.rn.f32.u32	%f35, %r152;
	cvt.rn.f32.u32	%f36, %r153;
	add.ftz.f32 	%f37, %f35, 0f3F000000;
	add.ftz.f32 	%f38, %f36, 0f3F000000;
	cvt.rn.f32.u64	%f39, %rd28;
	div.approx.ftz.f32 	%f40, %f37, %f39;
	cvt.rn.f32.u64	%f41, %rd29;
	div.approx.ftz.f32 	%f42, %f38, %f41;
	sub.ftz.f32 	%f45, %f23, %f25;
	sub.ftz.f32 	%f48, %f20, %f24;
	sub.ftz.f32 	%f50, %f24, %f22;
	sub.ftz.f32 	%f52, %f21, %f25;
	mul.ftz.f32 	%f53, %f50, %f52;
	fma.rn.ftz.f32 	%f54, %f45, %f48, %f53;
	sub.ftz.f32 	%f55, %f40, %f24;
	sub.ftz.f32 	%f56, %f42, %f25;
	mul.ftz.f32 	%f57, %f50, %f56;
	fma.rn.ftz.f32 	%f58, %f45, %f55, %f57;
	div.approx.ftz.f32 	%f59, %f58, %f54;
	sub.ftz.f32 	%f60, %f25, %f21;
	mul.ftz.f32 	%f61, %f48, %f56;
	fma.rn.ftz.f32 	%f62, %f60, %f55, %f61;
	div.approx.ftz.f32 	%f63, %f62, %f54;
	mov.f32 	%f64, 0f3F800000;
	sub.ftz.f32 	%f65, %f64, %f59;
	sub.ftz.f32 	%f66, %f65, %f63;
	mul.ftz.f32 	%f67, %f31, %f63;
	mul.ftz.f32 	%f68, %f30, %f63;
	mul.ftz.f32 	%f69, %f29, %f63;
	fma.rn.ftz.f32 	%f70, %f28, %f59, %f67;
	fma.rn.ftz.f32 	%f71, %f27, %f59, %f68;
	fma.rn.ftz.f32 	%f72, %f26, %f59, %f69;
	fma.rn.ftz.f32 	%f73, %f34, %f66, %f70;
	fma.rn.ftz.f32 	%f74, %f33, %f66, %f71;
	fma.rn.ftz.f32 	%f75, %f32, %f66, %f72;
	cvta.global.u64 	%rd126, normal_buffer;
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd126, %r144, %r68, %rd115, %rd38, %rd38, %rd38);
	// inline asm
	// inline asm
	call (%rd119), _rt_buffer_get_64, (%rd126, %r144, %r68, %rd121, %rd38, %rd38, %rd38);
	// inline asm
	// inline asm
	call (%rd125), _rt_buffer_get_64, (%rd126, %r144, %r68, %rd127, %rd38, %rd38, %rd38);
	// inline asm
	ld.f32 	%f76, [%rd113];
	ld.f32 	%f77, [%rd113+4];
	ld.f32 	%f78, [%rd113+8];
	ld.f32 	%f79, [%rd119];
	mul.ftz.f32 	%f80, %f79, %f63;
	ld.f32 	%f81, [%rd119+4];
	mul.ftz.f32 	%f82, %f81, %f63;
	ld.f32 	%f83, [%rd119+8];
	mul.ftz.f32 	%f84, %f83, %f63;
	fma.rn.ftz.f32 	%f85, %f76, %f59, %f80;
	fma.rn.ftz.f32 	%f86, %f77, %f59, %f82;
	fma.rn.ftz.f32 	%f87, %f78, %f59, %f84;
	ld.f32 	%f88, [%rd125];
	ld.f32 	%f89, [%rd125+4];
	ld.f32 	%f90, [%rd125+8];
	fma.rn.ftz.f32 	%f91, %f88, %f66, %f85;
	fma.rn.ftz.f32 	%f92, %f89, %f66, %f86;
	fma.rn.ftz.f32 	%f93, %f90, %f66, %f87;
	mul.ftz.f32 	%f94, %f92, %f92;
	fma.rn.ftz.f32 	%f95, %f91, %f91, %f94;
	fma.rn.ftz.f32 	%f96, %f93, %f93, %f95;
	sqrt.approx.ftz.f32 	%f97, %f96;
	rcp.approx.ftz.f32 	%f98, %f97;
	mul.ftz.f32 	%f99, %f91, %f98;
	mul.ftz.f32 	%f100, %f92, %f98;
	mul.ftz.f32 	%f101, %f93, %f98;
	ld.global.f32 	%f102, [transform_matrix];
	ld.global.f32 	%f103, [transform_matrix+4];
	mul.ftz.f32 	%f104, %f103, %f74;
	fma.rn.ftz.f32 	%f105, %f102, %f73, %f104;
	ld.global.f32 	%f106, [transform_matrix+8];
	fma.rn.ftz.f32 	%f107, %f106, %f75, %f105;
	ld.global.f32 	%f108, [transform_matrix+12];
	add.ftz.f32 	%f1, %f107, %f108;
	ld.global.f32 	%f109, [transform_matrix+16];
	ld.global.f32 	%f110, [transform_matrix+20];
	mul.ftz.f32 	%f111, %f110, %f74;
	fma.rn.ftz.f32 	%f112, %f109, %f73, %f111;
	ld.global.f32 	%f113, [transform_matrix+24];
	fma.rn.ftz.f32 	%f114, %f113, %f75, %f112;
	ld.global.f32 	%f115, [transform_matrix+28];
	add.ftz.f32 	%f2, %f114, %f115;
	ld.global.f32 	%f116, [transform_matrix+32];
	ld.global.f32 	%f117, [transform_matrix+36];
	mul.ftz.f32 	%f118, %f117, %f74;
	fma.rn.ftz.f32 	%f119, %f116, %f73, %f118;
	ld.global.f32 	%f120, [transform_matrix+40];
	fma.rn.ftz.f32 	%f121, %f120, %f75, %f119;
	ld.global.f32 	%f122, [transform_matrix+44];
	add.ftz.f32 	%f3, %f121, %f122;
	mul.ftz.f32 	%f123, %f103, %f100;
	fma.rn.ftz.f32 	%f124, %f102, %f99, %f123;
	fma.rn.ftz.f32 	%f125, %f106, %f101, %f124;
	fma.rn.ftz.f32 	%f4, %f108, 0f00000000, %f125;
	mul.ftz.f32 	%f126, %f110, %f100;
	fma.rn.ftz.f32 	%f127, %f109, %f99, %f126;
	fma.rn.ftz.f32 	%f128, %f113, %f101, %f127;
	fma.rn.ftz.f32 	%f5, %f115, 0f00000000, %f128;
	mul.ftz.f32 	%f129, %f117, %f100;
	fma.rn.ftz.f32 	%f130, %f116, %f99, %f129;
	fma.rn.ftz.f32 	%f131, %f120, %f101, %f130;
	fma.rn.ftz.f32 	%f6, %f122, 0f00000000, %f131;
	abs.ftz.f32 	%f132, %f4;
	abs.ftz.f32 	%f133, %f6;
	setp.gt.ftz.f32	%p16, %f132, %f133;
	neg.ftz.f32 	%f134, %f5;
	neg.ftz.f32 	%f135, %f6;
	selp.f32	%f136, %f134, 0f00000000, %p16;
	selp.f32	%f137, %f4, %f135, %p16;
	selp.f32	%f138, 0f00000000, %f5, %p16;
	mul.ftz.f32 	%f139, %f137, %f137;
	fma.rn.ftz.f32 	%f140, %f136, %f136, %f139;
	fma.rn.ftz.f32 	%f141, %f138, %f138, %f140;
	sqrt.approx.ftz.f32 	%f142, %f141;
	rcp.approx.ftz.f32 	%f143, %f142;
	mul.ftz.f32 	%f7, %f136, %f143;
	mul.ftz.f32 	%f8, %f137, %f143;
	mul.ftz.f32 	%f9, %f138, %f143;
	ld.global.u32 	%r195, [sqrt_samples];
	setp.gt.s32	%p17, %r195, 0;
	@%p17 bra 	BB0_29;

	mov.f32 	%f197, 0f00000000;
	bra.uni 	BB0_34;

BB0_29:
	mul.ftz.f32 	%f146, %f8, %f6;
	mul.ftz.f32 	%f147, %f9, %f5;
	sub.ftz.f32 	%f10, %f146, %f147;
	mul.ftz.f32 	%f148, %f9, %f4;
	mul.ftz.f32 	%f149, %f7, %f6;
	sub.ftz.f32 	%f11, %f148, %f149;
	mul.ftz.f32 	%f150, %f7, %f5;
	mul.ftz.f32 	%f151, %f8, %f4;
	sub.ftz.f32 	%f12, %f150, %f151;
	cvt.rn.f32.s32	%f152, %r195;
	rcp.approx.ftz.f32 	%f13, %f152;
	mov.f32 	%f197, 0f00000000;
	mov.u32 	%r192, 0;

BB0_30:
	setp.lt.s32	%p18, %r195, 1;
	@%p18 bra 	BB0_33;

	cvt.rn.f32.s32	%f15, %r192;
	mov.u32 	%r157, 0;
	mov.u32 	%r193, %r157;

BB0_32:
	mov.u32 	%r44, %r193;
	add.u64 	%rd131, %SP, 0;
	cvta.to.local.u64 	%rd132, %rd131;
	st.local.u32 	[%rd132], %r157;
	mov.f32 	%f161, 0f00000000;
	mad.lo.s32 	%r162, %r194, 1664525, 1013904223;
	and.b32  	%r163, %r162, 16777215;
	cvt.rn.f32.u32	%f162, %r163;
	mov.f32 	%f163, 0f4B800000;
	div.approx.ftz.f32 	%f164, %f162, %f163;
	add.ftz.f32 	%f165, %f15, %f164;
	mul.ftz.f32 	%f166, %f165, %f13;
	mad.lo.s32 	%r194, %r162, 1664525, 1013904223;
	and.b32  	%r164, %r194, 16777215;
	cvt.rn.f32.u32	%f167, %r164;
	div.approx.ftz.f32 	%f168, %f167, %f163;
	cvt.rn.f32.s32	%f169, %r44;
	add.ftz.f32 	%f170, %f169, %f168;
	mul.ftz.f32 	%f171, %f170, %f13;
	sqrt.approx.ftz.f32 	%f172, %f166;
	mul.ftz.f32 	%f173, %f171, 0f40C90FDB;
	cos.approx.ftz.f32 	%f174, %f173;
	mul.ftz.f32 	%f175, %f172, %f174;
	sin.approx.ftz.f32 	%f176, %f173;
	mul.ftz.f32 	%f177, %f172, %f176;
	mul.ftz.f32 	%f178, %f175, %f175;
	sub.ftz.f32 	%f180, %f64, %f178;
	mul.ftz.f32 	%f181, %f177, %f177;
	sub.ftz.f32 	%f182, %f180, %f181;
	max.ftz.f32 	%f183, %f161, %f182;
	sqrt.approx.ftz.f32 	%f184, %f183;
	mul.ftz.f32 	%f185, %f7, %f177;
	mul.ftz.f32 	%f186, %f8, %f177;
	mul.ftz.f32 	%f187, %f9, %f177;
	fma.rn.ftz.f32 	%f188, %f10, %f175, %f185;
	fma.rn.ftz.f32 	%f189, %f11, %f175, %f186;
	fma.rn.ftz.f32 	%f190, %f12, %f175, %f187;
	fma.rn.ftz.f32 	%f156, %f4, %f184, %f188;
	fma.rn.ftz.f32 	%f157, %f5, %f184, %f189;
	fma.rn.ftz.f32 	%f158, %f6, %f184, %f190;
	ld.global.u32 	%r158, [top_object];
	ld.global.f32 	%f160, [occlusion_distance];
	ld.global.f32 	%f159, [scene_epsilon];
	// inline asm
	call _rt_trace_64, (%r158, %f1, %f2, %f3, %f156, %f157, %f158, %r144, %f159, %f160, %rd131, %r56);
	// inline asm
	ld.local.f32 	%f191, [%rd132];
	sub.ftz.f32 	%f192, %f64, %f191;
	add.ftz.f32 	%f197, %f197, %f192;
	ld.global.u32 	%r195, [sqrt_samples];
	add.s32 	%r48, %r44, 1;
	setp.lt.s32	%p19, %r48, %r195;
	mov.u32 	%r193, %r48;
	@%p19 bra 	BB0_32;

BB0_33:
	add.s32 	%r192, %r192, 1;
	setp.lt.s32	%p20, %r192, %r195;
	@%p20 bra 	BB0_30;

BB0_34:
	cvta.global.u64 	%rd146, output_buffer;
	mov.u32 	%r179, 2;
	mov.u64 	%rd145, 0;
	mul.lo.s32 	%r167, %r195, %r195;
	cvt.rn.f32.s32	%f193, %r167;
	div.approx.ftz.f32 	%f194, %f197, %f193;
	ld.global.v2.u32 	{%r168, %r169}, [launch_index];
	cvt.u64.u32	%rd135, %r168;
	cvt.u64.u32	%rd136, %r169;
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd146, %r179, %r56, %rd135, %rd136, %rd145, %rd145);
	// inline asm
	cvt.ftz.sat.f32.f32	%f195, %f194;
	mul.ftz.f32 	%f196, %f195, 0f437FFD71;
	cvt.rzi.ftz.u32.f32	%r172, %f196;
	cvt.u16.u32	%rs12, %r172;
	mov.u16 	%rs13, 255;
	st.v4.u8 	[%rd133], {%rs12, %rs12, %rs12, %rs13};
	bra.uni 	BB0_36;

BB0_35:
	ld.global.v2.u32 	{%r175, %r176}, [launch_index];
	cvt.u64.u32	%rd141, %r175;
	cvt.u64.u32	%rd142, %r176;
	// inline asm
	call (%rd139), _rt_buffer_get_64, (%rd32, %r55, %r56, %rd141, %rd142, %rd38, %rd38);
	// inline asm
	mov.u16 	%rs14, 255;
	mov.u16 	%rs15, 128;
	st.v4.u8 	[%rd139], {%rs15, %rs15, %rs15, %rs14};

BB0_36:
	ret;
}

.visible .func  (.param .b32 func_retval0) _ZNK5optix6MatrixILj4ELj4EEixEj(
	.param .b64 _ZNK5optix6MatrixILj4ELj4EEixEj_param_0,
	.param .b32 _ZNK5optix6MatrixILj4ELj4EEixEj_param_1
)
{
	.reg .f32 	%f<2>;
	.reg .s64 	%rd<5>;


	ld.param.u64 	%rd1, [_ZNK5optix6MatrixILj4ELj4EEixEj_param_0];
	ld.param.u32 	%rd2, [_ZNK5optix6MatrixILj4ELj4EEixEj_param_1];
	shl.b64 	%rd3, %rd2, 2;
	add.s64 	%rd4, %rd1, %rd3;
	ld.f32 	%f1, [%rd4];
	st.param.f32	[func_retval0+0], %f1;
	ret;
}

.visible .entry _Z17any_hit_occlusiolw(

)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 1065353216;
	st.global.u32 	[prd_occlusion], %r1;
	// inline asm
	call _rt_terminate_ray, ();
	// inline asm
	ret;
}

.visible .entry _Z4missv(

)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 0;
	st.global.u32 	[prd_occlusion], %r1;
	ret;
}

.visible .entry _Z9exceptiolw(

)
{
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<10>;
	.reg .f32 	%f<14>;
	.reg .s64 	%rd<7>;


	ldu.global.v4.f32 	{%f1, %f2, %f3, %f4}, [bad_color];
	cvt.ftz.sat.f32.f32	%f6, %f1;
	mul.ftz.f32 	%f7, %f6, 0f437FFD71;
	cvt.rzi.ftz.u32.f32	%r3, %f7;
	cvt.ftz.sat.f32.f32	%f9, %f2;
	mul.ftz.f32 	%f10, %f9, 0f437FFD71;
	cvt.rzi.ftz.u32.f32	%r4, %f10;
	cvt.ftz.sat.f32.f32	%f12, %f3;
	mul.ftz.f32 	%f13, %f12, 0f437FFD71;
	cvt.rzi.ftz.u32.f32	%r5, %f13;
	cvta.global.u64 	%rd2, output_buffer;
	ldu.global.v2.u32 	{%r6, %r7}, [launch_index];
	cvt.u64.u32	%rd3, %r6;
	cvt.u64.u32	%rd4, %r7;
	mov.u32 	%r1, 2;
	mov.u32 	%r2, 4;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r1, %r2, %rd3, %rd4, %rd6, %rd6);
	// inline asm
	cvt.u16.u32	%rs1, %r5;
	cvt.u16.u32	%rs2, %r4;
	cvt.u16.u32	%rs3, %r3;
	mov.u16 	%rs4, 255;
	st.v4.u8 	[%rd1], {%rs3, %rs2, %rs1, %rs4};
	ret;
}


