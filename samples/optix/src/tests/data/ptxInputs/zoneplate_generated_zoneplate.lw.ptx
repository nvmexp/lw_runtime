//
// Generated by LWPU LWVM Compiler
// Compiler built on Tue Feb 25 03:01:39 2014 (1393293699)
// Lwca compilation tools, release 6.0, V6.0.1
//

.version 4.0
.target sm_20
.address_size 64

.global .align 4 .b8 ray[36];
.global .align 1 .b8 output_color_only[1];
.global .align 1 .b8 adaptive_sample_locations[1];
.global .align 1 .b8 output_samples[1];
.global .align 1 .b8 filter_weights[1];
.global .align 1 .b8 weighted_scatter_sums[1];
.global .align 8 .b8 launch_index[8];
.global .align 8 .b8 window_size[8];
.global .align 4 .u32 filter_type;
.global .align 4 .u32 render_type;
.global .align 4 .f32 filter_width;
.global .align 4 .f32 checkerboard_rotate;
.global .align 4 .u32 checkerboard_width;
.global .align 4 .u32 sqrt_samples_per_pixel;
.global .align 4 .f32 gaussian_alpha;
.global .align 4 .f32 jitter_amount;
.global .align 4 .f32 sinc_tau;
.global .align 4 .u32 contrast_window_width;
.global .align 4 .f32 adaptive_contrast_threshold;
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11window_sizeE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11filter_typeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11render_typeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12filter_widthE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19checkerboard_rotateE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo18checkerboard_widthE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo22sqrt_samples_per_pixelE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14gaussian_alphaE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13jitter_amountE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8sinc_tauE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo21contrast_window_widthE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo27adaptive_contrast_thresholdE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 1 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename11window_sizeE[6] = {117, 105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename11filter_typeE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename11render_typeE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename12filter_widthE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename19checkerboard_rotateE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename18checkerboard_widthE[4] = {105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename22sqrt_samples_per_pixelE[5] = {117, 105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14gaussian_alphaE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename13jitter_amountE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename8sinc_tauE[6] = {102, 108, 111, 97, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename21contrast_window_widthE[5] = {117, 105, 110, 116, 0};
.global .align 1 .b8 _ZN21rti_internal_typename27adaptive_contrast_thresholdE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum11window_sizeE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum11filter_typeE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum11render_typeE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum12filter_widthE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum19checkerboard_rotateE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum18checkerboard_widthE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum22sqrt_samples_per_pixelE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum14gaussian_alphaE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum13jitter_amountE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum8sinc_tauE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum21contrast_window_widthE = 256;
.global .align 4 .u32 _ZN21rti_internal_typeenum27adaptive_contrast_thresholdE = 256;
.global .align 1 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic11window_sizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11filter_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11render_typeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12filter_widthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19checkerboard_rotateE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic18checkerboard_widthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic22sqrt_samples_per_pixelE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14gaussian_alphaE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13jitter_amountE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8sinc_tauE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic21contrast_window_widthE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic27adaptive_contrast_thresholdE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11window_sizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11filter_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11render_typeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12filter_widthE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19checkerboard_rotateE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation18checkerboard_widthE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation22sqrt_samples_per_pixelE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14gaussian_alphaE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13jitter_amountE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8sinc_tauE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation21contrast_window_widthE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation27adaptive_contrast_thresholdE[1];
.global .align 1 .b8 $str[47] = {67, 97, 117, 103, 104, 116, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 48, 120, 37, 88, 32, 97, 116, 32, 108, 97, 117, 110, 99, 104, 32, 105, 110, 100, 101, 120, 32, 40, 37, 100, 44, 37, 100, 41, 10, 0};

.visible .entry _Z13zp_color_onlyv(

)
{
	.reg .pred 	%p<4>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<30>;
	.reg .f32 	%f<40>;
	.reg .s64 	%rd<7>;


	ldu.global.v2.u32 	{%r2, %r3}, [launch_index];
	cvt.rn.f32.u32	%f6, %r2;
	add.ftz.f32 	%f1, %f6, 0f3F000000;
	cvt.rn.f32.u32	%f7, %r3;
	add.ftz.f32 	%f2, %f7, 0f3F000000;
	ldu.global.u32 	%r1, [render_type];
	setp.eq.s32	%p1, %r1, 0;
	@%p1 bra 	BB0_4;

	setp.eq.s32	%p2, %r1, 1;
	@%p2 bra 	BB0_3;

	mov.f32 	%f39, 0f00000000;
	bra.uni 	BB0_5;

BB0_3:
	ldu.global.f32 	%f9, [checkerboard_rotate];
	mul.ftz.f32 	%f10, %f9, 0f40490FDB;
	mov.f32 	%f11, 0f43340000;
	div.approx.ftz.f32 	%f12, %f10, %f11;
	cos.approx.ftz.f32 	%f13, %f12;
	sin.approx.ftz.f32 	%f14, %f12;
	mul.ftz.f32 	%f15, %f14, %f2;
	fma.rn.ftz.f32 	%f16, %f13, %f1, %f15;
	ldu.global.u32 	%r6, [checkerboard_width];
	cvt.rn.f32.s32	%f17, %r6;
	div.approx.ftz.f32 	%f18, %f16, %f17;
	cvt.rmi.ftz.f32.f32	%f19, %f18;
	cvt.rzi.ftz.s32.f32	%r7, %f19;
	abs.s32 	%r8, %r7;
	mul.ftz.f32 	%f20, %f13, %f2;
	mul.ftz.f32 	%f21, %f14, %f1;
	sub.ftz.f32 	%f22, %f20, %f21;
	div.approx.ftz.f32 	%f23, %f22, %f17;
	cvt.rmi.ftz.f32.f32	%f24, %f23;
	cvt.rzi.ftz.s32.f32	%r9, %f24;
	abs.s32 	%r10, %r9;
	shr.u32 	%r11, %r8, 31;
	add.s32 	%r12, %r8, %r11;
	and.b32  	%r13, %r12, -2;
	sub.s32 	%r14, %r8, %r13;
	shr.u32 	%r15, %r10, 31;
	add.s32 	%r16, %r10, %r15;
	and.b32  	%r17, %r16, -2;
	sub.s32 	%r18, %r10, %r17;
	setp.eq.s32	%p3, %r14, %r18;
	selp.f32	%f39, 0f3F800000, 0f00000000, %p3;
	bra.uni 	BB0_5;

BB0_4:
	ld.global.v2.u32 	{%r19, %r20}, [window_size];
	cvt.rn.f32.u32	%f25, %r19;
	cvt.rn.f32.u32	%f26, %r20;
	div.approx.ftz.f32 	%f27, %f1, %f25;
	div.approx.ftz.f32 	%f28, %f2, %f26;
	mul.ftz.f32 	%f29, %f28, %f28;
	fma.rn.ftz.f32 	%f30, %f27, %f27, %f29;
	sqrt.approx.ftz.f32 	%f31, %f30;
	mul.ftz.f32 	%f32, %f31, 0f44FA0000;
	mul.ftz.f32 	%f33, %f32, %f31;
	cos.approx.ftz.f32 	%f34, %f33;
	add.ftz.f32 	%f35, %f34, 0f3F800000;
	mov.f32 	%f36, 0f40000000;
	div.approx.ftz.f32 	%f39, %f35, %f36;

BB0_5:
	ld.global.v2.u32 	{%r25, %r26}, [launch_index];
	cvt.u64.u32	%rd3, %r25;
	cvt.u64.u32	%rd4, %r26;
	cvta.global.u64 	%rd2, output_color_only;
	mov.u32 	%r23, 2;
	mov.u32 	%r24, 4;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r23, %r24, %rd3, %rd4, %rd6, %rd6);
	// inline asm
	cvt.ftz.sat.f32.f32	%f37, %f39;
	mul.ftz.f32 	%f38, %f37, 0f437FFD71;
	cvt.rzi.ftz.u32.f32	%r29, %f38;
	cvt.u16.u32	%rs1, %r29;
	mov.u16 	%rs2, 255;
	st.v4.u8 	[%rd1], {%rs1, %rs1, %rs1, %rs2};
	ret;
}

.visible .entry _Z19zp_generate_samplesv(

)
{
	.reg .pred 	%p<4>;
	.reg .s32 	%r<38>;
	.reg .f32 	%f<41>;
	.reg .s64 	%rd<20>;


	ld.global.v2.u32 	{%r6, %r7}, [launch_index];
	cvt.rn.f32.u32	%f6, %r6;
	add.ftz.f32 	%f7, %f6, 0f3F000000;
	ldu.global.u32 	%r9, [sqrt_samples_per_pixel];
	cvt.rn.f32.u32	%f8, %r9;
	div.approx.ftz.f32 	%f1, %f7, %f8;
	cvt.rn.f32.u32	%f9, %r7;
	add.ftz.f32 	%f10, %f9, 0f3F000000;
	div.approx.ftz.f32 	%f2, %f10, %f8;
	cvt.u64.u32	%rd4, %r6;
	cvt.u64.u32	%rd5, %r7;
	cvta.global.u64 	%rd9, output_samples;
	mov.u32 	%r4, 2;
	mov.u32 	%r5, 12;
	mov.u64 	%rd13, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd9, %r4, %r5, %rd4, %rd5, %rd13, %rd13);
	// inline asm
	st.f32 	[%rd2+4], %f1;
	ld.global.v2.u32 	{%r11, %r12}, [launch_index];
	cvt.u64.u32	%rd10, %r11;
	cvt.u64.u32	%rd11, %r12;
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r4, %r5, %rd10, %rd11, %rd13, %rd13);
	// inline asm
	st.f32 	[%rd8+8], %f2;
	ld.global.u32 	%r1, [render_type];
	setp.eq.s32	%p1, %r1, 0;
	@%p1 bra 	BB1_4;

	setp.eq.s32	%p2, %r1, 1;
	@%p2 bra 	BB1_3;

	mov.f32 	%f40, 0f00000000;
	bra.uni 	BB1_5;

BB1_3:
	ld.global.f32 	%f12, [checkerboard_rotate];
	mul.ftz.f32 	%f13, %f12, 0f40490FDB;
	mov.f32 	%f14, 0f43340000;
	div.approx.ftz.f32 	%f15, %f13, %f14;
	cos.approx.ftz.f32 	%f16, %f15;
	sin.approx.ftz.f32 	%f17, %f15;
	mul.ftz.f32 	%f18, %f17, %f2;
	fma.rn.ftz.f32 	%f19, %f16, %f1, %f18;
	ld.global.u32 	%r15, [checkerboard_width];
	cvt.rn.f32.s32	%f20, %r15;
	div.approx.ftz.f32 	%f21, %f19, %f20;
	cvt.rmi.ftz.f32.f32	%f22, %f21;
	cvt.rzi.ftz.s32.f32	%r16, %f22;
	abs.s32 	%r17, %r16;
	mul.ftz.f32 	%f23, %f16, %f2;
	mul.ftz.f32 	%f24, %f17, %f1;
	sub.ftz.f32 	%f25, %f23, %f24;
	div.approx.ftz.f32 	%f26, %f25, %f20;
	cvt.rmi.ftz.f32.f32	%f27, %f26;
	cvt.rzi.ftz.s32.f32	%r18, %f27;
	abs.s32 	%r19, %r18;
	shr.u32 	%r20, %r17, 31;
	add.s32 	%r21, %r17, %r20;
	and.b32  	%r22, %r21, -2;
	sub.s32 	%r23, %r17, %r22;
	shr.u32 	%r24, %r19, 31;
	add.s32 	%r25, %r19, %r24;
	and.b32  	%r26, %r25, -2;
	sub.s32 	%r27, %r19, %r26;
	setp.eq.s32	%p3, %r23, %r27;
	selp.f32	%f40, 0f3F800000, 0f00000000, %p3;
	bra.uni 	BB1_5;

BB1_4:
	ld.global.v2.u32 	{%r28, %r29}, [window_size];
	cvt.rn.f32.u32	%f28, %r28;
	cvt.rn.f32.u32	%f29, %r29;
	div.approx.ftz.f32 	%f30, %f1, %f28;
	div.approx.ftz.f32 	%f31, %f2, %f29;
	mul.ftz.f32 	%f32, %f31, %f31;
	fma.rn.ftz.f32 	%f33, %f30, %f30, %f32;
	sqrt.approx.ftz.f32 	%f34, %f33;
	mul.ftz.f32 	%f35, %f34, 0f44FA0000;
	mul.ftz.f32 	%f36, %f35, %f34;
	cos.approx.ftz.f32 	%f37, %f36;
	add.ftz.f32 	%f38, %f37, 0f3F800000;
	mov.f32 	%f39, 0f40000000;
	div.approx.ftz.f32 	%f40, %f38, %f39;

BB1_5:
	ld.global.v2.u32 	{%r34, %r35}, [launch_index];
	cvt.u64.u32	%rd16, %r34;
	cvt.u64.u32	%rd17, %r35;
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd9, %r4, %r5, %rd16, %rd17, %rd13, %rd13);
	// inline asm
	st.f32 	[%rd14], %f40;
	ret;
}

.visible .entry _Z17zp_gather_samplesv(

)
{
	.reg .pred 	%p<19>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<57>;
	.reg .f32 	%f<166>;
	.reg .s64 	%rd<28>;


	ldu.global.u32 	%r53, [sqrt_samples_per_pixel];
	cvt.rn.f32.u32	%f37, %r53;
	ldu.global.v2.u32 	{%r22, %r23}, [launch_index];
	cvt.rn.f32.u32	%f38, %r22;
	add.ftz.f32 	%f39, %f38, 0f3F000000;
	ldu.global.f32 	%f158, [filter_width];
	sub.ftz.f32 	%f40, %f39, %f158;
	mul.ftz.f32 	%f41, %f37, %f40;
	cvt.rmi.ftz.f32.f32	%f42, %f41;
	cvt.rzi.ftz.s32.f32	%r25, %f42;
	mov.u32 	%r26, 0;
	max.s32 	%r2, %r25, %r26;
	add.ftz.f32 	%f43, %f39, %f158;
	mul.ftz.f32 	%f44, %f37, %f43;
	cvt.rpi.ftz.f32.f32	%f45, %f44;
	cvt.rzi.ftz.s32.f32	%r27, %f45;
	ldu.global.u64 	%rd1, [window_size];
	cvt.u32.u64	%r28, %rd1;
	mad.lo.s32 	%r29, %r28, %r53, -1;
	min.u32 	%r54, %r27, %r29;
	mov.u32 	%r52, %r23;
	cvt.rn.f32.u32	%f46, %r23;
	add.ftz.f32 	%f47, %f46, 0f3F000000;
	sub.ftz.f32 	%f48, %f47, %f158;
	mul.ftz.f32 	%f49, %f37, %f48;
	cvt.rmi.ftz.f32.f32	%f50, %f49;
	cvt.rzi.ftz.s32.f32	%r30, %f50;
	max.s32 	%r5, %r30, %r26;
	setp.ne.s32	%p1, %r54, %r2;
	@%p1 bra 	BB2_3;

	mov.f32 	%f165, 0f00000000;
	mov.f32 	%f164, %f165;

BB2_2:
	ld.global.v2.u32 	{%r46, %r47}, [launch_index];
	cvt.u64.u32	%rd24, %r46;
	cvt.u64.u32	%rd25, %r47;
	cvta.global.u64 	%rd23, output_color_only;
	mov.u32 	%r44, 2;
	mov.u32 	%r45, 4;
	mov.u64 	%rd27, 0;
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd23, %r44, %r45, %rd24, %rd25, %rd27, %rd27);
	// inline asm
	div.approx.ftz.f32 	%f155, %f165, %f164;
	cvt.ftz.sat.f32.f32	%f156, %f155;
	mul.ftz.f32 	%f157, %f156, 0f437FFD71;
	cvt.rzi.ftz.u32.f32	%r50, %f157;
	cvt.u16.u32	%rs1, %r50;
	mov.u16 	%rs2, 255;
	st.v4.u8 	[%rd22], {%rs1, %rs1, %rs1, %rs2};
	ret;

BB2_3:
	shr.u64 	%rd3, %rd1, 32;
	cvt.u32.u64	%r51, %rd3;
	mov.f32 	%f165, 0f00000000;
	mov.f32 	%f164, %f165;

BB2_4:
	mov.u32 	%r9, %r53;
	mov.u32 	%r8, %r52;
	mov.f32 	%f2, %f158;
	mov.u32 	%r7, %r51;
	add.s32 	%r54, %r54, -1;
	cvt.rn.f32.u32	%f53, %r8;
	add.ftz.f32 	%f54, %f53, 0f3F000000;
	add.ftz.f32 	%f55, %f54, %f2;
	cvt.rn.f32.u32	%f56, %r9;
	mul.ftz.f32 	%f57, %f56, %f55;
	cvt.rpi.ftz.f32.f32	%f58, %f57;
	cvt.rzi.ftz.s32.f32	%r31, %f58;
	mad.lo.s32 	%r32, %r7, %r9, -1;
	min.u32 	%r12, %r31, %r32;
	setp.eq.s32	%p2, %r12, %r5;
	@%p2 bra 	BB2_35;

	add.s32 	%r56, %r12, -1;
	sub.s32 	%r55, %r12, %r5;

BB2_6:
	cvt.u64.u32	%rd12, %r54;
	cvta.global.u64 	%rd11, output_samples;
	cvt.u64.u32	%rd13, %r56;
	mov.u32 	%r35, 2;
	mov.u32 	%r36, 12;
	mov.u64 	%rd15, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd11, %r35, %r36, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.f32 	%f59, [%rd4+4];
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r35, %r36, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.global.v2.u32 	{%r37, %r38}, [launch_index];
	cvt.rn.f32.u32	%f60, %r37;
	add.ftz.f32 	%f61, %f60, 0f3F000000;
	sub.ftz.f32 	%f62, %f59, %f61;
	abs.ftz.f32 	%f7, %f62;
	cvt.rn.f32.u32	%f63, %r38;
	add.ftz.f32 	%f64, %f63, 0f3F000000;
	ld.f32 	%f65, [%rd10+8];
	sub.ftz.f32 	%f66, %f65, %f64;
	abs.ftz.f32 	%f8, %f66;
	ld.global.f32 	%f9, [filter_width];
	setp.gt.ftz.f32	%p3, %f7, %f9;
	setp.gt.ftz.f32	%p4, %f8, %f9;
	or.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB2_8;
	bra.uni 	BB2_7;

BB2_7:
	mov.f32 	%f163, 0f00000000;
	bra.uni 	BB2_34;

BB2_8:
	ld.global.u32 	%r41, [filter_type];
	setp.gt.s32	%p6, %r41, 2;
	@%p6 bra 	BB2_12;

	setp.eq.s32	%p9, %r41, 1;
	@%p9 bra 	BB2_22;

	setp.eq.s32	%p10, %r41, 2;
	@%p10 bra 	BB2_11;
	bra.uni 	BB2_14;

BB2_11:
	ld.global.f32 	%f108, [gaussian_alpha];
	neg.ftz.f32 	%f109, %f108;
	mul.ftz.f32 	%f110, %f9, %f109;
	mul.ftz.f32 	%f111, %f110, %f9;
	mul.ftz.f32 	%f112, %f111, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f113, %f112;
	mul.ftz.f32 	%f114, %f7, %f109;
	mul.ftz.f32 	%f115, %f114, %f7;
	mul.ftz.f32 	%f116, %f115, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f117, %f116;
	sub.ftz.f32 	%f118, %f117, %f113;
	mov.f32 	%f119, 0f00000000;
	max.ftz.f32 	%f120, %f119, %f118;
	mul.ftz.f32 	%f121, %f8, %f109;
	mul.ftz.f32 	%f122, %f121, %f8;
	mul.ftz.f32 	%f123, %f122, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f124, %f123;
	sub.ftz.f32 	%f125, %f124, %f113;
	max.ftz.f32 	%f126, %f119, %f125;
	mul.ftz.f32 	%f163, %f120, %f126;
	bra.uni 	BB2_34;

BB2_12:
	setp.eq.s32	%p7, %r41, 3;
	@%p7 bra 	BB2_15;

	setp.eq.s32	%p8, %r41, 4;
	@%p8 bra 	BB2_23;

BB2_14:
	mov.f32 	%f163, 0f3F800000;
	bra.uni 	BB2_34;

BB2_15:
	div.approx.ftz.f32 	%f10, %f7, %f9;
	setp.gt.ftz.f32	%p11, %f10, 0f3F800000;
	@%p11 bra 	BB2_17;

	mov.f32 	%f67, 0f41400000;
	sub.ftz.f32 	%f68, %f67, 0f40400000;
	add.ftz.f32 	%f69, %f68, 0fC0000000;
	mul.ftz.f32 	%f70, %f69, %f10;
	mul.ftz.f32 	%f71, %f70, %f10;
	mul.ftz.f32 	%f72, %f10, 0fC1400000;
	mul.ftz.f32 	%f73, %f72, %f10;
	fma.rn.ftz.f32 	%f74, %f71, %f10, %f73;
	mov.f32 	%f75, 0f40C00000;
	sub.ftz.f32 	%f76, %f75, 0f3F2AAAAB;
	add.ftz.f32 	%f159, %f74, %f76;
	bra.uni 	BB2_18;

BB2_17:
	mov.f32 	%f77, 0fBEAAAAAB;
	sub.ftz.f32 	%f78, %f77, 0f40000000;
	mul.ftz.f32 	%f79, %f78, %f10;
	mul.ftz.f32 	%f80, %f79, %f10;
	mul.ftz.f32 	%f81, %f10, 0f41400000;
	mul.ftz.f32 	%f82, %f81, %f10;
	fma.rn.ftz.f32 	%f83, %f80, %f10, %f82;
	mov.f32 	%f84, 0fC0800000;
	sub.ftz.f32 	%f85, %f84, 0f41800000;
	fma.rn.ftz.f32 	%f86, %f85, %f10, %f83;
	add.ftz.f32 	%f159, %f86, 0f412AAAAB;

BB2_18:
	mul.ftz.f32 	%f14, %f159, 0f3E2AAAAB;
	div.approx.ftz.f32 	%f15, %f8, %f9;
	setp.gt.ftz.f32	%p12, %f15, 0f3F800000;
	@%p12 bra 	BB2_20;

	mov.f32 	%f87, 0f41400000;
	sub.ftz.f32 	%f88, %f87, 0f40400000;
	add.ftz.f32 	%f89, %f88, 0fC0000000;
	mul.ftz.f32 	%f90, %f89, %f15;
	mul.ftz.f32 	%f91, %f90, %f15;
	mul.ftz.f32 	%f92, %f15, 0fC1400000;
	mul.ftz.f32 	%f93, %f92, %f15;
	fma.rn.ftz.f32 	%f94, %f91, %f15, %f93;
	mov.f32 	%f95, 0f40C00000;
	sub.ftz.f32 	%f96, %f95, 0f3F2AAAAB;
	add.ftz.f32 	%f160, %f94, %f96;
	bra.uni 	BB2_21;

BB2_20:
	mov.f32 	%f97, 0fBEAAAAAB;
	sub.ftz.f32 	%f98, %f97, 0f40000000;
	mul.ftz.f32 	%f99, %f98, %f15;
	mul.ftz.f32 	%f100, %f99, %f15;
	mul.ftz.f32 	%f101, %f15, 0f41400000;
	mul.ftz.f32 	%f102, %f101, %f15;
	fma.rn.ftz.f32 	%f103, %f100, %f15, %f102;
	mov.f32 	%f104, 0fC0800000;
	sub.ftz.f32 	%f105, %f104, 0f41800000;
	fma.rn.ftz.f32 	%f106, %f105, %f15, %f103;
	add.ftz.f32 	%f160, %f106, 0f412AAAAB;

BB2_21:
	mul.ftz.f32 	%f107, %f160, 0f3E2AAAAB;
	mul.ftz.f32 	%f163, %f14, %f107;
	bra.uni 	BB2_34;

BB2_22:
	sub.ftz.f32 	%f127, %f9, %f7;
	mov.f32 	%f128, 0f00000000;
	max.ftz.f32 	%f129, %f128, %f127;
	sub.ftz.f32 	%f130, %f9, %f8;
	max.ftz.f32 	%f131, %f128, %f130;
	mul.ftz.f32 	%f163, %f129, %f131;
	bra.uni 	BB2_34;

BB2_23:
	div.approx.ftz.f32 	%f22, %f7, %f9;
	setp.geu.ftz.f32	%p13, %f22, 0f3727C5AC;
	@%p13 bra 	BB2_25;

	mov.f32 	%f161, 0f3F800000;
	bra.uni 	BB2_28;

BB2_25:
	setp.leu.ftz.f32	%p14, %f22, 0f3F800000;
	@%p14 bra 	BB2_27;

	mov.f32 	%f161, 0f00000000;
	bra.uni 	BB2_28;

BB2_27:
	mul.ftz.f32 	%f132, %f22, 0f40490FDB;
	ld.global.f32 	%f133, [sinc_tau];
	mul.ftz.f32 	%f134, %f132, %f133;
	sin.approx.ftz.f32 	%f135, %f134;
	div.approx.ftz.f32 	%f136, %f135, %f134;
	sin.approx.ftz.f32 	%f137, %f132;
	div.approx.ftz.f32 	%f138, %f137, %f132;
	mul.ftz.f32 	%f161, %f136, %f138;

BB2_28:
	div.approx.ftz.f32 	%f25, %f8, %f9;
	setp.geu.ftz.f32	%p15, %f25, 0f3727C5AC;
	@%p15 bra 	BB2_30;

	mov.f32 	%f162, 0f3F800000;
	bra.uni 	BB2_33;

BB2_30:
	setp.leu.ftz.f32	%p16, %f25, 0f3F800000;
	@%p16 bra 	BB2_32;

	mov.f32 	%f162, 0f00000000;
	bra.uni 	BB2_33;

BB2_32:
	mul.ftz.f32 	%f141, %f25, 0f40490FDB;
	ld.global.f32 	%f142, [sinc_tau];
	mul.ftz.f32 	%f143, %f141, %f142;
	sin.approx.ftz.f32 	%f144, %f143;
	div.approx.ftz.f32 	%f145, %f144, %f143;
	sin.approx.ftz.f32 	%f146, %f141;
	div.approx.ftz.f32 	%f147, %f146, %f141;
	mul.ftz.f32 	%f162, %f145, %f147;

BB2_33:
	mul.ftz.f32 	%f163, %f161, %f162;

BB2_34:
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd11, %r35, %r36, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.f32 	%f152, [%rd16];
	fma.rn.ftz.f32 	%f165, %f163, %f152, %f165;
	add.ftz.f32 	%f164, %f164, %f163;
	add.s32 	%r56, %r56, -1;
	add.s32 	%r55, %r55, -1;
	setp.ne.s32	%p17, %r55, 0;
	@%p17 bra 	BB2_6;

BB2_35:
	setp.eq.s32	%p18, %r54, %r2;
	@%p18 bra 	BB2_2;

	ld.global.u32 	%r53, [sqrt_samples_per_pixel];
	ld.global.u32 	%r52, [launch_index+4];
	ld.global.f32 	%f158, [filter_width];
	ld.global.u32 	%r51, [window_size+4];
	bra.uni 	BB2_4;
}

.visible .entry _Z23zp_zero_scatter_buffersv(

)
{
	.reg .s32 	%r<14>;
	.reg .s64 	%rd<13>;


	cvta.global.u64 	%rd2, weighted_scatter_sums;
	ld.global.v2.u32 	{%r5, %r6}, [launch_index];
	cvt.u64.u32	%rd3, %r5;
	cvt.u64.u32	%rd4, %r6;
	mov.u32 	%r3, 2;
	mov.u32 	%r4, 4;
	mov.u64 	%rd12, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r3, %r4, %rd3, %rd4, %rd12, %rd12);
	// inline asm
	mov.u32 	%r9, 0;
	st.u32 	[%rd1], %r9;
	cvta.global.u64 	%rd8, filter_weights;
	ld.global.v2.u32 	{%r10, %r11}, [launch_index];
	cvt.u64.u32	%rd9, %r10;
	cvt.u64.u32	%rd10, %r11;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r3, %r4, %rd9, %rd10, %rd12, %rd12);
	// inline asm
	st.u32 	[%rd7], %r9;
	ret;
}

.visible .entry _Z18zp_scatter_samplesv(

)
{
	.reg .pred 	%p<47>;
	.reg .s32 	%r<84>;
	.reg .f32 	%f<304>;
	.reg .s64 	%rd<30>;


	ldu.global.u32 	%r79, [sqrt_samples_per_pixel];
	setp.eq.s32	%p3, %r79, 0;
	@%p3 bra 	BB4_44;

	cvta.global.u64 	%rd1, weighted_scatter_sums;
	cvta.global.u64 	%rd2, filter_weights;
	mov.u32 	%r71, 0;

BB4_2:
	mov.u32 	%r74, %r79;
	mov.u32 	%r78, %r74;
	setp.eq.s32	%p4, %r78, 0;
	@%p4 bra 	BB4_43;

	mov.u32 	%r72, 0;
	mov.u32 	%r77, %r78;

BB4_4:
	mov.u32 	%r5, %r77;
	ld.global.v2.u32 	{%r30, %r31}, [launch_index];
	mad.lo.s32 	%r33, %r30, %r5, %r71;
	mad.lo.s32 	%r35, %r31, %r5, %r72;
	cvt.rn.f32.u32	%f56, %r33;
	add.ftz.f32 	%f57, %f56, 0f3F000000;
	cvt.rn.f32.u32	%f58, %r5;
	div.approx.ftz.f32 	%f1, %f57, %f58;
	cvt.rn.f32.u32	%f59, %r35;
	add.ftz.f32 	%f60, %f59, 0f3F000000;
	div.approx.ftz.f32 	%f2, %f60, %f58;
	ld.global.u32 	%r6, [render_type];
	setp.eq.s32	%p5, %r6, 0;
	@%p5 bra 	BB4_8;

	setp.eq.s32	%p6, %r6, 1;
	@%p6 bra 	BB4_7;

	mov.f32 	%f292, 0f00000000;
	bra.uni 	BB4_9;

BB4_7:
	ld.global.f32 	%f62, [checkerboard_rotate];
	mul.ftz.f32 	%f63, %f62, 0f40490FDB;
	mov.f32 	%f64, 0f43340000;
	div.approx.ftz.f32 	%f65, %f63, %f64;
	cos.approx.ftz.f32 	%f66, %f65;
	sin.approx.ftz.f32 	%f67, %f65;
	mul.ftz.f32 	%f68, %f67, %f2;
	fma.rn.ftz.f32 	%f69, %f66, %f1, %f68;
	ld.global.u32 	%r36, [checkerboard_width];
	cvt.rn.f32.s32	%f70, %r36;
	div.approx.ftz.f32 	%f71, %f69, %f70;
	cvt.rmi.ftz.f32.f32	%f72, %f71;
	cvt.rzi.ftz.s32.f32	%r37, %f72;
	abs.s32 	%r38, %r37;
	mul.ftz.f32 	%f73, %f66, %f2;
	mul.ftz.f32 	%f74, %f67, %f1;
	sub.ftz.f32 	%f75, %f73, %f74;
	div.approx.ftz.f32 	%f76, %f75, %f70;
	cvt.rmi.ftz.f32.f32	%f77, %f76;
	cvt.rzi.ftz.s32.f32	%r39, %f77;
	abs.s32 	%r40, %r39;
	shr.u32 	%r41, %r38, 31;
	add.s32 	%r42, %r38, %r41;
	and.b32  	%r43, %r42, -2;
	sub.s32 	%r44, %r38, %r43;
	shr.u32 	%r45, %r40, 31;
	add.s32 	%r46, %r40, %r45;
	and.b32  	%r47, %r46, -2;
	sub.s32 	%r48, %r40, %r47;
	setp.eq.s32	%p7, %r44, %r48;
	selp.f32	%f292, 0f3F800000, 0f00000000, %p7;
	bra.uni 	BB4_9;

BB4_8:
	ld.global.v2.u32 	{%r49, %r50}, [window_size];
	cvt.rn.f32.u32	%f78, %r49;
	cvt.rn.f32.u32	%f79, %r50;
	div.approx.ftz.f32 	%f80, %f1, %f78;
	div.approx.ftz.f32 	%f81, %f2, %f79;
	mul.ftz.f32 	%f82, %f81, %f81;
	fma.rn.ftz.f32 	%f83, %f80, %f80, %f82;
	sqrt.approx.ftz.f32 	%f84, %f83;
	mul.ftz.f32 	%f85, %f84, 0f44FA0000;
	mul.ftz.f32 	%f86, %f85, %f84;
	cos.approx.ftz.f32 	%f87, %f86;
	add.ftz.f32 	%f88, %f87, 0f3F800000;
	mov.f32 	%f89, 0f40000000;
	div.approx.ftz.f32 	%f292, %f88, %f89;

BB4_9:
	ld.global.f32 	%f298, [filter_width];
	cvt.rmi.ftz.f32.f32	%f7, %f1;
	setp.neu.ftz.f32	%p8, %f7, %f1;
	@%p8 bra 	BB4_11;

	mov.pred 	%p46, -1;
	bra.uni 	BB4_12;

BB4_11:
	cvt.rmi.ftz.f32.f32	%f90, %f2;
	setp.eq.ftz.f32	%p46, %f90, %f2;

BB4_12:
	setp.gt.ftz.f32	%p10, %f298, 0f3F000000;
	or.pred  	%p11, %p10, %p46;
	@%p11 bra 	BB4_45;

	cvt.rzi.ftz.u32.f32	%r7, %f7;
	cvt.rmi.ftz.f32.f32	%f91, %f2;
	cvt.rzi.ftz.u32.f32	%r8, %f91;
	cvt.rn.f32.u32	%f92, %r7;
	add.ftz.f32 	%f93, %f92, 0f3F000000;
	sub.ftz.f32 	%f94, %f1, %f93;
	abs.ftz.f32 	%f8, %f94;
	cvt.rn.f32.u32	%f95, %r8;
	add.ftz.f32 	%f96, %f95, 0f3F000000;
	sub.ftz.f32 	%f97, %f2, %f96;
	abs.ftz.f32 	%f9, %f97;
	setp.gt.ftz.f32	%p12, %f8, %f298;
	setp.gt.ftz.f32	%p13, %f9, %f298;
	or.pred  	%p14, %p12, %p13;
	@!%p14 bra 	BB4_15;
	bra.uni 	BB4_14;

BB4_14:
	mov.f32 	%f297, 0f00000000;
	bra.uni 	BB4_41;

BB4_15:
	ld.global.u32 	%r53, [filter_type];
	setp.gt.s32	%p15, %r53, 2;
	@%p15 bra 	BB4_19;

	setp.eq.s32	%p18, %r53, 1;
	@%p18 bra 	BB4_29;

	setp.eq.s32	%p19, %r53, 2;
	@%p19 bra 	BB4_18;
	bra.uni 	BB4_21;

BB4_18:
	ld.global.f32 	%f139, [gaussian_alpha];
	neg.ftz.f32 	%f140, %f139;
	mul.ftz.f32 	%f141, %f298, %f140;
	mul.ftz.f32 	%f142, %f141, %f298;
	mul.ftz.f32 	%f143, %f142, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f144, %f143;
	mul.ftz.f32 	%f145, %f8, %f140;
	mul.ftz.f32 	%f146, %f145, %f8;
	mul.ftz.f32 	%f147, %f146, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f148, %f147;
	sub.ftz.f32 	%f149, %f148, %f144;
	mov.f32 	%f150, 0f00000000;
	max.ftz.f32 	%f151, %f150, %f149;
	mul.ftz.f32 	%f152, %f9, %f140;
	mul.ftz.f32 	%f153, %f152, %f9;
	mul.ftz.f32 	%f154, %f153, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f155, %f154;
	sub.ftz.f32 	%f156, %f155, %f144;
	max.ftz.f32 	%f157, %f150, %f156;
	mul.ftz.f32 	%f297, %f151, %f157;
	bra.uni 	BB4_41;

BB4_19:
	setp.eq.s32	%p16, %r53, 3;
	@%p16 bra 	BB4_22;

	setp.eq.s32	%p17, %r53, 4;
	@%p17 bra 	BB4_30;

BB4_21:
	mov.f32 	%f297, 0f3F800000;
	bra.uni 	BB4_41;

BB4_22:
	div.approx.ftz.f32 	%f10, %f8, %f298;
	setp.gt.ftz.f32	%p20, %f10, 0f3F800000;
	@%p20 bra 	BB4_24;

	mov.f32 	%f98, 0f41400000;
	sub.ftz.f32 	%f99, %f98, 0f40400000;
	add.ftz.f32 	%f100, %f99, 0fC0000000;
	mul.ftz.f32 	%f101, %f100, %f10;
	mul.ftz.f32 	%f102, %f101, %f10;
	mul.ftz.f32 	%f103, %f10, 0fC1400000;
	mul.ftz.f32 	%f104, %f103, %f10;
	fma.rn.ftz.f32 	%f105, %f102, %f10, %f104;
	mov.f32 	%f106, 0f40C00000;
	sub.ftz.f32 	%f107, %f106, 0f3F2AAAAB;
	add.ftz.f32 	%f293, %f105, %f107;
	bra.uni 	BB4_25;

BB4_24:
	mov.f32 	%f108, 0fBEAAAAAB;
	sub.ftz.f32 	%f109, %f108, 0f40000000;
	mul.ftz.f32 	%f110, %f109, %f10;
	mul.ftz.f32 	%f111, %f110, %f10;
	mul.ftz.f32 	%f112, %f10, 0f41400000;
	mul.ftz.f32 	%f113, %f112, %f10;
	fma.rn.ftz.f32 	%f114, %f111, %f10, %f113;
	mov.f32 	%f115, 0fC0800000;
	sub.ftz.f32 	%f116, %f115, 0f41800000;
	fma.rn.ftz.f32 	%f117, %f116, %f10, %f114;
	add.ftz.f32 	%f293, %f117, 0f412AAAAB;

BB4_25:
	mul.ftz.f32 	%f14, %f293, 0f3E2AAAAB;
	div.approx.ftz.f32 	%f15, %f9, %f298;
	setp.gt.ftz.f32	%p21, %f15, 0f3F800000;
	@%p21 bra 	BB4_27;

	mov.f32 	%f118, 0f41400000;
	sub.ftz.f32 	%f119, %f118, 0f40400000;
	add.ftz.f32 	%f120, %f119, 0fC0000000;
	mul.ftz.f32 	%f121, %f120, %f15;
	mul.ftz.f32 	%f122, %f121, %f15;
	mul.ftz.f32 	%f123, %f15, 0fC1400000;
	mul.ftz.f32 	%f124, %f123, %f15;
	fma.rn.ftz.f32 	%f125, %f122, %f15, %f124;
	mov.f32 	%f126, 0f40C00000;
	sub.ftz.f32 	%f127, %f126, 0f3F2AAAAB;
	add.ftz.f32 	%f294, %f125, %f127;
	bra.uni 	BB4_28;

BB4_27:
	mov.f32 	%f128, 0fBEAAAAAB;
	sub.ftz.f32 	%f129, %f128, 0f40000000;
	mul.ftz.f32 	%f130, %f129, %f15;
	mul.ftz.f32 	%f131, %f130, %f15;
	mul.ftz.f32 	%f132, %f15, 0f41400000;
	mul.ftz.f32 	%f133, %f132, %f15;
	fma.rn.ftz.f32 	%f134, %f131, %f15, %f133;
	mov.f32 	%f135, 0fC0800000;
	sub.ftz.f32 	%f136, %f135, 0f41800000;
	fma.rn.ftz.f32 	%f137, %f136, %f15, %f134;
	add.ftz.f32 	%f294, %f137, 0f412AAAAB;

BB4_28:
	mul.ftz.f32 	%f138, %f294, 0f3E2AAAAB;
	mul.ftz.f32 	%f297, %f14, %f138;
	bra.uni 	BB4_41;

BB4_29:
	sub.ftz.f32 	%f158, %f298, %f8;
	mov.f32 	%f159, 0f00000000;
	max.ftz.f32 	%f160, %f159, %f158;
	sub.ftz.f32 	%f161, %f298, %f9;
	max.ftz.f32 	%f162, %f159, %f161;
	mul.ftz.f32 	%f297, %f160, %f162;
	bra.uni 	BB4_41;

BB4_30:
	div.approx.ftz.f32 	%f22, %f8, %f298;
	setp.geu.ftz.f32	%p22, %f22, 0f3727C5AC;
	@%p22 bra 	BB4_32;

	mov.f32 	%f295, 0f3F800000;
	bra.uni 	BB4_35;

BB4_32:
	setp.leu.ftz.f32	%p23, %f22, 0f3F800000;
	@%p23 bra 	BB4_34;

	mov.f32 	%f295, 0f00000000;
	bra.uni 	BB4_35;

BB4_34:
	mul.ftz.f32 	%f163, %f22, 0f40490FDB;
	ld.global.f32 	%f164, [sinc_tau];
	mul.ftz.f32 	%f165, %f163, %f164;
	sin.approx.ftz.f32 	%f166, %f165;
	div.approx.ftz.f32 	%f167, %f166, %f165;
	sin.approx.ftz.f32 	%f168, %f163;
	div.approx.ftz.f32 	%f169, %f168, %f163;
	mul.ftz.f32 	%f295, %f167, %f169;

BB4_35:
	div.approx.ftz.f32 	%f25, %f9, %f298;
	setp.geu.ftz.f32	%p24, %f25, 0f3727C5AC;
	@%p24 bra 	BB4_37;

	mov.f32 	%f296, 0f3F800000;
	bra.uni 	BB4_40;

BB4_37:
	setp.leu.ftz.f32	%p25, %f25, 0f3F800000;
	@%p25 bra 	BB4_39;

	mov.f32 	%f296, 0f00000000;
	bra.uni 	BB4_40;

BB4_39:
	mul.ftz.f32 	%f172, %f25, 0f40490FDB;
	ld.global.f32 	%f173, [sinc_tau];
	mul.ftz.f32 	%f174, %f172, %f173;
	sin.approx.ftz.f32 	%f175, %f174;
	div.approx.ftz.f32 	%f176, %f175, %f174;
	sin.approx.ftz.f32 	%f177, %f172;
	div.approx.ftz.f32 	%f178, %f177, %f172;
	mul.ftz.f32 	%f296, %f176, %f178;

BB4_40:
	mul.ftz.f32 	%f297, %f295, %f296;

BB4_41:
	cvt.u64.u32	%rd14, %r8;
	cvt.u64.u32	%rd13, %r7;
	mov.u32 	%r56, 2;
	mov.u32 	%r57, 4;
	mov.u64 	%rd16, 0;
	// inline asm
	call (%rd5), _rt_buffer_get_64, (%rd1, %r56, %r57, %rd13, %rd14, %rd16, %rd16);
	// inline asm
	ld.f32 	%f183, [%rd5];
	fma.rn.ftz.f32 	%f184, %f292, %f297, %f183;
	st.f32 	[%rd5], %f184;
	// inline asm
	call (%rd11), _rt_buffer_get_64, (%rd2, %r56, %r57, %rd13, %rd14, %rd16, %rd16);
	// inline asm
	ld.f32 	%f185, [%rd11];
	add.ftz.f32 	%f186, %f185, %f297;
	st.f32 	[%rd11], %f186;

BB4_42:
	add.s32 	%r72, %r72, 1;
	ld.global.u32 	%r77, [sqrt_samples_per_pixel];
	setp.lt.u32	%p44, %r72, %r77;
	mov.u32 	%r78, %r77;
	@%p44 bra 	BB4_4;

BB4_43:
	mov.u32 	%r79, %r78;
	add.s32 	%r71, %r71, 1;
	setp.lt.u32	%p45, %r71, %r79;
	@%p45 bra 	BB4_2;

BB4_44:
	ret;

BB4_45:
	add.ftz.f32 	%f187, %f1, 0fBF000000;
	sub.ftz.f32 	%f188, %f187, %f298;
	cvt.rpi.ftz.f32.f32	%f189, %f188;
	cvt.rzi.ftz.s32.f32	%r58, %f189;
	add.ftz.f32 	%f190, %f187, %f298;
	cvt.rmi.ftz.f32.f32	%f191, %f190;
	cvt.rzi.ftz.s32.f32	%r59, %f191;
	add.ftz.f32 	%f192, %f2, 0fBF000000;
	sub.ftz.f32 	%f193, %f192, %f298;
	cvt.rpi.ftz.f32.f32	%f194, %f193;
	cvt.rzi.ftz.s32.f32	%r60, %f194;
	mov.u32 	%r61, 0;
	max.s32 	%r9, %r58, %r61;
	ld.global.u64 	%rd3, [window_size];
	cvt.u32.u64	%r62, %rd3;
	add.s32 	%r63, %r62, -1;
	min.u32 	%r81, %r59, %r63;
	max.s32 	%r11, %r60, %r61;
	setp.eq.s32	%p26, %r81, %r9;
	@%p26 bra 	BB4_42;

	shr.u64 	%rd17, %rd3, 32;
	cvt.u32.u64	%r80, %rd17;

BB4_47:
	mov.u32 	%r13, %r80;
	add.s32 	%r81, %r81, -1;
	add.ftz.f32 	%f196, %f192, %f298;
	cvt.rmi.ftz.f32.f32	%f197, %f196;
	cvt.rzi.ftz.s32.f32	%r64, %f197;
	add.s32 	%r65, %r13, -1;
	min.u32 	%r16, %r64, %r65;
	setp.eq.s32	%p27, %r16, %r11;
	@%p27 bra 	BB4_79;

	cvt.rn.f32.u32	%f198, %r81;
	add.ftz.f32 	%f199, %f198, 0f3F000000;
	sub.ftz.f32 	%f200, %f1, %f199;
	abs.ftz.f32 	%f31, %f200;
	cvt.u64.u32	%rd4, %r81;
	add.s32 	%r83, %r16, -1;
	mad.lo.s32 	%r82, %r11, -1, %r16;

BB4_49:
	cvt.rn.f32.u32	%f201, %r83;
	add.ftz.f32 	%f202, %f201, 0f3F000000;
	sub.ftz.f32 	%f203, %f2, %f202;
	abs.ftz.f32 	%f33, %f203;
	setp.gt.ftz.f32	%p28, %f33, %f298;
	setp.gt.ftz.f32	%p29, %f31, %f298;
	or.pred  	%p30, %p29, %p28;
	@!%p30 bra 	BB4_51;
	bra.uni 	BB4_50;

BB4_50:
	mov.f32 	%f303, 0f00000000;
	bra.uni 	BB4_77;

BB4_51:
	ld.global.u32 	%r66, [filter_type];
	setp.gt.s32	%p31, %r66, 2;
	@%p31 bra 	BB4_55;

	setp.eq.s32	%p34, %r66, 1;
	@%p34 bra 	BB4_65;

	setp.eq.s32	%p35, %r66, 2;
	@%p35 bra 	BB4_54;
	bra.uni 	BB4_57;

BB4_54:
	ld.global.f32 	%f245, [gaussian_alpha];
	neg.ftz.f32 	%f246, %f245;
	mul.ftz.f32 	%f247, %f298, %f246;
	mul.ftz.f32 	%f248, %f247, %f298;
	mul.ftz.f32 	%f249, %f248, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f250, %f249;
	mul.ftz.f32 	%f251, %f31, %f246;
	mul.ftz.f32 	%f252, %f251, %f31;
	mul.ftz.f32 	%f253, %f252, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f254, %f253;
	sub.ftz.f32 	%f255, %f254, %f250;
	mov.f32 	%f256, 0f00000000;
	max.ftz.f32 	%f257, %f256, %f255;
	mul.ftz.f32 	%f258, %f33, %f246;
	mul.ftz.f32 	%f259, %f258, %f33;
	mul.ftz.f32 	%f260, %f259, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f261, %f260;
	sub.ftz.f32 	%f262, %f261, %f250;
	max.ftz.f32 	%f263, %f256, %f262;
	mul.ftz.f32 	%f303, %f257, %f263;
	bra.uni 	BB4_77;

BB4_55:
	setp.eq.s32	%p32, %r66, 3;
	@%p32 bra 	BB4_58;

	setp.eq.s32	%p33, %r66, 4;
	@%p33 bra 	BB4_66;

BB4_57:
	mov.f32 	%f303, 0f3F800000;
	bra.uni 	BB4_77;

BB4_58:
	div.approx.ftz.f32 	%f34, %f31, %f298;
	setp.gt.ftz.f32	%p36, %f34, 0f3F800000;
	@%p36 bra 	BB4_60;

	mov.f32 	%f204, 0f41400000;
	sub.ftz.f32 	%f205, %f204, 0f40400000;
	add.ftz.f32 	%f206, %f205, 0fC0000000;
	mul.ftz.f32 	%f207, %f206, %f34;
	mul.ftz.f32 	%f208, %f207, %f34;
	mul.ftz.f32 	%f209, %f34, 0fC1400000;
	mul.ftz.f32 	%f210, %f209, %f34;
	fma.rn.ftz.f32 	%f211, %f208, %f34, %f210;
	mov.f32 	%f212, 0f40C00000;
	sub.ftz.f32 	%f213, %f212, 0f3F2AAAAB;
	add.ftz.f32 	%f299, %f211, %f213;
	bra.uni 	BB4_61;

BB4_60:
	mov.f32 	%f214, 0fBEAAAAAB;
	sub.ftz.f32 	%f215, %f214, 0f40000000;
	mul.ftz.f32 	%f216, %f215, %f34;
	mul.ftz.f32 	%f217, %f216, %f34;
	mul.ftz.f32 	%f218, %f34, 0f41400000;
	mul.ftz.f32 	%f219, %f218, %f34;
	fma.rn.ftz.f32 	%f220, %f217, %f34, %f219;
	mov.f32 	%f221, 0fC0800000;
	sub.ftz.f32 	%f222, %f221, 0f41800000;
	fma.rn.ftz.f32 	%f223, %f222, %f34, %f220;
	add.ftz.f32 	%f299, %f223, 0f412AAAAB;

BB4_61:
	mul.ftz.f32 	%f38, %f299, 0f3E2AAAAB;
	div.approx.ftz.f32 	%f39, %f33, %f298;
	setp.gt.ftz.f32	%p37, %f39, 0f3F800000;
	@%p37 bra 	BB4_63;

	mov.f32 	%f224, 0f41400000;
	sub.ftz.f32 	%f225, %f224, 0f40400000;
	add.ftz.f32 	%f226, %f225, 0fC0000000;
	mul.ftz.f32 	%f227, %f226, %f39;
	mul.ftz.f32 	%f228, %f227, %f39;
	mul.ftz.f32 	%f229, %f39, 0fC1400000;
	mul.ftz.f32 	%f230, %f229, %f39;
	fma.rn.ftz.f32 	%f231, %f228, %f39, %f230;
	mov.f32 	%f232, 0f40C00000;
	sub.ftz.f32 	%f233, %f232, 0f3F2AAAAB;
	add.ftz.f32 	%f300, %f231, %f233;
	bra.uni 	BB4_64;

BB4_63:
	mov.f32 	%f234, 0fBEAAAAAB;
	sub.ftz.f32 	%f235, %f234, 0f40000000;
	mul.ftz.f32 	%f236, %f235, %f39;
	mul.ftz.f32 	%f237, %f236, %f39;
	mul.ftz.f32 	%f238, %f39, 0f41400000;
	mul.ftz.f32 	%f239, %f238, %f39;
	fma.rn.ftz.f32 	%f240, %f237, %f39, %f239;
	mov.f32 	%f241, 0fC0800000;
	sub.ftz.f32 	%f242, %f241, 0f41800000;
	fma.rn.ftz.f32 	%f243, %f242, %f39, %f240;
	add.ftz.f32 	%f300, %f243, 0f412AAAAB;

BB4_64:
	mul.ftz.f32 	%f244, %f300, 0f3E2AAAAB;
	mul.ftz.f32 	%f303, %f38, %f244;
	bra.uni 	BB4_77;

BB4_65:
	sub.ftz.f32 	%f264, %f298, %f31;
	mov.f32 	%f265, 0f00000000;
	max.ftz.f32 	%f266, %f265, %f264;
	sub.ftz.f32 	%f267, %f298, %f33;
	max.ftz.f32 	%f268, %f265, %f267;
	mul.ftz.f32 	%f303, %f266, %f268;
	bra.uni 	BB4_77;

BB4_66:
	div.approx.ftz.f32 	%f46, %f31, %f298;
	setp.geu.ftz.f32	%p38, %f46, 0f3727C5AC;
	@%p38 bra 	BB4_68;

	mov.f32 	%f301, 0f3F800000;
	bra.uni 	BB4_71;

BB4_68:
	setp.leu.ftz.f32	%p39, %f46, 0f3F800000;
	@%p39 bra 	BB4_70;

	mov.f32 	%f301, 0f00000000;
	bra.uni 	BB4_71;

BB4_70:
	mul.ftz.f32 	%f269, %f46, 0f40490FDB;
	ld.global.f32 	%f270, [sinc_tau];
	mul.ftz.f32 	%f271, %f269, %f270;
	sin.approx.ftz.f32 	%f272, %f271;
	div.approx.ftz.f32 	%f273, %f272, %f271;
	sin.approx.ftz.f32 	%f274, %f269;
	div.approx.ftz.f32 	%f275, %f274, %f269;
	mul.ftz.f32 	%f301, %f273, %f275;

BB4_71:
	div.approx.ftz.f32 	%f49, %f33, %f298;
	setp.geu.ftz.f32	%p40, %f49, 0f3727C5AC;
	@%p40 bra 	BB4_73;

	mov.f32 	%f302, 0f3F800000;
	bra.uni 	BB4_76;

BB4_73:
	setp.leu.ftz.f32	%p41, %f49, 0f3F800000;
	@%p41 bra 	BB4_75;

	mov.f32 	%f302, 0f00000000;
	bra.uni 	BB4_76;

BB4_75:
	mul.ftz.f32 	%f278, %f49, 0f40490FDB;
	ld.global.f32 	%f279, [sinc_tau];
	mul.ftz.f32 	%f280, %f278, %f279;
	sin.approx.ftz.f32 	%f281, %f280;
	div.approx.ftz.f32 	%f282, %f281, %f280;
	sin.approx.ftz.f32 	%f283, %f278;
	div.approx.ftz.f32 	%f284, %f283, %f278;
	mul.ftz.f32 	%f302, %f282, %f284;

BB4_76:
	mul.ftz.f32 	%f303, %f301, %f302;

BB4_77:
	cvt.u64.u32	%rd27, %r83;
	mov.u32 	%r69, 2;
	mov.u32 	%r70, 4;
	mov.u64 	%rd29, 0;
	// inline asm
	call (%rd18), _rt_buffer_get_64, (%rd1, %r69, %r70, %rd4, %rd27, %rd29, %rd29);
	// inline asm
	mul.ftz.f32 	%f289, %f292, %f303;
	atom.add.f32 	%f290, [%rd18], %f289;
	// inline asm
	call (%rd24), _rt_buffer_get_64, (%rd2, %r69, %r70, %rd4, %rd27, %rd29, %rd29);
	// inline asm
	atom.add.f32 	%f291, [%rd24], %f303;
	setp.eq.s32	%p42, %r82, 1;
	@%p42 bra 	BB4_79;

	ld.global.f32 	%f298, [filter_width];
	add.s32 	%r83, %r83, -1;
	add.s32 	%r82, %r82, -1;
	bra.uni 	BB4_49;

BB4_79:
	setp.eq.s32	%p43, %r81, %r9;
	@%p43 bra 	BB4_42;

	ld.global.f32 	%f298, [filter_width];
	ld.global.u32 	%r80, [window_size+4];
	bra.uni 	BB4_47;
}

.visible .entry _Z20zp_scatter_do_dividev(

)
{
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<20>;
	.reg .f32 	%f<6>;
	.reg .s64 	%rd<19>;


	cvta.global.u64 	%rd2, output_color_only;
	ld.global.v2.u32 	{%r7, %r8}, [launch_index];
	cvt.u64.u32	%rd3, %r7;
	cvt.u64.u32	%rd4, %r8;
	mov.u32 	%r5, 2;
	mov.u32 	%r6, 4;
	mov.u64 	%rd18, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r5, %r6, %rd3, %rd4, %rd18, %rd18);
	// inline asm
	cvta.global.u64 	%rd8, weighted_scatter_sums;
	ld.global.v2.u32 	{%r11, %r12}, [launch_index];
	cvt.u64.u32	%rd9, %r11;
	cvt.u64.u32	%rd10, %r12;
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r5, %r6, %rd9, %rd10, %rd18, %rd18);
	// inline asm
	ld.f32 	%f1, [%rd7];
	cvta.global.u64 	%rd14, filter_weights;
	ld.global.v2.u32 	{%r15, %r16}, [launch_index];
	cvt.u64.u32	%rd15, %r15;
	cvt.u64.u32	%rd16, %r16;
	// inline asm
	call (%rd13), _rt_buffer_get_64, (%rd14, %r5, %r6, %rd15, %rd16, %rd18, %rd18);
	// inline asm
	ld.f32 	%f2, [%rd13];
	div.approx.ftz.f32 	%f3, %f1, %f2;
	cvt.ftz.sat.f32.f32	%f4, %f3;
	mul.ftz.f32 	%f5, %f4, 0f437FFD71;
	cvt.rzi.ftz.u32.f32	%r19, %f5;
	cvt.u16.u32	%rs1, %r19;
	mov.u16 	%rs2, 255;
	st.v4.u8 	[%rd1], {%rs1, %rs1, %rs1, %rs2};
	ret;
}

.visible .entry _Z26zp_find_contrast_locationsv(

)
{
	.reg .pred 	%p<7>;
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<67>;
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<17>;


	ldu.global.u32 	%r60, [contrast_window_width];
	ldu.global.v2.u32 	{%r33, %r34}, [launch_index];
	sub.s32 	%r36, %r33, %r60;
	mov.u32 	%r66, 0;
	max.s32 	%r2, %r36, %r66;
	mov.u32 	%r61, %r34;
	sub.s32 	%r38, %r34, %r60;
	max.s32 	%r4, %r38, %r66;
	add.s32 	%r39, %r60, %r33;
	ldu.global.u64 	%rd1, [window_size];
	cvt.u32.u64	%r40, %rd1;
	add.s32 	%r41, %r40, -1;
	min.u32 	%r62, %r39, %r41;
	setp.ne.s32	%p1, %r62, %r2;
	@%p1 bra 	BB6_4;

	mov.u32 	%r66, 0;
	mov.u32 	%r65, 255;

BB6_2:
	setp.ne.s32	%p5, %r66, 0;
	@%p5 bra 	BB6_10;

	mov.f32 	%f7, 0f00000000;
	bra.uni 	BB6_11;

BB6_4:
	shr.u64 	%rd4, %rd1, 32;
	cvt.u32.u64	%r59, %rd4;
	cvta.global.u64 	%rd2, output_color_only;
	neg.s32 	%r7, %r4;
	mov.u32 	%r65, 255;

BB6_5:
	mov.u32 	%r10, %r61;
	mov.u32 	%r9, %r60;
	mov.u32 	%r8, %r59;
	add.s32 	%r62, %r62, -1;
	add.s32 	%r44, %r8, -1;
	add.s32 	%r45, %r9, %r10;
	min.u32 	%r15, %r45, %r44;
	setp.eq.s32	%p2, %r15, %r4;
	@%p2 bra 	BB6_8;

	cvt.u64.u32	%rd3, %r62;
	add.s32 	%r64, %r15, -1;
	add.s32 	%r63, %r7, %r15;

BB6_7:
	cvt.u64.u32	%rd8, %r64;
	mov.u32 	%r46, 2;
	mov.u32 	%r47, 4;
	mov.u64 	%rd10, 0;
	// inline asm
	call (%rd5), _rt_buffer_get_64, (%rd2, %r46, %r47, %rd3, %rd8, %rd10, %rd10);
	// inline asm
	ld.u8 	%r48, [%rd5];
	max.u32 	%r66, %r66, %r48;
	min.u32 	%r65, %r65, %r48;
	add.s32 	%r64, %r64, -1;
	add.s32 	%r63, %r63, -1;
	setp.ne.s32	%p3, %r63, 0;
	@%p3 bra 	BB6_7;

BB6_8:
	setp.eq.s32	%p4, %r62, %r2;
	@%p4 bra 	BB6_2;

	ld.global.u32 	%r61, [launch_index+4];
	ld.global.u32 	%r60, [contrast_window_width];
	ld.global.u32 	%r59, [window_size+4];
	bra.uni 	BB6_5;

BB6_10:
	sub.s32 	%r51, %r66, %r65;
	cvt.rn.f32.u32	%f3, %r51;
	add.s32 	%r52, %r65, %r66;
	cvt.rn.f32.u32	%f4, %r52;
	div.approx.ftz.f32 	%f7, %f3, %f4;

BB6_11:
	ld.global.f32 	%f6, [adaptive_contrast_threshold];
	setp.ge.ftz.f32	%p6, %f7, %f6;
	selp.b16	%rs1, -1, 0, %p6;
	ld.global.v2.u32 	{%r55, %r56}, [launch_index];
	cvt.u64.u32	%rd13, %r55;
	cvt.u64.u32	%rd14, %r56;
	cvta.global.u64 	%rd12, adaptive_sample_locations;
	mov.u32 	%r53, 2;
	mov.u32 	%r54, 1;
	mov.u64 	%rd16, 0;
	// inline asm
	call (%rd11), _rt_buffer_get_64, (%rd12, %r53, %r54, %rd13, %rd14, %rd16, %rd16);
	// inline asm
	st.u8 	[%rd11], %rs1;
	ret;
}

.visible .entry _Z37zp_coalesce_adaptive_sample_locationsv(

)
{



	ret;
}

.visible .entry _Z20zp_adaptive_resamplev(

)
{
	.reg .pred 	%p<48>;
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<90>;
	.reg .f32 	%f<304>;
	.reg .s64 	%rd<36>;


	cvta.global.u64 	%rd6, adaptive_sample_locations;
	ld.global.v2.u32 	{%r30, %r31}, [launch_index];
	cvt.u64.u32	%rd7, %r30;
	cvt.u64.u32	%rd8, %r31;
	mov.u32 	%r28, 2;
	mov.u32 	%r29, 1;
	mov.u64 	%rd10, 0;
	// inline asm
	call (%rd5), _rt_buffer_get_64, (%rd6, %r28, %r29, %rd7, %rd8, %rd10, %rd10);
	// inline asm
	ld.u8 	%rs1, [%rd5];
	setp.eq.s16	%p3, %rs1, 0;
	@%p3 bra 	BB8_45;

	ld.global.u32 	%r85, [sqrt_samples_per_pixel];
	setp.eq.s32	%p4, %r85, 0;
	@%p4 bra 	BB8_45;

	cvta.global.u64 	%rd1, weighted_scatter_sums;
	cvta.global.u64 	%rd2, filter_weights;
	mov.u32 	%r77, 0;

BB8_3:
	mov.u32 	%r80, %r85;
	mov.u32 	%r84, %r80;
	setp.eq.s32	%p5, %r84, 0;
	@%p5 bra 	BB8_44;

	mov.u32 	%r78, 0;
	mov.u32 	%r83, %r84;

BB8_5:
	mov.u32 	%r5, %r83;
	ld.global.v2.u32 	{%r36, %r37}, [launch_index];
	mad.lo.s32 	%r39, %r36, %r5, %r77;
	mad.lo.s32 	%r41, %r37, %r5, %r78;
	cvt.rn.f32.u32	%f56, %r39;
	add.ftz.f32 	%f57, %f56, 0f3F000000;
	cvt.rn.f32.u32	%f58, %r5;
	div.approx.ftz.f32 	%f1, %f57, %f58;
	cvt.rn.f32.u32	%f59, %r41;
	add.ftz.f32 	%f60, %f59, 0f3F000000;
	div.approx.ftz.f32 	%f2, %f60, %f58;
	ld.global.u32 	%r6, [render_type];
	setp.eq.s32	%p6, %r6, 0;
	@%p6 bra 	BB8_9;

	setp.eq.s32	%p7, %r6, 1;
	@%p7 bra 	BB8_8;

	mov.f32 	%f292, 0f00000000;
	bra.uni 	BB8_10;

BB8_8:
	ld.global.f32 	%f62, [checkerboard_rotate];
	mul.ftz.f32 	%f63, %f62, 0f40490FDB;
	mov.f32 	%f64, 0f43340000;
	div.approx.ftz.f32 	%f65, %f63, %f64;
	cos.approx.ftz.f32 	%f66, %f65;
	sin.approx.ftz.f32 	%f67, %f65;
	mul.ftz.f32 	%f68, %f67, %f2;
	fma.rn.ftz.f32 	%f69, %f66, %f1, %f68;
	ld.global.u32 	%r42, [checkerboard_width];
	cvt.rn.f32.s32	%f70, %r42;
	div.approx.ftz.f32 	%f71, %f69, %f70;
	cvt.rmi.ftz.f32.f32	%f72, %f71;
	cvt.rzi.ftz.s32.f32	%r43, %f72;
	abs.s32 	%r44, %r43;
	mul.ftz.f32 	%f73, %f66, %f2;
	mul.ftz.f32 	%f74, %f67, %f1;
	sub.ftz.f32 	%f75, %f73, %f74;
	div.approx.ftz.f32 	%f76, %f75, %f70;
	cvt.rmi.ftz.f32.f32	%f77, %f76;
	cvt.rzi.ftz.s32.f32	%r45, %f77;
	abs.s32 	%r46, %r45;
	shr.u32 	%r47, %r44, 31;
	add.s32 	%r48, %r44, %r47;
	and.b32  	%r49, %r48, -2;
	sub.s32 	%r50, %r44, %r49;
	shr.u32 	%r51, %r46, 31;
	add.s32 	%r52, %r46, %r51;
	and.b32  	%r53, %r52, -2;
	sub.s32 	%r54, %r46, %r53;
	setp.eq.s32	%p8, %r50, %r54;
	selp.f32	%f292, 0f3F800000, 0f00000000, %p8;
	bra.uni 	BB8_10;

BB8_9:
	ld.global.v2.u32 	{%r55, %r56}, [window_size];
	cvt.rn.f32.u32	%f78, %r55;
	cvt.rn.f32.u32	%f79, %r56;
	div.approx.ftz.f32 	%f80, %f1, %f78;
	div.approx.ftz.f32 	%f81, %f2, %f79;
	mul.ftz.f32 	%f82, %f81, %f81;
	fma.rn.ftz.f32 	%f83, %f80, %f80, %f82;
	sqrt.approx.ftz.f32 	%f84, %f83;
	mul.ftz.f32 	%f85, %f84, 0f44FA0000;
	mul.ftz.f32 	%f86, %f85, %f84;
	cos.approx.ftz.f32 	%f87, %f86;
	add.ftz.f32 	%f88, %f87, 0f3F800000;
	mov.f32 	%f89, 0f40000000;
	div.approx.ftz.f32 	%f292, %f88, %f89;

BB8_10:
	ld.global.f32 	%f298, [filter_width];
	cvt.rmi.ftz.f32.f32	%f7, %f1;
	setp.neu.ftz.f32	%p9, %f7, %f1;
	@%p9 bra 	BB8_12;

	mov.pred 	%p47, -1;
	bra.uni 	BB8_13;

BB8_12:
	cvt.rmi.ftz.f32.f32	%f90, %f2;
	setp.eq.ftz.f32	%p47, %f90, %f2;

BB8_13:
	setp.gt.ftz.f32	%p11, %f298, 0f3F000000;
	or.pred  	%p12, %p11, %p47;
	@%p12 bra 	BB8_46;

	cvt.rzi.ftz.u32.f32	%r7, %f7;
	cvt.rmi.ftz.f32.f32	%f91, %f2;
	cvt.rzi.ftz.u32.f32	%r8, %f91;
	cvt.rn.f32.u32	%f92, %r7;
	add.ftz.f32 	%f93, %f92, 0f3F000000;
	sub.ftz.f32 	%f94, %f1, %f93;
	abs.ftz.f32 	%f8, %f94;
	cvt.rn.f32.u32	%f95, %r8;
	add.ftz.f32 	%f96, %f95, 0f3F000000;
	sub.ftz.f32 	%f97, %f2, %f96;
	abs.ftz.f32 	%f9, %f97;
	setp.gt.ftz.f32	%p13, %f8, %f298;
	setp.gt.ftz.f32	%p14, %f9, %f298;
	or.pred  	%p15, %p13, %p14;
	@!%p15 bra 	BB8_16;
	bra.uni 	BB8_15;

BB8_15:
	mov.f32 	%f297, 0f00000000;
	bra.uni 	BB8_42;

BB8_16:
	ld.global.u32 	%r59, [filter_type];
	setp.gt.s32	%p16, %r59, 2;
	@%p16 bra 	BB8_20;

	setp.eq.s32	%p19, %r59, 1;
	@%p19 bra 	BB8_30;

	setp.eq.s32	%p20, %r59, 2;
	@%p20 bra 	BB8_19;
	bra.uni 	BB8_22;

BB8_19:
	ld.global.f32 	%f139, [gaussian_alpha];
	neg.ftz.f32 	%f140, %f139;
	mul.ftz.f32 	%f141, %f298, %f140;
	mul.ftz.f32 	%f142, %f141, %f298;
	mul.ftz.f32 	%f143, %f142, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f144, %f143;
	mul.ftz.f32 	%f145, %f8, %f140;
	mul.ftz.f32 	%f146, %f145, %f8;
	mul.ftz.f32 	%f147, %f146, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f148, %f147;
	sub.ftz.f32 	%f149, %f148, %f144;
	mov.f32 	%f150, 0f00000000;
	max.ftz.f32 	%f151, %f150, %f149;
	mul.ftz.f32 	%f152, %f9, %f140;
	mul.ftz.f32 	%f153, %f152, %f9;
	mul.ftz.f32 	%f154, %f153, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f155, %f154;
	sub.ftz.f32 	%f156, %f155, %f144;
	max.ftz.f32 	%f157, %f150, %f156;
	mul.ftz.f32 	%f297, %f151, %f157;
	bra.uni 	BB8_42;

BB8_20:
	setp.eq.s32	%p17, %r59, 3;
	@%p17 bra 	BB8_23;

	setp.eq.s32	%p18, %r59, 4;
	@%p18 bra 	BB8_31;

BB8_22:
	mov.f32 	%f297, 0f3F800000;
	bra.uni 	BB8_42;

BB8_23:
	div.approx.ftz.f32 	%f10, %f8, %f298;
	setp.gt.ftz.f32	%p21, %f10, 0f3F800000;
	@%p21 bra 	BB8_25;

	mov.f32 	%f98, 0f41400000;
	sub.ftz.f32 	%f99, %f98, 0f40400000;
	add.ftz.f32 	%f100, %f99, 0fC0000000;
	mul.ftz.f32 	%f101, %f100, %f10;
	mul.ftz.f32 	%f102, %f101, %f10;
	mul.ftz.f32 	%f103, %f10, 0fC1400000;
	mul.ftz.f32 	%f104, %f103, %f10;
	fma.rn.ftz.f32 	%f105, %f102, %f10, %f104;
	mov.f32 	%f106, 0f40C00000;
	sub.ftz.f32 	%f107, %f106, 0f3F2AAAAB;
	add.ftz.f32 	%f293, %f105, %f107;
	bra.uni 	BB8_26;

BB8_25:
	mov.f32 	%f108, 0fBEAAAAAB;
	sub.ftz.f32 	%f109, %f108, 0f40000000;
	mul.ftz.f32 	%f110, %f109, %f10;
	mul.ftz.f32 	%f111, %f110, %f10;
	mul.ftz.f32 	%f112, %f10, 0f41400000;
	mul.ftz.f32 	%f113, %f112, %f10;
	fma.rn.ftz.f32 	%f114, %f111, %f10, %f113;
	mov.f32 	%f115, 0fC0800000;
	sub.ftz.f32 	%f116, %f115, 0f41800000;
	fma.rn.ftz.f32 	%f117, %f116, %f10, %f114;
	add.ftz.f32 	%f293, %f117, 0f412AAAAB;

BB8_26:
	mul.ftz.f32 	%f14, %f293, 0f3E2AAAAB;
	div.approx.ftz.f32 	%f15, %f9, %f298;
	setp.gt.ftz.f32	%p22, %f15, 0f3F800000;
	@%p22 bra 	BB8_28;

	mov.f32 	%f118, 0f41400000;
	sub.ftz.f32 	%f119, %f118, 0f40400000;
	add.ftz.f32 	%f120, %f119, 0fC0000000;
	mul.ftz.f32 	%f121, %f120, %f15;
	mul.ftz.f32 	%f122, %f121, %f15;
	mul.ftz.f32 	%f123, %f15, 0fC1400000;
	mul.ftz.f32 	%f124, %f123, %f15;
	fma.rn.ftz.f32 	%f125, %f122, %f15, %f124;
	mov.f32 	%f126, 0f40C00000;
	sub.ftz.f32 	%f127, %f126, 0f3F2AAAAB;
	add.ftz.f32 	%f294, %f125, %f127;
	bra.uni 	BB8_29;

BB8_28:
	mov.f32 	%f128, 0fBEAAAAAB;
	sub.ftz.f32 	%f129, %f128, 0f40000000;
	mul.ftz.f32 	%f130, %f129, %f15;
	mul.ftz.f32 	%f131, %f130, %f15;
	mul.ftz.f32 	%f132, %f15, 0f41400000;
	mul.ftz.f32 	%f133, %f132, %f15;
	fma.rn.ftz.f32 	%f134, %f131, %f15, %f133;
	mov.f32 	%f135, 0fC0800000;
	sub.ftz.f32 	%f136, %f135, 0f41800000;
	fma.rn.ftz.f32 	%f137, %f136, %f15, %f134;
	add.ftz.f32 	%f294, %f137, 0f412AAAAB;

BB8_29:
	mul.ftz.f32 	%f138, %f294, 0f3E2AAAAB;
	mul.ftz.f32 	%f297, %f14, %f138;
	bra.uni 	BB8_42;

BB8_30:
	sub.ftz.f32 	%f158, %f298, %f8;
	mov.f32 	%f159, 0f00000000;
	max.ftz.f32 	%f160, %f159, %f158;
	sub.ftz.f32 	%f161, %f298, %f9;
	max.ftz.f32 	%f162, %f159, %f161;
	mul.ftz.f32 	%f297, %f160, %f162;
	bra.uni 	BB8_42;

BB8_31:
	div.approx.ftz.f32 	%f22, %f8, %f298;
	setp.geu.ftz.f32	%p23, %f22, 0f3727C5AC;
	@%p23 bra 	BB8_33;

	mov.f32 	%f295, 0f3F800000;
	bra.uni 	BB8_36;

BB8_33:
	setp.leu.ftz.f32	%p24, %f22, 0f3F800000;
	@%p24 bra 	BB8_35;

	mov.f32 	%f295, 0f00000000;
	bra.uni 	BB8_36;

BB8_35:
	mul.ftz.f32 	%f163, %f22, 0f40490FDB;
	ld.global.f32 	%f164, [sinc_tau];
	mul.ftz.f32 	%f165, %f163, %f164;
	sin.approx.ftz.f32 	%f166, %f165;
	div.approx.ftz.f32 	%f167, %f166, %f165;
	sin.approx.ftz.f32 	%f168, %f163;
	div.approx.ftz.f32 	%f169, %f168, %f163;
	mul.ftz.f32 	%f295, %f167, %f169;

BB8_36:
	div.approx.ftz.f32 	%f25, %f9, %f298;
	setp.geu.ftz.f32	%p25, %f25, 0f3727C5AC;
	@%p25 bra 	BB8_38;

	mov.f32 	%f296, 0f3F800000;
	bra.uni 	BB8_41;

BB8_38:
	setp.leu.ftz.f32	%p26, %f25, 0f3F800000;
	@%p26 bra 	BB8_40;

	mov.f32 	%f296, 0f00000000;
	bra.uni 	BB8_41;

BB8_40:
	mul.ftz.f32 	%f172, %f25, 0f40490FDB;
	ld.global.f32 	%f173, [sinc_tau];
	mul.ftz.f32 	%f174, %f172, %f173;
	sin.approx.ftz.f32 	%f175, %f174;
	div.approx.ftz.f32 	%f176, %f175, %f174;
	sin.approx.ftz.f32 	%f177, %f172;
	div.approx.ftz.f32 	%f178, %f177, %f172;
	mul.ftz.f32 	%f296, %f176, %f178;

BB8_41:
	mul.ftz.f32 	%f297, %f295, %f296;

BB8_42:
	cvt.u64.u32	%rd20, %r8;
	cvt.u64.u32	%rd19, %r7;
	mov.u32 	%r63, 4;
	// inline asm
	call (%rd11), _rt_buffer_get_64, (%rd1, %r28, %r63, %rd19, %rd20, %rd10, %rd10);
	// inline asm
	ld.f32 	%f183, [%rd11];
	fma.rn.ftz.f32 	%f184, %f292, %f297, %f183;
	st.f32 	[%rd11], %f184;
	// inline asm
	call (%rd17), _rt_buffer_get_64, (%rd2, %r28, %r63, %rd19, %rd20, %rd10, %rd10);
	// inline asm
	ld.f32 	%f185, [%rd17];
	add.ftz.f32 	%f186, %f185, %f297;
	st.f32 	[%rd17], %f186;

BB8_43:
	add.s32 	%r78, %r78, 1;
	ld.global.u32 	%r83, [sqrt_samples_per_pixel];
	setp.lt.u32	%p45, %r78, %r83;
	mov.u32 	%r84, %r83;
	@%p45 bra 	BB8_5;

BB8_44:
	mov.u32 	%r85, %r84;
	add.s32 	%r77, %r77, 1;
	setp.lt.u32	%p46, %r77, %r85;
	@%p46 bra 	BB8_3;

BB8_45:
	ret;

BB8_46:
	add.ftz.f32 	%f187, %f1, 0fBF000000;
	sub.ftz.f32 	%f188, %f187, %f298;
	cvt.rpi.ftz.f32.f32	%f189, %f188;
	cvt.rzi.ftz.s32.f32	%r64, %f189;
	add.ftz.f32 	%f190, %f187, %f298;
	cvt.rmi.ftz.f32.f32	%f191, %f190;
	cvt.rzi.ftz.s32.f32	%r65, %f191;
	add.ftz.f32 	%f192, %f2, 0fBF000000;
	sub.ftz.f32 	%f193, %f192, %f298;
	cvt.rpi.ftz.f32.f32	%f194, %f193;
	cvt.rzi.ftz.s32.f32	%r66, %f194;
	mov.u32 	%r67, 0;
	max.s32 	%r9, %r64, %r67;
	ld.global.u64 	%rd3, [window_size];
	cvt.u32.u64	%r68, %rd3;
	add.s32 	%r69, %r68, -1;
	min.u32 	%r87, %r65, %r69;
	max.s32 	%r11, %r66, %r67;
	setp.eq.s32	%p27, %r87, %r9;
	@%p27 bra 	BB8_43;

	shr.u64 	%rd23, %rd3, 32;
	cvt.u32.u64	%r86, %rd23;

BB8_48:
	mov.u32 	%r13, %r86;
	add.s32 	%r87, %r87, -1;
	add.ftz.f32 	%f196, %f192, %f298;
	cvt.rmi.ftz.f32.f32	%f197, %f196;
	cvt.rzi.ftz.s32.f32	%r70, %f197;
	add.s32 	%r71, %r13, -1;
	min.u32 	%r16, %r70, %r71;
	setp.eq.s32	%p28, %r16, %r11;
	@%p28 bra 	BB8_80;

	cvt.rn.f32.u32	%f198, %r87;
	add.ftz.f32 	%f199, %f198, 0f3F000000;
	sub.ftz.f32 	%f200, %f1, %f199;
	abs.ftz.f32 	%f31, %f200;
	cvt.u64.u32	%rd4, %r87;
	add.s32 	%r89, %r16, -1;
	mad.lo.s32 	%r88, %r11, -1, %r16;

BB8_50:
	cvt.rn.f32.u32	%f201, %r89;
	add.ftz.f32 	%f202, %f201, 0f3F000000;
	sub.ftz.f32 	%f203, %f2, %f202;
	abs.ftz.f32 	%f33, %f203;
	setp.gt.ftz.f32	%p29, %f33, %f298;
	setp.gt.ftz.f32	%p30, %f31, %f298;
	or.pred  	%p31, %p30, %p29;
	@!%p31 bra 	BB8_52;
	bra.uni 	BB8_51;

BB8_51:
	mov.f32 	%f303, 0f00000000;
	bra.uni 	BB8_78;

BB8_52:
	ld.global.u32 	%r72, [filter_type];
	setp.gt.s32	%p32, %r72, 2;
	@%p32 bra 	BB8_56;

	setp.eq.s32	%p35, %r72, 1;
	@%p35 bra 	BB8_66;

	setp.eq.s32	%p36, %r72, 2;
	@%p36 bra 	BB8_55;
	bra.uni 	BB8_58;

BB8_55:
	ld.global.f32 	%f245, [gaussian_alpha];
	neg.ftz.f32 	%f246, %f245;
	mul.ftz.f32 	%f247, %f298, %f246;
	mul.ftz.f32 	%f248, %f247, %f298;
	mul.ftz.f32 	%f249, %f248, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f250, %f249;
	mul.ftz.f32 	%f251, %f31, %f246;
	mul.ftz.f32 	%f252, %f251, %f31;
	mul.ftz.f32 	%f253, %f252, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f254, %f253;
	sub.ftz.f32 	%f255, %f254, %f250;
	mov.f32 	%f256, 0f00000000;
	max.ftz.f32 	%f257, %f256, %f255;
	mul.ftz.f32 	%f258, %f33, %f246;
	mul.ftz.f32 	%f259, %f258, %f33;
	mul.ftz.f32 	%f260, %f259, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f261, %f260;
	sub.ftz.f32 	%f262, %f261, %f250;
	max.ftz.f32 	%f263, %f256, %f262;
	mul.ftz.f32 	%f303, %f257, %f263;
	bra.uni 	BB8_78;

BB8_56:
	setp.eq.s32	%p33, %r72, 3;
	@%p33 bra 	BB8_59;

	setp.eq.s32	%p34, %r72, 4;
	@%p34 bra 	BB8_67;

BB8_58:
	mov.f32 	%f303, 0f3F800000;
	bra.uni 	BB8_78;

BB8_59:
	div.approx.ftz.f32 	%f34, %f31, %f298;
	setp.gt.ftz.f32	%p37, %f34, 0f3F800000;
	@%p37 bra 	BB8_61;

	mov.f32 	%f204, 0f41400000;
	sub.ftz.f32 	%f205, %f204, 0f40400000;
	add.ftz.f32 	%f206, %f205, 0fC0000000;
	mul.ftz.f32 	%f207, %f206, %f34;
	mul.ftz.f32 	%f208, %f207, %f34;
	mul.ftz.f32 	%f209, %f34, 0fC1400000;
	mul.ftz.f32 	%f210, %f209, %f34;
	fma.rn.ftz.f32 	%f211, %f208, %f34, %f210;
	mov.f32 	%f212, 0f40C00000;
	sub.ftz.f32 	%f213, %f212, 0f3F2AAAAB;
	add.ftz.f32 	%f299, %f211, %f213;
	bra.uni 	BB8_62;

BB8_61:
	mov.f32 	%f214, 0fBEAAAAAB;
	sub.ftz.f32 	%f215, %f214, 0f40000000;
	mul.ftz.f32 	%f216, %f215, %f34;
	mul.ftz.f32 	%f217, %f216, %f34;
	mul.ftz.f32 	%f218, %f34, 0f41400000;
	mul.ftz.f32 	%f219, %f218, %f34;
	fma.rn.ftz.f32 	%f220, %f217, %f34, %f219;
	mov.f32 	%f221, 0fC0800000;
	sub.ftz.f32 	%f222, %f221, 0f41800000;
	fma.rn.ftz.f32 	%f223, %f222, %f34, %f220;
	add.ftz.f32 	%f299, %f223, 0f412AAAAB;

BB8_62:
	mul.ftz.f32 	%f38, %f299, 0f3E2AAAAB;
	div.approx.ftz.f32 	%f39, %f33, %f298;
	setp.gt.ftz.f32	%p38, %f39, 0f3F800000;
	@%p38 bra 	BB8_64;

	mov.f32 	%f224, 0f41400000;
	sub.ftz.f32 	%f225, %f224, 0f40400000;
	add.ftz.f32 	%f226, %f225, 0fC0000000;
	mul.ftz.f32 	%f227, %f226, %f39;
	mul.ftz.f32 	%f228, %f227, %f39;
	mul.ftz.f32 	%f229, %f39, 0fC1400000;
	mul.ftz.f32 	%f230, %f229, %f39;
	fma.rn.ftz.f32 	%f231, %f228, %f39, %f230;
	mov.f32 	%f232, 0f40C00000;
	sub.ftz.f32 	%f233, %f232, 0f3F2AAAAB;
	add.ftz.f32 	%f300, %f231, %f233;
	bra.uni 	BB8_65;

BB8_64:
	mov.f32 	%f234, 0fBEAAAAAB;
	sub.ftz.f32 	%f235, %f234, 0f40000000;
	mul.ftz.f32 	%f236, %f235, %f39;
	mul.ftz.f32 	%f237, %f236, %f39;
	mul.ftz.f32 	%f238, %f39, 0f41400000;
	mul.ftz.f32 	%f239, %f238, %f39;
	fma.rn.ftz.f32 	%f240, %f237, %f39, %f239;
	mov.f32 	%f241, 0fC0800000;
	sub.ftz.f32 	%f242, %f241, 0f41800000;
	fma.rn.ftz.f32 	%f243, %f242, %f39, %f240;
	add.ftz.f32 	%f300, %f243, 0f412AAAAB;

BB8_65:
	mul.ftz.f32 	%f244, %f300, 0f3E2AAAAB;
	mul.ftz.f32 	%f303, %f38, %f244;
	bra.uni 	BB8_78;

BB8_66:
	sub.ftz.f32 	%f264, %f298, %f31;
	mov.f32 	%f265, 0f00000000;
	max.ftz.f32 	%f266, %f265, %f264;
	sub.ftz.f32 	%f267, %f298, %f33;
	max.ftz.f32 	%f268, %f265, %f267;
	mul.ftz.f32 	%f303, %f266, %f268;
	bra.uni 	BB8_78;

BB8_67:
	div.approx.ftz.f32 	%f46, %f31, %f298;
	setp.geu.ftz.f32	%p39, %f46, 0f3727C5AC;
	@%p39 bra 	BB8_69;

	mov.f32 	%f301, 0f3F800000;
	bra.uni 	BB8_72;

BB8_69:
	setp.leu.ftz.f32	%p40, %f46, 0f3F800000;
	@%p40 bra 	BB8_71;

	mov.f32 	%f301, 0f00000000;
	bra.uni 	BB8_72;

BB8_71:
	mul.ftz.f32 	%f269, %f46, 0f40490FDB;
	ld.global.f32 	%f270, [sinc_tau];
	mul.ftz.f32 	%f271, %f269, %f270;
	sin.approx.ftz.f32 	%f272, %f271;
	div.approx.ftz.f32 	%f273, %f272, %f271;
	sin.approx.ftz.f32 	%f274, %f269;
	div.approx.ftz.f32 	%f275, %f274, %f269;
	mul.ftz.f32 	%f301, %f273, %f275;

BB8_72:
	div.approx.ftz.f32 	%f49, %f33, %f298;
	setp.geu.ftz.f32	%p41, %f49, 0f3727C5AC;
	@%p41 bra 	BB8_74;

	mov.f32 	%f302, 0f3F800000;
	bra.uni 	BB8_77;

BB8_74:
	setp.leu.ftz.f32	%p42, %f49, 0f3F800000;
	@%p42 bra 	BB8_76;

	mov.f32 	%f302, 0f00000000;
	bra.uni 	BB8_77;

BB8_76:
	mul.ftz.f32 	%f278, %f49, 0f40490FDB;
	ld.global.f32 	%f279, [sinc_tau];
	mul.ftz.f32 	%f280, %f278, %f279;
	sin.approx.ftz.f32 	%f281, %f280;
	div.approx.ftz.f32 	%f282, %f281, %f280;
	sin.approx.ftz.f32 	%f283, %f278;
	div.approx.ftz.f32 	%f284, %f283, %f278;
	mul.ftz.f32 	%f302, %f282, %f284;

BB8_77:
	mul.ftz.f32 	%f303, %f301, %f302;

BB8_78:
	cvt.u64.u32	%rd33, %r89;
	mov.u32 	%r76, 4;
	// inline asm
	call (%rd24), _rt_buffer_get_64, (%rd1, %r28, %r76, %rd4, %rd33, %rd10, %rd10);
	// inline asm
	mul.ftz.f32 	%f289, %f292, %f303;
	atom.add.f32 	%f290, [%rd24], %f289;
	// inline asm
	call (%rd30), _rt_buffer_get_64, (%rd2, %r28, %r76, %rd4, %rd33, %rd10, %rd10);
	// inline asm
	atom.add.f32 	%f291, [%rd30], %f303;
	setp.eq.s32	%p43, %r88, 1;
	@%p43 bra 	BB8_80;

	ld.global.f32 	%f298, [filter_width];
	add.s32 	%r89, %r89, -1;
	add.s32 	%r88, %r88, -1;
	bra.uni 	BB8_50;

BB8_80:
	setp.eq.s32	%p44, %r87, %r9;
	@%p44 bra 	BB8_43;

	ld.global.f32 	%f298, [filter_width];
	ld.global.u32 	%r86, [window_size+4];
	bra.uni 	BB8_48;
}

.visible .entry _Z9exceptiolw(

)
{
	.reg .pred 	%p<4>;
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<25>;
	.reg .s64 	%rd<11>;


	// inline asm
	call (%r5), _rt_get_exception_code, ();
	// inline asm
	cvta.global.u64 	%rd1, $str;
	ld.global.v2.u32 	{%r7, %r8}, [launch_index];
	// inline asm
	call (%r6), _rt_print_active, ();
	// inline asm
	setp.eq.s32	%p1, %r6, 0;
	mov.u64 	%rd10, $str;
	@%p1 bra 	BB9_5;

	mov.u64 	%rd9, %rd1;

BB9_2:
	mov.u64 	%rd3, %rd10;
	mov.u64 	%rd2, %rd9;
	add.s64 	%rd4, %rd2, 1;
	add.s64 	%rd10, %rd3, 1;
	ld.global.u8 	%rs1, [%rd3+1];
	setp.ne.s16	%p2, %rs1, 0;
	mov.u64 	%rd9, %rd4;
	@%p2 bra 	BB9_2;

	sub.s64 	%rd8, %rd4, %rd1;
	cvt.u32.u64	%r11, %rd8;
	add.s32 	%r12, %r11, 32;
	and.b32  	%r10, %r12, -4;
	// inline asm
	call (%r9), _rt_print_start_64, (%rd1, %r10);
	// inline asm
	setp.eq.s32	%p3, %r9, 0;
	@%p3 bra 	BB9_5;

	mov.u32 	%r21, 0;
	// inline asm
	call (), _rt_print_write32, (%r21, %r9);
	// inline asm
	add.s32 	%r16, %r9, 4;
	// inline asm
	call (), _rt_print_write32, (%r5, %r16);
	// inline asm
	add.s32 	%r18, %r9, 8;
	// inline asm
	call (), _rt_print_write32, (%r21, %r18);
	// inline asm
	add.s32 	%r20, %r9, 12;
	// inline asm
	call (), _rt_print_write32, (%r7, %r20);
	// inline asm
	add.s32 	%r22, %r9, 16;
	// inline asm
	call (), _rt_print_write32, (%r21, %r22);
	// inline asm
	add.s32 	%r24, %r9, 20;
	// inline asm
	call (), _rt_print_write32, (%r8, %r24);
	// inline asm

BB9_5:
	ret;
}


