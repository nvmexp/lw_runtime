
/*
 * Copyright (c) 2017, LWPU CORPORATION.  All rights reserved.
 *
 * LWPU Corporation and its licensors retain all intellectual property and proprietary
 * rights in and to this software, related documentation and any modifications thereto.
 * Any use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from LWPU Corporation is strictly
 * prohibited.
 *
 * TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
 * AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
 * INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
 * SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
 * LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
 * BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
 * INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES
 */

#include <o6/optix.h>
#include <optixu/optixu_aabb_namespace.h>
#include <optixu/optixu_math_namespace.h>
#include <optixu/optixu_matrix_namespace.h>

using namespace optix;

// This is to be plugged into an RTgeometry object to represent
// a triangle mesh with a vertex buffer of triangle soup (triangle list)
// with an interleaved position, normal, texturecoordinate layout.

rtBuffer<float3> vertex_buffer;
rtBuffer<float3> normal_buffer;
rtBuffer<float2> texcoord_buffer;
rtBuffer<int3>   vindex_buffer;  // position indices
rtBuffer<int3>   nindex_buffer;  // normal indices
rtBuffer<int3>   tindex_buffer;  // texcoord indices

rtBuffer<uint> material_buffer;  // per-face material index
rtDeclareVariable( float3, texcoord, attribute texcoord, );
rtDeclareVariable( float3, geometric_normal, attribute geometric_normal, );
rtDeclareVariable( float3, shading_normal, attribute shading_normal, );
rtDeclareVariable( optix::Ray, ray, rtLwrrentRay, );

RT_PROGRAM void mesh_intersect( int primIdx )
{
    int3 v_idx = vindex_buffer[primIdx];

    float3 p0 = vertex_buffer[v_idx.x];
    float3 p1 = vertex_buffer[v_idx.y];
    float3 p2 = vertex_buffer[v_idx.z];

    // Intersect ray with triangle
    float3 e0 = p1 - p0;
    float3 e1 = p0 - p2;
    float3 n  = cross( e0, e1 );

    float v = dot( n, ray.direction );
    float r = 1.0f / v;

    float3 e2 = p0 - ray.origin;
    float  va = dot( n, e2 );
    float  t  = r * va;

    if( t < ray.tmax && t > ray.tmin )
    {
        float3 i    = cross( e2, ray.direction );
        float  v1   = dot( i, e1 );
        float  beta = r * v1;
        if( beta >= 0.0f )
        {
            float v2    = dot( i, e0 );
            float gamma = r * v2;
            if( ( v1 + v2 ) * v <= v * v && gamma >= 0.0f )
            {

                if( rtPotentialIntersection( t ) )
                {

                    int3 n_idx = nindex_buffer[primIdx];

                    if( normal_buffer.size() == 0 || n_idx.x < 0 || n_idx.y < 0 || n_idx.z < 0 )
                    {
                        shading_normal = -n;
                    }
                    else
                    {
                        float3 n0      = normal_buffer[n_idx.x];
                        float3 n1      = normal_buffer[n_idx.y];
                        float3 n2      = normal_buffer[n_idx.z];
                        shading_normal = normalize( n1 * beta + n2 * gamma + n0 * ( 1.0f - beta - gamma ) );
                    }
                    geometric_normal = -n;

                    int3 t_idx = tindex_buffer[primIdx];
                    if( texcoord_buffer.size() == 0 || t_idx.x < 0 || t_idx.y < 0 || t_idx.z < 0 )
                    {
                        texcoord = make_float3( 0.0f, 0.0f, 0.0f );
                    }
                    else
                    {
                        float2 t0 = texcoord_buffer[t_idx.x];
                        float2 t1 = texcoord_buffer[t_idx.y];
                        float2 t2 = texcoord_buffer[t_idx.z];
                        texcoord  = make_float3( t1 * beta + t2 * gamma + t0 * ( 1.0f - beta - gamma ) );
                    }

                    rtReportIntersection( material_buffer[primIdx] );
                }
            }
        }
    }
}

RT_PROGRAM void mesh_intersect_list( int primIdx )
{
    const int vertIdx = 3 * primIdx;

    float3 p0 = vertex_buffer[vertIdx];
    float3 p1 = vertex_buffer[vertIdx + 1];
    float3 p2 = vertex_buffer[vertIdx + 2];

    // Intersect ray with triangle
    float3 e0 = p1 - p0;
    float3 e1 = p0 - p2;
    float3 n  = cross( e0, e1 );

    float v = dot( n, ray.direction );
    float r = 1.0f / v;

    float3 e2 = p0 - ray.origin;
    float  va = dot( n, e2 );
    float  t  = r * va;

    if( t < ray.tmax && t > ray.tmin )
    {
        float3 i    = cross( e2, ray.direction );
        float  v1   = dot( i, e1 );
        float  beta = r * v1;
        if( beta >= 0.0f )
        {
            float v2    = dot( i, e0 );
            float gamma = r * v2;
            if( ( v1 + v2 ) * v <= v * v && gamma >= 0.0f )
            {
                if( rtPotentialIntersection( t ) )
                {
                    if( normal_buffer.size() == 0 )
                    {
                        shading_normal = -n;
                    }
                    else
                    {
                        float3 n0      = normal_buffer[vertIdx];
                        float3 n1      = normal_buffer[vertIdx + 1];
                        float3 n2      = normal_buffer[vertIdx + 2];
                        shading_normal = normalize( n1 * beta + n2 * gamma + n0 * ( 1.0f - beta - gamma ) );
                    }
                    geometric_normal = -n;

                    if( texcoord_buffer.size() == 0 )
                    {
                        texcoord = make_float3( 0.0f, 0.0f, 0.0f );
                    }
                    else
                    {
                        float2 t0 = texcoord_buffer[vertIdx];
                        float2 t1 = texcoord_buffer[vertIdx + 1];
                        float2 t2 = texcoord_buffer[vertIdx + 2];
                        texcoord  = make_float3( t1 * beta + t2 * gamma + t0 * ( 1.0f - beta - gamma ) );
                    }

                    rtReportIntersection( material_buffer[primIdx] );
                }
            }
        }
    }
}

RT_PROGRAM void mesh_bounds( int primIdx, float result[6] )
{
    int3 v_idx = vindex_buffer[primIdx];

    float3 v0 = vertex_buffer[v_idx.x];
    float3 v1 = vertex_buffer[v_idx.y];
    float3 v2 = vertex_buffer[v_idx.z];

    optix::Aabb* aabb = (optix::Aabb*)result;
    aabb->m_min       = fminf( fminf( v0, v1 ), v2 );
    aabb->m_max       = fmaxf( fmaxf( v0, v1 ), v2 );
}

RT_PROGRAM void mesh_bounds_list( int primIdx, float result[6] )
{
    const int vertIdx = 3 * primIdx;

    float3 v0 = vertex_buffer[vertIdx];
    float3 v1 = vertex_buffer[vertIdx + 1];
    float3 v2 = vertex_buffer[vertIdx + 2];

    optix::Aabb* aabb = (optix::Aabb*)result;
    aabb->m_min       = fminf( fminf( v0, v1 ), v2 );
    aabb->m_max       = fmaxf( fmaxf( v0, v1 ), v2 );
}
