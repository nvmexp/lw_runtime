
/*
 * Copyright (c) 2017, LWPU CORPORATION.  All rights reserved.
 *
 * LWPU Corporation and its licensors retain all intellectual property and proprietary
 * rights in and to this software, related documentation and any modifications thereto.
 * Any use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from LWPU Corporation is strictly
 * prohibited.
 *
 * TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
 * AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
 * INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
 * SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
 * LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
 * BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
 * INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES
 */

#include <o6/optix.h>
#include <optix_math.h>
#include <optixu/optixu_aabb.h>
#include <optixu/optixu_matrix.h>

rtDeclareVariable( float4, sphere, , );

rtDeclareVariable( float3, geometric_normal, attribute geometric_normal, );
rtDeclareVariable( float3, shading_normal, attribute shading_normal, );
rtDeclareVariable( optix::Ray, ray, rtLwrrentRay, );

template <bool  use_robust_method>
__device__ void intersect_sphere( void )
{
    float3 center = optix::make_float3( sphere );
    float3 O      = ray.origin - center;
    float3 D      = ray.direction;
    float  radius = sphere.w;

    float b    = dot( O, D );
    float c    = dot( O, O ) - radius * radius;
    float disc = b * b - c;
    if( disc > 0.0f )
    {
        float sdisc = sqrtf( disc );
        float root1 = ( -b - sdisc );

        bool do_refine = false;

        float root11 = 0.0f;

        if( use_robust_method && fabsf( root1 ) > 10.f * radius )
        {
            do_refine = true;
        }

        if( do_refine )
        {
            // refine root1
            float3 O1 = O + root1 * ray.direction;
            b         = dot( O1, D );
            c         = dot( O1, O1 ) - radius * radius;
            disc      = b * b - c;

            if( disc > 0.0f )
            {
                sdisc  = sqrtf( disc );
                root11 = ( -b - sdisc );
            }
        }

        bool check_second = true;
        if( rtPotentialIntersection( root1 + root11 ) )
        {
            shading_normal = geometric_normal = ( O + ( root1 + root11 ) * D ) / radius;
            if( rtReportIntersection( 0 ) )
                check_second = false;
        }
        if( check_second )
        {
            float root2 = ( -b + sdisc ) + ( do_refine ? root1 : 0 );
            if( rtPotentialIntersection( root2 ) )
            {
                shading_normal = geometric_normal = ( O + root2 * D ) / radius;
                rtReportIntersection( 0 );
            }
        }
    }
}


RT_PROGRAM void intersect( int primIdx )
{
    intersect_sphere<false>();
}


RT_PROGRAM void robust_intersect( int primIdx )
{
    intersect_sphere<true>();
}


RT_PROGRAM void bounds( int, float result[6] )
{
    float3 cen = optix::make_float3( sphere );
    float3 rad = optix::make_float3( sphere.w );

    optix::Aabb* aabb = (optix::Aabb*)result;
    aabb->m_min       = cen - rad;
    aabb->m_max       = cen + rad;
}
