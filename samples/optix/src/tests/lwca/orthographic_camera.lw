
/*
 * Copyright (c) 2017, LWPU CORPORATION.  All rights reserved.
 *
 * LWPU Corporation and its licensors retain all intellectual property and proprietary
 * rights in and to this software, related documentation and any modifications thereto.
 * Any use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from LWPU Corporation is strictly
 * prohibited.
 *
 * TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
 * AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
 * INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
 * SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
 * LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
 * BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
 * INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES
 */

#include <o6/optix.h>
#include <optixu/optixu_math_namespace.h>

#include "helpers.h"

using namespace optix;

struct PerRayData_radiance
{
    float3 result;
    float  importance;
    int    depth;
};

rtDeclareVariable( float3, eye, , );  // center of film plane
rtDeclareVariable( float3, U, , );    // horizontal orientation; len(U) specifies half width of film plane
rtDeclareVariable( float3, V, , );    // vertical orientation;   len(V) specifies half height of film plane
rtDeclareVariable( float3, W, , );    // view direction
rtDeclareVariable( float3, bad_color, , );
rtDeclareVariable( float, scene_epsilon, , );
rtBuffer<uchar4, 2> output_buffer;
rtDeclareVariable( rtObject, top_object, , );
rtDeclareVariable( unsigned int, radiance_ray_type, , );

rtDeclareVariable( uint2, launch_index, rtLaunchIndex, );


RT_PROGRAM void orthographic_camera()
{
    size_t2 screen = output_buffer.size();

    float2 d             = make_float2( launch_index ) / make_float2( screen ) * 2.f - 1.f;  // film coords
    float3 ray_origin    = eye + d.x * U + d.y * V;  // eye + offset in film space
    float3 ray_direction = W;                        // always parallel view direction

    optix::Ray ray = optix::make_Ray( ray_origin, ray_direction, radiance_ray_type, scene_epsilon, RT_DEFAULT_MAX );

    PerRayData_radiance prd;
    prd.importance = 1.f;
    prd.depth      = 0;

    rtTrace( top_object, ray, prd );

    output_buffer[launch_index] = make_color( prd.result );
}

RT_PROGRAM void exception()
{
    const unsigned int code = rtGetExceptionCode();
    rtPrintf( "Caught exception 0x%X at launch index (%d,%d)\n", code, launch_index.x, launch_index.y );
    output_buffer[launch_index] = make_color( bad_color );
}
