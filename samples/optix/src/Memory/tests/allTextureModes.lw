// Copyright (c) 2017, LWPU CORPORATION.
// TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
// *AS IS* AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
// OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS
// BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
// WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
// BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS)
// ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS
// BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES

#include <Memory/tests/test_AllTextureModes.h>

#include <o6/optix.h>
#include <optixu/optixu_math_namespace.h>

using namespace optix;


rtDeclareVariable( uint2, launch_index, rtLaunchIndex, );
rtDeclareVariable( float4, coords, , );

rtTextureSampler<float4, 1> tex_1d_mode0;
rtTextureSampler<float4, 1> tex_1d_mode1;
rtTextureSampler<float4, 1> tex_1d_mode2;
rtTextureSampler<float4, 1> tex_1d_mode3;
rtTextureSampler<float4, 1> tex_1d_mode4;
rtTextureSampler<float4, 1> tex_1d_mode5;
rtTextureSampler<float4, 1> tex_1d_mode6;
rtTextureSampler<float4, 1> tex_1d_mode7;
rtTextureSampler<float4, 1> tex_1d_mode8;
rtTextureSampler<float4, 1> tex_1d_mode9;
rtTextureSampler<float4, 1> tex_1d_mode10;
rtTextureSampler<float4, 1> tex_1d_mode11;

rtTextureSampler<float4, 2> tex_2d_mode0;
rtTextureSampler<float4, 2> tex_2d_mode1;
rtTextureSampler<float4, 2> tex_2d_mode2;
rtTextureSampler<float4, 2> tex_2d_mode3;
rtTextureSampler<float4, 2> tex_2d_mode4;
rtTextureSampler<float4, 2> tex_2d_mode5;
rtTextureSampler<float4, 2> tex_2d_mode6;
rtTextureSampler<float4, 2> tex_2d_mode7;
rtTextureSampler<float4, 2> tex_2d_mode8;
rtTextureSampler<float4, 2> tex_2d_mode9;
rtTextureSampler<float4, 2> tex_2d_mode10;
rtTextureSampler<float4, 2> tex_2d_mode11;

rtTextureSampler<float4, 3> tex_3d_mode0;
rtTextureSampler<float4, 3> tex_3d_mode1;
rtTextureSampler<float4, 3> tex_3d_mode2;
rtTextureSampler<float4, 3> tex_3d_mode3;
rtTextureSampler<float4, 3> tex_3d_mode4;
rtTextureSampler<float4, 3> tex_3d_mode5;
rtTextureSampler<float4, 3> tex_3d_mode6;
rtTextureSampler<float4, 3> tex_3d_mode7;
rtTextureSampler<float4, 3> tex_3d_mode8;
rtTextureSampler<float4, 3> tex_3d_mode9;
rtTextureSampler<float4, 3> tex_3d_mode10;
rtTextureSampler<float4, 3> tex_3d_mode11;


__device__ inline unsigned int toIndex( uint2 launch_index )
{
    if( launch_index.x >= NUMBER_OF_TEX_MODES * NUMBER_OF_LOOKUP_KINDS )
        return ~0u;
    return launch_index.x;
}

rtBuffer<float4, 2> out_float4;

RT_PROGRAM void bound_texture()
{
    unsigned int slot = toIndex( launch_index );
    switch( slot )
    {
        case 0:
            out_float4[launch_index] = tex1D( tex_1d_mode0, coords.x );
            break;
        case 1:
            out_float4[launch_index] = tex1D( tex_1d_mode1, coords.x );
            break;
        case 2:
            out_float4[launch_index] = tex1D( tex_1d_mode2, coords.x );
            break;
        case 3:
            out_float4[launch_index] = tex1D( tex_1d_mode3, coords.x );
            break;
        case 4:
            out_float4[launch_index] = tex1D( tex_1d_mode4, coords.x );
            break;
        case 5:
            out_float4[launch_index] = tex1D( tex_1d_mode5, coords.x );
            break;
        case 6:
            out_float4[launch_index] = tex1D( tex_1d_mode6, coords.x );
            break;
        case 7:
            out_float4[launch_index] = tex1D( tex_1d_mode7, coords.x );
            break;
        case 8:
            out_float4[launch_index] = tex1D( tex_1d_mode8, coords.x );
            break;
        case 9:
            out_float4[launch_index] = tex1D( tex_1d_mode9, coords.x );
            break;
        case 10:
            out_float4[launch_index] = tex1D( tex_1d_mode10, coords.x );
            break;
        case 11:
            out_float4[launch_index] = tex1D( tex_1d_mode11, coords.x );
            break;

        case 12:
            out_float4[launch_index] = tex2D( tex_2d_mode0, coords.x, coords.y );
            break;
        case 13:
            out_float4[launch_index] = tex2D( tex_2d_mode1, coords.x, coords.y );
            break;
        case 14:
            out_float4[launch_index] = tex2D( tex_2d_mode2, coords.x, coords.y );
            break;
        case 15:
            out_float4[launch_index] = tex2D( tex_2d_mode3, coords.x, coords.y );
            break;
        case 16:
            out_float4[launch_index] = tex2D( tex_2d_mode4, coords.x, coords.y );
            break;
        case 17:
            out_float4[launch_index] = tex2D( tex_2d_mode5, coords.x, coords.y );
            break;
        case 18:
            out_float4[launch_index] = tex2D( tex_2d_mode6, coords.x, coords.y );
            break;
        case 19:
            out_float4[launch_index] = tex2D( tex_2d_mode7, coords.x, coords.y );
            break;
        case 20:
            out_float4[launch_index] = tex2D( tex_2d_mode8, coords.x, coords.y );
            break;
        case 21:
            out_float4[launch_index] = tex2D( tex_2d_mode9, coords.x, coords.y );
            break;
        case 22:
            out_float4[launch_index] = tex2D( tex_2d_mode10, coords.x, coords.y );
            break;
        case 23:
            out_float4[launch_index] = tex2D( tex_2d_mode11, coords.x, coords.y );
            break;

        case 24:
            out_float4[launch_index] = tex3D( tex_3d_mode0, coords.x, coords.y, coords.z );
            break;
        case 25:
            out_float4[launch_index] = tex3D( tex_3d_mode1, coords.x, coords.y, coords.z );
            break;
        case 26:
            out_float4[launch_index] = tex3D( tex_3d_mode2, coords.x, coords.y, coords.z );
            break;
        case 27:
            out_float4[launch_index] = tex3D( tex_3d_mode3, coords.x, coords.y, coords.z );
            break;
        case 28:
            out_float4[launch_index] = tex3D( tex_3d_mode4, coords.x, coords.y, coords.z );
            break;
        case 29:
            out_float4[launch_index] = tex3D( tex_3d_mode5, coords.x, coords.y, coords.z );
            break;
        case 30:
            out_float4[launch_index] = tex3D( tex_3d_mode6, coords.x, coords.y, coords.z );
            break;
        case 31:
            out_float4[launch_index] = tex3D( tex_3d_mode7, coords.x, coords.y, coords.z );
            break;
        case 32:
            out_float4[launch_index] = tex3D( tex_3d_mode8, coords.x, coords.y, coords.z );
            break;
        case 33:
            out_float4[launch_index] = tex3D( tex_3d_mode9, coords.x, coords.y, coords.z );
            break;
        case 34:
            out_float4[launch_index] = tex3D( tex_3d_mode10, coords.x, coords.y, coords.z );
            break;
        case 35:
            out_float4[launch_index] = tex3D( tex_3d_mode11, coords.x, coords.y, coords.z );
            break;
        default:
            out_float4[launch_index] = make_float4( 0, 0, 0, 0 );
    }
}

rtBuffer<rtTextureId, 1> tex_ids;

RT_PROGRAM void bindless_texture()
{
    int    layer = 1;
    float  level = coords.w;
    float  dp1   = 0.6f;
    float2 dp2   = make_float2( 0.3f, 0.6f );
    float4 dp4   = make_float4( 0.3f, 0.4f, 0.6f, 0.0f );

    unsigned int slot = toIndex( launch_index );
    if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_size )
    {
        uint3 sz                 = rtTexSize( tex_ids[slot] );
        out_float4[launch_index] = make_float4( __int_as_float( sz.x ), __int_as_float( sz.y ), __int_as_float( sz.z ), 0 );
    }
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tex_1d )
        out_float4[launch_index] = rtTex1D<float4>( tex_ids[slot], coords.x );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tex_2d )
        out_float4[launch_index] = rtTex2D<float4>( tex_ids[slot], coords.x, coords.y );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tex_3d )
        out_float4[launch_index] = rtTex3D<float4>( tex_ids[slot], coords.x, coords.y, coords.z );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tex_a1d )
        out_float4[launch_index] = rtTex1DLayered<float4>( tex_ids[slot], coords.x, layer );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tex_a2d )
        out_float4[launch_index] = rtTex2DLayered<float4>( tex_ids[slot], coords.x, coords.y, layer );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tex_lwbe )
        out_float4[launch_index] = rtTexLwbemap<float4>( tex_ids[slot], coords.x, coords.y, coords.z );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tex_alwbe )
        out_float4[launch_index] = rtTexLwbemapLayered<float4>( tex_ids[slot], coords.x, coords.y, coords.z, layer );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texlevel_1d )
        out_float4[launch_index] = rtTex1DLod<float4>( tex_ids[slot], coords.x, coords.y );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texlevel_2d )
        out_float4[launch_index] = rtTex2DLod<float4>( tex_ids[slot], coords.x, coords.y, coords.z );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texlevel_3d )
        out_float4[launch_index] = rtTex3DLod<float4>( tex_ids[slot], coords.x, coords.y, coords.z, coords.w );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texlevel_a1d )
        out_float4[launch_index] = rtTex1DLayeredLod<float4>( tex_ids[slot], coords.x, layer, level );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texlevel_a2d )
        out_float4[launch_index] = rtTex2DLayeredLod<float4>( tex_ids[slot], coords.x, coords.y, layer, level );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texlevel_lwbe )
        out_float4[launch_index] = rtTexLwbemapLod<float4>( tex_ids[slot], coords.x, coords.y, coords.z, level );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texlevel_alwbe )
        out_float4[launch_index] = rtTexLwbemapLayeredLod<float4>( tex_ids[slot], coords.x, coords.y, coords.z, layer, level );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texgrad_1d )
        out_float4[launch_index] = rtTex1DGrad<float4>( tex_ids[slot], coords.x, dp1, dp1 );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texgrad_2d )
        out_float4[launch_index] = rtTex2DGrad<float4>( tex_ids[slot], coords.x, coords.y, dp2, dp2 );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texgrad_3d )
        out_float4[launch_index] = rtTex3DGrad<float4>( tex_ids[slot], coords.x, coords.y, coords.z, dp4, dp4 );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texgrad_a1d )
        out_float4[launch_index] = rtTex1DLayeredGrad<float4>( tex_ids[slot], coords.x, coords.z, layer, dp1 );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texgrad_a2d )
        out_float4[launch_index] = rtTex2DLayeredGrad<float4>( tex_ids[slot], coords.x, coords.y, layer, dp2, dp2 );
    //else if( (slot / NUMBER_OF_TEX_MODES) == TestTexture_texgrad_lwbe )
    //out_float4[launch_index] = rtTexLwbemapGrad<float4>( tex_ids[slot], coords.x, coords.y, coords.z, coords.w );
    //else if( (slot / NUMBER_OF_TEX_MODES) == TestTexture_texgrad_alwbe )
    //  out_float4[launch_index] = rtTexLwbemapLayeredGrad<float4>( tex_ids[slot], coords.x, coords.y, coords.z, coords.w );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tld4r_2d )
        out_float4[launch_index] = rtTex2DGather<float4>( tex_ids[slot], coords.x, coords.y, 0 );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tld4g_2d )
        out_float4[launch_index] = rtTex2DGather<float4>( tex_ids[slot], coords.x, coords.y, 1 );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tld4b_2d )
        out_float4[launch_index] = rtTex2DGather<float4>( tex_ids[slot], coords.x, coords.y, 2 );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_tld4a_2d )
        out_float4[launch_index] = rtTex2DGather<float4>( tex_ids[slot], coords.x, coords.y, 3 );

    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texfetch_1d )
        out_float4[launch_index] = rtTex1DFetch<float4>( tex_ids[slot], int( 2 * coords.x ) );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texfetch_2d )
        out_float4[launch_index] = rtTex2DFetch<float4>( tex_ids[slot], int( 2 * coords.x ), int( 2 * coords.y ) );
    else if( ( slot / NUMBER_OF_TEX_MODES ) == TestTexture_texfetch_3d )
        out_float4[launch_index] =
            rtTex3DFetch<float4>( tex_ids[slot], int( 2 * coords.x ), int( 2 * coords.y ), int( 2 * coords.z ) );
    //else if( (slot / NUMBER_OF_TEX_MODES) == TestTexture_texfetch_a1d )
    //  out_float4[launch_index] = rtTex1DFetchLayered<float4>( tex_ids[slot], coords.x, layer );
    //else if( (slot / NUMBER_OF_TEX_MODES) == TestTexture_texfetch_a2d )
    //  out_float4[launch_index] = rtTex2DFetchLayered<float4>( tex_ids[slot], coords.x, coords.y, layer );
    else
        out_float4[launch_index] = make_float4( 0, 0, 0, 0 );
}
