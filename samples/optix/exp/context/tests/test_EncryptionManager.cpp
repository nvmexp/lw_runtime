//
//  Copyright (c) 2019 LWPU Corporation.  All rights reserved.
//
//  LWPU Corporation and its licensors retain all intellectual property and proprietary
//  rights in and to this software, related documentation and any modifications thereto.
//  Any use, reproduction, disclosure or distribution of this software and related
//  documentation without an express license agreement from LWPU Corporation is strictly
//  prohibited.
//
//  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
//  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
//  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
//  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
//  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
//  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
//  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
//  SUCH DAMAGES
//

#include <srcTests.h>

#include <optix_types.h>

#include <exp/context/EncryptionManager.h>
#include <exp/context/ErrorHandling.h>

#include <tuple>
#include <vector>

using namespace testing;
using namespace optix_exp;

namespace {

struct TestEncryptionManager : Test
{
    void setUpPlainText( const char* text )
    {
        m_plainText   = text;
        m_encodedText = EncryptionManager::getEncryptionPrefix() + m_plainText;
    }

    OptixResult decode()
    {
        return EncryptionManager::decode( prodlib::toStringView( m_encodedText ), m_decoded, m_errDetails );
    }

    std::string       m_plainText;
    std::string       m_encodedText;
    std::vector<char> m_decoded;
    ErrorDetails      m_errDetails;
};

}  // namespace

TEST_F( TestEncryptionManager, decode_preserves_content )
{
    setUpPlainText( "Hello, world." );

    EXPECT_EQ( OPTIX_SUCCESS, decode() );

    EXPECT_EQ( m_plainText, std::string( m_decoded.begin(), m_decoded.end() ) );
}

TEST_F( TestEncryptionManager, decode_translates_NUL )
{
    setUpPlainText( "Hello, \1\1world." );
    const std::string expected{"Hello, \0world.", m_plainText.size() - 1};

    EXPECT_EQ( OPTIX_SUCCESS, decode() );

    EXPECT_EQ( expected, std::string( m_decoded.begin(), m_decoded.end() ) );
}

TEST_F( TestEncryptionManager, decode_translates_ctrl_A )
{
    setUpPlainText( "Hello, \1\2world." );

    EXPECT_EQ( OPTIX_SUCCESS, decode() );

    EXPECT_EQ( std::string( "Hello, \1world." ), std::string( m_decoded.begin(), m_decoded.end() ) );
}

TEST_F( TestEncryptionManager, decode_malformed_encoded_nul )
{
    setUpPlainText( "Hello, \1" );

    EXPECT_EQ( OPTIX_ERROR_ILWALID_VALUE, decode() );

    EXPECT_TRUE( m_decoded.empty() );
    EXPECT_THAT( m_errDetails.m_description, HasSubstr( "Encrypted PTX has invalid position of escape character." ) );
}

TEST_F( TestEncryptionManager, decode_malformed_encoded_ctrl_A )
{
    setUpPlainText( "Hello, \1X" );

    EXPECT_EQ( OPTIX_ERROR_ILWALID_VALUE, decode() );

    EXPECT_TRUE( m_decoded.empty() );
    EXPECT_THAT( m_errDetails.m_description, HasSubstr( "Encrypted PTX has invalid escape sequence." ) );
}

// Some PTX code that was encrypted with a certain vendor keys and salts set.
unsigned char preEncryptedPtx[] = {
    0x65, 0x70, 0x74, 0x78, 0x30, 0x30, 0x30, 0x31, 0x04, 0x25, 0x49, 0x57, 0xe7, 0x69, 0xa9, 0x81,
    0x1f, 0x77, 0x94, 0x04, 0x6f, 0x1c, 0x97, 0xa0, 0x79, 0xbe, 0x2e, 0x5c, 0xf0, 0x36, 0xd0, 0x83,
    0x41, 0xd8, 0xa3, 0x95, 0x67, 0x1e, 0x36, 0xf1, 0xc8, 0x0b, 0xbb, 0xcf, 0x92, 0xe7, 0x46, 0xfc,
    0xd4, 0x90, 0x99, 0x6d, 0x8a, 0x96, 0x03, 0x13, 0x26, 0xbf, 0x2e, 0x81, 0x32, 0xec, 0x79, 0xa4,
    0xbf, 0x47, 0x2c, 0xfa, 0xbf, 0x6d, 0xa9, 0xb1, 0x84, 0x1b, 0xa1, 0x71, 0xad, 0x66, 0x48, 0x84,
    0x35, 0xc5, 0x18, 0xcf, 0x13, 0x84, 0xb3, 0xc7, 0x19, 0x9c, 0xe7, 0xb1, 0xc2, 0x3b, 0x47, 0xf3,
    0x3f, 0x38, 0x87, 0x61, 0xec, 0xf9, 0xb0, 0x19, 0xe0, 0x85, 0xc8, 0xde, 0xf6, 0xb7, 0xde, 0xb6,
    0x7c, 0x86, 0xb1, 0xb8, 0xa7, 0x8c, 0x6b, 0x6a, 0x15, 0x47, 0xfb, 0x4b, 0xa4, 0x6f, 0x5d, 0xc5,
    0x29, 0xf7, 0xd4, 0xb4, 0x0b, 0xcc, 0xde, 0xf8, 0xb9, 0xf6, 0x54, 0x59, 0x58, 0x4a, 0x0f, 0x12,
    0x4b, 0xcb, 0xf8, 0xfa, 0x6a, 0x19, 0xf9, 0x1f, 0xa6, 0xcb, 0xa6, 0xe3, 0x01, 0x01, 0x75, 0xe6,
    0x61, 0xd9, 0xf1, 0x12, 0x11, 0xd5, 0xa6, 0x24, 0x7f, 0xc9, 0xef, 0x1a, 0xf4, 0xef, 0x5a, 0x53,
    0x7b, 0xc6, 0xf2, 0x9f, 0x9a, 0x0e, 0x12, 0xa5, 0xb0, 0x40, 0xac, 0xb6, 0x3d, 0xbc, 0x41, 0x55,
    0xa1, 0xb3, 0x69, 0xa7, 0x07, 0x98, 0x39, 0x1a, 0xc0, 0x27, 0x94, 0x4a, 0x90, 0x2b, 0xb2, 0x6a,
    0x0e, 0x7b, 0x16, 0x55, 0xbd, 0x65, 0x74, 0xe6, 0x2d, 0x79, 0x7d, 0x6b, 0x7e, 0xed, 0xa7, 0xc2,
    0x06, 0x11, 0x4d, 0x62, 0x9a, 0x4d, 0x54, 0x82, 0x50, 0x52, 0xf0, 0xbb, 0x46, 0xc1, 0x0e, 0x69,
    0x8b, 0x51, 0x68, 0xf5, 0x56, 0x66, 0x88, 0x72, 0xb0, 0xfe, 0x94, 0x58, 0x6c, 0xd0, 0x95, 0x70,
    0x21, 0xd6, 0xf3, 0x7e, 0x72, 0x58, 0xb7, 0x07, 0xc2, 0x17, 0x6d, 0x79, 0x24, 0x21, 0xe7, 0xa6,
    0x97, 0x12, 0xad, 0x73, 0xce, 0xa3, 0x50, 0x57, 0x14, 0xb4, 0xbb, 0x41, 0xc1, 0x5f, 0x88, 0x79,
    0xe8, 0x80, 0xb9, 0xec, 0x38, 0x79, 0x77, 0xad, 0xe6, 0x51, 0x99, 0x53, 0x91, 0xba, 0x18, 0x72,
    0xd7, 0xec, 0xfd, 0x53, 0x58, 0x14, 0x7f, 0x19, 0x6a, 0xc7, 0x2a, 0xda, 0x97, 0x6a, 0x7a, 0x16,
    0x24, 0xf5, 0xf9, 0x8a, 0x1e, 0x0b, 0x74, 0x88, 0xa6, 0x37, 0xfb, 0x36, 0xd4, 0x41, 0xe7, 0xea,
    0x08, 0xf9, 0x40, 0xbe, 0xd5, 0x37, 0xd4, 0xf1, 0xe4, 0x16, 0xff, 0x2d, 0x1d, 0x6e, 0xde, 0x35,
    0x30, 0x11, 0x78, 0xb4, 0x8f, 0xed, 0x64, 0x14, 0x1a, 0x75, 0x12, 0x28, 0x75, 0x37, 0x71, 0x3f,
    0x11, 0x84, 0xdf, 0x2a, 0x94, 0xbf, 0x4a, 0x3f, 0x42, 0x32, 0x3f, 0x7e, 0x7a, 0xe9, 0xa0, 0xc9,
    0xa6, 0x89, 0xff, 0xf5, 0x7f, 0x6b, 0xd2, 0x0a, 0xcd, 0xbe, 0x27, 0x46, 0xb7, 0x79, 0xa0, 0x17,
    0x12, 0x81, 0xe4, 0x99, 0xa4, 0x64, 0xa0, 0x41, 0x39, 0xf3, 0x7d, 0x3e, 0x9f, 0x67, 0xf6, 0x1c,
    0x01, 0x02, 0x85, 0x5f, 0x5f, 0x9d, 0xf0, 0x29, 0xc8, 0xad, 0x6f, 0x14, 0x5e, 0x7d, 0xf3, 0x67,
    0x77, 0x8a, 0x5e, 0xca, 0x1f, 0x1e, 0x6f, 0x53, 0x1b, 0x6a, 0x4c, 0x4d, 0xbb, 0xbd, 0xdc, 0x59,
    0x66, 0x42, 0xf2, 0x5b, 0x97, 0xf6, 0x14, 0x15, 0xf9, 0x7e, 0x19, 0x94, 0xe0, 0x4b, 0x67, 0xa5,
    0xd1, 0xab, 0x01, 0x01, 0x02, 0xbe, 0x2b, 0xbc, 0x62, 0x94, 0x54, 0x0a, 0xb1, 0x6e, 0x93, 0xa6,
    0xfe, 0x90, 0xc9, 0xf5, 0x12, 0x39, 0x02, 0x88, 0xb6, 0xb0, 0xd1, 0x14, 0x81, 0xbe, 0xac, 0xf1,
    0x8c, 0xa8, 0x3c, 0x63, 0xf9, 0xf8, 0x0e, 0xcb, 0x2e, 0x92, 0x54, 0x0c, 0x1c, 0x67, 0x26, 0x0b,
    0x3b, 0x74, 0xac, 0x99, 0xbe, 0xf3, 0x4f, 0x3c, 0x7a, 0xd3, 0xbd, 0xd6, 0x20, 0x93, 0x05, 0x6b,
    0x74, 0x38, 0x0e, 0x30, 0xc1, 0x2c, 0x48, 0x3b, 0x5e, 0xa3, 0x46, 0x50, 0xd6, 0x4a, 0xf6, 0xeb,
    0x1f, 0x42, 0x5a, 0x6f, 0x83, 0x01, 0x02, 0x87, 0x91, 0x8b, 0x84, 0xd2, 0x81, 0x56, 0xe6, 0xce,
    0x1c, 0xfd, 0xdd, 0x96, 0xb9, 0xde, 0x07, 0x23, 0xf7, 0xf6, 0xee, 0x38, 0x46, 0xf0, 0xb2, 0xcb,
    0xec, 0xc4, 0x0f, 0x7d, 0xc4, 0x07, 0x41, 0xab, 0x5e, 0xf2, 0x85, 0xdf, 0x05, 0x39, 0x72, 0x2c,
    0x97, 0x8d, 0xdd, 0xec, 0xdb, 0x78, 0xb8, 0x83, 0x34, 0xfe, 0x0c, 0x47, 0x13, 0x0b, 0xc7, 0x05,
    0x18, 0x2c, 0xe0, 0x67, 0x40, 0x6a, 0x5f, 0xca, 0x7d, 0x35, 0x77, 0x2e, 0xbe, 0x74, 0x10, 0xee,
    0x6c, 0xff, 0x4e, 0x53, 0x60, 0x60, 0x59, 0x36, 0x5b, 0x6c, 0x36, 0xd6, 0x91, 0x18, 0xa5, 0xd1,
    0xae, 0x60, 0x9f, 0x88, 0x9b, 0x05, 0x86, 0xa8, 0x18, 0x47, 0x75, 0xa5, 0x41, 0x33, 0x3d, 0x4e,
    0x84, 0x5d, 0xdd, 0x92, 0x42, 0xc6, 0x0e, 0x1a, 0xa5, 0x8c, 0xe9, 0xa8, 0xcd, 0x6d, 0x72, 0x6f,
    0x96, 0x76, 0x7d, 0xff, 0x8e, 0xe8, 0x7c, 0xe3, 0xc6, 0x7f, 0x1c, 0x27, 0x87, 0x2a, 0x9f, 0x95,
    0xad, 0xa7, 0x3e, 0x32, 0x3c, 0x06, 0x14, 0x2a, 0x52, 0x6d, 0x23, 0x9a, 0x62, 0x71, 0x60, 0xee,
    0x63, 0x6c, 0x52, 0x59, 0xf8, 0x0e, 0x5c, 0xae, 0xb3, 0xb6, 0xfe, 0x3c, 0xf6, 0x7b, 0xd7, 0xfd,
    0xc1, 0x87, 0x04, 0x4e, 0x63, 0x26, 0xc5, 0xb5, 0xb3, 0x76, 0x8b, 0x46, 0xa8, 0xf8, 0xdd, 0x1a,
    0xe9, 0xcc, 0x87, 0x68, 0xb7, 0x55, 0x2a, 0x02, 0x49, 0xc7, 0xbe, 0x0b, 0xd7, 0x2a, 0x3a, 0x56,
    0x2c, 0xf8, 0xe8, 0xbf, 0x98, 0x73, 0x8b, 0x94, 0xd2, 0xa3, 0xa2, 0xf8, 0x11, 0xea, 0x85, 0xd3,
    0xa2, 0x14, 0x94, 0x1b, 0x9e, 0x81, 0xb0, 0x16, 0xfb, 0xb3, 0xed, 0x62, 0x86, 0x97, 0x81, 0x4f,
    0x24, 0x73, 0xd7, 0x77, 0xac, 0x78, 0x62, 0xc0, 0x51, 0x44, 0x15, 0x4e, 0x7c, 0x39, 0xea, 0x87,
    0x56, 0x6c, 0x68, 0x38, 0x4e, 0x54, 0x94, 0x1f, 0xbe, 0x80, 0xac, 0xec, 0xa6, 0x5f, 0xfa, 0xbe,
    0xb7, 0xb9, 0xfb, 0xe3, 0x9b, 0xa3, 0x81, 0x1c, 0xe4, 0x19, 0x15, 0x21, 0x7b, 0x36, 0x07, 0x73,
    0xef, 0xbb, 0x97, 0xc4, 0x56, 0x75, 0x9f, 0xee, 0x7b, 0xce, 0xb0, 0x4e, 0x43, 0x09, 0x7f, 0x12,
    0x25, 0x65, 0x69, 0xe2, 0xf7, 0x91, 0x49, 0x02, 0x55, 0x08, 0xf1, 0xde, 0xb7, 0x5a, 0x5c, 0xbb,
    0x2a, 0x87, 0xb3, 0xcc, 0xb3, 0x32, 0x95, 0x25, 0xe1, 0xc8, 0xe1, 0x5f, 0xc3, 0xed, 0xe5, 0x84,
    0xca, 0x17, 0x77, 0xe8, 0x7f, 0x39, 0x9a, 0x02, 0xd7, 0x85, 0x19, 0x5e, 0xee, 0x9e, 0x9d, 0x28,
    0x19, 0x69, 0xb7, 0x7c, 0xd4, 0x99, 0x20, 0x2b, 0x2f, 0x60, 0xaa, 0x86, 0xfd, 0x57, 0x6f, 0x5e,
    0xdd, 0x9a, 0xd2, 0x48, 0x83, 0x43, 0x09, 0x55, 0xd7, 0x6c, 0x28, 0xb0, 0xf3, 0x75, 0x07, 0xa5,
    0xf6, 0xfe, 0xde, 0x50, 0x5c, 0xc3, 0xab, 0x06, 0x3e, 0x1b, 0xe9, 0x6e, 0xfe, 0x85, 0xdb, 0x8f,
    0xb0, 0xab, 0x87, 0x72, 0xe8, 0xab, 0x24, 0x6c, 0xc9, 0xad, 0xcf, 0xd9, 0x4c, 0x1b, 0xff, 0xed,
    0xa1, 0x41, 0x65, 0x90, 0x92, 0xc9, 0x99
};

const size_t preEncryptedPtxSize = sizeof( preEncryptedPtx ) / sizeof( preEncryptedPtx[0] );
// clang-format on

using GtestParam = std::tuple<bool, unsigned int>;

class TestStreamingDecryption_P : public TestEncryptionManager, public testing::WithParamInterface<GtestParam>
{
  public:
    void SetUp()
    {
        const char* vendorPublicKey = "vendor_public_key";
        //const char* vendorSecretKey = "b71072c8c9f55fcb3dd349e29202c23417200e5c84039eb7e3081cb8199acaa6";
        const char* optixSalt  = "01234567890123456789012345678901";
        const char* vendorSalt = "01234567890123456789012345678901";

        if( std::get<0>( GetParam() ) )
        {
            EXPECT_EQ( OPTIX_SUCCESS, m_encrypter.setOptixSalt( optixSalt, strlen( optixSalt ), m_errDetails ) );
        }
        EXPECT_EQ( OPTIX_SUCCESS, m_encrypter.setVendorSalt( vendorSalt, strlen( vendorSalt ), m_errDetails ) );
        EXPECT_EQ( OPTIX_SUCCESS, m_encrypter.setPublicVendorKey( vendorPublicKey, strlen( vendorPublicKey ), m_errDetails ) );
        if( std::get<0>( GetParam() ) )
        {
            EXPECT_TRUE( m_encrypter.isWeakVariant() );
        }

        m_windowsSize = std::get<1>( GetParam() );
    }
    void TearDown() {}

  protected:
    unsigned int            m_windowsSize;
    optix_exp::ErrorDetails m_errDetails;
    EncryptionManager       m_encrypter;
};

TEST_P( TestStreamingDecryption_P, decode_string_member )
{
    // just for comparison
    std::vector<char> completeDecryptedData;
    EXPECT_EQ( OPTIX_SUCCESS, m_encrypter.decrypt( { (const char*)&preEncryptedPtx[0], preEncryptedPtxSize },
                                                   completeDecryptedData, m_errDetails ) );

    prodlib::StringView encryptedText{ (const char*)&preEncryptedPtx[0], preEncryptedPtxSize };
    EXPECT_TRUE( m_encrypter.hasEncryptionPrefix( encryptedText ) );
    size_t prefixSize = m_encrypter.getEncryptionPrefix().size();
    EXPECT_TRUE( encryptedText.size() > prefixSize );
    encryptedText = prodlib::StringView( (const char*)&preEncryptedPtx[prefixSize], preEncryptedPtxSize - prefixSize );
    std::vector<char> decryptedText;
    // retrieve decodedText of size window_size!
    while( true )
    {
        std::vector<char> decrypted( m_windowsSize, '\0' );
        size_t            consumed;
        size_t            decryptedSize;
        EXPECT_EQ( OPTIX_SUCCESS, m_encrypter.decryptString( encryptedText, decrypted.data(), decryptedSize,
                                                             m_windowsSize, consumed, m_errDetails ) );
        decryptedText.insert( decryptedText.end(), decrypted.begin(), decrypted.begin() + decryptedSize );
        encryptedText = prodlib::StringView( encryptedText.data() + consumed, encryptedText.size() - consumed );
        if( encryptedText.size() <= 0 || consumed == 0 )
        {
            decryptedText.push_back( '\0' );
            break;
        }
    }
    ASSERT_EQ( completeDecryptedData, decryptedText );
}

TEST_P( TestStreamingDecryption_P, decode_string_C_function )
{
    optix_exp::ErrorDetails errDetails;

    // just for comparison
    std::vector<char> completeDecryptedData;
    EXPECT_EQ( OPTIX_SUCCESS, m_encrypter.decrypt( { (const char*)&preEncryptedPtx[0], preEncryptedPtxSize },
                                                   completeDecryptedData, errDetails ) );

    prodlib::StringView encryptedText{ (const char*)&preEncryptedPtx[0], preEncryptedPtxSize };
    EXPECT_TRUE( m_encrypter.hasEncryptionPrefix( encryptedText ) );
    size_t prefixSize = m_encrypter.getEncryptionPrefix().size();
    EXPECT_TRUE( encryptedText.size() > prefixSize );
    encryptedText = prodlib::StringView( (const char*)&preEncryptedPtx[prefixSize], preEncryptedPtxSize - prefixSize );
    std::vector<char> decryptedText;
    // retrieve decodedText of size window_size!
    while( true )
    {
        std::vector<char> decrypted( m_windowsSize, '\0' );
        size_t            consumed;
        size_t            decryptedSize;
        EXPECT_TRUE( decryptString( &m_encrypter, encryptedText.data(), encryptedText.size(), decrypted.data(), &decryptedSize,
                                    std::min( m_windowsSize, static_cast<unsigned int>( encryptedText.size() ) ), &consumed ) );
        decryptedText.insert( decryptedText.end(), decrypted.begin(), decrypted.begin() + decryptedSize );
        encryptedText = prodlib::StringView( encryptedText.data() + consumed,
                                             encryptedText.size() - std::min( consumed, encryptedText.size() ) );
        if( encryptedText.size() <= 0 || consumed == 0 )
        {
            decryptedText.push_back( '\0' );
            break;
        }
    }
    ASSERT_EQ( completeDecryptedData, decryptedText );
}

// Note that a window_size of 1 byte does not work, just from 8 bytes upwards. The encrypted PTX,
// ie preEncryptedPtx, has less than 1024 bytes.
INSTANTIATE_TEST_SUITE_P( CheckDifferentWindowSizesAndEncryptions,
                          TestStreamingDecryption_P,
                          testing::Combine( testing::Bool(), testing::Values( 8, 32, 128, 1024 ) ),
                          []( const testing::TestParamInfo<TestStreamingDecryption_P::ParamType>& info ) {
                              std::string name = "windowSize_";
                              name += std::to_string( std::get<1>( info.param ) );
                              if( std::get<0>( info.param ) )
                                  name += "_strongEncryption";
                              else
                                  name += "_weakEncryption";
                              return name;
                          } );
