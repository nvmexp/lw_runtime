//
//  Copyright (c) 2021 LWPU Corporation.  All rights reserved.
//
//  LWPU Corporation and its licensors retain all intellectual property and proprietary
//  rights in and to this software, related documentation and any modifications thereto.
//  Any use, reproduction, disclosure or distribution of this software and related
//  documentation without an express license agreement from LWPU Corporation is strictly
//  prohibited.
//
//  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
//  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
//  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
//  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
//  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
//  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
//  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
//  SUCH DAMAGES
//

#include "TextureFootprint.h"

#define __OPTIX_INCLUDE_INTERNAL_HEADERS__
#define __LWDACC_RTC__
#include "optixu/optixu_vector_types.h"
#undef __LWDACC_RTC__
#undef __OPTIX_INCLUDE_INTERNAL_HEADERS__

using namespace optix;

extern "C" {

// Returns {width, height, undef, numMipLevels}
__device__ uint4 optix_internal_tex_query_composite( unsigned long long tex );

// We can't include lwca.h.  These enums must agree with LWCA.
enum AddressMode
{
    ADDRESS_MODE_WRAP   = 0,
    ADDRESS_MODE_CLAMP  = 1,
    ADDRESS_MODE_MIRROR = 2,
    ADDRESS_MODE_BORDER = 3
};

enum FilterMode
{
    FILTER_MODE_POINT  = 0,
    FILTER_MODE_LINEAR = 1
};

__device__ __forceinline__ float clampf( float f, float a, float b )
{
    return fmaxf( a, fminf( f, b ) );
}

__device__ __forceinline__ unsigned int callwlateLevelDim( unsigned int mipLevel, unsigned int textureDim )
{
    return fmaxf( textureDim >> mipLevel, 1U );
}

__device__ __forceinline__ float wrapTexCoord( float x, unsigned int addressMode )
{
    const float firstFloatLessThanOne = 0.999999940395355224609375f;
    return ( addressMode == ADDRESS_MODE_WRAP ) ? x - floorf( x ) : clampf( x, 0.0f, firstFloatLessThanOne );
}

__device__ __forceinline__ unsigned int callwlateWrappedTileCoord( unsigned int addressMode, int pixelCoord, unsigned int levelSize, float ilwTileSize )
{
    const float lvlSize = static_cast<float>( levelSize );
    float       x       = wrapTexCoord( static_cast<float>( pixelCoord ) / lvlSize, addressMode );
    return static_cast<unsigned int>( x * lvlSize * ilwTileSize );
}


// Compute mip level from the texture gradients
__device__ __forceinline__ float getMipLevelFromTextureGradients( float2 ddx, float2 ddy, int texWidth, int texHeight, float ilwAnisotropy )
{
    ddx = float2{ddx.x * texWidth, ddx.y * texHeight};
    ddy = float2{ddy.x * texWidth, ddy.y * texHeight};

    // Trying to follow LWCA. LWCA performs a low precision EWA filter
    // correction on the texture gradients to determine the mip level.
    // This callwlation is described in the Siggraph 1999 paper:
    // Feline: Fast Elliptical Lines for Anisotropic Texture Mapping

    const float A    = ddy.x * ddy.x + ddy.y * ddy.y;
    const float B    = -2.0f * ( ddx.x * ddy.x + ddx.y * ddy.y );
    const float C    = ddx.x * ddx.x + ddx.y * ddx.y;
    const float root = sqrtf( fmaxf( A * A - 2.0f * A * C + C * C + B * B, 0.0f ) );

    // Compute the square of the major and minor ellipse radius lengths to avoid sqrts.
    // Then compensate by taking half the log to get the mip level.

    const float minorRadius2 = ( A + C - root ) * 0.5f;
    const float majorRadius2 = ( A + C + root ) * 0.5f;
    const float filterWidth2 = fmaxf( minorRadius2, majorRadius2 * ilwAnisotropy * ilwAnisotropy );
    const float mipLevel     = 0.5f * log2f( filterWidth2 );
    return mipLevel;
}

__device__ __forceinline__ unsigned int callwlateGranularity( unsigned int tileWidth, unsigned int tileHeight )
{
    return static_cast<unsigned int>( log2f( static_cast<float>( tileWidth * tileHeight / 2 ) ) );
}

// This intrinsic emulates the corresponding hardware footprint intrinsic.  Note that lwcc compiles
// float parameters to .b32, and PTXtoLLVM introduces a function pointer cast at call sites to make
// the types work, which interferes with inlining.  We work around this by using integer types and
// casting things ourselves.
__device__ void _lw_optix_tex_footprint_2d_grad( unsigned long long tex,
                                                 unsigned int       texInfo,
                                                 unsigned int       x,
                                                 unsigned int       y,
                                                 unsigned int       dPdx_x,
                                                 unsigned int       dPdx_y,
                                                 unsigned int       dPdy_x,
                                                 unsigned int       dPdy_y,
                                                 unsigned int       coarseMipLevel,
                                                 unsigned long long singleMipLevelPtr,
                                                 unsigned long long resultPtr )
{
    // Note that the miplevel count return by tex.query.composite is incorrect for non-mipmapped textures.
    uint4        dims   = optix_internal_tex_query_composite( tex );
    unsigned int width  = dims.x;
    unsigned int height = dims.y;

    // Determine the mip level
    const TextureInfo& info     = *reinterpret_cast<TextureInfo*>( &texInfo );
    float2             ddx      = float2{__uint_as_float( dPdx_x ), __uint_as_float( dPdx_y )};
    float2             ddy      = float2{__uint_as_float( dPdy_x ), __uint_as_float( dPdy_y )};
    float              mipLevel = getMipLevelFromTextureGradients( ddx, ddy, width, height, 1.f / info.maxAnisotropy );

    // Clamp the mip level to be in the valid range
    mipLevel = clampf( mipLevel, 0.0f, info.numMipLevels - 1.0f );

    // Snap to the nearest mip level when doing point filtering
    if( info.mipmapFilterMode == FILTER_MODE_POINT )
        mipLevel = floorf( mipLevel + 0.5f );

    // Get coarse or fine mip level
    const unsigned int mlevel = static_cast<unsigned int>( coarseMipLevel ? ceilf( mipLevel ) : mipLevel );

    *reinterpret_cast<unsigned int*>( singleMipLevelPtr ) = ( mlevel == mipLevel );

    // Get the unnormalized pixel coordinates
    const unsigned int levelWidth  = callwlateLevelDim( mlevel, width );
    const unsigned int levelHeight = callwlateLevelDim( mlevel, height );
    const int          pixelX      = static_cast<int>( __uint_as_float( x ) * levelWidth );
    const int          pixelY      = static_cast<int>( __uint_as_float( y ) * levelHeight );

    // Compute the x and y delta for the texture footprint
    const float dpdx = fmaxf( fabsf( ddx.x ), fabsf( ddy.x ) );
    const float dpdy = fmaxf( fabsf( ddx.y ), fabsf( ddy.y ) );
    const int   pdx  = (int)ceilf( dpdx * levelWidth + 0.01f );
    const int   pdy  = (int)ceilf( dpdy * levelHeight + 0.01f );

    unsigned int tileWidth  = 1 << info.logTileWidth;
    unsigned int tileHeight = 1 << info.logTileHeight;
    unsigned int x0         = callwlateWrappedTileCoord( info.wrapMode0, pixelX - pdx, levelWidth, 1.f / tileWidth );
    unsigned int x1         = callwlateWrappedTileCoord( info.wrapMode0, pixelX + pdx, levelWidth, 1.f / tileWidth );
    unsigned int y0         = callwlateWrappedTileCoord( info.wrapMode1, pixelY - pdy, levelHeight, 1.f / tileHeight );
    unsigned int y1         = callwlateWrappedTileCoord( info.wrapMode1, pixelY + pdy, levelHeight, 1.f / tileHeight );

    // Fix wrapping problem for non-power of 2 sizes that prevents mask coordinates from lining up on
    // on the right and left (or top and bottom) edges of the texture.  
    if( info.wrapMode0 == ADDRESS_MODE_WRAP && x1 == 0 && pixelX < pdx )
       x0 = 15; // 15 (rather than 7) so that dx below will be set to non-zero
    if( info.wrapMode1 == ADDRESS_MODE_WRAP && y1 == 0 && pixelY < pdy )
       y0 = 15;

    // Make the footprint and return
    Texture2DFootprint* fp      = reinterpret_cast<Texture2DFootprint*>( resultPtr );
    unsigned long long  rowmask = ( 1 << x0 % 8 ) | ( 1 << x1 % 8 );  // make mask for one row

    fp->mask = rowmask << ( 8 * ( y0 % 8 ) );
    fp->mask |= rowmask << ( 8 * ( y1 % 8 ) );

    fp->tileX       = x1 / 8;
    fp->tileY       = y1 / 8;
    fp->dx          = ( x1 / 8 == x0 / 8 ) ? 0 : 7;  // toroidal wrapping when x1 and x0 not in the same multiple of 8
    fp->dy          = ( y1 / 8 == y0 / 8 ) ? 0 : 7;
    fp->granularity = info.logTileWidth + info.logTileHeight - 1;
    fp->level       = mlevel;
    fp->reserved1   = 1; // use reserved1 field to indicate SW footprint.
}

// This intrinsic emulates the corresponding hardware footprint intrinsic.  Note that lwcc compiles
// float parameters to .b32, and PTXtoLLVM introduces a function pointer cast at call sites to make
// the types work, which interferes with inlining.  We work around this by using integer types and
// casting things ourselves.
__device__ void _lw_optix_tex_footprint_2d_lod( unsigned long long tex,
                                                unsigned int       texInfo,
                                                unsigned int       x,
                                                unsigned int       y,
                                                unsigned int       lod,
                                                unsigned int       coarseMipLevel,
                                                unsigned long long singleMipLevelPtr,
                                                unsigned long long resultPtr )
{
    uint4        dims   = optix_internal_tex_query_composite( tex );
    unsigned int width  = dims.x;
    unsigned int height = dims.y;

    const float expMipLevel = exp2f( __uint_as_float( lod ) );
    const float dPdx_x      = expMipLevel / width;
    const float dPdx_y      = 0.0f;
    const float dPdy_x      = 0.0f;
    const float dPdy_y      = expMipLevel / height;
    _lw_optix_tex_footprint_2d_grad( tex, texInfo, x, y, __float_as_uint( dPdx_x ), __float_as_uint( dPdx_y ),
                                     __float_as_uint( dPdy_x ), __float_as_uint( dPdy_y ), coarseMipLevel,
                                     singleMipLevelPtr, resultPtr );
}

// This intrinsic emulates the corresponding hardware footprint intrinsic.  Note that lwcc compiles
// float parameters to .b32, and PTXtoLLVM introduces a function pointer cast at call sites to make
// the types work, which interferes with inlining.  We work around this by using integer types and
// casting things ourselves.
__device__ void _lw_optix_tex_footprint_2d( unsigned long long tex,
                                            unsigned int       texInfo,
                                            unsigned int       x,
                                            unsigned int       y,
                                            unsigned long long singleMipLevelPtr,
                                            unsigned long long resultPtr )
{
    _lw_optix_tex_footprint_2d_lod( tex, texInfo, x, y, __float_as_uint( 0.f ) /*lod*/, 1 /*coarse*/, singleMipLevelPtr, resultPtr );
}

}  // extern "C"
