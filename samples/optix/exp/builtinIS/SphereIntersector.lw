/*
 * Copyright (c) 2021, LWPU CORPORATION.  All rights reserved.
 *
 * LWPU Corporation and its licensors retain all intellectual property and proprietary
 * rights in and to this software, related documentation and any modifications thereto.
 * Any use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from LWPU Corporation is strictly
 * prohibited.
 *
 * TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
 * AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
 * INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
 * SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
 * LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
 * BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
 * INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES
 */

#include <optix.h>
#include <optix_types.h>

#include <exp/accel/ExtendedAccelHeader.h>
#include <private/optix_7_device_private.h>

#include <lwda_runtime.h>

#include <exp/builtinIS/BuiltinISCommon.h>
#include <exp/builtinIS/BuiltinISCompileTimeConstants.h>

namespace optix_exp {

extern "C" __global__ void __intersection__is()
{
    float4 q;

    if( !optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_LOWMEM ) )
    {
        // The extended header is only loaded for checking exceptions.
        // Primbits are used for accessing sphere data.

        if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_EXCEPTION ) )
        {
            OptixTraversableHandle gasHandle = optixGetGASTraversableHandle();
            // the GAS must have an extended header.
            if( !hasExtendedHeader( gasHandle ) )
                optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );

            ExtendedAccelHeader eh = loadCachedAlign16( optixGetExtendedAccelHeaderFromHandle( gasHandle ) );

            // the GAS primitive type must match this intersector
            if( eh.primitiveType != OPTIX_PRIMITIVE_TYPE_SPHERE )
                optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );

            if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_MOTION ) )
            {
                // this intersector is for motion spheres
                if( optixGetGASMotionStepCount( gasHandle ) <= 1 )
                    optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
            }
            else
            {
                // this intersector does not support motion
                if( optixGetGASMotionStepCount( gasHandle ) > 1 )
                    optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
            }

            // this intersector does not support low memory variant
            if( eh.lowMem )
                optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
        }

        // Fetching sphere data using prim bits.
        unsigned long long    primVA   = optixGetPrimitiveVA();
        SphereIntersectorData primbits = loadCachedAlign8( reinterpret_cast<const SphereIntersectorData*>( primVA ) );
        const float4*         vertices = reinterpret_cast<const float4*>( primVA + primbits.getVertexOffsetInBytes() );

        if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_MOTION ) )
        {
            float time     = optixGetGASKeyTime();
            float f_keyIdx = fmaxf( 0.f, ceilf( time - 1.f ) );
            time -= f_keyIdx;  // local time in motion interval keyIdx
            int keyIdx = (int)f_keyIdx;

            const float4* q_0 = &vertices[keyIdx];
            q                 = q_0[0] + time * ( q_0[1] - q_0[0] );
        }
        else
        {
            q = vertices[0];
        }
    }
    else
    {
        // Low memory version, the extended header is always loaded and
        // used for exception checking and accessing sphere data.

        size_t                 ptrGAS;
        OptixTraversableHandle gasHandle = optixGetGASTraversableHandle();
        asm( "call (%0), _optix_get_gas_ptr, (%1);" : "=l"( ptrGAS ) : "l"( gasHandle ) : );

        if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_EXCEPTION ) )
        {
            // the GAS must have an extended header.
            if( !hasExtendedHeader( gasHandle ) )
                optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
        }

        ExtendedAccelHeader eh = loadCachedAlign16( optixGetExtendedAccelHeaderFromHandle( gasHandle ) );

        if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_EXCEPTION ) )
        {
            // the GAS primitive type must match this intersector
            if( eh.primitiveType != OPTIX_PRIMITIVE_TYPE_SPHERE )
                optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );

            if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_MOTION ) )
            {
                // this intersector is for motion spheres
                if( optixGetGASMotionStepCount( gasHandle ) <= 1 )
                    optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
            }
            else
            {
                // this intersector does not support motion
                if( optixGetGASMotionStepCount( gasHandle ) > 1 )
                    optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
            }

            // this intersector supports only the low memory variant
            if( eh.lowMem == false )
                optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
        }

        // Fetching sphere data using offsets.

        const size_t dataOffset       = ( (size_t)eh.dataOffset32 ) << 4;
        const size_t sbtMappingOffset = ( (size_t)eh.sbtMappingOffset ) << 4;
        const size_t primIndexOffset  = ( (size_t)eh.primIndexOffset ) << 4;

        float4*       vertices   = reinterpret_cast<float4*>( (LWdeviceptr)ptrGAS + dataOffset );
        unsigned int* sbtMapping = reinterpret_cast<unsigned int*>( (LWdeviceptr)ptrGAS + dataOffset + sbtMappingOffset );
        unsigned int* indexOffsets = reinterpret_cast<unsigned int*>( (LWdeviceptr)ptrGAS + dataOffset + primIndexOffset );

        const unsigned int gas_idx  = optixGetSbtGASIndex();
        const unsigned int prim_idx = optixGetPrimitiveIndex() + indexOffsets[sbtMapping[gas_idx]];

        if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_MOTION ) )
        {
            float time     = optixGetGASKeyTime();
            float f_keyIdx = fmaxf( 0.f, ceilf( time - 1.f ) );
            time -= f_keyIdx;  // local time in motion interval keyIdx
            int keyIdx         = (int)f_keyIdx;
            int numMotionSteps = optixGetGASMotionStepCount( gasHandle );

            const unsigned int c0_idx = prim_idx * numMotionSteps;

            float4* q_0 = &vertices[c0_idx + keyIdx];
            q           = q_0[0] + time * ( q_0[1] - q_0[0] );
        }
        else
        {
            q = vertices[prim_idx];
        }
    }

    float3 rayOrigin    = optixGetObjectRayOrigin();
    float3 rayDirection = optixGetObjectRayDirection();

    // Handle scaling of instances. Assuming ray direction is not normalized.
    const float rayLen    = sqrtf( dot3( rayDirection, rayDirection ) );
    const float rcpRayLen = 1.f / rayLen;
    rayDirection.x *= rcpRayLen;
    rayDirection.y *= rcpRayLen;
    rayDirection.z *= rcpRayLen;

    // sphere center (q.x, q.y, q.z), sphere radius q.w

    const float3 sphereDir = rayOrigin - make_float3( q );
    const float  radius2   = q.w * q.w;

    float b = dot3( sphereDir, rayDirection );
    float c = dot3( sphereDir, sphereDir ) - radius2;

    // float disc = b * b - c;
    // has been replaced by Hearn and Baker method which relies on a normalized rayDirection.
    float3 remedyTerm = b * rayDirection - sphereDir;
    float  disc       = radius2 - dot3( remedyTerm, remedyTerm );

    if( disc > 0.0f )
    {
        const float sdisc = sqrtf( disc );

        // Avoid cancellation errors by using the following instead of setting the roots to -b - sdisc, -b + sdisc.
        // float root1 = -b - sdisc;
        // float root2 = -b + sdisc;

        float root1, root2;
        if( b > 0.f )
        {
            root1 = -b - sdisc;
            root2 = c / root1;
        }
        else
        {
            root2 = -b + sdisc;
            root1 = c / root2;
        }

        const float tmin = optixGetRayTmin() * rayLen;
        const float tmax = optixGetRayTmax() * rayLen;

        bool valid1 = ( root1 > tmin && root1 < tmax );
        bool valid2 = ( root2 > tmin && root2 < tmax );
        if( valid1 || valid2 )
        {
            optixReportIntersection( valid1 ? root1 * rcpRayLen : root2 * rcpRayLen,
                                     valid1 ? OPTIX_HIT_KIND_SPHERE : OPTIX_HIT_KIND_SPHERE + 1,
                                     valid1 && valid2 ? float_as_int( root2 * rcpRayLen ) : 0 );
        }
    }
}
}  // namespace optix_exp
