/*
 * Copyright (c) 2020, LWPU CORPORATION.  All rights reserved.
 *
 * LWPU Corporation and its licensors retain all intellectual property and proprietary
 * rights in and to this software, related documentation and any modifications thereto.
 * Any use, reproduction, disclosure or distribution of this software and related
 * documentation without an express license agreement from LWPU Corporation is strictly
 * prohibited.
 *
 * TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
 * AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
 * INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
 * SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
 * LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
 * BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
 * INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGES
 */

#include <optix.h>
#include <optix_types.h>

#include <exp/accel/ExtendedAccelHeader.h>
#include <private/optix_7_device_private.h>

#include <lwda_runtime.h>

#include "BuiltinISCompileTimeConstants.h"
#include "LinearLwrveIntersectorCommon.h"

namespace optix_exp {

extern "C" __global__ void __intersection__is()
{
    size_t                 ptrGAS;
    OptixTraversableHandle gasHandle = optixGetGASTraversableHandle();
    asm( "call (%0), _optix_get_gas_ptr, (%1);" : "=l"( ptrGAS ) : "l"( gasHandle ) : );

    if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_EXCEPTION ) )
    {
        // the GAS must have an extended header.
        if( !hasExtendedHeader( gasHandle ) )
            optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
    }
    ExtendedAccelHeader eh = loadCachedAlign16( optixGetExtendedAccelHeaderFromHandle( gasHandle ) );

    if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_EXCEPTION ) )
    {
        // the GAS primitive type must match this intersector
        if( eh.primitiveType != OPTIX_PRIMITIVE_TYPE_ROUND_LINEAR )
            optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );

        if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_MOTION ) )
        {
            // this intersector is for motion lwrves
            if( optixGetGASMotionStepCount( gasHandle ) <= 1 )
                optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
        }
        else
        {
            // this intersector does not support motion
            if( optixGetGASMotionStepCount( gasHandle ) > 1 )
                optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
        }

        // this intersector supports only the low memory variant
        if( eh.lowMem == false )
            optixThrowException( OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH );
    }
    float3 rayOrigin    = optixGetObjectRayOrigin();
    float3 rayDirection = optixGetObjectRayDirection();
    // No need to normalize rayDirection, the intersector doesn't depend on normalization.
    
    const size_t dataOffset      = ( (size_t)eh.dataOffset32 ) << 4;
    const size_t indexOffset     = ( (size_t)eh.indexOffset ) << 4;
    const size_t primIndexOffset = ( (size_t)eh.primIndexOffset ) << 4;

    float4*       vertices     = reinterpret_cast<float4*>( (LWdeviceptr)ptrGAS + dataOffset );
    unsigned int* indices      = reinterpret_cast<unsigned int*>( (LWdeviceptr)ptrGAS + dataOffset + indexOffset );
    unsigned int* indexOffsets = reinterpret_cast<unsigned int*>( (LWdeviceptr)ptrGAS + dataOffset + primIndexOffset );

    const unsigned int gas_idx  = optixGetSbtGASIndex();
    const unsigned int prim_idx = optixGetPrimitiveIndex() + indexOffsets[gas_idx];

    Intersection isect;
    if( optix_ext::optixPrivateGetCompileTimeConstant( BUILTIN_IS_COMPILE_TIME_CONSTANT_MOTION ) )
    {
        float time = optixGetGASKeyTime();
        float f_keyIdx = fmaxf( 0.f, ceilf( time - 1.f ) );
        time -= f_keyIdx;  // local time in motion interval keyIdx
        int keyIdx = (int)f_keyIdx;
        int numMotionSteps = optixGetGASMotionStepCount( gasHandle );

        const unsigned int c0_idx = indices[prim_idx] * numMotionSteps;

        float4* q_0 = &vertices[c0_idx + keyIdx];
        float4* q_1 = &vertices[c0_idx + numMotionSteps + keyIdx];

        float4 q[2] = { q_0[0] + time * ( q_0[1] - q_0[0] ), q_1[0] + time * ( q_1[1] - q_1[0] ) };

        isect = intersect_linear( rayOrigin, rayDirection, make_float3( q[0] ), make_float3( q[1] ), q[0].w, q[1].w );
    }
    else
    {
        float4* q = &vertices[indices[prim_idx]];

        isect = intersect_linear( rayOrigin, rayDirection, make_float3( q[0] ), make_float3( q[1] ), q[0].w, q[1].w );
    }

    const float tmin = optixGetRayTmin();
    const float tmax = fminf( LWRVE_FLT_MAX, optixGetRayTmax() );

    if( isect.t > tmin && isect.t < tmax )
    {
        isect.u = __saturatef( isect.u );
        optixReportIntersection( isect.t,
                                 OPTIX_HIT_KIND_LWRVES_LINEAR_HIT,  // user hit kind
                                 float_as_int( isect.u ) );
    }
}

}  // namespace optix_exp
