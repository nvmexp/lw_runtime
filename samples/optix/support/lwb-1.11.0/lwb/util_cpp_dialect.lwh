/******************************************************************************
 * Copyright (c) 2020, LWPU CORPORATION.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the LWPU CORPORATION nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL LWPU CORPORATION BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROLWREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************/

/*! \file
 *  \brief Detect the version of the C++ standard used by the compiler.
 */

#pragma once

#include "util_compiler.lwh"

// Deprecation warnings may be silenced by defining the following macros. These
// may be combined.
// - LWB_IGNORE_DEPRECATED_CPP_DIALECT:
//   Ignore all deprecated C++ dialects and outdated compilers.
// - LWB_IGNORE_DEPRECATED_CPP_11:
//   Ignore deprecation warnings when compiling with C++11. C++03 and outdated
//   compilers will still issue warnings.
// - LWB_IGNORE_DEPRECATED_COMPILER
//   Ignore deprecation warnings when using deprecated compilers. Compiling
//   with C++03 and C++11 will still issue warnings.

// Check for the thrust opt-outs as well:
#if !defined(LWB_IGNORE_DEPRECATED_CPP_DIALECT) // && \
//     defined(THRUST_IGNORE_DEPRECATED_CPP_DIALECT)
#  define    LWB_IGNORE_DEPRECATED_CPP_DIALECT
#endif
#if !defined(LWB_IGNORE_DEPRECATED_CPP_11) && \
     defined(THRUST_IGNORE_DEPRECATED_CPP_11)
#  define    LWB_IGNORE_DEPRECATED_CPP_11
#endif
#if !defined(LWB_IGNORE_DEPRECATED_COMPILER) && \
     defined(THRUST_IGNORE_DEPRECATED_COMPILER)
#  define    LWB_IGNORE_DEPRECATED_COMPILER
#endif

#ifdef LWB_IGNORE_DEPRECATED_CPP_DIALECT
#  define LWB_IGNORE_DEPRECATED_CPP_11
#  define LWB_IGNORE_DEPRECATED_COMPILER
#endif

// Define this to override the built-in detection.
#ifndef LWB_CPP_DIALECT

// MSVC does not define __cplusplus correctly. _MSVC_LANG is used instead.
// This macro is only defined in MSVC 2015U3+.
#  ifdef _MSVC_LANG // Do not replace with LWB_HOST_COMPILER test (see above)
// MSVC2015 reports C++14 but lacks extended constexpr support. Treat as C++11.
#    if LWB_MSVC_VERSION < 1910 && _MSVC_LANG > 201103L /* MSVC < 2017 && CPP > 2011 */
#      define LWB_CPLUSPLUS 201103L /* Fix to 2011 */
#    else
#      define LWB_CPLUSPLUS _MSVC_LANG /* We'll trust this for now. */
#    endif // MSVC 2015 C++14 fix
#  else
#    define LWB_CPLUSPLUS __cplusplus
#  endif

// Detect current dialect:
#  if LWB_CPLUSPLUS < 201103L
#    define LWB_CPP_DIALECT 2003
#  elif LWB_CPLUSPLUS < 201402L
#    define LWB_CPP_DIALECT 2011
#  elif LWB_CPLUSPLUS < 201703L
#    define LWB_CPP_DIALECT 2014
#  elif LWB_CPLUSPLUS == 201703L
#    define LWB_CPP_DIALECT 2017
#  elif LWB_CPLUSPLUS > 201703L // unknown, but is higher than 2017.
#    define LWB_CPP_DIALECT 2020
#  endif

#  undef LWB_CPLUSPLUS // cleanup

#endif // !LWB_CPP_DIALECT

// Define LWB_COMPILER_DEPRECATION macro:
#if LWB_HOST_COMPILER == LWB_HOST_COMPILER_MSVC
#  define LWB_COMP_DEPR_IMPL(msg) \
    __pragma(message(__FILE__ ":" LWB_COMP_DEPR_IMPL0(__LINE__) ": warning: " #msg))
#  define LWB_COMP_DEPR_IMPL0(x) LWB_COMP_DEPR_IMPL1(x)
#  define LWB_COMP_DEPR_IMPL1(x) #x
#else // clang / gcc:
#  define LWB_COMP_DEPR_IMPL(msg) LWB_COMP_DEPR_IMPL0(GCC warning #msg)
#  define LWB_COMP_DEPR_IMPL0(expr) _Pragma(#expr)
#  define LWB_COMP_DEPR_IMPL1 /* intentionally blank */
#endif

#define LWB_COMPILER_DEPRECATION(REQ, FIX) \
  LWB_COMP_DEPR_IMPL(LWB requires REQ. Please FIX. Define LWB_IGNORE_DEPRECATED_CPP_DIALECT to suppress this message.)

// Minimum required compiler checks:
#ifndef LWB_IGNORE_DEPRECATED_COMPILER
#  if LWB_HOST_COMPILER == LWB_HOST_COMPILER_GCC && LWB_GCC_VERSION < 50000
     LWB_COMPILER_DEPRECATION(GCC 5.0, upgrade your compiler);
#  endif
#  if LWB_HOST_COMPILER == LWB_HOST_COMPILER_CLANG && LWB_CLANG_VERSION < 60000
     LWB_COMPILER_DEPRECATION(Clang 6.0, upgrade your compiler);
#  endif
#  if LWB_HOST_COMPILER == LWB_HOST_COMPILER_MSVC && LWB_MSVC_VERSION < 1910
     LWB_COMPILER_DEPRECATION(MSVC 2017, upgrade your compiler);
#  endif
#endif

#if !defined(LWB_IGNORE_DEPRECATED_CPP_DIALECT) && LWB_CPP_DIALECT < 2014 && \
    (LWB_CPP_DIALECT != 2011 || !defined(LWB_IGNORE_DEPRECATED_CPP_11))
  LWB_COMPILER_DEPRECATION(C++14, pass -std=c++14 to your compiler);
#endif

#undef LWB_COMPILER_DEPRECATION
#undef LWB_COMP_DEPR_IMPL
#undef LWB_COMP_DEPR_IMPL0
#undef LWB_COMP_DEPR_IMPL1
