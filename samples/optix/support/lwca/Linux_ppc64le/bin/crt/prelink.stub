/*
 * LWIDIA_COPYRIGHT_BEGIN
 *
 * Copyright (c) 2012-2018, LWPU CORPORATION.  All rights reserved.
 *
 * LWPU CORPORATION and its licensors retain all intellectual property
 * and proprietary rights in and to this software, related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from LWPU CORPORATION is strictly prohibited.
 *
 * LWIDIA_COPYRIGHT_END
 */

#if !defined(__LWDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#if defined(_MSC_VER)
#pragma message("crt/prelink.stub is an internal header file and must not be used directly.  Please use lwda_runtime_api.h or lwda_runtime.h instead.")
#else
#warning "crt/prelink.stub is an internal header file and must not be used directly.  Please use lwda_runtime_api.h or lwda_runtime.h instead."
#endif
#define __LWDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#define __UNDEF_LWDA_INCLUDE_COMPILER_INTERNAL_HEADERS_PRELINK_STUB__
#endif

#if defined(__GNUC__)
#if defined(__clang__) || (!defined(__PGIC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)))
#pragma GCC diagnostic push
#endif
#if defined(__clang__) || (!defined(__PGIC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2)))
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
#endif

#include FATBINFILE

#if defined(_WIN32)
__declspec(selectany) void *__lw__fatDeviceText_dummy = (void *)&__FATIDNAME(__LW_MODULE_ID);
#else
void *__lw__fatDeviceText_dummy __attribute__((weak)) = (void *)&__FATIDNAME(__LW_MODULE_ID);
;
#endif

#define __TO_STRING_CORE(X) #X
#define __TO_STRING(X) __TO_STRING_CORE(X)
#define __REGISTER_IDNAME_CORE(X) __sti__lwdaRegisterLocal_##X
#define __REGISTER_IDNAME(X) __REGISTER_IDNAME_CORE(X)
#define __REGISTER_LINKED_IDNAME_CORE(X) __lwdaRegisterLinkedBinary##X
#define __REGISTER_LINKED_IDNAME(X) __REGISTER_LINKED_IDNAME_CORE(X)

static void ____lw_dummy_param_ref(void *param) { 
#if defined(__GNUC__)
  volatile static void **__ref __attribute__((unused)); 
#else
  volatile static void **__ref;
#endif
  __ref = (volatile void **)param; }

extern "C" {
#if defined(_WIN32)
#pragma data_seg("__lw_module_id")
static const __declspec(allocate("__lw_module_id")) unsigned char __module_id_str[] = __TO_STRING(__LW_MODULE_ID);
#pragma data_seg()
#elif defined(__APPLE__)
static const unsigned char __module_id_str[] __attribute__((section ("__LW_LWDA,__lw_module_id"))) = __TO_STRING(__LW_MODULE_ID);
#else /* linux */
static const unsigned char __module_id_str[] __attribute__((section ("__lw_module_id"))) = __TO_STRING(__LW_MODULE_ID);
#endif
}

extern "C" void __REGISTER_LINKED_IDNAME(__LW_MODULE_ID) ( void (*)(void **), void *, void *, void (*)(void *));
static void __lw_lwdaEntityRegisterCallback(void **){}

#if defined(_WIN32)
static void __sti____lwdaRegisterAll_14_simple_cpp1_ii__Z3foov(void);
static void __REGISTER_IDNAME(__LW_MODULE_ID) (void);
#pragma section(".CRT$XLW",read)
#define __DUMMY_INIT_CORE(X) __dumY_static_init__sti__lwdaRegisterLocal_##X
#define __DUMMY_INIT(X) __DUMMY_INIT_CORE(X)
__declspec(allocate(".CRT$XLW")) static void (*__DUMMY_INIT(__LW_MODULE_ID)[])(void) = {__REGISTER_IDNAME(__LW_MODULE_ID)};
#else
static void __REGISTER_IDNAME(__LW_MODULE_ID) (void) __attribute__((__constructor__));
#endif

static void __REGISTER_IDNAME(__LW_MODULE_ID) (void){{ __REGISTER_LINKED_IDNAME(__LW_MODULE_ID)(( void (*)(void **))(__lw_lwdaEntityRegisterCallback), (void *)&__FATIDNAME(__LW_MODULE_ID), (void *)&__module_id_str, (void (*)(void *))&____lw_dummy_param_ref); };}

#if defined(__GNUC__)
#if defined(__clang__) || (!defined(__PGIC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)))
#pragma GCC diagnostic pop
#endif
#endif

#if defined(__UNDEF_LWDA_INCLUDE_COMPILER_INTERNAL_HEADERS_PRELINK_STUB__)
#undef __LWDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#undef __UNDEF_LWDA_INCLUDE_COMPILER_INTERNAL_HEADERS_PRELINK_STUB__
#endif
