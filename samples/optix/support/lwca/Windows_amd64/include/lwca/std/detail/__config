//===----------------------------------------------------------------------===//
//
// Part of liblw++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef __lwda_std__
#define __lwda_std__

#ifdef __LWDACC__
    #if defined(__clang__)
        #include <lwda_fp16.h>
        #define __fp16 __half
    #endif
    #if defined(__FLT16_MANT_DIG__)
        #include <lwda_fp16.h>
        #define _Float16 __half
    #endif
#else
    #ifndef __host__
        #define __host__
    #endif
    #ifndef __device__
        #define __device__
    #endif
    #ifndef __forceinline__
        #define __forceinline__
    #endif
#endif

#ifdef _MSC_VER
    #undef __cpp_lib_transparent_operators
#endif

// request these outcomes
#define _LIBLWDACXX_NO_AUTO_LINK
#ifndef _LIBLWDACXX_NO_EXCEPTIONS
    #define _LIBLWDACXX_NO_EXCEPTIONS
#endif
#ifndef _LIBLWDACXX_NO_RTTI
    #define _LIBLWDACXX_NO_RTTI
#endif
#define _LIBLWDACXX_HAS_NO_INT128
#define _LIBLWDACXX_FREESTANDING
#define _LIBLWDACXX_HAS_NO_THREAD_CONTENTION_TABLE
#define _LIBLWDACXX_HAS_NO_PLATFORM_WAIT
#define _LIBLWDACXX_HAS_NO_MONOTONIC_CLOCK
#define _LIBLWDACXX_HAS_NO_TREE_BARRIER
#ifdef __LWDACC_RTC__
    #define __ELF__
    #define _LIBLWDACXX_DISABLE_PRAGMA_GCC_SYSTEM_HEADER
    #define _LIBLWDACXX_HAS_THREAD_API_EXTERNAL
    #define __alignof(x) alignof(x)
    #define _LIBLWDACXX_LITTLE_ENDIAN
    #define _LIBLWDACXX_DISABLE_VISIBILITY_ANNOTATIONS
    #define _LIBLWDACXX_HAS_NO_PRAGMA_PUSH_POP_MACRO
#endif
#define _LIBLWDACXX_HAS_EXTERNAL_ATOMIC_IMP
#define _LIBLWDACXX_ATOMIC_ALWAYS_LOCK_FREE(size, ptr) (size <= 8)

#define _LIBLWDACXX_SYS_CLOCK_DURATION nanoseconds

#if defined(__PGIC__) && defined(__linux__)
    #define __ELF__
#endif

#include "libcxx/include/__config"

#if defined(__LWDA_ARCH__)
    #define _LIBLWDACXX_HAS_THREAD_API_LWDA
#elif defined(_LIBLWDACXX_COMPILER_MSVC)
    #define _LIBLWDACXX_HAS_THREAD_API_WIN32
#endif

#if _GNUC_VER <= 409
    #define _LIBLWDACXX_LWDA_HAS_NO_HOST_STD_ATOMIC_INIT
#endif

// force this outcome
#undef _LIBLWDACXX_ATOMIC_FLAG_TYPE
#define _LIBLWDACXX_ATOMIC_FLAG_TYPE int
#undef _LIBLWDACXX_INLINE_VISIBILITY
#define _LIBLWDACXX_INLINE_VISIBILITY __host__ __device__
#undef _LIBLWDACXX_FUNC_VIS
#define _LIBLWDACXX_FUNC_VIS _LIBLWDACXX_INLINE_VISIBILITY
#undef _LIBLWDACXX_TYPE_VIS
#define _LIBLWDACXX_TYPE_VIS

#ifndef _LIBLWDACXX_ABI_UNSTABLE
#  define _LIBLWDACXX_ABI_UNSTABLE
#endif

#define _LIBLWDACXX_LWDA_API_VERSION 002000000

#define _LIBLWDACXX_LWDA_API_VERSION_MAJOR \
  (_LIBLWDACXX_LWDA_API_VERSION / 1000000)

#define _LIBLWDACXX_LWDA_API_VERSION_MINOR \
  (_LIBLWDACXX_LWDA_API_VERSION / 1000 % 1000)

#define _LIBLWDACXX_LWDA_API_VERSION_PATCH \
  (_LIBLWDACXX_LWDA_API_VERSION % 1000)

#ifndef _LIBLWDACXX_LWDA_ABI_VERSION_LATEST
#  define _LIBLWDACXX_LWDA_ABI_VERSION_LATEST 3
#endif

#ifdef _LIBLWDACXX_LWDA_ABI_VERSION
#  if _LIBLWDACXX_LWDA_ABI_VERSION != 2 && _LIBLWDACXX_LWDA_ABI_VERSION != 3
#    error Unsupported liblw++ ABI version requested. Please define _LIBLWDACXX_LWDA_ABI_VERSION to either 2 or 3.
#  endif
#else
#  define _LIBLWDACXX_LWDA_ABI_VERSION _LIBLWDACXX_LWDA_ABI_VERSION_LATEST
#endif

#ifdef _LIBLWDACXX_PIPELINE_ASSUMED_ABI_VERSION
#if _LIBLWDACXX_PIPELINE_ASSUMED_ABI_VERSION != _LIBLWDACXX_LWDA_ABI_VERSION
#error lwda_pipeline.h has assumed a different liblw++ ABI version than provided by this library. To fix this, please include a liblw++ header before including lwda_pipeline.h, or upgrade to a version of the toolkit this version of liblw++ shipped in.
#endif
#endif

#ifndef _LIBLWDACXX_LWDA_ABI_NAMESPACE
#  define _LIBLWDACXX_LWDA_ABI_NAMESPACE _LIBLWDACXX_CONCAT(__,_LIBLWDACXX_LWDA_ABI_VERSION)
#endif

#ifndef _LIBLWDACXX_BEGIN_NAMESPACE_LWDA
#  define _LIBLWDACXX_BEGIN_NAMESPACE_LWDA \
      namespace lwca { inline namespace _LIBLWDACXX_LWDA_ABI_NAMESPACE {
#endif
#ifndef _LIBLWDACXX_END_NAMESPACE_LWDA
#  define _LIBLWDACXX_END_NAMESPACE_LWDA } }
#endif

#ifndef _LIBLWDACXX_BEGIN_NAMESPACE_LWDA_DEVICE
#  define _LIBLWDACXX_BEGIN_NAMESPACE_LWDA_DEVICE \
     namespace lwca { namespace device { inline namespace _LIBLWDACXX_LWDA_ABI_NAMESPACE {
#endif
#ifndef _LIBLWDACXX_END_NAMESPACE_LWDA_DEVICE
#  define _LIBLWDACXX_END_NAMESPACE_LWDA_DEVICE } } }
#endif

// redefine namespace std::
#undef _LIBLWDACXX_BEGIN_NAMESPACE_STD
#define _LIBLWDACXX_BEGIN_NAMESPACE_STD \
   namespace lwca { namespace std { inline namespace _LIBLWDACXX_LWDA_ABI_NAMESPACE {

#undef _LIBLWDACXX_END_NAMESPACE_STD
#define _LIBLWDACXX_END_NAMESPACE_STD } } }

#undef _LWDA_VSTD
#define _LWDA_VSTD lwca::std::_LIBLWDACXX_LWDA_ABI_NAMESPACE

#undef _LIBLWDACXX_BEGIN_NAMESPACE_STD_NOVERSION
#define _LIBLWDACXX_BEGIN_NAMESPACE_STD_NOVERSION namespace lwca { namespace std {
#undef _LIBLWDACXX_END_NAMESPACE_STD_NOVERSION
#define _LIBLWDACXX_END_NAMESPACE_STD_NOVERSION } }

#endif //__lwda_std__
