//
//  Copyright (c) 2022 LWPU Corporation.  All rights reserved.
//
//  LWPU Corporation and its licensors retain all intellectual property and proprietary
//  rights in and to this software, related documentation and any modifications thereto.
//  Any use, reproduction, disclosure or distribution of this software and related
//  documentation without an express license agreement from LWPU Corporation is strictly
//  prohibited.
//
//  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
//  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
//  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
//  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
//  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
//  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
//  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
//  SUCH DAMAGES
//

#pragma once

// Generated by apps/optix/make/enum-printer.py -- DO NOT EDIT!
// Command: enum-printer.py optix7Types

#include <optix_host.h>

#include <iostream>
#include <string>


#if !defined( EMIT_FLAG_DEFINED )
inline void emitFlag( std::string& result, bool& emitted, unsigned long flags, unsigned long flag, const char* enumerant )
{
    if( flags & flag )
    {
        if( emitted )
        {
            result += " | ";
        }
        result += enumerant;
        emitted = true;
    }
}
#endif // EMIT_FLAG_DEFINED
#define EMIT_FLAG_DEFINED

#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
struct OptixVisibilityMapFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixVisibilityMapFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_VISIBILITY_MAP_FLAG_PREFER_FAST_TRACE, "OPTIX_VISIBILITY_MAP_FLAG_PREFER_FAST_TRACE" );
    emitFlag( result, emitted, flags.flags, OPTIX_VISIBILITY_MAP_FLAG_PREFER_FAST_BUILD, "OPTIX_VISIBILITY_MAP_FLAG_PREFER_FAST_BUILD" );
    if( !emitted )
    {
        result = "OPTIX_VISIBILITY_MAP_FLAG_NONE";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixVisibilityMapFlagSet flags )
{
    return str << toString( flags );
}
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )

#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
inline std::string toString( OptixDisplacementVectorFormat value )
{
    switch( value )
    {
        case OPTIX_MICROMESH_DISPLACEMENT_VECTOR_FORMAT_HALF3: return "OPTIX_MICROMESH_DISPLACEMENT_VECTOR_FORMAT_HALF3";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixDisplacementVectorFormat value )
{
    return str << toString( value );
}
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )

inline std::string toString( OptixVertexFormat value )
{
    switch( value )
    {
        case OPTIX_VERTEX_FORMAT_NONE: return "OPTIX_VERTEX_FORMAT_NONE";
        case OPTIX_VERTEX_FORMAT_FLOAT3: return "OPTIX_VERTEX_FORMAT_FLOAT3";
        case OPTIX_VERTEX_FORMAT_FLOAT2: return "OPTIX_VERTEX_FORMAT_FLOAT2";
        case OPTIX_VERTEX_FORMAT_HALF3: return "OPTIX_VERTEX_FORMAT_HALF3";
        case OPTIX_VERTEX_FORMAT_HALF2: return "OPTIX_VERTEX_FORMAT_HALF2";
        case OPTIX_VERTEX_FORMAT_SNORM16_3: return "OPTIX_VERTEX_FORMAT_SNORM16_3";
        case OPTIX_VERTEX_FORMAT_SNORM16_2: return "OPTIX_VERTEX_FORMAT_SNORM16_2";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixVertexFormat value )
{
    return str << toString( value );
}

struct OptixProgramGroupFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixProgramGroupFlagSet flags )
{
    bool emitted = false;
    std::string result;
    if( !emitted )
    {
        result = "OPTIX_PROGRAM_GROUP_FLAGS_NONE";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixProgramGroupFlagSet flags )
{
    return str << toString( flags );
}

inline std::string toString( OptixProgramGroupKind value )
{
    switch( value )
    {
        case OPTIX_PROGRAM_GROUP_KIND_RAYGEN: return "OPTIX_PROGRAM_GROUP_KIND_RAYGEN";
        case OPTIX_PROGRAM_GROUP_KIND_MISS: return "OPTIX_PROGRAM_GROUP_KIND_MISS";
        case OPTIX_PROGRAM_GROUP_KIND_EXCEPTION: return "OPTIX_PROGRAM_GROUP_KIND_EXCEPTION";
        case OPTIX_PROGRAM_GROUP_KIND_HITGROUP: return "OPTIX_PROGRAM_GROUP_KIND_HITGROUP";
        case OPTIX_PROGRAM_GROUP_KIND_CALLABLES: return "OPTIX_PROGRAM_GROUP_KIND_CALLABLES";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixProgramGroupKind value )
{
    return str << toString( value );
}

struct OptixGeometryFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixGeometryFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_GEOMETRY_FLAG_DISABLE_ANYHIT, "OPTIX_GEOMETRY_FLAG_DISABLE_ANYHIT" );
    emitFlag( result, emitted, flags.flags, OPTIX_GEOMETRY_FLAG_REQUIRE_SINGLE_ANYHIT_CALL, "OPTIX_GEOMETRY_FLAG_REQUIRE_SINGLE_ANYHIT_CALL" );
    emitFlag( result, emitted, flags.flags, OPTIX_GEOMETRY_FLAG_DISABLE_TRIANGLE_FACE_LWLLING, "OPTIX_GEOMETRY_FLAG_DISABLE_TRIANGLE_FACE_LWLLING" );
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
    emitFlag( result, emitted, flags.flags, OPTIX_GEOMETRY_FLAG_REPLACEABLE_VM_ARRAY, "OPTIX_GEOMETRY_FLAG_REPLACEABLE_VM_ARRAY" );
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
    if( !emitted )
    {
        result = "OPTIX_GEOMETRY_FLAG_NONE";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixGeometryFlagSet flags )
{
    return str << toString( flags );
}

struct OptixLwrveEndcapFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixLwrveEndcapFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_LWRVE_ENDCAP_DEFAULT, "OPTIX_LWRVE_ENDCAP_DEFAULT" );
    emitFlag( result, emitted, flags.flags, OPTIX_LWRVE_ENDCAP_ON, "OPTIX_LWRVE_ENDCAP_ON" );
    if( !emitted )
    {
        result = "0";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixLwrveEndcapFlagSet flags )
{
    return str << toString( flags );
}

#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
inline std::string toString( OptixDisplacedMicromeshFormat value )
{
    switch( value )
    {
        case OPTIX_DISPLACED_MICROMESH_FORMAT_NONE: return "OPTIX_DISPLACED_MICROMESH_FORMAT_NONE";
        case OPTIX_DISPLACED_MICROMESH_FORMAT_64_TRIS_64_BYTES: return "OPTIX_DISPLACED_MICROMESH_FORMAT_64_TRIS_64_BYTES";
        case OPTIX_DISPLACED_MICROMESH_FORMAT_256_TRIS_128_BYTES: return "OPTIX_DISPLACED_MICROMESH_FORMAT_256_TRIS_128_BYTES";
        case OPTIX_DISPLACED_MICROMESH_FORMAT_1024_TRIS_128_BYTES: return "OPTIX_DISPLACED_MICROMESH_FORMAT_1024_TRIS_128_BYTES";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixDisplacedMicromeshFormat value )
{
    return str << toString( value );
}
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )

inline std::string toString( OptixTraversableType value )
{
    switch( value )
    {
        case OPTIX_TRAVERSABLE_TYPE_STATIC_TRANSFORM: return "OPTIX_TRAVERSABLE_TYPE_STATIC_TRANSFORM";
        case OPTIX_TRAVERSABLE_TYPE_MATRIX_MOTION_TRANSFORM: return "OPTIX_TRAVERSABLE_TYPE_MATRIX_MOTION_TRANSFORM";
        case OPTIX_TRAVERSABLE_TYPE_SRT_MOTION_TRANSFORM: return "OPTIX_TRAVERSABLE_TYPE_SRT_MOTION_TRANSFORM";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixTraversableType value )
{
    return str << toString( value );
}

inline std::string toString( OptixResult value )
{
    return optixGetErrorName( value );
}

inline std::ostream& operator<<( std::ostream& str, OptixResult value )
{
    return str << toString( value );
}

#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
struct OptixDisplacedMicromeshFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixDisplacedMicromeshFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_DISPLACED_MICROMESH_FLAG_PREFER_FAST_TRACE, "OPTIX_DISPLACED_MICROMESH_FLAG_PREFER_FAST_TRACE" );
    emitFlag( result, emitted, flags.flags, OPTIX_DISPLACED_MICROMESH_FLAG_PREFER_FAST_BUILD, "OPTIX_DISPLACED_MICROMESH_FLAG_PREFER_FAST_BUILD" );
    if( !emitted )
    {
        result = "OPTIX_DISPLACED_MICROMESH_FLAG_NONE";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixDisplacedMicromeshFlagSet flags )
{
    return str << toString( flags );
}
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )

inline std::string toString( OptixDenoiserModelKind value )
{
    switch( value )
    {
        case OPTIX_DENOISER_MODEL_KIND_LDR: return "OPTIX_DENOISER_MODEL_KIND_LDR";
        case OPTIX_DENOISER_MODEL_KIND_HDR: return "OPTIX_DENOISER_MODEL_KIND_HDR";
        case OPTIX_DENOISER_MODEL_KIND_AOV: return "OPTIX_DENOISER_MODEL_KIND_AOV";
        case OPTIX_DENOISER_MODEL_KIND_TEMPORAL: return "OPTIX_DENOISER_MODEL_KIND_TEMPORAL";
        case OPTIX_DENOISER_MODEL_KIND_TEMPORAL_AOV: return "OPTIX_DENOISER_MODEL_KIND_TEMPORAL_AOV";
        case OPTIX_DENOISER_MODEL_KIND_UPSCALE2X: return "OPTIX_DENOISER_MODEL_KIND_UPSCALE2X";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixDenoiserModelKind value )
{
    return str << toString( value );
}

#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
struct OptixDisplacementPrimitiveFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixDisplacementPrimitiveFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_DISPLACED_MICROMESH_PRIMITIVE_FLAG_DECIMATE_01, "OPTIX_DISPLACED_MICROMESH_PRIMITIVE_FLAG_DECIMATE_01" );
    emitFlag( result, emitted, flags.flags, OPTIX_DISPLACED_MICROMESH_PRIMITIVE_FLAG_DECIMATE_12, "OPTIX_DISPLACED_MICROMESH_PRIMITIVE_FLAG_DECIMATE_12" );
    emitFlag( result, emitted, flags.flags, OPTIX_DISPLACED_MICROMESH_PRIMITIVE_FLAG_DECIMATE_20, "OPTIX_DISPLACED_MICROMESH_PRIMITIVE_FLAG_DECIMATE_20" );
    if( !emitted )
    {
        result = "0";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixDisplacementPrimitiveFlagSet flags )
{
    return str << toString( flags );
}
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )

#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
inline std::string toString( OptixDisplacementBiasAndScaleFormat value )
{
    switch( value )
    {
        case OPTIX_DISPLACEMENT_BIAS_AND_SCALE_FORMAT_FLOAT: return "OPTIX_DISPLACEMENT_BIAS_AND_SCALE_FORMAT_FLOAT";
        case OPTIX_DISPLACEMENT_BIAS_AND_SCALE_FORMAT_HALF: return "OPTIX_DISPLACEMENT_BIAS_AND_SCALE_FORMAT_HALF";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixDisplacementBiasAndScaleFormat value )
{
    return str << toString( value );
}
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )

struct OptixRayFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixRayFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_RAY_FLAG_DISABLE_ANYHIT, "OPTIX_RAY_FLAG_DISABLE_ANYHIT" );
    emitFlag( result, emitted, flags.flags, OPTIX_RAY_FLAG_ENFORCE_ANYHIT, "OPTIX_RAY_FLAG_ENFORCE_ANYHIT" );
    emitFlag( result, emitted, flags.flags, OPTIX_RAY_FLAG_TERMINATE_ON_FIRST_HIT, "OPTIX_RAY_FLAG_TERMINATE_ON_FIRST_HIT" );
    emitFlag( result, emitted, flags.flags, OPTIX_RAY_FLAG_DISABLE_CLOSESTHIT, "OPTIX_RAY_FLAG_DISABLE_CLOSESTHIT" );
    emitFlag( result, emitted, flags.flags, OPTIX_RAY_FLAG_LWLL_BACK_FACING_TRIANGLES, "OPTIX_RAY_FLAG_LWLL_BACK_FACING_TRIANGLES" );
    emitFlag( result, emitted, flags.flags, OPTIX_RAY_FLAG_LWLL_FRONT_FACING_TRIANGLES, "OPTIX_RAY_FLAG_LWLL_FRONT_FACING_TRIANGLES" );
    emitFlag( result, emitted, flags.flags, OPTIX_RAY_FLAG_LWLL_DISABLED_ANYHIT, "OPTIX_RAY_FLAG_LWLL_DISABLED_ANYHIT" );
    emitFlag( result, emitted, flags.flags, OPTIX_RAY_FLAG_LWLL_ENFORCED_ANYHIT, "OPTIX_RAY_FLAG_LWLL_ENFORCED_ANYHIT" );
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
    emitFlag( result, emitted, flags.flags, OPTIX_RAY_FLAG_FORCE_VM_2_STATE, "OPTIX_RAY_FLAG_FORCE_VM_2_STATE" );
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
    if( !emitted )
    {
        result = "OPTIX_RAY_FLAG_NONE";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixRayFlagSet flags )
{
    return str << toString( flags );
}

inline std::string toString( OptixModuleCompileState value )
{
    switch( value )
    {
        case OPTIX_MODULE_COMPILE_STATE_NOT_STARTED: return "OPTIX_MODULE_COMPILE_STATE_NOT_STARTED";
        case OPTIX_MODULE_COMPILE_STATE_STARTED: return "OPTIX_MODULE_COMPILE_STATE_STARTED";
        case OPTIX_MODULE_COMPILE_STATE_IMPENDING_FAILURE: return "OPTIX_MODULE_COMPILE_STATE_IMPENDING_FAILURE";
        case OPTIX_MODULE_COMPILE_STATE_FAILED: return "OPTIX_MODULE_COMPILE_STATE_FAILED";
        case OPTIX_MODULE_COMPILE_STATE_COMPLETED: return "OPTIX_MODULE_COMPILE_STATE_COMPLETED";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixModuleCompileState value )
{
    return str << toString( value );
}

inline std::string toString( OptixIndicesFormat value )
{
    switch( value )
    {
        case OPTIX_INDICES_FORMAT_NONE: return "OPTIX_INDICES_FORMAT_NONE";
#if defined( OPTIX_OPTIONAL_FEATURE_OPTIX7_INTERNAL_DOLWMENTATION )
        case OPTIX_INDICES_FORMAT_UNSIGNED_BYTE3: return "OPTIX_INDICES_FORMAT_UNSIGNED_BYTE3";
#endif // defined( OPTIX_OPTIONAL_FEATURE_OPTIX7_INTERNAL_DOLWMENTATION )
        case OPTIX_INDICES_FORMAT_UNSIGNED_SHORT3: return "OPTIX_INDICES_FORMAT_UNSIGNED_SHORT3";
        case OPTIX_INDICES_FORMAT_UNSIGNED_INT3: return "OPTIX_INDICES_FORMAT_UNSIGNED_INT3";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixIndicesFormat value )
{
    return str << toString( value );
}

struct OptixMotionFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixMotionFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_MOTION_FLAG_START_VANISH, "OPTIX_MOTION_FLAG_START_VANISH" );
    emitFlag( result, emitted, flags.flags, OPTIX_MOTION_FLAG_END_VANISH, "OPTIX_MOTION_FLAG_END_VANISH" );
    if( !emitted )
    {
        result = "OPTIX_MOTION_FLAG_NONE";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixMotionFlagSet flags )
{
    return str << toString( flags );
}

inline std::string toString( OptixTransformFormat value )
{
    switch( value )
    {
        case OPTIX_TRANSFORM_FORMAT_NONE: return "OPTIX_TRANSFORM_FORMAT_NONE";
        case OPTIX_TRANSFORM_FORMAT_MATRIX_FLOAT12: return "OPTIX_TRANSFORM_FORMAT_MATRIX_FLOAT12";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixTransformFormat value )
{
    return str << toString( value );
}

#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
inline std::string toString( OptixVisibilityMapFormat value )
{
    switch( value )
    {
        case OPTIX_VISIBILITY_MAP_FORMAT_NONE: return "OPTIX_VISIBILITY_MAP_FORMAT_NONE";
        case OPTIX_VISIBILITY_MAP_FORMAT_2_STATE: return "OPTIX_VISIBILITY_MAP_FORMAT_2_STATE";
        case OPTIX_VISIBILITY_MAP_FORMAT_4_STATE: return "OPTIX_VISIBILITY_MAP_FORMAT_4_STATE";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixVisibilityMapFormat value )
{
    return str << toString( value );
}
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )

struct OptixInstanceFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixInstanceFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_INSTANCE_FLAG_DISABLE_TRIANGLE_FACE_LWLLING, "OPTIX_INSTANCE_FLAG_DISABLE_TRIANGLE_FACE_LWLLING" );
    emitFlag( result, emitted, flags.flags, OPTIX_INSTANCE_FLAG_FLIP_TRIANGLE_FACING, "OPTIX_INSTANCE_FLAG_FLIP_TRIANGLE_FACING" );
    emitFlag( result, emitted, flags.flags, OPTIX_INSTANCE_FLAG_DISABLE_ANYHIT, "OPTIX_INSTANCE_FLAG_DISABLE_ANYHIT" );
    emitFlag( result, emitted, flags.flags, OPTIX_INSTANCE_FLAG_ENFORCE_ANYHIT, "OPTIX_INSTANCE_FLAG_ENFORCE_ANYHIT" );
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
    emitFlag( result, emitted, flags.flags, OPTIX_INSTANCE_FLAG_FORCE_VM_2_STATE, "OPTIX_INSTANCE_FLAG_FORCE_VM_2_STATE" );
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
    emitFlag( result, emitted, flags.flags, OPTIX_INSTANCE_FLAG_DISABLE_VMS, "OPTIX_INSTANCE_FLAG_DISABLE_VMS" );
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
    if( !emitted )
    {
        result = "OPTIX_INSTANCE_FLAG_NONE";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixInstanceFlagSet flags )
{
    return str << toString( flags );
}

inline std::string toString( OptixBuildInputType value )
{
    switch( value )
    {
        case OPTIX_BUILD_INPUT_TYPE_TRIANGLES: return "OPTIX_BUILD_INPUT_TYPE_TRIANGLES";
        case OPTIX_BUILD_INPUT_TYPE_LWSTOM_PRIMITIVES: return "OPTIX_BUILD_INPUT_TYPE_LWSTOM_PRIMITIVES";
        case OPTIX_BUILD_INPUT_TYPE_INSTANCES: return "OPTIX_BUILD_INPUT_TYPE_INSTANCES";
        case OPTIX_BUILD_INPUT_TYPE_INSTANCE_POINTERS: return "OPTIX_BUILD_INPUT_TYPE_INSTANCE_POINTERS";
        case OPTIX_BUILD_INPUT_TYPE_LWRVES: return "OPTIX_BUILD_INPUT_TYPE_LWRVES";
        case OPTIX_BUILD_INPUT_TYPE_SPHERES: return "OPTIX_BUILD_INPUT_TYPE_SPHERES";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixBuildInputType value )
{
    return str << toString( value );
}

inline std::string toString( OptixQueryFunctionTableOptions value )
{
    switch( value )
    {
        case OPTIX_QUERY_FUNCTION_TABLE_OPTION_DUMMY: return "OPTIX_QUERY_FUNCTION_TABLE_OPTION_DUMMY";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixQueryFunctionTableOptions value )
{
    return str << toString( value );
}

inline std::string toString( OptixDenoiserAlphaMode value )
{
    switch( value )
    {
        case OPTIX_DENOISER_ALPHA_MODE_COPY: return "OPTIX_DENOISER_ALPHA_MODE_COPY";
        case OPTIX_DENOISER_ALPHA_MODE_ALPHA_AS_AOV: return "OPTIX_DENOISER_ALPHA_MODE_ALPHA_AS_AOV";
        case OPTIX_DENOISER_ALPHA_MODE_FULL_DENOISE_PASS: return "OPTIX_DENOISER_ALPHA_MODE_FULL_DENOISE_PASS";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixDenoiserAlphaMode value )
{
    return str << toString( value );
}

inline std::string toString( OptixBuildOperation value )
{
    switch( value )
    {
        case OPTIX_BUILD_OPERATION_BUILD: return "OPTIX_BUILD_OPERATION_BUILD";
        case OPTIX_BUILD_OPERATION_UPDATE: return "OPTIX_BUILD_OPERATION_UPDATE";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixBuildOperation value )
{
    return str << toString( value );
}

inline std::string toString( OptixPrimitiveType value )
{
    switch( value )
    {
        case OPTIX_PRIMITIVE_TYPE_LWSTOM: return "OPTIX_PRIMITIVE_TYPE_LWSTOM";
        case OPTIX_PRIMITIVE_TYPE_ROUND_QUADRATIC_BSPLINE: return "OPTIX_PRIMITIVE_TYPE_ROUND_QUADRATIC_BSPLINE";
        case OPTIX_PRIMITIVE_TYPE_ROUND_LWBIC_BSPLINE: return "OPTIX_PRIMITIVE_TYPE_ROUND_LWBIC_BSPLINE";
        case OPTIX_PRIMITIVE_TYPE_ROUND_LINEAR: return "OPTIX_PRIMITIVE_TYPE_ROUND_LINEAR";
        case OPTIX_PRIMITIVE_TYPE_ROUND_CATMULLROM: return "OPTIX_PRIMITIVE_TYPE_ROUND_CATMULLROM";
        case OPTIX_PRIMITIVE_TYPE_SPHERE: return "OPTIX_PRIMITIVE_TYPE_SPHERE";
        case OPTIX_PRIMITIVE_TYPE_TRIANGLE: return "OPTIX_PRIMITIVE_TYPE_TRIANGLE";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixPrimitiveType value )
{
    return str << toString( value );
}

inline std::string toString( OptixDeviceProperty value )
{
    switch( value )
    {
        case OPTIX_DEVICE_PROPERTY_LIMIT_MAX_TRACE_DEPTH: return "OPTIX_DEVICE_PROPERTY_LIMIT_MAX_TRACE_DEPTH";
        case OPTIX_DEVICE_PROPERTY_LIMIT_MAX_TRAVERSABLE_GRAPH_DEPTH: return "OPTIX_DEVICE_PROPERTY_LIMIT_MAX_TRAVERSABLE_GRAPH_DEPTH";
        case OPTIX_DEVICE_PROPERTY_LIMIT_MAX_PRIMITIVES_PER_GAS: return "OPTIX_DEVICE_PROPERTY_LIMIT_MAX_PRIMITIVES_PER_GAS";
        case OPTIX_DEVICE_PROPERTY_LIMIT_MAX_INSTANCES_PER_IAS: return "OPTIX_DEVICE_PROPERTY_LIMIT_MAX_INSTANCES_PER_IAS";
        case OPTIX_DEVICE_PROPERTY_RTCORE_VERSION: return "OPTIX_DEVICE_PROPERTY_RTCORE_VERSION";
        case OPTIX_DEVICE_PROPERTY_LIMIT_MAX_INSTANCE_ID: return "OPTIX_DEVICE_PROPERTY_LIMIT_MAX_INSTANCE_ID";
        case OPTIX_DEVICE_PROPERTY_LIMIT_NUM_BITS_INSTANCE_VISIBILITY_MASK: return "OPTIX_DEVICE_PROPERTY_LIMIT_NUM_BITS_INSTANCE_VISIBILITY_MASK";
        case OPTIX_DEVICE_PROPERTY_LIMIT_MAX_SBT_RECORDS_PER_GAS: return "OPTIX_DEVICE_PROPERTY_LIMIT_MAX_SBT_RECORDS_PER_GAS";
        case OPTIX_DEVICE_PROPERTY_LIMIT_MAX_SBT_OFFSET: return "OPTIX_DEVICE_PROPERTY_LIMIT_MAX_SBT_OFFSET";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixDeviceProperty value )
{
    return str << toString( value );
}

inline std::string toString( OptixPayloadSemantics value )
{
    switch( value )
    {
        case OPTIX_PAYLOAD_SEMANTICS_TRACE_CALLER_NONE: return "OPTIX_PAYLOAD_SEMANTICS_TRACE_CALLER_NONE";
        case OPTIX_PAYLOAD_SEMANTICS_TRACE_CALLER_READ: return "OPTIX_PAYLOAD_SEMANTICS_TRACE_CALLER_READ";
        case OPTIX_PAYLOAD_SEMANTICS_TRACE_CALLER_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_TRACE_CALLER_WRITE";
        case OPTIX_PAYLOAD_SEMANTICS_TRACE_CALLER_READ_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_TRACE_CALLER_READ_WRITE";
        case OPTIX_PAYLOAD_SEMANTICS_CH_READ: return "OPTIX_PAYLOAD_SEMANTICS_CH_READ";
        case OPTIX_PAYLOAD_SEMANTICS_CH_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_CH_WRITE";
        case OPTIX_PAYLOAD_SEMANTICS_CH_READ_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_CH_READ_WRITE";
        case OPTIX_PAYLOAD_SEMANTICS_MS_READ: return "OPTIX_PAYLOAD_SEMANTICS_MS_READ";
        case OPTIX_PAYLOAD_SEMANTICS_MS_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_MS_WRITE";
        case OPTIX_PAYLOAD_SEMANTICS_MS_READ_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_MS_READ_WRITE";
        case OPTIX_PAYLOAD_SEMANTICS_AH_READ: return "OPTIX_PAYLOAD_SEMANTICS_AH_READ";
        case OPTIX_PAYLOAD_SEMANTICS_AH_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_AH_WRITE";
        case OPTIX_PAYLOAD_SEMANTICS_AH_READ_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_AH_READ_WRITE";
        case OPTIX_PAYLOAD_SEMANTICS_IS_READ: return "OPTIX_PAYLOAD_SEMANTICS_IS_READ";
        case OPTIX_PAYLOAD_SEMANTICS_IS_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_IS_WRITE";
        case OPTIX_PAYLOAD_SEMANTICS_IS_READ_WRITE: return "OPTIX_PAYLOAD_SEMANTICS_IS_READ_WRITE";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixPayloadSemantics value )
{
    return str << toString( value );
}

struct OptixTraversableGraphFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixTraversableGraphFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_ANY, "OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_ANY" );
    emitFlag( result, emitted, flags.flags, OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_GAS, "OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_GAS" );
    emitFlag( result, emitted, flags.flags, OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_LEVEL_INSTANCING, "OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_LEVEL_INSTANCING" );
    if( !emitted )
    {
        result = "0";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixTraversableGraphFlagSet flags )
{
    return str << toString( flags );
}

#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
inline std::string toString( OptixMicromeshPropertyType value )
{
    switch( value )
    {
        case OPTIX_MICROMESH_PROPERTY_TYPE_LWRRENT_SIZE: return "OPTIX_MICROMESH_PROPERTY_TYPE_LWRRENT_SIZE";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixMicromeshPropertyType value )
{
    return str << toString( value );
}
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )

struct OptixPrimitiveTypeFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixPrimitiveTypeFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_PRIMITIVE_TYPE_FLAGS_LWSTOM, "OPTIX_PRIMITIVE_TYPE_FLAGS_LWSTOM" );
    emitFlag( result, emitted, flags.flags, OPTIX_PRIMITIVE_TYPE_FLAGS_ROUND_QUADRATIC_BSPLINE, "OPTIX_PRIMITIVE_TYPE_FLAGS_ROUND_QUADRATIC_BSPLINE" );
    emitFlag( result, emitted, flags.flags, OPTIX_PRIMITIVE_TYPE_FLAGS_ROUND_LWBIC_BSPLINE, "OPTIX_PRIMITIVE_TYPE_FLAGS_ROUND_LWBIC_BSPLINE" );
    emitFlag( result, emitted, flags.flags, OPTIX_PRIMITIVE_TYPE_FLAGS_ROUND_LINEAR, "OPTIX_PRIMITIVE_TYPE_FLAGS_ROUND_LINEAR" );
    emitFlag( result, emitted, flags.flags, OPTIX_PRIMITIVE_TYPE_FLAGS_ROUND_CATMULLROM, "OPTIX_PRIMITIVE_TYPE_FLAGS_ROUND_CATMULLROM" );
#if defined( OPTIX_OPTIONAL_FEATURE_OPTIX7_RIBBONS )
    emitFlag( result, emitted, flags.flags, OPTIX_PRIMITIVE_TYPE_FLAGS_RIBBON, "OPTIX_PRIMITIVE_TYPE_FLAGS_RIBBON" );
#endif // defined( OPTIX_OPTIONAL_FEATURE_OPTIX7_RIBBONS )
    emitFlag( result, emitted, flags.flags, OPTIX_PRIMITIVE_TYPE_FLAGS_SPHERE, "OPTIX_PRIMITIVE_TYPE_FLAGS_SPHERE" );
    emitFlag( result, emitted, flags.flags, OPTIX_PRIMITIVE_TYPE_FLAGS_TRIANGLE, "OPTIX_PRIMITIVE_TYPE_FLAGS_TRIANGLE" );
    if( !emitted )
    {
        result = "0";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixPrimitiveTypeFlagSet flags )
{
    return str << toString( flags );
}

inline std::string toString( OptixPixelFormat value )
{
    switch( value )
    {
        case OPTIX_PIXEL_FORMAT_HALF2: return "OPTIX_PIXEL_FORMAT_HALF2";
        case OPTIX_PIXEL_FORMAT_HALF3: return "OPTIX_PIXEL_FORMAT_HALF3";
        case OPTIX_PIXEL_FORMAT_HALF4: return "OPTIX_PIXEL_FORMAT_HALF4";
        case OPTIX_PIXEL_FORMAT_FLOAT2: return "OPTIX_PIXEL_FORMAT_FLOAT2";
        case OPTIX_PIXEL_FORMAT_FLOAT3: return "OPTIX_PIXEL_FORMAT_FLOAT3";
        case OPTIX_PIXEL_FORMAT_FLOAT4: return "OPTIX_PIXEL_FORMAT_FLOAT4";
        case OPTIX_PIXEL_FORMAT_UCHAR3: return "OPTIX_PIXEL_FORMAT_UCHAR3";
        case OPTIX_PIXEL_FORMAT_UCHAR4: return "OPTIX_PIXEL_FORMAT_UCHAR4";
        case OPTIX_PIXEL_FORMAT_INTERNAL_GUIDE_LAYER: return "OPTIX_PIXEL_FORMAT_INTERNAL_GUIDE_LAYER";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixPixelFormat value )
{
    return str << toString( value );
}

inline std::string toString( OptixDeviceContextValidationMode value )
{
    switch( value )
    {
        case OPTIX_DEVICE_CONTEXT_VALIDATION_MODE_OFF: return "OPTIX_DEVICE_CONTEXT_VALIDATION_MODE_OFF";
        case OPTIX_DEVICE_CONTEXT_VALIDATION_MODE_ALL: return "OPTIX_DEVICE_CONTEXT_VALIDATION_MODE_ALL";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixDeviceContextValidationMode value )
{
    return str << toString( value );
}

inline std::string toString( OptixTransformType value )
{
    switch( value )
    {
        case OPTIX_TRANSFORM_TYPE_NONE: return "OPTIX_TRANSFORM_TYPE_NONE";
        case OPTIX_TRANSFORM_TYPE_STATIC_TRANSFORM: return "OPTIX_TRANSFORM_TYPE_STATIC_TRANSFORM";
        case OPTIX_TRANSFORM_TYPE_MATRIX_MOTION_TRANSFORM: return "OPTIX_TRANSFORM_TYPE_MATRIX_MOTION_TRANSFORM";
        case OPTIX_TRANSFORM_TYPE_SRT_MOTION_TRANSFORM: return "OPTIX_TRANSFORM_TYPE_SRT_MOTION_TRANSFORM";
        case OPTIX_TRANSFORM_TYPE_INSTANCE: return "OPTIX_TRANSFORM_TYPE_INSTANCE";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixTransformType value )
{
    return str << toString( value );
}

struct OptixBuildFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixBuildFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_ALLOW_UPDATE, "OPTIX_BUILD_FLAG_ALLOW_UPDATE" );
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_ALLOW_COMPACTION, "OPTIX_BUILD_FLAG_ALLOW_COMPACTION" );
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_PREFER_FAST_TRACE, "OPTIX_BUILD_FLAG_PREFER_FAST_TRACE" );
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_PREFER_FAST_BUILD, "OPTIX_BUILD_FLAG_PREFER_FAST_BUILD" );
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_ALLOW_RANDOM_VERTEX_ACCESS, "OPTIX_BUILD_FLAG_ALLOW_RANDOM_VERTEX_ACCESS" );
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_ALLOW_RANDOM_INSTANCE_ACCESS, "OPTIX_BUILD_FLAG_ALLOW_RANDOM_INSTANCE_ACCESS" );
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_ALLOW_VM_UPDATE, "OPTIX_BUILD_FLAG_ALLOW_VM_UPDATE" );
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_ALLOW_DISABLE_VMS, "OPTIX_BUILD_FLAG_ALLOW_DISABLE_VMS" );
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_ALLOW_DMM_UPDATE, "OPTIX_BUILD_FLAG_ALLOW_DMM_UPDATE" );
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_IAS_REFERENCES_GAS_WITH_DMM, "OPTIX_BUILD_FLAG_IAS_REFERENCES_GAS_WITH_DMM" );
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
    emitFlag( result, emitted, flags.flags, OPTIX_BUILD_FLAG_IAS_USES_VM_REPLACEMENTS, "OPTIX_BUILD_FLAG_IAS_USES_VM_REPLACEMENTS" );
#endif // LWCFG(GLOBAL_FEATURE_GR1354_MICROMESH)
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
    if( !emitted )
    {
        result = "OPTIX_BUILD_FLAG_NONE";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixBuildFlagSet flags )
{
    return str << toString( flags );
}

inline std::string toString( OptixCompileOptimizationLevel value )
{
    switch( value )
    {
        case OPTIX_COMPILE_OPTIMIZATION_DEFAULT: return "OPTIX_COMPILE_OPTIMIZATION_DEFAULT";
        case OPTIX_COMPILE_OPTIMIZATION_LEVEL_0: return "OPTIX_COMPILE_OPTIMIZATION_LEVEL_0";
        case OPTIX_COMPILE_OPTIMIZATION_LEVEL_1: return "OPTIX_COMPILE_OPTIMIZATION_LEVEL_1";
        case OPTIX_COMPILE_OPTIMIZATION_LEVEL_2: return "OPTIX_COMPILE_OPTIMIZATION_LEVEL_2";
        case OPTIX_COMPILE_OPTIMIZATION_LEVEL_3: return "OPTIX_COMPILE_OPTIMIZATION_LEVEL_3";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixCompileOptimizationLevel value )
{
    return str << toString( value );
}

inline std::string toString( OptixAccelPropertyType value )
{
    switch( value )
    {
        case OPTIX_PROPERTY_TYPE_COMPACTED_SIZE: return "OPTIX_PROPERTY_TYPE_COMPACTED_SIZE";
        case OPTIX_PROPERTY_TYPE_AABBS: return "OPTIX_PROPERTY_TYPE_AABBS";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixAccelPropertyType value )
{
    return str << toString( value );
}

#if defined( OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE )
inline std::string toString( OptixDeviceAPICallCoverageID value )
{
    switch( value )
    {
        case OPTIX_Trace_0_COVERAGE_ID: return "OPTIX_Trace_0_COVERAGE_ID";
        case OPTIX_Trace_1_COVERAGE_ID: return "OPTIX_Trace_1_COVERAGE_ID";
        case OPTIX_Trace_2_COVERAGE_ID: return "OPTIX_Trace_2_COVERAGE_ID";
        case OPTIX_Trace_3_COVERAGE_ID: return "OPTIX_Trace_3_COVERAGE_ID";
        case OPTIX_Trace_4_COVERAGE_ID: return "OPTIX_Trace_4_COVERAGE_ID";
        case OPTIX_Trace_5_COVERAGE_ID: return "OPTIX_Trace_5_COVERAGE_ID";
        case OPTIX_Trace_6_COVERAGE_ID: return "OPTIX_Trace_6_COVERAGE_ID";
        case OPTIX_Trace_7_COVERAGE_ID: return "OPTIX_Trace_7_COVERAGE_ID";
        case OPTIX_Trace_8_COVERAGE_ID: return "OPTIX_Trace_8_COVERAGE_ID";
        case OPTIX_Trace_9_COVERAGE_ID: return "OPTIX_Trace_9_COVERAGE_ID";
        case OPTIX_Trace_10_COVERAGE_ID: return "OPTIX_Trace_10_COVERAGE_ID";
        case OPTIX_Trace_11_COVERAGE_ID: return "OPTIX_Trace_11_COVERAGE_ID";
        case OPTIX_Trace_12_COVERAGE_ID: return "OPTIX_Trace_12_COVERAGE_ID";
        case OPTIX_Trace_13_COVERAGE_ID: return "OPTIX_Trace_13_COVERAGE_ID";
        case OPTIX_Trace_14_COVERAGE_ID: return "OPTIX_Trace_14_COVERAGE_ID";
        case OPTIX_Trace_15_COVERAGE_ID: return "OPTIX_Trace_15_COVERAGE_ID";
        case OPTIX_Trace_16_COVERAGE_ID: return "OPTIX_Trace_16_COVERAGE_ID";
        case OPTIX_Trace_17_COVERAGE_ID: return "OPTIX_Trace_17_COVERAGE_ID";
        case OPTIX_Trace_18_COVERAGE_ID: return "OPTIX_Trace_18_COVERAGE_ID";
        case OPTIX_Trace_19_COVERAGE_ID: return "OPTIX_Trace_19_COVERAGE_ID";
        case OPTIX_Trace_20_COVERAGE_ID: return "OPTIX_Trace_20_COVERAGE_ID";
        case OPTIX_Trace_21_COVERAGE_ID: return "OPTIX_Trace_21_COVERAGE_ID";
        case OPTIX_Trace_22_COVERAGE_ID: return "OPTIX_Trace_22_COVERAGE_ID";
        case OPTIX_Trace_23_COVERAGE_ID: return "OPTIX_Trace_23_COVERAGE_ID";
        case OPTIX_Trace_24_COVERAGE_ID: return "OPTIX_Trace_24_COVERAGE_ID";
        case OPTIX_Trace_25_COVERAGE_ID: return "OPTIX_Trace_25_COVERAGE_ID";
        case OPTIX_Trace_26_COVERAGE_ID: return "OPTIX_Trace_26_COVERAGE_ID";
        case OPTIX_Trace_27_COVERAGE_ID: return "OPTIX_Trace_27_COVERAGE_ID";
        case OPTIX_Trace_28_COVERAGE_ID: return "OPTIX_Trace_28_COVERAGE_ID";
        case OPTIX_Trace_29_COVERAGE_ID: return "OPTIX_Trace_29_COVERAGE_ID";
        case OPTIX_Trace_30_COVERAGE_ID: return "OPTIX_Trace_30_COVERAGE_ID";
        case OPTIX_Trace_31_COVERAGE_ID: return "OPTIX_Trace_31_COVERAGE_ID";
        case OPTIX_Trace_32_COVERAGE_ID: return "OPTIX_Trace_32_COVERAGE_ID";
        case OPTIX_Trace_Typed_0_COVERAGE_ID: return "OPTIX_Trace_Typed_0_COVERAGE_ID";
        case OPTIX_Trace_Typed_1_COVERAGE_ID: return "OPTIX_Trace_Typed_1_COVERAGE_ID";
        case OPTIX_Trace_Typed_2_COVERAGE_ID: return "OPTIX_Trace_Typed_2_COVERAGE_ID";
        case OPTIX_Trace_Typed_3_COVERAGE_ID: return "OPTIX_Trace_Typed_3_COVERAGE_ID";
        case OPTIX_Trace_Typed_4_COVERAGE_ID: return "OPTIX_Trace_Typed_4_COVERAGE_ID";
        case OPTIX_Trace_Typed_5_COVERAGE_ID: return "OPTIX_Trace_Typed_5_COVERAGE_ID";
        case OPTIX_Trace_Typed_6_COVERAGE_ID: return "OPTIX_Trace_Typed_6_COVERAGE_ID";
        case OPTIX_Trace_Typed_7_COVERAGE_ID: return "OPTIX_Trace_Typed_7_COVERAGE_ID";
        case OPTIX_Trace_Typed_8_COVERAGE_ID: return "OPTIX_Trace_Typed_8_COVERAGE_ID";
        case OPTIX_Trace_Typed_9_COVERAGE_ID: return "OPTIX_Trace_Typed_9_COVERAGE_ID";
        case OPTIX_Trace_Typed_10_COVERAGE_ID: return "OPTIX_Trace_Typed_10_COVERAGE_ID";
        case OPTIX_Trace_Typed_11_COVERAGE_ID: return "OPTIX_Trace_Typed_11_COVERAGE_ID";
        case OPTIX_Trace_Typed_12_COVERAGE_ID: return "OPTIX_Trace_Typed_12_COVERAGE_ID";
        case OPTIX_Trace_Typed_13_COVERAGE_ID: return "OPTIX_Trace_Typed_13_COVERAGE_ID";
        case OPTIX_Trace_Typed_14_COVERAGE_ID: return "OPTIX_Trace_Typed_14_COVERAGE_ID";
        case OPTIX_Trace_Typed_15_COVERAGE_ID: return "OPTIX_Trace_Typed_15_COVERAGE_ID";
        case OPTIX_Trace_Typed_16_COVERAGE_ID: return "OPTIX_Trace_Typed_16_COVERAGE_ID";
        case OPTIX_Trace_Typed_17_COVERAGE_ID: return "OPTIX_Trace_Typed_17_COVERAGE_ID";
        case OPTIX_Trace_Typed_18_COVERAGE_ID: return "OPTIX_Trace_Typed_18_COVERAGE_ID";
        case OPTIX_Trace_Typed_19_COVERAGE_ID: return "OPTIX_Trace_Typed_19_COVERAGE_ID";
        case OPTIX_Trace_Typed_20_COVERAGE_ID: return "OPTIX_Trace_Typed_20_COVERAGE_ID";
        case OPTIX_Trace_Typed_21_COVERAGE_ID: return "OPTIX_Trace_Typed_21_COVERAGE_ID";
        case OPTIX_Trace_Typed_22_COVERAGE_ID: return "OPTIX_Trace_Typed_22_COVERAGE_ID";
        case OPTIX_Trace_Typed_23_COVERAGE_ID: return "OPTIX_Trace_Typed_23_COVERAGE_ID";
        case OPTIX_Trace_Typed_24_COVERAGE_ID: return "OPTIX_Trace_Typed_24_COVERAGE_ID";
        case OPTIX_Trace_Typed_25_COVERAGE_ID: return "OPTIX_Trace_Typed_25_COVERAGE_ID";
        case OPTIX_Trace_Typed_26_COVERAGE_ID: return "OPTIX_Trace_Typed_26_COVERAGE_ID";
        case OPTIX_Trace_Typed_27_COVERAGE_ID: return "OPTIX_Trace_Typed_27_COVERAGE_ID";
        case OPTIX_Trace_Typed_28_COVERAGE_ID: return "OPTIX_Trace_Typed_28_COVERAGE_ID";
        case OPTIX_Trace_Typed_29_COVERAGE_ID: return "OPTIX_Trace_Typed_29_COVERAGE_ID";
        case OPTIX_Trace_Typed_30_COVERAGE_ID: return "OPTIX_Trace_Typed_30_COVERAGE_ID";
        case OPTIX_Trace_Typed_31_COVERAGE_ID: return "OPTIX_Trace_Typed_31_COVERAGE_ID";
        case OPTIX_Trace_Typed_32_COVERAGE_ID: return "OPTIX_Trace_Typed_32_COVERAGE_ID";
        case OPTIX_GetPayload_0_COVERAGE_ID: return "OPTIX_GetPayload_0_COVERAGE_ID";
        case OPTIX_GetPayload_1_COVERAGE_ID: return "OPTIX_GetPayload_1_COVERAGE_ID";
        case OPTIX_GetPayload_2_COVERAGE_ID: return "OPTIX_GetPayload_2_COVERAGE_ID";
        case OPTIX_GetPayload_3_COVERAGE_ID: return "OPTIX_GetPayload_3_COVERAGE_ID";
        case OPTIX_GetPayload_4_COVERAGE_ID: return "OPTIX_GetPayload_4_COVERAGE_ID";
        case OPTIX_GetPayload_5_COVERAGE_ID: return "OPTIX_GetPayload_5_COVERAGE_ID";
        case OPTIX_GetPayload_6_COVERAGE_ID: return "OPTIX_GetPayload_6_COVERAGE_ID";
        case OPTIX_GetPayload_7_COVERAGE_ID: return "OPTIX_GetPayload_7_COVERAGE_ID";
        case OPTIX_GetPayload_8_COVERAGE_ID: return "OPTIX_GetPayload_8_COVERAGE_ID";
        case OPTIX_GetPayload_9_COVERAGE_ID: return "OPTIX_GetPayload_9_COVERAGE_ID";
        case OPTIX_GetPayload_10_COVERAGE_ID: return "OPTIX_GetPayload_10_COVERAGE_ID";
        case OPTIX_GetPayload_11_COVERAGE_ID: return "OPTIX_GetPayload_11_COVERAGE_ID";
        case OPTIX_GetPayload_12_COVERAGE_ID: return "OPTIX_GetPayload_12_COVERAGE_ID";
        case OPTIX_GetPayload_13_COVERAGE_ID: return "OPTIX_GetPayload_13_COVERAGE_ID";
        case OPTIX_GetPayload_14_COVERAGE_ID: return "OPTIX_GetPayload_14_COVERAGE_ID";
        case OPTIX_GetPayload_15_COVERAGE_ID: return "OPTIX_GetPayload_15_COVERAGE_ID";
        case OPTIX_GetPayload_16_COVERAGE_ID: return "OPTIX_GetPayload_16_COVERAGE_ID";
        case OPTIX_GetPayload_17_COVERAGE_ID: return "OPTIX_GetPayload_17_COVERAGE_ID";
        case OPTIX_GetPayload_18_COVERAGE_ID: return "OPTIX_GetPayload_18_COVERAGE_ID";
        case OPTIX_GetPayload_19_COVERAGE_ID: return "OPTIX_GetPayload_19_COVERAGE_ID";
        case OPTIX_GetPayload_20_COVERAGE_ID: return "OPTIX_GetPayload_20_COVERAGE_ID";
        case OPTIX_GetPayload_21_COVERAGE_ID: return "OPTIX_GetPayload_21_COVERAGE_ID";
        case OPTIX_GetPayload_22_COVERAGE_ID: return "OPTIX_GetPayload_22_COVERAGE_ID";
        case OPTIX_GetPayload_23_COVERAGE_ID: return "OPTIX_GetPayload_23_COVERAGE_ID";
        case OPTIX_GetPayload_24_COVERAGE_ID: return "OPTIX_GetPayload_24_COVERAGE_ID";
        case OPTIX_GetPayload_25_COVERAGE_ID: return "OPTIX_GetPayload_25_COVERAGE_ID";
        case OPTIX_GetPayload_26_COVERAGE_ID: return "OPTIX_GetPayload_26_COVERAGE_ID";
        case OPTIX_GetPayload_27_COVERAGE_ID: return "OPTIX_GetPayload_27_COVERAGE_ID";
        case OPTIX_GetPayload_28_COVERAGE_ID: return "OPTIX_GetPayload_28_COVERAGE_ID";
        case OPTIX_GetPayload_29_COVERAGE_ID: return "OPTIX_GetPayload_29_COVERAGE_ID";
        case OPTIX_GetPayload_30_COVERAGE_ID: return "OPTIX_GetPayload_30_COVERAGE_ID";
        case OPTIX_GetPayload_31_COVERAGE_ID: return "OPTIX_GetPayload_31_COVERAGE_ID";
        case OPTIX_SetPayload_0_COVERAGE_ID: return "OPTIX_SetPayload_0_COVERAGE_ID";
        case OPTIX_SetPayload_1_COVERAGE_ID: return "OPTIX_SetPayload_1_COVERAGE_ID";
        case OPTIX_SetPayload_2_COVERAGE_ID: return "OPTIX_SetPayload_2_COVERAGE_ID";
        case OPTIX_SetPayload_3_COVERAGE_ID: return "OPTIX_SetPayload_3_COVERAGE_ID";
        case OPTIX_SetPayload_4_COVERAGE_ID: return "OPTIX_SetPayload_4_COVERAGE_ID";
        case OPTIX_SetPayload_5_COVERAGE_ID: return "OPTIX_SetPayload_5_COVERAGE_ID";
        case OPTIX_SetPayload_6_COVERAGE_ID: return "OPTIX_SetPayload_6_COVERAGE_ID";
        case OPTIX_SetPayload_7_COVERAGE_ID: return "OPTIX_SetPayload_7_COVERAGE_ID";
        case OPTIX_SetPayload_8_COVERAGE_ID: return "OPTIX_SetPayload_8_COVERAGE_ID";
        case OPTIX_SetPayload_9_COVERAGE_ID: return "OPTIX_SetPayload_9_COVERAGE_ID";
        case OPTIX_SetPayload_10_COVERAGE_ID: return "OPTIX_SetPayload_10_COVERAGE_ID";
        case OPTIX_SetPayload_11_COVERAGE_ID: return "OPTIX_SetPayload_11_COVERAGE_ID";
        case OPTIX_SetPayload_12_COVERAGE_ID: return "OPTIX_SetPayload_12_COVERAGE_ID";
        case OPTIX_SetPayload_13_COVERAGE_ID: return "OPTIX_SetPayload_13_COVERAGE_ID";
        case OPTIX_SetPayload_14_COVERAGE_ID: return "OPTIX_SetPayload_14_COVERAGE_ID";
        case OPTIX_SetPayload_15_COVERAGE_ID: return "OPTIX_SetPayload_15_COVERAGE_ID";
        case OPTIX_SetPayload_16_COVERAGE_ID: return "OPTIX_SetPayload_16_COVERAGE_ID";
        case OPTIX_SetPayload_17_COVERAGE_ID: return "OPTIX_SetPayload_17_COVERAGE_ID";
        case OPTIX_SetPayload_18_COVERAGE_ID: return "OPTIX_SetPayload_18_COVERAGE_ID";
        case OPTIX_SetPayload_19_COVERAGE_ID: return "OPTIX_SetPayload_19_COVERAGE_ID";
        case OPTIX_SetPayload_20_COVERAGE_ID: return "OPTIX_SetPayload_20_COVERAGE_ID";
        case OPTIX_SetPayload_21_COVERAGE_ID: return "OPTIX_SetPayload_21_COVERAGE_ID";
        case OPTIX_SetPayload_22_COVERAGE_ID: return "OPTIX_SetPayload_22_COVERAGE_ID";
        case OPTIX_SetPayload_23_COVERAGE_ID: return "OPTIX_SetPayload_23_COVERAGE_ID";
        case OPTIX_SetPayload_24_COVERAGE_ID: return "OPTIX_SetPayload_24_COVERAGE_ID";
        case OPTIX_SetPayload_25_COVERAGE_ID: return "OPTIX_SetPayload_25_COVERAGE_ID";
        case OPTIX_SetPayload_26_COVERAGE_ID: return "OPTIX_SetPayload_26_COVERAGE_ID";
        case OPTIX_SetPayload_27_COVERAGE_ID: return "OPTIX_SetPayload_27_COVERAGE_ID";
        case OPTIX_SetPayload_28_COVERAGE_ID: return "OPTIX_SetPayload_28_COVERAGE_ID";
        case OPTIX_SetPayload_29_COVERAGE_ID: return "OPTIX_SetPayload_29_COVERAGE_ID";
        case OPTIX_SetPayload_30_COVERAGE_ID: return "OPTIX_SetPayload_30_COVERAGE_ID";
        case OPTIX_SetPayload_31_COVERAGE_ID: return "OPTIX_SetPayload_31_COVERAGE_ID";
        case OPTIX_SetPayloadTypes_COVERAGE_ID: return "OPTIX_SetPayloadTypes_COVERAGE_ID";
        case OPTIX_UndefinedValue_COVERAGE_ID: return "OPTIX_UndefinedValue_COVERAGE_ID";
        case OPTIX_GetWorldRayOrigin_COVERAGE_ID: return "OPTIX_GetWorldRayOrigin_COVERAGE_ID";
        case OPTIX_GetWorldRayDirection_COVERAGE_ID: return "OPTIX_GetWorldRayDirection_COVERAGE_ID";
        case OPTIX_GetObjectRayOrigin_COVERAGE_ID: return "OPTIX_GetObjectRayOrigin_COVERAGE_ID";
        case OPTIX_GetObjectRayDirection_COVERAGE_ID: return "OPTIX_GetObjectRayDirection_COVERAGE_ID";
        case OPTIX_GetRayTmin_COVERAGE_ID: return "OPTIX_GetRayTmin_COVERAGE_ID";
        case OPTIX_GetRayTmax_COVERAGE_ID: return "OPTIX_GetRayTmax_COVERAGE_ID";
        case OPTIX_GetRayTime_COVERAGE_ID: return "OPTIX_GetRayTime_COVERAGE_ID";
        case OPTIX_GetRayFlags_COVERAGE_ID: return "OPTIX_GetRayFlags_COVERAGE_ID";
        case OPTIX_GetRayVisibilityMask_COVERAGE_ID: return "OPTIX_GetRayVisibilityMask_COVERAGE_ID";
        case OPTIX_GetInstanceTraversableFromIAS_COVERAGE_ID: return "OPTIX_GetInstanceTraversableFromIAS_COVERAGE_ID";
        case OPTIX_GetTriangleVertexData_COVERAGE_ID: return "OPTIX_GetTriangleVertexData_COVERAGE_ID";
#if !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
#if ( LWCFG( GLOBAL_FEATURE_GR1354_MICROMESH ) )
        case OPTIX_GetMicrotriangleVertexData_COVERAGE_ID: return "OPTIX_GetMicrotriangleVertexData_COVERAGE_ID";
#endif // ( LWCFG( GLOBAL_FEATURE_GR1354_MICROMESH ) )
#endif // !defined( OPTIX_OPTIONAL_FEATURE_EXTERNAL_BUILD )
        case OPTIX_GetGASTraversableHandle_COVERAGE_ID: return "OPTIX_GetGASTraversableHandle_COVERAGE_ID";
        case OPTIX_GetGASMotionTimeBegin_COVERAGE_ID: return "OPTIX_GetGASMotionTimeBegin_COVERAGE_ID";
        case OPTIX_GetGASMotionTimeEnd_COVERAGE_ID: return "OPTIX_GetGASMotionTimeEnd_COVERAGE_ID";
        case OPTIX_GetGASMotionStepCount_COVERAGE_ID: return "OPTIX_GetGASMotionStepCount_COVERAGE_ID";
        case OPTIX_GetWorldToObjectTransformMatrix_COVERAGE_ID: return "OPTIX_GetWorldToObjectTransformMatrix_COVERAGE_ID";
        case OPTIX_GetObjectToWorldTransformMatrix_COVERAGE_ID: return "OPTIX_GetObjectToWorldTransformMatrix_COVERAGE_ID";
        case OPTIX_TransformPointFromWorldToObjectSpace_COVERAGE_ID: return "OPTIX_TransformPointFromWorldToObjectSpace_COVERAGE_ID";
        case OPTIX_TransformVectorFromWorldToObjectSpace_COVERAGE_ID: return "OPTIX_TransformVectorFromWorldToObjectSpace_COVERAGE_ID";
        case OPTIX_TransformNormalFromWorldToObjectSpace_COVERAGE_ID: return "OPTIX_TransformNormalFromWorldToObjectSpace_COVERAGE_ID";
        case OPTIX_TransformPointFromObjectToWorldSpace_COVERAGE_ID: return "OPTIX_TransformPointFromObjectToWorldSpace_COVERAGE_ID";
        case OPTIX_TransformVectorFromObjectToWorldSpace_COVERAGE_ID: return "OPTIX_TransformVectorFromObjectToWorldSpace_COVERAGE_ID";
        case OPTIX_TransformNormalFromObjectToWorldSpace_COVERAGE_ID: return "OPTIX_TransformNormalFromObjectToWorldSpace_COVERAGE_ID";
        case OPTIX_GetTransformListSize_COVERAGE_ID: return "OPTIX_GetTransformListSize_COVERAGE_ID";
        case OPTIX_GetTransformListHandle_COVERAGE_ID: return "OPTIX_GetTransformListHandle_COVERAGE_ID";
        case OPTIX_GetTransformTypeFromHandle_COVERAGE_ID: return "OPTIX_GetTransformTypeFromHandle_COVERAGE_ID";
        case OPTIX_GetStaticTransformFromHandle_COVERAGE_ID: return "OPTIX_GetStaticTransformFromHandle_COVERAGE_ID";
        case OPTIX_GetSRTMotionTransformFromHandle_COVERAGE_ID: return "OPTIX_GetSRTMotionTransformFromHandle_COVERAGE_ID";
        case OPTIX_GetMatrixMotionTransformFromHandle_COVERAGE_ID: return "OPTIX_GetMatrixMotionTransformFromHandle_COVERAGE_ID";
        case OPTIX_GetInstanceIdFromHandle_COVERAGE_ID: return "OPTIX_GetInstanceIdFromHandle_COVERAGE_ID";
        case OPTIX_GetInstanceChildFromHandle_COVERAGE_ID: return "OPTIX_GetInstanceChildFromHandle_COVERAGE_ID";
        case OPTIX_GetInstanceTransformFromHandle_COVERAGE_ID: return "OPTIX_GetInstanceTransformFromHandle_COVERAGE_ID";
        case OPTIX_GetInstanceIlwerseTransformFromHandle_COVERAGE_ID: return "OPTIX_GetInstanceIlwerseTransformFromHandle_COVERAGE_ID";
        case OPTIX_ReportIntersection_0_COVERAGE_ID: return "OPTIX_ReportIntersection_0_COVERAGE_ID";
        case OPTIX_ReportIntersection_1_COVERAGE_ID: return "OPTIX_ReportIntersection_1_COVERAGE_ID";
        case OPTIX_ReportIntersection_2_COVERAGE_ID: return "OPTIX_ReportIntersection_2_COVERAGE_ID";
        case OPTIX_ReportIntersection_3_COVERAGE_ID: return "OPTIX_ReportIntersection_3_COVERAGE_ID";
        case OPTIX_ReportIntersection_4_COVERAGE_ID: return "OPTIX_ReportIntersection_4_COVERAGE_ID";
        case OPTIX_ReportIntersection_5_COVERAGE_ID: return "OPTIX_ReportIntersection_5_COVERAGE_ID";
        case OPTIX_ReportIntersection_6_COVERAGE_ID: return "OPTIX_ReportIntersection_6_COVERAGE_ID";
        case OPTIX_ReportIntersection_7_COVERAGE_ID: return "OPTIX_ReportIntersection_7_COVERAGE_ID";
        case OPTIX_ReportIntersection_8_COVERAGE_ID: return "OPTIX_ReportIntersection_8_COVERAGE_ID";
        case OPTIX_GetAttribute_0_COVERAGE_ID: return "OPTIX_GetAttribute_0_COVERAGE_ID";
        case OPTIX_GetAttribute_1_COVERAGE_ID: return "OPTIX_GetAttribute_1_COVERAGE_ID";
        case OPTIX_GetAttribute_2_COVERAGE_ID: return "OPTIX_GetAttribute_2_COVERAGE_ID";
        case OPTIX_GetAttribute_3_COVERAGE_ID: return "OPTIX_GetAttribute_3_COVERAGE_ID";
        case OPTIX_GetAttribute_4_COVERAGE_ID: return "OPTIX_GetAttribute_4_COVERAGE_ID";
        case OPTIX_GetAttribute_5_COVERAGE_ID: return "OPTIX_GetAttribute_5_COVERAGE_ID";
        case OPTIX_GetAttribute_6_COVERAGE_ID: return "OPTIX_GetAttribute_6_COVERAGE_ID";
        case OPTIX_GetAttribute_7_COVERAGE_ID: return "OPTIX_GetAttribute_7_COVERAGE_ID";
        case OPTIX_TerminateRay_COVERAGE_ID: return "OPTIX_TerminateRay_COVERAGE_ID";
        case OPTIX_IgnoreIntersection_COVERAGE_ID: return "OPTIX_IgnoreIntersection_COVERAGE_ID";
        case OPTIX_GetPrimitiveIndex_COVERAGE_ID: return "OPTIX_GetPrimitiveIndex_COVERAGE_ID";
        case OPTIX_GetSbtGASIndex_COVERAGE_ID: return "OPTIX_GetSbtGASIndex_COVERAGE_ID";
        case OPTIX_GetInstanceId_COVERAGE_ID: return "OPTIX_GetInstanceId_COVERAGE_ID";
        case OPTIX_GetInstanceIndex_COVERAGE_ID: return "OPTIX_GetInstanceIndex_COVERAGE_ID";
        case OPTIX_GetHitKind_COVERAGE_ID: return "OPTIX_GetHitKind_COVERAGE_ID";
        case OPTIX_IsTriangleHit_COVERAGE_ID: return "OPTIX_IsTriangleHit_COVERAGE_ID";
        case OPTIX_IsTriangleFrontFaceHit_COVERAGE_ID: return "OPTIX_IsTriangleFrontFaceHit_COVERAGE_ID";
        case OPTIX_IsTriangleBackFaceHit_COVERAGE_ID: return "OPTIX_IsTriangleBackFaceHit_COVERAGE_ID";
        case OPTIX_GetTriangleBarycentrics_COVERAGE_ID: return "OPTIX_GetTriangleBarycentrics_COVERAGE_ID";
        case OPTIX_GetLaunchIndex_COVERAGE_ID: return "OPTIX_GetLaunchIndex_COVERAGE_ID";
        case OPTIX_GetLaunchDimensions_COVERAGE_ID: return "OPTIX_GetLaunchDimensions_COVERAGE_ID";
        case OPTIX_GetSbtDataPointer_COVERAGE_ID: return "OPTIX_GetSbtDataPointer_COVERAGE_ID";
        case OPTIX_ThrowException_0_COVERAGE_ID: return "OPTIX_ThrowException_0_COVERAGE_ID";
        case OPTIX_ThrowException_1_COVERAGE_ID: return "OPTIX_ThrowException_1_COVERAGE_ID";
        case OPTIX_ThrowException_2_COVERAGE_ID: return "OPTIX_ThrowException_2_COVERAGE_ID";
        case OPTIX_ThrowException_3_COVERAGE_ID: return "OPTIX_ThrowException_3_COVERAGE_ID";
        case OPTIX_ThrowException_4_COVERAGE_ID: return "OPTIX_ThrowException_4_COVERAGE_ID";
        case OPTIX_ThrowException_5_COVERAGE_ID: return "OPTIX_ThrowException_5_COVERAGE_ID";
        case OPTIX_ThrowException_6_COVERAGE_ID: return "OPTIX_ThrowException_6_COVERAGE_ID";
        case OPTIX_ThrowException_7_COVERAGE_ID: return "OPTIX_ThrowException_7_COVERAGE_ID";
        case OPTIX_ThrowException_8_COVERAGE_ID: return "OPTIX_ThrowException_8_COVERAGE_ID";
        case OPTIX_GetExceptionCode_COVERAGE_ID: return "OPTIX_GetExceptionCode_COVERAGE_ID";
        case OPTIX_GetExceptionDetail_0_COVERAGE_ID: return "OPTIX_GetExceptionDetail_0_COVERAGE_ID";
        case OPTIX_GetExceptionDetail_1_COVERAGE_ID: return "OPTIX_GetExceptionDetail_1_COVERAGE_ID";
        case OPTIX_GetExceptionDetail_2_COVERAGE_ID: return "OPTIX_GetExceptionDetail_2_COVERAGE_ID";
        case OPTIX_GetExceptionDetail_3_COVERAGE_ID: return "OPTIX_GetExceptionDetail_3_COVERAGE_ID";
        case OPTIX_GetExceptionDetail_4_COVERAGE_ID: return "OPTIX_GetExceptionDetail_4_COVERAGE_ID";
        case OPTIX_GetExceptionDetail_5_COVERAGE_ID: return "OPTIX_GetExceptionDetail_5_COVERAGE_ID";
        case OPTIX_GetExceptionDetail_6_COVERAGE_ID: return "OPTIX_GetExceptionDetail_6_COVERAGE_ID";
        case OPTIX_GetExceptionDetail_7_COVERAGE_ID: return "OPTIX_GetExceptionDetail_7_COVERAGE_ID";
        case OPTIX_GetExceptionIlwalidTraversable_COVERAGE_ID: return "OPTIX_GetExceptionIlwalidTraversable_COVERAGE_ID";
        case OPTIX_GetExceptionIlwalidSbtOffset_COVERAGE_ID: return "OPTIX_GetExceptionIlwalidSbtOffset_COVERAGE_ID";
        case OPTIX_GetExceptionIlwalidRay_COVERAGE_ID: return "OPTIX_GetExceptionIlwalidRay_COVERAGE_ID";
        case OPTIX_GetExceptionParameterMismatch_COVERAGE_ID: return "OPTIX_GetExceptionParameterMismatch_COVERAGE_ID";
        case OPTIX_GetExceptionLineInfo_COVERAGE_ID: return "OPTIX_GetExceptionLineInfo_COVERAGE_ID";
        case OPTIX_DirectCall_COVERAGE_ID: return "OPTIX_DirectCall_COVERAGE_ID";
        case OPTIX_ContinuationCall_COVERAGE_ID: return "OPTIX_ContinuationCall_COVERAGE_ID";
        case OPTIX_GetLinearLwrveVertexData_COVERAGE_ID: return "OPTIX_GetLinearLwrveVertexData_COVERAGE_ID";
        case OPTIX_GetQuadraticBSplineVertexData_COVERAGE_ID: return "OPTIX_GetQuadraticBSplineVertexData_COVERAGE_ID";
        case OPTIX_GetLwbicBSplineVertexData_COVERAGE_ID: return "OPTIX_GetLwbicBSplineVertexData_COVERAGE_ID";
        case OPTIX_GetCatmullRomVertexData_COVERAGE_ID: return "OPTIX_GetCatmullRomVertexData_COVERAGE_ID";
        case OPTIX_GetSphereData_COVERAGE_ID: return "OPTIX_GetSphereData_COVERAGE_ID";
        case OPTIX_GetPrimitiveType_COVERAGE_ID: return "OPTIX_GetPrimitiveType_COVERAGE_ID";
        case OPTIX_IsBackFaceHit_COVERAGE_ID: return "OPTIX_IsBackFaceHit_COVERAGE_ID";
        case OPTIX_IsFrontFaceHit_COVERAGE_ID: return "OPTIX_IsFrontFaceHit_COVERAGE_ID";
        case OPTIX_GetPrimitiveTypeB_COVERAGE_ID: return "OPTIX_GetPrimitiveTypeB_COVERAGE_ID";
        case OPTIX_IsBackFaceHitB_COVERAGE_ID: return "OPTIX_IsBackFaceHitB_COVERAGE_ID";
        case OPTIX_IsFrontFaceHitB_COVERAGE_ID: return "OPTIX_IsFrontFaceHitB_COVERAGE_ID";
        case OPTIX_GetLwrveParameter_COVERAGE_ID: return "OPTIX_GetLwrveParameter_COVERAGE_ID";
        case OPTIX_Undefined_COVERAGE_ID: return "OPTIX_Undefined_COVERAGE_ID";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixDeviceAPICallCoverageID value )
{
    return str << toString( value );
}
#endif // defined( OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE )

inline std::string toString( OptixExceptionCodes value )
{
    switch( value )
    {
        case OPTIX_EXCEPTION_CODE_STACK_OVERFLOW: return "OPTIX_EXCEPTION_CODE_STACK_OVERFLOW";
        case OPTIX_EXCEPTION_CODE_TRACE_DEPTH_EXCEEDED: return "OPTIX_EXCEPTION_CODE_TRACE_DEPTH_EXCEEDED";
        case OPTIX_EXCEPTION_CODE_TRAVERSAL_DEPTH_EXCEEDED: return "OPTIX_EXCEPTION_CODE_TRAVERSAL_DEPTH_EXCEEDED";
        case OPTIX_EXCEPTION_CODE_TRAVERSAL_ILWALID_TRAVERSABLE: return "OPTIX_EXCEPTION_CODE_TRAVERSAL_ILWALID_TRAVERSABLE";
        case OPTIX_EXCEPTION_CODE_TRAVERSAL_ILWALID_MISS_SBT: return "OPTIX_EXCEPTION_CODE_TRAVERSAL_ILWALID_MISS_SBT";
        case OPTIX_EXCEPTION_CODE_TRAVERSAL_ILWALID_HIT_SBT: return "OPTIX_EXCEPTION_CODE_TRAVERSAL_ILWALID_HIT_SBT";
        case OPTIX_EXCEPTION_CODE_UNSUPPORTED_PRIMITIVE_TYPE: return "OPTIX_EXCEPTION_CODE_UNSUPPORTED_PRIMITIVE_TYPE";
        case OPTIX_EXCEPTION_CODE_ILWALID_RAY: return "OPTIX_EXCEPTION_CODE_ILWALID_RAY";
        case OPTIX_EXCEPTION_CODE_CALLABLE_PARAMETER_MISMATCH: return "OPTIX_EXCEPTION_CODE_CALLABLE_PARAMETER_MISMATCH";
        case OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH: return "OPTIX_EXCEPTION_CODE_BUILTIN_IS_MISMATCH";
        case OPTIX_EXCEPTION_CODE_CALLABLE_ILWALID_SBT: return "OPTIX_EXCEPTION_CODE_CALLABLE_ILWALID_SBT";
        case OPTIX_EXCEPTION_CODE_CALLABLE_NO_DC_SBT_RECORD: return "OPTIX_EXCEPTION_CODE_CALLABLE_NO_DC_SBT_RECORD";
        case OPTIX_EXCEPTION_CODE_CALLABLE_NO_CC_SBT_RECORD: return "OPTIX_EXCEPTION_CODE_CALLABLE_NO_CC_SBT_RECORD";
        case OPTIX_EXCEPTION_CODE_UNSUPPORTED_SINGLE_LEVEL_GAS: return "OPTIX_EXCEPTION_CODE_UNSUPPORTED_SINGLE_LEVEL_GAS";
        case OPTIX_EXCEPTION_CODE_ILWALID_VALUE_ARGUMENT_0: return "OPTIX_EXCEPTION_CODE_ILWALID_VALUE_ARGUMENT_0";
        case OPTIX_EXCEPTION_CODE_ILWALID_VALUE_ARGUMENT_1: return "OPTIX_EXCEPTION_CODE_ILWALID_VALUE_ARGUMENT_1";
        case OPTIX_EXCEPTION_CODE_ILWALID_VALUE_ARGUMENT_2: return "OPTIX_EXCEPTION_CODE_ILWALID_VALUE_ARGUMENT_2";
        case OPTIX_EXCEPTION_CODE_UNSUPPORTED_DATA_ACCESS: return "OPTIX_EXCEPTION_CODE_UNSUPPORTED_DATA_ACCESS";
        case OPTIX_EXCEPTION_CODE_PAYLOAD_TYPE_MISMATCH: return "OPTIX_EXCEPTION_CODE_PAYLOAD_TYPE_MISMATCH";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixExceptionCodes value )
{
    return str << toString( value );
}

struct OptixExceptionFlagSet
{
    unsigned int flags;
};

inline std::string toString( OptixExceptionFlagSet flags )
{
    bool emitted = false;
    std::string result;
    emitFlag( result, emitted, flags.flags, OPTIX_EXCEPTION_FLAG_STACK_OVERFLOW, "OPTIX_EXCEPTION_FLAG_STACK_OVERFLOW" );
    emitFlag( result, emitted, flags.flags, OPTIX_EXCEPTION_FLAG_TRACE_DEPTH, "OPTIX_EXCEPTION_FLAG_TRACE_DEPTH" );
    emitFlag( result, emitted, flags.flags, OPTIX_EXCEPTION_FLAG_USER, "OPTIX_EXCEPTION_FLAG_USER" );
    emitFlag( result, emitted, flags.flags, OPTIX_EXCEPTION_FLAG_DEBUG, "OPTIX_EXCEPTION_FLAG_DEBUG" );
    if( !emitted )
    {
        result = "OPTIX_EXCEPTION_FLAG_NONE";
    }
    return result;
}

inline std::ostream& operator<<( std::ostream& str, OptixExceptionFlagSet flags )
{
    return str << toString( flags );
}

inline std::string toString( OptixCompileDebugLevel value )
{
    switch( value )
    {
        case OPTIX_COMPILE_DEBUG_LEVEL_DEFAULT: return "OPTIX_COMPILE_DEBUG_LEVEL_DEFAULT";
        case OPTIX_COMPILE_DEBUG_LEVEL_NONE: return "OPTIX_COMPILE_DEBUG_LEVEL_NONE";
        case OPTIX_COMPILE_DEBUG_LEVEL_MINIMAL: return "OPTIX_COMPILE_DEBUG_LEVEL_MINIMAL";
        case OPTIX_COMPILE_DEBUG_LEVEL_MODERATE: return "OPTIX_COMPILE_DEBUG_LEVEL_MODERATE";
        case OPTIX_COMPILE_DEBUG_LEVEL_FULL: return "OPTIX_COMPILE_DEBUG_LEVEL_FULL";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixCompileDebugLevel value )
{
    return str << toString( value );
}

inline std::string toString( OptixHitKind value )
{
    switch( value )
    {
        case OPTIX_HIT_KIND_TRIANGLE_FRONT_FACE: return "OPTIX_HIT_KIND_TRIANGLE_FRONT_FACE";
        case OPTIX_HIT_KIND_TRIANGLE_BACK_FACE: return "OPTIX_HIT_KIND_TRIANGLE_BACK_FACE";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixHitKind value )
{
    return str << toString( value );
}

inline std::string toString( OptixPayloadTypeID value )
{
    switch( value )
    {
        case OPTIX_PAYLOAD_TYPE_DEFAULT: return "OPTIX_PAYLOAD_TYPE_DEFAULT";
        case OPTIX_PAYLOAD_TYPE_ID_0: return "OPTIX_PAYLOAD_TYPE_ID_0";
        case OPTIX_PAYLOAD_TYPE_ID_1: return "OPTIX_PAYLOAD_TYPE_ID_1";
        case OPTIX_PAYLOAD_TYPE_ID_2: return "OPTIX_PAYLOAD_TYPE_ID_2";
        case OPTIX_PAYLOAD_TYPE_ID_3: return "OPTIX_PAYLOAD_TYPE_ID_3";
        case OPTIX_PAYLOAD_TYPE_ID_4: return "OPTIX_PAYLOAD_TYPE_ID_4";
        case OPTIX_PAYLOAD_TYPE_ID_5: return "OPTIX_PAYLOAD_TYPE_ID_5";
        case OPTIX_PAYLOAD_TYPE_ID_6: return "OPTIX_PAYLOAD_TYPE_ID_6";
        case OPTIX_PAYLOAD_TYPE_ID_7: return "OPTIX_PAYLOAD_TYPE_ID_7";
    }
    return std::to_string( static_cast<unsigned long>( value ) );
}

inline std::ostream& operator<<( std::ostream& str, OptixPayloadTypeID value )
{
    return str << toString( value );
}

