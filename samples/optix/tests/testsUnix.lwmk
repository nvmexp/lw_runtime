#
#  Copyright (c) 2018 LWPU Corporation.  All rights reserved.
#
#  LWPU Corporation and its licensors retain all intellectual property and proprietary
#  rights in and to this software, related documentation and any modifications thereto.
#  Any use, reproduction, disclosure or distribution of this software and related
#  documentation without an express license agreement from LWPU Corporation is strictly
#  prohibited.
#
#  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
#  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
#  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
#  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
#  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
#  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
#  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGES
#

ifndef LWCFG_INITIALIZED
  $(error Include this makefile only when LWCFG_INITIALIZED)
endif

SCRIPT_SUFFIX = .sh

# Make $(1) exelwtable by user.
OPTIX_MAKE_SCRIPT_EXELWTABLE = $(CHMOD) u+x $(1)

# On Linux, we need to reference shell variables as ${VAR}, but $ is also
# a make variable expansion character.  So we use % wherever we need a shell
# $ and we use $ to expand make variables as needed.  On the final variable
# definition, after all make variables have been substituted, we will do one
# final replace of % with $ so that the bash script text will contain $ when
# it is written out.

# Script preamble: setup environment variables to default values if empty; use % for bash variables.
ROBOT_PREAMBLE :=
define ROBOT_PREAMBLE
#!/bin/sh
export OPTIX_PROPS_PATH=%{PWD}

if [ -f farm_elws ]; then source ./farm_elws; fi

if [ -z "%TESTROOTDIR" ]; then TESTROOTDIR=$(ROBOT_TESTROOTDIR); fi;

if [ -z "%TESTROOTBINDIR" ]; then TESTROOTBINDIR=$(ROBOT_TESTROOTBINDIR); fi;

if [ -z "%OPTIXLIBDIR" ]; then OPTIXLIBDIR=$(ROBOT_OPTIXLIBDIR); fi;

if [ -z "%OPTIXBINDIR" ]; then OPTIXBINDIR=$(ROBOT_OPTIXBINDIR); fi;

if [ -z "%ROBOTREPORTDIR" ]; then ROBOTREPORTDIR=report; fi

endef

# We don't need to do anything here on Linux
ROBOT_POSTAMBLE :=

# Use % for bash variables.
ROBOT_PATH_ARGS := -v TESTROOTDIR:"%TESTROOTDIR" -v TESTROOTBINDIR:"%TESTROOTBINDIR" -v OPTIXLIBDIR:"%OPTIXLIBDIR" -v OPTIXBINDIR:"%OPTIXBINDIR"

# Use % for bash variables
ROBOT_CMD := python "%TESTROOTDIR/robot/run.py" --name OptiX --outputdir "%ROBOTREPORTDIR" --reportbackground lightgray:lightgray $(ROBOT_PATH_ARGS)

# Use % for bash variables
ROBOT_test_all_CMD :=
define ROBOT_test_all_CMD
$(ROBOT_CMD) $(ROBOT_SUITES) %* "%TESTROOTDIR/testlists"
endef

# Use % for bash variables
ROBOT_test_smoke_CMD :=
define ROBOT_test_smoke_CMD
$(ROBOT_CMD) $(ROBOT_SUITES) --include smoke %* %TESTROOTDIR/testlists
endef

# Use % for bash variables
ROBOT_test_regression_CMD :=
define ROBOT_test_regression_CMD
$(ROBOT_CMD) $(ROBOT_SUITES) --include regression %* %TESTROOTDIR/testlists
endef

# Use % for bash variables
ROBOT_test_single_CMD :=
define ROBOT_test_single_CMD
$(ROBOT_CMD) --test %* %TESTROOTDIR/testlists
endef

# Use % for bash variables
ROBOT_test_suite_CMD :=
define ROBOT_test_suite_CMD
$(ROBOT_CMD) --suite %* %TESTROOTDIR/testlists
endef

# Use % for bash variables
ROBOT_test_tag_CMD :=
define ROBOT_test_tag_CMD
$(ROBOT_CMD) --include %* %TESTROOTDIR/testlists
endef

# On Linux, write the script contents after substituting $ for %
# $(1)    Output path
# $(2)    Variable name containing the script contents
OPTIX_WRITE_ROBOT_SCRIPT = $(file >$(1),$(subst %,$$,$($(2))))
