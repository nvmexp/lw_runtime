//
//  Copyright (c) 2020 LWPU Corporation.  All rights reserved.
//
//  LWPU Corporation and its licensors retain all intellectual property and proprietary
//  rights in and to this software, related documentation and any modifications thereto.
//  Any use, reproduction, disclosure or distribution of this software and related
//  documentation without an express license agreement from LWPU Corporation is strictly
//  prohibited.
//
//  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
//  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
//  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
//  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
//  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
//  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
//  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
//  SUCH DAMAGES
//

#ifdef OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE
#define OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE_HAS_PARAMS
#endif  // OPTIX_OPTIONAL_TEST_CALL_COVERAGE

#define OPTIX_OPTIONAL_FEATURE_OPTIX7_LWRVES

#include "test_DeviceAPI_motionBlur.h"

extern "C" {
__constant__ Params params;
}

#include <optix.h>

extern "C" __global__ void __raygen__writeMotionSettings()
{
    params.outData->lwrrentMotionTime  = 42.f;
    params.outData->gasMotionTimeBegin = 42.f;
    params.outData->gasMotionTimeEnd   = 42.f;
    params.outData->gasMotionStepCount = 42;
    float3 origin                      = {0.f, 0.f, 0.f};
    float3 direction                   = {1.f, 0.f, 0.f};
    float  tmin = 0.f, tmax = 0.f;
    float  time = 5.f;
    optixTrace( params.handle, origin, direction, tmin, tmax, time, OptixVisibilityMask( 1 ), OPTIX_RAY_FLAG_NONE, 0, 0, 0 );
}

extern "C" __global__ void __intersection__writeMotionSettings()
{
    OptixTraversableHandle gas = optixGetGASTraversableHandle();

    params.outData->lwrrentMotionTime  = optixGetRayTime();
    params.outData->gasMotionTimeBegin = optixGetGASMotionTimeBegin( gas );
    params.outData->gasMotionTimeEnd   = optixGetGASMotionTimeEnd( gas );
    params.outData->gasMotionStepCount = optixGetGASMotionStepCount( gas );
}
