
//
//  Copyright (c) 2019 LWPU Corporation.  All rights reserved.
//
//  LWPU Corporation and its licensors retain all intellectual property and proprietary
//  rights in and to this software, related documentation and any modifications thereto.
//  Any use, reproduction, disclosure or distribution of this software and related
//  documentation without an express license agreement from LWPU Corporation is strictly
//  prohibited.
//
//  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
//  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
//  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
//  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
//  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
//  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
//  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
//  SUCH DAMAGES
//

#ifdef OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE
#define OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE_HAS_PARAMS
#endif  // OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE

#include "test_DeviceAPI_rayFlags.h"

extern "C" {
__constant__ Params params;
}

#include <optix.h>

extern "C" __global__ void __exception__nil() {}

// ilwertDirection could be used for ilwoking the miss shader, iff wanted
//
__device__ void traceRay( float3 origin, float3 direction, unsigned int rayFlags )
{
    float               tmin           = 0.0f;
    float               tmax           = 100.0f;
    float               rayTime        = 0.0f;
    OptixVisibilityMask visibilityMask = params.visibilityMask;
    unsigned int        SBToffset      = 0;
    unsigned int        SBTstride      = 1;
    unsigned int        missSBTIndex   = 0;

    unsigned int* payloads = (unsigned int*)params.payloads;
    optixTrace( params.handle, origin, direction, tmin, tmax, rayTime, visibilityMask, rayFlags, SBToffset, SBTstride, missSBTIndex,
                payloads[0], payloads[1], payloads[2], payloads[3], payloads[4], payloads[5], payloads[6], payloads[7] );
}

extern "C" __global__ void __raygen__()
{
    float3 origin    = make_float3( 0.0f, 0.0f, -2.0f );
    float3 direction = make_float3( 0.0f, 0.0f, 1.0f );
    traceRay( origin, direction, static_cast<unsigned int>( params.rayFlags ) );
}

extern "C" __global__ void __raygen__ilwertedDirection()
{
    float3 origin    = make_float3( 0.0f, 0.0f, -2.0f );
    float3 direction = make_float3( 0.0f, 0.0f, -1.0f );
    traceRay( origin, direction, static_cast<unsigned int>( params.rayFlags ) );
}

extern "C" __global__ void __raygen__movedOriginAndDirection()
{
    float3 origin    = make_float3( 0.0f, 0.0f, 4.0f );
    float3 direction = make_float3( 0.0f, 0.0f, -1.0f );
    traceRay( origin, direction, static_cast<unsigned int>( params.rayFlags ) );
}

extern "C" __global__ void __intersection__()
{
    if( optixGetWorldRayDirection().z > 0.0f )
    {
        optixReportIntersection( 1.0f, 0 );
    }
}

extern "C" __global__ void __closesthit__() {}

extern "C" __global__ void __anyhit__() {}

extern "C" __global__ void __miss__() {}

extern "C" __global__ void __anyhit__rayFlags()
{
    optixSetPayload_0( optixGetPayload_0() | PROGRAM_TYPE_PAYLOAD_AH );
}

extern "C" __global__ void __closesthit__rayFlags()
{
    optixSetPayload_0( optixGetPayload_0() | PROGRAM_TYPE_PAYLOAD_CH );
}

extern "C" __global__ void __miss__rayFlags()
{
    optixSetPayload_0( optixGetPayload_0() | PROGRAM_TYPE_PAYLOAD_MS );
}

extern "C" __global__ void __anyhit__counting()
{
    optixSetPayload_0( optixGetPayload_0() + 1 );
}


extern "C" __global__ void __raygen__8bit()
{
    float3 origin    = make_float3( 0.0f, 0.0f, 1.0f );
    float3 direction = make_float3( 0.0f, 0.0f, 1.0f );

    unsigned int* payloads = (unsigned int*)params.payloads;
    traceRay( origin, direction, payloads[0] );
}


extern "C" __global__ void __miss__8bit()
{
    optixSetPayload_1( optixGetRayFlags() );
}
