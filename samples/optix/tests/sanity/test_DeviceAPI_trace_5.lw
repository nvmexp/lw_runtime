
//
//  Copyright (c) 2020 LWPU Corporation.  All rights reserved.
//
//  LWPU Corporation and its licensors retain all intellectual property and proprietary
//  rights in and to this software, related documentation and any modifications thereto.
//  Any use, reproduction, disclosure or distribution of this software and related
//  documentation without an express license agreement from LWPU Corporation is strictly
//  prohibited.
//
//  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
//  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
//  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
//  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
//  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
//  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
//  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
//  SUCH DAMAGES
//

#ifdef OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE
#define OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE_HAS_PARAMS
#endif  // OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE

#include "test_DeviceAPI_trace.h"

extern "C" {
__constant__ Params params;
}

#include <optix.h>

__device__ void traceRay()
{
    float3              origin         = make_float3( 0.0f, 0.0f, 1.0f );
    float3              direction      = make_float3( 0.0f, 0.0f, 1.0f );
    float               tmin           = 0.0f;
    float               tmax           = 100.0f;
    float               rayTime        = 0.0f;
    OptixVisibilityMask visibilityMask = 1;
    OptixRayFlags       rayFlags       = OPTIX_RAY_FLAG_NONE;
    unsigned int        SBToffset      = 0;
    unsigned int        SBTstride      = 1;
    unsigned int        missSBTIndex   = 0;

    unsigned int* payloads = (unsigned int*)params.payloads;
    optixTrace( params.handle, origin, direction, tmin, tmax, rayTime, visibilityMask, rayFlags, SBToffset, SBTstride,
                missSBTIndex, payloads[0], payloads[1], payloads[2], payloads[3], payloads[4] );
}

extern "C" __global__ void __raygen__()
{
    traceRay();
}

extern "C" __global__ void __miss__()
{
    optixSetPayload_0( optixGetPayload_0() | PROGRAM_TYPE_PAYLOAD_MS );
    optixSetPayload_1( optixGetPayload_1() | PROGRAM_TYPE_PAYLOAD_MS );
    optixSetPayload_2( optixGetPayload_2() | PROGRAM_TYPE_PAYLOAD_MS );
    optixSetPayload_3( optixGetPayload_3() | PROGRAM_TYPE_PAYLOAD_MS );
    optixSetPayload_4( optixGetPayload_4() | PROGRAM_TYPE_PAYLOAD_MS );
}

extern "C" __global__ void __intersection__()
{
    optixSetPayload_0( optixGetPayload_0() | PROGRAM_TYPE_PAYLOAD_IS );
    optixSetPayload_1( optixGetPayload_1() | PROGRAM_TYPE_PAYLOAD_IS );
    optixSetPayload_2( optixGetPayload_2() | PROGRAM_TYPE_PAYLOAD_IS );
    optixSetPayload_3( optixGetPayload_3() | PROGRAM_TYPE_PAYLOAD_IS );
    optixSetPayload_4( optixGetPayload_4() | PROGRAM_TYPE_PAYLOAD_IS );
    optixReportIntersection( 1.0f, 0 );
}

extern "C" __global__ void __anyhit__() {}
extern "C" __global__ void __closesthit__() {}
extern "C" __global__ void __exception__() {}
