//
//  Copyright (c) 2021 LWPU Corporation.  All rights reserved.
//
//  LWPU Corporation and its licensors retain all intellectual property and proprietary
//  rights in and to this software, related documentation and any modifications thereto.
//  Any use, reproduction, disclosure or distribution of this software and related
//  documentation without an express license agreement from LWPU Corporation is strictly
//  prohibited.
//
//  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
//  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
//  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
//  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
//  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
//  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
//  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
//  SUCH DAMAGES
//

#ifdef OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE
#define OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE_HAS_PARAMS
#endif  // OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE

#include "test_PathTracer.h"

#include "lwca/helpers.h"
#include <vector_functions.h>
#include <vector_types.h>

#include <optix.h>

//------------------------------------------------------------------------------

extern "C" {
__constant__ Params params;
}

struct RadiancePRD
{
    float3       emitted;
    float3       radiance;
    float3       attenuation;
    float3       origin;
    float3       direction;
    unsigned int seed;
    int          countEmitted;
    int          done;
    int          pad;
};


struct Onb
{
    __forceinline__ __device__ Onb( const float3& normal )
    {
        m_normal = normal;

        if( fabs( m_normal.x ) > fabs( m_normal.z ) )
        {
            m_binormal.x = -m_normal.y;
            m_binormal.y = m_normal.x;
            m_binormal.z = 0;
        }
        else
        {
            m_binormal.x = 0;
            m_binormal.y = -m_normal.z;
            m_binormal.z = m_normal.y;
        }

        m_binormal = normalize( m_binormal );
        m_tangent  = cross( m_binormal, m_normal );
    }

    __forceinline__ __device__ void ilwerse_transform( float3& p ) const
    {
        p = p.x * m_tangent + p.y * m_binormal + p.z * m_normal;
    }

    float3 m_tangent;
    float3 m_binormal;
    float3 m_normal;
};

//------------------------------------------------------------------------------

static __forceinline__ __device__ void* unpackPointer( unsigned int i0, unsigned int i1 )
{
    const unsigned long long uptr = static_cast<unsigned long long>( i0 ) << 32 | i1;
    void*                    ptr  = reinterpret_cast<void*>( uptr );
    return ptr;
}

static __forceinline__ __device__ void packPointer( void* ptr, unsigned int& i0, unsigned int& i1 )
{
    const unsigned long long uptr = reinterpret_cast<unsigned long long>( ptr );
    i0                            = uptr >> 32;
    i1                            = uptr & 0x00000000ffffffff;
}

static __forceinline__ __device__ RadiancePRD* getPRD()
{
    const unsigned int u0 = optixGetPayload_0();
    const unsigned int u1 = optixGetPayload_1();
    return reinterpret_cast<RadiancePRD*>( unpackPointer( u0, u1 ) );
}

static __forceinline__ __device__ void setPayloadOcclusion( bool occluded )
{
    optixSetPayload_0( static_cast<unsigned int>( occluded ) );
}

static __forceinline__ __device__ void cosine_sample_hemisphere( const float u1, const float u2, float3& p )
{
    // Uniformly sample disk.
    const float r   = sqrtf( u1 );
    const float phi = 2.0f * M_PIf * u2;
    p.x             = r * cosf( phi );
    p.y             = r * sinf( phi );

    // Project up to hemisphere.
    p.z = sqrtf( fmaxf( 0.0f, 1.0f - p.x * p.x - p.y * p.y ) );
}

static __forceinline__ __device__ void traceRadiance( OptixTraversableHandle handle,
                                                      float3                 ray_origin,
                                                      float3                 ray_direction,
                                                      float                  tmin,
                                                      float                  tmax,
                                                      RadiancePRD*           prd )
{
    unsigned int u0, u1;
    packPointer( prd, u0, u1 );
    optixTrace( handle, ray_origin, ray_direction, tmin, tmax, 0.0f, OptixVisibilityMask( 1 ), OPTIX_RAY_FLAG_NONE,
                RAY_TYPE_RADIANCE, RAY_TYPE_COUNT, RAY_TYPE_RADIANCE, u0, u1 );
}

static __forceinline__ __device__ bool traceOcclusion( OptixTraversableHandle handle, float3 ray_origin, float3 ray_direction, float tmin, float tmax )
{
    unsigned int occluded = 0u;
    optixTrace( handle, ray_origin, ray_direction, tmin, tmax, 0.0f, OptixVisibilityMask( 1 ),
                OPTIX_RAY_FLAG_TERMINATE_ON_FIRST_HIT, RAY_TYPE_OCCLUSION, RAY_TYPE_COUNT, RAY_TYPE_OCCLUSION, occluded );
    return occluded;
}

//------------------------------------------------------------------------------

extern "C" __global__ void __raygen__rg()
{
    const int    w              = params.width;
    const int    h              = params.height;
    const float3 eye            = params.eye;
    const float3 U              = params.U;
    const float3 V              = params.V;
    const float3 W              = params.W;
    const uint3  idx            = optixGetLaunchIndex();

    unsigned int seed = tea<4>( idx.y * w + idx.x, 0 );

    float3 result = make_float3( 0.0f, 0.0f, 0.0f );
    int    i      = params.samples_per_launch;
    do
    {
        // The center of each pixel is at fraction (0.5,0.5)
        const float2 subpixel_jitter = make_float2( rnd( seed ), rnd( seed ) );

        const float2 d = 2.0f
                             * make_float2( ( static_cast<float>( idx.x ) + subpixel_jitter.x ) / static_cast<float>( w ),
                                            ( static_cast<float>( idx.y ) + subpixel_jitter.y ) / static_cast<float>( h ) )
                         - 1.0f;
        float3 ray_direction = normalize( d.x * U + d.y * V + W );
        float3 ray_origin    = eye;

        RadiancePRD prd;
        prd.emitted      = make_float3( 0.f, 0.f, 0.f );
        prd.radiance     = make_float3( 0.f, 0.f, 0.f );
        prd.attenuation  = make_float3( 1.f, 1.f, 1.f );
        prd.countEmitted = true;
        prd.done         = false;
        prd.seed         = seed;

        int depth = 0;
        for( ;; )
        {
            traceRadiance( params.handle, ray_origin, ray_direction, 0.01f, 1e16f, &prd );

            result += prd.emitted;
            result += prd.radiance * prd.attenuation;

            if( prd.done || depth >= 3 )
                break;

            ray_origin    = prd.origin;
            ray_direction = prd.direction;

            ++depth;
        }
    } while( --i );

    const uint3        launch_index = optixGetLaunchIndex();
    const unsigned int image_index  = launch_index.y * params.width + launch_index.x;
    float3             aclwm_color  = result / static_cast<float>( params.samples_per_launch );

    params.frame_buffer[image_index] = make_color( aclwm_color );
}


extern "C" __global__ void __miss__radiance()
{
    MissData*    rt_data = reinterpret_cast<MissData*>( optixGetSbtDataPointer() );
    RadiancePRD* prd     = getPRD();

    prd->radiance = make_float3( rt_data->r, rt_data->g, rt_data->b );
    prd->done     = true;
}

extern "C" __global__ void __anyhit__ah()
{
    const unsigned int hit_kind = optixGetHitKind();
    HitGroupData*      rt_data  = (HitGroupData*)optixGetSbtDataPointer();
    const int          prim_idx = optixGetPrimitiveIndex();

    // The texture coordinates are defined per-vertex for built-in triangles,
    // and are derived from the surface normal for our custom sphere geometry.
    float3 texcoord;
    if( optixIsTriangleHit() )
    {
        const int    vert_idx_offset = prim_idx * 3;
        const float2 barycentrics    = optixGetTriangleBarycentrics();

        const float2 t0 = rt_data->tex_coords[vert_idx_offset + 0];
        const float2 t1 = rt_data->tex_coords[vert_idx_offset + 1];
        const float2 t2 = rt_data->tex_coords[vert_idx_offset + 2];

        texcoord =
            make_float3( t0 * ( 1.0f - barycentrics.x - barycentrics.y ) + t1 * barycentrics.x + t2 * barycentrics.y );
    }
    else
    {
        const float3 normal = make_float3( int_as_float( optixGetAttribute_0() ), int_as_float( optixGetAttribute_1() ),
                                           int_as_float( optixGetAttribute_2() ) );

        // TODO: Pass UV scale in SBT?
        const float uv_scale = 16.0f;
        const float u        = uv_scale * ( 0.5f + atan2f( normal.z, normal.x ) * 0.5f * M_1_PIf );
        const float v        = uv_scale * ( 0.5f - asinf( normal.y ) * M_1_PIf );
        texcoord             = make_float3( u, v, 0.0f );
    }

    int which_check = ( static_cast<int>( texcoord.x ) + static_cast<int>( texcoord.y ) ) & 1;
    if( which_check == 0 )
    {
        optixIgnoreIntersection();
    }
}

extern "C" __global__ void __closesthit__occlusion()
{
    setPayloadOcclusion( true );
}

extern "C" __global__ void __closesthit__radiance()
{
    HitGroupData* rt_data = (HitGroupData*)optixGetSbtDataPointer();
    RadiancePRD*  prd     = getPRD();

    const int          prim_idx        = optixGetPrimitiveIndex();
    const float3       ray_dir         = optixGetWorldRayDirection();
    const int          vert_idx_offset = prim_idx * 3;
    const unsigned int hit_kind        = optixGetHitKind();

    float3 N;
    if( optixIsTriangleHit() )
    {
        const float3 v0  = make_float3( rt_data->vertices[vert_idx_offset + 0] );
        const float3 v1  = make_float3( rt_data->vertices[vert_idx_offset + 1] );
        const float3 v2  = make_float3( rt_data->vertices[vert_idx_offset + 2] );
        const float3 N_0 = normalize( cross( v1 - v0, v2 - v0 ) );

        N = faceforward( N_0, -ray_dir, N_0 );
    }
    else
    {
        N = make_float3( int_as_float( optixGetAttribute_0() ), int_as_float( optixGetAttribute_1() ),
                         int_as_float( optixGetAttribute_2() ) );
    }

    prd->emitted = ( prd->countEmitted ) ? rt_data->emission_color : make_float3( 0.0f );

    const float3 P = optixGetWorldRayOrigin() + optixGetRayTmax() * ray_dir;

    unsigned int seed = prd->seed;

    {
        const float z1 = rnd( seed );
        const float z2 = rnd( seed );

        float3 w_in;
        cosine_sample_hemisphere( z1, z2, w_in );
        Onb onb( N );
        onb.ilwerse_transform( w_in );
        prd->direction = w_in;
        prd->origin    = P;

        prd->attenuation *= rt_data->diffuse_color;
        prd->countEmitted = false;
    }

    const float z1 = rnd( seed );
    const float z2 = rnd( seed );
    prd->seed      = seed;

    ParallelogramLight light     = params.light;
    const float3       light_pos = light.corner + light.v1 * z1 + light.v2 * z2;

    // Callwlate properties of light sample (for area based pdf)
    const float  Ldist = length( light_pos - P );
    const float3 L     = normalize( light_pos - P );
    const float  nDl   = dot( N, L );
    const float  LnDl  = -dot( light.normal, L );

    float weight = 0.0f;
    if( nDl > 0.0f && LnDl > 0.0f )
    {
        const bool occluded = traceOcclusion( params.handle, P, L, 0.01f, Ldist - 0.01f );
        if( !occluded )
        {
            const float A = length( cross( light.v1, light.v2 ) );
            weight        = nDl * LnDl * A / ( M_PIf * Ldist * Ldist );
        }
    }

    prd->radiance += light.emission * weight;
}

#define float3_as_ints( u ) float_as_int( u.x ), float_as_int( u.y ), float_as_int( u.z )

extern "C" __global__ void __intersection__sphere()
{
    const HitGroupData* hit_group_data = reinterpret_cast<HitGroupData*>( optixGetSbtDataPointer() );

    const float3 ray_orig = optixGetWorldRayOrigin();
    const float3 ray_dir  = optixGetWorldRayDirection();
    const float  ray_tmin = optixGetRayTmin();
    const float  ray_tmax = optixGetRayTmax();

    const float3 O      = ray_orig - hit_group_data->sphere.center;
    const float  l      = 1.0f / length( ray_dir );
    const float3 D      = ray_dir * l;
    const float  radius = hit_group_data->sphere.radius;

    float b    = dot( O, D );
    float c    = dot( O, O ) - radius * radius;
    float disc = b * b - c;
    if( disc > 0.0f )
    {
        float sdisc        = sqrtf( disc );
        float root1        = ( -b - sdisc );
        float root11       = 0.0f;
        bool  check_second = true;

        const bool do_refine = fabsf( root1 ) > ( 10.0f * radius );

        if( do_refine )
        {
            // refine root1
            float3 O1 = O + root1 * D;
            b         = dot( O1, D );
            c         = dot( O1, O1 ) - radius * radius;
            disc      = b * b - c;

            if( disc > 0.0f )
            {
                sdisc  = sqrtf( disc );
                root11 = ( -b - sdisc );
            }
        }

        float  t;
        float3 normal;
        t = ( root1 + root11 ) * l;
        if( t > ray_tmin && t < ray_tmax )
        {
            normal = ( O + ( root1 + root11 ) * D ) / radius;
            if( optixReportIntersection( t, 0, float3_as_ints( normal ), float_as_int( radius ) ) )
                check_second = false;
        }

        if( check_second )
        {
            float root2 = ( -b + sdisc ) + ( do_refine ? root1 : 0 );
            t           = root2 * l;
            normal      = ( O + root2 * D ) / radius;
            if( t > ray_tmin && t < ray_tmax )
                optixReportIntersection( t, 0, float3_as_ints( normal ), float_as_int( radius ) );
        }
    }
}
