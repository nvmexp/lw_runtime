//
//  Copyright (c) 2019 LWPU Corporation.  All rights reserved.
//
//  LWPU Corporation and its licensors retain all intellectual property and proprietary
//  rights in and to this software, related documentation and any modifications thereto.
//  Any use, reproduction, disclosure or distribution of this software and related
//  documentation without an express license agreement from LWPU Corporation is strictly
//  prohibited.
//
//  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
//  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
//  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
//  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
//  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
//  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
//  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
//  SUCH DAMAGES
//
//
//

#include <optix.h>
#include <optix_stubs.h>

#include <gtest/gtest.h>

#include <cassert>
#include <cstring>
#include <iostream>
#include <vector>

//---------------------------------------------------------------------------
// This is automatically generated by the api2enum_tests.py script
//---------------------------------------------------------------------------


class EnumOptixResult : public ::testing::Test
{
};

TEST_F( EnumOptixResult, OPTIX_SUCCESS )
{
    ASSERT_EQ( OPTIX_SUCCESS, 0x0 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_ILWALID_VALUE )
{
    ASSERT_EQ( OPTIX_ERROR_ILWALID_VALUE, 0x1B59 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_HOST_OUT_OF_MEMORY )
{
    ASSERT_EQ( OPTIX_ERROR_HOST_OUT_OF_MEMORY, 0x1B5A );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_LAUNCH_FAILURE )
{
    ASSERT_EQ( OPTIX_ERROR_LAUNCH_FAILURE, 0x1B8A );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_ILWALID_DEVICE_CONTEXT )
{
    ASSERT_EQ( OPTIX_ERROR_ILWALID_DEVICE_CONTEXT, 0x1B8B );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_ILWALID_PTX )
{
    ASSERT_EQ( OPTIX_ERROR_ILWALID_PTX, 0x1C20 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_ILWALID_LAUNCH_PARAMETER )
{
    ASSERT_EQ( OPTIX_ERROR_ILWALID_LAUNCH_PARAMETER, 0x1C21 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_ILWALID_PAYLOAD_ACCESS )
{
    ASSERT_EQ( OPTIX_ERROR_ILWALID_PAYLOAD_ACCESS, 0x1C22 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_ILWALID_ATTRIBUTE_ACCESS )
{
    ASSERT_EQ( OPTIX_ERROR_ILWALID_ATTRIBUTE_ACCESS, 0x1C23 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_ILWALID_FUNCTION_USE )
{
    ASSERT_EQ( OPTIX_ERROR_ILWALID_FUNCTION_USE, 0x1C24 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_PIPELINE_OUT_OF_CONSTANT_MEMORY )
{
    ASSERT_EQ( OPTIX_ERROR_PIPELINE_OUT_OF_CONSTANT_MEMORY, 0x1C52 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_PIPELINE_LINK_ERROR )
{
    ASSERT_EQ( OPTIX_ERROR_PIPELINE_LINK_ERROR, 0x1C53 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_INTERNAL_COMPILER_ERROR )
{
    ASSERT_EQ( OPTIX_ERROR_INTERNAL_COMPILER_ERROR, 0x1C83 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_NOT_SUPPORTED )
{
    ASSERT_EQ( OPTIX_ERROR_NOT_SUPPORTED, 0x1E78 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_UNSUPPORTED_ABI_VERSION )
{
    ASSERT_EQ( OPTIX_ERROR_UNSUPPORTED_ABI_VERSION, 0x1E79 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_FUNCTION_TABLE_SIZE_MISMATCH )
{
    ASSERT_EQ( OPTIX_ERROR_FUNCTION_TABLE_SIZE_MISMATCH, 0x1E7A );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_ILWALID_ENTRY_FUNCTION_OPTIONS )
{
    ASSERT_EQ( OPTIX_ERROR_ILWALID_ENTRY_FUNCTION_OPTIONS, 0x1E7B );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_LIBRARY_NOT_FOUND )
{
    ASSERT_EQ( OPTIX_ERROR_LIBRARY_NOT_FOUND, 0x1E7C );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_ENTRY_SYMBOL_NOT_FOUND )
{
    ASSERT_EQ( OPTIX_ERROR_ENTRY_SYMBOL_NOT_FOUND, 0x1E7D );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_LWDA_ERROR )
{
    ASSERT_EQ( OPTIX_ERROR_LWDA_ERROR, 0x1EDC );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_INTERNAL_ERROR )
{
    ASSERT_EQ( OPTIX_ERROR_INTERNAL_ERROR, 0x1F36 );
}

TEST_F( EnumOptixResult, OPTIX_ERROR_UNKNOWN )
{
    ASSERT_EQ( OPTIX_ERROR_UNKNOWN, 0x1F3F );
}

class EnumOptixDeviceProperty : public ::testing::Test
{
};

TEST_F( EnumOptixDeviceProperty, OPTIX_DEVICE_PROPERTY_LIMIT_MAX_TRACE_DEPTH )
{
    ASSERT_EQ( OPTIX_DEVICE_PROPERTY_LIMIT_MAX_TRACE_DEPTH, 0x2001 );
}

TEST_F( EnumOptixDeviceProperty, OPTIX_DEVICE_PROPERTY_LIMIT_MAX_TRAVERSABLE_GRAPH_DEPTH )
{
    ASSERT_EQ( OPTIX_DEVICE_PROPERTY_LIMIT_MAX_TRAVERSABLE_GRAPH_DEPTH, 0x2002 );
}

TEST_F( EnumOptixDeviceProperty, OPTIX_DEVICE_PROPERTY_LIMIT_MAX_PRIMITIVES_PER_GAS )
{
    ASSERT_EQ( OPTIX_DEVICE_PROPERTY_LIMIT_MAX_PRIMITIVES_PER_GAS, 0x2003 );
}

TEST_F( EnumOptixDeviceProperty, OPTIX_DEVICE_PROPERTY_LIMIT_MAX_INSTANCES_PER_IAS )
{
    ASSERT_EQ( OPTIX_DEVICE_PROPERTY_LIMIT_MAX_INSTANCES_PER_IAS, 0x2004 );
}

TEST_F( EnumOptixDeviceProperty, OPTIX_DEVICE_PROPERTY_LIMIT_MAX_INSTANCE_ID )
{
    ASSERT_EQ( OPTIX_DEVICE_PROPERTY_LIMIT_MAX_INSTANCE_ID, 0x2006 );
}

TEST_F( EnumOptixDeviceProperty, OPTIX_DEVICE_PROPERTY_LIMIT_NUM_BITS_INSTANCE_VISIBILITY_MASK )
{
    ASSERT_EQ( OPTIX_DEVICE_PROPERTY_LIMIT_NUM_BITS_INSTANCE_VISIBILITY_MASK, 0x2007 );
}

TEST_F( EnumOptixDeviceProperty, OPTIX_DEVICE_PROPERTY_LIMIT_MAX_SBT_RECORDS_PER_GAS )
{
    ASSERT_EQ( OPTIX_DEVICE_PROPERTY_LIMIT_MAX_SBT_RECORDS_PER_GAS, 0x2008 );
}

TEST_F( EnumOptixDeviceProperty, OPTIX_DEVICE_PROPERTY_LIMIT_MAX_SBT_OFFSET )
{
    ASSERT_EQ( OPTIX_DEVICE_PROPERTY_LIMIT_MAX_SBT_OFFSET, 0x2009 );
}

class EnumOptixGeometryFlags : public ::testing::Test
{
};

TEST_F( EnumOptixGeometryFlags, OPTIX_GEOMETRY_FLAG_NONE )
{
    ASSERT_EQ( OPTIX_GEOMETRY_FLAG_NONE, 0x0 );
}

TEST_F( EnumOptixGeometryFlags, OPTIX_GEOMETRY_FLAG_DISABLE_ANYHIT )
{
    ASSERT_EQ( OPTIX_GEOMETRY_FLAG_DISABLE_ANYHIT, 0x1 );
}

TEST_F( EnumOptixGeometryFlags, OPTIX_GEOMETRY_FLAG_REQUIRE_SINGLE_ANYHIT_CALL )
{
    ASSERT_EQ( OPTIX_GEOMETRY_FLAG_REQUIRE_SINGLE_ANYHIT_CALL, 0x2 );
}

TEST_F( EnumOptixGeometryFlags, OPTIX_GEOMETRY_FLAG_DISABLE_TRIANGLE_FACE_LWLLING )
{
    ASSERT_EQ( OPTIX_GEOMETRY_FLAG_DISABLE_TRIANGLE_FACE_LWLLING, 0x4 );
}

class EnumOptixHitKind : public ::testing::Test
{
};

TEST_F( EnumOptixHitKind, OPTIX_HIT_KIND_TRIANGLE_FRONT_FACE )
{
    ASSERT_EQ( OPTIX_HIT_KIND_TRIANGLE_FRONT_FACE, 0xFE );
}

TEST_F( EnumOptixHitKind, OPTIX_HIT_KIND_TRIANGLE_BACK_FACE )
{
    ASSERT_EQ( OPTIX_HIT_KIND_TRIANGLE_BACK_FACE, 0xFF );
}

class EnumOptixIndicesFormat : public ::testing::Test
{
};

TEST_F( EnumOptixIndicesFormat, OPTIX_INDICES_FORMAT_UNSIGNED_SHORT3 )
{
    ASSERT_EQ( OPTIX_INDICES_FORMAT_UNSIGNED_SHORT3, 0x2102 );
}

TEST_F( EnumOptixIndicesFormat, OPTIX_INDICES_FORMAT_UNSIGNED_INT3 )
{
    ASSERT_EQ( OPTIX_INDICES_FORMAT_UNSIGNED_INT3, 0x2103 );
}

class EnumOptixVertexFormat : public ::testing::Test
{
};

TEST_F( EnumOptixVertexFormat, OPTIX_VERTEX_FORMAT_FLOAT3 )
{
    ASSERT_EQ( OPTIX_VERTEX_FORMAT_FLOAT3, 0x2121 );
}

TEST_F( EnumOptixVertexFormat, OPTIX_VERTEX_FORMAT_FLOAT2 )
{
    ASSERT_EQ( OPTIX_VERTEX_FORMAT_FLOAT2, 0x2122 );
}

TEST_F( EnumOptixVertexFormat, OPTIX_VERTEX_FORMAT_HALF3 )
{
    ASSERT_EQ( OPTIX_VERTEX_FORMAT_HALF3, 0x2123 );
}

TEST_F( EnumOptixVertexFormat, OPTIX_VERTEX_FORMAT_HALF2 )
{
    ASSERT_EQ( OPTIX_VERTEX_FORMAT_HALF2, 0x2124 );
}

TEST_F( EnumOptixVertexFormat, OPTIX_VERTEX_FORMAT_SNORM16_3 )
{
    ASSERT_EQ( OPTIX_VERTEX_FORMAT_SNORM16_3, 0x2125 );
}

TEST_F( EnumOptixVertexFormat, OPTIX_VERTEX_FORMAT_SNORM16_2 )
{
    ASSERT_EQ( OPTIX_VERTEX_FORMAT_SNORM16_2, 0x2126 );
}

class EnumOptixTransformFormat : public ::testing::Test
{
};

TEST_F( EnumOptixTransformFormat, OPTIX_TRANSFORM_FORMAT_NONE )
{
    ASSERT_EQ( OPTIX_TRANSFORM_FORMAT_NONE, 0 );
}

TEST_F( EnumOptixTransformFormat, OPTIX_TRANSFORM_FORMAT_MATRIX_FLOAT12 )
{
    ASSERT_EQ( OPTIX_TRANSFORM_FORMAT_MATRIX_FLOAT12, 0x21E1 );
}

class EnumOptixBuildInputType : public ::testing::Test
{
};

TEST_F( EnumOptixBuildInputType, OPTIX_BUILD_INPUT_TYPE_TRIANGLES )
{
    ASSERT_EQ( OPTIX_BUILD_INPUT_TYPE_TRIANGLES, 0x2141 );
}

TEST_F( EnumOptixBuildInputType, OPTIX_BUILD_INPUT_TYPE_LWSTOM_PRIMITIVES )
{
    ASSERT_EQ( OPTIX_BUILD_INPUT_TYPE_LWSTOM_PRIMITIVES, 0x2142 );
}

TEST_F( EnumOptixBuildInputType, OPTIX_BUILD_INPUT_TYPE_INSTANCES )
{
    ASSERT_EQ( OPTIX_BUILD_INPUT_TYPE_INSTANCES, 0x2143 );
}

TEST_F( EnumOptixBuildInputType, OPTIX_BUILD_INPUT_TYPE_INSTANCE_POINTERS )
{
    ASSERT_EQ( OPTIX_BUILD_INPUT_TYPE_INSTANCE_POINTERS, 0x2144 );
}

class EnumOptixInstanceFlags : public ::testing::Test
{
};

TEST_F( EnumOptixInstanceFlags, OPTIX_INSTANCE_FLAG_NONE )
{
    ASSERT_EQ( OPTIX_INSTANCE_FLAG_NONE, 0x0 );
}

TEST_F( EnumOptixInstanceFlags, OPTIX_INSTANCE_FLAG_DISABLE_TRIANGLE_FACE_LWLLING )
{
    ASSERT_EQ( OPTIX_INSTANCE_FLAG_DISABLE_TRIANGLE_FACE_LWLLING, 0x1 );
}

TEST_F( EnumOptixInstanceFlags, OPTIX_INSTANCE_FLAG_FLIP_TRIANGLE_FACING )
{
    ASSERT_EQ( OPTIX_INSTANCE_FLAG_FLIP_TRIANGLE_FACING, 0x2 );
}

TEST_F( EnumOptixInstanceFlags, OPTIX_INSTANCE_FLAG_DISABLE_ANYHIT )
{
    ASSERT_EQ( OPTIX_INSTANCE_FLAG_DISABLE_ANYHIT, 0x4 );
}

TEST_F( EnumOptixInstanceFlags, OPTIX_INSTANCE_FLAG_ENFORCE_ANYHIT )
{
    ASSERT_EQ( OPTIX_INSTANCE_FLAG_ENFORCE_ANYHIT, 0x8 );
}

class EnumOptixBuildFlags : public ::testing::Test
{
};

TEST_F( EnumOptixBuildFlags, OPTIX_BUILD_FLAG_NONE )
{
    ASSERT_EQ( OPTIX_BUILD_FLAG_NONE, 0x0 );
}

TEST_F( EnumOptixBuildFlags, OPTIX_BUILD_FLAG_ALLOW_UPDATE )
{
    ASSERT_EQ( OPTIX_BUILD_FLAG_ALLOW_UPDATE, 0x1 );
}

TEST_F( EnumOptixBuildFlags, OPTIX_BUILD_FLAG_ALLOW_COMPACTION )
{
    ASSERT_EQ( OPTIX_BUILD_FLAG_ALLOW_COMPACTION, 0x2 );
}

TEST_F( EnumOptixBuildFlags, OPTIX_BUILD_FLAG_PREFER_FAST_TRACE )
{
    ASSERT_EQ( OPTIX_BUILD_FLAG_PREFER_FAST_TRACE, 0x4 );
}

TEST_F( EnumOptixBuildFlags, OPTIX_BUILD_FLAG_PREFER_FAST_BUILD )
{
    ASSERT_EQ( OPTIX_BUILD_FLAG_PREFER_FAST_BUILD, 0x8 );
}

TEST_F( EnumOptixBuildFlags, OPTIX_BUILD_FLAG_ALLOW_RANDOM_VERTEX_ACCESS )
{
    ASSERT_EQ( OPTIX_BUILD_FLAG_ALLOW_RANDOM_VERTEX_ACCESS, 0x10 );
}

TEST_F( EnumOptixBuildFlags, OPTIX_BUILD_FLAG_ALLOW_RANDOM_INSTANCE_ACCESS )
{
    ASSERT_EQ( OPTIX_BUILD_FLAG_ALLOW_RANDOM_INSTANCE_ACCESS, 0x20 );
}

class EnumOptixBuildOperation : public ::testing::Test
{
};

TEST_F( EnumOptixBuildOperation, OPTIX_BUILD_OPERATION_BUILD )
{
    ASSERT_EQ( OPTIX_BUILD_OPERATION_BUILD, 0x2161 );
}

TEST_F( EnumOptixBuildOperation, OPTIX_BUILD_OPERATION_UPDATE )
{
    ASSERT_EQ( OPTIX_BUILD_OPERATION_UPDATE, 0x2162 );
}

class EnumOptixMotionFlags : public ::testing::Test
{
};

TEST_F( EnumOptixMotionFlags, OPTIX_MOTION_FLAG_NONE )
{
    ASSERT_EQ( OPTIX_MOTION_FLAG_NONE, 0x0 );
}

TEST_F( EnumOptixMotionFlags, OPTIX_MOTION_FLAG_START_VANISH )
{
    ASSERT_EQ( OPTIX_MOTION_FLAG_START_VANISH, 0x1 );
}

TEST_F( EnumOptixMotionFlags, OPTIX_MOTION_FLAG_END_VANISH )
{
    ASSERT_EQ( OPTIX_MOTION_FLAG_END_VANISH, 0x2 );
}

class EnumOptixAccelPropertyType : public ::testing::Test
{
};

TEST_F( EnumOptixAccelPropertyType, OPTIX_PROPERTY_TYPE_COMPACTED_SIZE )
{
    ASSERT_EQ( OPTIX_PROPERTY_TYPE_COMPACTED_SIZE, 0x2181 );
}

TEST_F( EnumOptixAccelPropertyType, OPTIX_PROPERTY_TYPE_AABBS )
{
    ASSERT_EQ( OPTIX_PROPERTY_TYPE_AABBS, 0x2182 );
}

class EnumOptixTraversableType : public ::testing::Test
{
};

TEST_F( EnumOptixTraversableType, OPTIX_TRAVERSABLE_TYPE_STATIC_TRANSFORM )
{
    ASSERT_EQ( OPTIX_TRAVERSABLE_TYPE_STATIC_TRANSFORM, 0x21C1 );
}

TEST_F( EnumOptixTraversableType, OPTIX_TRAVERSABLE_TYPE_MATRIX_MOTION_TRANSFORM )
{
    ASSERT_EQ( OPTIX_TRAVERSABLE_TYPE_MATRIX_MOTION_TRANSFORM, 0x21C2 );
}

TEST_F( EnumOptixTraversableType, OPTIX_TRAVERSABLE_TYPE_SRT_MOTION_TRANSFORM )
{
    ASSERT_EQ( OPTIX_TRAVERSABLE_TYPE_SRT_MOTION_TRANSFORM, 0x21C3 );
}

class EnumOptixPixelFormat : public ::testing::Test
{
};

TEST_F( EnumOptixPixelFormat, OPTIX_PIXEL_FORMAT_HALF2 )
{
    ASSERT_EQ( OPTIX_PIXEL_FORMAT_HALF2, 0x2207 );
}

TEST_F( EnumOptixPixelFormat, OPTIX_PIXEL_FORMAT_HALF3 )
{
    ASSERT_EQ( OPTIX_PIXEL_FORMAT_HALF3, 0x2201 );
}

TEST_F( EnumOptixPixelFormat, OPTIX_PIXEL_FORMAT_HALF4 )
{
    ASSERT_EQ( OPTIX_PIXEL_FORMAT_HALF4, 0x2202 );
}

TEST_F( EnumOptixPixelFormat, OPTIX_PIXEL_FORMAT_FLOAT2 )
{
    ASSERT_EQ( OPTIX_PIXEL_FORMAT_FLOAT2, 0x2208 );
}

TEST_F( EnumOptixPixelFormat, OPTIX_PIXEL_FORMAT_FLOAT3 )
{
    ASSERT_EQ( OPTIX_PIXEL_FORMAT_FLOAT3, 0x2203 );
}

TEST_F( EnumOptixPixelFormat, OPTIX_PIXEL_FORMAT_FLOAT4 )
{
    ASSERT_EQ( OPTIX_PIXEL_FORMAT_FLOAT4, 0x2204 );
}

TEST_F( EnumOptixPixelFormat, OPTIX_PIXEL_FORMAT_UCHAR3 )
{
    ASSERT_EQ( OPTIX_PIXEL_FORMAT_UCHAR3, 0x2205 );
}

TEST_F( EnumOptixPixelFormat, OPTIX_PIXEL_FORMAT_UCHAR4 )
{
    ASSERT_EQ( OPTIX_PIXEL_FORMAT_UCHAR4, 0x2206 );
}

class EnumOptixDenoiserInputKind : public ::testing::Test
{
};

class EnumOptixDenoiserModelKind : public ::testing::Test
{
};

TEST_F( EnumOptixDenoiserModelKind, OPTIX_DENOISER_MODEL_KIND_LDR )
{
    ASSERT_EQ( OPTIX_DENOISER_MODEL_KIND_LDR, 0x2322 );
}

TEST_F( EnumOptixDenoiserModelKind, OPTIX_DENOISER_MODEL_KIND_HDR )
{
    ASSERT_EQ( OPTIX_DENOISER_MODEL_KIND_HDR, 0x2323 );
}

TEST_F( EnumOptixDenoiserModelKind, OPTIX_DENOISER_MODEL_KIND_AOV )
{
    ASSERT_EQ( OPTIX_DENOISER_MODEL_KIND_AOV, 0x2324 );
}

TEST_F( EnumOptixDenoiserModelKind, OPTIX_DENOISER_MODEL_KIND_TEMPORAL )
{
    ASSERT_EQ( OPTIX_DENOISER_MODEL_KIND_TEMPORAL, 0x2325 );
}

class EnumOptixRayFlags : public ::testing::Test
{
};

TEST_F( EnumOptixRayFlags, OPTIX_RAY_FLAG_NONE )
{
    ASSERT_EQ( OPTIX_RAY_FLAG_NONE, 0x0 );
}

TEST_F( EnumOptixRayFlags, OPTIX_RAY_FLAG_DISABLE_ANYHIT )
{
    ASSERT_EQ( OPTIX_RAY_FLAG_DISABLE_ANYHIT, 0x1 );
}

TEST_F( EnumOptixRayFlags, OPTIX_RAY_FLAG_ENFORCE_ANYHIT )
{
    ASSERT_EQ( OPTIX_RAY_FLAG_ENFORCE_ANYHIT, 0x2 );
}

TEST_F( EnumOptixRayFlags, OPTIX_RAY_FLAG_TERMINATE_ON_FIRST_HIT )
{
    ASSERT_EQ( OPTIX_RAY_FLAG_TERMINATE_ON_FIRST_HIT, 0x4 );
}

TEST_F( EnumOptixRayFlags, OPTIX_RAY_FLAG_DISABLE_CLOSESTHIT )
{
    ASSERT_EQ( OPTIX_RAY_FLAG_DISABLE_CLOSESTHIT, 0x8 );
}

TEST_F( EnumOptixRayFlags, OPTIX_RAY_FLAG_LWLL_BACK_FACING_TRIANGLES )
{
    ASSERT_EQ( OPTIX_RAY_FLAG_LWLL_BACK_FACING_TRIANGLES, 0x10 );
}

TEST_F( EnumOptixRayFlags, OPTIX_RAY_FLAG_LWLL_FRONT_FACING_TRIANGLES )
{
    ASSERT_EQ( OPTIX_RAY_FLAG_LWLL_FRONT_FACING_TRIANGLES, 0x20 );
}

TEST_F( EnumOptixRayFlags, OPTIX_RAY_FLAG_LWLL_DISABLED_ANYHIT )
{
    ASSERT_EQ( OPTIX_RAY_FLAG_LWLL_DISABLED_ANYHIT, 0x40 );
}

TEST_F( EnumOptixRayFlags, OPTIX_RAY_FLAG_LWLL_ENFORCED_ANYHIT )
{
    ASSERT_EQ( OPTIX_RAY_FLAG_LWLL_ENFORCED_ANYHIT, 0x80 );
}

class EnumOptixTransformType : public ::testing::Test
{
};

TEST_F( EnumOptixTransformType, OPTIX_TRANSFORM_TYPE_NONE )
{
    ASSERT_EQ( OPTIX_TRANSFORM_TYPE_NONE, 0x0 );
}

TEST_F( EnumOptixTransformType, OPTIX_TRANSFORM_TYPE_STATIC_TRANSFORM )
{
    ASSERT_EQ( OPTIX_TRANSFORM_TYPE_STATIC_TRANSFORM, 0x1 );
}

TEST_F( EnumOptixTransformType, OPTIX_TRANSFORM_TYPE_MATRIX_MOTION_TRANSFORM )
{
    ASSERT_EQ( OPTIX_TRANSFORM_TYPE_MATRIX_MOTION_TRANSFORM, 0x2 );
}

TEST_F( EnumOptixTransformType, OPTIX_TRANSFORM_TYPE_SRT_MOTION_TRANSFORM )
{
    ASSERT_EQ( OPTIX_TRANSFORM_TYPE_SRT_MOTION_TRANSFORM, 0x3 );
}

TEST_F( EnumOptixTransformType, OPTIX_TRANSFORM_TYPE_INSTANCE )
{
    ASSERT_EQ( OPTIX_TRANSFORM_TYPE_INSTANCE, 0x4 );
}

class EnumOptixCompileOptimizationLevel : public ::testing::Test
{
};

TEST_F( EnumOptixCompileOptimizationLevel, OPTIX_COMPILE_OPTIMIZATION_DEFAULT )
{
    ASSERT_EQ( OPTIX_COMPILE_OPTIMIZATION_DEFAULT, 0x0 );
}

TEST_F( EnumOptixCompileOptimizationLevel, OPTIX_COMPILE_OPTIMIZATION_LEVEL_0 )
{
    ASSERT_EQ( OPTIX_COMPILE_OPTIMIZATION_LEVEL_0, 0x2340 );
}

TEST_F( EnumOptixCompileOptimizationLevel, OPTIX_COMPILE_OPTIMIZATION_LEVEL_1 )
{
    ASSERT_EQ( OPTIX_COMPILE_OPTIMIZATION_LEVEL_1, 0x2341 );
}

TEST_F( EnumOptixCompileOptimizationLevel, OPTIX_COMPILE_OPTIMIZATION_LEVEL_2 )
{
    ASSERT_EQ( OPTIX_COMPILE_OPTIMIZATION_LEVEL_2, 0x2342 );
}

TEST_F( EnumOptixCompileOptimizationLevel, OPTIX_COMPILE_OPTIMIZATION_LEVEL_3 )
{
    ASSERT_EQ( OPTIX_COMPILE_OPTIMIZATION_LEVEL_3, 0x2343 );
}

class EnumOptixCompileDebugLevel : public ::testing::Test
{
};

TEST_F( EnumOptixCompileDebugLevel, OPTIX_COMPILE_DEBUG_LEVEL_DEFAULT )
{
    ASSERT_EQ( OPTIX_COMPILE_DEBUG_LEVEL_DEFAULT, 0x0 );
}

TEST_F( EnumOptixCompileDebugLevel, OPTIX_COMPILE_DEBUG_LEVEL_NONE )
{
    ASSERT_EQ( OPTIX_COMPILE_DEBUG_LEVEL_NONE, 0x2350 );
}

TEST_F( EnumOptixCompileDebugLevel, OPTIX_COMPILE_DEBUG_LEVEL_MINIMAL )
{
    ASSERT_EQ( OPTIX_COMPILE_DEBUG_LEVEL_MINIMAL, 0x2351 );
}

TEST_F( EnumOptixCompileDebugLevel, OPTIX_COMPILE_DEBUG_LEVEL_MODERATE )
{
    ASSERT_EQ( OPTIX_COMPILE_DEBUG_LEVEL_MODERATE, 0x2353 );
}

TEST_F( EnumOptixCompileDebugLevel, OPTIX_COMPILE_DEBUG_LEVEL_FULL )
{
    ASSERT_EQ( OPTIX_COMPILE_DEBUG_LEVEL_FULL, 0x2352 );
}

class EnumOptixProgramGroupKind : public ::testing::Test
{
};

TEST_F( EnumOptixProgramGroupKind, OPTIX_PROGRAM_GROUP_KIND_RAYGEN )
{
    ASSERT_EQ( OPTIX_PROGRAM_GROUP_KIND_RAYGEN, 0x2421 );
}

TEST_F( EnumOptixProgramGroupKind, OPTIX_PROGRAM_GROUP_KIND_MISS )
{
    ASSERT_EQ( OPTIX_PROGRAM_GROUP_KIND_MISS, 0x2422 );
}

TEST_F( EnumOptixProgramGroupKind, OPTIX_PROGRAM_GROUP_KIND_EXCEPTION )
{
    ASSERT_EQ( OPTIX_PROGRAM_GROUP_KIND_EXCEPTION, 0x2423 );
}

TEST_F( EnumOptixProgramGroupKind, OPTIX_PROGRAM_GROUP_KIND_HITGROUP )
{
    ASSERT_EQ( OPTIX_PROGRAM_GROUP_KIND_HITGROUP, 0x2424 );
}

TEST_F( EnumOptixProgramGroupKind, OPTIX_PROGRAM_GROUP_KIND_CALLABLES )
{
    ASSERT_EQ( OPTIX_PROGRAM_GROUP_KIND_CALLABLES, 0x2425 );
}

class EnumOptixProgramGroupFlags : public ::testing::Test
{
};

TEST_F( EnumOptixProgramGroupFlags, OPTIX_PROGRAM_GROUP_FLAGS_NONE )
{
    ASSERT_EQ( OPTIX_PROGRAM_GROUP_FLAGS_NONE, 0x0 );
}

class EnumOptixTraversableGraphFlags : public ::testing::Test
{
};

TEST_F( EnumOptixTraversableGraphFlags, OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_ANY )
{
    ASSERT_EQ( OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_ANY, 0 );
}

TEST_F( EnumOptixTraversableGraphFlags, OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_GAS )
{
    ASSERT_EQ( OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_GAS, 0x1 );
}

TEST_F( EnumOptixTraversableGraphFlags, OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_LEVEL_INSTANCING )
{
    ASSERT_EQ( OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_LEVEL_INSTANCING, 0x2 );
}

class EnumOptixExceptionCodes : public ::testing::Test
{
};

TEST_F( EnumOptixExceptionCodes, OPTIX_EXCEPTION_CODE_STACK_OVERFLOW )
{
    ASSERT_EQ( OPTIX_EXCEPTION_CODE_STACK_OVERFLOW, -1 );
}

TEST_F( EnumOptixExceptionCodes, OPTIX_EXCEPTION_CODE_TRACE_DEPTH_EXCEEDED )
{
    ASSERT_EQ( OPTIX_EXCEPTION_CODE_TRACE_DEPTH_EXCEEDED, -2 );
}

class EnumOptixExceptionFlags : public ::testing::Test
{
};

TEST_F( EnumOptixExceptionFlags, OPTIX_EXCEPTION_FLAG_NONE )
{
    ASSERT_EQ( OPTIX_EXCEPTION_FLAG_NONE, 0x0 );
}

TEST_F( EnumOptixExceptionFlags, OPTIX_EXCEPTION_FLAG_STACK_OVERFLOW )
{
    ASSERT_EQ( OPTIX_EXCEPTION_FLAG_STACK_OVERFLOW, 0x1 );
}

TEST_F( EnumOptixExceptionFlags, OPTIX_EXCEPTION_FLAG_TRACE_DEPTH )
{
    ASSERT_EQ( OPTIX_EXCEPTION_FLAG_TRACE_DEPTH, 0x2 );
}

TEST_F( EnumOptixExceptionFlags, OPTIX_EXCEPTION_FLAG_USER )
{
    ASSERT_EQ( OPTIX_EXCEPTION_FLAG_USER, 0x4 );
}

class EnumOptixQueryFunctionTableOptions : public ::testing::Test
{
};

TEST_F( EnumOptixQueryFunctionTableOptions, OPTIX_QUERY_FUNCTION_TABLE_OPTION_DUMMY )
{
    ASSERT_EQ( OPTIX_QUERY_FUNCTION_TABLE_OPTION_DUMMY, 0x0 );
}
