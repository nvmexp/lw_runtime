
//
//  Copyright (c) 2019 LWPU Corporation.  All rights reserved.
//
//  LWPU Corporation and its licensors retain all intellectual property and proprietary
//  rights in and to this software, related documentation and any modifications thereto.
//  Any use, reproduction, disclosure or distribution of this software and related
//  documentation without an express license agreement from LWPU Corporation is strictly
//  prohibited.
//
//  TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED *AS IS*
//  AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS OR IMPLIED,
//  INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS BE LIABLE FOR ANY
//  SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT
//  LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF
//  BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS) ARISING OUT OF THE USE OF OR
//  INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS BEEN ADVISED OF THE POSSIBILITY OF
//  SUCH DAMAGES
//

#include <optix_types.h>

struct Params
{
    unsigned int*          payloads;
    OptixTraversableHandle handle;
    OptixRayFlags          rayFlags;
    OptixVisibilityMask    visibilityMask;
    float                  tMin;
    float                  tMax;
#ifdef OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE
    char* covered;
#endif  // OPTIX_OPTIONAL_FEATURE_TEST_CALL_COVERAGE
};

enum PROGRAM_TYPE_PAYLOADS
{
    PROGRAM_TYPE_PAYLOAD_RG = 1 << 0,
    PROGRAM_TYPE_PAYLOAD_IS = 1 << 1,
    PROGRAM_TYPE_PAYLOAD_CH = 1 << 2,
    PROGRAM_TYPE_PAYLOAD_AH = 1 << 3,
    PROGRAM_TYPE_PAYLOAD_MS = 1 << 4,
    PROGRAM_TYPE_PAYLOAD_EX = 1 << 5,
    PROGRAM_TYPE_PAYLOAD_DC = 1 << 6,
    PROGRAM_TYPE_PAYLOAD_CC = 1 << 7
};

enum PAYLOAD_FIELD_DIR_AND_ORIGIN
{
    PAYLOAD_IS_DIRECTION = 0,
    PAYLOAD_IS_ORIGIN,
    PAYLOAD_CH_DIRECTION,
    PAYLOAD_CH_ORIGIN,
    PAYLOAD_AH_DIRECTION,
    PAYLOAD_AH_ORIGIN,
    PAYLOAD_MS_DIRECTION,
    PAYLOAD_MS_ORIGIN
};

enum PAYLOAD_FIELD_PROGRAM_FLAGS_AND_MASK
{
    PAYLOAD_IS_PROGRAM_FLAGS = 0,
    PAYLOAD_IS_PROGRAM_MASK,
    PAYLOAD_CH_PROGRAM_FLAGS,
    PAYLOAD_CH_PROGRAM_MASK,
    PAYLOAD_AH_PROGRAM_FLAGS,
    PAYLOAD_AH_PROGRAM_MASK,
    PAYLOAD_MS_PROGRAM_FLAGS,
    PAYLOAD_MS_PROGRAM_MASK
};

enum PAYLOAD_FIELD_RAY_EXTENT
{
    PAYLOAD_IS_RAY_EXTENT_TMIN = 0,
    PAYLOAD_IS_RAY_EXTENT_TMAX,
    PAYLOAD_CH_RAY_EXTENT_TMIN,
    PAYLOAD_CH_RAY_EXTENT_TMAX,
    PAYLOAD_AH_RAY_EXTENT_TMIN,
    PAYLOAD_AH_RAY_EXTENT_TMAX,
    PAYLOAD_MS_RAY_EXTENT_TMIN,
    PAYLOAD_MS_RAY_EXTENT_TMAX
};
