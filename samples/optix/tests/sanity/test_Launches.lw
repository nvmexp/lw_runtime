//
// Copyright (c) 2019, LWPU CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of LWPU CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROLWREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#include <optix.h>

#include "test_Launches.h"

__constant__ Params params;

// Params-free set
extern "C" __global__ void __raygen__rg()
{
}

extern "C" __global__ void __exception__ex()
{
}

extern "C" __global__ void __miss__ms()
{
}

extern "C" __global__ void __closesthit__ch()
{
}

extern "C" __global__ void __anyhit__ah()
{
}

extern "C" __global__ void __intersection__is()
{
}

extern "C" __global__ void __direct_callable__dc()
{
}

extern "C" __global__ void __continuation_callable__cc()
{
}

// set with Params
extern "C" __global__ void __raygen__rg_withParams()
{
    unsigned int i = params.foo;
    printf( "%d", i );
}

extern "C" __global__ void __exception__ex_withParams()
{
    unsigned int i = params.foo;
    printf( "%d", i );
}

extern "C" __global__ void __miss__ms_withParams()
{
    unsigned int i = params.foo;
    printf( "%d", i );
}

extern "C" __global__ void __closesthit__ch_withParams()
{
    unsigned int i = params.foo;
    printf( "%d", i );
}

extern "C" __global__ void __anyhit__ah_withParams()
{
    unsigned int i = params.foo;
    printf( "%d", i );
}

extern "C" __global__ void __intersection__is_withParams()
{
    unsigned int i = params.foo;
    printf( "%d", i );
}

extern "C" __global__ void __direct_callable__dc_withParams()
{
    unsigned int i = params.foo;
    printf( "%d", i );
}

extern "C" __global__ void __continuation_callable__cc_withParams()
{
    unsigned int i = params.foo;
    printf( "%d", i );
}
