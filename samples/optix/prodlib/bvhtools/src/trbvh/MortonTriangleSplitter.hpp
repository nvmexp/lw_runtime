// Copyright LWPU Corporation 2013
// TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
// *AS IS* AND LWPU AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
// OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL LWPU OR ITS SUPPLIERS
// BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
// WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
// BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PELWNIARY LOSS)
// ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF LWPU HAS
// BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES

#pragma once
#include <prodlib/bvhtools/src/BuildingBlock.hpp>
#include "MortonTriangleSplitterKernels.hpp"
#include <prodlib/bvhtools/src/bounds/ApexPointMap.hpp>

namespace prodlib
{
namespace bvhtools
{
//------------------------------------------------------------------------
// Building block implementing the triangle splitter described in
// the following paper:
//
//   "Fast Parallel Construction of High-Quality Bounding Volume Hierarchies"
//   Tero Karras, Timo Aila
//   High Performance Graphics 2013
//
// From N triangles generates N or more output primitives.
// Some of the output primitives may correspond directly to the input
// triangles, while others are stored as explicit PrimitiveAABBs.

class MortonTriangleSplitter : public BuildingBlock
{
public:
    struct Config
    {
        LwdaUtils*  lwca;                       // Non-NULL => execute on LWCA.
        int         maxInputTris;               // Maximum size of inTriRange.
        int         maxOutputPrims;             // Maximum number of primitives to output (at least maxInputTris).

        float       splitBeta;                  // Splitting factor. The splitter generates numTriangles * (1 + splitBeta) primitives.
        int         splitTuningRounds;          // Number of bisection rounds to find D. Larger => more effective use of allotted splits. At least one.
        float       splitPriorityX;             // Parameter X in heuristic triangle priority formula (Equation 5).
        float       splitPriorityY;             // Parameter Y in heuristic triangle priority formula (Equation 5).
        int         splitMaxAABBsPerTriangle;   // Maximum number of PrimitiveAABBs to create for a given triangle (at least one).
        float       splitEpsilon;               // 0.01 = shrink AABB by 1% from each side when selecting a split plane.

                                                        // Size                 Description
        BufferRef<PrimitiveAABB>        outSplitAABBs;  // = min(maxOutputPrims,(maxOutputPrims-maxInputTris)*2) Explicit PrimitiveAABBs generated by the splitter.
        BufferRef<int>                  outPrimIndices; // = maxOutputPrims     List of output primitive indices. See ModelPointers::loadPrimitiveAABB() for details.
        BufferRef<Range>                outPrimRange;   // = 1                  Range of output primitives generated. Always starts at 0.
        BufferRef<>                     tempBuffer;     // = ~4*maxInputTris    Temporary buffer for LWCA implementation.        

        BufferRef<const int>            inTriOrder;     // 0 or >= maxInputTris Input triangle indices, referenced by inTriRange. EmptyBuf => not reordered.
        ModelBuffers                    inModel;        // <varies>             Input model.
        BufferRef<const ApexPointMap>   inApexPointMap; // <varies>             Produced by ApexPointMapConstructor.

        Config(void)
        {
            lwca                        = NULL;
            maxInputTris                = 1;
            maxOutputPrims              = 0;

            splitBeta                   = 0.3f;
            splitTuningRounds           = 4;
            splitPriorityX              = 2.0f;
            splitPriorityY              = 0.333f;
            splitMaxAABBsPerTriangle    = 32;
            splitEpsilon                = 0.01f;
        }
    };

public:
                            MortonTriangleSplitter  (void) {}
    virtual                 ~MortonTriangleSplitter (void) {}

    virtual const char*     getName                 (void) const { return "MortonTriangleSplitter"; }
    void                    configure               (const Config& cfg);
    void                    execute                 (BufferRef<const Range> inTriRange); // inTriRange specifies the range of input primitives in inTriOrder. EmptyBuf => (0, maxInputTris).

private:
    void                    execDevice              (void);
    void                    execHost                (void);

private:
                            MortonTriangleSplitter  (const MortonTriangleSplitter&); // forbidden
    MortonTriangleSplitter& operator=               (const MortonTriangleSplitter&); // forbidden

private:
    Config                  m_cfg;
    BufferRef<const Range>  m_inTriRange;

    // Temp buffers.

    BufferRef<MortonSplitGlobals>   m_globals;
    BufferRef<float>                m_priorities;
};

//------------------------------------------------------------------------
} // namespace bvhtools
} // namespace prodlib
