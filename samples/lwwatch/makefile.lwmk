##############################################################################
# LwWatch Debugger Extension Makefile
#
# windows-specific lwmake fragment used for building the lw.dll/lw.exe.
##############################################################################

# Setup LWPU specific options (Warning level 3 and link time code gen LTCG)
LW_COPT_WARN := -W3 -WX
LW_LTCG := 1

ifdef RELEASE_BRANCH
  BRANCH_DIR := $(RELEASE_BRANCH)
else
  BRANCH_DIR := dev/gpu_drv/tahoma_a
endif

include $(LW_SOURCE)/drivers/common/build/lwCommon.lwmk
include $(LW_SOURCE)/drivers/common/build/lwconfig.lwmk

# To make the standalone lwwatch tool run 'lwmake type=standalone'
type ?=

ifneq ($(type), $(filter $(type),standalone ''))
  $(error Unknown type. Did you mean type=standalone for the windows standalone lwwatch tool?. Don't specify type if you're compiling for dll)
endif

ifdef LWCFG_INITIALIZED
LW_WARNINGS_AS_ERRORS = 0
ifeq ($(type),standalone)
  include makefile-tools-windows-standalone.lwmk
else
  include makefile-tools.lwmk
endif

LINKSASS := 1
ifdef USE_SASS
  LINKSASS := $(USE_SASS)
endif

PMU_DEBUG ?= 0

CFLAGS += -DWIN32_LEAN_AND_MEAN=1
CFLAGS += -DDEPRECATE_DDK_FUNCTIONS=1
CFLAGS += -D_CRT_SELWRE_NO_WARNINGS
CFLAGS += -EHsc -GF -GR- -GS -Gm- -Oy- -Gy
CFLAGS += -D_STATIC_CPPLIB
CFLAGS += -DDRF_WINDOWS
CFLAGS += -DLWWATCH_DEBUG_OUTPUT_CALLBACK -DFMODEL_REG08_BUG -DHWINIT_ENABLE -DOS_win32
ifeq ($(type),standalone)
  CFLAGS += -D_WIN32_WINNT=0x0602
  LW_DEFINES += _CONSOLE
  LFLAGS += -subsystem:console
  CFLAGS += -wd4302                # type cast': truncation from 'LPSTR' to 'WORD'
  CFLAGS += -wd4090                # function': different 'const' qualifiers
else
  CFLAGS += -DSIGDUMP_ENABLE
endif

ifeq ($(LW_BUILD_TYPE),debug)
  CFLAGS += -D_DEBUG
else
  CFLAGS += -DNDEBUG
endif

ifeq ($(LW_TARGET_ARCH),x86)
  CFLAGS += -DWIN32 -D_X86_=1 -Di386=1
else
  CFLAGS += -DWIN32 -D_WIN64 -D_AMD64_ -DAMD64
endif

CFLAGS += -DLINKSASS=$(LINKSASS)

ifdef PMU_DEBUG
  CFLAGS += -DPMU_DEBUG=$(PMU_DEBUG)
endif

LWWATCHCFG_OUTPUTDIR = $(OUTPUTDIR)

ifeq ($(type), standalone)
  LWWATCHCFG_PROFILE = windows-standalone
else
  LWWATCHCFG_PROFILE = windows
endif

include $(LW_SOURCE)/apps/lwwatch/config/makefile.mk

ifneq ($(type),standalone)
  LW_DEFINES += XP_WIN
endif

LW_DEFINES += LWWATCH

ifeq ($(type),standalone)
  LW_DEFINES += USERMODE
  LW_DEFINES += WINDOWS_STANDALONE
endif

ifdef LWWATCHCFG_INITIALIZED
  # include the generated g_sources.mk
  include $(OUTPUTDIR)/g_sources.mk
endif # LWWATCHCFG_INITIALIZED

LW_INCLUDES += $(OUTPUTDIR)
LW_INCLUDES += .
LW_INCLUDES += inc
LW_INCLUDES += os/win/inc
LW_INCLUDES += manual-parser/libdrf-lwpu

LW_INCLUDES += $(LW_SOURCE)/sdk/lwpu/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/swref
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/hwref
LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc/displayport
LW_INCLUDES += $(LW_SOURCE)/drivers/resman/kernel/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/resman/arch/lwalloc/common/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/resman/inc/libraries
LW_INCLUDES += $(LW_SOURCE)/drivers/resman/src/libraries/lwlog/inc
LW_INCLUDES += $(LW_SOURCE)/drivers/common/shared/inc
LW_INCLUDES += $(LW_SOURCE)/tools/pmlsplitter/bin/include
LW_INCLUDES += $(LW_SOURCE)/uproc/os/libos-v2.0.0/debug

ifeq ($(type),standalone)
  LW_INCLUDES += $(LW_SOURCE)/apps/lwwatch/os/win/inc/standalone/
  LW_INCLUDES += $(LW_SOURCE)/apps/lwwatch/os/common/usermode/
  ifeq ($(LW_BUILD_TYPE),debug)
    libraryDirs += $(LW_SOURCE)/apps/lwwatch/os/win/lib/standalone/debug
  else
    libraryDirs += $(LW_SOURCE)/apps/lwwatch/os/win/lib/standalone/release
  endif
endif

ifeq ($(LINKSASS),1)
  LW_INCLUDES += $(LW_SOURCE)/drivers/common/HW/sass3lib
endif

LW_INCLUDES += $(LW_SOURCE)/drivers/common/inc

_pmlsplitter_dir = $(LW_SOURCE)/tools/pmlsplitter/bin/windows/v100

ifeq ($(LW_TARGET_ARCH),x86)
  ifeq ($(LW_BUILD_TYPE),debug)
    libraryDirs += $(_pmlsplitter_dir)/Win32/Debug
  else
    libraryDirs += $(_pmlsplitter_dir)/Win32/Release
  endif
else
  ifeq ($(LW_BUILD_TYPE),debug)
    libraryDirs += $(_pmlsplitter_dir)/x64/Debug
  else
    libraryDirs += $(_pmlsplitter_dir)/x64/Release
    libraryDirs += $(_pmlsplitter_dir)/Win32/Release
  endif
endif

include $(LW_SOURCE)/apps/lwwatch/manual-parser/libdrf-lwpu/drf.lwmk

# Ensure below makefiles are included after lwwatch-config.mk is generated
ifdef LWWATCHCFG_INITIALIZED
  #
  # Include source files from drivers/common/shared
  # Tell the makefile to append the values to LW_{DEFINES,INCLUDES} and SOURCES
  #
  LWPORT_IS_KERNEL_BUILD := 0
  # sync module required to include various RM headers
  LWPORT_ENABLED_MODULES += sync
  LW_RMSHARED_DISABLE_RESSERV := 1
  LW_RMSHARED_DISABLE_LWTLS := 1
  LW_RMSHARED_DISABLE_LWLOCKVAL := 1
  LW_RMSHARED_APPEND_TO_GLOBAL_VARS := 1
  include $(LW_SOURCE)/drivers/common/shared/shared.lwmk
  LFLAGS += $(LW_RMSHARED_LDFLAGS)

  # use the precompiled header built from precomp.h for all objects built from SOURCES
  #$(eval $(call REGISTER_PCH,$(call BUILD_OBJECT_LIST,$(SOURCES)),$(LW_SOURCE)/tools/lwwddm/precomp.cpp))

  # add the lwdebug files and generate the protobuf headers
  include lwdebug.lwmk

endif # LWWATCHCFG_INITIALIZED

ifeq ($(type),standalone)
  LFLAGS += -INCREMENTAL:NO
else
  LFLAGS += -dll
  LFLAGS += -opt:ref
  LFLAGS += -map:$(OUTPUTDIR)/$(DRIVER_BASE_NAME).map
  LFLAGS += -nodefaultlib
  LFLAGS += -OUT:./$@
  LFLAGS += -def:$(DRIVER_BASE_NAME).def
endif

ifneq ($(type),standalone)
  LFLAGS += $(OUTPUTDIR)/lwwatch.res
endif

LFLAGS += $(addprefix -libpath:,$(libraryDirs))

libraries += gdi32.lib
libraries += user32.lib
libraries += dbgeng.lib
libraries += Advapi32.lib

ifeq ($(type),standalone)
  libraries += Shlwapi.lib
  ifeq ($(LW_BUILD_TYPE),debug)
    libraries += lwr0libd.lib
  else
    libraries += lwr0lib.lib
  endif
endif


# Winsocket for gsp/falcon debugger
libraries += Ws2_32.lib

# Add pmlsplitter.lib in the flow.
libraries += pmlsplitter.lib

ifeq ($(LW_BUILD_TYPE),debug)
  libraries += libcmtd.lib
  libraries += libcpmtd.lib
else
  libraries += libcmt.lib
  libraries += libcpmt.lib
endif
libraries += oldnames.lib
libraries += kernel32.lib

ifeq ($(PMU_DEBUG),1)
  LFLAGS += lib/falconDebug.lib
endif

DRIVER_BASE_NAME := lw
ifeq ($(type),standalone)
  _output_file_type := exe
else
  _output_file_type := dll
endif

targetList_pass1 := $(OUTPUTDIR)/$(DRIVER_BASE_NAME).$(_output_file_type)
targetList_pass2 :=

ifneq ($(type),standalone)
ifeq ($(LW_GEN_BSC),1)
  targetList_pass1 += $(LW_BSC_FILE)
endif

ifeq ($(LW_DO_INSTALL),1)
  targetList_pass2 += $(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).$(_output_file_type)
  targetList_pass2 += $(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).map
  ifeq ($(LW_GEN_PDB),1)
    targetList_pass2 += $(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).pdb
  endif
endif

$(OUTPUTDIR)/$(DRIVER_BASE_NAME).map: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).$(_output_file_type)
$(OUTPUTDIR)/$(DRIVER_BASE_NAME).pdb: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).$(_output_file_type)

endif # ifneq ($(type),standalone)

LW_REQUIRED_DIRS += $(libraryDirs)
LW_REQUIRED_DIRS += $(LW_INCLUDES)

########################################################################################################
# Break our build into 3 passes that cannot be parallelized
#   In pass 1, we do any subdirectories, this builds any .libs or whatever that are out of date
#   In pass 2, we build our main targets, DLLs, EXEs etc.
#   In pass 3, we copy our built items to our install and symbol directories
#
# We do this in 3 passes by calling this makefile relwrsively so that our time stamps on dependencies
# are re-evaluated.  If we try to do all this in 1 pass during a parallel build, we'd find that subdirs
# could trigger a .lib to be rebuilt -- but we wouldn't relink the DLL because when the makefile for
# this directory was STARTED... the .lib was not out of date.  [It was only out of date AFTER the child
# directory was complete.]
########################################################################################################
build: buildSequence

buildSequence:
	@$(MAKE) -f makefile.lwmk LW_TARGET_OS=$(LW_TARGET_OS) LW_TARGET_ARCH=$(LW_TARGET_ARCH) LW_BUILD_TYPE=$(LW_BUILD_TYPE) pass1
	@$(MAKE) -f makefile.lwmk LW_TARGET_OS=$(LW_TARGET_OS) LW_TARGET_ARCH=$(LW_TARGET_ARCH) LW_BUILD_TYPE=$(LW_BUILD_TYPE) pass2

pass1: $(targetList_pass1)
pass2: $(targetList_pass2)

# Code a couple of dependencies manually... since we don't auto-generate dependencies for RC files
$(OUTPUTDIR)/lwwatch.res: lwwatch.rc

$(OUTPUTDIR)/$(DRIVER_BASE_NAME).dll: $(OBJECTS) $(OUTPUTDIR)/lwwatch.res
	$(FILEECHO) $(OUTPUTDIR)/linkParameters.txt $(strip $(LFLAGS)) $(OBJECTS) $(libraries) -out:$@
	$(call_linker)

$(OUTPUTDIR)/$(DRIVER_BASE_NAME).exe: $(OBJECTS)
	@$(ECHO) Building $@...
	$(FILEECHO) $(OUTPUTDIR)/linkParameters.txt $(strip $(LFLAGS)) $(OBJECTS) $(libraries) -out:$@
	$(call_linker)
	$(MKDIR) $(LW_INSTALL_DIR)
	$(COPY) $(LW_SOURCE)/apps/lwwatch/os/win/standalone/lwr0int64.sys $(OUTPUTDIR)/lwr0int64.sys
	$(COPY) $(OUTPUTDIR)/$(DRIVER_BASE_NAME).exe $(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).exe
	$(COPY) $(OUTPUTDIR)/lwr0int64.sys $(LW_INSTALL_DIR)/lwr0int64.sys

$(LW_INSTALL_DIR)/$(DRIVER_BASE_NAME).$(_output_file_type): $(OUTPUTDIR)/$(DRIVER_BASE_NAME).$(_output_file_type)
	$(standard_install)

$(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).pdb: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).pdb
	$(standard_install)

$(LW_SYMBOL_DIR)/$(DRIVER_BASE_NAME).map: $(OUTPUTDIR)/$(DRIVER_BASE_NAME).map
	$(standard_install)

# These extra rules are required to properly pull the LwDebug sources in from
# the common source, instead of accidentally picking up the (old) local copies
LWDEBUG_ROOT := $(LW_SOURCE)/drivers/common/lwdebug

$(OUTPUTDIR)/%.obj: $(LWDEBUG_ROOT)/zlib/%.c
	$(call_C_compiler)

$(OUTPUTDIR)/%.obj: $(LWDEBUG_ROOT)/lib/%.c
	$(call_C_compiler)

endif # LWCFG_INITIALIZED

include $(LW_SOURCE)/drivers/common/build/lwCommonRules.lwmk
