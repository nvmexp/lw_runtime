#
# A list of all chips.  Chips with a 1 are checked, those with a 0 are skipped.
#
check_hash(\%cfg_verify_chips,
"gk104" => 1,
"gk106" => 1,
"gk107" => 1,
"gk110" => 1,
"gk110b" => 1,
"gk110c" => 1,
"gk208" => 1,
"gm107" => 1,
"gm108" => 1,
"gm200" => 1,
"gm204" => 1,
"gm206" => 1,
"gp100" => 1,
"gp102" => 1,
"gp104" => 1,
"gp106" => 1,
"gp107" => 0,
"gp108" => 0,
"gv100" => 1,
"tu102" => 1,
"tu104" => 1,
"tu106" => 1,
"tu116" => 1,
"tu117" => 1,
"ga100" => 1,
"ga102" => 1,
"ga103" => 1,
"ga104" => 1,
"ga105" => 1,
"ga106" => 1,
"ga107" => 1,
"ga114" => 1,
"ad102" => 1,
"gh100" => 1,
"gh202" => 1,
"gb100" => 1,
"t124"  => 1,
);

#
# These two hashs allow mcheck to automatically create manual
# snapshots from <chip>/net/netlist.h.  This is typically used
# for chips once they stabalize in emulation but still are in
# emulation.  Once they tape out, we should be able to remove
# them and lower the mcheck runtime.
#
# DVS is similar but for the DVS netlist tagged DVS.
#
# The value assigned should be a COMPAT_ bitmask.  See mcheck.pl.
#
# We only run snapshots on the chips_a/chips_hw branch as that is where emulation
# takes place.
#
if ((fastgetcwd =~ /chips_a/) || (fastgetcwd =~ /chips_hw/))
{
    # [mcheck2] current not support COMPAT_IGNORE_ADDED_ALL
    #   use constant COMPAT_ENABLED => 0x01;
    #   use constant COMPAT_IGNORE_PROD => 0x02;
    #   use constant COMPAT_IGNORE_ADDED_BITFIELDS => 0x04;
    #   use constant COMPAT_IGNORE_ADDED_ALL => 0x08;
    %cfg_enforce_emulation_compat = (
        # "gm107" => COMPAT_ENABLED | COMPAT_IGNORE_PROD,
        # "gv100" => COMPAT_ENABLED | COMPAT_IGNORE_PROD | COMPAT_IGNORE_ADDED_BITFIELDS,
    );

    # list any emulation netlists to skip in the cfg_enforce_emulation_compat pass
    %cfg_emulation_netlist_skip = (
        # Syntax : "chip"  => "netlist number separated by comma"
        # "gm107" => "19,21",
    );
}

#
# Some chips can be enabled for warnings only.  This is useful for
# cases where the //hw tree takes integrates from a fluid tree,
# and RM shares the code base.
#
# This can be overridden with -G <gpulist>
#
%cfg_warning_chips = (
    # Example:
    #   "gf119" => 1,
);

#
# Mapping chip name to alias for #include file <.../chip/dev_foo.h> cross checking
#
check_hash(\%cfg_include_chip_aliases,
    # Example:
    #   "igt206" => "mcp77",
);

#
# Some files are excluded, mostly ucode files.  This is done
# both for speed, and to make the code coverage results more
# accurate.
#
check_hash(\%cfg_excluded_files,
    "exts.c" => 1,
    "os.c"   => 1,
    "osMods.c"   => 1,
    "osWin.c"   => 1,
    "userWinOs.c"   => 1,
    "dfagen.c"  => 1,
);

#
# Exceptions for matching functions in the first pass of mcheck
# Child functions must themselves be found during the parsing
# step to be added to the list to be checked.  This covers almost
# all common code cases.  Therefore this list should stay very
# short.
#
check_hash(\%cfg_child_exceptions,
);

#
# Defines used when scanning files
#
$cfg_scan_cpp_defines = "-DLW_VERIF_FEATURES -DDEBUG -DKDA_BUFFER_ENABLED";

#
# Known failues that are either acceptable (listed first) or temporary until the code can be fixed.
# Please list a bug number for things that are not on a SCS and you cannot get to now.
#
# Rules should be written as specifically as possible so new problems are not masked.
#
# Acceptable syntax:
#   "full-define,function" => 1,
#      * for all chips ignore full-define in function
#   "full-define,function,chip" => 1,
#      * for the listed chip ignore full-define in function
#   "function,chip" => "regex-pattern"
#      * for the listed chip, apply s/regex-pattern// in function.  If the result differs
#        from the original then then this define is ignored.  This is per chip lwrrently
#        as it is easy to write too broad of a rule.
#
check_exception_hash(\%cfg_known_failures,

## Exception for GpuArchitecture function (for all chips)
"GpuArchitecture,[gk106,gk208,gm200,gk107,gv100,gk104,t124,gm107,gp100,gp102,gp104,gp106,ga103,gm206,gh202,gm204,gm108,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PMC_BOOT_0_\\w*)",

## [mcheck2] new errors captured by mcheck2 #################################
#
# Lwwatch register access was protected by old mcheck script.  But the expansion of DRF macros
# was broken.  When we enabled mcheck2 for lwwatch, it found out some 100+ more register
# collisions, those are temporarily ignored by new added exception rules.
# When modification are required for the rules, it's more suggested to re-hal the target
# function and remove the WAR here.
#
"_clkReadLDIV_GF100,[gv100,gp100,gp102,gp104,gp106,gk110b,gk110c,gm107,gk110,gm206,gh202,gm204,gm108,gm200,ga103,tu106,tu104,tu102,gk208,gk106,gk107,gk104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu116,tu117]" => "LW_PTRIM_SYS_GPC2CLK_OUT_\\w*",
"_clkGetOneSrcPllFreq_FERMI,[gk106,gk208,gm200,gk107,gv100,gk104,gf119,t124,gm107,gp100,gp102,gp104,gp106,gk110b,gk110,tu117,ga103,gm206,gh202,gm204,gm108,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu106,tu104,tu102,tu116,gk110c]" => "(LW_PDISP_CLK_\\w*)|(LW_PTRIM_SYS_\\w*)|(LW_PTRIM_SYS_GPCPLL_C\\w*)",
"pmuImblk_GK104,[gk110,gk110b,gk110c,gk208,gk106,gf100,gk107,gk104,t124,gf119]" => "LW_PPWR_FALCON_IMCTL_CMD",
"pmuImtag_GK104,[gk110,gk110b,gk110c,gk208,gk106,gf100,gk107,gk104,t124,gf119]" => "LW_PPWR_FALCON_IMCTL_CMD",
## end of mcheck2 exceptions ################################################

    #
    # EXPECTED FAILURES - These are not bugs.  Please add hacks to the BOTTOM.
    #

# These registers are conditionally skipped on gk208
"LW_PFIFO_ENGINE_GRCOPY,fifoCheckEngStates_GK104,gk208" => 1,
"LW_PFIFO_ENGINE_MSENC,fifoCheckEngStates_GK104,gk208" => 1,

# this register is conditionally skipped on gp100
"elpgDisplayMsBlockerAndInterruptState_GP10X,gp100" => "LW_PSEC_BLOCKER_BAR0_CTRL",

# This register is skipped for Hopper and later until manuals are updated
"elpgDisplayEngHoldoffPendingStatus_GK104,[gh100,gh202]" => "(LW_THERM_ENG_HOLDOFF_STATUS)",
"elpgDisplayEngHoldoffStatus_GK104,[gh100,gh202,gb100]" => "(LW_THERM_ENG_HOLDOFF)|(LW_THERM_ENG_HOLDOFF_STATUS)",
"elpgStart_AD102,gh202" => "(LW_PPWR_PMU_PG_SW_CLIENT_ENG_ST)|(LW_PPWR_PMU_PG_SW_CLIENT_ENG_BUSY_CLR)",
"elpgStop_AD102,gh202" => "(LW_PPWR_PMU_PG_SW_CLIENT_ENG_BUSY_SET)",
"elpgDisplayPgEngConfig_TU10X,[gb100,gh202]" => "(LW_PPWR_PMU_PG_ON_TRIGGER_MASK)|(LW_PPWR_PMU_PG_ON_TRIGGER_MASK_1)|(LW_PPWR_PMU_PG_ON_TRIGGER_MASK_2)",
"elpgDisplayPgIntrStat_TU10X,[gb100,gh202]" => "(LW_PPWR_PMU_PG_MISC_IDLE_SNAP_IDX)",

# these registers are conditionally skipped in the code for gv100 (i.e. not accessed)
# saves code duplication for a single missing register in large functions
"LW_PVTRIM_SYS_DISPCLK_OUT_SWITCH,clkGetInputSelReg_GK104,[gv100]" => 1,
"LW_PVTRIM_SYS_DISPCLK_OUT_LDIV,clkGetDividerRegOffset_GK104,[gv100]" => 1,
"LW_PVTRIM_SYS_SPDIFCLK_OUT_SWITCH,clkGetInputSelReg_GK104,[gv100]" => 1,
"LW_PVTRIM_SYS_SPDIFCLK_OUT_LDIV,clkGetDividerRegOffset_GK104,[gv100]" => 1,
"LW_PTRIM_SYS_MSDCLK_OUT_LDIV,clkGetDividerRegOffset_GK104,[gv100]" => 1,
"LW_PTRIM_SYS_MSDCLK_OUT_SWITCH,clkGetInputSelReg_GK104,[gv100]" => 1,

# AI jmannil??
"getInstanceMemoryAddrForIFB_GK104,[gv100,gk110b,gk110c,gm107,gk110,gm206,gh202,gm204,gm108,gm200,ga103,tu106,tu104,tu102,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu116,tu117]" => "LW_PBUS_IFB_BLOCK\\w*",

# These registers are skipped on gm107 to remove mcheck errors to help enable mcheck protection for lwwatch in DVS.
# They will eventually need to be fixed.
"LW_PGRAPH_PRI_GPC0_TPC0_TEX_TRM_DBG,_grGetTexParityCounts,gm107" => 1,

# L2 space restructure moved these registers for Maxwell. Adding exceptions until fixed.
"LW_LTS_PRI_STRIDE,fbIsMemReq_GK104,gm107" => 1,
"fbIsMemReq_GK104,gm107" => "LW_PLTCG_\\w*",

# These registers are skipped on gm200 to remove mcheck errors to help enable mcheck protection for lwwatch in DVS.
# They will eventually need to be fixed.
"LW_PGRAPH_PRI_GPC0_TPC0_TEX_TRM_DBG,_grGetTexParityCounts,gm200" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_TEX_TRM_DBG,_grGetTexParityCounts,gp100" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_TEX_TRM_DBG,_grGetTexParityCounts,gp107" => 1,
"LW_PGRAPH_PRI_GPC0_TPC0_TEX_TRM_DBG,_grGetTexParityCounts,gp108" => 1,
"instmemGetRamfcFormattedMemory_GK208,gm200" => "LW_RAMFC_\\w*",
"instmemGetRamfcFormattedMemory_GK208,gm204" => "LW_RAMFC_\\w*",
"instmemGetRamfcFormattedMemory_GK208,gm206" => "LW_RAMFC_\\w*",

# LW_FALCON_FECS_BASE is undefined gk208 onwards. Adding temporary exception.
"LW_PGRAPH_PRI_FECS_FALCON_IRQSSETC,fecsGetFalconBase_GK104" => 1,

# Temporary exceptions...
"clkGetInputSelReg_GK104,[gm200,gm204,gm206,gp100,gp102,gp104,gp106,gp107,gp108]" => "LW_PVTRIM_SYS_(DISPCLK|SPDIFCLK)_OUT_SWITCH",
"clkGetDividerRegOffset_GK104,[gm200,gm204,gm206,gp100,gp102,gp104,gp106,gp107,gp108]" => "LW_PVTRIM_SYS_(DISPCLK|SPDIFCLK)_OUT_LDIV",

# Clock tree HALs need to be reworked.
"clkReadAltClockSrc_GF100,[gp102,gp104,gp106]" => "LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_SLOWCLK_SWCLK",
"clkReadRefClockSrc_GM200,[gp102,gp104,gp106]" => "LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_SLOWCLK_SWCLK",
"dispPrintClkData_v02_01,[gp102,gp104,gp106]" => "LW_PV?TRIM_SYS_\\w+_REF_SWITCH_SLOWCLK_SWCLK",

# No disp falcon on GV100; needs to be excluded.
"falcphysDmaAccessCheck_GP10X,[gv100,ga103,gp102,gh202,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_FALCON_DISP_BASE)|(LW_PFB_PRI_MMU_PRIV_LEVEL_M\\w*)|(LW_PMC_ENABLE_PGRAPH_ENABLED)|(LW_PMC_ENABLE_PGRAPH)|(LW_PSEC_FALCON_IRQSSET)|(LW_PMC_ENABLE_SEC)|(LW_PSEC_FALCON_ENGINE)|(LW_PSEC_FALCON_RESET_PRIV_LEVEL_MASK)|(LW_FALCON_LWDEC_BASE)|(LW_FALCON_LWENC0_BASE)|(LW_PMC_ENABLE_LWENC0_ENABLED)|(LW_PMC_ENABLE_LWENC0)|(LW_FALCON_LWENC1_BASE)|(LW_PMC_ENABLE_LWENC_ENABLED)|(LW_PMC_ENABLE_LWENC)|(LW_PHDAFALCON_FALCON_CPUCTL_SRESET)|(LW_PHDAFALCON_FALCON_CPUCTL_HRESET)|(LW_PHDAFALCON_FALCON_CPUCTL)|(LW_PHDAFALCON_FALCON_CPUCTL_HALTED)|(LW_PLWENC_FBIF_TRANSCFG)",


# New exception after enabling all TU, GA, GH and GB chips to enable lwwatch for supported chips. Bug # 2970874
"_clkGetHBMPllFreqKHz_GV100,[gh202,gh100,tu102,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117]" => "(LW_PFB_FBPA_FBIO_HBMPLL_COEFF_PLDIV)",
"_clkIsVclk_GF100,[gk110b,gk110c,tu102,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PVTRIM_CLK_NAMEMAP_INDEX_VCLK)",
"dispPrintDisplayLowPowerMscgCounters_v04_01,[gh202,ga100,ga102,ga103,ga104,ga106,ga107,gh100]" => "(LW_PPWR_PMU_GPIO_1_INPUT_FBH_DWCF)|(LW_PPWR_PMU_GPIO_1_INPUT_FBH_DWCF_TRUE)|(LW_PPWR_PMU_GPIO_1_INPUT_IHUB_OK_TO_SWITCH)|(LW_PPWR_PMU_GPIO_1_INPUT_IHUB_OK_TO_SWITCH_TRUE)|(LW_PPWR_PMU_GPIO_1_INPUT_MEMPOOL_DRAINING)|(LW_PPWR_PMU_GPIO_1_INPUT_MEMPOOL_DRAINING_TRUE)|(LW_PPWR_PMU_GPIO_1_INPUT_MSPG_WAKE)|(LW_PPWR_PMU_GPIO_1_INPUT_MSPG_WAKE_TRUE)",
"clkGetInputSelReg_GV100,[gh100,gh202,tu102,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117]" => "(LW_PTRIM_SYS_LWD2CLK_OUT_SWITCH)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_DISPCLK)|(LW_PVTRIM_SYS_DISPCLK_ALT_SWITCH)|(LW_PTRIM_SYS_SYS2CLK_OUT_SWITCH)|(LW_PTRIM_CLK_NAMEMAP_INDEX_HUB2CLK)|(LW_PTRIM_SYS_HUB2CLK_OUT_SWITCH)|(LW_PTRIM_SYS_DRAMCLK_ALT_SWITCH)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_AZA2BITCLK)|(LW_PVTRIM_SYS_AZA2XBITCLK_OUT_SWITCH)|(LW_PTRIM_SYS_GPC2CLK_ALT_SWITCH)|(LW_PTRIM_SYS_XBAR2CLK_ALT_SWITCH)|(LW_PTRIM_SYS_UTILSCLK_OUT_SWITCH)|(LW_PTRIM_SYS_PWRCLK_OUT_SWITCH)|(LW_PTRIM_SYS_HOSTCLK_ALT_SWITCH)|(LW_PVTRIM_SYS_VCLK_ALT_SWITCH)",
"_fbReadDSColorFormatZBCindex_TU10X,[gh202,gh100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PGRAPH_PRI_GPC_SWDX_DSS_ZBC_C_FORMAT)",
"instmemGetRamfcFormattedMemory_GA100,[gh202,ga100,ga102,ga103,ga104,ga106,ga107,gh100]" => "(LW_RAMFC_PB_FETCH)|(LW_RAMFC_PB_FETCH_HI)|(LW_RAMFC_RESERVED20)|(LW_RAMFC_RESERVED21)",
"msencTestState_v06_00,[tu102,gh100,gp102,gh202,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117,gb100]" => "(LW_PLWENC_FALCON_IRQSTAT)|(LW_PLWENC_FALCON_IRQMASK)|(LW_PLWENC_FALCON_IRQMASK_GPTMR)|(LW_PLWENC_FALCON_IRQMASK_WDTMR)|(LW_PLWENC_FALCON_IRQMASK_MTHD)|(LW_PLWENC_FALCON_IRQMASK_CTXSW)|(LW_PLWENC_FALCON_IRQMASK_HALT)|(LW_PLWENC_FALCON_IRQMASK_EXTERR)|(LW_PLWENC_FALCON_IRQMASK_SWGEN0)|(LW_PLWENC_FALCON_IRQMASK_SWGEN1)|(LW_PLWENC_FALCON_IRQSTAT_GPTMR)|(LW_PLWENC_FALCON_GPTMRINT)|(LW_PLWENC_FALCON_GPTMRVAL)|(LW_PLWENC_FALCON_IRQSTAT_WDTMR)|(LW_PLWENC_FALCON_IRQSTAT_MTHD)|(LW_PLWENC_FALCON_MTHDDATA)|(LW_PLWENC_FALCON_MTHDID)|(LW_PLWENC_FALCON_MTHDID_ID)|(LW_PLWENC_FALCON_MTHDID_SUBCH)|(LW_PLWENC_FALCON_MTHDID_PRIV)|(LW_PLWENC_FALCON_IRQSTAT_CTXSW)|(LW_PLWENC_FALCON_IRQSTAT_HALT)|(LW_PLWENC_FALCON_IRQSTAT_EXTERR)|(LW_PLWENC_FALCON_IRQSTAT_SWGEN0)|(LW_PLWENC_FALCON_IRQSTAT_SWGEN1)|(LW_PLWENC_FALCON_IDLESTATE)|(LW_PLWENC_FALCON_IDLESTATE_FALCON_BUSY)|(LW_PLWENC_FALCON_FHSTATE)|(LW_PLWENC_FALCON_FHSTATE_FALCON_HALTED)|(LW_PLWENC_FALCON_FHSTATE_ENGINE_FAULTED)|(LW_PLWENC_FALCON_FHSTATE_STALL_REQ)|(LW_PLWENC_FALCON_ENGCTL)|(LW_PLWENC_FALCON_ENGCTL_ILW_CONTEXT)|(LW_PLWENC_FALCON_ENGCTL_STALLREQ)|(LW_PLWENC_FALCON_CPUCTL)|(LW_PLWENC_FALCON_CPUCTL_IILWAL)|(LW_PLWENC_FALCON_CPUCTL_HALTED)|(LW_PLWENC_FALCON_CPUCTL_STOPPED)|(LW_PLWENC_FALCON_ITFEN)|(LW_PLWENC_FALCON_ITFEN_CTXEN)|(LW_PLWENC_FALCON_ITFEN_MTHDEN)",
"_pmuImemWrite_GK104,[gk110b,gk110c,tu102,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PPWR_FALCON_IMEMC_BLK)",
"msencDumpImem_v06_00,[tu102,gh100,gp102,gh202,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117,gb100]" => "(LW_PLWENC_FALCON_IMEMD)|(LW_PLWENC_FALCON_IMEMC)|(LW_PLWENC_FALCON_IMEMT)|(LW_PLWENC_FALCON_IMEMC_OFFS)",
"psdlUseLwdec_GM20X,[gp100,gp102,gh202,gm204,gp106,gp104,ga100,ga102,ga103,ga104,ga106,gm206,gh100,gm200,gv100,ga107,ad102,gb100]" => "(LW_PLWDEC)",
"clkGetNafllFreqKHz_GA100,[gh202,ga100,ga102,ga103,ga104,ga106,ga107,gh100]" => "(LW_PTRIM_SYS_NAFLL_SYSLUT_DEBUG2_NDIV)|(LW_PTRIM_SYS_NAFLL_SYSNAFLL_COEFF_MDIV)",
"clkNafllLutRead_GA100,[ga103,gh202,ga100,ga102,gh100,ad102,ga104,ga106,ga107]" => "(LW_PTRIM_SYS_NAFLL_LTCLUT_READ_ADDR_OFFSET)",
"fbL2StateForCacheLines_GP100,[tu104,gp102,gh202,gp100,gp106,gh100,tu102,ga100,ga102,ga103,ga104,ga106,ga107,tu106,gp104,gv100,tu116,tu117]" => "(LW_PLTCG_LTC0_LTS0_TSTG_CST_RDI_INDEX_ADDRESS)",
"lwdecIsPrivBlocked_v05_00,[ga102,ga103,ga104,ga106,ga107,gh202,gh100]" => "(LW_PPRIV_SYS_PRI_MASTER_fecs2lwdec_pri0)|(LW_PPRIV_SYS_PRI_MASTER_fecs2lwdec_pri1)",
"clkReadAltSrcDIV_GF100,[gk110b,gk110c,gv100,gm107,gk208,gm206,gh202,gm204,gm108,gm200,ga103,tu106,tu104,tu102,gk110,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu116,tu117]" => "(LW_PTRIM_SYS_GPC2CLK_ALT_LDIV_ONESRC0DIV)|(LW_PTRIM_SYS_GPC2CLK_ALT_LDIV_ONESRC1DIV)",
"fbL2State_GM107,[tu102,gm107,gm206,gh202,gm204,gm108,gm200,ga103,tu106,tu104,gv100,gp102,gp100,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu116,tu117]" => "(LW_PLTCG_LTC0_LTS0_IQ_ROP_STATUS_0)|(LW_PLTCG_LTC0_LTS0_DSTG_CFG0_STATUS_SELECT)|(LW_PLTCG_LTC0_MISC_ROP_OUTRUN_STATUS_0)",
"pmuLoadData,[gm107,gm206,gh202,gm204,gm108,gh100,tu106,tu104,tu102,gv100,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PPWR_FALCON_DMEMC_BLK)",
"clkGetMClkSrcMode_GF117,[gk110b,gk110c,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,tu102,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117,gb100]" => "(LW_PTRIM_SYS_FBIO_MODE_SWITCH)|(LW_PTRIM_SYS_FBIO_MODE_SWITCH_DRAMCLK_MODE)|(LW_PTRIM_SYS_FBIO_MODE_SWITCH_DRAMCLK_MODE_ONESOURCE)|(LW_PTRIM_SYS_DRAMCLK_ALT_SWITCH)|(LW_PTRIM_SYS_DRAMCLK_ALT_SWITCH_ONESRCCLK)|(LW_PTRIM_SYS_FBIO_MODE_SWITCH_DRAMCLK_MODE_DRAMPLL)|(LW_PTRIM_SYS_FBIO_MODE_SWITCH_DRAMCLK_MODE_REFMPLL)",
"clkReadAltClockSrc_GV100,[gh100,gh202,gv100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL_ONESRCCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_ONESRCCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_ONESRCCLK_ONESRC0)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_ONESRCCLK_ONESRC1)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL_SLOWCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_SLOWCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_SLOWCLK_XTAL_IN)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_SLOWCLK_XTAL4X)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL_MISCCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_MISCCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_MISCCLK_PEX_REFCLK_FAST)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_MISCCLK_HOSTCLK_DIV)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL_TESTORJTAGCLK)",
"privDumpPriHistoryBuffer_GK104,[gk110b,gk110c,gv100,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,tu102,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PPRIV_SYS_PRI_HISTORY_BUFFER_READ0_SUBID)",
"clkGetHub2ClkFreqKHz_GF100,[gk110b,gk110c,tu102,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PTRIM_CLK_NAMEMAP_INDEX_HUB2CLK)",
"lwjpgDumpImem_v02_00,[ga103,gh202,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PLWJPG_FALCON_IMEMD)|(LW_PLWJPG_FALCON_IMEMC)|(LW_PLWJPG_FALCON_IMEMT)|(LW_PLWJPG_FALCON_IMEMC_OFFS)",
"riscvDumpCsr_TU10X,[gh100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_RISCV_CSR_TDATA3)",
"pmuLoadCode,[gm107,gm206,gh202,gm204,gm108,gh100,tu106,tu104,tu102,gv100,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PPWR_FALCON_IMEMC_BLK)",
"_pmuDmemWrite_GP102,[tu104,tu102,gp102,gh202,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu106,gh100,gv100,tu116,tu117]" => "(LW_PPWR_FALCON_DMEMC_BLK)",
"isVirtualWithSriov,[gk110b,gk110c,gv100,gm107,gk208,gm206,gh202,gm204,gm108,gm200,ga103,tu106,tu104,tu102,gk110,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu116,tu117]" => "(LW_PMC_BOOT_1_VGPU)|(LW_PMC_BOOT_1_VGPU_VF)",
"clkSetSourceCntr_GA102,[ga102,gh202]" => "(LW_PTRIM_FBPA_TCLKOUT_CTRL_FBP)|(LW_PTRIM_SYS_TCLKOUT_CTRL_XBAR)|(LW_PTRIM_SYS_TCLKOUT_CTRL_SYS)|(LW_PTRIM_GPC_TCLKOUT_CTRL_GPC)",
"lwjpgIsPrivBlocked_v02_00,[ga100,tu106,tu104,tu102,tu116,tu117]" => "(LW_PPRIV_SYS_PRI_MASTER_fecs2lwjpg_pri)",
"clkGetSppllFreqKHz_GF100,[gk110b,gk110c,tu102,gm107,gk208,gm206,gh202,gm204,gm108,gm200,ga103,tu106,tu104,gv100,gk110,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu116,tu117]" => "(LW_PVTRIM_SYS_SPPLL0_COEFF)|(LW_PVTRIM_SYS_SPPLL1_COEFF)|(LW_PVTRIM_SYS_SPPLL0_CFG)|(LW_PVTRIM_SYS_SPPLL1_CFG)|(LW_PVTRIM_SYS_SPPLL0_CFG_ENABLE)|(LW_PVTRIM_SYS_SPPLL0_CFG_ENABLE_YES)|(LW_PVTRIM_SYS_SPPLL0_CFG_IDDQ)|(LW_PVTRIM_SYS_SPPLL0_CFG_IDDQ_POWER_ON)|(LW_PVTRIM_SYS_SPPLL0_COEFF_MDIV)|(LW_PVTRIM_SYS_SPPLL0_COEFF_NDIV)",
"dispReadDisplayLowPowerStatus_v04_01,[gh202,ga100,ga102,ga103,ga104,ga106,ga107,gh100]" => "(LW_PPWR_PMU_GPIO_1_INPUT_FBH_DWCF)|(LW_PPWR_PMU_GPIO_1_INPUT_FBH_DWCF_TRUE)|(LW_PPWR_PMU_GPIO_1_INPUT_IHUB_OK_TO_SWITCH)|(LW_PPWR_PMU_GPIO_1_INPUT_IHUB_OK_TO_SWITCH_TRUE)|(LW_PPWR_PMU_GPIO_1_INPUT_MEMPOOL_DRAINING)|(LW_PPWR_PMU_GPIO_1_INPUT_MEMPOOL_DRAINING_TRUE)|(LW_PPWR_PMU_GPIO_1_INPUT_MSPG_WAKE)|(LW_PPWR_PMU_GPIO_1_INPUT_MSPG_WAKE_TRUE)",
"clkGetOSM1Selection_GK104,[gk110b,gk110c,gv100,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,tu102,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_ONESRCCLK1_SELECT)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_ONESRCCLK1_SELECT_SPPLL1)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_ONESRCCLK1_SELECT_SYSPLL)",
"clkGetVClkFreqKHz_GF100,[gk110b,gk110c,tu102,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PVTRIM_CLK_NAMEMAP_INDEX_VCLK)",
"msencDisplayFlcnSPR_v06_00,[tu102,gh100,gp102,gh202,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117,gb100]" => "(LW_PLWENC_FALCON_ICD_CMD)|(LW_PLWENC_FALCON_ICD_RDATA)",
"pmuDmemRead_GP102,[tu104,tu102,gp102,gh202,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu106,gh100,gv100,tu116,tu117]" => "(LW_PPWR_FALCON_DMEMC_BLK)",
"gspGetFalconBase_GV100,[tu104,gh202,tu102,ga100,ga102,ga103,ga104,ga106,ga107,tu106,gh100,gv100,tu116,tu117]" => "(LW_PGSP)",
"lwjpgDumpDmem_v02_00,[ga103,gh202,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PLWJPG_FALCON_DMEMD)|(LW_PLWJPG_FALCON_DMEMC)|(LW_PLWJPG_FALCON_IMEMC_OFFS)",
"_getUserDInfo,[gk110b,gk110c,gv100,gm107,gk208,gm206,gh202,gm204,gm108,gm200,ga103,tu106,tu104,tu102,gk110,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu116,tu117]" => "(LW_PFIFO_BAR1_BASE)|(LW_PFIFO_BAR1_BASE_VALID_FALSE)|(LW_PFIFO_BAR1_BASE_PTR)|(LW_PFIFO_BAR1_BASE_PTR_ALIGN_SHIFT)",
"clkGetDividerRegOffset_GV100,[gh100,gh202,gv100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PTRIM_SYS_LWD2CLK_OUT_LDIV)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_DISPCLK)|(LW_PVTRIM_SYS_DISPCLK_ALT_LDIV)|(LW_PTRIM_SYS_SYS2CLK_OUT_LDIV)|(LW_PTRIM_CLK_NAMEMAP_INDEX_HUB2CLK)|(LW_PTRIM_SYS_HUB2CLK_OUT_LDIV)|(LW_PTRIM_SYS_GPC2CLK_ALT_LDIV)|(LW_PTRIM_SYS_XBAR2CLK_ALT_LDIV)|(LW_PTRIM_SYS_UTILSCLK_OUT_LDIV)|(LW_PTRIM_SYS_PWRCLK_OUT_LDIV)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_AZA2BITCLK)|(LW_PVTRIM_SYS_AZA2XBITCLK_OUT_LDIV)|(LW_PTRIM_SYS_DRAMCLK_ALT_LDIV)|(LW_PTRIM_SYS_HOSTCLK_ALT_LDIV)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_SPDIFCLK)|(LW_PVTRIM_SYS_VCLK_ALT_LDIV)",
"dispGetClockData_v02_01,[gk110b,gk110c,tu102,gm107,gk110,gm206,gm204,gm108,gm200,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,gh100,ad102,tu116,tu117]" => "(LW_PVTRIM_SYS_VCLK_REF_SWITCH)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_EXT_REFCLK)",
"dispGetClockRegBnkInfo_v02_01,[gk110b,gk110c,tu102,gm107,gk110,gm206,gm204,gm108,gm200,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,gh100,tu116,tu117]" => "(LW_PVTRIM_SYS_VCLK_REF_SWITCH_FINALSEL)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_SLOWCLK)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_MISCCLK)",
"_monitorReadComms_TU10X,[gh100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_RISCV_CSR_MFROMHOST)|(LW_RISCV_CSR_MTOHOST)",
"clkReadRefSrcDIV_GV100,[gh100,gh202,gv100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117,gb100]" => "(LW_PTRIM_SYS_GPC2CLK_REF_LDIV)|(LW_PTRIM_SYS_SYS2CLK_REF_LDIV)|(LW_PTRIM_SYS_XBAR2CLK_REF_LDIV)|(LW_PTRIM_SYS_REFCLK_REFMPLL_LDIV)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_DISPCLK)|(LW_PVTRIM_SYS_DISPCLK_REF_LDIV)|(LW_PVTRIM_PLL_NAMEMAP_INDEX_VPLL)|(LW_PVTRIM_SYS_VCLK_REF_LDIV)|(LW_PTRIM_SYS_GPC2CLK_REF_LDIV_ONESRC0DIV)|(LW_PTRIM_SYS_GPC2CLK_REF_LDIV_ONESRC1DIV)",
"riscvDumpMpu_TU10X,[ga100,tu106,tu104,tu102,tu116,tu117]" => "(LW_RISCV_CSR_MMPUVA_BASE)|(LW_RISCV_CSR_MMPURNG_RANGE)|(LW_RISCV_CSR_MMPUPA_BASE)",
"riscvDumpMpu_GA10X,[ga102,ga103,ga104,ga106,ga107,gh100]" => "(LW_RISCV_CSR_SMPUVA_BASE)|(LW_RISCV_CSR_SMPURNG_RANGE)|(LW_RISCV_CSR_SMPUPA_BASE)",
"msencDumpDmem_v06_02,[tu102,gh100,gp102,gh202,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117,gb100]" => "(LW_PLWENC_FALCON_DMEMD)|(LW_PLWENC_FALCON_DMEMC)|(LW_PLWENC_FALCON_IMEMC_OFFS)",
"clkReadRefClockSrc_GV100,[gh100,gh202,gv100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117,gb100]" => "(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH)|(LW_PTRIM_SYS_XBAR2CLK_REF_SWITCH)|(LW_PTRIM_SYS_SYS2CLK_REF_SWITCH)|(LW_PTRIM_SYS_REFCLK_REFMPLL_SWITCH)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_DISPCLK)|(LW_PVTRIM_SYS_DISPCLK_REF_SWITCH)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL_ONESRCCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_ONESRCCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_ONESRCCLK_ONESRC0)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_ONESRCCLK_ONESRC1)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL_SLOWCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_SLOWCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_SLOWCLK_XTAL_IN)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_SLOWCLK_XTAL4X)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL_MISCCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_MISCCLK)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_MISCCLK_PEX_REFCLK_FAST)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_MISCCLK_HOSTCLK_DIV)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_MISCCLK_EXT_REFCLK)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_EXT_REFCLK)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_EXT_REFCLK_NON_QUAL)|(LW_PTRIM_SYS_GPC2CLK_REF_SWITCH_FINALSEL_TESTORJTAGCLK)",
"physicalDmaAccess,[gm206,gh202,gm204,gm200,gh100,tu106,tu104,tu102,gv100,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PFALCON_FALCON_DMATRFMOFFS_OFFS)",
"clkGetPllSpreadParams_GV100,[gh100,gh202,tu102,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117,gb100]" => "(LW_PVTRIM_SYS_VPLL_CFG2)|(LW_PVTRIM_SYS_VPLL_SSD0)|(LW_PVTRIM_SYS_VPLL_SSD1)",
# Bug 200677774 Add exception for LW_PTIMER_PRI_TIMEOUT_SAVE_0/1 for Hopper. [HW is removing these registers in Hopper]
"busTestBusInterrupts_GK104,[gk110b,gk110c,gv100,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,tu102,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PBUS_INTR_EN_0_PRI_SQUASH)|(LW_PBUS_INTR_0_PRI_SQUASH)|(LW_PTIMER_PRI_TIMEOUT_SAVE_0_ADDR)|(LW_PTIMER_PRI_TIMEOUT_SAVE_0)|(LW_PTIMER_PRI_TIMEOUT_SAVE_1)",
"riscvIsActive_TU10X,[gh100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PRISCV_RISCV_CORE_SWITCH_RISCV_STATUS)|(LW_PRISCV_RISCV_CORE_SWITCH_RISCV_STATUS_ACTIVE_STAT)|(LW_PRISCV_RISCV_CORE_SWITCH_RISCV_STATUS_ACTIVE_STAT_ACTIVE)",
"lwjpgTestState_v02_00,[ga103,gh202,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PLWJPG_FALCON_IRQSTAT)|(LW_PLWJPG_FALCON_IRQMASK)|(LW_PLWJPG_FALCON_IRQMASK_GPTMR)|(LW_PLWJPG_FALCON_IRQMASK_WDTMR)|(LW_PLWJPG_FALCON_IRQMASK_MTHD)|(LW_PLWJPG_FALCON_IRQMASK_CTXSW)|(LW_PLWJPG_FALCON_IRQMASK_HALT)|(LW_PLWJPG_FALCON_IRQMASK_EXTERR)|(LW_PLWJPG_FALCON_IRQMASK_SWGEN0)|(LW_PLWJPG_FALCON_IRQMASK_SWGEN1)|(LW_PLWJPG_FALCON_IRQSTAT_GPTMR)|(LW_PLWJPG_FALCON_GPTMRINT)|(LW_PLWJPG_FALCON_GPTMRVAL)|(LW_PLWJPG_FALCON_IRQSTAT_WDTMR)|(LW_PLWJPG_FALCON_IRQSTAT_MTHD)|(LW_PLWJPG_FALCON_MTHDDATA)|(LW_PLWJPG_FALCON_MTHDID)|(LW_PLWJPG_FALCON_MTHDID_ID)|(LW_PLWJPG_FALCON_MTHDID_SUBCH)|(LW_PLWJPG_FALCON_MTHDID_PRIV)|(LW_PLWJPG_FALCON_IRQSTAT_CTXSW)|(LW_PLWJPG_FALCON_IRQSTAT_HALT)|(LW_PLWJPG_FALCON_IRQSTAT_EXTERR)|(LW_PLWJPG_FALCON_IRQSTAT_SWGEN0)|(LW_PLWJPG_FALCON_IRQSTAT_SWGEN1)|(LW_PLWJPG_FALCON_IDLESTATE)|(LW_PLWJPG_FALCON_IDLESTATE_FALCON_BUSY)|(LW_PLWJPG_FALCON_FHSTATE)|(LW_PLWJPG_FALCON_FHSTATE_FALCON_HALTED)|(LW_PLWJPG_FALCON_FHSTATE_ENGINE_FAULTED)|(LW_PLWJPG_FALCON_FHSTATE_STALL_REQ)|(LW_PLWJPG_FALCON_ENGCTL)|(LW_PLWJPG_FALCON_ENGCTL_ILW_CONTEXT)|(LW_PLWJPG_FALCON_ENGCTL_STALLREQ)|(LW_PLWJPG_FALCON_CPUCTL)|(LW_PLWJPG_FALCON_CPUCTL_IILWAL)|(LW_PLWJPG_FALCON_CPUCTL_HALTED)|(LW_PLWJPG_FALCON_CPUCTL_STOPPED)|(LW_PLWJPG_FALCON_ITFEN)|(LW_PLWJPG_FALCON_ITFEN_CTXEN)|(LW_PLWJPG_FALCON_ITFEN_MTHDEN)",
"clkIsClockDrivenfromBYPASS_GM200,[tu102,gm206,gh202,gm204,gm200,ga103,tu106,tu104,gv100,gp102,gp100,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu116,tu117]" => "(LW_PVTRIM_CLK_NAMEMAP_INDEX_DISPCLK)|(LW_PVTRIM_SYS_STATUS_SEL_VCO)|(LW_PVTRIM_SYS_STATUS_SEL_VCO_DISPCLK_OUT)|(LW_PVTRIM_SYS_STATUS_SEL_VCO_DISPCLK_OUT_VCO_PATH)",
"psdlUseSec2_GM20X,[gm206,gh202,gm204,gm200,gh100,tu106,tu104,tu102,gv100,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PSEC)",
"vmemGetLargestVirtAddr_GP100,[tu102,gh100,gp102,gh202,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117]" => "(LW_RAMIN_ADR_LIMIT_LO)|(LW_RAMIN_ADR_LIMIT_HI)",
"dispGetSliData_v04_00,[tu106,tu104,tu102,tu116,tu117]" => "(LW_PVTRIM_SYS_VPLL_MISC)|(LW_PVTRIM_SYS_VPLL_MISC_EXT_REF_CONFIG_SRC)",
"msencDisplayHwcfg_v06_00,[tu102,gh100,gp102,gh202,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117,gb100]" => "(LW_PLWENC_FALCON_HWCFG)|(LW_PLWENC_FALCON_HWCFG_IMEM_SIZE)|(LW_PLWENC_FALCON_HWCFG_DMEM_SIZE)|(LW_PLWENC_FALCON_HWCFG_METHODFIFO_DEPTH)|(LW_PLWENC_FALCON_HWCFG_DMAQUEUE_DEPTH)|(LW_PLWENC_FALCON_HWCFG1)|(LW_PLWENC_FALCON_HWCFG1_CORE_REV)|(LW_PLWENC_FALCON_HWCFG1_SELWRITY_MODEL)|(LW_PLWENC_FALCON_HWCFG1_IMEM_PORTS)|(LW_PLWENC_FALCON_HWCFG1_DMEM_PORTS)|(LW_PLWENC_FALCON_HWCFG1_TAG_WIDTH)",
"vmemGetMemTypeFromTarget_GK104,[gk110b,gk110c,gv100,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,tu102,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PCCSR_CHANNEL_INST_TARGET_VID_MEM)|(LW_PCCSR_CHANNEL_INST_TARGET_SYS_MEM_COHERENT)|(LW_PCCSR_CHANNEL_INST_TARGET_SYS_MEM_NONCOHERENT)",
"dispPrintClkData_v04_00,[gh100,gh202,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PVTRIM_SYS_VCLK_REF_SWITCH_FINALSEL_SLOWCLK)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_SLOWCLK_XTAL_IN)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_SLOWCLK_XTAL4X)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_FINALSEL_TESTORJTAGCLK)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_FINALSEL_MISCCLK)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_MISCCLK_PEX_REFCLK_FAST)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_MISCCLK_EXT_REFCLK)|(LW_PVTRIM_SYS_VPLL_MISC_EXT_REF_CONFIG_SRC_EXT_REFCLKA_IB)|(LW_PVTRIM_SYS_VPLL_MISC_EXT_REF_CONFIG_SRC_FL_REFCLK_IN)|(LW_PVTRIM_SYS_VCLK_REF_SWITCH_FINALSEL_ONESRCCLK)",
"instmemGetUserdFormattedMemory_GK104,[gk110b,gk110c,gv100,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,tu102,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_RAMUSERD_REF_THRESHOLD)|(LW_RAMUSERD_GP_TOP_LEVEL_GET)|(LW_RAMUSERD_GP_TOP_LEVEL_GET_HI)",
"falcphysCheckEngineIsPresent_GM20X,[gm204,gm200,gv100,gp102,gp100,gp106,gp104,gm206,tu106,tu104,tu102,tu116,tu117]" => "(LW_FUSE_STATUS_OPT_LWDEC_DATA)|(LW_FUSE_STATUS_OPT_LWDEC_DATA_ENABLE)",
"clkReadSysCoreRegOffset_GV100,[gh100,gh202,gv100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PTRIM_GPC_BCAST_GPCPLL_CFG)|(LW_PTRIM_SYS_XBARPLL_CFG)|(LW_PTRIM_SYS_SYSPLL_CFG)|(LW_PVTRIM_PLL_NAMEMAP_INDEX_SPPLL0)|(LW_PVTRIM_SYS_SPPLL0_CFG)|(LW_PVTRIM_PLL_NAMEMAP_INDEX_SPPLL1)|(LW_PVTRIM_SYS_SPPLL1_CFG)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_DISPCLK)|(LW_PVTRIM_SYS_DISPPLL_CFG)|(LW_PVTRIM_SYS_VPLL_CFG)|(LW_PTRIM_GPC_BCAST_GPCPLL_COEFF)|(LW_PTRIM_SYS_XBARPLL_COEFF)|(LW_PTRIM_SYS_SYSPLL_COEFF)|(LW_PVTRIM_SYS_SPPLL0_COEFF)|(LW_PVTRIM_SYS_DISPPLL_COEFF)|(LW_PVTRIM_SYS_VPLL_COEFF)|(LW_PTRIM_GPC_BCAST_GPC2CLK_OUT)|(LW_PTRIM_SYS_XBAR2CLK_OUT)|(LW_PTRIM_SYS_SYS2CLK_OUT_LDIV)|(LW_PTRIM_CLK_NAMEMAP_INDEX_HUB2CLK)|(LW_PTRIM_SYS_HUB2CLK_OUT_LDIV)|(LW_PTRIM_SYS_LWD2CLK_OUT_LDIV)|(LW_PVTRIM_SYS_DISPCLK_OUT)|(LW_PVTRIM_SYS_VCLK_OUT)",
"hdaTestState_v02_00,[gk110b,gk110c,tu102,gm107,gk110,gm206,gh202,gm204,gm200,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PHDAFALCON_FALCON_IRQSTAT)|(LW_PHDAFALCON_FALCON_IRQMASK)|(LW_PHDAFALCON_FALCON_IRQMASK_GPTMR)|(LW_PHDAFALCON_FALCON_IRQMASK_WDTMR)|(LW_PHDAFALCON_FALCON_IRQMASK_MTHD)|(LW_PHDAFALCON_FALCON_IRQMASK_CTXSW)|(LW_PHDAFALCON_FALCON_IRQMASK_HALT)|(LW_PHDAFALCON_FALCON_IRQMASK_EXTERR)|(LW_PHDAFALCON_FALCON_IRQMASK_SWGEN0)|(LW_PHDAFALCON_FALCON_IRQMASK_SWGEN1)|(LW_PHDAFALCON_FALCON_IRQSTAT_GPTMR)|(LW_PHDAFALCON_FALCON_GPTMRINT)|(LW_PHDAFALCON_FALCON_GPTMRVAL)|(LW_PHDAFALCON_FALCON_IRQSTAT_WDTMR)|(LW_PHDAFALCON_FALCON_IRQSTAT_MTHD)|(LW_PHDAFALCON_FALCON_MTHDDATA)|(LW_PHDAFALCON_FALCON_MTHDID)|(LW_PHDAFALCON_FALCON_MTHDID_ID)|(LW_PHDAFALCON_FALCON_MTHDID_SUBCH)|(LW_PHDAFALCON_FALCON_MTHDID_PRIV)|(LW_PHDAFALCON_FALCON_IRQSTAT_CTXSW)|(LW_PHDAFALCON_FALCON_IRQSTAT_HALT)|(LW_PHDAFALCON_FALCON_IRQSTAT_EXTERR)|(LW_PHDAFALCON_FALCON_IRQSTAT_SWGEN0)|(LW_PHDAFALCON_FALCON_IRQSTAT_SWGEN1)|(LW_PHDAFALCON_FALCON_IDLESTATE)|(LW_PHDAFALCON_FALCON_IDLESTATE_FALCON_BUSY)|(LW_PHDAFALCON_FALCON_FHSTATE)|(LW_PHDAFALCON_FALCON_FHSTATE_FALCON_HALTED)|(LW_PHDAFALCON_FALCON_FHSTATE_ENGINE_FAULTED)|(LW_PHDAFALCON_FALCON_FHSTATE_STALL_REQ)|(LW_PHDAFALCON_FALCON_ENGCTL)|(LW_PHDAFALCON_FALCON_ENGCTL_ILW_CONTEXT)|(LW_PHDAFALCON_FALCON_ENGCTL_STALLREQ)|(LW_PHDAFALCON_FALCON_CPUCTL)|(LW_PHDAFALCON_FALCON_CPUCTL_IILWAL)|(LW_PHDAFALCON_FALCON_CPUCTL_HALTED)|(LW_PHDAFALCON_FALCON_CPUCTL_STOPPED)|(LW_PHDAFALCON_FALCON_ITFEN)|(LW_PHDAFALCON_FALCON_ITFEN_CTXEN)|(LW_PHDAFALCON_FALCON_ITFEN_MTHDEN)",
"hdaDumpDmem_v02_00,[gk110b,gk110c,tu102,gm107,gk110,gm206,gh202,gm204,gm200,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PHDAFALCON_FALCON_DMEMD)|(LW_PHDAFALCON_FALCON_DMEMC)|(LW_PHDAFALCON_FALCON_IMEMC_OFFS)",
"clkGetDispclkFreqKHz_GF100,[gk110b,gk110c,tu102,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PVTRIM_CLK_NAMEMAP_INDEX_DISPCLK)",
"_monitorWriteHost_TU10X,[gh100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_RISCV_CSR_MFROMHOST)",
"instmemGetRamfcFormattedMemory_GV100,[tu102,tu106,tu104,gv100,tu116,tu117]" => "(LW_RAMFC_RUNLIST_TIMESLICE)",
"riscvIsActive_GA10X,[ga102,ga103,ga104,ga106,ga107,gh100]" => "(LW_PRISCV_RISCV_CPUCTL)|(LW_PRISCV_RISCV_CPUCTL_ACTIVE_STAT)|(LW_PRISCV_RISCV_CPUCTL_ACTIVE_STAT_ACTIVE)",
"elpgDisplaySequencerState_GA10X,[ga103,gh202,ga100,ga102,gh100,ad102,ga104,ga106,ga107]" => "(LW_PPWR_PMU_RAM_STATUS)",
"vmemIlwalidatePDB_GP100,[ga103,gv100,gp102,gh202,gp100,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_VIRTUAL_FUNCTION_PRIV_MMU_ILWALIDATE_PDB)|(LW_VIRTUAL_FUNCTION_PRIV_MMU_ILWALIDATE)",
"clkIsVPLLEnabled_GV100,[gh202,tu102,ga102,ga103,ga104,ga106,ga107,tu106,tu104,gv100,tu116,tu117]" => "(LW_PVTRIM_SYS_VPLL_MISC)|(LW_PVTRIM_SYS_VPLL_MISC_SETUP_CONTROL_STATUS_ENABLE)|(LW_PVTRIM_SYS_VPLL_MISC_SETUP_CONTROL_STATUS_ENABLE_YES)",
"fbReadDSDepthZBCindex_TU10X,[gh202,gh100,ga100,ga102,ga103,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PGRAPH_PRI_GPC_SWDX_DSS_ZBC_Z_FORMAT)",
"falcphysCheckEngineIsPresent_GA100,[gh202,ga100,ga102,ga103,ga104,ga106,ga107,gh100,gb100]" => "(LW_FUSE_STATUS_OPT_LWDEC_DATA)",
"lwjpgDisplayHwcfg_v02_00,[ga103,gh202,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PLWJPG_FALCON_HWCFG)|(LW_PLWJPG_FALCON_HWCFG_IMEM_SIZE)|(LW_PLWJPG_FALCON_HWCFG_DMEM_SIZE)|(LW_PLWJPG_FALCON_HWCFG_METHODFIFO_DEPTH)|(LW_PLWJPG_FALCON_HWCFG_DMAQUEUE_DEPTH)|(LW_PLWJPG_FALCON_HWCFG1)|(LW_PLWJPG_FALCON_HWCFG1_CORE_REV)|(LW_PLWJPG_FALCON_HWCFG1_SELWRITY_MODEL)|(LW_PLWJPG_FALCON_HWCFG1_IMEM_PORTS)|(LW_PLWJPG_FALCON_HWCFG1_DMEM_PORTS)|(LW_PLWJPG_FALCON_HWCFG1_TAG_WIDTH)",
"pmuImemRead_GK104,[gk110b,gk110c,tu102,gm107,gk110,gm206,gh202,gm204,gm108,gm200,gh100,tu106,tu104,gv100,gk208,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PPWR_FALCON_IMEMC_BLK)",
"fbGetLinesPerLTSCountLwW_GM200,[gm206,gh202,gm204,gm200,gh100,tu106,tu104,tu102,gv100,gp102,gp100,gp106,gp104,ga100,ga102,ga103,ga104,ga106,ga107,tu116,tu117,gb100]" => "(LW_SCAL_LITTER_NUM_LTC_LTS_SETS)",
"lwjpgDisplayFlcnSPR_v02_00,[ga103,gh202,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu106,tu104,tu102,tu116,tu117]" => "(LW_PLWJPG_FALCON_ICD_CMD)|(LW_PLWJPG_FALCON_ICD_RDATA)",
"clkIsClockDrivenfromBYPASS_GK104,[gk110b,gk110c,tu102,gm107,gk208,gm206,gh202,gm204,gm108,gm200,ga103,tu106,tu104,gv100,gk110,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga100,ga102,gh100,ad102,ga104,ga106,ga107,tu116,tu117]" => "(LW_PVTRIM_CLK_NAMEMAP_INDEX_DISPCLK)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_AZA2BITCLK)|(LW_PVTRIM_CLK_NAMEMAP_INDEX_SPDIFCLK)|(LW_PTRIM_CLK_NAMEMAP_INDEX_HUB2CLK)|(LW_PTRIM_SYS_SEL_VCO)|(LW_PTRIM_SYS_FBIO_CTRL)|(LW_PTRIM_SYS_FBIO_CTRL_CMOS_CLK_SEL)|(LW_PVTRIM_SYS_STATUS_SEL_VCO)",
"elpgDisplayMsBlockerAndInterruptState_TU10X,[tu104,gh202,ga100,ga102,ga103,ga104,ga106,ga107,tu106,gh100,tu102,tu116,tu117]" => "(LW_PERF_PMASYS_SYS_FB_BLOCKER_CTRL)|(LW_PFB_HSHUB_IG_SYS_FB_BLOCKER_CTRL)",
"elpgDisplayMsBlockerAndInterruptState_GH100,[gh202,gb100]" => "(LW_PERF_PMASYS_SYS_FB_BLOCKER_CTRL)",
"hdaDumpImem_v02_00,[gk110b,gk110c,tu102,gm107,gk208,gm206,gh202,gm204,gm200,tu106,tu104,gv100,gk110,gk106,gk107,gk104,gp102,gp100,gp106,gp104,ga102,ga103,ga104,ga106,ga107,tu116,tu117]" => "(LW_PHDAFALCON_FALCON_IMEMD)|(LW_PHDAFALCON_FALCON_IMEMC)|(LW_PHDAFALCON_FALCON_IMEMT)|(LW_PHDAFALCON_FALCON_IMEMC_OFFS)",

# added for promotion blocker bug 3069194, 2994920
"clkEnableCntr_GA100,[gh100, gh202, gb100]" => "(LW_PTRIM_SYS_FR_CLK_CNTR_PEX_PAD_TCLKS_CFG_\\w*)",
"clkResetCntr_TU102,[gh100, gh202, gb100]" => "(LW_PTRIM_SYS_FR_CLK_CNTR_PEX_PAD_TCLKS_CFG_\\w*)",

# Added for GH100 POR items bug 200704062 
"gspEmemGetNumPorts_TU10X,[ga100,  ga102, ga103, ga104, ga106, ga107, tu102, tu104, tu106, tu116, tu117, gh100, gh202, gb100]" => "(LW_PGSP_EMEMD__SIZE_1)",
"sec2EmemGetNumPorts_TU10X,[ga100,  ga102, ga103, ga104, ga106, ga107, tu102, tu104, tu106, tu116, tu117, gh100, gh202, gb100]" => "(LW_PSEC_EMEMD__SIZE_1)",
"sec2GetEmemcSize_TU10X,[ga100,  ga102, ga103, ga104, ga106, ga107, tu102, tu104, tu106, tu116, tu117, gh100, gh202, gb100]" => "(LW_PSEC_EMEMC__SIZE_1)",

# added for Hopper-45/46 enablement on GH202
"fifoReadRunlistInfo_GA102,[gh202]" => "(LW_RUNLIST_SUBMIT_BASE_HI_PTR_HI)",
"fifoDumpEngStates_TU102,[gh202]" => "(LW_RAMIN_ENGINE_WFI_PTR_HI)",

# added for LTC PRI re-org for scaling FBPs, these need be reHALed with 0-based macros with the new LTC manuals - a Blackwell-POR Bug #3399448.
"fbL2IlwalEvict_GM107,[gb100,gh202]" => "(LW_PLTCG_LTCS_LTSS_TSTG_CMGMT_1)|(LW_PLTCG_LTCS_LTSS_TSTG_CMGMT_0)",
"fbL2BypassEnable_GM200,[gb100,gh202]" => "(LW_PLTCG_LTCS_LTSS_TSTG_SET_MGMT_2)",
"fbReadL2ColorZBCindex_GM107,[ad102,ga102,ga103,ga104,ga106,ga107,gh100,gh202,gb100]" => "(LW_PLTCG_LTCS_LTSS_DSTG_ZBC_INDEX_ADDRESS)|(LW_PLTCG_LTCS_LTSS_DSTG_ZBC_INDEX)|(LW_PLTCG_LTCS_LTSS_DSTG_ZBC_COLOR_CLEAR_VALUE)",
"fbReadL2DepthZBCindex_GM107,[ad102,ga102,ga103,ga104,ga106,ga107,gh100,gh202,gb100]" => "(LW_PLTCG_LTCS_LTSS_DSTG_ZBC_INDEX_ADDRESS)|(LW_PLTCG_LTCS_LTSS_DSTG_ZBC_INDEX)|(LW_PLTCG_LTCS_LTSS_DSTG_ZBC_DEPTH_CLEAR_VALUE)",
);

#
# [mcheck2] cfg_known_failures_disp
#   another way to set exceptions for disp registers
#
# Syntax:
#   "disp-register-define,function" => 1,
#      * for all chips ignore full-define in function
#
# Example:
# "LW_PDISP_VGA_CR_REG58_SET_DISP_OWNER,dispDispOwner_GF100" => 1,
#
check_hash(\%cfg_known_failures_disp,
## [mcheck2] new errors captured by mcheck2 #################################

## end of mcheck2 exceptions ################################################

);

