# -*- mode: perl; -*-

# BUS Hal interface definitions
# For a brief introduction to file format, see README in this directory.

my $falconHal = [

    # per-GPU defaults for FALCON for all interfaces below
    DEFAULTS => [
        # optional defaults for gpus not specifically setup by an interface
        _STUB       => [ CHEETAH, ],
    ],


    # HAL Interfaces
    # ********************************************************************************
    HAL_INTERFACES => [


        # Those STUB functions are interfaces used by FLCN_CORE_IFACES and FLCN_ENGINE_IFACES.
        DMEM_GET_SIZE  => [

            DESCRIPTION     => "falconDmemGetSize",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],

        DMEM_GET_NUM_PORTS  => [

            DESCRIPTION     => "falconDmemGetNumPorts",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],

        DMEM_READ  => [
        
            DESCRIPTION     => "falconDmemRead",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase, LwU32 addr, LwBool bIsAddrVa, LwU32 length, LwU32 port, LwU32* pDmem",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],

        DMEM_WRITE  => [

            DESCRIPTION     => "falconDmemWrite",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase, LwU32 addr, LwBool bIsAddrVa, LwU32 val, LwU32 width, LwU32 length, LwU32 port",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],

        DMEM_BLK => [

            DESCRIPTION     => "falconDmemBlk",
            RETURN_TYPE     => "BOOL",
            ARGUMENTS       => "LwU32 engineBase, LwU32 blockIndex, FLCN_BLOCK *pBlockInfo",
            STUB_RETURNS    => FALSE,

            _STUB           => [ ALL ],
        ],

        IMEM_GET_NUM_BLOCKS => [
        
            DESCRIPTION     => "falconImemGetNumBlocks",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase",
            STUB_RETURNS    => "0xFFFFFFFF",
            
            _STUB           => [ ALL ],
        ],

        IMEM_GET_SIZE       => [
        
            DESCRIPTION     => "falconImemGetSize",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase",
            STUB_RETURNS    => ZERO,
            
            _STUB           => [ ALL ],
        ],

        IMEM_GET_NUM_PORTS  => [
        
            DESCRIPTION     => "falconImemGetNumPorts",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase",
            STUB_RETURNS    => ZERO,
            
            _STUB           => [ ALL ],
        ],

        IMEM_READ  => [
        
            DESCRIPTION     => "falconImemRead",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase, LwU32 addr, LwU32 length, LwU32 port, LwU32* pImem",
            STUB_RETURNS    => ZERO,
            
            _STUB           => [ ALL ],
        ],

        IMEM_WRITE  => [
        
            DESCRIPTION     => "falconImemWrite",
            RETURN_TYPE     =>  LwU32,
            ARGUMENTS       => "LwU32 engineBase, LwU32 addr, LwU32 val, LwU32 width, LwU32 length, LwU32 port",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],
        
        IMEM_WRITE_BUF  => [
        
            DESCRIPTION     => "falconImemWriteBuf",
            RETURN_TYPE     =>  LwU32,
            ARGUMENTS       => "LwU32 engineBase, LwU32 addr, LwU32 startPC, LwU32 *pInBuf, LwU32 size, LwU32 port, LwBool bIsSelwre",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],
 
        DMEM_WRITE_BUF  => [
        
            DESCRIPTION     => "falconDmemWriteBuf",
            RETURN_TYPE     =>  LwU32,
            ARGUMENTS       => "LwU32 engineBase, LwU32 addr, LwU32 *pInBuf, LwU32 size, LwU32 port",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],
 
        WAIT_FOR_HALT  => [
        
            DESCRIPTION     => "falconWaitForHalt",
            RETURN_TYPE     =>  LW_STATUS,
            ARGUMENTS       => "LwU32 engineBase, LwS32 timeoutUs",
            STUB_RETURNS    => ERROR,

            _STUB           => [ ALL ],
        ],
 
        IMEM_GET_TAG_WIDTH  => [
            DESCRIPTION     => "falconImemGetTagWidth, tag width in bits",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],

        DMEM_GET_TAG_WIDTH  => [
            DESCRIPTION     => "falconDmemGetTagWidth, tag width in bits",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],

        IMEM_Blk  => [
            DESCRIPTION     => "falconImemBlk, returns block information given a block index",
            RETURN_TYPE     =>  BOOL,
            ARGUMENTS       => "LwU32 engineBase, LwU32 blockIndex, FLCN_BLOCK *pBlockInfo",
            STUB_RETURNS    => FALSE,

            _STUB           => [ ALL ],
        ],

        IMEM_TAG  => [
            DESCRIPTION   => "falconImemTag, block status for a tag",
            RETURN_TYPE   =>  BOOL,
            ARGUMENTS     => "LwU32 engineBase, LwU32 codeAddr, FLCN_TAG* pTagInfo",
            STUB_RETURNS  => FALSE,

            _STUB         => [ ALL ],
        ],

        DMEM_TAG  => [
            DESCRIPTION   => "falconDmemTag, block status for a tag",
            RETURN_TYPE   =>  BOOL,
            ARGUMENTS     => "LwU32 engineBase, LwU32 codeAddr, FLCN_TAG* pTagInfo",
            STUB_RETURNS  => FALSE,

            _STUB         => [ ALL ],
        ],

        IMEM_SET_TAG  => [
            DESCRIPTION   => "falconImemSetTag, sets tag for a block",
            RETURN_TYPE   => "LwU32",
            ARGUMENTS     => "LwU32 engineBase, LwU32 tag, LwU32 port",
            STUB_RETURNS  => "0xFFFFFFFF",

            _STUB         => [ ALL ],
        ],

        GET_REGISTER  => [

            DESCRIPTION     => "falconGetRegister",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase, LwU32 regIdx",
            STUB_RETURNS    => "0xFFFFFFFF",

            _STUB           => [ ALL ],
        ],

        BOOTSTRAP  => [

            DESCRIPTION     => "falconBootstrap, bootstraps Falcon",
            RETURN_TYPE     => "void",
            ARGUMENTS       => "LwU32 engineBase, LwU32 bootvector",

            _STUB           => [ ALL ],
        ],

        UCODE_GET_VERSION  => [
            DESCRIPTION     => "falconUcodeGetVersion",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],

        IS_DMEM_ACCESS_ALLOWED => [
            DESCRIPTION  => "Checks if DMEM access is allowed for the address range between addrLo and addrHi",
            RETURN_TYPE  => "LwBool",
            ARGUMENTS    => "const FLCN_ENGINE_IFACES *pFEIF, LwU32 engineBase, LwU32 addrLo, LwU32 addrHi, LwBool bIsRead",
            STUB_RETURNS => LW_TRUE, # All of DMEM is readable in pre-carveouts land

            _STUB           => [ ALL ],
        ],

        GET_TASKNAME_FROM_ID => [
            DESCRIPTION  => "Get task name given the task id",
            RETURN_TYPE  => "const char *",
            ARGUMENTS    => "LwU32 taskId",
            STUB_RETURNS => NULL,

            _STUB        => [ ALL ],
        ],

        TRPC_GET_MAX_IDX => [
            DESCRIPTION  => "falconTrpcGetMaxIdx",
            RETURN_TYPE  => "LwU32",
            ARGUMENTS    => "LwU32",
            STUB_RETURNS => ZERO,

            _v04_00       => [ dMAXWELL_and_later, ],
        ],

        TRPC_IS_COMPRESSED => [
            DESCRIPTION  => "falconTrpcIsCompressed",
            RETURN_TYPE  => "LwBool",
            ARGUMENTS    => "LwU32",
            STUB_RETURNS => LW_FALSE,
            
            _GP104        => [ PASCAL_and_later, ],
            _STUB         => [ pre_PASCAL, ],
        ],

        TRPC_GET_P_C => [
            DESCRIPTION  => "falconTrpcGetPC",
            RETURN_TYPE  => "LwU32",
            ARGUMENTS    => "LwU32  engineBase, LwU32  idx, LwU32  *pCount",
            STUB_RETURNS => ZERO,

            _v04_00       => [ MAXWELL, ],
            _GP104        => [ PASCAL_and_later, ],
        ],
        
        PRINT_MAILBOX  => [

            DESCRIPTION     => "print falcon mailbox",
            RETURN_TYPE     => "void",
            ARGUMENTS       => "LwU32",

            _v04_00         => [ dMAXWELL_and_later, ],
        ],

        TEST_P_C  => [

            DESCRIPTION     => "test falcon PC",
            RETURN_TYPE     => "LW_STATUS",
            ARGUMENTS       => "LwU32, char*",
            STUB_RETURNS    => ERROR,

            _v01_00         => [ ],
            _GK208          => [ dMAXWELL_and_later, ],
        ],

        TEST_CTX_STATE  => [

            DESCRIPTION     => "test falcon context state",
            RETURN_TYPE     => "LW_STATUS",
            ARGUMENTS       => "LwU32, char*",
            STUB_RETURNS    => ERROR,

            _v04_00         => [ dMAXWELL_and_later, ],
        ],

        DMEM_VA_BOUNDARY_GET  => [

            DESCRIPTION     => "Get DMEM VA Boundary",
            RETURN_TYPE     => "LwU32",
            ARGUMENTS       => "LwU32 engineBase",
            STUB_RETURNS    => ZERO,

            _STUB           => [ ALL ],
        ],

    ],   # HAL interfaces

];


# return a reference to the Hal definition
return $falconHal;
