# -*- mode: perl; -*-

# FBFalcon Hal interface definitions
# For a brief introduction to file format, see README in this directory.

my $fbflcnHal = [

    # per-GPU defaults for FBFalcon engine for all interfaces below
    DEFAULTS => [
        # optional defaults for gpus not specifically setup by an interface
        _STUB       => [ CHEETAH, pre_VOLTA, ],
    ],


    # HAL Interfaces
    # ********************************************************************************
    HAL_INTERFACES => [


        IS_SUPPORTED => [
            DESCRIPTION   => "Determine if FBFalcon is supported on this GPU",
            RETURN_TYPE   => LwBool,
            ARGUMENTS     => "void",
            STUB_RETURNS  => LW_FALSE,

            _GV100        => [ VOLTA_and_later, ],
            _STUB         => [ pre_VOLTA, ],
        ],

        MASTER_RESET  => [
            DESCRIPTION   => "Resets FBFalcon",
            RETURN_TYPE   => "LW_STATUS",
            ARGUMENTS     => "void",
            STUB_RETURNS  => LW_OK,

            _STUB          => [ ALL, ],
        ],

        IS_DEBUG_MODE => [
            DESCRIPTION   => "Check if FBFalcon is in DEBUG mode or not",
            RETURN_TYPE   => LwBool,
            ARGUMENTS     => "void",
            STUB_RETURNS  => LW_FALSE,

            LIKE_INTERFACE => MASTER_RESET,
         ],

        GET_FALCON_CORE_IFACE => [
            DESCRIPTION     => "Return the falcon core interface",
            RETURN_TYPE     => "const FLCN_CORE_IFACES *",
            ARGUMENTS       => "void",
            STUB_RETURNS    => NULL,
            INTERFACE_TAG   => "fbflcnGetFalconCoreIFace",  #IFace instead of Iface

            LIKE_INTERFACE => IS_SUPPORTED,
        ],

        GET_FALCON_ENGINE_IFACE => [
            DESCRIPTION    => "Return the falcon engine interface",
            RETURN_TYPE    => "const FLCN_ENGINE_IFACES *",
            ARGUMENTS      => "void",
            STUB_RETURNS   => NULL,
            INTERFACE_TAG  => "fbflcnGetFalconEngineIFace",  #IFace instead of Iface

            LIKE_INTERFACE => IS_SUPPORTED,
        ],

        GET_FALCON_BASE => [
            DESCRIPTION    => "Return the Falcon base",
            RETURN_TYPE    => "LwU32",
            ARGUMENTS      => "void",
            STUB_RETURNS   => ZERO,

            LIKE_INTERFACE => IS_SUPPORTED,
        ],

        UCODE_NAME => [
            DESCRIPTION  => "returns ucode file name, member of FLCN_ENGINE_IFACES",
            RETURN_TYPE  => "const char *",
            ARGUMENTS    => "",
            STUB_RETURNS => "NULL",

            _STUB        => [ ALL, ], #Not yet used
        ],

        QUEUE_GET_NUM  => [
            DESCRIPTION    => "FbflcnQueueGetNum, member of FLCN_ENGINE_IFACES",
            RETURN_TYPE    =>  LwU32,
            ARGUMENTS      => "void",
            STUB_RETURNS   => ZERO,

            LIKE_INTERFACE => IS_SUPPORTED,
        ],

        QUEUE_READ  => [
            DESCRIPTION    => "FbflcnQueueRead, member of FLCN_ENGINE_IFACES",
            RETURN_TYPE    =>  LwBool,
            ARGUMENTS      => "LwU32 queueId, PFLCN_QUEUE pQueue",
            STUB_RETURNS   => LW_FALSE,

            LIKE_INTERFACE => IS_SUPPORTED,
        ],

        IS_DMEM_RANGE_ACCESSIBLE => [
            DESCRIPTION    => "Check if the DMEM range is accessible",
            RETURN_TYPE    => "LwBool",
            ARGUMENTS      => "LwU32 blkLo, LwU32 blkHi",
            STUB_RETURNS   => LW_TRUE, # All of DMEM is readable in pre-carveouts land

            _GV100        => [ VOLTA_and_later, ],
            _STUB         => [ pre_VOLTA, ],
        ],

        GET_DMEM_NUM_PRIV_RANGES => [
            DESCRIPTION    => "Get the number of DMEM priv ranges (carveouts)",
            RETURN_TYPE    =>  LwU32,
            ARGUMENTS      => "void",
            STUB_RETURNS   => ZERO,

            LIKE_INTERFACE => IS_DMEM_RANGE_ACCESSIBLE,
        ],

        GET_DMEM_PRIV_RANGE => [
            DESCRIPTION    => "FbflcnGetDmemPrivRange, member of FLCN_ENGINE_IFACES",
            RETURN_TYPE    =>  void,
            ARGUMENTS      => "LwU32 index, LwU32 *rangeStart, LwU32 *rangeEnd",

            LIKE_INTERFACE => IS_DMEM_RANGE_ACCESSIBLE,
        ],

        EMEM_GET_SIZE => [
            DESCRIPTION    => "Get the size of EMEM",
            RETURN_TYPE    => LwU32,
            ARGUMENTS      => "void",
            STUB_RETURNS   => ZERO,

            _STUB          => [ ALL, ],
        ],

        EMEM_GET_OFFSET_IN_DMEM_VA_SPACE => [
            DESCRIPTION    => "Get the offset off EMEM in DMEM VA space",
            RETURN_TYPE    => LwU32,
            ARGUMENTS      => "void",
            STUB_RETURNS   => ZERO,

            LIKE_INTERFACE => EMEM_GET_SIZE,
        ],

        EMEM_GET_NUM_PORTS => [
            DESCRIPTION    => "Get the number of EMEM ports",
            RETURN_TYPE    => LwU32,
            ARGUMENTS      => "void",
            STUB_RETURNS   => ZERO,

            LIKE_INTERFACE => EMEM_GET_SIZE,
        ],

        EMEM_READ => [
            DESCRIPTION    => "Read the EMEM carveout",
            RETURN_TYPE    => LwU32,
            ARGUMENTS      => "LwU32 offset, LwU32 length, LwU32 port, LwU32 *pBuf",
            STUB_RETURNS   => ZERO,

            LIKE_INTERFACE => EMEM_GET_SIZE,
        ],

        EMEM_WRITE => [
            DESCRIPTION    => "Write to the EMEM carveout",
            RETURN_TYPE    => LwU32,
            ARGUMENTS      => "LwU32 offset, LwU32 val, LwU32 width, LwU32 length, LwU32 port",
            STUB_RETURNS   => ZERO,

            LIKE_INTERFACE => EMEM_GET_SIZE,
        ],

    ],   # HAL interfaces

];


# return a reference to the Hal definition
return $fbflcnHal;
