# -*- mode: perl; -*-

# LwLink Hal interface definitions
# For a brief introduction to file format, see README in this directory.

my $lwlinkHal = [

    # per-GPU defaults for LWLINK engine for all interfaces below
    DEFAULTS => [
        # optional defaults for gpus not specifically setup by an interface
        _STUB       => [ CHEETAH, pre_dPASCAL, ],
    ],


    # HAL Interfaces
    # ********************************************************************************
    HAL_INTERFACES => [

        IOCTRL_DISCOVERY => [

            DESCRIPTION     => "Searches for ioctrl in DEVICE_INFO",
            RETURN_TYPE     => LwU32,
            ARGUMENTS       => "LwU32*",
            STUB_RETURNS    => ZERO,

            _GP100 => [ GP100, GV100, TU102, TU104, ],
            _GA100 => [ dAMPERE_and_later, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, dFPGA, -dAMPERE_and_later, ],
        ],

        LINK_DISCOVERY => [

            DESCRIPTION     => "Searches for lwlinks in DEVICE_INFO and IOCTRL",
            RETURN_TYPE     => LwU32,
            ARGUMENTS       => "void **pLwlVoid, LwU32",
            STUB_RETURNS    => ZERO,

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104 ],
            _GA100 => [ dAMPERE_and_later, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, -dAMPERE_and_later, ],
        ],

        PRINT_HSHUB_CONFIG => [

            DESCRIPTION     => "Prints HSHUB CONFIG values",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, ],
            _TU102 => [ TU102, TU104, ],
            _GA100 => [ GA100, ],
            _GH100 => [ GH100, G000, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, -GA100, -GH100, -G000, ],
        ],

        PRINT_HSHUB_IDLE_STATUS => [

            DESCRIPTION     => "Prints HSHUB idle status",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GP100 => [ GP100, GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        LOG_HSHUB_ERRORS => [

            DESCRIPTION     => "Prints HSHUB errors",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        PRINT_HSHUB_REQ_TIMEOUT_INFO => [

            DESCRIPTION     => "Prints HSHUB req timeout info",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        PRINT_HSHUB_READ_TIMEOUT_INFO => [

            DESCRIPTION     => "Prints HSHUB read timeout info",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        ENABLE_HSHUB_LOGGING => [

            DESCRIPTION     => "Enables HSHUB logging",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        PROGRAM_TL_COUNTERS => [

            DESCRIPTION     => "Program TL counters",
            RETURN_TYPE     => void,
            ARGUMENTS       => LwS32,

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        RESET_TL_COUNTERS => [

            DESCRIPTION     => "Reset TL counters",
            RETURN_TYPE     => void,
            ARGUMENTS       => LwS32,

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        READ_TL_COUNTERS => [

            DESCRIPTION     => "Read TL counters",
            RETURN_TYPE     => void,
            ARGUMENTS       => LwS32,

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        PRINT_VERBOSE => [

            DESCRIPTION     => "Print verbose status",
            RETURN_TYPE     => void,
            ARGUMENTS       => "BOOL",

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104,],
        ],

        DUMP_U_PHY => [

            DESCRIPTION     => "Dump UPHY state",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        PRINT_STATUS => [

            DESCRIPTION     => "Print the current status/state of LWLink",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwBool",

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, ],
            _TU102 => [ TU102, TU104, ],
            _GA100 => [ dAMPERE_and_later, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, -dAMPERE_and_later, ],
        ],

        PRINT_HELP => [

            DESCRIPTION     => "Print help/usage text",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GP100 => [ GP100, ],
            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GP100, -GV100, -TU102, -TU104, ],
        ],

        PRINT_LINK_TRAFFIC_TYPE => [

            DESCRIPTION     => "Print the requested link's traffic type",
            RETURN_TYPE     => void,
            ARGUMENTS       => LwU32,

            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GV100, -TU102, -TU104, ],
        ],

        PRINT_DLPL_STATE => [

            DESCRIPTION     => "Print DLPL device state",
            RETURN_TYPE     => void,
            ARGUMENTS       => LwU32,

            _GV100 => [ GV100, TU102, TU104, ],
            _GH100 => [ dHOPPER_and_later, ],
            _STUB  => [ ALL, -GV100, -TU102, -TU104, -dHOPPER_and_later, ],
        ],

        PRINT_TLC_STATE => [

            DESCRIPTION     => "Print TLC device state",
            RETURN_TYPE     => void,
            ARGUMENTS       => LwU32,

            _GV100 => [ GV100, TU102, TU104, ],
            _GA100 => [ dAMPERE_and_later, ],
            _STUB  => [ ALL, -GV100, -TU102, -TU104, -dAMPERE_and_later, ],
        ],

        PRINT_MIF_STATE => [

            DESCRIPTION     => "Print MIF device state",
            RETURN_TYPE     => void,
            ARGUMENTS       => LwU32,

            _GV100 => [ GV100, TU102, TU104, ],
            _STUB  => [ ALL, -GV100, -TU102, -TU104, ],
        ],

        PRINT_HSHUB_CONNECTION_CFG => [

            DESCRIPTION     => "Prints SYS/PEER_*_HSHUB_CONNECTION_CFG values",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GA100 => [  GA100, ],
            _STUB  => [ ALL, -GA100, ],
        ],

        PRINT_HSHUB_MUX_CONFIG => [

            DESCRIPTION     => "Prints the MUX registers for both HSHUBs",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GA100 => [ GA100, ],
            _STUB  => [ ALL, -GA100, ],
        ],
        
        DUMP_ALT_TRAINING => [

            DESCRIPTION     => "Prints ALT registers for all links",
            RETURN_TYPE     => void,
            ARGUMENTS       => "void",

            _GA100 => [ GA100, ],
            _STUB  => [ ALL, -GA100, ],
        ],
        
        DUMP_ALT_TRAINING_LINK => [

            DESCRIPTION     => "Print ALT registers for certain link",
            RETURN_TYPE     => void,
            ARGUMENTS       => "LwU32",

            _GA100 => [ GA100, ],
            _STUB  => [ ALL, -GA100, ],
        ],

        LWLIPT_BASE_ADDRESS => [

            DESCRIPTION     => "Get the LWLIPT Base Address",
            RETURN_TYPE     => LwU32,
            ARGUMENTS       => "LwU32",
            STUB_RETURNS    => ZERO,

            _GA100 => [ dAMPERE_thru_dADA, ],
            _GH100 => [ dHOPPER_and_later, ],
            _STUB  => [ ALL, -dAMPERE_and_later, ],
        ],

        LWLDL_BASE_ADDRESS => [

            DESCRIPTION     => "Get the LWLDL Base Address",
            RETURN_TYPE     => LwU32,
            ARGUMENTS       => "LwU32",
            STUB_RETURNS    => ZERO,

            _GA100 => [ dAMPERE_thru_dADA, ],
            _GH100 => [ dHOPPER_and_later, ],
            _STUB  => [ ALL, -dAMPERE_and_later, ],
        ],

        LWLTLC_BASE_ADDRESS => [

            DESCRIPTION     => "Get the LWLDL Base Address",
            RETURN_TYPE     => LwU32,
            ARGUMENTS       => "LwU32",
            STUB_RETURNS    => ZERO,

            _GA100 => [ dAMPERE_thru_dADA, ],
            _GH100 => [ dHOPPER_and_later, ],
            _STUB  => [ ALL, -dAMPERE_and_later, ],
        ],

        PRINT_LWLIPT_STATE => [

            DESCRIPTION     => "Print LwLipt device state",
            RETURN_TYPE     => void,
            ARGUMENTS       => LwU32,

            _GA100 => [ dAMPERE_and_later, ],
            _STUB  => [ ALL, -dAMPERE_and_later, ],
        ],

        IS_LINK_IN_RESET => [

            DESCRIPTION     => "Returns Link reset state",
            RETURN_TYPE     => LwBool,
            ARGUMENTS       => LwU32,
            STUB_RETURNS    => LW_FALSE,

            _GA100 => [ dAMPERE_and_later, ],
            _STUB  => [ ALL, -dAMPERE_and_later, ],
        ],

    ],   # HAL interfaces

];


# return a reference to the Hal definition
return $lwlinkHal;
