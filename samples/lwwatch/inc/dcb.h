//*****************************************************
//
// lwwatch WinDbg Extension
// dcb.h
//
//*****************************************************

/******************************** DCBCHK ***********************************\
*                                                                           *
* Module: dcb.h                                                             *
*   This file is autogenerated from //sw/main/bios/Utils/dcbchk/dcbchk.h    *
*                                                                           *
* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     *
* DO NOT UPDATE THIS FILE AT ALL.  YOU NEED TO UPDATE THE CORRESPONDING     *
* FILES IN THE DIRECTORY MENTIONED ABOVE TO MAKE MODIFICATIONS TO THIS      *
* FILE.  To create this file from the ones above, please see updating       *
* DCBCHK on the DCB Wiki page.                                              *
*                                                                           *
* Written by Steve Rogers (srogers@lwpu.com)                              *
* Let me know if you have any questions/comments/suggestions.               *
* If you want me to update the files above, just let me know.               *
*                                                                           *
\***************************************************************************/

//
// includes
//
#include "os.h"

//
// external dcb routines - dcb.c
//
void getDCB(LwU32, LwU64);
void dcbusage(void);

/******************************************************************************
* Copyright 2001-2022 LWPU, Corporation.  All rights reserved.              *
* THE INFORMATION CONTAINED HEREIN IS PROPRIETARY AND CONFIDENTIAL TO         *
* LWPU, CORPORATION.  USE, REPRODUCTION OR DISCLOSURE TO ANY THIRD          *
* PARTY IS SUBJECT TO WRITTEN PRE-APPROVAL BY LWPU, CORPORATION.            *
******************************************************************************/
/******************************************************************************
*                                                                             *
*   File:        version.h                                                    *
*                                                                             *
*   Date:        08/21/17                                                     *
*                                                                             *
*   Description: DCBCHK Version Header                                        *
*                                                                             *
******************************************************************************/

#ifndef _VERSION_H_
#define _VERSION_H_

#define STRINGIZE_NX(str)                   #str
#define STRINGIZE(str)                      STRINGIZE_NX(str)
#define CAT_IZE(n1, n2, n3)                 n1. ## n2. ## n3
#define CAT_VERSIONS_STR(n1, n2, n3)        CAT_IZE(n1, n2, n3)

#define TITLE                               "LWPU DCBCHK"
#define VERSION_MAJOR                       4
#define VERSION_MINOR                       100
#define VERSION                             VERSION_MAJOR
#define REVISION                            VERSION_MINOR
#define VERSION_PATCH                       0
#define VERSION_STR                         STRINGIZE(CAT_VERSIONS_STR(VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH))

#define RELEASE                             ""
#define COPYDATE                            "2001-2022"
#define COPYNAME                            "LWPU Corporation"

#ifndef EXENAME
#define EXENAME                             "<exelwtable>"
#endif  // EXE_NAME

#endif  // _VERSION_H_
/* _LWRM_COPYRIGHT_BEGIN_
 *
 * Copyright 2002-2021 by LWPU Corporation.  All rights reserved.  All
 * information contained herein is proprietary and confidential to LWPU
 * Corporation.  Any use, reproduction, or disclosure without the written
 * permission of LWPU Corporation is prohibited.
 *
 * _LWRM_COPYRIGHT_END_
 */

/******************************** DCBChecker *******************************\
*                                                                           *
* Module: dcbchk.h                                                          *
* This module holds all DCB defines and structures                          *
*                                                                           *
* Written by Steve Rogers (srogers@lwpu.com)                              *
* Let me know if you have any questions/comments/suggestions.               *
*                                                                           *
\***************************************************************************/

#ifndef __DCBCHK_H__
#define __DCBCHK_H__


#ifdef SEPARATE_COMP  // Not LWWATCH compile
typedef unsigned char      LwU8;
typedef unsigned short int LwU16;
typedef unsigned int       LwU32;
typedef unsigned long long LwU64; /* 0 to 18446744073709551615               */


#define BIT(b)  (((LwU32) 1)<<((LwU32) b))

#define dprintf printf

#define LW_FCLOSE(pgv) if(pgv->FP) { fclose(pgv->FP); pgv->FP=NULL; }
#define LW_EXIT(pgv)   exit(pgv->exitValue);

#else // LWWatch compile
#define INTERNAL 1

#define LW_FCLOSE(pgv)
#define LW_EXIT(pgv)
#endif


#if defined(WIN32) || defined(LW_UNIX) || defined(LW_QNX) || defined(LW_MACINTOSH) || defined(CLIENT_SIDE_RESMAN)
#define MYFS "/"
#else
#define MYFS "\/"
#endif

#define RT_DESCRIBE     0x00000001
#define RT_COMBOS       0x00000004
#ifdef INTERNAL
#define RT_VERBOSE      0x00000002
#define RT_REVCOMBOS    0x00000008
#define RT_SODCOMBOS    0x00000010
#define RT_COMBOMASK    0x0000001C
#define RT_PERFDESCRIBE 0x00000020
#else
#define RT_VERBOSE      0x00000000
#define RT_REVCOMBOS    0x00000000
#define RT_SODCOMBOS    0x00000000
#define RT_COMBOMASK    0x00000000
#define RT_PERFDESCRIBE 0x00000000
#endif


// Structure definitions
typedef struct GLOBAL_VARIABLES *PGV;

// Function pointer structure
struct GLOBAL_INTERFACE_POINTERS {
  LwU8 ( * GetLwU8) (PGV);
  LwU16 ( * GetLwU16) (PGV);
  LwU32 ( * GetLwU32) (PGV);

  // Display Path entry data
  LwU32 ( * GetType)     (PGV, LwU32);
  LwU32 ( * GetI2CPort)  (PGV, LwU32);
  LwU32 ( * GetHeadMask) (PGV, LwU32);
  LwU32 ( * GetBus)      (PGV, LwU32);
  LwU32 ( * GetLocation) (PGV, LwU32);
  LwU32 ( * GetOutput)   (PGV, LwU32);

  LwU32 ( * GetCRTMaxFreq)(PGV, LwU32); // in MHz
  LwU32 ( * GetLCDDDC)    (PGV, LwU32);
  LwU32 ( * GetLCDControl)(PGV, LwU32);
  LwU32 ( * GetLCDExtType)(PGV, LwU32);
  LwU32 ( * GetTVFamily)  (PGV, LwU32);
  LwU32 ( * GetTVFormat)  (PGV, LwU32);
  LwU32 ( * GetTVDACs)    (PGV, LwU32);

  LwU32 ( * GetI2CRec)               (PGV, LwU32);
  LwU32 ( * GetI2CAccess)            (PGV, LwU32);

  void ( * strcatLCDEncoderName)(PGV, LwU32, char*);
  void ( * strcatTVEncoderName) (PGV, LwU32, char*);
  void ( * GetMiscStr)          (PGV, LwU32, char*);

  void ( * DescribeMisc)(PGV);
  void ( * DescribeTables)(PGV);
  void ( * DescribeBiosStructs)(PGV);
  void ( * CheckBiosStructs)(PGV);
};

struct PERSONAL_CINEMA_DATA {
  LwU8 Version;
  LwU8 BoardID;
  LwU8 VendorID;
  LwU8 SoundExpStd;
  LwU8 TunerType;
  LwU8 Demodulator;
  LwU8 MCandPC;
  LwU8 Sound2;
  LwU8 Tuner2;
  LwU8 TunerFunc;
  LwU8 Demod2;
};

struct DCB2X_VARIABLES {
  LwU8  MiscVersion;
  LwU8  ExtHwMonitorI2C;
  LwU32  SSDeviceMask;
  LwU8  SSIntPercent;
  LwU8  SSExtLevel;
  LwU8  SSDevices;
  LwU8  ThermalTypePort;
  LwU8  ThermalI2CAddr;
  LwU8  StereoGlasses;
  LwU8  DACBSwitch;
  LwU8  DACBGPIO;
  LwU8  SSFlags;
  LwU8  SSMinPLLUpdate;
  LwU16  SpreadPeriod;
};

struct DCB3X_SS_VARIABLES {
  LwU32 Version;
  LwU16 EntryBase;
  LwU32 EntryCount;
  LwU32 EntrySize;

  LwU8 InternalPercentage;
  LwU8 ExternalLevel;
  LwU8 SSFlags;
  LwU8 SSMinPLLUpdate;
  LwU16 SpreadPeriod;
};

struct DCB3X_I2CDEV_VARIABLES {
  LwU16 EntryBase;
  LwU32 EntryCount;
  LwU32 EntrySize;
  LwU8 Flags;

};

struct DCB3X_CONNECTOR_VARIABLES {
  LwU16 EntryBase;
  LwU32 EntryCount;
  LwU32 EntrySize;

  LwU32 Platform;
};

struct DCB3X_EXTERNAL_GPIO_VARIABLES {
  LwU32 MasterPointer;
  LwU8 MasterVersion;
  LwU32 MasterHeaderSize;
  LwU16 MasterEntryBase;
  LwU32 MasterEntryCount;
  LwU32 MasterEntrySize;
};

struct DCB3X_DAC_OUTPUT_VARIABLES {
  LwU16 TablePointer;

  LwU8 Version;
  LwU16 EntryBase;
  LwU32 EntryCount;
  LwU32 EntrySize;
  LwU16 DACFuseMap[3];
};

struct DCB3X_VARIABLES {
  struct DCB3X_SS_VARIABLES            ss;
  struct DCB3X_I2CDEV_VARIABLES        i2cdev;
  struct DCB3X_CONNECTOR_VARIABLES     cnctr;
  struct DCB3X_EXTERNAL_GPIO_VARIABLES extGpio;
  struct DCB3X_DAC_OUTPUT_VARIABLES    dacOut;

  LwU8 PrimaryPort;
  LwU8 SecondaryPort;

  LwU8 Flags;
  LwU32 ( * GetTVConnectorCount)    (PGV, LwU32);
};


struct DCB4X_SS_VARIABLES {
  LwU16 EntryBase;
  LwU32 EntryCount;
  LwU32 EntrySize;
  LwU8 Flags;
};


struct DCB4X_HDTV_XLATE_VARIABLES {
  LwU16 EntryBase;
  LwU32 EntryCount;
  LwU32 EntrySize;
};

struct DCB4X_SWITCHED_OUTPUTS_VARIABLES {
  LwU16 EntryBase;
  LwU32 EntryCount;
  LwU32 EntrySize;
};


struct DCB4X_DEVICE_ENTRY_PATCH_TABLE_VARIABLES {
  LwU32 EntryBase;
  LwU32 EntrySize;
  LwU32 EntryCount;
};


struct DCB4X_CONNECTOR_PATCH_TABLE_VARIABLES {
  LwU32 EntryBase;
  LwU32 EntrySize;
  LwU32 EntryCount;
};

struct DCB4X_VARIABLES {
  struct DCB4X_SS_VARIABLES               ss;
  struct DCB4X_HDTV_XLATE_VARIABLES       hdxl;
  struct DCB4X_SWITCHED_OUTPUTS_VARIABLES swout;
  struct DCB4X_DEVICE_ENTRY_PATCH_TABLE_VARIABLES dept;
  struct DCB4X_CONNECTOR_PATCH_TABLE_VARIABLES cpt;
};

struct BMP_VARIABLES {
  LwU8 CRTI2CPort;
  LwU8 TVI2CPort;
  LwU8 DFPI2CPort;
  LwU8 RsvdI2CPort;
  LwU16 I2CPort0IO;
  LwU16 I2CPort1IO;

  LwU16 BMPHeaderPtr;
};


struct BIT_VARIABLES {
  LwU16 BITHeaderPtr;

  LwU8 MXMConfigFlags0;
};


struct GLOBAL_VARIABLES {
  int   exitValue;
  int   errorcount;
  FILE *FP;
  LwU32  LwrrentFileOffset;
  LwU32  pBiosImage;
  LwU64 lwwVirtBiosImage;
  LwU32  IfrSize;
  LwU32  ImageSize;
  LwU32  Device;
  LwU32  FakePCIDevid;
  LwU32  RuntimeFlags;
  LwU8  DisplayControlFlags;
  LwU8  filename[1024];
  LwU8  IntFlags2;     // Byte 49h offset holds IKOS bit

  LwU32  BiosVersion;   // Found in BMP and BIT
  LwU8  OemVersion;

  LwU8 HeadAssignment[16];
  LwU32 HeadAIndex;
  LwU32 DevicesPatchPtr;

  // DCB variables and defines
  LwU16  DCBHeaderPtr;
  LwU8  DCBVersion;
  LwU16  DCBEntryBase;  // Base pointer to the DCB
  LwU32  DCBEntryCount;
  LwU32  DCBEntrySize;
  LwU16  I2CEntryBase;  // Base pointer to the ICB
  LwU32  I2CEntryCount;
  LwU32  I2CEntrySize;
  // Specific to DCB 2.0+
  LwU8  GPIOVersion;   // Only needed on 0x40 vs. 0x41
  LwU16  GPIOHeaderPtr;
  LwU16  GPIOEntryBase;
  LwU32  GPIOEntryCount;
  LwU32  GPIOEntrySize;

  LwU16  InputDevicesPtr;
  LwU16  InputDevicesBase;
  LwU32  InputDevicesCount;
  LwU32  InputDevicesSize;

  LwU32 VBIOSCore;
  LwU8 VBIOSType;

  LwU32 skip_dcbchk;

  struct GLOBAL_INTERFACE_POINTERS gIP;
  struct PERSONAL_CINEMA_DATA      gPCD;
  struct DCB2X_VARIABLES           g2x;
  struct DCB3X_VARIABLES           g3x;
  struct DCB4X_VARIABLES           g4x;
  struct BMP_VARIABLES             bmp;
  struct BIT_VARIABLES             bit;


#ifdef ADD_SWAK_MSG_CODE
  // allow callback for message printing
  LwU32   msgBufLwrrentPos;
  LwU32   msgBufAllocSize;
  char  *pMsgBuf;
#endif
};

#define INTFLAGS2_OFFSET      0x49

#define INTFLAGS2_IKOS_BUILD  0x4   // I don't this was ever used..
#define INTFLAGS2_EMULATION   0x4   //VB_CONTROL_FLAG_1_EMULATION_BUILD
#define INTFLAGS2_SIMULATION  0x8   //VB_CONTROL_FLAG_1_SIMULATION_BUILD
#define PRODUCTION            0x0   // Should be production VBIOS.

#define DCB_TABLE_PTR_OFFSET  0x36
#define DCB_SIGNATURE         0x4EDCBDCB

#define BOOTFSM_SIGNATURE 0x4c
#define BOOTFSM_INSTANCE0_OFFSET 0x1000
#define BOOTFSM_INSTANCE0_SIGNATURE1 0x5746564E
#define BOOTFSM_INSTANCE0_SIGNATURE2 0x57464F4E

#define IFR_SIGNATURE 0x4947564E
#define IFR_SIZE_OFFSET 0x14

#define ROMDIR_SIGNATURE 0x44524652
#define ROMDIR_VER_OFFSET 0x4
#define ROMDIR_OPROM_OFFSET 0x8

#define DISPLAY_CONTROL_FLAG_OFFSET 0x2
#define NO_DISPLAY_SUBSYSTEM_MASK 0x2

// Quick check defines
#define TYPE_CRT   0x0
#define TYPE_TV    0x1
#define TYPE_TMDS  0x2
#define TYPE_LVDS  0x3
// SDVO for DCB 3.0+
#define TYPE_SDVO  0x4
// SDI for DCB 4.0+
#define TYPE_SDI   0x5
// EOL for DCB 3.0+
// DisplayPort for DCB 4.0+
#define TYPE_DP    0x6
#define TYPE_WBD   0x8
#define TYPE_EOL   0xe
#define TYPE_EOF   0xf
#define TYPE_SKIP  0xf

#define HEADMASK_A  0x1
#define HEADMASK_B  0x2

#define LOCATION_CHIP  0x0
#define LOCATION_BOARD 0x1
#define LOCATION_SDVO  0x2

#define OUTPUT_DAC_A   0x1
#define OUTPUT_LINK_A  0x1
#define OUTPUT_MIO_A   0x1
#define OUTPUT_DAC_B   0x2
#define OUTPUT_LINK_B  0x2
#define OUTPUT_MIO_B   0x2
#define OUTPUT_LINK_AB 0x3
#define OUTPUT_MIO_AB  0x3
#define OUTPUT_DAC_C   0x4
#define OUTPUT_LINK_C  0x4
#define OUTPUT_LINK_CD 0xC

#define ICB_ACCESS_CRTC  0x0
#define ICB_ACCESS_DIRIO 0x1
#define ICB_ACCESS_PCIIO 0x3
#define ICB_ACCESS_EOF 0xFF

#define INPUT_DEVICES_EOF 0xF

#define MISC_STR_SPACE 0x54

#define Core96    0x96
#define Core94    0x94
#define Core92    0x92
#define Core90    0x90
#define Core88    0x88
#define Core86    0x86
#define Core84    0x84
#define Core82    0x82
#define Core80    0x80
#define Core75    0x75
#define Core70    0x70
#define CoreOld   0x00

// Main dcbchk.c functions
char GetCharPerValueWithMax(LwU32,  LwU32,  char);
void strcatCharPerMask     (char*, LwU32);
void strcatMiscStr_Generic (PGV, LwU32, char*);
void TranslateDevice(PGV, LwU32);
void IsDisplayfullROM(PGV, LwU32);
void ErrorCountCheck(PGV);
void dcbGetDevice(PGV);
void dcbGetDCBVersion(PGV);
void dcbInitializegIP(PGV);
#ifdef SWAK_HEADER // SWAK compile
void getDCB(PGV, LwU32, LwU64);
#endif
#ifdef ADD_SWAK_MSG_CODE
void msgPrintf(PGV,const char *fmt,...);
#endif


// filled out in dcb4x.c
void InitializeDCB40Data    (PGV);
void Describe_4x(PGV);
LwU32 getVirtualDevice_4x(PGV, LwU32);
LwU32 getDFPSubLinks_4x(PGV, LwU32);
LwU32 GetGpioFunction_40(PGV, LwU32, LwU32, LwU32);
void CheckGpioAssignments_4x(PGV);
void CheckHotplug_4x(PGV);
void CheckHdcp_4x(PGV);
void CheckDPHdmi_4x(PGV);
void CheckDP_4x(PGV);
void CheckLcdId_4x(PGV);
LwU32 GetConnectorEntryDP2DVIA_4x(PGV, LwU32);
LwU32 GetConnectorEntryDP2DVIB_4x(PGV, LwU32);
LwU32 GetConnectorEntryDP2DVIC_4x(PGV, LwU32);
LwU32 GetConnectorEntryDP2DVID_4x(PGV, LwU32);
LwU32 GetConnectorEntryHotplugC_4x(PGV, LwU32);
LwU32 GetConnectorEntryHotplugD_4x(PGV, LwU32);
LwU32 GetConnectorEntryHotplugE_4x(PGV, LwU32);
LwU32 GetConnectorEntryHotplugF_4x(PGV, LwU32);
LwU32 GetConnectorEntryHotplugG_4x(PGV, LwU32);
LwU32 GetConnectorEntryDPAuxI2CSelectA_4x(PGV, LwU32);
LwU32 GetConnectorEntryDPAuxI2CSelectB_4x(PGV, LwU32);
LwU32 GetConnectorEntryDPAuxI2CSelectC_4x(PGV, LwU32);
LwU32 GetConnectorEntryDPAuxI2CSelectD_4x(PGV, LwU32);
LwU32 GetConnectorEntryPSRFrameLockA_4x(PGV, LwU32);
LwU32 GetConnectorEntryLcdId_4x(PGV, LwU32);
LwU32 CheckSharedDDCwithSwitchedOutputs_4x(PGV, LwU32, LwU32);
void DescribeI2CDevicesTable_4x   (PGV);


// Filled out in dcb3x.c
LwU32 getHeadMask_3x         (PGV, LwU32);
LwU32 getLocation_3x         (PGV, LwU32);
LwU32 getOutput_3x           (PGV, LwU32);
LwU32 getCRTMaxFreq_3x       (PGV, LwU32);
LwU32 getTVFamily_3x         (PGV, LwU32);
LwU32 getTVFormat_3x         (PGV, LwU32);
LwU32 getTVDACs_3x           (PGV, LwU32);
LwU32 getConnectorIndex_3x   (PGV, LwU32);
LwU32 getLCDDDC_3x           (PGV, LwU32);
LwU32 getLCDControl_3x       (PGV, LwU32);
LwU32 getExtEncoder_3x       (PGV, LwU32);
void strcatTVEncoderName_3x (PGV, LwU32, char*);
void strcatLCDEncoderName_3x(PGV, LwU32, char*);
LwU32 getDisplaySpecific_3x  (PGV, LwU32);
LwU32 getDisplayPath_3x      (PGV, LwU32);
LwU32 getBootRemoved_3x      (PGV, LwU32);
LwU32 getBlindBootRemoved_3x (PGV, LwU32);
LwU32 getTVRSETParams_3x     (PGV, LwU32);
LwU32 getExtCCBPortIndex_3x  (PGV, LwU32);
LwU32 getExtI2CPort_3x       (PGV, LwU32);
void ExtGpioFunctionText    (LwU32, LwU32, char *);

void getMiscStr_3x (PGV, LwU32, char*);

LwU32 getTVConnectorCount_3x       (PGV, LwU32);

void InitializeDCB30Data    (PGV);
void DescribeSSTable        (PGV);
void DescribeConnectorTable (PGV);
void DescribeDacOutputTable (PGV);

LwU32 GetConnectorEntry(PGV, LwU32);
LwU32 GetConnectorEntryType (PGV, LwU32);
LwU32 GetConnectorEntryLocation(PGV, LwU32);
LwU32 GetConnectorEntryHotplugA(PGV, LwU32);
LwU32 GetConnectorEntryHotplugB(PGV, LwU32);
LwU32 GetConnectorEntryPSRFrameLockA(PGV, LwU32);

LwU32 GetI2CDevicesEntryType(PGV, LwU32);
LwU32 GetI2CDevicesEntryAddress   (PGV, LwU32);
LwU32 GetI2CDevicesEntryExtComPort(PGV, LwU32);
LwU32 GetI2CDevicesEntry          (PGV, LwU32);

void DescribeI2CDevicesTable_3x   (PGV);
void DescribePersonalCinemaInfo_3x(PGV);

void CheckDacOutputLevelTable     (PGV);



// filled out in dcb2x.c
LwU32 getType_2x      (PGV, LwU32);
LwU32 getI2CPort_2x   (PGV, LwU32);
LwU32 getHeadMask_2x  (PGV, LwU32);
LwU32 getBus_2x       (PGV, LwU32);
LwU32 getLocation_2x  (PGV, LwU32);
LwU32 getOutput_2x    (PGV, LwU32);
LwU32 getDSI_2x       (PGV, LwU32);
LwU32 getCRTMaxFreq_2x(PGV, LwU32);
LwU32 getLCDDDC_2x    (PGV, LwU32);
LwU32 getLCDControl_2x(PGV, LwU32);
LwU32 getTVFamily_2x  (PGV, LwU32);
LwU32 getTVFormat_2x  (PGV, LwU32);
LwU32 getTVModel_2x   (PGV, LwU32);
LwU32 getTVDACs_2x    (PGV, LwU32);
LwU32 getI2CRec_2x    (PGV, LwU32);
void getMiscStr_2x   (PGV, LwU32, char*);

void InitializeDCB20Data(PGV);

LwU8 GetIDEntry  (PGV, LwU32);
LwU32 GetIDMode   (PGV, LwU32);
LwU32 GetIDType   (PGV, LwU32);
LwU32 GetIDVidType(PGV, LwU32);


LwU16 GetGPIOEntry    (PGV, LwU32, LwU32, LwU32);
LwU32 GetGPIONumber   (PGV, LwU32, LwU32, LwU32);
LwU32 GetGPIOFunction (PGV, LwU32, LwU32, LwU32);
LwU32 GetGPIOOffData  (PGV, LwU32, LwU32, LwU32);
LwU32 GetGPIOOffEnable(PGV, LwU32, LwU32, LwU32);
LwU32 GetGPIOOnData   (PGV, LwU32, LwU32, LwU32);
LwU32 GetGPIOOnEnable (PGV, LwU32, LwU32, LwU32);
LwU32 GetGPIOPWM      (PGV, LwU32, LwU32, LwU32);

void GpioFunctionText(LwU32, char *);
void DescribeGpioAssignments_2x   (PGV);
void DescribeInputDevices_2x      (PGV);
void DescribePersonalCinemaInfo_2x(PGV);

void DescribeSoundDecoderName(PGV, LwU32);
void DescribeTunerName       (PGV, LwU32);
void DescribeDigitalTunerName(PGV, LwU32);




// filled out in dcb1x.c
#ifdef INTERNAL
LwU32 getType_1x      (PGV, LwU32);
LwU32 getI2CPort_1x   (PGV, LwU32);
LwU32 getHeadMask_1x  (PGV, LwU32);
LwU32 getBus_1x       (PGV, LwU32);
LwU32 getLocation_1x  (PGV, LwU32);
LwU32 getOutput_1x    (PGV, LwU32);
LwU32 getCRTMaxFreq_1x(PGV, LwU32);
LwU32 getLCDDDC_1x    (PGV, LwU32);
LwU32 getLCDControl_1x(PGV, LwU32);
LwU32 getTVFamily_1x  (PGV, LwU32);
LwU32 getTVFormat_1x  (PGV, LwU32);
LwU32 getTVDACs_1x    (PGV, LwU32);
LwU32 getI2CRec_1x    (PGV, LwU32);

void getMiscStr_1x (PGV, LwU32, char*);

void InitializeDCB1XData(PGV);


// Filled out in dcbbmp.c
void InitializeBMP(PGV);
void CheckVoltageTable(PGV);
void DescribeVoltageTable(PGV);
LwU8 GetVoltageEntryVoltage(PGV, LwU32);



// Filled out in dcbbit.c
void InitializeBIT(PGV);
LwU32 getTVConnectorCount_3x_Broken(PGV, LwU32);

#endif

// filled out in dcbi2c.c
LwU32 GetI2CAccess_1x           (PGV, LwU32);
LwU32 GetI2CAccess_41           (PGV, LwU32);
LwU32 GetI2CCRTCReadPort        (PGV, LwU32);
LwU32 GetI2CCRTCWritePort       (PGV, LwU32);
LwU32 GetI2CDirIOReadPort       (PGV, LwU32);
LwU32 GetI2CDirIOWritePort      (PGV, LwU32);
LwU32 GetI2CPCIBus              (PGV, LwU32);
LwU32 GetI2CPCIDevice           (PGV, LwU32);
LwU32 GetI2CPCIFunction         (PGV, LwU32);
LwU32 GetI2CPCIBar              (PGV, LwU32);
LwU32 GetI2CPCIType             (PGV, LwU32);
LwU32 GetI2CPCIOffset           (PGV, LwU32);
LwU32 GetI2CMMPhysicalPort      (PGV, LwU32);
LwU32 GetI2CMMIOReadPortAddr    (PGV, LwU32);
LwU32 GetI2CPMGRPhysicalPort    (PGV, LwU32);
LwU32 GetI2CPMGRPortSpeed       (PGV, LwU32);
LwU32 GetI2CPMGRPortHybridPad_4x(PGV, LwU32);
LwU32 GetI2CPMGRPortDPPort_4x   (PGV, LwU32);
LwU32 GetCommDpAuxPhysicalPort  (PGV, LwU32);
LwU32 GetCommDpAuxHybridPad_4x  (PGV, LwU32);
LwU32 GetDPPMGRPortI2CPort_4x   (PGV, LwU32);
LwU32 GetCCBI2CPort             (PGV, LwU32);
LwU32 GetCCBI2CPortSpeed        (PGV, LwU32);
LwU32 GetCCBDPPort              (PGV, LwU32);


// filled out in dcbtest.c
void CheckMain(PGV);


#endif // __DCBCHK_H__


