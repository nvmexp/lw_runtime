struct VSOut
{
    float4 position : SV_Position;
    float2 txcoord: TexCoord;
};

cbuffer globalParams
{
	float2 screenSize;
	int captureState;
	float4 tileUV;
}

cbuffer controlBuf
{
	float g_sldVignette;
}

Texture2D texColor;
SamplerState samLinear;

#ifndef LW_COMMON
#define LW_COMMON

#define CAPTURE_STATE_NOT_STARTED		0
#define CAPTURE_STATE_REGULAR			1
#define CAPTURE_STATE_REGULARSTEREO		2
#define CAPTURE_STATE_HIGHRES			3
#define CAPTURE_STATE_360			4
#define CAPTURE_STATE_360STEREO			5

#endif 

/*
float3 vignette(float3 color, float2 texCoords)
{
	float2 inTex; // Distance from center
	if (captureState == CAPTURE_STATE_HIGHRES)
	{
		inTex = float2((tileUV.z - tileUV.x) * texCoords.x + tileUV.x, (tileUV.w - tileUV.y) * texCoords.y + tileUV.y) - 0.5.xx;
	}
	else 
	{
		inTex = texCoords - 0.5.xx;
	}
	inTex.x *= 1.2; // Slight aspect ratio correction
	float vignette = saturate(1.0 - dot( inTex, inTex )); // Length
	vignette = saturate(smoothstep(0.3, 1.0, vignette)); // Smoothstep
	float3 color_vign = color * vignette;

	if (captureState != CAPTURE_STATE_360 && captureState != CAPTURE_STATE_360STEREO)
		color = lerp(color, color_vign, g_sldVignette);	
	
	return color;
}
*/

float4 PS_Vignette( VSOut IN ): SV_Target
{
	float4 color = texColor.Sample(samLinear, IN.txcoord.xy);

	float2 inTex = (captureState == CAPTURE_STATE_HIGHRES) 
	? IN.txcoord.xy * (tileUV.zw - tileUV.xy) + tileUV.xy 
	: IN.txcoord.xy;

	inTex.xy -= 0.5;
	inTex.x *= 1.2; 

	float vignette = dot(inTex,inTex);
	vignette = smoothstep(0.7, 0.0, vignette);
	vignette = lerp(1.0,vignette,g_sldVignette);

	if (captureState != CAPTURE_STATE_360 && captureState != CAPTURE_STATE_360STEREO) 
		color.rgb *= vignette * vignette;


	return color;
}


