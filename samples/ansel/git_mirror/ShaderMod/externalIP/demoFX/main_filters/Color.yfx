cbuffer globalParams
{
	float2 screenSize;
	float elapsedTime;
	int captureState;
}

cbuffer controlBuf
{
	float g_sldIntensity;
	float g_sldHue;
	float g_sldTemperature;
	float g_sldVibrance;
}

Texture2D texColor;
SamplerState samLinear;

void PSMain(in float4 position : SV_Position, in float2 uv : TexCoord, out float4 color : SV_Target)
{
	color = texColor.Sample(samLinear, uv);

	//temperature approximation in YUV space. Colwersion values: wikipedia
	float3 YUV;
	YUV.x = dot(color.rgb, float3(0.299, 0.587, 0.114)); 
	YUV.y = dot(color.rgb, float3(-0.14713, -0.28886, 0.436)); 
	YUV.z = dot(color.rgb, float3(0.615, -0.51499, -0.10001)); 

	YUV.y -= g_sldTemperature * YUV.x * 0.35;
	YUV.z += g_sldTemperature * YUV.x * 0.35;

	YUV.y += sin(g_sldHue * 6.283185307) * g_sldIntensity * g_sldIntensity * YUV.x; //g_sldIntensity^2 for a more natural slider response feel
	YUV.z += cos(g_sldHue * 6.283185307) * g_sldIntensity * g_sldIntensity * YUV.x;

	color.r = dot(YUV.xyz,float3(1.0,0.0,1.13983));
	color.g = dot(YUV.xyz,float3(1.0,-0.39465,-0.58060));
	color.b = dot(YUV.xyz,float3(1.0,2.03211,0.0));

	color.rgb = saturate(color.rgb);

	//vibrance
	float2 maxmin;
	maxmin.x = max(max(color.r, color.g), color.b);
	maxmin.y = min(min(color.r, color.g), color.b);

	float sat = dot(maxmin, float2(1, -1));
	float luma = dot(color.rgb, float3(0.299, 0.587, 0.114));

	//float3 sat_diff = color.rgb - luma;
	//if(g_sldVibrance > 0) color.rgb += sat_diff * sat * g_sldVibrance;
	//if(g_sldVibrance < 0) color.rgb -= sat_diff * sat * (-g_sldVibrance);

	[flatten]
	if(g_sldVibrance > 0) //if adding saturation, keep strongly saturated colors less affected
		color.rgb = lerp(luma.rrr, color.rgb, 1 + g_sldVibrance * (1 - sat));
	else //if removing saturation, remove most from those with much saturation
		color.rgb = lerp(luma.rrr, color.rgb, saturate(1 + g_sldVibrance * (1 + sat)));
}
