// TLOG_T(+3): Cg shader: 
#define f2i floatToRawIntBits
#pragma option(unroll none)
    float4 R0 = 0;
    float4 R1 = 0;
    float4 R2 = 0;
    float4 R3 = 0;
    float4 R4 = 0;
    float4 R5 = 0;
    float4 R6 = 0;
    float4 R7 = 0;
    float4 R8 = 0;
    float4 R9 = 0;
    float4 R10 = 0;
    float4 R11 = 0;
    float4 R12 = 0;
    float4 R13 = 0;
    float4 R14 = 0;
    float4 R15 = 0;
uniform float4 u_const_0 : C[15][0];
varying in float4 i_ATTR0 : ATTR0;
varying out float4 o_HPOS : HPOS;
uniform float4 u_const_1 : C[15][16];
uniform float4 u_const_2 : C[15][32];
uniform float4 u_const_3 : C[15][48];
varying in float4 i_ATTR1 : ATTR1;
varying in float4 i_ATTR2 : ATTR2;
varying in float4 i_ATTR3 : ATTR3;
varying in float4 i_ATTR4 : ATTR4;
varying in float4 i_ATTR5 : ATTR5;
varying in float4 i_ATTR6 : ATTR6;
varying in float4 i_ATTR7 : ATTR7;
varying in float4 i_ATTR8 : ATTR8;
uniform sampler2D texUnit0 : TEXUNIT0;
uniform sampler2D texUnit1 : TEXUNIT1;
uniform sampler2D texUnit2 : TEXUNIT2;
uniform sampler2D texUnit3 : TEXUNIT3;
uniform float4 u_const_4 : C[15][64];
varying out float4 o_COL0 : COL0;

void main()
{

    // DP4 o[HPOS].x, v[0], c[0];
    o_HPOS.x = 0;
    o_HPOS.x = (dot( i_ATTR0, u_const_0 ).xxxx).x;

    // DP4 o[HPOS].y, v[0], c[1];
    o_HPOS.y = 0;
    o_HPOS.y = (dot( i_ATTR0, u_const_1 ).xxxx).y;

    // DP4 o[HPOS].z, v[0], c[2];
    o_HPOS.z = 0;
    o_HPOS.z = (dot( i_ATTR0, u_const_2 ).xxxx).z;

    // DP4 o[HPOS].w, v[0], c[3];
    o_HPOS.w = 0;
    o_HPOS.w = (dot( i_ATTR0, u_const_3 ).xxxx).w;

    // MOV R0, v[1];
    R0 = i_ATTR1;

    // MOV R1, v[2];
    R1 = i_ATTR2;

    // MOV R2, v[3];
    R2 = i_ATTR3;

    // MOV R3, v[4];
    R3 = i_ATTR4;

    // MOV R4, v[5];
    R4 = i_ATTR5;

    // MOV R5, v[6];
    R5 = i_ATTR6;

    // MOV R6, v[7];
    R6 = i_ATTR7;

    // MOV R7, v[8];
    R7 = i_ATTR8;

    // TXL R0, R7, TEX0, 2D;
    R0 = tex2Dlod( texUnit0, R7 );

    // TXL R1, R7, TEX1, 2D;
    R1 = tex2Dlod( texUnit1, R7 );

    // TXL R2, R6, TEX0, 2D;
    R2 = tex2Dlod( texUnit0, R6 );

    // TXL R3, R7, TEX2, 2D;
    R3 = tex2Dlod( texUnit2, R7 );

    // TXL R4, R1, TEX2, 2D;
    R4 = tex2Dlod( texUnit2, R1 );

    // TXL R5, R2, TEX2, 2D;
    R5 = tex2Dlod( texUnit2, R2 );

    // TXL R6, R7, TEX2, 2D;
    R6 = tex2Dlod( texUnit2, R7 );

    // TXL R7, R4, TEX0, 2D;
    R7 = tex2Dlod( texUnit0, R4 );

    // TXL R8, R3, TEX0, 2D;
    R8 = tex2Dlod( texUnit0, R3 );

    // TXL R9, R5, TEX3, 2D;
    R9 = tex2Dlod( texUnit3, R5 );

    // TXL R10, R1, TEX2, 2D;
    R10 = tex2Dlod( texUnit2, R1 );

    // TXL R11, R7, TEX3, 2D;
    R11 = tex2Dlod( texUnit3, R7 );

    // TXL R12, R4, TEX1, 2D;
    R12 = tex2Dlod( texUnit1, R4 );

    // TXL R13, R2, TEX1, 2D;
    R13 = tex2Dlod( texUnit1, R2 );

    // TXL R14, R1, TEX3, 2D;
    R14 = tex2Dlod( texUnit3, R1 );

    // TXL R15, R5, TEX0, 2D;
    R15 = tex2Dlod( texUnit0, R5 );

    // MUL R0, R0, R1;
    R0 = R0 * R1;

    // MUL R0, R0, R2;
    R0 = R0 * R2;

    // MUL R0, R0, R3;
    R0 = R0 * R3;

    // MUL R0, R0, R4;
    R0 = R0 * R4;

    // MUL R0, R0, R5;
    R0 = R0 * R5;

    // MUL R0, R0, R6;
    R0 = R0 * R6;

    // MUL R0, R0, R7;
    R0 = R0 * R7;

    // MUL R0, R0, R8;
    R0 = R0 * R8;

    // MUL R0, R0, R9;
    R0 = R0 * R9;

    // MUL R0, R0, R10;
    R0 = R0 * R10;

    // MUL R0, R0, R11;
    R0 = R0 * R11;

    // MUL R0, R0, R12;
    R0 = R0 * R12;

    // MUL R0, R0, R13;
    R0 = R0 * R13;

    // MUL R0, R0, R14;
    R0 = R0 * R14;

    // MUL R0, R0, R15;
    R0 = R0 * R15;

    // MUL R0, R0, c[4].x;
    R0 = R0 * u_const_4.xxxx;

    // MOV o[COL0], R0;
    o_COL0 = R0;
}
// TLOG_T(+3): Command Line: -profile vpf -nofastmath -po cimm,hexfp,ubank=14 -po sm40 -po hint=2