// TLOG_T(+3): Cg shader: 
#define f2i floatToRawIntBits
#pragma option(unroll none)
uniform float4 u_const_0 : C[15][0];
varying in float4 i_ATTR0 : ATTR0;
varying out float4 o_HPOS : HPOS;
uniform float4 u_const_1 : C[15][16];
uniform float4 u_const_2 : C[15][32];
uniform float4 u_const_3 : C[15][48];
varying in float4 i_ATTR1 : ATTR1;
varying out float4 o_TEX0 : TEX0;
varying in float4 i_ATTR2 : ATTR2;
varying out float4 o_TEX1 : TEX1;
varying in float4 i_ATTR3 : ATTR3;
varying out float4 o_TEX2 : TEX2;
varying in float4 i_ATTR4 : ATTR4;
varying out float4 o_TEX3 : TEX3;
varying in float4 i_ATTR5 : ATTR5;
varying out float4 o_TEX4 : TEX4;
varying in float4 i_ATTR6 : ATTR6;
varying out float4 o_TEX5 : TEX5;
varying in float4 i_ATTR7 : ATTR7;
varying out float4 o_TEX6 : TEX6;
varying in float4 i_ATTR8 : ATTR8;
varying out float4 o_TEX7 : TEX7;

void main()
{

    // DP4 o[HPOS].x, v[0], c[0];
    o_HPOS.x = 0;
    o_HPOS.x = (dot( i_ATTR0, u_const_0 ).xxxx).x;

    // DP4 o[HPOS].y, v[0], c[1];
    o_HPOS.y = 0;
    o_HPOS.y = (dot( i_ATTR0, u_const_1 ).xxxx).y;

    // DP4 o[HPOS].z, v[0], c[2];
    o_HPOS.z = 0;
    o_HPOS.z = (dot( i_ATTR0, u_const_2 ).xxxx).z;

    // DP4 o[HPOS].w, v[0], c[3];
    o_HPOS.w = 0;
    o_HPOS.w = (dot( i_ATTR0, u_const_3 ).xxxx).w;

    // MOV o[TEX0], v[1];
    o_TEX0 = i_ATTR1;

    // MOV o[TEX1], v[2];
    o_TEX1 = i_ATTR2;

    // MOV o[TEX2], v[3];
    o_TEX2 = i_ATTR3;

    // MOV o[TEX3], v[4];
    o_TEX3 = i_ATTR4;

    // MOV o[TEX4], v[5];
    o_TEX4 = i_ATTR5;

    // MOV o[TEX5], v[6];
    o_TEX5 = i_ATTR6;

    // MOV o[TEX6], v[7];
    o_TEX6 = i_ATTR7;

    // MOV o[TEX7], v[8];
    o_TEX7 = i_ATTR8;
}
// TLOG_T(+3): Command Line: -profile vpf -nofastmath -po cimm,hexfp,ubank=14 -po sm40 -po hint=2