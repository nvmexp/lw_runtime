.version 3.1
.target sm_20

.func (.param .align 8 .b8 out[4]) myadd8 (.param .b8 a[48], .reg .u32 c,
                                           .param .align 8 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a+8];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    add.u32       r, r, c;
    st.param.u32  [out], r;
    ret;
}

.func (.param .align 16 .b8 out[4]) myadd16 (.param .b8 a[48], .reg .u32 c,
                                             .param .align 16 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a+8];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    add.u32       r, r, c;
    st.param.u32  [out], r;
    ret;
}

.func (.param .align 32 .b8 out[4]) myadd32 (.param .b8 a[48], .reg .u32 c,
                                             .param .align 32 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a+8];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    add.u32       r, r, c;
    st.param.u32  [out], r;
    ret;
}

.func (.param .align 64 .b8 out[4]) myadd64 (.param .b8 a[48], .reg .u32 c,
                                             .param .align 64 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a+8];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    add.u32       r, r, c;
    st.param.u32  [out], r;
    ret;
}

.func (.param .align 128 .b8 out[4]) myadd128 (.param .b8 a[48], .reg .u32 c,
                                               .param .align 128 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a+8];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    add.u32       r, r, c;
    st.param.u32  [out], r;
    ret;
}

.entry main(.param .u32 output8, .param .u32 output16, .param .u32 output32,
            .param .u32 output64, .param .u32 output128)
{
    .reg .u32 o, t;
    .param .align 8 .b8 out8[4];
    .param .align 8 .b8 in8[4];
    .param .align 16 .b8 out16[4];
    .param .align 16 .b8 in16[4];
    .param .align 32 .b8 out32[4];
    .param .align 32 .b8 in32[4];
    .param .align 64 .b8 out64[4];
    .param .align 64 .b8 in64[4];
    .param .align 128 .b8 out128[4];
    .param .align 128 .b8 in128[4];
    .param .b8 a[48];

    st.param.u32  [in8], 6;
    st.param.u32  [a+8], 4;
    call (out8), myadd8, (a, 5, in8);
    ld.param.u32  t, [out8];
    ld.param.u32  o, [output8];
    st.b32        [o], t;

    st.param.u32  [in16], 16;
    st.param.u32  [a+8], 14;
    call (out16), myadd16, (a, 15, in16);
    ld.param.u32  t, [out16];
    ld.param.u32  o, [output16];
    st.b32        [o], t;

    st.param.u32  [in32], 26;
    st.param.u32  [a+8], 24;
    call (out32), myadd32, (a, 25, in32);
    ld.param.u32  t, [out32];
    ld.param.u32  o, [output32];
    st.b32        [o], t;

    st.param.u32  [in64], 36;
    st.param.u32  [a+8], 34;
    call (out64), myadd64, (a, 35, in64);
    ld.param.u32  t, [out64];
    ld.param.u32  o, [output64];
    st.b32        [o], t;

    st.param.u32  [in128], 46;
    st.param.u32  [a+8], 44;
    call (out128), myadd128, (a, 45, in128);
    ld.param.u32  t, [out128];
    ld.param.u32  o, [output128];
    st.b32        [o], t;

    exit;
}
 
