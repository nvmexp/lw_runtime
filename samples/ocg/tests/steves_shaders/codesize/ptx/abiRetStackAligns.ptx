.version 3.1
.target sm_20

/*
 * Tests that the alignment in the caller is unaffected by an 8-byte-aligned return value
 * that needs to be passed on the stack.
 */

.func (.param .align 8 .b8 out[100]) myadd8 (.param .u32 a, .param .align 8 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    st.param.u32  [out], r;
    ret;
}

.func (.param .align 8 .b8 out[4]) myDummy8 (.param .u32 a, .param .align 8 .b8 b[4])
{
    .param .u32 internalA;
    .param .align 8 .b8 internalB[4];
    .param .align 8 .b8 internalOut[100];
    .reg .u32 o, aa, bb;

    ld.param.u32  aa, [a];
    ld.param.u32  bb, [b];
    st.param.u32  [internalA], aa;
    st.param.u32  [internalB], bb;
    call (internalOut), myadd8, (internalA, internalB);
    ld.param.u32  o, [internalOut];
    st.param.u32  [out], o;
}

/*
 * Tests that the alignment in the caller is set to 16 bytes by a 16-byte-aligned return value
 * that needs to be passed on the stack.
 */

.func (.param .align 16 .b8 out[100]) myadd16 (.param .u32 a, .param .align 16 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    st.param.u32  [out], r;
    ret;
}

.func (.param .align 16 .b8 out[4]) myDummy16 (.param .u32 a, .param .align 16 .b8 b[4])
{
    .param .u32 internalA;
    .param .align 16 .b8 internalB[4];
    .param .align 16 .b8 internalOut[100];
    .reg .u32 o, aa, bb;

    ld.param.u32  aa, [a];
    ld.param.u32  bb, [b];
    st.param.u32  [internalA], aa;
    st.param.u32  [internalB], bb;
    call (internalOut), myadd16, (internalA, internalB);
    ld.param.u32  o, [internalOut];
    st.param.u32  [out], o;
}

/*
 * Tests that the alignment in the caller is set to 32 bytes by a 32-byte-aligned return value
 * that needs to be passed on the stack.
 */

.func (.param .align 32 .b8 out[100]) myadd32 (.param .u32 a, .param .align 32 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    st.param.u32  [out], r;
    ret;
}

.func (.param .align 32 .b8 out[4]) myDummy32 (.param .u32 a, .param .align 32 .b8 b[4])
{
    .param .u32 internalA;
    .param .align 32 .b8 internalB[4];
    .param .align 32 .b8 internalOut[100];
    .reg .u32 o, aa, bb;

    ld.param.u32  aa, [a];
    ld.param.u32  bb, [b];
    st.param.u32  [internalA], aa;
    st.param.u32  [internalB], bb;
    call (internalOut), myadd32, (internalA, internalB);
    ld.param.u32  o, [internalOut];
    st.param.u32  [out], o;
}

/*
 * Tests that the alignment in the caller is set to 64 bytes by a 64-byte-aligned return value
 * that needs to be passed on the stack.
 */

.func (.param .align 64 .b8 out[100]) myadd64 (.param .u32 a, .param .align 64 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    st.param.u32  [out], r;
    ret;
}

.func (.param .align 64 .b8 out[4]) myDummy64 (.param .u32 a, .param .align 64 .b8 b[4])
{
    .param .u32 internalA;
    .param .align 64 .b8 internalB[4];
    .param .align 64 .b8 internalOut[100];
    .reg .u32 o, aa, bb;

    ld.param.u32  aa, [a];
    ld.param.u32  bb, [b];
    st.param.u32  [internalA], aa;
    st.param.u32  [internalB], bb;
    call (internalOut), myadd64, (internalA, internalB);
    ld.param.u32  o, [internalOut];
    st.param.u32  [out], o;
}

/*
 * Tests that the alignment in the caller is set to 128 bytes by a 128-byte-aligned return
 * value that needs to be passed on the stack.
 */

.func (.param .align 128 .b8 out[100]) myadd128 (.param .u32 a, .param .align 128 .b8 b[4])
{
    .reg .u32 a1, b1, r;

    ld.param.u32  a1, [a];
    ld.param.u32  b1, [b];
    add.u32       r, a1, b1;
    st.param.u32  [out], r;
    ret;
}

.func (.param .align 128 .b8 out[4]) myDummy128 (.param .u32 a, .param .align 128 .b8 b[4])
{
    .param .u32 internalA;
    .param .align 128 .b8 internalB[4];
    .param .align 128 .b8 internalOut[100];
    .reg .u32 o, aa, bb;

    ld.param.u32  aa, [a];
    ld.param.u32  bb, [b];
    st.param.u32  [internalA], aa;
    st.param.u32  [internalB], bb;
    call (internalOut), myadd128, (internalA, internalB);
    ld.param.u32  o, [internalOut];
    st.param.u32  [out], o;
}

.entry main(.param .u32 output8, .param .u32 output16, .param .u32 output32,
            .param .u32 output64, .param .u32 output128)
{
    .reg .u32 o, t;
    .param .align 8 .b8 out8[4];
    .param .align 8 .b8 in8[4];
    .param .align 16 .b8 out16[4];
    .param .align 16 .b8 in16[4];
    .param .align 32 .b8 out32[4];
    .param .align 32 .b8 in32[4];
    .param .align 64 .b8 out64[4];
    .param .align 64 .b8 in64[4];
    .param .align 128 .b8 out128[4];
    .param .align 128 .b8 in128[4];

    st.param.u32  [in8], 6;
    call (out8), myDummy8, (4, in8);
    ld.param.u32  t, [out8];
    ld.param.u32  o, [output8];
    st.b32        [o], t;

    st.param.u32  [in16], 16;
    call (out16), myDummy16, (14, in16);
    ld.param.u32  t, [out16];
    ld.param.u32  o, [output16];
    st.b32        [o], t;

    st.param.u32  [in32], 26;
    call (out32), myDummy32, (24, in32);
    ld.param.u32  t, [out32];
    ld.param.u32  o, [output32];
    st.b32        [o], t;

    st.param.u32  [in64], 36;
    call (out64), myDummy64, (34, in64);
    ld.param.u32  t, [out64];
    ld.param.u32  o, [output64];
    st.b32        [o], t;

    st.param.u32  [in128], 46;
    call (out128), myDummy128, (44, in128);
    ld.param.u32  t, [out128];
    ld.param.u32  o, [output128];
    st.b32        [o], t;

    exit;
}
 
