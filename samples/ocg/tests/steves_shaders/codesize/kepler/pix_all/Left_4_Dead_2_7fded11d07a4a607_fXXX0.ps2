// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x7fded11d07a4a607
//         UCODE_HASH: 0x88fd103ba5a82267
//         POOL: APP
//         VERSION: 20
//         # USES: 105
//         // Time: 51.570ms [8.254 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 12
//         USED_TEXTURE_BITS: 0xc7
//         TEXTURE_SLOTS: 8
//         SAMPLER_SLOTS: 8
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x0000000a
//         0x00000000      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_0
        def c0, 1.00000000, 0.00000000, 0.96875000, 0.01562500 ; 0x3f800000 0x000000 0x3f780000 0x3c800000
        def c1, 0.29899999, 0.58700001, 0.11400000, 0.00000000 ; 0x3e991687 0x3f1645a2 0x3de978d5 0x000000
        def c11, 2.00000000, -1.00000000, -2.00000000, 3.00000000 ; 0x40000000 0xbf800000 0xc0000000 0x40400000
        def c12, 0.55000001, 0.46000001, 10.00000000, 20.00000000 ; 0x3f0ccccd 0x3eeb851f 0x41200000 0x41a00000
        def c14, 0.21250001, 0.71539998, 0.07210000, 12.00000000 ; 0x3e59999a 0x3f372474 0x3d93a92a 0x41400000
        def c17, 0.80000001, 0.20000000, 0.30000001, -0.15000001 ; 0x3f4ccccd 0x3e4ccccd 0x3e99999a 0xbe19999a
        dcl t0.rg
        dcl_2d s0
        dcl_2d s1
        dcl_volume s2
        dcl_2d s6
        dcl_2d s7
        mad r0.x, c13.x, t0.x, c13.z
        mad r0.y, c13.y, t0.y, c13.w
        mad r0.xy, c11.x, r0, c11.y
        dp2add r0.w, r0, r0, c1.w
        rsq r0.w, r0.w
        rcp r0.w, r0.w
        add r0.w, r0.w, -c9.x
        add r1.w, -c9.x, c9.y
        rcp r1.w, r1.w
        mul_sat r1.w, r0.w, r1.w
        mad r0.w, r1.w, c11.z, c11.w
        mul r1.w, r1.w, r1.w
        mul r0.w, r0.w, r1.w
        mov r0.y, c9.z
        add r1.w, r0.y, -c8.x
        mad r5.w, r0.w, r1.w, c8.x
        mad r2.xy, t0, c2.wzyx, c2
        cmp r1.w, r5.w, c0.x, c0.y
        mov r0.w, c7.x
        mad r1.xy, t0, c12.z, r0.w
        add r4.w, r1.w, c11.y
        mad r0.x, t0.y, c12.w, -r0.w
        mad r0.y, t0.x, c12.w, -r0.w
        texld r3, r2, s1
        texld r2, t0, s0
        texld r1, r1, s6
        texld r0, r0, s6
        dp3 r0.x, r3, c1
        add r0.w, -r2.w, r0.x
        mul r1.w, r5.w, r0.w
        max r0.w, r1.w, r4.w
        add r3.xyz, r3, r0.w
        mad r4.xyz, c5.x, r2, r3
        mad r2.xyz, c15, r4, -c15
        mov r0.z, c16.y
        mad r2.xyz, r0.z, r2, c15
        lrp r3.xyz, c15.w, r2, r4
        mad r2.xyz, r3, c0.z, c0.w
        mad r4.xy, t0, c0.z, c0.w
        mov r0.x, r1.y
        texld r1, r2, s2
        texld r2, r4, s7
        texld r0, r0, s6
        mad_sat r0.w, r2.x, c12.x, c12.y
        mul r1.xyz, r1, c4.x
        add r0.w, r0.w, c11.y
        mad r1.xyz, r3, c3.x, r1
        mov r1.w, c0.x
        mad r0.w, c10.y, r0.w, r1.w
        mul r1.xyz, r1, r0.w
        dp3_sat r0.x, r1, c14
        add r1.w, -r0.x, c0.x
        pow_sat r0.w, r1.w, c14.w
        mad r1.w, r0.w, c17.x, c17.y
        mad r0.w, r0.y, c17.z, c17.w
        mul r0.w, r0.w, c6.x
        mad r0.xyz, r0.w, r1.w, r1
        mad r0.xyz, c10.x, -r0, r0
        mov r0.w, c0.x
        mov oC0, r0
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0x3f800000 0x00000000
//         0x3f780000 0x3c800000 0x05000051 0xa00f0001
//         0x3e991687 0x3f1645a2 0x3de978d5 0x00000000
//         0x05000051 0xa00f000b 0x40000000 0xbf800000
//         0xc0000000 0x40400000 0x05000051 0xa00f000c
//         0x3f0ccccd 0x3eeb851f 0x41200000 0x41a00000
//         0x05000051 0xa00f000e 0x3e59999a 0x3f372474
//         0x3d93a92a 0x41400000 0x05000051 0xa00f0011
//         0x3f4ccccd 0x3e4ccccd 0x3e99999a 0xbe19999a
//         0x0200001f 0x80000000 0xb0030000 0x0200001f
//         0x90000000 0xa00f0800 0x0200001f 0x90000000
//         0xa00f0801 0x0200001f 0xa0000000 0xa00f0802
//         0x0200001f 0x90000000 0xa00f0806 0x0200001f
//         0x90000000 0xa00f0807 0x04000004 0x80010000
//         0xa000000d 0xb0000000 0xa0aa000d 0x04000004
//         0x80020000 0xa055000d 0xb0550000 0xa0ff000d
//         0x04000004 0x80030000 0xa000000b 0x80e40000
//         0xa055000b 0x0400005a 0x80080000 0x80e40000
//         0x80e40000 0xa0ff0001 0x02000007 0x80080000
//         0x80ff0000 0x02000006 0x80080000 0x80ff0000
//         0x03000002 0x80080000 0x80ff0000 0xa1000009
//         0x03000002 0x80080001 0xa1000009 0xa0550009
//         0x02000006 0x80080001 0x80ff0001 0x03000005
//         0x80180001 0x80ff0000 0x80ff0001 0x04000004
//         0x80080000 0x80ff0001 0xa0aa000b 0xa0ff000b
//         0x03000005 0x80080001 0x80ff0001 0x80ff0001
//         0x03000005 0x80080000 0x80ff0000 0x80ff0001
//         0x02000001 0x80020000 0xa0aa0009 0x03000002
//         0x80080001 0x80550000 0xa1000008 0x04000004
//         0x80080005 0x80ff0000 0x80ff0001 0xa0000008
//         0x04000004 0x80030002 0xb0e40000 0xa01b0002
//         0xa0e40002 0x04000058 0x80080001 0x80ff0005
//         0xa0000000 0xa0550000 0x02000001 0x80080000
//         0xa0000007 0x04000004 0x80030001 0xb0e40000
//         0xa0aa000c 0x80ff0000 0x03000002 0x80080004
//         0x80ff0001 0xa055000b 0x04000004 0x80010000
//         0xb0550000 0xa0ff000c 0x81ff0000 0x04000004
//         0x80020000 0xb0000000 0xa0ff000c 0x81ff0000
//         0x03000042 0x800f0003 0x80e40002 0xa0e40801
//         0x03000042 0x800f0002 0xb0e40000 0xa0e40800
//         0x03000042 0x800f0001 0x80e40001 0xa0e40806
//         0x03000042 0x800f0000 0x80e40000 0xa0e40806
//         0x03000008 0x80010000 0x80e40003 0xa0e40001
//         0x03000002 0x80080000 0x81ff0002 0x80000000
//         0x03000005 0x80080001 0x80ff0005 0x80ff0000
//         0x0300000b 0x80080000 0x80ff0001 0x80ff0004
//         0x03000002 0x80070003 0x80e40003 0x80ff0000
//         0x04000004 0x80070004 0xa0000005 0x80e40002
//         0x80e40003 0x04000004 0x80070002 0xa0e4000f
//         0x80e40004 0xa1e4000f 0x02000001 0x80040000
//         0xa0550010 0x04000004 0x80070002 0x80aa0000
//         0x80e40002 0xa0e4000f 0x04000012 0x80070003
//         0xa0ff000f 0x80e40002 0x80e40004 0x04000004
//         0x80070002 0x80e40003 0xa0aa0000 0xa0ff0000
//         0x04000004 0x80030004 0xb0e40000 0xa0aa0000
//         0xa0ff0000 0x02000001 0x80010000 0x80550001
//         0x03000042 0x800f0001 0x80e40002 0xa0e40802
//         0x03000042 0x800f0002 0x80e40004 0xa0e40807
//         0x03000042 0x800f0000 0x80e40000 0xa0e40806
//         0x04000004 0x80180000 0x80000002 0xa000000c
//         0xa055000c 0x03000005 0x80070001 0x80e40001
//         0xa0000004 0x03000002 0x80080000 0x80ff0000
//         0xa055000b 0x04000004 0x80070001 0x80e40003
//         0xa0000003 0x80e40001 0x02000001 0x80080001
//         0xa0000000 0x04000004 0x80080000 0xa055000a
//         0x80ff0000 0x80ff0001 0x03000005 0x80070001
//         0x80e40001 0x80ff0000 0x03000008 0x80110000
//         0x80e40001 0xa0e4000e 0x03000002 0x80080001
//         0x81000000 0xa0000000 0x03000020 0x80180000
//         0x80ff0001 0xa0ff000e 0x04000004 0x80080001
//         0x80ff0000 0xa0000011 0xa0550011 0x04000004
//         0x80080000 0x80550000 0xa0aa0011 0xa0ff0011
//         0x03000005 0x80080000 0x80ff0000 0xa0000006
//         0x04000004 0x80070000 0x80ff0000 0x80ff0001
//         0x80e40001 0x04000004 0x80070000 0xa000000a
//         0x81e40000 0x80e40000 0x02000001 0x80080000
//         0xa0000000 0x02000001 0x800f0800 0x80e40000
//         0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0xbf800000 // -1.00000000
//         COP_CONST[1]: 0x40400000 // 3.00000000
//         COP_CONST[2]: 0xbf4ccccd // -0.80000001
//         COP_CONST[3]: 0x3f801b5a // 1.00083470
//         COP_CONST[4]: 0x3f80334f // 1.00156581
//         COP_CONST[5]: 0x3f1645a2 // 0.58700001
//         COP_CONST[6]: 0x3de978d5 // 0.11400000
//         COP_CONST[7]: 0x3f0ccccd // 0.55000001
//         COP_CONST[8]: 0x3f372474 // 0.71539998
//         COP_CONST[9]: 0x3d93a92a // 0.07210000
//         COP_CONST[10]: 0x3e99999a // 0.30000001
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][258] = 0xba4d3a42 // -0.00078288
//         # USER FLOAT CONST: c[6][259] = 0x39da740e // 0.00041667
//         # USER FLOAT CONST: c[6][260] = 0x3f801b5a // 1.00083470
//         # USER FLOAT CONST: c[6][261] = 0x3f80334f // 1.00156581
//         # USER FLOAT CONST: c[6][262] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][266] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][270] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][274] = 0x3f841893 // 1.03199995
//         # USER FLOAT CONST: c[6][278] = 0x4123e46e // 10.24326897
//         # USER FLOAT CONST: c[6][282] = 0xbe4ccccd // -0.20000000
//         # USER FLOAT CONST: c[6][286] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][287] = 0x40000000 // 2.00000000
//         # USER FLOAT CONST: c[6][288] = 0xbf800000 // -1.00000000
//         # USER FLOAT CONST: c[6][290] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][291] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][302] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][303] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][304] = 0x80000000 // 0.00000000
//         # USER FLOAT CONST: c[6][305] = 0x80000000 // 0.00000000
//         # USER FLOAT CONST: c[6][310] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][311] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][312] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][313] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][315] = 0x00000000 // 0.00000000
//         ## USER CONST histogram
//         ##    ~c2.x -> c[6][258] = 100.00%@-0.00078288
//         ##    ~c2.y -> c[6][259] = 100.00%@0.00041667
//         ##    ~c2.z -> c[6][260] = 100.00%@1.00083470
//         ##    ~c2.w -> c[6][261] = 100.00%@1.00156581
//         ##    ~c3.x -> c[6][262] = 100.00%@0.00000000
//         ##    ~c4.x -> c[6][266] = 100.00%@1.00000000
//         ##    ~c5.x -> c[6][270] = 100.00%@0.00000000
//         ##    ~c6.x -> c[6][274] = 100.00%@1.03199995
//         ##    ~c7.x -> c[6][278] = 100.00%@10.24326897
//         ##    ~c8.x -> c[6][282] = 100.00%@-0.20000000
//         ##    ~c9.x -> c[6][286] = 100.00%@0.00000000
//         ##    ~c9.y -> c[6][287] = 100.00%@2.00000000
//         ##    ~c9.z -> c[6][288] = 100.00%@-1.00000000
//         ##    ~c10.x -> c[6][290] = 100.00%@0.00000000
//         ##    ~c10.y -> c[6][291] = 100.00%@1.00000000
//         ##    ~c13.x -> c[6][302] = 100.00%@1.00000000
//         ##    ~c13.y -> c[6][303] = 100.00%@1.00000000
//         ##    ~c13.z -> c[6][304] = 100.00%@0.00000000
//         ##    ~c13.w -> c[6][305] = 100.00%@0.00000000
//         ##    ~c15.x -> c[6][310] = 100.00%@0.00000000
//         ##    ~c15.y -> c[6][311] = 100.00%@0.00000000
//         ##    ~c15.z -> c[6][312] = 100.00%@0.00000000
//         ##    ~c15.w -> c[6][313] = 100.00%@0.00000000
//         ##    ~c16.y -> c[6][315] = 100.00%@0.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,3D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,480x300x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000069
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1920x1200x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000069
//         STAGEINFO:(0x2,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,32x32x32,1/0,X8R8G8B8,0,0,0), 0x00000000,0x00000069
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,64x64x0,1/0,X8R8G8B8,0,0,0), 0x543027f6,0x00000069
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,32x32x0,1/0,X8R8G8B8,0,0,0), 0x6c3ec200,0x00000069
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x10 0 4 "COL1")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r45, c[6][263].x
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43, c[6][263].z
//         movr r43.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r5.x, r45, v4.x, r43
//         movr r45, c[6][263].y
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43, c[6][263].w
//         movr r43.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r5.y, r45, v4.y, r43
//         madr r5.xy, constant(2.00000000, -1.00000000, -2.00000000, 3.00000000).x, r5, constant(2.00000000, -1.00000000, -2.00000000, 3.00000000).y
//         dp2ar r5.w, r5, r5, constant(0.29899999, 0.58700001, 0.11400000, 0.00000000).w
//         rsqr r5.w, |r5.w|
//         rcpr r5.w, r5.w
//         movr r44, -c[6][259].x
//         movr r44.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addr r5.w, r5.w, r44
//         movr r45, -c[6][259].x
//         movr r45.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44, c[6][259].y
//         movr r44.x, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.y, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.z, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.w, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         addr r6.w, r45, r44
//         rcpr r6.w, r6.w
//         mulr_sat r6.w, r5.w, r6.w
//         madr r5.w, r6.w, constant(2.00000000, -1.00000000, -2.00000000, 3.00000000).z, constant(2.00000000, -1.00000000, -2.00000000, 3.00000000).w
//         mulr r6.w, r6.w, r6.w
//         mulr r5.w, r5.w, r6.w
//         movr r45, c[6][259].z
//         movr r45.x, constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000).x
//         movr r45.y, constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000).x
//         movr r45.z, constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000).x
//         movr r45.w, constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000).x
//         movr r5.y, r45
//         movr r44, -c[6][258].x
//         movr r44.x, -constant(-0.20000000, -0.20000000, -0.20000000, -0.20000000).x
//         movr r44.y, -constant(-0.20000000, -0.20000000, -0.20000000, -0.20000000).x
//         movr r44.z, -constant(-0.20000000, -0.20000000, -0.20000000, -0.20000000).x
//         movr r44.w, -constant(-0.20000000, -0.20000000, -0.20000000, -0.20000000).x
//         addr r6.w, r5.y, r44
//         movr r43, c[6][258].x
//         movr r43.x, constant(-0.20000000, -0.20000000, -0.20000000, -0.20000000).x
//         movr r43.y, constant(-0.20000000, -0.20000000, -0.20000000, -0.20000000).x
//         movr r43.z, constant(-0.20000000, -0.20000000, -0.20000000, -0.20000000).x
//         movr r43.w, constant(-0.20000000, -0.20000000, -0.20000000, -0.20000000).x
//         madr r10.w, r5.w, r6.w, r43
//         movr r44, c[6][252].wzyx
//         movr r44.x, constant(1.00156581, 1.00156581, 1.00156581, 1.00156581).x
//         movr r44.y, constant(1.00083470, 1.00083470, 1.00083470, 1.00083470).x
//         movr r44.z, constant(0.00041667, 0.00041667, 0.00041667, 0.00041667).x
//         movr r44.w, constant(-0.00078288, -0.00078288, -0.00078288, -0.00078288).x
//         movr r43, c[6][252]
//         movr r43.x, constant(-0.00078288, -0.00078288, -0.00078288, -0.00078288).x
//         movr r43.y, constant(0.00041667, 0.00041667, 0.00041667, 0.00041667).x
//         movr r43.z, constant(1.00083470, 1.00083470, 1.00083470, 1.00083470).x
//         movr r43.w, constant(1.00156581, 1.00156581, 1.00156581, 1.00156581).x
//         madr r7.xy, v4, r44, r43
//         cmpr r6.w, r10.w, constant(1.00000000, 0.00000000, 0.96875000, 0.01562500).x, constant(1.00000000, 0.00000000, 0.96875000, 0.01562500).y
//         movr r45, c[6][257].x
//         movr r45.x, constant(10.24326897, 10.24326897, 10.24326897, 10.24326897).x
//         movr r45.y, constant(10.24326897, 10.24326897, 10.24326897, 10.24326897).x
//         movr r45.z, constant(10.24326897, 10.24326897, 10.24326897, 10.24326897).x
//         movr r45.w, constant(10.24326897, 10.24326897, 10.24326897, 10.24326897).x
//         movr r5.w, r45
//         madr r6.xy, v4, constant(0.55000001, 0.46000001, 10.00000000, 20.00000000).z, r5.w
//         addr r9.w, r6.w, constant(2.00000000, -1.00000000, -2.00000000, 3.00000000).y
//         madr r5.x, v4.y, constant(0.55000001, 0.46000001, 10.00000000, 20.00000000).w, -r5.w
//         madr r5.y, v4.x, constant(0.55000001, 0.46000001, 10.00000000, 20.00000000).w, -r5.w
//         texr r8, r7.xyyy, #1, #1, 2D
//         texr r7, v4.xyzz, #0, #0, 2D
//         texr r6, r6.xyyy, #6, #6, 2D
//         texr r5, r5.xyyy, #6, #6, 2D
//         dp3r r5.x, r8, constant(0.29899999, 0.58700001, 0.11400000, 0.00000000)
//         addr r5.w, -r7.w, r5.x
//         mulr r6.w, r10.w, r5.w
//         maxr r5.w, r6.w, r9.w
//         addr r8.xyz, r8, r5.w
//         movr r45, c[6][255].x
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r9.xyz, r45, r7, r8
//         movr r45, c[6][265]
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43, -c[6][265]
//         movr r43.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r7.xyz, r45, r9, r43
//         movr r45, c[6][266].y
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r5.z, r45
//         movr r43, c[6][265]
//         movr r43.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r7.xyz, r5.z, r7, r43
//         movr r45, c[6][265].w
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         lrpr r8.xyz, r45, r7, r9
//         madr r7.xyz, r8, constant(1.00000000, 0.00000000, 0.96875000, 0.01562500).z, constant(1.00000000, 0.00000000, 0.96875000, 0.01562500).w
//         madr r9.xy, v4, constant(1.00000000, 0.00000000, 0.96875000, 0.01562500).z, constant(1.00000000, 0.00000000, 0.96875000, 0.01562500).w
//         movr r5.x, r6.y
//         texr r6, r7.xyzz, #2, #2, 3D
//         texr r7, r9.xyzz, #7, #7, 2D
//         texr r5, r5.xyzz, #6, #6, 2D
//         madr_sat r5.w, r7.x, constant(0.55000001, 0.46000001, 10.00000000, 20.00000000).x, constant(0.55000001, 0.46000001, 10.00000000, 20.00000000).y
//         movr r44, c[6][254].x
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulr r6.xyz, r6, r44
//         addr r5.w, r5.w, constant(2.00000000, -1.00000000, -2.00000000, 3.00000000).y
//         movr r44, c[6][253].x
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r6.xyz, r8, r44, r6
//         movr r6.w, constant(1.00000000, 0.00000000, 0.96875000, 0.01562500).x
//         movr r45, c[6][260].y
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madr r5.w, r45, r5.w, r6.w
//         mulr r6.xyz, r6, r5.w
//         dp3r_sat r5.x, r6, constant(0.21250001, 0.71539998, 0.07210000, 12.00000000)
//         addr r6.w, -r5.x, constant(1.00000000, 0.00000000, 0.96875000, 0.01562500).x
//         lg2r r47, |r6.w|
//         mulr r47, r47, constant(0.21250001, 0.71539998, 0.07210000, 12.00000000).w
//         ex2r_sat r5.w, r47
//         madr r6.w, r5.w, constant(0.80000001, 0.20000000, 0.30000001, -0.15000001).x, constant(0.80000001, 0.20000000, 0.30000001, -0.15000001).y
//         madr r5.w, r5.y, constant(0.80000001, 0.20000000, 0.30000001, -0.15000001).z, constant(0.80000001, 0.20000000, 0.30000001, -0.15000001).w
//         movr r44, c[6][256].x
//         movr r44.x, constant(1.03199995, 1.03199995, 1.03199995, 1.03199995).x
//         movr r44.y, constant(1.03199995, 1.03199995, 1.03199995, 1.03199995).x
//         movr r44.z, constant(1.03199995, 1.03199995, 1.03199995, 1.03199995).x
//         movr r44.w, constant(1.03199995, 1.03199995, 1.03199995, 1.03199995).x
//         mulr r5.w, r5.w, r44
//         madr r5.xyz, r5.w, r6.w, r6
//         movr r45, c[6][260].x
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r5.xyz, r45, -r5, r5
//         movr r5.w, constant(1.00000000, 0.00000000, 0.96875000, 0.01562500).x
//         movr r0, r5
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R1, 0x39da740e;           # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R0, R0;                 # [  2][000010]
//     	MOV32I R3, 0x4123e46e;           # [  3][000018]
//     	IPA.SC R7, a[0x304], R0;         # [  4][000020] FIXED_FNC_TEXTURE_0_T
//     	FFMA.FMZ R1, R7, c[0x9][0xc], R1; # [  5][000028]
//     	IPA.SC R6, a[0x300], R0;         # [  6][000030] TEX0
//     	MOV32I R0, -0x45b2c5be;          # [  7][000038]
//     	FFMA.FMZ R0, R6, c[0x9][0x10], R0; # [  8][000040]
//     	FFMA.FMZ R5, R7, 10, R3;         # [  9][000048]
//     	FFMA.FMZ R4, R6, 10, R3;         # [ 10][000050]
//     	TEX.T R0, R0, 0x1, 0x1, 2D, 0x7; # [ 11][000058]
//     	FFMA.FMZ R10, R7, 20, -R3;       # [ 12][000060]
//     	TEX.T R8, R6, 0x0, 0x0, 2D, 0x8; # [ 13][000068]
//     	FFMA.FMZ R11, R6, 20, -R3;       # [ 14][000070]
//     	TEX.T R4, R4, 0x6, 0x6, 2D, 0x2; # [ 15][000078]
//     	TEX.P R5, R10, 0x6, 0x6, 2D, 0x2; # [ 16][000080]
//     	MOV32I R10, 0x40000000;          # [ 17][000088]
//     	FFMA.FMZ R3, R10, R6, c[0x9][0x0]; # [ 18][000090]
//     	FFMA.FMZ R9, R10, R7, c[0x9][0x0]; # [ 19][000098]
//     	FMUL.FTZ R3, R3, R3;             # [ 20][0000a0]
//     	FFMA.FTZ R3, R9, R9, R3;         # [ 21][0000a8]
//     	MUFU.RSQ R3, |R3|;               # [ 22][0000b0]
//     	MUFU.RCP R3, R3;                 # [ 23][0000b8]
//     	FMUL.FMZ.SAT R3, R3, 0.5;        # [ 24][0000c0]
//     	FFMA.FMZ R9, R3, -R10, c[0x9][0x4]; # [ 25][0000c8]
//     	FMUL.FMZ R10, R3, R3;            # [ 26][0000d0]
//     	MOV32I R3, -0x41b33333;          # [ 27][0000d8]
//     	FMUL.FMZ R9, R9, R10;            # [ 28][0000e0]
//     	FFMA.FMZ R9, R9, c[0x9][0x8], R3; # [ 29][0000e8]
//     	FMUL32I.FTZ R11, R0, 0.299;      # [ 30][0000f0]
//     	FFMA.FTZ R10, R1, c[0x9][0x14], R11; # [ 31][0000f8]
//     	FFMA.FTZ R10, R2, c[0x9][0x18], R10; # [ 32][000100]
//     	FCMP.LTU R11, RZ, 0x3f800, R9;   # [ 33][000108]
//     	FADD.FTZ R8, -R8, R10;           # [ 34][000110]
//     	FADD.FTZ R10, R11, -1;           # [ 35][000118]
//     	FMUL.FMZ R8, R9, R8;             # [ 36][000120]
//     	MOV32I R9, 0x3c800000;           # [ 37][000128]
//     	FMNMX.FTZ R8, R8, R10, !PT;      # [ 38][000130]
//     	FFMA.FMZ R7, R7, 0.96875, R9;    # [ 39][000138]
//     	FFMA.FMZ R6, R6, 0.96875, R9;    # [ 40][000140]
//     	FADD.FTZ R0, R0, R8;             # [ 41][000148]
//     	FADD.FTZ R2, R2, R8;             # [ 42][000150]
//     	FADD.FTZ R1, R1, R8;             # [ 43][000158]
//     	FFMA.FMZ R0, R0, 0.96875, R9;    # [ 44][000160]
//     	TEX.NODEP.T R6, R6, 0x7, 0x7, 2D, 0x1; # [ 45][000168]
//     	FFMA.FMZ R2, R2, 0.96875, R9;    # [ 46][000170]
//     	FFMA.FMZ R1, R1, 0.96875, R9;    # [ 47][000178]
//     	MOV32I R7, -0x41e66666;          # [ 48][000180]
//     	TEX.NODEP.P R0, R0, 0x2, 0x2, 3D, 0x7; # [ 49][000188]
//     	TEX.NODEP.P R4, R4, 0x6, 0x6, 2D, 0x2; # [ 50][000190]
//     	MOV32I R5, 0x3eeb851f;           # [ 51][000198]
//     	FFMA.FMZ.SAT R5, R6, c[0x9][0x1c], R5; # [ 52][0001a0]
//     	FMUL.FMZ R0, R0, R5;             # [ 53][0001a8]
//     	FMUL.FMZ R1, R1, R5;             # [ 54][0001b0]
//     	FMUL.FMZ R5, R2, R5;             # [ 55][0001b8]
//     	FMUL32I.FTZ R6, R0, 0.2125;      # [ 56][0001c0]
//     	FFMA.FTZ R2, R1, c[0x9][0x20], R6; # [ 57][0001c8]
//     	FFMA.FTZ.SAT R2, R5, c[0x9][0x24], R2; # [ 58][0001d0]
//     	FADD.FTZ R2, -R2, 1;             # [ 59][0001d8]
//     	MUFU.LG2 R2, |R2|;               # [ 60][0001e0]
//     	FMUL.FMZ R2, R2, 12;             # [ 61][0001e8]
//     	RRO.EX2 R2, R2;                  # [ 62][0001f0]
//     	MUFU.EX2.SAT R6, R2;             # [ 63][0001f8]
//     	FFMA.FMZ R2, R4, c[0x9][0x28], R7; # [ 64][000200]
//     	FFMA.FMZ R6, R6, -c[0x9][0x8], -R3; # [ 65][000208]
//     	FMUL32I.FMZ R4, R2, 1.032;       # [ 66][000210]
//     	MOV32I R3, 0x3f800000;           # [ 67][000218]
//     	FFMA.FMZ R2, R4, R6, R5;         # [ 68][000220]
//     	FFMA.FMZ R1, R4, R6, R1;         # [ 69][000228]
//     	FFMA.FMZ R0, R4, R6, R0;         # [ 70][000230]
//     	EXIT;                            # [ 71][000238]
//     	END
//     END_SECTION
// END_SHADER
// 
