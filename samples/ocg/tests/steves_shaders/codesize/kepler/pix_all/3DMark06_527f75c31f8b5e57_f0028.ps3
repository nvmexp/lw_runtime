// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x527f75c31f8b5e57
//         UCODE_HASH: 0xbedc68e28c21662e
//         POOL: APP
//         VERSION: 20
//         # USES: 7385
//         // Time: 667.687ms [41.006 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 31
//         USED_TEXTURE_BITS: 0xfff
//         TEXTURE_SLOTS: 12
//         SAMPLER_SLOTS: 12
//         THREAD_STACK_SIZE: 0xc
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//             COLOR_DIFFUSE_RED    PERSPECTIVE
//             COLOR_DIFFUSE_GREEN  PERSPECTIVE
//             COLOR_DIFFUSE_BLUE   PERSPECTIVE
//             COLOR_DIFFUSE_ALPHA  PERSPECTIVE
//             COLOR_SPELWLAR_RED   PERSPECTIVE
//             COLOR_SPELWLAR_GREEN PERSPECTIVE
//             COLOR_SPELWLAR_BLUE  PERSPECTIVE
//             COLOR_SPELWLAR_ALPHA PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX00_R              PERSPECTIVE
//             TEX00_Q              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0xb0000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x0000aaaa      0x2a2a0aaa
//         0x002a2a2a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c4, 0.66666669, -1.00000000, 2.00000000, 0.33333334 ; 0x3f2aaaab 0xbf800000 0x40000000 0x3eaaaaab
        def c5, 0.20000000, 0.00000000, 1.00000000, 0.03125000 ; 0x3e4ccccd 0x80000000 0x3f800000 0x3d000000
        def c6, 0.41608700, -0.30338100, 0.13519500, 0.22041900 ; 0x3ed5095b 0xbe9b54c1 0x3e0a708f 0x3e61b585
        def c7, -0.18368299, 0.07725400, -0.25281799, -0.23776400 ; 0xbe3c1765 0x3d9e3758 0xbe81715c 0xbe737868
        def c8, 0.06250000, -0.05412700, 0.66291302, -0.03125000 ; 0x3d800000 0xbd5db446 0x3f29b4ab 0xbd000000
        def c9, -0.48613599, 0.39774799, -0.39774799, 16.00000000 ; 0xbef8e6d1 0x3ecba5a0 0xbecba5a0 0x41800000
        def c10, 0.57452399, -0.06250000, -0.57452399, 0.10825300 ; 0x3f131401 0xbd800000 0xbf131401 0x3dddb3c0
        def c11, -0.62500000, -0.75000000, 0.87500000, 0.18750000 ; 0xbf200000 0xbf400000 0x3f600000 0x3e400000
        def c12, 0.50000000, 1.00000000, 0.31830987, 0.00000000 ; 0x3f000000 0x3f800000 0x3ea2f983 0x000000
        dcl_texcoord0 v0
        dcl_color0 v1
        dcl_color1 v2
        dcl_texcoord4 v3.rg
        dcl_texcoord1 v4.rgb
        dcl_texcoord2 v5.rgb
        dcl_texcoord3 v6.rgb
        dcl_texcoord6 v7.rgb
        dcl_texcoord7 v8.rgb
        dcl vPos.rg
        dcl_2d s0
        dcl_2d s1
        dcl_2d s2
        dcl_2d s3
        dcl_2d s4
        dcl_2d s5
        dcl_2d s6
        dcl_2d s7
        dcl_2d s8
        dcl_2d s9
        dcl_2d s10
        dcl_lwbe s11
        texld r0, v1.zwz, s5
        texld r1, v2.xyx, s6
        add r1.xyz, r0.wyzw, r1.wyzw
        texld r0, v2.zwz, s7
        add r0.xyz, r1, r0.wyzw
        mad_pp r4.xyz, r0, c4.x, c4.y
        texld r0, v2.zwz, s9
        texld r2, v3.xyx, s10
        texld r3, v1.xyx, s8
        add_pp r0.x, r2.w, r3.w
        add_pp r1.w, r0.x, c4.y
        mad_pp r0.xyz, c4.z, r0.wyzw, c4.y
        mul_sat_pp r2.w, r1.w, c3.x
        lrp_pp r1.xyz, r2.w, r0, r4
        dp3_pp r0.z, r1, v6
        dp3_pp r0.x, r1, v4
        dp3_pp r0.y, r1, v5
        texld_pp r0, r0, s11
        texld r1, v0.xyx, s2
        texld r4, v0.zwz, s3
        add r1, r1.xyz, r4.xyz
        texld r4, v1.xyx, s4
        add r1, r1, r4.xyz
        mul_pp r4, r1, c4.w
        lrp_pp r1, r2.w, r3.xyz, r4
        mul_pp r1, r1, c5.x
        mul_pp r0, r2.x, r0.xyz
        mul_pp r0, r1, r0
        cmp r2.w, -v7.z, c5.y, c5.z
        mul r1.xy, vPos, c5.w
        texld_pp r1, r1, s1
        if_ne r2.w, -r2.w
        dsx r2, v8.xyxy
        dsy r3, v8.xyxy
        add r2, r2_abs, r3_abs
        mov r3.w, c2.x
        mad_pp r2, r2, r3.w, c1.xyxy
        mul_pp r4, r1.zwxy, r2
        mad r2, r4, c11.zzw, v8.xyxy
        texldl r1, r2.xyxy, s0
        texldl r5, r2.zwzw, s0
        mad r2, r4.zwzw, c12.xxy, v8.xyxy
        texldl r3, r2.xyxy, s0
        texldl r2, r2.zwzw, s0
        mov r1.y, r5.x
        mov r1.z, r3.x
        mov r1.w, r2.x
        mul_pp r2, r4, c6.xxy
        add r1, r1, -v8.z
        mad_pp r2, r4.zwxy, c6.zzw, r2
        cmp_pp r1, r1, c5.z, c5.y
        add r3, r2, v8.xyxy
        texldl r2, r3.xyxy, s0
        texldl r5, r3.zwzw, s0
        mul_pp r3, r4, c7.xxy
        mad_pp r3, r4.zwxy, c7.zzw, r3
        mov r2.y, r5.x
        add r3, r3, v8.xyxy
        texldl r5, r3.xyxy, s0
        texldl r3, r3.zwzw, s0
        mov r2.z, r5.x
        mov r2.w, r3.x
        add r3, r2, -v8.z
        mul_pp r2, r4, c8.yyz
        cmp_pp r3, r3, c5.z, c5.y
        mad_pp r2, r4.zwxy, c8.wwz, r2
        dp4_pp r6.w, r3, c8.x
        add r2, r2, v8.xyxy
        texldl r3, r2.xyxy, s0
        texldl r5, r2.zwzw, s0
        mul_pp r2, r4, c9.xxy
        mad_pp r2, r4.zwxy, c9.xxz, r2
        mov r3.y, r5.x
        add r5, r2, v8.xyxy
        texldl r2, r5.xyxy, s0
        texldl r5, r5.zwzw, s0
        mov r3.z, r2.x
        mul_pp r2, r4, c10.xxy
        mov r3.w, r5.x
        mad_pp r2, r4.zwxy, c10.zzw, r2
        add r3, r3, -v8.z
        add r5, r2, v8.xyxy
        texldl r2, r5.xyxy, s0
        texldl r5, r5.zwzw, s0
        mov r2.y, r5.x
        mad r4, r4, c11.xxy, v8.xyxy
        texldl r5, r4.xyxy, s0
        texldl r4, r4.zwzw, s0
        mov r2.z, r5.x
        mov r2.w, r4.x
        cmp_pp r3, r3, c5.z, c5.y
        add r2, r2, -v8.z
        dp4 r3.w, r3, c8.x
        cmp_pp r2, r2, c5.z, c5.y
        add_pp r3.w, r6.w, r3.w
        dp4 r2.w, r2, c8.x
        dp4 r1.z, r1, c8.x
        add_pp r1.w, r3.w, r2.w
        add_pp r5.w, r1.z, r1.w
        texld r1, v1.zwz, s5
        texld r2, v2.xyx, s6
        add r2.xyz, r1.wyzw, r2.wyzw
        texld r1, v2.zwz, s7
        add r3.xyz, r2, r1.wyzw
        texld r1, v0.xyx, s2
        texld r2, v0.zwz, s3
        add r1, r1.xyz, r2.xyz
        texld r2, v1.xyx, s4
        add r1, r1, r2.xyz
        mad_pp r6.xyz, r3, c4.x, c4.y
        mul_pp r4, r1, c4.w
        texld r3, v2.zwz, s9
        texld r2, v3.xyx, s10
        texld r1, v1.xyx, s8
        add_pp r1.w, r2.w, r1.w
        add_pp r1.w, r1.w, c4.y
        mul_sat_pp r2.w, r1.w, c3.x
        mad_pp r5.xyz, c4.z, r3.wyzw, c4.y
        lrp_pp r3, r2.w, r1.xyz, r4
        lrp_pp r1.xyz, r2.w, r5, r6
        nrm_pp r4.xyz, v7
        dp3_sat_pp r2.w, r1, r4
        mul_pp r1, r5.w, c0.xyz
        mul_pp r3, r3, c5.x
        mul_pp r1, r2.w, r1
        mul_pp r1, r3, r1
        mul_pp r1, r2.x, r1
        mul_sat_pp r2.w, r4.z, c9.w
        mul_pp r1, r1, r2.w
        mad oC0, r1, c12.z, r0
        else
        mov oC0, r0
        endif
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0004 0x3f2aaaab 0xbf800000
//         0x40000000 0x3eaaaaab 0x05000051 0xa00f0005
//         0x3e4ccccd 0x80000000 0x3f800000 0x3d000000
//         0x05000051 0xa00f0006 0x3ed5095b 0xbe9b54c1
//         0x3e0a708f 0x3e61b585 0x05000051 0xa00f0007
//         0xbe3c1765 0x3d9e3758 0xbe81715c 0xbe737868
//         0x05000051 0xa00f0008 0x3d800000 0xbd5db446
//         0x3f29b4ab 0xbd000000 0x05000051 0xa00f0009
//         0xbef8e6d1 0x3ecba5a0 0xbecba5a0 0x41800000
//         0x05000051 0xa00f000a 0x3f131401 0xbd800000
//         0xbf131401 0x3dddb3c0 0x05000051 0xa00f000b
//         0xbf200000 0xbf400000 0x3f600000 0x3e400000
//         0x05000051 0xa00f000c 0x3f000000 0x3f800000
//         0x3ea2f983 0x00000000 0x0200001f 0x80000005
//         0x900f0000 0x0200001f 0x8000000a 0x900f0001
//         0x0200001f 0x8001000a 0x900f0002 0x0200001f
//         0x80040005 0x90030003 0x0200001f 0x80010005
//         0x90070004 0x0200001f 0x80020005 0x90070005
//         0x0200001f 0x80030005 0x90070006 0x0200001f
//         0x80060005 0x90070007 0x0200001f 0x80070005
//         0x90070008 0x0200001f 0x80000000 0x90031000
//         0x0200001f 0x90000000 0xa00f0800 0x0200001f
//         0x90000000 0xa00f0801 0x0200001f 0x90000000
//         0xa00f0802 0x0200001f 0x90000000 0xa00f0803
//         0x0200001f 0x90000000 0xa00f0804 0x0200001f
//         0x90000000 0xa00f0805 0x0200001f 0x90000000
//         0xa00f0806 0x0200001f 0x90000000 0xa00f0807
//         0x0200001f 0x90000000 0xa00f0808 0x0200001f
//         0x90000000 0xa00f0809 0x0200001f 0x90000000
//         0xa00f080a 0x0200001f 0x98000000 0xa00f080b
//         0x03000042 0x800f0000 0x90ae0001 0xa0e40805
//         0x03000042 0x800f0001 0x90040002 0xa0e40806
//         0x03000002 0x80070001 0x80e70000 0x80e70001
//         0x03000042 0x800f0000 0x90ae0002 0xa0e40807
//         0x03000002 0x80070000 0x80e40001 0x80e70000
//         0x04000004 0x80270004 0x80e40000 0xa0000004
//         0xa0550004 0x03000042 0x800f0000 0x90ae0002
//         0xa0e40809 0x03000042 0x800f0002 0x90040003
//         0xa0e4080a 0x03000042 0x800f0003 0x90040001
//         0xa0e40808 0x03000002 0x80210000 0x80ff0002
//         0x80ff0003 0x03000002 0x80280001 0x80000000
//         0xa0550004 0x04000004 0x80270000 0xa0aa0004
//         0x80e70000 0xa0550004 0x03000005 0x80380002
//         0x80ff0001 0xa0000003 0x04000012 0x80270001
//         0x80ff0002 0x80e40000 0x80e40004 0x03000008
//         0x80240000 0x80e40001 0x90e40006 0x03000008
//         0x80210000 0x80e40001 0x90e40004 0x03000008
//         0x80220000 0x80e40001 0x90e40005 0x03000042
//         0x802f0000 0x80e40000 0xa0e4080b 0x03000042
//         0x800f0001 0x90040000 0xa0e40802 0x03000042
//         0x800f0004 0x90ae0000 0xa0e40803 0x03000002
//         0x800f0001 0x80a40001 0x80a40004 0x03000042
//         0x800f0004 0x90040001 0xa0e40804 0x03000002
//         0x800f0001 0x80e40001 0x80a40004 0x03000005
//         0x802f0004 0x80e40001 0xa0ff0004 0x04000012
//         0x802f0001 0x80ff0002 0x80a40003 0x80e40004
//         0x03000005 0x802f0001 0x80e40001 0xa0000005
//         0x03000005 0x802f0000 0x80000002 0x80a40000
//         0x03000005 0x802f0000 0x80e40001 0x80e40000
//         0x04000058 0x80080002 0x91aa0007 0xa0550005
//         0xa0aa0005 0x03000005 0x80030001 0x90e41000
//         0xa0ff0005 0x03000042 0x802f0001 0x80e40001
//         0xa0e40801 0x02050029 0x80ff0002 0x81ff0002
//         0x0200005b 0x800f0002 0x90440008 0x0200005c
//         0x800f0003 0x90440008 0x03000002 0x800f0002
//         0x8be40002 0x8be40003 0x02000001 0x80080003
//         0xa0000002 0x04000004 0x802f0002 0x80e40002
//         0x80ff0003 0xa0440001 0x03000005 0x802f0004
//         0x804e0001 0x80e40002 0x04000004 0x800f0002
//         0x80e40004 0xa0fa000b 0x90440008 0x0300005f
//         0x800f0001 0x80440002 0xa0e40800 0x0300005f
//         0x800f0005 0x80ee0002 0xa0e40800 0x04000004
//         0x800f0002 0x80ee0004 0xa050000c 0x90440008
//         0x0300005f 0x800f0003 0x80440002 0xa0e40800
//         0x0300005f 0x800f0002 0x80ee0002 0xa0e40800
//         0x02000001 0x80020001 0x80000005 0x02000001
//         0x80040001 0x80000003 0x02000001 0x80080001
//         0x80000002 0x03000005 0x802f0002 0x80e40004
//         0xa0500006 0x03000002 0x800f0001 0x80e40001
//         0x91aa0008 0x04000004 0x802f0002 0x804e0004
//         0xa0fa0006 0x80e40002 0x04000058 0x802f0001
//         0x80e40001 0xa0aa0005 0xa0550005 0x03000002
//         0x800f0003 0x80e40002 0x90440008 0x0300005f
//         0x800f0002 0x80440003 0xa0e40800 0x0300005f
//         0x800f0005 0x80ee0003 0xa0e40800 0x03000005
//         0x802f0003 0x80e40004 0xa0500007 0x04000004
//         0x802f0003 0x804e0004 0xa0fa0007 0x80e40003
//         0x02000001 0x80020002 0x80000005 0x03000002
//         0x800f0003 0x80e40003 0x90440008 0x0300005f
//         0x800f0005 0x80440003 0xa0e40800 0x0300005f
//         0x800f0003 0x80ee0003 0xa0e40800 0x02000001
//         0x80040002 0x80000005 0x02000001 0x80080002
//         0x80000003 0x03000002 0x800f0003 0x80e40002
//         0x91aa0008 0x03000005 0x802f0002 0x80e40004
//         0xa0a50008 0x04000058 0x802f0003 0x80e40003
//         0xa0aa0005 0xa0550005 0x04000004 0x802f0002
//         0x804e0004 0xa0af0008 0x80e40002 0x03000009
//         0x80280006 0x80e40003 0xa0000008 0x03000002
//         0x800f0002 0x80e40002 0x90440008 0x0300005f
//         0x800f0003 0x80440002 0xa0e40800 0x0300005f
//         0x800f0005 0x80ee0002 0xa0e40800 0x03000005
//         0x802f0002 0x80e40004 0xa0500009 0x04000004
//         0x802f0002 0x804e0004 0xa0a00009 0x80e40002
//         0x02000001 0x80020003 0x80000005 0x03000002
//         0x800f0005 0x80e40002 0x90440008 0x0300005f
//         0x800f0002 0x80440005 0xa0e40800 0x0300005f
//         0x800f0005 0x80ee0005 0xa0e40800 0x02000001
//         0x80040003 0x80000002 0x03000005 0x802f0002
//         0x80e40004 0xa050000a 0x02000001 0x80080003
//         0x80000005 0x04000004 0x802f0002 0x804e0004
//         0xa0fa000a 0x80e40002 0x03000002 0x800f0003
//         0x80e40003 0x91aa0008 0x03000002 0x800f0005
//         0x80e40002 0x90440008 0x0300005f 0x800f0002
//         0x80440005 0xa0e40800 0x0300005f 0x800f0005
//         0x80ee0005 0xa0e40800 0x02000001 0x80020002
//         0x80000005 0x04000004 0x800f0004 0x80e40004
//         0xa050000b 0x90440008 0x0300005f 0x800f0005
//         0x80440004 0xa0e40800 0x0300005f 0x800f0004
//         0x80ee0004 0xa0e40800 0x02000001 0x80040002
//         0x80000005 0x02000001 0x80080002 0x80000004
//         0x04000058 0x802f0003 0x80e40003 0xa0aa0005
//         0xa0550005 0x03000002 0x800f0002 0x80e40002
//         0x91aa0008 0x03000009 0x80080003 0x80e40003
//         0xa0000008 0x04000058 0x802f0002 0x80e40002
//         0xa0aa0005 0xa0550005 0x03000002 0x80280003
//         0x80ff0006 0x80ff0003 0x03000009 0x80080002
//         0x80e40002 0xa0000008 0x03000009 0x80040001
//         0x80e40001 0xa0000008 0x03000002 0x80280001
//         0x80ff0003 0x80ff0002 0x03000002 0x80280005
//         0x80aa0001 0x80ff0001 0x03000042 0x800f0001
//         0x90ae0001 0xa0e40805 0x03000042 0x800f0002
//         0x90040002 0xa0e40806 0x03000002 0x80070002
//         0x80e70001 0x80e70002 0x03000042 0x800f0001
//         0x90ae0002 0xa0e40807 0x03000002 0x80070003
//         0x80e40002 0x80e70001 0x03000042 0x800f0001
//         0x90040000 0xa0e40802 0x03000042 0x800f0002
//         0x90ae0000 0xa0e40803 0x03000002 0x800f0001
//         0x80a40001 0x80a40002 0x03000042 0x800f0002
//         0x90040001 0xa0e40804 0x03000002 0x800f0001
//         0x80e40001 0x80a40002 0x04000004 0x80270006
//         0x80e40003 0xa0000004 0xa0550004 0x03000005
//         0x802f0004 0x80e40001 0xa0ff0004 0x03000042
//         0x800f0003 0x90ae0002 0xa0e40809 0x03000042
//         0x800f0002 0x90040003 0xa0e4080a 0x03000042
//         0x800f0001 0x90040001 0xa0e40808 0x03000002
//         0x80280001 0x80ff0002 0x80ff0001 0x03000002
//         0x80280001 0x80ff0001 0xa0550004 0x03000005
//         0x80380002 0x80ff0001 0xa0000003 0x04000004
//         0x80270005 0xa0aa0004 0x80e70003 0xa0550004
//         0x04000012 0x802f0003 0x80ff0002 0x80a40001
//         0x80e40004 0x04000012 0x80270001 0x80ff0002
//         0x80e40005 0x80e40006 0x02000024 0x80270004
//         0x90e40007 0x03000008 0x80380002 0x80e40001
//         0x80e40004 0x03000005 0x802f0001 0x80ff0005
//         0xa0a40000 0x03000005 0x802f0003 0x80e40003
//         0xa0000005 0x03000005 0x802f0001 0x80ff0002
//         0x80e40001 0x03000005 0x802f0001 0x80e40003
//         0x80e40001 0x03000005 0x802f0001 0x80000002
//         0x80e40001 0x03000005 0x80380002 0x80aa0004
//         0xa0ff0009 0x03000005 0x802f0001 0x80e40001
//         0x80ff0002 0x04000004 0x800f0800 0x80e40001
//         0xa0aa000c 0x80e40000 0x0000002a 0x02000001
//         0x800f0800 0x80e40000 0x0000002b 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f2aaaab // 0.66666668
//         COP_CONST[1]: 0x3eaaaaab // 0.33333334
//         COP_CONST[2]: 0x3e0a708f // 0.13519500
//         COP_CONST[3]: 0x3e61b585 // 0.22041900
//         COP_CONST[4]: 0xbe81715c // -0.25281798
//         COP_CONST[5]: 0xbe737868 // -0.23776400
//         COP_CONST[6]: 0x3f29b4ab // 0.66291304
//         COP_CONST[7]: 0xbef8e6d1 // -0.48613600
//         COP_CONST[8]: 0xbecba5a0 // -0.39774800
//         COP_CONST[9]: 0xbf131401 // -0.57452400
//         COP_CONST[10]: 0x3dddb3c0 // 0.10825300
//         COP_CONST[11]: 0x3ea2f983 // 0.31830988
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x41116c61 // 9.08895970
//         # USER FLOAT CONST: c[6][251] = 0x40eaf01f // 7.34181164
//         # USER FLOAT CONST: c[6][252] = 0x40b3cde6 // 5.61888408
//         # USER FLOAT CONST: c[6][258] = 0x41000000 // 8.00000000
//         # USER FLOAT CONST: c[6][262] = 0x3f800000 // 1.00000000
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@9.08895970
//         ##    ~c0.y -> c[6][251] = 100.00%@7.34181164
//         ##    ~c0.z -> c[6][252] = 100.00%@5.61888408
//         ##     c1.x -> c[6][254] = 26.77%@0.00011938 23.94%@0.00013308 16.90%@0.00011905 9.86%@0.00057697 8.45%@0.00250143 7.04%@0.01084495 7.04%@0.04701831
//         ##     c1.y -> c[6][255] = 26.77%@0.00012612 23.94%@0.00012613 16.90%@0.00012468 9.86%@0.00054685 8.45%@0.00237087 7.04%@0.01027893 7.04%@0.04456413
//         ##    ~c2.x -> c[6][258] = 100.00%@8.00000000
//         ##    ~c3.x -> c[6][262] = 100.00%@1.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        , (0xb,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        , (0xb,CM,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,1024x1024,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000f71
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000f71
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x1c778073,0x00000f71
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xd21ba13b,0x00000f71
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xd21ba13b,0x00000f71
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xb6849df3,0x00000f71
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xb6849df3,0x00000f71
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x1663c495,0x00000f71
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 7 when no alpha is required.
//         STAGEINFO:(0x8,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0xb4486748,0x00000f71
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 8 when no alpha is required.
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x4352d310,0x00000f71
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 9 when no alpha is required.
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x1024x0,12/0,A8Y8,0,0,0), 0xf4459f17,0x00000f71
//         STAGEINFO:(0xb,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,R32F,0,0,0), 0x8304a232,0x00000f71
//         RENDERTARGETINFO: 1,1024x1024,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000d68
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000d68
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x1c778073,0x00000d68
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xd21ba13b,0x00000d68
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xd21ba13b,0x00000d68
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xb6849df3,0x00000d68
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xb6849df3,0x00000d68
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x1663c495,0x00000d68
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 7 when no alpha is required.
//         STAGEINFO:(0x8,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0xb4486748,0x00000d68
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 8 when no alpha is required.
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x4352d310,0x00000d68
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 9 when no alpha is required.
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,A8Y8,0,0,0), 0x73d43f25,0x00000d68
//         STAGEINFO:(0xb,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,R32F,0,0,0), 0x8304a232,0x00000d68
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x18 0 4 "ATTR02")
//         (0x18 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 3 : 
//          (attr 1 1 4) (attr 2 2 4) (attr 4 6 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texr r5, v2.zwzz, #5, #5, 2D
//         texr r6, v3.xyxx, #6, #6, 2D
//         addr r6.xyz, r5.wyzw, r6.wyzw
//         texr r5, v3.zwzz, #7, #7, 2D
//         addr r5.xyz, r6, r5.wyzw
//         madh r9.xyz, r5, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).x, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).y
//         texr r5, v3.zwzz, #9, #9, 2D
//         texr r7, v4.xyxx, #10, #10, 2D
//         texr r8, v2.xyxx, #8, #8, 2D
//         addh r5.x, r7.w, r8.w
//         addh r6.w, r5.x, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).y
//         madh r5.xyz, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).z, r5.wyzw, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).y
//         movr r44, c[6][253].x
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulh_sat r7.w, r6.w, r44
//         lrph r6.xyz, r7.w, r5, r9
//         dp3h r5.z, r6, v7
//         dp3h r5.x, r6, v5
//         dp3h r5.y, r6, v6
//         texh r5, r5.xyzz, #11, #11, LWBE
//         texr r6, v1.xyxx, #2, #2, 2D
//         texr r9, v1.zwzz, #3, #3, 2D
//         addr r6, r6.xyzz, r9.xyzz
//         texr r9, v2.xyxx, #4, #4, 2D
//         addr r6, r6, r9.xyzz
//         mulh r9, r6, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).w
//         lrph r6, r7.w, r8.xyzz, r9
//         mulh r6, r6, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).x
//         mulh r5, r7.x, r5.xyzz
//         mulh r5, r6, r5
//         cmpr r7.w, -v8.z, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).y, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).z
//         mulr r6.xy, v0, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).w
//         texh r6, r6.xyzz, #1, #1, 2D
//         sner.c1 rc.x, r7.w, -r7.w
//         ife GT1.x , l0, l1
//         ddx_finer r47.xy, v9.xyxy
//         ddx_finer r46.xy, v9.xyxy
//         movr r7.xy, r47.xyxy
//         movr r7.zw, r46.xyxy
//         ddy_finer r47.xy, v9.xyxy
//         ddy_finer r46.xy, v9.xyxy
//         movr r8.xy, r47.xyxy
//         movr r8.zw, r46.xyxy
//         addr r7, |r7|, |r8|
//         movr r45, c[6][252].x
//         movr r45.x, constant(8.00000000, 8.00000000, 8.00000000, 8.00000000).x
//         movr r45.y, constant(8.00000000, 8.00000000, 8.00000000, 8.00000000).x
//         movr r45.z, constant(8.00000000, 8.00000000, 8.00000000, 8.00000000).x
//         movr r45.w, constant(8.00000000, 8.00000000, 8.00000000, 8.00000000).x
//         movr r8.w, r45
//         madh r7, r7, r8.w, c[6][251].xyxy
//         mulh r9, r6.zwxy, r7
//         madr r7, r9, constant(-0.62500000, -0.75000000, 0.87500000, 0.18750000).zzww, v9.xyxy
//         txlr r6, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r10, r7.zwww, r7.w, #0, #0, 2D
//         madr r7, r9.zwzw, constant(0.50000000, 1.00000000, 0.31830988, 0.00000000).xxyy, v9.xyxy
//         txlr r8, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r7, r7.zwww, r7.w, #0, #0, 2D
//         movr r6.y, r10.x
//         movr r6.z, r8.x
//         movr r6.w, r7.x
//         mulh r7, r9, constant(0.41608700, -0.30338100, 0.13519500, 0.22041900).xxyy
//         addr r6, r6, -v9.z
//         madh r7, r9.zwxy, constant(0.41608700, -0.30338100, 0.13519500, 0.22041900).zzww, r7
//         cmph r6, r6, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).z, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).y
//         addr r8, r7, v9.xyxy
//         txlr r7, r8.xyyy, r8.y, #0, #0, 2D
//         txlr r10, r8.zwww, r8.w, #0, #0, 2D
//         mulh r8, r9, constant(-0.18368300, 0.07725400, -0.25281798, -0.23776400).xxyy
//         madh r8, r9.zwxy, constant(-0.18368300, 0.07725400, -0.25281798, -0.23776400).zzww, r8
//         movr r7.y, r10.x
//         addr r8, r8, v9.xyxy
//         txlr r10, r8.xyyy, r8.y, #0, #0, 2D
//         txlr r8, r8.zwww, r8.w, #0, #0, 2D
//         movr r7.z, r10.x
//         movr r7.w, r8.x
//         addr r8, r7, -v9.z
//         mulh r7, r9, constant(0.06250000, -0.05412700, 0.66291304, -0.03125000).yyzz
//         cmph r8, r8, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).z, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).y
//         madh r7, r9.zwxy, constant(0.06250000, -0.05412700, 0.66291304, -0.03125000).wwzz, r7
//         dp4h r11.w, r8, constant(0.06250000, -0.05412700, 0.66291304, -0.03125000).x
//         addr r7, r7, v9.xyxy
//         txlr r8, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r10, r7.zwww, r7.w, #0, #0, 2D
//         mulh r7, r9, constant(-0.48613600, 0.39774800, -0.39774800, 16.00000000).xxyy
//         madh r7, r9.zwxy, constant(-0.48613600, 0.39774800, -0.39774800, 16.00000000).xxzz, r7
//         movr r8.y, r10.x
//         addr r10, r7, v9.xyxy
//         txlr r7, r10.xyyy, r10.y, #0, #0, 2D
//         txlr r10, r10.zwww, r10.w, #0, #0, 2D
//         movr r8.z, r7.x
//         mulh r7, r9, constant(0.57452400, -0.06250000, -0.57452400, 0.10825300).xxyy
//         movr r8.w, r10.x
//         madh r7, r9.zwxy, constant(0.57452400, -0.06250000, -0.57452400, 0.10825300).zzww, r7
//         addr r8, r8, -v9.z
//         addr r10, r7, v9.xyxy
//         txlr r7, r10.xyyy, r10.y, #0, #0, 2D
//         txlr r10, r10.zwww, r10.w, #0, #0, 2D
//         movr r7.y, r10.x
//         madr r9, r9, constant(-0.62500000, -0.75000000, 0.87500000, 0.18750000).xxyy, v9.xyxy
//         txlr r10, r9.xyyy, r9.y, #0, #0, 2D
//         txlr r9, r9.zwww, r9.w, #0, #0, 2D
//         movr r7.z, r10.x
//         movr r7.w, r9.x
//         cmph r8, r8, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).z, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).y
//         addr r7, r7, -v9.z
//         dp4r r8.w, r8, constant(0.06250000, -0.05412700, 0.66291304, -0.03125000).x
//         cmph r7, r7, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).z, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).y
//         addh r8.w, r11.w, r8.w
//         dp4r r7.w, r7, constant(0.06250000, -0.05412700, 0.66291304, -0.03125000).x
//         dp4r r6.z, r6, constant(0.06250000, -0.05412700, 0.66291304, -0.03125000).x
//         addh r6.w, r8.w, r7.w
//         addh r10.w, r6.z, r6.w
//         texr r6, v2.zwzz, #5, #5, 2D
//         texr r7, v3.xyxx, #6, #6, 2D
//         addr r7.xyz, r6.wyzw, r7.wyzw
//         texr r6, v3.zwzz, #7, #7, 2D
//         addr r8.xyz, r7, r6.wyzw
//         texr r6, v1.xyxx, #2, #2, 2D
//         texr r7, v1.zwzz, #3, #3, 2D
//         addr r6, r6.xyzz, r7.xyzz
//         texr r7, v2.xyxx, #4, #4, 2D
//         addr r6, r6, r7.xyzz
//         madh r11.xyz, r8, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).x, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).y
//         mulh r9, r6, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).w
//         texr r8, v3.zwzz, #9, #9, 2D
//         texr r7, v4.xyxx, #10, #10, 2D
//         texr r6, v2.xyxx, #8, #8, 2D
//         addh r6.w, r7.w, r6.w
//         addh r6.w, r6.w, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).y
//         movr r44, c[6][253].x
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulh_sat r7.w, r6.w, r44
//         madh r10.xyz, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).z, r8.wyzw, constant(0.66666668, -1.00000000, 2.00000000, 0.33333334).y
//         lrph r8, r7.w, r6.xyzz, r9
//         lrph r6.xyz, r7.w, r10, r11
//         nrmh r9.xyz, v8
//         dp3h_sat r7.w, r6, r9
//         movr r44, c[6][250].xyzz
//         movr r44.x, constant(9.08895970, 9.08895970, 9.08895970, 9.08895970).x
//         movr r44.y, constant(7.34181164, 7.34181164, 7.34181164, 7.34181164).x
//         movr r44.z, constant(5.61888408, 5.61888408, 5.61888408, 5.61888408).x
//         movr r44.w, constant(5.61888408, 5.61888408, 5.61888408, 5.61888408).x
//         mulh r6, r10.w, r44
//         mulh r8, r8, constant(0.20000000, 0.00000000, 1.00000000, 0.03125000).x
//         mulh r6, r7.w, r6
//         mulh r6, r8, r6
//         mulh r6, r7.x, r6
//         mulh_sat r7.w, r9.z, constant(-0.48613600, 0.39774800, -0.39774800, 16.00000000).w
//         mulh r6, r6, r7.w
//         madr r0, r6, constant(0.50000000, 1.00000000, 0.31830988, 0.00000000).z, r5
//         l0:
//         movr r0, r5
//         l1:
//         nopr
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R3, -0x40800000;          # [  0][000000]
//     	IPA.PASS.CENTROID R0, a[0x7c];   # [  1][000008] POSITION_W
//     	MUFU.RCP R15, R0;                # [  2][000010]
//     	IPA.PASS R2, a[0x7c];            # [  3][000018] POSITION_W
//     	IPA.SC.CENTROID R1, a[0x28c], R15; # [  4][000020] COLOR_FRONT_DIFFUSE_ALPHA
//     	IPA.SC.CENTROID R0, a[0x288], R15; # [  5][000028] COLOR_FRONT_DIFFUSE_BLUE
//     	IPA.SC.CENTROID R9, a[0x294], R15; # [  6][000030] COLOR_FRONT_SPELWLAR_GREEN
//     	IPA.SC.CENTROID R8, a[0x290], R15; # [  7][000038] COLOR_FRONT_SPELWLAR_RED
//     	MUFU.RCP R19, R2;                # [  8][000040]
//     	TEX.T R4, R0, 0x5, 0x5, 2D, 0xe; # [  9][000048]
//     	IPA.SC.CENTROID R1, a[0x29c], R15; # [ 10][000050] COLOR_FRONT_SPELWLAR_ALPHA
//     	IPA.SC.CENTROID R0, a[0x298], R15; # [ 11][000058] COLOR_FRONT_SPELWLAR_BLUE
//     	TEX.T R12, R8, 0x6, 0x6, 2D, 0xe; # [ 12][000060]
//     	TEX.T R16, R0, 0x7, 0x7, 2D, 0xe; # [ 13][000068]
//     	IPA.SC R9, a[0x314], R19;        # [ 14][000070] FIXED_FNC_TEXTURE_1_T
//     	IPA.SC R8, a[0x310], R19;        # [ 15][000078] TEX1
//     	TEX.T R0, R0, 0x9, 0x9, 2D, 0xe; # [ 16][000080]
//     	IPA.SC.CENTROID R21, a[0x284], R15; # [ 17][000088] COLOR_FRONT_DIFFUSE_GREEN
//     	IPA.SC.CENTROID R20, a[0x280], R15; # [ 18][000090] COLOR_FRONT_DIFFUSE_RED
//     	TEX.T R24, R8, 0xa, 0xa, 2D, 0x9; # [ 19][000098]
//     	TEX.P R8, R20, 0x8, 0x8, 2D;     # [ 20][0000a0]
//     	IPA.SC R22, a[0x340], R19;       # [ 21][0000a8] TEX4
//     	IPA.SC R23, a[0x320], R19;       # [ 22][0000b0] TEX2
//     	IPA.SC R7, a[0x344], R19;        # [ 23][0000b8] FIXED_FNC_TEXTURE_4_T
//     	FADD.FTZ R5, R5, R13;            # [ 24][0000c0]
//     	FADD.FTZ R12, R4, R12;           # [ 25][0000c8]
//     	FADD.FTZ R13, R6, R14;           # [ 26][0000d0]
//     	FADD.FTZ R12, R12, R16;          # [ 27][0000d8]
//     	FADD.FTZ R4, R13, R18;           # [ 28][0000e0]
//     	FFMA.FMZ R16, R12, c[0x9][0x0], R3; # [ 29][0000e8]
//     	FADD.FTZ R13, R5, R17;           # [ 30][0000f0]
//     	FFMA.FMZ R12, R4, c[0x9][0x0], R3; # [ 31][0000f8]
//     	FFMA.FMZ R1, R1, 2, R3;          # [ 32][000100]
//     	FFMA.FMZ R0, R0, 2, R3;          # [ 33][000108]
//     	FFMA.FMZ R26, R13, c[0x9][0x0], R3; # [ 34][000110]
//     	IPA.SC R5, a[0x304], R19;        # [ 35][000118] FIXED_FNC_TEXTURE_0_T
//     	FFMA.FMZ R3, R2, 2, R3;          # [ 36][000120]
//     	IPA.SC R4, a[0x300], R19;        # [ 37][000128] TEX0
//     	FADD.FTZ R0, R0, -R16;           # [ 38][000130]
//     	IPA.SC R14, a[0x330], R19;       # [ 39][000138] TEX3
//     	FADD.FTZ R1, R1, -R26;           # [ 40][000140]
//     	FADD.FTZ R2, R25, R11;           # [ 41][000148]
//     	FADD.FTZ R11, R3, -R12;          # [ 42][000150]
//     	IPA.SC R6, a[0x324], R19;        # [ 43][000158] FIXED_FNC_TEXTURE_2_T
//     	FADD.FTZ.SAT R3, R2, -1;         # [ 44][000160]
//     	IPA.SC R18, a[0x334], R19;       # [ 45][000168] FIXED_FNC_TEXTURE_3_T
//     	FFMA.FTZ R25, R3, R11, R12;      # [ 46][000170]
//     	IPA.SC R13, a[0x30c], R19;       # [ 47][000178] FIXED_FNC_TEXTURE_0_Q
//     	FFMA.FTZ R16, R3, R0, R16;       # [ 48][000180]
//     	IPA.SC R12, a[0x308], R19;       # [ 49][000188] FIXED_FNC_TEXTURE_0_R
//     	FFMA.FTZ R11, R3, R1, R26;       # [ 50][000190]
//     	IPA.SC R17, a[0x328], R19;       # [ 51][000198] FIXED_FNC_TEXTURE_2_R
//     	FMUL.FTZ R22, R25, R22;          # [ 52][0001a0]
//     	TEX.NODEP.T R0, R4, 0x2, 0x2, 2D, 0x7; # [ 53][0001a8]
//     	FMUL.FTZ R23, R25, R23;          # [ 54][0001b0]
//     	IPA.SC R5, a[0x338], R19;        # [ 55][0001b8] FIXED_FNC_TEXTURE_3_R
//     	FMUL.FTZ R25, R25, R14;          # [ 56][0001c0]
//     	IPA.SC R4, a[0x348], R19;        # [ 57][0001c8] FIXED_FNC_TEXTURE_4_R
//     	FFMA.FTZ R6, R16, R6, R23;       # [ 58][0001d0]
//     	TEX.NODEP.T R12, R12, 0x3, 0x3, 2D, 0x7; # [ 59][0001d8]
//     	FFMA.FTZ R18, R16, R18, R25;     # [ 60][0001e0]
//     	FFMA.FTZ R22, R16, R7, R22;      # [ 61][0001e8]
//     	FFMA.FTZ R7, R11, R17, R6;       # [ 62][0001f0]
//     	FFMA.FTZ R5, R11, R5, R18;       # [ 63][0001f8]
//     	FFMA.FTZ R4, R11, R4, R22;       # [ 64][000200]
//     	TEX.NODEP.T R16, R20, 0x4, 0x4, 2D, 0x7; # [ 65][000208]
//     	FMNMX R6, |R7|, |R5|, !PT;       # [ 66][000210]
//     	MOV32I R23, -0x80000000;         # [ 67][000218]
//     	FMNMX R6, |R4|, R6, !PT;         # [ 68][000220]
//     	MUFU.RCP R11, R6;                # [ 69][000228]
//     	FMUL R6, R4, R11;                # [ 70][000230]
//     	FMUL R5, R5, R11;                # [ 71][000238]
//     	FMUL R4, R7, R11;                # [ 72][000240]
//     	TEX.NODEP.P R20, R4, 0xb, 0xb, LWBE, 0x7; # [ 73][000248]
//     	IPA.PASS R5, a[0x74];            # [ 74][000250] POSITION_Y
//     	FMUL.FMZ R5, R5, 0.03125;        # [ 75][000258]
//     	IPA.PASS R4, a[0x70];            # [ 76][000260] POSITION_X
//     	FMUL.FMZ R4, R4, 0.03125;        # [ 77][000268]
//     	IPA.SC R11, a[0x358], R19;       # [ 78][000270] FIXED_FNC_TEXTURE_5_R
//     	TEX.P R4, R4, 0x1, 0x1, 2D;      # [ 79][000278]
//     	FCMP.LE R11, R23, 0x3f800, R11;  # [ 80][000280]
//     	FSETP.NEU.FTZ.AND P0, PT, R11, -R11, PT; # [ 81][000288]
//     	FADD.FTZ R2, R2, R14;            # [ 82][000290]
//     	FADD.FTZ R1, R1, R13;            # [ 83][000298]
//     	FADD.FTZ R11, R0, R12;           # [ 84][0002a0]
//     	FADD.FTZ R0, R2, R18;            # [ 85][0002a8]
//     	FADD.FTZ R11, R11, R16;          # [ 86][0002b0]
//     	FADD.FTZ R2, R1, R17;            # [ 87][0002b8]
//     	FFMA.FTZ R1, R0, -c[0x9][0x4], R10; # [ 88][0002c0]
//     	FFMA.FTZ R9, R2, -c[0x9][0x4], R9; # [ 89][0002c8]
//     	FFMA.FTZ R10, R11, -c[0x9][0x4], R8; # [ 90][0002d0]
//     	FMUL.FTZ R1, R3, R1;             # [ 91][0002d8]
//     	FMUL.FTZ R8, R3, R9;             # [ 92][0002e0]
//     	FFMA.FTZ R0, R0, c[0x9][0x4], R1; # [ 93][0002e8]
//     	FMUL.FTZ R3, R3, R10;            # [ 94][0002f0]
//     	FFMA.FTZ R1, R2, c[0x9][0x4], R8; # [ 95][0002f8]
//     	FMUL32I.FMZ R0, R0, 0.2;         # [ 96][000300]
//     	FFMA.FTZ R3, R11, c[0x9][0x4], R3; # [ 97][000308]
//     	FMUL32I.FMZ R2, R1, 0.2;         # [ 98][000310]
//     	FMUL.FMZ R8, R24, R21;           # [ 99][000318]
//     	FMUL.FMZ R1, R24, R22;           # [100][000320]
//     	FMUL32I.FMZ R9, R3, 0.2;         # [101][000328]
//     	FMUL.FMZ R10, R24, R20;          # [102][000330]
//     	FMUL.FMZ R3, R0, R1;             # [103][000338]
//     	FMUL.FMZ R1, R2, R8;             # [104][000340]
//     	FMUL.FMZ R0, R9, R10;            # [105][000348]
//     	MOV R2, R3;                      # [106][000350]
//     	@!P0 EXIT;                       # [107][000358]
//     	MOV32I R13, 0x41000000;          # [108][000360]
//     	IPA.SC R11, a[0x364], R19;       # [109][000368] FIXED_FNC_TEXTURE_6_T
//     	FSWZ.0000 R8, R11, R11, ZPNPNPZP; # [110][000370]
//     	IPA.SC R20, a[0x360], R19;       # [111][000378] TEX6
//     	FSWZ.1111 R12, R8, RZ, PPPPPPPP; # [112][000380]
//     	FSWZ.0000 R9, R20, R20, ZPNPNPZP; # [113][000388]
//     	FSWZ.2222 R8, R8, RZ, PPPPPPPP;  # [114][000390]
//     	FSWZ.1111 R10, R9, RZ, PPPPPPPP; # [115][000398]
//     	FSWZ.2222 R9, R9, RZ, PPPPPPPP;  # [116][0003a0]
//     	FADD.FTZ R12, |R12|, |R8|;       # [117][0003a8]
//     	FADD.FTZ R8, |R10|, |R9|;        # [118][0003b0]
//     	FFMA.FMZ R9, R12, R13, c[0x6][0xfb4]; # [119][0003b8]
//     	FFMA.FMZ R8, R8, R13, c[0x6][0xfb0]; # [120][0003c0]
//     	FMUL.FMZ R17, R7, R9;            # [121][0003c8]
//     	FMUL.FMZ R22, R5, R9;            # [122][0003d0]
//     	FMUL.FMZ R24, R6, R8;            # [123][0003d8]
//     	FMUL.FMZ R23, R4, R8;            # [124][0003e0]
//     	FMUL32I.FMZ R5, R17, 0.416087;   # [125][0003e8]
//     	FMUL32I.FMZ R4, R24, 0.416087;   # [126][0003f0]
//     	FFMA.FMZ R5, R22, c[0x9][0x8], R5; # [127][0003f8]
//     	FFMA.FMZ R4, R23, c[0x9][0x8], R4; # [128][000400]
//     	FADD.FTZ R5, R5, R11;            # [129][000408]
//     	FADD.FTZ R4, R4, R20;            # [130][000410]
//     	FMUL32I.FMZ R9, R24, -0.183683;  # [131][000418]
//     	FMUL32I.FMZ R13, R17, -0.183683; # [132][000420]
//     	TEX.LL.NODEP.T R12, R4, R5, 0x0, 0x0, 2D, 0x1; # [133][000428]
//     	FFMA.FMZ R4, R24, 0.875, R20;    # [134][000430]
//     	FFMA.FMZ R5, R17, 0.875, R11;    # [135][000438]
//     	FMUL32I.FMZ R16, R23, 0.077254;  # [136][000440]
//     	TEX.LL.NODEP.T R21, R4, R5, 0x0, 0x0, 2D, 0x1; # [137][000448]
//     	FFMA.FMZ R4, R23, 0.1875, R20;   # [138][000450]
//     	FFMA.FMZ R5, R22, 0.1875, R11;   # [139][000458]
//     	FMUL32I.FMZ R8, R22, 0.077254;   # [140][000460]
//     	TEX.LL.NODEP.T R6, R4, R5, 0x0, 0x0, 2D, 0x1; # [141][000468]
//     	FFMA.FMZ R4, R23, 0.5, R20;      # [142][000470]
//     	FFMA.FMZ R5, R22, 0.5, R11;      # [143][000478]
//     	FMUL32I.FMZ R18, R17, -0.486136; # [144][000480]
//     	TEX.LL.NODEP.T R7, R4, R5, 0x0, 0x0, 2D, 0x1; # [145][000488]
//     	FADD.FTZ R4, R23, R20;           # [146][000490]
//     	FADD.FTZ R5, R22, R11;           # [147][000498]
//     	FFMA.FMZ R10, R23, c[0x9][0x10], R9; # [148][0004a0]
//     	FFMA.FMZ R13, R22, c[0x9][0x10], R13; # [149][0004a8]
//     	FMUL32I.FMZ R9, R24, -0.054127;  # [150][0004b0]
//     	TEX.LL.NODEP.T R14, R4, R5, 0x0, 0x0, 2D, 0x1; # [151][0004b8]
//     	FADD.FTZ R4, R10, R20;           # [152][0004c0]
//     	FADD.FTZ R5, R13, R11;           # [153][0004c8]
//     	FFMA.FMZ R10, R24, c[0x9][0x14], R16; # [154][0004d0]
//     	FFMA.FMZ R8, R17, c[0x9][0x14], R8; # [155][0004d8]
//     	FMUL32I.FMZ R16, R17, -0.054127; # [156][0004e0]
//     	TEX.LL.NODEP.T R13, R4, R5, 0x0, 0x0, 2D, 0x1; # [157][0004e8]
//     	FADD.FTZ R4, R10, R20;           # [158][0004f0]
//     	FADD.FTZ R5, R8, R11;            # [159][0004f8]
//     	FFMA.FMZ R8, R23, -0.03125, R9;  # [160][000500]
//     	TEX.LL.NODEP.T R10, R4, R5, 0x0, 0x0, 2D, 0x1; # [161][000508]
//     	FFMA.FMZ R9, R22, -0.03125, R16; # [162][000510]
//     	FADD.FTZ R4, R8, R20;            # [163][000518]
//     	FMUL32I.FMZ R16, R24, -0.486136; # [164][000520]
//     	FADD.FTZ R5, R9, R11;            # [165][000528]
//     	FFMA.FMZ R8, R23, c[0x9][0x1c], R16; # [166][000530]
//     	FMUL32I.FMZ R25, R22, 0.662913;  # [167][000538]
//     	FMUL32I.FMZ R26, R17, 0.574524;  # [168][000540]
//     	TEX.LL.NODEP.P R9, R4, R5, 0x0, 0x0, 2D, 0x1; # [169][000548]
//     	FFMA.FMZ R5, R22, c[0x9][0x1c], R18; # [170][000550]
//     	FADD.FTZ R4, R8, R20;            # [171][000558]
//     	FADD.FTZ R5, R5, R11;            # [172][000560]
//     	FMUL32I.FMZ R18, R23, 0.662913;  # [173][000568]
//     	TEX.LL.NODEP.T R8, R4, R5, 0x0, 0x0, 2D, 0x1; # [174][000570]
//     	FMUL32I.FMZ R4, R23, -0.303381;  # [175][000578]
//     	FMUL32I.FMZ R5, R22, -0.303381;  # [176][000580]
//     	FFMA.FMZ R4, R24, c[0x9][0xc], R4; # [177][000588]
//     	FFMA.FMZ R5, R17, c[0x9][0xc], R5; # [178][000590]
//     	FADD.FTZ R4, R4, R20;            # [179][000598]
//     	FADD.FTZ R5, R5, R11;            # [180][0005a0]
//     	TEX.LL.NODEP.T R16, R4, R5, 0x0, 0x0, 2D, 0x1; # [181][0005a8]
//     	FFMA.FMZ R4, R24, c[0x9][0x18], R18; # [182][0005b0]
//     	FFMA.FMZ R5, R17, c[0x9][0x18], R25; # [183][0005b8]
//     	FADD.FTZ R4, R4, R20;            # [184][0005c0]
//     	FADD.FTZ R5, R5, R11;            # [185][0005c8]
//     	FMUL32I.FMZ R18, R24, 0.574524;  # [186][0005d0]
//     	TEX.LL.NODEP.T R27, R4, R5, 0x0, 0x0, 2D, 0x1; # [187][0005d8]
//     	FMUL32I.FMZ R4, R23, 0.397748;   # [188][0005e0]
//     	FMUL32I.FMZ R5, R22, 0.397748;   # [189][0005e8]
//     	FFMA.FMZ R4, R24, c[0x9][0x20], R4; # [190][0005f0]
//     	FFMA.FMZ R5, R17, c[0x9][0x20], R5; # [191][0005f8]
//     	FFMA.FMZ R25, R23, c[0x9][0x24], R18; # [192][000600]
//     	FADD.FTZ R4, R4, R20;            # [193][000608]
//     	FADD.FTZ R5, R5, R11;            # [194][000610]
//     	FFMA.FMZ R18, R22, c[0x9][0x24], R26; # [195][000618]
//     	TEX.LL.NODEP.P R28, R4, R5, 0x0, 0x0, 2D, 0x1; # [196][000620]
//     	FADD.FTZ R4, R25, R20;           # [197][000628]
//     	FADD.FTZ R5, R18, R11;           # [198][000630]
//     	FMUL.FMZ R18, R23, -0.0625;      # [199][000638]
//     	FMUL.FMZ R25, R22, -0.0625;      # [200][000640]
//     	TEX.LL.NODEP.T R29, R4, R5, 0x0, 0x0, 2D, 0x1; # [201][000648]
//     	FFMA.FMZ R4, R24, c[0x9][0x28], R18; # [202][000650]
//     	FFMA.FMZ R5, R17, c[0x9][0x28], R25; # [203][000658]
//     	FADD.FTZ R4, R4, R20;            # [204][000660]
//     	FADD.FTZ R5, R5, R11;            # [205][000668]
//     	TEX.LL.NODEP.T R18, R4, R5, 0x0, 0x0, 2D, 0x1; # [206][000670]
//     	FFMA.FMZ R5, R17, -0.625, R11;   # [207][000678]
//     	FFMA.FMZ R4, R24, -0.625, R20;   # [208][000680]
//     	IPA.SC R17, a[0x368], R19;       # [209][000688] FIXED_FNC_TEXTURE_6_R
//     	TEX.LL.NODEP.P R30, R4, R5, 0x0, 0x0, 2D, 0x1; # [210][000690]
//     	FFMA.FMZ R4, R23, -0.75, R20;    # [211][000698]
//     	FFMA.FMZ R5, R22, -0.75, R11;    # [212][0006a0]
//     	MOV32I R11, 0x3f800000;          # [213][0006a8]
//     	FADD.FTZ R20, R21, -R17;         # [214][0006b0]
//     	TEX.LL.NODEP.P R23, R4, R5, 0x0, 0x0, 2D, 0x1; # [215][0006b8]
//     	FADD.FTZ R5, R6, -R17;           # [216][0006c0]
//     	FCMP.GE R4, R11, 0x80000, R20;   # [217][0006c8]
//     	FADD.FTZ R6, R7, -R17;           # [218][0006d0]
//     	FCMP.GE R5, R11, 0x80000, R5;    # [219][0006d8]
//     	FMUL.FTZ R4, R4, 0.0625;         # [220][0006e0]
//     	FADD.FTZ R14, R14, -R17;         # [221][0006e8]
//     	FCMP.GE R20, R11, 0x80000, R6;   # [222][0006f0]
//     	FFMA.FTZ R4, R5, 0.0625, R4;     # [223][0006f8]
//     	FADD.FTZ R12, R12, -R17;         # [224][000700]
//     	IPA.SC.CENTROID R7, a[0x28c], R15; # [225][000708] COLOR_FRONT_DIFFUSE_ALPHA
//     	FCMP.GE R14, R11, 0x80000, R14;  # [226][000710]
//     	IPA.SC.CENTROID R6, a[0x288], R15; # [227][000718] COLOR_FRONT_DIFFUSE_BLUE
//     	FFMA.FTZ R4, R20, 0.0625, R4;    # [228][000720]
//     	FCMP.GE R12, R11, 0x80000, R12;  # [229][000728]
//     	FADD.FTZ R13, R13, -R17;         # [230][000730]
//     	FFMA.FTZ R14, R14, 0.0625, R4;   # [231][000738]
//     	FFMA.FTZ R14, R12, 0.0625, R14;  # [232][000740]
//     	IPA.SC.CENTROID R5, a[0x294], R15; # [233][000748] COLOR_FRONT_SPELWLAR_GREEN
//     	FCMP.GE R13, R11, 0x80000, R13;  # [234][000750]
//     	IPA.SC.CENTROID R4, a[0x290], R15; # [235][000758] COLOR_FRONT_SPELWLAR_RED
//     	FADD.FTZ R12, R10, -R17;         # [236][000760]
//     	TEX.NODEP.P R20, R6, 0x5, 0x5, 2D, 0xe; # [237][000768]
//     	FFMA.FTZ R10, R13, 0.0625, R14;  # [238][000770]
//     	IPA.SC R7, a[0x304], R19;        # [239][000778] FIXED_FNC_TEXTURE_0_T
//     	FCMP.GE R12, R11, 0x80000, R12;  # [240][000780]
//     	IPA.SC R6, a[0x300], R19;        # [241][000788] TEX0
//     	FADD.FTZ R9, R9, -R17;           # [242][000790]
//     	TEX.NODEP.P R24, R4, 0x6, 0x6, 2D, 0xe; # [243][000798]
//     	FFMA.FTZ R10, R12, 0.0625, R10;  # [244][0007a0]
//     	FCMP.GE R9, R11, 0x80000, R9;    # [245][0007a8]
//     	FADD.FTZ R13, R8, -R17;          # [246][0007b0]
//     	IPA.SC R5, a[0x30c], R19;        # [247][0007b8] FIXED_FNC_TEXTURE_0_Q
//     	FFMA.FTZ R12, R9, 0.0625, R10;   # [248][0007c0]
//     	IPA.SC R4, a[0x308], R19;        # [249][0007c8] FIXED_FNC_TEXTURE_0_R
//     	TEX.NODEP.T R8, R6, 0x2, 0x2, 2D, 0x7; # [250][0007d0]
//     	FCMP.GE R6, R11, 0x80000, R13;   # [251][0007d8]
//     	FFMA.FTZ R6, R6, 0.0625, R12;    # [252][0007e0]
//     	TEX.NODEP.P R12, R4, 0x3, 0x3, 2D, 0x7; # [253][0007e8]
//     	FADD.FTZ R5, R27, -R17;          # [254][0007f0]
//     	FCMP.GE R5, R11, 0x80000, R5;    # [255][0007f8]
//     	FADD.FTZ R4, R28, -R17;          # [256][000800]
//     	FCMP.GE R4, R11, 0x80000, R4;    # [257][000808]
//     	FFMA.FTZ R4, R4, 0.0625, R6;     # [258][000810]
//     	FFMA.FTZ R4, R5, 0.0625, R4;     # [259][000818]
//     	FADD.FTZ R6, R29, -R17;          # [260][000820]
//     	FCMP.GE R6, R11, 0x80000, R6;    # [261][000828]
//     	FFMA.FTZ R4, R6, 0.0625, R4;     # [262][000830]
//     	FADD.FTZ R7, R30, -R17;          # [263][000838]
//     	FCMP.GE R5, R11, 0x80000, R7;    # [264][000840]
//     	FADD.FTZ R23, R23, -R17;         # [265][000848]
//     	FADD.FTZ R7, R18, -R17;          # [266][000850]
//     	FFMA.FTZ R6, R5, 0.0625, R4;     # [267][000858]
//     	FCMP.GE R18, R11, 0x80000, R23;  # [268][000860]
//     	IPA.SC.CENTROID R5, a[0x284], R15; # [269][000868] COLOR_FRONT_DIFFUSE_GREEN
//     	FADD.FTZ R23, R16, -R17;         # [270][000870]
//     	IPA.SC.CENTROID R4, a[0x280], R15; # [271][000878] COLOR_FRONT_DIFFUSE_RED
//     	FCMP.GE R16, R11, 0x80000, R7;   # [272][000880]
//     	FFMA.FTZ R17, R18, 0.0625, R6;   # [273][000888]
//     	FFMA.FTZ R27, R16, 0.0625, R17;  # [274][000890]
//     	IPA.SC R7, a[0x314], R19;        # [275][000898] FIXED_FNC_TEXTURE_1_T
//     	IPA.SC R6, a[0x310], R19;        # [276][0008a0] TEX1
//     	TEX.NODEP.T R16, R4, 0x4, 0x4, 2D, 0x7; # [277][0008a8]
//     	TEX.NODEP.P R28, R6, 0xa, 0xa, 2D, 0x9; # [278][0008b0]
//     	FCMP.GE R6, R11, 0x80000, R23;   # [279][0008b8]
//     	FFMA.FTZ R23, R6, 0.0625, R27;   # [280][0008c0]
//     	FADD.FTZ R27, R21, R25;          # [281][0008c8]
//     	TEX.NODEP.T R4, R4, 0x8, 0x8, 2D; # [282][0008d0]
//     	FADD.FTZ R30, R20, R24;          # [283][0008d8]
//     	IPA.SC.CENTROID R25, a[0x29c], R15; # [284][0008e0] COLOR_FRONT_SPELWLAR_ALPHA
//     	IPA.SC.CENTROID R24, a[0x298], R15; # [285][0008e8] COLOR_FRONT_SPELWLAR_BLUE
//     	FADD.FTZ R15, R22, R26;          # [286][0008f0]
//     	TEX.NODEP.P R20, R24, 0x7, 0x7, 2D, 0xe; # [287][0008f8]
//     	FADD.FTZ R14, R10, R14;          # [288][000900]
//     	FADD.FTZ R13, R9, R13;           # [289][000908]
//     	FADD.FTZ R12, R8, R12;           # [290][000910]
//     	TEX.NODEP.P R8, R24, 0x9, 0x9, 2D, 0xe; # [291][000918]
//     	IPA.SC R24, a[0x358], R19;       # [292][000920] FIXED_FNC_TEXTURE_5_R
//     	FADD.FTZ R12, R12, R16;          # [293][000928]
//     	FADD.FTZ R13, R13, R17;          # [294][000930]
//     	IPA.SC R16, a[0x350], R19;       # [295][000938] TEX5
//     	FADD.FTZ R14, R14, R18;          # [296][000940]
//     	IPA.SC R17, a[0x354], R19;       # [297][000948] FIXED_FNC_TEXTURE_5_T
//     	FADD.FTZ R7, R29, R7;            # [298][000950]
//     	FFMA.FTZ R4, R12, -c[0x9][0x4], R4; # [299][000958]
//     	FADD.FTZ.SAT R7, R7, -1;         # [300][000960]
//     	FMUL.FTZ R19, R16, R16;          # [301][000968]
//     	FMUL.FTZ R4, R7, R4;             # [302][000970]
//     	FFMA.FTZ R19, R17, R17, R19;     # [303][000978]
//     	FFMA.FTZ R4, R12, c[0x9][0x4], R4; # [304][000980]
//     	FADD.FTZ R15, R15, R22;          # [305][000988]
//     	FADD.FTZ R12, R27, R21;          # [306][000990]
//     	FADD.FTZ R20, R30, R20;          # [307][000998]
//     	FFMA.FTZ R21, R13, -c[0x9][0x4], R5; # [308][0009a0]
//     	FFMA.FTZ R19, R24, R24, R19;     # [309][0009a8]
//     	FFMA.FTZ R5, R14, -c[0x9][0x4], R6; # [310][0009b0]
//     	FFMA.FMZ R15, R15, c[0x9][0x0], -R11; # [311][0009b8]
//     	FMUL.FTZ R6, R7, R21;            # [312][0009c0]
//     	MUFU.RSQ R19, R19;               # [313][0009c8]
//     	FFMA.FMZ R21, R10, 2, -R11;      # [314][0009d0]
//     	FFMA.FMZ R12, R12, c[0x9][0x0], -R11; # [315][0009d8]
//     	FFMA.FMZ R10, R20, c[0x9][0x0], -R11; # [316][0009e0]
//     	FMUL.FTZ R16, R16, R19;          # [317][0009e8]
//     	FFMA.FMZ R20, R8, 2, -R11;       # [318][0009f0]
//     	FMUL.FTZ R5, R7, R5;             # [319][0009f8]
//     	FADD.FTZ R8, R21, -R15;          # [320][000a00]
//     	FFMA.FMZ R11, R9, 2, -R11;       # [321][000a08]
//     	FADD.FTZ R9, R20, -R10;          # [322][000a10]
//     	FFMA.FTZ R8, R7, R8, R15;        # [323][000a18]
//     	FADD.FTZ R11, R11, -R12;         # [324][000a20]
//     	FMUL.FTZ R17, R17, R19;          # [325][000a28]
//     	FFMA.FTZ R9, R7, R9, R10;        # [326][000a30]
//     	FMUL.FTZ R8, R8, R16;            # [327][000a38]
//     	FFMA.FTZ R5, R14, c[0x9][0x4], R5; # [328][000a40]
//     	FFMA.FTZ R10, R7, R11, R12;      # [329][000a48]
//     	FMUL.FTZ R18, R24, R19;          # [330][000a50]
//     	FFMA.FTZ R7, R9, R17, R8;        # [331][000a58]
//     	FMUL.FMZ R8, R23, R5;            # [332][000a60]
//     	FFMA.FTZ R6, R13, c[0x9][0x4], R6; # [333][000a68]
//     	FFMA.FTZ.SAT R5, R10, R18, R7;   # [334][000a70]
//     	FMUL.FMZ R6, R23, R6;            # [335][000a78]
//     	FMUL.FMZ R7, R23, R4;            # [336][000a80]
//     	FMUL.FMZ.SAT R19, R18, 16;       # [337][000a88]
//     	FMUL.FMZ R4, R5, R8;             # [338][000a90]
//     	FMUL.FMZ R7, R5, R7;             # [339][000a98]
//     	FMUL.FMZ R5, R5, R6;             # [340][000aa0]
//     	FMUL32I.FMZ R4, R4, 0x3f8fd7eb;  # [341][000aa8]
//     	FMUL32I.FMZ R6, R7, 0x3fe8ad68;  # [342][000ab0]
//     	FMUL32I.FMZ R5, R5, 0x3fbbf34c;  # [343][000ab8]
//     	FMUL.FMZ R4, R28, R4;            # [344][000ac0]
//     	FMUL.FMZ R6, R28, R6;            # [345][000ac8]
//     	FMUL.FMZ R5, R28, R5;            # [346][000ad0]
//     	FMUL.FMZ R4, R4, R19;            # [347][000ad8]
//     	FMUL.FMZ R6, R6, R19;            # [348][000ae0]
//     	FMUL.FMZ R5, R5, R19;            # [349][000ae8]
//     	FFMA.FMZ R3, R4, c[0x9][0x2c], R3; # [350][000af0]
//     	FFMA.FMZ R2, R4, c[0x9][0x2c], R2; # [351][000af8]
//     	FFMA.FMZ R1, R5, c[0x9][0x2c], R1; # [352][000b00]
//     	FFMA.FMZ R0, R6, c[0x9][0x2c], R0; # [353][000b08]
//     	EXIT;                            # [354][000b10]
//     	END
//     END_SECTION
// END_SHADER
// 
