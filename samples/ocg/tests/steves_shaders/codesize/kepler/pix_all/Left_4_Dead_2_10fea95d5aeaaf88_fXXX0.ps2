// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x10fea95d5aeaaf88
//         UCODE_HASH: 0xafc5521e5a7d6b22
//         POOL: APP
//         VERSION: 20
//         # USES: 105
//         // Time: 20.455ms [3.274 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 20
//         USED_TEXTURE_BITS: 0x37
//         TEXTURE_SLOTS: 6
//         SAMPLER_SLOTS: 6
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//             TEX03_Q              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x80aa2a0a
//         0x0000000a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_x
        def c0, 1.00000000, -1.00000000, 2.00000000, 0.50000000 ; 0x3f800000 0xbf800000 0x40000000 0x3f000000
        def c2, 0.31099999, 0.50000000, 0.10000000, -0.05000000 ; 0x3e9f3b64 0x3f000000 0x3dcccccd 0xbd4ccccd
        def c3, 3.50000000, 20.00000000, 0.00000000, 0.00000000 ; 0x40600000 0x41a00000 0x000000 0x000000
        dcl t0.rg
        dcl t1.rgb
        dcl t2
        dcl t3
        dcl t4.rg
        dcl_2d s0
        dcl_2d s1
        dcl_2d s2
        dcl_2d s4
        dcl_2d s5
        add r0.w, c14.x, c14.x
        rcp r0.x, r0.w
        mul r1.xy, t4, c0
        mul r2.xy, r1, c14.z
        mul r3.xy, t0, c13.x
        texld r2, r2, s5
        texld r3, r3, s4
        mov r0.w, c13.w
        mad r0.y, c8.x, r0.w, r2.y
        mad r0.z, r0.y, r0.x, c0.w
        mul r0.x, r0.x, r0.y
        frc r0.y, r0.z
        add r0.z, r0.z, -r0.y
        mad r0.z, r0.z, c2.x, c2.y
        mad r2.xy, r1, c13.y, r0.z
        mul r1.xy, r1, c13.y
        mad r3.xy, r3, c0.z, c0.y
        mul r4.xy, r3, c14.y
        mad r2.xy, r0.y, r4, r2
        frc r0.y, r0.x
        add r0.x, r0.x, -r0.y
        mad r1.xy, r0.x, c2.x, r1
        mad r1.xy, r0.y, r4, r1
        rcp r0.x, t3.w
        mul r4.xy, r0.x, t2.wzyx
        texld r2, r2, s2
        texld r1, r1, s2
        texld r4, r4, s0
        mad r0.y, r0.y, c0.z, c0.y
        abs r0.y, r0.y
        lrp r5.xy, r0.y, r2, r1
        mad r1.xy, r5, c0.z, c0.y
        mul r0.y, r3.y, r3.y
        mad r0.y, r3.x, r3.x, r0.y
        add r0.y, r0.y, c2.z
        mul r0.y, r0.y, c13.z
        mul r1.xy, r1, r0.y
        dp2add_sat r1.w, r1, -r1, c0.x
        rsq r1.w, r1.w
        rcp r1.z, r1.w
        dp3 r2.xw, c22, r1
        dp3 r2.yz, c23, r1
        mul r0, r0.x, t2
        mul r3, r4.w, c5
        mad r0, r2, r3, r0
        mov r2.xy, r0.wzyx
        texld r0, r0, s1
        texld r2, r2, s0
        add r0.w, r2.w, c2.w
        cmp r3.xz, r0.w, r2.wzyx, r4.wzyx
        cmp r3.w, r0.w, r2.z, r4.z
        cmp r3.y, r0.w, r2.x, r4.x
        mul_sat r0.w, r3.x, c3.x
        mad r2.xy, r3.yzxw, c1, -r3.yzxw
        mad r2.z, r3.w, c1.z, -r3.w
        mad r4.xy, r0.w, r2, r3.yzxw
        mad r4.z, r0.w, r2.z, r3.w
        lrp r2.xyz, r3.x, c6, r4
        nrm r4.xyz, t1
        dp3_sat r0.w, r4, r1
        add r0.w, -r0.w, c0.x
        mul r0.w, r0.w, r0.w
        mul r0.w, r0.w, r0.w
        add r2.w, r3.x, c2.w
        add_sat r1.x, r3.x, r3.x
        mul_sat r2.w, r2.w, c3.y
        mul r0.w, r0.w, r2.w
        mul r0.xyz, r0, c4
        mul r0.xyz, r1.x, r0
        mad r0.xyz, r0.w, r0, r2
        add r1.xy, -t4, c11
        dp2add r0.w, r1, r1, c3.z
        rsq r0.w, r0.w
        rcp r0.w, r0.w
        mad_sat r0.w, r0.w, c12.w, c12.x
        min r1.x, r0.w, c12.z
        mul r0.w, r1.x, r1.x
        lrp r1.xyz, r0.w, c29, r0
        mov r1.w, c0.x
        mov oC0, r1
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0x3f800000 0xbf800000
//         0x40000000 0x3f000000 0x05000051 0xa00f0002
//         0x3e9f3b64 0x3f000000 0x3dcccccd 0xbd4ccccd
//         0x05000051 0xa00f0003 0x40600000 0x41a00000
//         0x00000000 0x00000000 0x0200001f 0x80000000
//         0xb0030000 0x0200001f 0x80000000 0xb0070001
//         0x0200001f 0x80000000 0xb00f0002 0x0200001f
//         0x80000000 0xb00f0003 0x0200001f 0x80000000
//         0xb0030004 0x0200001f 0x90000000 0xa00f0800
//         0x0200001f 0x90000000 0xa00f0801 0x0200001f
//         0x90000000 0xa00f0802 0x0200001f 0x90000000
//         0xa00f0804 0x0200001f 0x90000000 0xa00f0805
//         0x03000002 0x80080000 0xa000000e 0xa000000e
//         0x02000006 0x80010000 0x80ff0000 0x03000005
//         0x80030001 0xb0e40004 0xa0e40000 0x03000005
//         0x80030002 0x80e40001 0xa0aa000e 0x03000005
//         0x80030003 0xb0e40000 0xa000000d 0x03000042
//         0x800f0002 0x80e40002 0xa0e40805 0x03000042
//         0x800f0003 0x80e40003 0xa0e40804 0x02000001
//         0x80080000 0xa0ff000d 0x04000004 0x80020000
//         0xa0000008 0x80ff0000 0x80550002 0x04000004
//         0x80040000 0x80550000 0x80000000 0xa0ff0000
//         0x03000005 0x80010000 0x80000000 0x80550000
//         0x02000013 0x80020000 0x80aa0000 0x03000002
//         0x80040000 0x80aa0000 0x81550000 0x04000004
//         0x80040000 0x80aa0000 0xa0000002 0xa0550002
//         0x04000004 0x80030002 0x80e40001 0xa055000d
//         0x80aa0000 0x03000005 0x80030001 0x80e40001
//         0xa055000d 0x04000004 0x80030003 0x80e40003
//         0xa0aa0000 0xa0550000 0x03000005 0x80030004
//         0x80e40003 0xa055000e 0x04000004 0x80030002
//         0x80550000 0x80e40004 0x80e40002 0x02000013
//         0x80020000 0x80000000 0x03000002 0x80010000
//         0x80000000 0x81550000 0x04000004 0x80030001
//         0x80000000 0xa0000002 0x80e40001 0x04000004
//         0x80030001 0x80550000 0x80e40004 0x80e40001
//         0x02000006 0x80010000 0xb0ff0003 0x03000005
//         0x80030004 0x80000000 0xb01b0002 0x03000042
//         0x800f0002 0x80e40002 0xa0e40802 0x03000042
//         0x800f0001 0x80e40001 0xa0e40802 0x03000042
//         0x800f0004 0x80e40004 0xa0e40800 0x04000004
//         0x80020000 0x80550000 0xa0aa0000 0xa0550000
//         0x02000023 0x80020000 0x80550000 0x04000012
//         0x80030005 0x80550000 0x80e40002 0x80e40001
//         0x04000004 0x80030001 0x80e40005 0xa0aa0000
//         0xa0550000 0x03000005 0x80020000 0x80550003
//         0x80550003 0x04000004 0x80020000 0x80000003
//         0x80000003 0x80550000 0x03000002 0x80020000
//         0x80550000 0xa0aa0002 0x03000005 0x80020000
//         0x80550000 0xa0aa000d 0x03000005 0x80030001
//         0x80e40001 0x80550000 0x0400005a 0x80180001
//         0x80e40001 0x81e40001 0xa0000000 0x02000007
//         0x80080001 0x80ff0001 0x02000006 0x80040001
//         0x80ff0001 0x03000008 0x80090002 0xa0e40016
//         0x80e40001 0x03000008 0x80060002 0xa0e40017
//         0x80e40001 0x03000005 0x800f0000 0x80000000
//         0xb0e40002 0x03000005 0x800f0003 0x80ff0004
//         0xa0e40005 0x04000004 0x800f0000 0x80e40002
//         0x80e40003 0x80e40000 0x02000001 0x80030002
//         0x801b0000 0x03000042 0x800f0000 0x80e40000
//         0xa0e40801 0x03000042 0x800f0002 0x80e40002
//         0xa0e40800 0x03000002 0x80080000 0x80ff0002
//         0xa0ff0002 0x04000058 0x80050003 0x80ff0000
//         0x801b0002 0x801b0004 0x04000058 0x80080003
//         0x80ff0000 0x80aa0002 0x80aa0004 0x04000058
//         0x80020003 0x80ff0000 0x80000002 0x80000004
//         0x03000005 0x80180000 0x80000003 0xa0000003
//         0x04000004 0x80030002 0x80c90003 0xa0e40001
//         0x81c90003 0x04000004 0x80040002 0x80ff0003
//         0xa0aa0001 0x81ff0003 0x04000004 0x80030004
//         0x80ff0000 0x80e40002 0x80c90003 0x04000004
//         0x80040004 0x80ff0000 0x80aa0002 0x80ff0003
//         0x04000012 0x80070002 0x80000003 0xa0e40006
//         0x80e40004 0x02000024 0x80070004 0xb0e40001
//         0x03000008 0x80180000 0x80e40004 0x80e40001
//         0x03000002 0x80080000 0x81ff0000 0xa0000000
//         0x03000005 0x80080000 0x80ff0000 0x80ff0000
//         0x03000005 0x80080000 0x80ff0000 0x80ff0000
//         0x03000002 0x80080002 0x80000003 0xa0ff0002
//         0x03000002 0x80110001 0x80000003 0x80000003
//         0x03000005 0x80180002 0x80ff0002 0xa0550003
//         0x03000005 0x80080000 0x80ff0000 0x80ff0002
//         0x03000005 0x80070000 0x80e40000 0xa0e40004
//         0x03000005 0x80070000 0x80000001 0x80e40000
//         0x04000004 0x80070000 0x80ff0000 0x80e40000
//         0x80e40002 0x03000002 0x80030001 0xb1e40004
//         0xa0e4000b 0x0400005a 0x80080000 0x80e40001
//         0x80e40001 0xa0aa0003 0x02000007 0x80080000
//         0x80ff0000 0x02000006 0x80080000 0x80ff0000
//         0x04000004 0x80180000 0x80ff0000 0xa0ff000c
//         0xa000000c 0x0300000a 0x80010001 0x80ff0000
//         0xa0aa000c 0x03000005 0x80080000 0x80000001
//         0x80000001 0x04000012 0x80070001 0x80ff0000
//         0xa0e4001d 0x80e40000 0x02000001 0x80080001
//         0xa0000000 0x02000001 0x800f0800 0x80e40001
//         0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f000000 // 0.50000000
//         COP_CONST[1]: 0x3bb60b61 // 0.00555556
//         COP_CONST[2]: 0x3f229c0f // 0.63519377
//         COP_CONST[3]: 0xbf45b8e8 // -0.77235270
//         COP_CONST[4]: 0x3ea1aba8 // 0.31576276
//         COP_CONST[5]: 0x3e7cb941 // 0.24680044
//         COP_CONST[6]: 0x3c42a9ee // 0.01188133
//         COP_CONST[7]: 0x39e9a3d2 // 0.00044563
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][254] = 0x3ea1aba8 // 0.31576276
//         # USER FLOAT CONST: c[6][255] = 0x3e7cb941 // 0.24680044
//         # USER FLOAT CONST: c[6][256] = 0x3c42a9ee // 0.01188133
//         # USER FLOAT CONST: c[6][266] = 0x4006005f // 2.09377265
//         # USER FLOAT CONST: c[6][267] = 0x4006005f // 2.09377265
//         # USER FLOAT CONST: c[6][268] = 0x4006005f // 2.09377265
//         # USER FLOAT CONST: c[6][270] = 0x3ecccccd // 0.40000001
//         # USER FLOAT CONST: c[6][271] = 0x3ecccccd // 0.40000001
//         # USER FLOAT CONST: c[6][272] = 0x3e800000 // 0.25000000
//         # USER FLOAT CONST: c[6][273] = 0x3e800000 // 0.25000000
//         # USER FLOAT CONST: c[6][274] = 0x3b33070b // 0.00273174
//         # USER FLOAT CONST: c[6][275] = 0x3b0b3e5e // 0.00212469
//         # USER FLOAT CONST: c[6][276] = 0x399f22b4 // 0.00030353
//         # USER FLOAT CONST: c[6][282] = 0x4123e46e // 10.24326897
//         # USER FLOAT CONST: c[6][294] = 0x449d1285 // 1256.57873535
//         # USER FLOAT CONST: c[6][295] = 0x44856c5f // 1067.38659668
//         # USER FLOAT CONST: c[6][298] = 0xbde9a3d2 // -0.11408199
//         # USER FLOAT CONST: c[6][300] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][301] = 0x39e9a3d2 // 0.00044563
//         # USER FLOAT CONST: c[6][302] = 0x40000000 // 2.00000000
//         # USER FLOAT CONST: c[6][303] = 0x3bb60b61 // 0.00555556
//         # USER FLOAT CONST: c[6][304] = 0x3ecccccd // 0.40000001
//         # USER FLOAT CONST: c[6][305] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][306] = 0x3f000000 // 0.50000000
//         # USER FLOAT CONST: c[6][307] = 0x3df5c28f // 0.12000000
//         # USER FLOAT CONST: c[6][308] = 0x3a1d4952 // 0.00060000
//         # USER FLOAT CONST: c[6][338] = 0xbf45b8e8 // -0.77235270
//         # USER FLOAT CONST: c[6][339] = 0x3f229c0f // 0.63519377
//         # USER FLOAT CONST: c[6][340] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][342] = 0xbf229c0f // -0.63519377
//         # USER FLOAT CONST: c[6][343] = 0xbf45b8e8 // -0.77235270
//         # USER FLOAT CONST: c[6][344] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][366] = 0x3e6495e1 // 0.22322799
//         # USER FLOAT CONST: c[6][367] = 0x3e362864 // 0.17788845
//         # USER FLOAT CONST: c[6][368] = 0x3e168e53 // 0.14702730
//         ## USER CONST histogram
//         ##    ~c1.x -> c[6][254] = 100.00%@0.31576276
//         ##    ~c1.y -> c[6][255] = 100.00%@0.24680044
//         ##    ~c1.z -> c[6][256] = 100.00%@0.01188133
//         ##    ~c4.x -> c[6][266] = 100.00%@2.09377265
//         ##    ~c4.y -> c[6][267] = 100.00%@2.09377265
//         ##    ~c4.z -> c[6][268] = 100.00%@2.09377265
//         ##    ~c5.x -> c[6][270] = 100.00%@0.40000001
//         ##    ~c5.y -> c[6][271] = 100.00%@0.40000001
//         ##    ~c5.z -> c[6][272] = 100.00%@0.25000000
//         ##    ~c5.w -> c[6][273] = 100.00%@0.25000000
//         ##    ~c6.x -> c[6][274] = 100.00%@0.00273174
//         ##    ~c6.y -> c[6][275] = 100.00%@0.00212469
//         ##    ~c6.z -> c[6][276] = 100.00%@0.00030353
//         ##    ~c8.x -> c[6][282] = 100.00%@10.24326897
//         ##    ~c11.x -> c[6][294] = 100.00%@1256.57873535
//         ##    ~c11.y -> c[6][295] = 100.00%@1067.38659668
//         ##    ~c12.x -> c[6][298] = 100.00%@-0.11408199
//         ##    ~c12.z -> c[6][300] = 100.00%@1.00000000
//         ##    ~c12.w -> c[6][301] = 100.00%@0.00044563
//         ##    ~c13.x -> c[6][302] = 100.00%@2.00000000
//         ##    ~c13.y -> c[6][303] = 100.00%@0.00555556
//         ##    ~c13.z -> c[6][304] = 100.00%@0.40000001
//         ##    ~c13.w -> c[6][305] = 100.00%@1.00000000
//         ##    ~c14.x -> c[6][306] = 100.00%@0.50000000
//         ##    ~c14.y -> c[6][307] = 100.00%@0.12000000
//         ##    ~c14.z -> c[6][308] = 100.00%@0.00060000
//         ##    ~c22.x -> c[6][338] = 100.00%@-0.77235270
//         ##    ~c22.y -> c[6][339] = 100.00%@0.63519377
//         ##    ~c22.z -> c[6][340] = 100.00%@0.00000000
//         ##    ~c23.x -> c[6][342] = 100.00%@-0.63519377
//         ##    ~c23.y -> c[6][343] = 100.00%@-0.77235270
//         ##    ~c23.z -> c[6][344] = 100.00%@0.00000000
//         ##    ~c29.x -> c[6][366] = 100.00%@0.22322799
//         ##    ~c29.y -> c[6][367] = 100.00%@0.17788845
//         ##    ~c29.z -> c[6][368] = 100.00%@0.14702730
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1920x1200x0,1/0,A8R8G8B8,1,0,0), 0x00000000,0x00000069
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,A8R8G8B8,1,0,0), 0x00000000,0x00000069
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,5/0,DXT1_A1R5G5B5,0,0,0), 0x3752f7b5,0x00000069
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,5/0,DXT1_A1R5G5B5,0,0,0), 0x3df400c2,0x00000069
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,5/0,DXT1_A1R5G5B5,0,0,0), 0x169d4513,0x00000069
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x10 0 4 "COL1")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r45, c[6][264].x
//         movr r45.x, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r45.y, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r45.z, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r45.w, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r44, c[6][264].x
//         movr r44.x, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r44.y, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r44.z, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r44.w, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         addr r5.w, r45, r44
//         rcpr r5.x, r5.w
//         mulr r6.xy, v8, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000)
//         movr r44, c[6][264].z
//         movr r44.x, constant(0.00060000, 0.00060000, 0.00060000, 0.00060000).x
//         movr r44.y, constant(0.00060000, 0.00060000, 0.00060000, 0.00060000).x
//         movr r44.z, constant(0.00060000, 0.00060000, 0.00060000, 0.00060000).x
//         movr r44.w, constant(0.00060000, 0.00060000, 0.00060000, 0.00060000).x
//         mulr r7.xy, r6, r44
//         movr r44, c[6][263].x
//         movr r44.x, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.y, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.z, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.w, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         mulr r8.xy, v4, r44
//         texr r7, r7.xyyy, #5, #5, 2D
//         texr r8, r8.xyyy, #4, #4, 2D
//         movr r45, c[6][263].w
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r5.w, r45
//         movr r45, c[6][258].x
//         movr r45.x, constant(10.24326897, 10.24326897, 10.24326897, 10.24326897).x
//         movr r45.y, constant(10.24326897, 10.24326897, 10.24326897, 10.24326897).x
//         movr r45.z, constant(10.24326897, 10.24326897, 10.24326897, 10.24326897).x
//         movr r45.w, constant(10.24326897, 10.24326897, 10.24326897, 10.24326897).x
//         madr r5.y, r45, r5.w, r7.y
//         madr r5.z, r5.y, r5.x, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).w
//         mulr r5.x, r5.x, r5.y
//         frcr r5.y, r5.z
//         flrr r5.z, r5.z
//         madr r5.z, r5.z, constant(0.31099999, 0.50000000, 0.10000000, -0.05000000).x, constant(0.31099999, 0.50000000, 0.10000000, -0.05000000).y
//         movr r44, c[6][263].y
//         movr r44.x, constant(0.00555556, 0.00555556, 0.00555556, 0.00555556).x
//         movr r44.y, constant(0.00555556, 0.00555556, 0.00555556, 0.00555556).x
//         movr r44.z, constant(0.00555556, 0.00555556, 0.00555556, 0.00555556).x
//         movr r44.w, constant(0.00555556, 0.00555556, 0.00555556, 0.00555556).x
//         madr r7.xy, r6, r44, r5.z
//         movr r44, c[6][263].y
//         movr r44.x, constant(0.00555556, 0.00555556, 0.00555556, 0.00555556).x
//         movr r44.y, constant(0.00555556, 0.00555556, 0.00555556, 0.00555556).x
//         movr r44.z, constant(0.00555556, 0.00555556, 0.00555556, 0.00555556).x
//         movr r44.w, constant(0.00555556, 0.00555556, 0.00555556, 0.00555556).x
//         mulr r6.xy, r6, r44
//         madr r8.xy, r8, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).z, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).y
//         movr r44, c[6][264].y
//         movr r44.x, constant(0.12000000, 0.12000000, 0.12000000, 0.12000000).x
//         movr r44.y, constant(0.12000000, 0.12000000, 0.12000000, 0.12000000).x
//         movr r44.z, constant(0.12000000, 0.12000000, 0.12000000, 0.12000000).x
//         movr r44.w, constant(0.12000000, 0.12000000, 0.12000000, 0.12000000).x
//         mulr r9.xy, r8, r44
//         madr r7.xy, r5.y, r9, r7
//         frcr r5.y, r5.x
//         flrr r5.x, r5.x
//         madr r6.xy, r5.x, constant(0.31099999, 0.50000000, 0.10000000, -0.05000000).x, r6
//         madr r6.xy, r5.y, r9, r6
//         rcpr r5.x, v7.w
//         mulr r9.xy, r5.x, v6.wzyx
//         texr r7, r7.xyzz, #2, #2, 2D
//         texr r6, r6.xyyy, #2, #2, 2D
//         texr r9, r9.xyyy, #0, #0, 2D
//         madr r5.y, r5.y, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).z, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).y
//         movr r5.y, |r5.y|
//         lrpr r10.xy, r5.y, r7, r6
//         madr r6.xy, r10, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).z, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).y
//         mulr r5.y, r8.y, r8.y
//         madr r5.y, r8.x, r8.x, r5.y
//         addr r5.y, r5.y, constant(0.31099999, 0.50000000, 0.10000000, -0.05000000).z
//         movr r44, c[6][263].z
//         movr r44.x, constant(0.40000001, 0.40000001, 0.40000001, 0.40000001).x
//         movr r44.y, constant(0.40000001, 0.40000001, 0.40000001, 0.40000001).x
//         movr r44.z, constant(0.40000001, 0.40000001, 0.40000001, 0.40000001).x
//         movr r44.w, constant(0.40000001, 0.40000001, 0.40000001, 0.40000001).x
//         mulr r5.y, r5.y, r44
//         mulr r6.xy, r6, r5.y
//         dp2ar_sat r6.w, r6, -r6, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).x
//         rsqr r6.w, |r6.w|
//         rcpr r6.z, r6.w
//         movr r45, c[6][272]
//         movr r45.x, constant(-0.77235270, -0.77235270, -0.77235270, -0.77235270).x
//         movr r45.y, constant(0.63519377, 0.63519377, 0.63519377, 0.63519377).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         dp3r r7.xw, r45, r6
//         movr r45, c[6][273]
//         movr r45.x, constant(-0.63519377, -0.63519377, -0.63519377, -0.63519377).x
//         movr r45.y, constant(-0.77235270, -0.77235270, -0.77235270, -0.77235270).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         dp3r r7.yz, r45, r6
//         mulr r5, r5.x, v6
//         movr r44, c[6][255]
//         movr r44.x, constant(0.40000001, 0.40000001, 0.40000001, 0.40000001).x
//         movr r44.y, constant(0.40000001, 0.40000001, 0.40000001, 0.40000001).x
//         movr r44.z, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r44.w, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         mulr r8, r9.w, r44
//         madr r5, r7, r8, r5
//         movr r7.xy, r5.wzyx
//         texr r5, r5.xyzz, #1, #1, 2D
//         texr r7, r7.xyzz, #0, #0, 2D
//         addr r5.w, r7.w, constant(0.31099999, 0.50000000, 0.10000000, -0.05000000).w
//         cmpr r8.xz, r5.w, r7.wzyx, r9.wzyx
//         cmpr r8.w, r5.w, r7.z, r9.z
//         cmpr r8.y, r5.w, r7.x, r9.x
//         mulr_sat r5.w, r8.x, constant(3.50000000, 20.00000000, 0.00000000, 0.00000000).x
//         movr r44, c[6][251]
//         movr r44.x, constant(0.31576276, 0.31576276, 0.31576276, 0.31576276).x
//         movr r44.y, constant(0.24680044, 0.24680044, 0.24680044, 0.24680044).x
//         movr r44.z, constant(0.01188133, 0.01188133, 0.01188133, 0.01188133).x
//         madr r7.xy, r8.yzxw, r44, -r8.yzxw
//         movr r44, c[6][251].z
//         movr r44.x, constant(0.01188133, 0.01188133, 0.01188133, 0.01188133).x
//         movr r44.y, constant(0.01188133, 0.01188133, 0.01188133, 0.01188133).x
//         movr r44.z, constant(0.01188133, 0.01188133, 0.01188133, 0.01188133).x
//         movr r44.w, constant(0.01188133, 0.01188133, 0.01188133, 0.01188133).x
//         madr r7.z, r8.w, r44, -r8.w
//         madr r9.xy, r5.w, r7, r8.yzxw
//         madr r9.z, r5.w, r7.z, r8.w
//         movr r44, c[6][256]
//         movr r44.x, constant(0.00273174, 0.00273174, 0.00273174, 0.00273174).x
//         movr r44.y, constant(0.00212469, 0.00212469, 0.00212469, 0.00212469).x
//         movr r44.z, constant(0.00030353, 0.00030353, 0.00030353, 0.00030353).x
//         lrpr r7.xyz, r8.x, r44, r9
//         nrmr r9.xyz, v5
//         dp3r_sat r5.w, r9, r6
//         addr r5.w, -r5.w, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).x
//         mulr r5.w, r5.w, r5.w
//         mulr r5.w, r5.w, r5.w
//         addr r7.w, r8.x, constant(0.31099999, 0.50000000, 0.10000000, -0.05000000).w
//         addr_sat r6.x, r8.x, r8.x
//         mulr_sat r7.w, r7.w, constant(3.50000000, 20.00000000, 0.00000000, 0.00000000).y
//         mulr r5.w, r5.w, r7.w
//         movr r44, c[6][254]
//         movr r44.x, constant(2.09377265, 2.09377265, 2.09377265, 2.09377265).x
//         movr r44.y, constant(2.09377265, 2.09377265, 2.09377265, 2.09377265).x
//         movr r44.z, constant(2.09377265, 2.09377265, 2.09377265, 2.09377265).x
//         mulr r5.xyz, r5, r44
//         mulr r5.xyz, r6.x, r5
//         madr r5.xyz, r5.w, r5, r7
//         movr r44, c[6][261]
//         movr r44.x, constant(1256.57873535, 1256.57873535, 1256.57873535, 1256.57873535).x
//         movr r44.y, constant(1067.38659668, 1067.38659668, 1067.38659668, 1067.38659668).x
//         addr r6.xy, -v8, r44
//         dp2ar r5.w, r6, r6, constant(3.50000000, 20.00000000, 0.00000000, 0.00000000).z
//         rsqr r5.w, |r5.w|
//         rcpr r5.w, r5.w
//         movr r44, c[6][262].w
//         movr r44.x, constant(0.00044563, 0.00044563, 0.00044563, 0.00044563).x
//         movr r44.y, constant(0.00044563, 0.00044563, 0.00044563, 0.00044563).x
//         movr r44.z, constant(0.00044563, 0.00044563, 0.00044563, 0.00044563).x
//         movr r44.w, constant(0.00044563, 0.00044563, 0.00044563, 0.00044563).x
//         movr r43, c[6][262].x
//         movr r43.x, constant(-0.11408199, -0.11408199, -0.11408199, -0.11408199).x
//         movr r43.y, constant(-0.11408199, -0.11408199, -0.11408199, -0.11408199).x
//         movr r43.z, constant(-0.11408199, -0.11408199, -0.11408199, -0.11408199).x
//         movr r43.w, constant(-0.11408199, -0.11408199, -0.11408199, -0.11408199).x
//         madr_sat r5.w, r5.w, r44, r43
//         movr r44, c[6][262].z
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         minr r6.x, r5.w, r44
//         mulr r5.w, r6.x, r6.x
//         movr r44, c[6][279]
//         movr r44.x, constant(0.22322799, 0.22322799, 0.22322799, 0.22322799).x
//         movr r44.y, constant(0.17788845, 0.17788845, 0.17788845, 0.17788845).x
//         movr r44.z, constant(0.14702730, 0.14702730, 0.14702730, 0.14702730).x
//         lrpr r6.xyz, r5.w, r44, r5
//         movr r6.w, constant(1.00000000, -1.00000000, 2.00000000, 0.50000000).x
//         movr r0, r6
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R7, 0x3e9f3b64;           # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R12, R0;                # [  2][000010]
//     	MOV32I R14, -0x40800000;         # [  3][000018]
//     	IPA.SC R13, a[0x344], R12;       # [  4][000020] FIXED_FNC_TEXTURE_4_T
//     	F2F.FTZ R2, -R13;                # [  5][000028]
//     	IPA.SC R3, a[0x340], R12;        # [  6][000030] TEX4
//     	FMUL32I.FMZ R1, R2, 0.0006;      # [  7][000038]
//     	FMUL32I.FMZ R0, R3, 0.0006;      # [  8][000040]
//     	FMUL32I.FMZ R6, R2, 0x3bb60b61;  # [  9][000048]
//     	FMUL32I.FMZ R9, R3, 0x3bb60b61;  # [ 10][000050]
//     	TEX.P R4, R0, 0x5, 0x5, 2D, 0x2; # [ 11][000058]
//     	FADD32I.FTZ R13, -R13, 0x44856c5f; # [ 12][000060]
//     	IPA.SC R1, a[0x304], R12;        # [ 13][000068] FIXED_FNC_TEXTURE_0_T
//     	FMUL.FMZ R1, R1, 2;              # [ 14][000070]
//     	IPA.SC R0, a[0x300], R12;        # [ 15][000078] TEX0
//     	FMUL.FMZ R0, R0, 2;              # [ 16][000080]
//     	IPA.SC R19, a[0x320], R12;       # [ 17][000088] TEX2
//     	TEX.P R0, R0, 0x4, 0x4, 2D, 0x3; # [ 18][000090]
//     	FADD32I.FTZ R5, R4, 0x4123e46e;  # [ 19][000098]
//     	FADD.FTZ R8, R5, 0.5;            # [ 20][0000a0]
//     	F2F.FTZ.FLOOR R4, R5;            # [ 21][0000a8]
//     	F2F.FTZ.FLOOR R10, R8;           # [ 22][0000b0]
//     	FFMA.FMZ R6, R4, R7, R6;         # [ 23][0000b8]
//     	FFMA.FMZ R11, R10, R7, c[0x9][0x0]; # [ 24][0000c0]
//     	FADD.FTZ R8, R8, -R10;           # [ 25][0000c8]
//     	FFMA.FMZ R16, R2, c[0x9][0x4], R11; # [ 26][0000d0]
//     	FFMA.FMZ R15, R1, 2, R14;        # [ 27][0000d8]
//     	FFMA.FMZ R17, R0, 2, R14;        # [ 28][0000e0]
//     	FMUL32I.FMZ R10, R15, 0.12;      # [ 29][0000e8]
//     	FFMA.FMZ R0, R3, c[0x9][0x4], R11; # [ 30][0000f0]
//     	FMUL32I.FMZ R2, R17, 0.12;       # [ 31][0000f8]
//     	FFMA.FMZ R1, R8, R10, R16;       # [ 32][000100]
//     	FFMA.FMZ R11, R4, R7, R9;        # [ 33][000108]
//     	FFMA.FMZ R0, R8, R2, R0;         # [ 34][000110]
//     	FADD.FTZ R16, R5, -R4;           # [ 35][000118]
//     	FMUL.FMZ R18, R15, R15;          # [ 36][000120]
//     	TEX.T R8, R0, 0x2, 0x2, 2D, 0x3; # [ 37][000128]
//     	FFMA.FMZ R1, R16, R10, R6;       # [ 38][000130]
//     	FFMA.FMZ R0, R16, R2, R11;       # [ 39][000138]
//     	FFMA.FMZ R15, R16, 2, R14;       # [ 40][000140]
//     	TEX.P R10, R0, 0x2, 0x2, 2D, 0x3; # [ 41][000148]
//     	FFMA.FMZ R16, R17, R17, R18;     # [ 42][000150]
//     	IPA.SC R0, a[0x33c], R12;        # [ 43][000158] FIXED_FNC_TEXTURE_3_Q
//     	MUFU.RCP R2, R0;                 # [ 44][000160]
//     	IPA.SC R1, a[0x328], R12;        # [ 45][000168] FIXED_FNC_TEXTURE_2_R
//     	FMUL.FMZ R1, R2, R1;             # [ 46][000170]
//     	IPA.SC R4, a[0x32c], R12;        # [ 47][000178] FIXED_FNC_TEXTURE_2_Q
//     	FMUL.FMZ R0, R2, R4;             # [ 48][000180]
//     	F2F R15, |R15|;                  # [ 49][000188]
//     	FADD32I.FTZ R16, R16, 0.1;       # [ 50][000190]
//     	TEX.P R4, R0, 0x0, 0x0, 2D;      # [ 51][000198]
//     	FADD.FTZ R8, R8, -R10;           # [ 52][0001a0]
//     	FADD.FTZ R17, R9, -R11;          # [ 53][0001a8]
//     	FFMA.FTZ R8, R15, R8, R10;       # [ 54][0001b0]
//     	FMUL32I.FMZ R9, R16, 0.4;        # [ 55][0001b8]
//     	FFMA.FTZ R10, R15, R17, R11;     # [ 56][0001c0]
//     	FFMA.FMZ R8, R8, 2, R14;         # [ 57][0001c8]
//     	FFMA.FMZ R10, R10, 2, R14;       # [ 58][0001d0]
//     	FMUL.FMZ R15, R8, R9;            # [ 59][0001d8]
//     	FMUL.FMZ R16, R10, R9;           # [ 60][0001e0]
//     	FMUL32I.FTZ R8, R15, 0xbf45b8e8; # [ 61][0001e8]
//     	FMUL32I.FTZ R9, R15, 0xbf229c0f; # [ 62][0001f0]
//     	FFMA.FTZ R17, R16, c[0x9][0x8], R8; # [ 63][0001f8]
//     	FFMA.FTZ R18, R16, c[0x9][0xc], R9; # [ 64][000200]
//     	FMUL.FMZ R8, R7, 0.25;           # [ 65][000208]
//     	FFMA.FMZ R0, R17, R8, R0;        # [ 66][000210]
//     	FFMA.FMZ R1, R18, R8, R1;        # [ 67][000218]
//     	FADD32I.FTZ R3, -R3, 0x449d1285; # [ 68][000220]
//     	TEX.NODEP.T R8, R0, 0x0, 0x0, 2D; # [ 69][000228]
//     	FFMA.FTZ R14, R15, -R15, -R14;   # [ 70][000230]
//     	IPA.SC R0, a[0x324], R12;        # [ 71][000238] FIXED_FNC_TEXTURE_2_T
//     	FMUL.FMZ R1, R2, R0;             # [ 72][000240]
//     	FMUL.FTZ R3, R3, R3;             # [ 73][000248]
//     	FMUL32I.FMZ R0, R7, 0.4;         # [ 74][000250]
//     	FMUL.FMZ R2, R2, R19;            # [ 75][000258]
//     	FFMA.FMZ R1, R18, R0, R1;        # [ 76][000260]
//     	FFMA.FTZ R3, R13, R13, R3;       # [ 77][000268]
//     	FFMA.FMZ R0, R17, R0, R2;        # [ 78][000270]
//     	IPA.SC R18, a[0x314], R12;       # [ 79][000278] FIXED_FNC_TEXTURE_1_T
//     	FFMA.FTZ.SAT R13, R16, -R16, R14; # [ 80][000280]
//     	TEX.NODEP.P R0, R0, 0x1, 0x1, 2D, 0x7; # [ 81][000288]
//     	MUFU.RSQ R3, |R3|;               # [ 82][000290]
//     	IPA.SC R17, a[0x310], R12;       # [ 83][000298] TEX1
//     	FMUL.FTZ R19, R17, R17;          # [ 84][0002a0]
//     	IPA.SC R12, a[0x318], R12;       # [ 85][0002a8] FIXED_FNC_TEXTURE_1_R
//     	FFMA.FTZ R19, R18, R18, R19;     # [ 86][0002b0]
//     	MUFU.RCP R3, R3;                 # [ 87][0002b8]
//     	FFMA.FTZ R19, R12, R12, R19;     # [ 88][0002c0]
//     	MUFU.RSQ R19, R19;               # [ 89][0002c8]
//     	FMUL.FTZ R17, R17, R19;          # [ 90][0002d0]
//     	FMUL.FTZ R12, R12, R19;          # [ 91][0002d8]
//     	FMUL.FTZ R14, R17, R15;          # [ 92][0002e0]
//     	FMUL.FTZ R15, R18, R19;          # [ 93][0002e8]
//     	MUFU.RSQ R17, |R13|;             # [ 94][0002f0]
//     	FFMA.FTZ R13, R15, R16, R14;     # [ 95][0002f8]
//     	MUFU.RCP R14, R17;               # [ 96][000300]
//     	MOV32I R15, -0x42165c2e;         # [ 97][000308]
//     	FFMA.FTZ.SAT R13, R12, R14, R13; # [ 98][000310]
//     	FADD.FTZ R13, -R13, 1;           # [ 99][000318]
//     	FFMA.FMZ.SAT R12, R3, c[0x9][0x1c], R15; # [100][000320]
//     	FMUL.FMZ R13, R13, R13;          # [101][000328]
//     	FMNMX.FTZ R12, R12, 1, PT;       # [102][000330]
//     	FMUL.FMZ R13, R13, R13;          # [103][000338]
//     	FMUL.FMZ R12, R12, R12;          # [104][000340]
//     	MOV32I R3, 0x3f800000;           # [105][000348]
//     	FADD32I.FTZ R14, R11, -0.05;     # [106][000350]
//     	FCMP.GE R9, R9, R5, R14;         # [107][000358]
//     	FCMP.GE R5, R11, R7, R14;        # [108][000360]
//     	FCMP.GE R7, R8, R4, R14;         # [109][000368]
//     	FFMA.FMZ R11, R9, c[0x9][0x14], -R9; # [110][000370]
//     	FCMP.GE R14, R10, R6, R14;       # [111][000378]
//     	FMUL.FMZ.SAT R8, R5, 3.5;        # [112][000380]
//     	FADD32I.FTZ R6, R5, -0.05;       # [113][000388]
//     	FFMA.FMZ R10, R7, c[0x9][0x10], -R7; # [114][000390]
//     	FFMA.FMZ R15, R14, c[0x9][0x18], -R14; # [115][000398]
//     	FFMA.FMZ R9, R8, R11, R9;        # [116][0003a0]
//     	FMUL.FMZ.SAT R6, R6, 20;         # [117][0003a8]
//     	FFMA.FMZ R7, R8, R10, R7;        # [118][0003b0]
//     	FFMA.FMZ R11, R8, R15, R14;      # [119][0003b8]
//     	FADD.FTZ.SAT R4, R5, R5;         # [120][0003c0]
//     	FMUL.FMZ R6, R13, R6;            # [121][0003c8]
//     	FADD32I.FTZ R8, -R7, 0x3b33070b; # [122][0003d0]
//     	FMUL32I.FMZ R0, R0, 0x4006005f;  # [123][0003d8]
//     	FADD32I.FTZ R10, -R9, 0x3b0b3e5e; # [124][0003e0]
//     	FMUL32I.FMZ R1, R1, 0x4006005f;  # [125][0003e8]
//     	FADD32I.FTZ R13, -R11, 0.000303527; # [126][0003f0]
//     	FMUL32I.FMZ R2, R2, 0x4006005f;  # [127][0003f8]
//     	FFMA.FTZ R7, R5, R8, R7;         # [128][000400]
//     	FMUL.FMZ R0, R4, R0;             # [129][000408]
//     	FFMA.FTZ R8, R5, R10, R9;        # [130][000410]
//     	FMUL.FMZ R1, R4, R1;             # [131][000418]
//     	FFMA.FTZ R5, R5, R13, R11;       # [132][000420]
//     	FMUL.FMZ R4, R4, R2;             # [133][000428]
//     	FFMA.FMZ R0, R6, R0, R7;         # [134][000430]
//     	FFMA.FMZ R2, R6, R1, R8;         # [135][000438]
//     	FFMA.FMZ R5, R6, R4, R5;         # [136][000440]
//     	FADD32I.FTZ R1, -R0, 0.223228;   # [137][000448]
//     	FADD32I.FTZ R4, -R2, 0x3e362864; # [138][000450]
//     	FADD32I.FTZ R6, -R5, 0x3e168e53; # [139][000458]
//     	FFMA.FTZ R0, R12, R1, R0;        # [140][000460]
//     	FFMA.FTZ R1, R12, R4, R2;        # [141][000468]
//     	FFMA.FTZ R2, R12, R6, R5;        # [142][000470]
//     	EXIT;                            # [143][000478]
//     	END
//     END_SECTION
// END_SHADER
// 
