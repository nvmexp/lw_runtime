// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 10.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0xbf77c651623c0863
//         FINGERPRINTER_HASH: 0x91978f6aacba6007
//         UCODE_HASH: 0xb7907f84795b8658
//         POOL: APP
//         VERSION: 20
//         # USES: 105
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 1
//         # Tex / Tld vectorized: 1
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 24
//         TEXTURE_SLOTS: 3
//         SAMPLER_SLOTS: 1
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_4_0
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_output o0.xyzw
        dcl_constantbuffer cb0[8].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_temps 7 
        mul r0.x, v0.x, cb0[0].x
        mul r0.y, v0.y, cb0[1].y
        sample_l r0.xyzw, r0.xyxx, t2.xyzw, s0, l(0)
        mad r0.x, r0.x, cb0[7].z, cb0[7].w
        div r0.x, -cb0[6].w, r0.x
        min r0.x, r0.x, l(1000000.00000000)
        mul r0.yz, v0.xxyx, l(0.00000000, 0.25000000, 0.25000000, 0.00000000)
        round_ne r1.xyzw, r0.yzyz
        add r2.xyzw, r1.xyzw, l(-0.50000000, -0.50000000, 0.50000000, -0.50000000)
        add r1.xyzw, r1.xyzw, l(-0.50000000, 0.50000000, 0.50000000, 0.50000000)
        resinfo r3.xyzw, l(0), t0.xyzw
        div r0.yz, r2.xxyx, r3.xxyx
        sample_l r4.xyzw, r0.yzyy, t1.xyzw, s0, l(0)
        min r0.w, r4.x, l(1000000.00000000)
        add r0.w, -r0.x, r0.w
        lt r3.z, |r0.w|, l(1000000.00000000)
        movc r3.w, r3.z, l(0), l(0x49742400)
        and r3.z, r3.z, l(0x3f800000)
        mad r0.w, r3.z, |r0.w|, r3.w
        mul r3.zw, r0.yyyz, r3.zzzz
        sample_l r4.xyzw, r0.yzyy, t0.xyzw, s0, l(0)
        div r0.yz, r2.zzwz, r3.xxyx
        mad r2.xy, v0.xyxx, l(0.25000000, 0.25000000, 0.00000000, 0.00000000), -r2.xyxx
        sample_l r5.xyzw, r0.yzyy, t1.xyzw, s0, l(0)
        min r2.z, r5.x, l(1000000.00000000)
        add r2.z, -r0.x, r2.z
        lt r2.w, |r2.z|, r0.w
        movc r5.x, r2.w, l(0), l(0x3f800000)
        and r2.w, r2.w, l(0x3f800000)
        mul r3.zw, r3.zzzw, r5.xxxx
        mul r0.w, r0.w, r5.x
        mad r3.zw, r2.wwww, r0.yyyz, r3.zzzw
        mad r0.w, r2.w, |r2.z|, r0.w
        sample_l r5.xyzw, r0.yzyy, t0.xyzw, s0, l(0)
        div r0.yz, r1.xxyx, r3.xxyx
        div r1.xy, r1.zwzz, r3.xyxx
        sample_l r6.xyzw, r0.yzyy, t1.xyzw, s0, l(0)
        min r1.z, r6.x, l(1000000.00000000)
        add r1.z, -r0.x, r1.z
        lt r1.w, |r1.z|, r0.w
        movc r2.z, r1.w, l(0), l(0x3f800000)
        and r1.w, r1.w, l(0x3f800000)
        mul r3.xy, r3.zwzz, r2.zzzz
        mul r0.w, r0.w, r2.z
        mad r2.zw, r1.wwww, r0.yyyz, r3.xxxy
        mad r0.w, r1.w, |r1.z|, r0.w
        sample_l r3.xyzw, r0.yzyy, t0.xyzw, s0, l(0)
        sample_l r6.xyzw, r1.xyxx, t1.xyzw, s0, l(0)
        min r0.y, r6.x, l(1000000.00000000)
        add r0.x, -r0.x, r0.y
        lt r0.x, |r0.x|, r0.w
        movc r0.y, r0.x, l(0), l(0x3f800000)
        and r0.x, r0.x, l(0x3f800000)
        mul r0.yz, r2.zzwz, r0.yyyy
        mad r0.xy, r0.xxxx, r1.xyxx, r0.yzyy
        sample_l r1.xyzw, r1.xyxx, t0.xyzw, s0, l(0)
        sample_l r0.xyzw, r0.xyxx, t0.xyzw, s0, l(0)
        add r0.x, -r5.w, r0.w
        add r0.y, -r0.w, l(1.00000000)
        mad r0.y, r0.y, l(1.95000005), l(0.05000000)
        div r0.x, |r0.x|, r0.y
        add r0.x, -r0.x, l(1.00000000)
        mul_sat r0.x, r0.x, l(3.00000000)
        add r2.zw, -r2.yyyx, l(0.00000000, 0.00000000, 1.00000000, 1.00000000)
        mad r6.xy, r2.xyxx, r2.zwzz, l(0.02000000, 0.02000000, 0.00000000, 0.00000000)
        mad r0.z, r2.w, r2.z, l(0.02000000)
        mad r2.x, r2.x, r2.y, l(0.02000000)
        mul r0.x, r0.x, r6.x
        mul r5.xyzw, r5.xyzw, r0.xxxx
        add r2.y, -r4.w, r0.w
        div r2.y, |r2.y|, r0.y
        add r2.y, -r2.y, l(1.00000000)
        mul_sat r2.y, r2.y, l(3.00000000)
        mul r2.z, r0.z, r2.y
        mad r0.x, r0.z, r2.y, r0.x
        mad r4.xyzw, r2.zzzz, r4.xyzw, r5.xyzw
        add r0.z, -r3.w, r0.w
        add r0.w, -r1.w, r0.w
        div r0.yz, |r0.wwzw|, r0.yyyy
        add r0.z, -r0.z, l(1.00000000)
        mul_sat r0.z, r0.z, l(3.00000000)
        mul r0.w, r6.y, r0.z
        mad r0.x, r6.y, r0.z, r0.x
        mad r3.xyzw, r0.wwww, r3.xyzw, r4.xyzw
        add r0.y, -r0.y, l(1.00000000)
        mul_sat r0.y, r0.y, l(3.00000000)
        mul r0.z, r2.x, r0.y
        mad r0.x, r2.x, r0.y, r0.x
        mad r1.xyzw, r0.zzzz, r1.xyzw, r3.xyzw
        div o0.xyzw, r1.xyzw, r0.xxxx
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0xbe7ffd3e // -0.249989
//         COP_CONST[1]: 0x49742400 // 1000000.000000
//         COP_CONST[2]: 0x3ff9999a // 1.950000
//         COP_CONST[3]: 0x3f800000 // 1.000000
//         COP_CONST[4]: 0x3ca3d70a // 0.020000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][0] = 0x3a4ccccd // 0.000781
//         USER_CONST: c[0][5] = 0x3a800000 // 0.000977
//         USER_CONST: c[0][27] = 0xbf800000 // -1.000000
//         USER_CONST: c[0][30] = 0xbe7ffd3e // -0.249989
//         USER_CONST: c[0][31] = 0x3e800000 // 0.250000
//     END_SECTION
//     # Exelwtion Time: 41.878ms [2.119 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x3 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x4 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 0 "ATTR00" 32)
//         (0x0 0 2 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 4 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 0
//         bCanReorderHalf: 0
//         bCanReorderFloat: 0
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//                 indexableRanges: 1 :  (null 0 0 0)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr (r) r4109, (r) c[0][0].x  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  // 143361832 SHD
//         movr (r) r4109.y, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  // 143361832 SHD
//         movr (r) r4109.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  // 143361656 SHD
//         movr (r) r4109.w, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  // 143361656 SHD
//         mulr (r) r9.x, (r) v0.x, (r) r4109  // 143360760 SHD
//         movr (r) r4109, (r) c[0][1].y  // 143360760 SHD
//         movr (r) r4109.x, (r) constant(0.00097656, 0.00000000, 0.00000000, 0.00000000).x  // 143360392 SHD
//         movr (r) r4109.y, (r) constant(0.00097656, 0.00000000, 0.00000000, 0.00000000).x  // 143360392 SHD
//         movr (r) r4109.z, (r) constant(0.00097656, 0.00000000, 0.00000000, 0.00000000).x  // 143356936 SHDOPT
//         movr (r) r4109.w, (r) constant(0.00097656, 0.00000000, 0.00000000, 0.00000000).x  // 143356936 SHDOPT
//         mulr (r) r9.y, (r) v0.y, (r) r4109  // 143356936 SHDOPT
//         txgr (r) r4105, (r) r9.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #2, #0, 2D, LOD  // 143356936 SHDOPT
//         movr (r) r9, (r) r4105  // 143359384 SHDOPT
//         movr (r) r4109, (r) c[0][7].z  // 143359384 SHDOPT
//         movr (r) r4109.x, (r) constant(-0.24998948, 0.00000000, 0.00000000, 0.00000000).x  // 143358920 SHD
//         movr (r) r4109.y, (r) constant(-0.24998948, 0.00000000, 0.00000000, 0.00000000).x  // 143358920 SHD
//         movr (r) r4109.z, (r) constant(-0.24998948, 0.00000000, 0.00000000, 0.00000000).x  // 143358456 SHD
//         movr (r) r4109.w, (r) constant(-0.24998948, 0.00000000, 0.00000000, 0.00000000).x  // 143358456 SHD
//         movr (r) r4110, (r) c[0][7].w  // 143357784 SHD
//         movr (r) r4110.x, (r) constant(0.25000000, 0.00000000, 0.00000000, 0.00000000).x  // 143357784 SHD
//         movr (r) r4110.y, (r) constant(0.25000000, 0.00000000, 0.00000000, 0.00000000).x  // 143357496 SHD
//         movr (r) r4110.z, (r) constant(0.25000000, 0.00000000, 0.00000000, 0.00000000).x  // 143357496 SHD
//         movr (r) r4110.w, (r) constant(0.25000000, 0.00000000, 0.00000000, 0.00000000).x  // 143356824 
//         madr (r) r9.x, (r) r9.x, (r) r4109, (r) r4110  // 143356824 
//         movr (r) r4108, (r) -c[0][6].w  // 143356376 SHD
//         movr (r) r4108.x, (r) -constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143356376 SHD
//         movr (r) r4108.y, (r) -constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143355976 SHD
//         movr (r) r4108.z, (r) -constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143355976 SHD
//         movr (r) r4108.w, (r) -constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143355512 SHD
//         divr (r) r4105.x, (r) r4108, (r) r9.x  // 143355512 SHD
//         movr (r) r9.x, (r) r4105  // 143355160 SHD
//         minr (r) r9.x, (r) r9.x, (r) constant(1000000.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143355160 SHD
//         mulr (r) r9.yz, (r) v0.xxyx, (r) constant(0.00000000, 0.25000000, 0.25000000, 0.00000000)  // 143354664 SHDOPT
//         roundr (r) r10, (r) r9.yzyz  // 143354664 SHDOPT
//         addr (r) r11, (r) r10, (r) constant(-0.50000000, -0.50000000, 0.50000000, -0.50000000)  // 143354280 SHD
//         addr (r) r10, (r) r10, (r) constant(-0.50000000, 0.50000000, 0.50000000, 0.50000000)  // 143354280 SHD
//         txgr (r) r4105, (r) r4106, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #0, #0, 2D, QSIZE  // 143353800 
//         movu32 (u32) r4107, (u32) r4105  // 143353800 
//         movu32 (u32) r4107.z, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (r) r12, (u32) r4107  //   0 SHD
//         divr (r) r4105.y, (r) r11.x, (r) r12.x  // 143352936 SHD
//         divr (r) r4105.z, (r) r11.y, (r) r12.y  // 143352936 SHD
//         movr (r) r9.yz, (r) r4105  // 143352472 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #1, #0, 2D, LOD  // 143352472 SHD
//         movr (r) r13, (r) r4105  // 143352008 SHD
//         minr (r) r9.w, (r) r13.x, (r) constant(1000000.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143352008 SHD
//         addr (r) r9.w, (r) -r9.x, (r) r9.w  // 143351544 
//         set_ltr.c (s32) r12.z, (r) |r9.w|, (r) constant(1000000.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143351544 
//         movs32.c (s32) hc, (s32) r12.z  // 143351080 SHD
//         movr (r) r4105, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143351080 SHD
//         movr (r) r4105(EQ), (r) constant(1000000.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         andu32 (u32) r12.z, (u32) r12.z, (u32) constant(1065353216, 0, 0, 0).x  // 143350152 SHD
//         madr (r) r9.w, (r) r12.z, (r) |r9.w|, (r) r12.w  // 143350152 SHD
//         mulr (r) r12.zw, (r) r9.yyyz, (r) r12.z  //   0 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #0, #0, 2D, LOD  //   0 SHD
//         movr (r) r13, (r) r4105  // 143349224 SHD
//         divr (r) r4105.y, (r) r11.z, (r) r12.x  // 143349224 SHD
//         divr (r) r4105.z, (r) r11.w, (r) r12.y  // 143348728 SHD
//         movr (r) r9.yz, (r) r4105  // 143348728 SHD
//         madr (r) r11.xy, (r) v0.xyxx, (r) constant(0.25000000, 0.25000000, 0.00000000, 0.00000000), (r) -r11.xyxx  //   0 
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #1, #0, 2D, LOD  //   0 
//         movr (r) r14, (r) r4105  // 143347832 SHD
//         minr (r) r11.z, (r) r14.x, (r) constant(1000000.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143347832 SHD
//         addr (r) r11.z, (r) -r9.x, (r) r11.z  // 143347368 SHD
//         set_ltr.c (s32) r11.w, (r) |r11.z|, (r) r9.w  // 143347368 SHD
//         movs32.c (s32) hc, (s32) r11.w  // 143346904 SHD
//         movr (r) r4105, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143346904 SHD
//         movr (r) r4105(EQ), (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143346440 SHD
//         movr (r) r14.x, (r) r4105  // 143346440 SHD
//         andu32 (u32) r11.w, (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  // 143345976 
//         mulr (r) r12.zw, (r) r12.zzzw, (r) r14.x  // 143345976 
//         mulr (r) r9.w, (r) r9.w, (r) r14.x  // 143345144 SHD
//         madr (r) r12.zw, (r) r11.w, (r) r9.yyyz, (r) r12.zzzw  // 143345144 SHD
//         madr (r) r9.w, (r) r11.w, (r) |r11.z|, (r) r9.w  // 143345032 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #0, #0, 2D, LOD  // 143345032 SHD
//         movr (r) r14, (r) r4105  // 143344584 SHD
//         divr (r) r4105.y, (r) r10.x, (r) r12.x  // 143344584 SHD
//         divr (r) r4105.z, (r) r10.y, (r) r12.y  // 143343976 SHD
//         movr (r) r9.yz, (r) r4105  // 143343976 SHD
//         divr (r) r4105.x, (r) r10.z, (r) r12.x  // 143343576 SHD
//         divr (r) r4105.y, (r) r10.w, (r) r12.y  // 143343576 SHD
//         movr (r) r10.xy, (r) r4105  // 143343064 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #1, #0, 2D, LOD  // 143343064 SHD
//         movr (r) r15, (r) r4105  // 143342200 
//         minr (r) r10.z, (r) r15.x, (r) constant(1000000.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143342200 
//         addr (r) r10.z, (r) -r9.x, (r) r10.z  // 143342264 SHD
//         set_ltr.c (s32) r10.w, (r) |r10.z|, (r) r9.w  // 143342264 SHD
//         movs32.c (s32) hc, (s32) r10.w  // 143341800 SHD
//         movr (r) r4105, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143341800 SHD
//         movr (r) r4105(EQ), (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143341336 SHD
//         movr (r) r11.z, (r) r4105  // 143341336 SHD
//         andu32 (u32) r10.w, (u32) r10.w, (u32) constant(1065353216, 0, 0, 0).x  // 143340872 SHD
//         mulr (r) r12.xy, (r) r12.zwzz, (r) r11.z  // 143340872 SHD
//         mulr (r) r9.w, (r) r9.w, (r) r11.z  // 219152360 
//         madr (r) r11.zw, (r) r10.w, (r) r9.yyyz, (r) r12.xxxy  // 219152360 
//         madr (r) r9.w, (r) r10.w, (r) |r10.z|, (r) r9.w  //   0 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #0, #0, 2D, LOD  //   0 SHD
//         movr (r) r12, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r10.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #1, #0, 2D, LOD  //   0 SHD
//         movr (r) r15, (r) r4105  //   0 SHD
//         minr (r) r9.y, (r) r15.x, (r) constant(1000000.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r9.x, (r) -r9.x, (r) r9.y  //   0 SHD
//         set_ltr.c (s32) r9.x, (r) |r9.x|, (r) r9.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r9.x  //   0 SHD
//         movr (r) r4105, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4105(EQ), (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r9.y, (r) r4105  //   0 SHD
//         andu32 (u32) r9.x, (u32) r9.x, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         mulr (r) r9.yz, (r) r11.zzwz, (r) r9.y  //   0 SHD
//         madr (r) r9.xy, (r) r9.x, (r) r10.xyxx, (r) r9.yzyy  // 1179653 SHD
//         txgr (r) r4105, (r) r10.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #0, #0, 2D, LOD  // 1179653 SHD
//         movr (r) r10, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r9.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #0, #0, 2D, LOD  //   0 SHD
//         movr (r) r9, (r) r4105  //   0 SHD
//         addr (r) r9.x, (r) -r14.w, (r) r9.w  // 108981320 SHD
//         addr (r) r9.y, (r) -r9.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1028443341, 0, 0, 0).x  //   0 SHD
//         madr (r) r9.y, (r) r9.y, (r) constant(1.95000005, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         divr (r) r4105.x, (r) |r9.x|, (r) r9.y  //   0 SHD
//         movr (r) r9.x, (r) r4105  //   0 SHD
//         addr (r) r9.x, (r) -r9.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r9.x, (r) r9.x, (r) constant(3.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r11.zw, (r) -r11.yyyx, (r) constant(0.00000000, 0.00000000, 1.00000000, 1.00000000)  //   0 SHD
//         madr (r) r15.xy, (r) r11.xyxx, (r) r11.zwzz, (r) constant(0.02000000, 0.02000000, 0.00000000, 0.00000000)  //   0 SHD
//         madr (r) r9.z, (r) r11.w, (r) r11.z, (r) constant(0.02000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r11.x, (r) r11.x, (r) r11.y, (r) constant(0.02000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r9.x, (r) r9.x, (r) r15.x  //   0 SHD
//         mulr (r) r14, (r) r14, (r) r9.x  // 143367912 
//         addr (r) r11.y, (r) -r13.w, (r) r9.w  // 143367912 
//         divr (r) r4105.y, (r) |r11.y|, (r) r9.y  // 143367592 SHD
//         movr (r) r11.y, (r) r4105  // 143367592 SHD
//         addr (r) r11.y, (r) -r11.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143366968 SHD
//         mulr_sat (r) r11.y, (r) r11.y, (r) constant(3.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.z, (r) r9.z, (r) r11.y  //   0 SHD
//         madr (r) r9.x, (r) r9.z, (r) r11.y, (r) r9.x  // 143345288 SHD
//         madr (r) r13, (r) r11.z, (r) r13, (r) r14  // 143345288 SHD
//         addr (r) r9.z, (r) -r12.w, (r) r9.w  // 143361912 SHD
//         addr (r) r9.w, (r) -r10.w, (r) r9.w  // 143361912 SHD
//         divr (r) r4105.y, (r) |r9.w|, (r) r9.y  // 143365736 SHDOPT
//         divr (r) r4105.z, (r) |r9.z|, (r) r9.y  // 143365736 SHDOPT
//         movr (r) r9.yz, (r) r4105  // 143362088 SHDOPT
//         addr (r) r9.z, (r) -r9.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143362088 SHDOPT
//         mulr_sat (r) r9.z, (r) r9.z, (r) constant(3.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143365000 SHDOPT
//         mulr (r) r9.w, (r) r15.y, (r) r9.z  //   0 SHD
//         madr (r) r9.x, (r) r15.y, (r) r9.z, (r) r9.x  //   0 SHD
//         madr (r) r12, (r) r9.w, (r) r12, (r) r13  //   0 SHD
//         addr (r) r9.y, (r) -r9.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r9.y, (r) r9.y, (r) constant(3.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 143364424 SHD
//         mulr (r) r9.z, (r) r11.x, (r) r9.y  // 143364424 SHD
//         madr (r) r9.x, (r) r11.x, (r) r9.y, (r) r9.x  // 143363896 SHD
//         madr (r) r10, (r) r9.z, (r) r10, (r) r12  // 143363896 SHD
//         divr (r) r4105.x, (r) r10.x, (r) r9.x  //   0 SHD
//         divr (r) r4105.y, (r) r10.y, (r) r9.x  // 143363560 SHD
//         divr (r) r4105.z, (r) r10.z, (r) r9.x  // 143363560 SHD
//         divr (r) r4105.w, (r) r10.w, (r) r9.x  // 143363016 SHD
//         movr (r) r0, (r) r4105  // 143363016 SHD
//         ret   // 143362568 
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][0] = 100.00%@0.00078125
//                 ~c[0][5] = 100.00%@0.00097656
//                 ~c[0][27] = 100.00%@-1.00000000
//                 ~c[0][30] = 100.00%@-0.24998948
//                 ~c[0][31] = 100.00%@0.25000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x140, height=0x100, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x1
//         100.00% width=0x140, height=0x100, mips=0x1, DXGI_FORMAT_R32_FLOAT
//         TEXTURE_SLOT 0x2
//         100.00% width=0x500, height=0x400, mips=0x1, DXGI_FORMAT_R32_FLOAT
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=-340282346638528860000000000000000000000.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=BORDER, addressV=BORDER, addressW=BORDER
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R13, 0x3e800000;          # [  0][000000]
//     	TXQ R6, RZ, TEX_HEADER_DIMENSION, 0x0, 0x0, 0x3; # [  1][000008]
//     	IPA.PASS R18, a[0x70];           # [  2][000010] POSITION_X
//     	FMUL.FTZ R0, R18, 0.25;          # [  3][000018]
//     	IPA.PASS R16, a[0x74];           # [  4][000020] POSITION_Y
//     	F2F.FTZ.ROUND R2, R0;            # [  5][000028]
//     	FMUL.FTZ R3, R16, 0.25;          # [  6][000030]
//     	FMUL.FTZ R1, R16, 0x3a800;       # [  7][000038]
//     	FADD.FTZ R5, R2, 0.5;            # [  8][000040]
//     	FADD.FTZ R17, R2, -0.5;          # [  9][000048]
//     	FMUL32I.FTZ R0, R18, 0.00078125; # [ 10][000050]
//     	F2F.FTZ.ROUND R3, R3;            # [ 11][000058]
//     	FADD.FTZ R19, R3, -0.5;          # [ 12][000060]
//     	TEX.LZ.P R8, R0, 0x2, 0x0, 2D, 0x1; # [ 13][000068]
//     	I2F.U32 R4, R6;                  # [ 14][000070]
//     	I2F.U32 R2, R7;                  # [ 15][000078]
//     	MUFU.RCP R4, R4;                 # [ 16][000080]
//     	MUFU.RCP R2, R2;                 # [ 17][000088]
//     	FMUL.FTZ R6, R5, R4;             # [ 18][000090]
//     	FADD.FTZ R0, R3, 0.5;            # [ 19][000098]
//     	FMUL.FTZ R4, R17, R4;            # [ 20][0000a0]
//     	FMUL.FTZ R5, R19, R2;            # [ 21][0000a8]
//     	MOV R7, R5;                      # [ 22][0000b0]
//     	TEX.LZ R10, R4, 0x1, 0x0, 2D, 0x1; # [ 23][0000b8]
//     	FMUL.FTZ R3, R0, R2;             # [ 24][0000c0]
//     	TEX.LZ.P R12, R6, 0x1, 0x0, 2D, 0x1; # [ 25][0000c8]
//     	MOV R2, R4;                      # [ 26][0000d0]
//     	MOV R0, R6;                      # [ 27][0000d8]
//     	MOV R1, R3;                      # [ 28][0000e0]
//     	TEX.LZ R11, R2, 0x1, 0x0, 2D, 0x1; # [ 29][0000e8]
//     	FFMA.FTZ R18, R18, 0.25, -R17;   # [ 30][0000f0]
//     	TEX.LZ.P R9, R0, 0x1, 0x0, 2D, 0x1; # [ 31][0000f8]
//     	FFMA.FTZ R8, R8, c[0x10][0x0], R13; # [ 32][000100]
//     	MUFU.RCP R8, R8;                 # [ 33][000108]
//     	FMNMX.FTZ R8, R8, c[0x10][0x4], PT; # [ 34][000110]
//     	FMNMX.FTZ R10, R10, c[0x10][0x4], PT; # [ 35][000118]
//     	FADD.FTZ R14, -R8, R10;          # [ 36][000120]
//     	MOV32I R10, 0x49742400;          # [ 37][000128]
//     	FSETP.LT.FTZ.AND P0, PT, |R14|, c[0x10][0x4], PT; # [ 38][000130]
//     	FSET.BF.LT.FTZ.AND R13, |R14|, c[0x10][0x4], PT; # [ 39][000138]
//     	F2F R14, |R14|;                  # [ 40][000140]
//     	SEL R15, R10, RZ, !P0;           # [ 41][000148]
//     	FMNMX.FTZ R12, R12, R10, PT;     # [ 42][000150]
//     	FFMA.FTZ R14, R13, R14, R15;     # [ 43][000158]
//     	FADD.FTZ R21, -R8, R12;          # [ 44][000160]
//     	FMUL.FTZ R15, R5, R13;           # [ 45][000168]
//     	FMUL.FTZ R13, R4, R13;           # [ 46][000170]
//     	FSET.BF.GEU.FTZ.AND R20, |R21|, R14, PT; # [ 47][000178]
//     	FSET.BF.LT.FTZ.AND R12, |R21|, R14, PT; # [ 48][000180]
//     	FMNMX.FTZ R11, R11, R10, PT;     # [ 49][000188]
//     	F2F R21, |R21|;                  # [ 50][000190]
//     	FMUL.FTZ R14, R14, R20;          # [ 51][000198]
//     	FMUL.FTZ R13, R13, R20;          # [ 52][0001a0]
//     	FMUL.FTZ R22, R15, R20;          # [ 53][0001a8]
//     	FADD.FTZ R20, -R8, R11;          # [ 54][0001b0]
//     	FFMA.FTZ R15, R12, R21, R14;     # [ 55][0001b8]
//     	FFMA.FTZ R14, R12, R6, R13;      # [ 56][0001c0]
//     	FFMA.FTZ R11, R12, R5, R22;      # [ 57][0001c8]
//     	FSET.BF.GEU.FTZ.AND R13, |R20|, R15, PT; # [ 58][0001d0]
//     	FSET.BF.LT.FTZ.AND R12, |R20|, R15, PT; # [ 59][0001d8]
//     	FMNMX.FTZ R9, R9, R10, PT;       # [ 60][0001e0]
//     	F2F R20, |R20|;                  # [ 61][0001e8]
//     	FMUL.FTZ R15, R15, R13;          # [ 62][0001f0]
//     	FMUL.FTZ R11, R11, R13;          # [ 63][0001f8]
//     	FADD.FTZ R8, -R8, R9;            # [ 64][000200]
//     	FFMA.FTZ R10, R12, R20, R15;     # [ 65][000208]
//     	FMUL.FTZ R9, R14, R13;           # [ 66][000210]
//     	MOV32I R22, 0x3d4ccccd;          # [ 67][000218]
//     	FFMA.FTZ R13, R12, R3, R11;      # [ 68][000220]
//     	FFMA.FTZ R9, R12, R4, R9;        # [ 69][000228]
//     	FSET.BF.GEU.FTZ.AND R11, |R8|, R10, PT; # [ 70][000230]
//     	FSET.BF.LT.FTZ.AND R8, |R8|, R10, PT; # [ 71][000238]
//     	FMUL.FTZ R12, R13, R11;          # [ 72][000240]
//     	FMUL.FTZ R10, R9, R11;           # [ 73][000248]
//     	FFMA.FTZ R9, R8, R3, R12;        # [ 74][000250]
//     	FFMA.FTZ R8, R8, R6, R10;        # [ 75][000258]
//     	TEX.LZ.NODEP R12, R6, 0x0, 0x0, 2D; # [ 76][000260]
//     	TEX.LZ.NODEP R20, R8, 0x0, 0x0, 2D, 0x8; # [ 77][000268]
//     	TEX.LZ.NODEP R8, R4, 0x0, 0x0, 2D; # [ 78][000270]
//     	TEX.LZ.NODEP R4, R2, 0x0, 0x0, 2D; # [ 79][000278]
//     	TEX.LZ.NODEP.P R0, R0, 0x0, 0x0, 2D; # [ 80][000280]
//     	FADD.FTZ R21, -R20, 1;           # [ 81][000288]
//     	FFMA.FTZ R23, R21, c[0x10][0x8], R22; # [ 82][000290]
//     	FADD.FTZ R22, -R15, R20;         # [ 83][000298]
//     	FFMA.FTZ R21, R16, 0.25, -R19;   # [ 84][0002a0]
//     	MUFU.RCP R16, R23;               # [ 85][0002a8]
//     	F2F R22, -|R22|;                 # [ 86][0002b0]
//     	FADD.FTZ R19, -R21, 1;           # [ 87][0002b8]
//     	FFMA.FTZ R22, R22, R16, c[0x10][0xc]; # [ 88][0002c0]
//     	FMUL.FTZ.SAT R23, R22, 3;        # [ 89][0002c8]
//     	FFMA.FTZ R17, R18, R19, c[0x10][0x10]; # [ 90][0002d0]
//     	FADD.FTZ R22, -R11, R20;         # [ 91][0002d8]
//     	FMUL.FTZ R17, R23, R17;          # [ 92][0002e0]
//     	F2F R22, -|R22|;                 # [ 93][0002e8]
//     	FADD.FTZ R23, -R18, 1;           # [ 94][0002f0]
//     	FFMA.FTZ R22, R22, R16, c[0x10][0xc]; # [ 95][0002f8]
//     	FFMA.FTZ R18, R18, R21, c[0x10][0x10]; # [ 96][000300]
//     	FFMA.FTZ R19, R23, R19, c[0x10][0x10]; # [ 97][000308]
//     	FFMA.FTZ R21, R21, R23, c[0x10][0x10]; # [ 98][000310]
//     	FMUL.FTZ.SAT R22, R22, 3;        # [ 99][000318]
//     	FMUL.FTZ R23, R13, R17;          # [100][000320]
//     	FMUL.FTZ R12, R12, R17;          # [101][000328]
//     	FMUL.FTZ R13, R19, R22;          # [102][000330]
//     	FMUL.FTZ R15, R15, R17;          # [103][000338]
//     	FFMA.FTZ R22, R19, R22, R17;     # [104][000340]
//     	FMUL.FTZ R14, R14, R17;          # [105][000348]
//     	FADD.FTZ R19, -R7, R20;          # [106][000350]
//     	FFMA.FTZ R11, R13, R11, R15;     # [107][000358]
//     	F2F R17, -|R19|;                 # [108][000360]
//     	FFMA.FTZ R10, R13, R10, R14;     # [109][000368]
//     	FADD.FTZ R14, -R3, R20;          # [110][000370]
//     	FFMA.FTZ R15, R17, R16, c[0x10][0xc]; # [111][000378]
//     	FFMA.FTZ R9, R13, R9, R23;       # [112][000380]
//     	FMUL.FTZ.SAT R15, R15, 3;        # [113][000388]
//     	F2F R14, -|R14|;                 # [114][000390]
//     	FFMA.FTZ R13, R13, R8, R12;      # [115][000398]
//     	FMUL.FTZ R8, R21, R15;           # [116][0003a0]
//     	FFMA.FTZ R12, R14, R16, c[0x10][0xc]; # [117][0003a8]
//     	FFMA.FTZ R13, R8, R4, R13;       # [118][0003b0]
//     	FFMA.FTZ R14, R21, R15, R22;     # [119][0003b8]
//     	FMUL.FTZ.SAT R4, R12, 3;         # [120][0003c0]
//     	FFMA.FTZ R9, R8, R5, R9;         # [121][0003c8]
//     	FFMA.FTZ R7, R8, R7, R11;        # [122][0003d0]
//     	FMUL.FTZ R5, R18, R4;            # [123][0003d8]
//     	FFMA.FTZ R4, R18, R4, R14;       # [124][0003e0]
//     	FFMA.FTZ R6, R8, R6, R10;        # [125][0003e8]
//     	FFMA.FTZ R7, R5, R3, R7;         # [126][0003f0]
//     	FFMA.FTZ R0, R5, R0, R13;        # [127][0003f8]
//     	MUFU.RCP R3, R4;                 # [128][000400]
//     	FFMA.FTZ R1, R5, R1, R9;         # [129][000408]
//     	FFMA.FTZ R2, R5, R2, R6;         # [130][000410]
//     	FMUL.FTZ R0, R0, R3;             # [131][000418]
//     	FMUL.FTZ R1, R1, R3;             # [132][000420]
//     	FMUL.FTZ R2, R2, R3;             # [133][000428]
//     	FMUL.FTZ R3, R7, R3;             # [134][000430]
//     	EXIT;                            # [135][000438]
//     	END
//     END_SECTION
// END_SHADER
// 
