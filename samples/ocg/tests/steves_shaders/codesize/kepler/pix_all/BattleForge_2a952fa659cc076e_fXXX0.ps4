// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x2a952fa659cc076e
//         FINGERPRINTER_HASH: 0xece5a4ed448dc07a
//         UCODE_HASH: 0xa5feeb2a7045856b
//         POOL: APP
//         VERSION: 20
//         # USES: 3603
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 0
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 25
//         TEXTURE_SLOTS: 7
//         SAMPLER_SLOTS: 7
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             GENERIC01_X          PERSPECTIVE
//             GENERIC01_Y          PERSPECTIVE
//             GENERIC01_Z          PERSPECTIVE
//             GENERIC01_W          PERSPECTIVE
//             GENERIC02_X          PERSPECTIVE
//             GENERIC02_Y          PERSPECTIVE
//             GENERIC02_Z          PERSPECTIVE
//             GENERIC03_X          PERSPECTIVE
//             GENERIC03_Y          PERSPECTIVE
//             GENERIC03_Z          PERSPECTIVE
//             GENERIC04_X          PERSPECTIVE
//             GENERIC04_Y          PERSPECTIVE
//             GENERIC04_Z          PERSPECTIVE
//             GENERIC05_X          PERSPECTIVE
//             GENERIC05_Y          PERSPECTIVE
//             GENERIC05_Z          PERSPECTIVE
//             GENERIC06_X          PERSPECTIVE
//             GENERIC06_Y          PERSPECTIVE
//             GENERIC06_Z          PERSPECTIVE
//             GENERIC07_X          PERSPECTIVE
//             GENERIC07_Y          PERSPECTIVE
//             GENERIC07_Z          PERSPECTIVE
//             GENERIC08_X          PERSPECTIVE
//             GENERIC08_Y          PERSPECTIVE
//             GENERIC08_Z          PERSPECTIVE
//             GENERIC09_X          PERSPECTIVE
//             GENERIC09_Y          PERSPECTIVE
//             GENERIC09_Z          PERSPECTIVE
//             GENERIC09_W          PERSPECTIVE
//             GENERIC10_X          PERSPECTIVE
//             GENERIC10_Y          PERSPECTIVE
//             GENERIC10_Z          PERSPECTIVE
//             GENERIC10_W          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//             TARGET01_R
//             TARGET01_G
//             TARGET01_B
//             TARGET01_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_4_0
        dcl_input_ps v1.xyzw, linear
        dcl_input_ps v2.xyz, linear
        dcl_input_ps v3.xyz, linear
        dcl_input_ps v4.xyz, linear
        dcl_input_ps v5.xyz, linear
        dcl_input_ps v6.xyz, linear
        dcl_input_ps v7.xyz, linear
        dcl_input_ps v8.xyz, linear
        dcl_input_ps v9.xyzw, linear
        dcl_input_ps v10.xyzw, linear
        dcl_output o0.xyzw
        dcl_output o1.xyzw
        dcl_constantbuffer cb0[18].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s1, mode_default
        dcl_sampler s2, mode_default
        dcl_sampler s3, mode_default
        dcl_sampler s4, mode_default
        dcl_sampler s5, mode_default
        dcl_sampler s6, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_resource t3, texture2d, (float, float, float, float)
        dcl_resource t4, texture2d, (float, float, float, float)
        dcl_resource t5, texture2d, (float, float, float, float)
        dcl_resource t6, texture2d, (float, float, float, float)
        dcl_temps 5 
        dp4 r0.x, v10.xyzw, cb0[0].xyzw
        dp4 r0.y, v10.xyzw, cb0[1].xyzw
        dp4 r0.z, v10.xyzw, cb0[3].xyzw
        div r0.xy, r0.xyxx, r0.zzzz
        sample r0.xyzw, r0.xyxx, t3.xyzw, s0
        dp4 r0.y, v10.xyzw, cb0[2].xyzw
        add r0.y, r0.y, -cb0[6].x
        add r0.x, r0.x, -r0.y
        mul r0.x, r0.x, cb0[6].w
        mul r0.x, r0.x, l(1.44269502)
        exp r0.x, r0.x
        min r0.x, r0.x, l(1.00000000)
        add r0.yz, v1.zzwz, -cb0[7].zzwz
        mul r0.yz, r0.yyzy, cb0[7].xxxx
        sample r1.xyzw, r0.yzyy, t4.xyzw, s2
        mad r0.yz, r1.xxyx, l(0.00000000, 2.00000000, 2.00000000, 0.00000000), l(0.00000000, -1.00000000, -1.00000000, 0.00000000)
        mad r0.yz, r0.yyzy, cb0[7].yyyy, v1.zzwz
        sample r1.xyzw, r0.yzyy, t5.xyzw, s1
        mad r0.xyz, r0.xxxx, r1.xxxx, cb0[8].xyzx
        min r0.xyz, r0.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
        mul r0.xyz, r0.xyzx, cb0[17].xyzx
        dp3 r0.w, v8.xyzx, v8.xyzx
        rsq r0.w, r0.w
        dp3 r1.x, v5.xyzx, v5.xyzx
        rsq r1.x, r1.x
        mul r1.yzw, r1.xxxx, v5.xxyz
        mad r2.xyz, v5.xyzx, r1.xxxx, cb0[16].xyzx
        mad r1.xyz, v8.xyzx, r0.wwww, r1.yzwy
        dp3 r0.w, r1.xyzx, r1.xyzx
        rsq r0.w, r0.w
        mul r1.xyz, r1.xyzx, r0.wwww
        sample r3.xyzw, v1.xyxx, t1.xyzw, s5
        mad r3.xyz, r3.xyzx, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), l(-1.00000000, -1.00000000, -1.00000000, 0.00000000)
        mul r4.xyz, r3.yyyy, v3.xyzx
        mad r3.xyw, r3.xxxx, v2.xyxz, r4.xyxz
        mad r3.xyz, r3.zzzz, v4.xyzx, r3.xywx
        dp3 r0.w, r3.xyzx, r3.xyzx
        rsq r0.w, r0.w
        mul r3.xyw, r3.xyxz, r0.wwww
        mov o1.xyzw, r3.zzzz
        dp3_sat r1.y, r3.xywx, r1.xyzx
        dp3 r0.w, r2.xyzx, r2.xyzx
        rsq r0.w, r0.w
        mul r2.xyz, r2.xyzx, r0.wwww
        dp3_sat r1.x, r3.xywx, r2.xyzx
        dp3_sat r0.w, r3.xywx, cb0[16].xyzx
        log r1.xy, r1.xyxx
        sample r2.xyzw, v1.xyxx, t0.xyzw, s6
        mul r1.z, r2.x, l(8.00000000)
        exp r1.z, r1.z
        mul r1.xy, r1.xyxx, r1.zzzz
        exp r1.xy, r1.xyxx
        mul r1.xy, r1.zzzz, r1.xyxx
        mul r1.xy, r1.xyxx, cb0[15].wwww
        mul r1.z, r2.x, r2.x
        mul r1.xy, r1.xyxx, r1.zzzz
        mul r1.xy, r1.xyxx, l(0.50000000, 0.50000000, 0.00000000, 0.00000000)
        sample r3.xyzw, v1.xyxx, t2.xyzw, s4
        mad r4.xyz, r3.xyzx, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), -r0.xyzx
        mad r2.xyz, r2.yyyy, r4.xyzx, r0.xyzx
        mad r1.xzw, r2.xxyz, r1.xxxx, r3.xxyz
        mad r2.xyz, r2.xyzx, r1.yyyy, r3.xyzx
        mul r2.xyz, r2.xyzx, v7.xyzx
        mul r0.xyz, r0.xyzx, r1.xzwx
        mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
        mad r0.xyz, v6.xyzx, r3.xyzx, r0.xyzx
        mad r0.xyz, r2.wwww, r3.xyzx, r0.xyzx
        mad r1.xyzw, cb0[9].xyzw, r3.wwww, cb0[10].xyzw
        add r1.xyzw, r2.wwww, r1.xyzw
        mad r0.xyz, r0.xyzx, cb0[5].xxxx, -cb0[4].xyzx
        mad r2.xy, v10.xzxx, cb0[13].xyxx, cb0[13].zwzz
        sample r2.xyzw, r2.xyxx, t6.xyzw, s3
        add r0.w, -r2.x, r2.y
        mad r0.w, cb0[14].x, r0.w, r2.x
        mad r0.xyz, r0.wwww, r0.xyzx, cb0[4].xyzx
        add r2.xyz, -r0.xyzx, v9.xyzx
        mad r2.w, cb0[12].w, r0.w, cb0[11].w
        add r3.x, -v9.w, l(1.00000000)
        mul r2.w, r2.w, r3.x
        mad r2.xyz, r2.wwww, r2.xyzx, r0.xyzx
        mov r2.w, l(0x3f800000)
        dp4 r0.x, r2.xyzw, r1.xyzw
        mov o0.xyz, r2.xyzx
        mul o0.w, r0.w, r0.x
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0xbb73641e // -0.003714
//         COP_CONST[1]: 0x3bb5c313 // 0.005547
//         COP_CONST[2]: 0xbe28b34e // -0.164746
//         COP_CONST[3]: 0x3b27d315 // 0.002561
//         COP_CONST[4]: 0x3b4876b0 // 0.003059
//         COP_CONST[5]: 0x3f6ac660 // 0.917089
//         COP_CONST[6]: 0xbad9cee9 // -0.001662
//         COP_CONST[7]: 0x3b22a831 // 0.002482
//         COP_CONST[8]: 0x3ef5472a // 0.479059
//         COP_CONST[9]: 0xbad01002 // -0.001587
//         COP_CONST[10]: 0xbaafcc1f // -0.001341
//         COP_CONST[11]: 0x3fd5a848 // 1.669198
//         COP_CONST[12]: 0x3c360b61 // 0.011111
//         COP_CONST[13]: 0x3e4ccccd // 0.200000
//         COP_CONST[14]: 0x3f2f4aea // 0.684737
//         COP_CONST[15]: 0x3f0e6cde // 0.556349
//         COP_CONST[16]: 0x3ef10701 // 0.470757
//         COP_CONST[17]: 0x3dcccccd // 0.100000
//         COP_CONST[18]: 0x3e333333 // 0.175000
//         COP_CONST[19]: 0x3d008081 // 0.031373
//         COP_CONST[20]: 0x3b36db6e // 0.002790
//         COP_CONST[21]: 0x3f0f0780 // 0.558708
//         COP_CONST[22]: 0x391121b3 // 0.000138
//         COP_CONST[23]: 0x3c722355 // 0.014779
//         COP_CONST[24]: 0x3d53e6fa // 0.051734
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][0] = 0xba50ab86 // -0.000796
//         USER_CONST: c[0][1] = 0xbb73641e // -0.003714
//         USER_CONST: c[0][2] = 0x3bb5c313 // 0.005547
//         USER_CONST: c[0][3] = 0xbe28b34e // -0.164746
//         USER_CONST: c[0][4] = 0xbb89168e // -0.004184
//         USER_CONST: c[0][5] = 0x3b27d315 // 0.002561
//         USER_CONST: c[0][6] = 0x3b4876b0 // 0.003059
//         USER_CONST: c[0][7] = 0x3f6ac660 // 0.917089
//         USER_CONST: c[0][8] = 0xbafff748 // -0.001953
//         USER_CONST: c[0][9] = 0xbad01002 // -0.001587
//         USER_CONST: c[0][10] = 0xbaafcc1f // -0.001341
//         USER_CONST: c[0][11] = 0x3fd5a848 // 1.669198
//         USER_CONST: c[0][12] = 0xb9babc98 // -0.000356
//         USER_CONST: c[0][13] = 0xbad9cee9 // -0.001662
//         USER_CONST: c[0][14] = 0x3b22a831 // 0.002482
//         USER_CONST: c[0][15] = 0x3ef5472a // 0.479059
//         USER_CONST: c[0][16] = 0x391121b3 // 0.000138
//         USER_CONST: c[0][17] = 0x3c722355 // 0.014779
//         USER_CONST: c[0][18] = 0x3d53e6fa // 0.051734
//         USER_CONST: c[0][20] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][24] = 0x00000000 // 0.000000
//         USER_CONST: c[0][27] = 0x445b2a3a // 876.659790
//         USER_CONST: c[0][28] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][29] = 0x3c360b61 // 0.011111
//         USER_CONST: c[0][30] = 0x3de3d1c4 // 0.111240
//         USER_CONST: c[0][31] = 0x3de3d1c4 // 0.111240
//         USER_CONST: c[0][32] = 0x3e4ccccd // 0.200000
//         USER_CONST: c[0][33] = 0x3e4ccccd // 0.200000
//         USER_CONST: c[0][34] = 0x3e4ccccd // 0.200000
//         USER_CONST: c[0][36] = 0x3e000000 // 0.125000
//         USER_CONST: c[0][37] = 0x3e333333 // 0.175000
//         USER_CONST: c[0][38] = 0x3dcccccd // 0.100000
//         USER_CONST: c[0][39] = 0x3d008081 // 0.031373
//         USER_CONST: c[0][40] = 0xbd800000 // -0.062500
//         USER_CONST: c[0][41] = 0xbdb33333 // -0.087500
//         USER_CONST: c[0][42] = 0xbd4ccccd // -0.050000
//         USER_CONST: c[0][43] = 0x00000000 // 0.000000
//         USER_CONST: c[0][47] = 0x3f000000 // 0.500000
//         USER_CONST: c[0][51] = 0x3f000000 // 0.500000
//         USER_CONST: c[0][52] = 0x3b36db6e // 0.002790
//         USER_CONST: c[0][53] = 0x3b36db6e // 0.002790
//         USER_CONST: c[0][54] = 0x3b000000 // 0.001953
//         USER_CONST: c[0][55] = 0x3b000000 // 0.001953
//         USER_CONST: c[0][56] = 0x3f0f0780 // 0.558708
//         USER_CONST: c[0][63] = 0x3fc00000 // 1.500000
//         USER_CONST: c[0][64] = 0x3f2f4aea // 0.684737
//         USER_CONST: c[0][65] = 0x3f0e6cde // 0.556349
//         USER_CONST: c[0][66] = 0x3ef10701 // 0.470757
//         USER_CONST: c[0][68] = 0x3fb33333 // 1.400000
//         USER_CONST: c[0][69] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][70] = 0x3f4ccccd // 0.800000
//     END_SECTION
//     # Exelwtion Time: 53.827ms [2.544 percent]
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][0] = 100.00%@-0.00079601
//                 ~c[0][1] = 100.00%@-0.00371385
//                 ~c[0][2] = 100.00%@0.00554694
//                 ~c[0][3] = 100.00%@-0.16474649
//                 ~c[0][4] = 100.00%@-0.00418360
//                 ~c[0][5] = 100.00%@0.00256080
//                 ~c[0][6] = 100.00%@0.00305883
//                 ~c[0][7] = 100.00%@0.91708946
//                 ~c[0][8] = 100.00%@-0.00195287
//                 ~c[0][9] = 100.00%@-0.00158739
//                 ~c[0][10] = 100.00%@-0.00134123
//                 ~c[0][11] = 100.00%@1.66919804
//                 ~c[0][12] = 100.00%@-0.00035617
//                 ~c[0][13] = 100.00%@-0.00166175
//                 ~c[0][14] = 100.00%@0.00248195
//                 ~c[0][15] = 100.00%@0.47905856
//                 ~c[0][16] = 100.00%@0.00013841
//                 ~c[0][17] = 100.00%@0.01477893
//                 ~c[0][18] = 100.00%@0.05173395
//                 ~c[0][20] = 100.00%@1.00000000
//                 ~c[0][24] = 100.00%@0.00000000
//                 ~c[0][27] = 100.00%@876.65979004
//                 ~c[0][28] = 100.00%@1.00000000
//                 ~c[0][29] = 100.00%@0.01111111
//                 ~c[0][30] = 100.00%@0.11123994
//                 ~c[0][31] = 100.00%@0.11123994
//                 ~c[0][32] = 100.00%@0.20000000
//                 ~c[0][33] = 100.00%@0.20000000
//                 ~c[0][34] = 100.00%@0.20000000
//                 ~c[0][36] = 100.00%@0.12500000
//                 ~c[0][37] = 100.00%@0.17500000
//                 ~c[0][38] = 100.00%@0.10000000
//                 ~c[0][39] = 100.00%@0.03137255
//                 ~c[0][40] = 100.00%@-0.06250000
//                 ~c[0][41] = 100.00%@-0.08750000
//                 ~c[0][42] = 100.00%@-0.05000000
//                 ~c[0][43] = 100.00%@0.00000000
//                 ~c[0][47] = 100.00%@0.50000000
//                 ~c[0][51] = 100.00%@0.50000000
//                 ~c[0][52] = 100.00%@0.00279018
//                 ~c[0][53] = 100.00%@0.00279018
//                 ~c[0][54] = 100.00%@0.00195313
//                 ~c[0][55] = 100.00%@0.00195313
//                 ~c[0][56] = 100.00%@0.55870819
//                 ~c[0][63] = 100.00%@1.50000000
//                 ~c[0][64] = 100.00%@0.68473685
//                 ~c[0][65] = 100.00%@0.55634868
//                 ~c[0][66] = 100.00%@0.47075656
//                 ~c[0][68] = 100.00%@1.39999998
//                 ~c[0][69] = 100.00%@1.00000000
//                 ~c[0][70] = 100.00%@0.80000001
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         71.99% width=0x200, height=0x200, mips=0xa, DXGI_FORMAT_BC3_UNORM
//         20.01% width=0x400, height=0x400, mips=0xb, DXGI_FORMAT_BC3_UNORM
//         8.00% width=0x800, height=0x800, mips=0xc, DXGI_FORMAT_BC3_UNORM
//         TEXTURE_SLOT 0x1
//         44.02% width=0x400, height=0x400, mips=0xb, DXGI_FORMAT_BC3_UNORM
//         28.01% width=0x200, height=0x200, mips=0xa, DXGI_FORMAT_BC3_UNORM
//         27.97% width=0x400, height=0x400, mips=0xb, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x2
//         36.01% width=0x400, height=0x400, mips=0xb, DXGI_FORMAT_BC3_UNORM_SRGB
//         31.97% width=0x400, height=0x400, mips=0xb, DXGI_FORMAT_BC1_UNORM_SRGB
//         28.01% width=0x200, height=0x200, mips=0xa, DXGI_FORMAT_BC3_UNORM_SRGB
//         4.00% width=0x800, height=0x800, mips=0xc, DXGI_FORMAT_BC3_UNORM_SRGB
//         TEXTURE_SLOT 0x3
//         100.00% width=0x800, height=0x800, mips=0x1, DXGI_FORMAT_R32_FLOAT
//         TEXTURE_SLOT 0x4
//         100.00% width=0x100, height=0x100, mips=0x9, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x5
//         100.00% width=0x200, height=0x200, mips=0xa, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x6
//         100.00% width=0x100, height=0x100, mips=0x1, DXGI_FORMAT_R8G8_UNORM
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//         SAMPLER_SLOT 0x1
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x2
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x3
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x4
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x5
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x6
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R16, R0;                # [  1][000008]
//     	IPA R17, a[0x98], R16;           # [  2][000010] GENERIC_ATTRIBUTE_01_Z
//     	IPA R20, a[0x9c], R16;           # [  3][000018] GENERIC_ATTRIBUTE_01_W
//     	FADD32I.FTZ R0, R17, 0xbde3d1c4; # [  4][000020]
//     	FADD32I.FTZ R1, R20, 0xbde3d1c4; # [  5][000028]
//     	TEX.T R8, R0, 0x4, 0x2, 2D, 0x3; # [  6][000030]
//     	IPA R5, a[0x94], R16;            # [  7][000038] GENERIC_ATTRIBUTE_01_Y
//     	IPA R4, a[0x90], R16;            # [  8][000040] ATTR1
//     	TEX.NODEP.T R0, R4, 0x1, 0x5, 2D, 0x7; # [  9][000048]
//     	IPA R6, a[0x120], R16;           # [ 10][000050] ATTR10
//     	IPA R21, a[0x124], R16;          # [ 11][000058] GENERIC_ATTRIBUTE_10_Y
//     	IPA R7, a[0x128], R16;           # [ 12][000060] GENERIC_ATTRIBUTE_10_Z
//     	IPA R19, a[0x12c], R16;          # [ 13][000068] GENERIC_ATTRIBUTE_10_W
//     	MOV32I R3, -0x40800000;          # [ 14][000070]
//     	IPA R14, a[0x104], R16;          # [ 15][000078] GENERIC_ATTRIBUTE_08_Y
//     	FMUL32I.FTZ R11, R6, 0xb9babc98; # [ 16][000080]
//     	FMUL32I.FTZ R10, R6, 0xba50ab86; # [ 17][000088]
//     	FMUL32I.FTZ R13, R6, 0xbb89168e; # [ 18][000090]
//     	FFMA.FTZ R11, R21, c[0x10][0x18], R11; # [ 19][000098]
//     	FFMA.FTZ R10, R21, c[0x10][0x0], R10; # [ 20][0000a0]
//     	FFMA.FTZ R13, R21, c[0x10][0xc], R13; # [ 21][0000a8]
//     	FFMA.FTZ R11, R7, c[0x10][0x1c], R11; # [ 22][0000b0]
//     	FFMA.FTZ R10, R7, c[0x10][0x4], R10; # [ 23][0000b8]
//     	FFMA.FTZ R13, R7, c[0x10][0x10], R13; # [ 24][0000c0]
//     	FFMA.FTZ R11, R19, c[0x10][0x20], R11; # [ 25][0000c8]
//     	FFMA.FTZ R10, R19, c[0x10][0x8], R10; # [ 26][0000d0]
//     	FFMA.FTZ R15, R19, c[0x10][0x14], R13; # [ 27][0000d8]
//     	MUFU.RCP R11, R11;               # [ 28][0000e0]
//     	IPA R13, a[0xd0], R16;           # [ 29][0000e8] ATTR5
//     	IPA R12, a[0x100], R16;          # [ 30][0000f0] ATTR8
//     	FMUL.FTZ R10, R10, R11;          # [ 31][0000f8]
//     	FMUL.FTZ R11, R15, R11;          # [ 32][000100]
//     	IPA R18, a[0xd4], R16;           # [ 33][000108] GENERIC_ATTRIBUTE_05_Y
//     	FMUL32I.FTZ R22, R6, 0xbafff748; # [ 34][000110]
//     	TEX.NODEP.T R15, R10, 0x3, 0x0, 2D, 0x1; # [ 35][000118]
//     	IPA R10, a[0xd8], R16;           # [ 36][000120] GENERIC_ATTRIBUTE_05_Z
//     	FFMA.FTZ R11, R21, c[0x10][0x24], R22; # [ 37][000128]
//     	FMUL.FTZ R21, R13, R13;          # [ 38][000130]
//     	FFMA.FTZ R11, R7, c[0x10][0x28], R11; # [ 39][000138]
//     	FFMA.FTZ R21, R18, R18, R21;     # [ 40][000140]
//     	FFMA.FTZ R9, R9, 2, R3;          # [ 41][000148]
//     	FFMA.FTZ R8, R8, 2, R3;          # [ 42][000150]
//     	FFMA.FTZ R9, R9, c[0x10][0x30], R20; # [ 43][000158]
//     	FFMA.FTZ R8, R8, c[0x10][0x30], R17; # [ 44][000160]
//     	FFMA.FTZ R20, R10, R10, R21;     # [ 45][000168]
//     	TEX.NODEP.T R17, R8, 0x5, 0x1, 2D, 0x1; # [ 46][000170]
//     	MUFU.RSQ R8, R20;                # [ 47][000178]
//     	FMUL.FTZ R20, R12, R12;          # [ 48][000180]
//     	IPA R23, a[0x108], R16;          # [ 49][000188] GENERIC_ATTRIBUTE_08_Z
//     	FMUL.FTZ R21, R8, R18;           # [ 50][000190]
//     	FFMA.FTZ R22, R18, R8, c[0x10][0x3c]; # [ 51][000198]
//     	FFMA.FTZ R19, R19, c[0x10][0x2c], R11; # [ 52][0001a0]
//     	FMUL.FTZ R18, R8, R13;           # [ 53][0001a8]
//     	FFMA.FTZ R13, R13, R8, c[0x10][0x38]; # [ 54][0001b0]
//     	FMUL.FTZ R24, R8, R10;           # [ 55][0001b8]
//     	FFMA.FTZ R11, R10, R8, c[0x10][0x40]; # [ 56][0001c0]
//     	TEX.NODEP.T R8, R4, 0x0, 0x6, 2D, 0xb; # [ 57][0001c8]
//     	FFMA.FTZ R20, R14, R14, R20;     # [ 58][0001d0]
//     	FFMA.FTZ R20, R23, R23, R20;     # [ 59][0001d8]
//     	MUFU.RSQ R20, R20;               # [ 60][0001e0]
//     	FFMA.FTZ R14, R14, R20, R21;     # [ 61][0001e8]
//     	FMUL.FTZ R21, R13, R13;          # [ 62][0001f0]
//     	FFMA.FTZ R18, R12, R20, R18;     # [ 63][0001f8]
//     	FFMA.FTZ R20, R23, R20, R24;     # [ 64][000200]
//     	FFMA.FTZ R21, R22, R22, R21;     # [ 65][000208]
//     	FFMA.FTZ R23, R1, 2, R3;         # [ 66][000210]
//     	FFMA.FTZ R21, R11, R11, R21;     # [ 67][000218]
//     	MUFU.RSQ R21, R21;               # [ 68][000220]
//     	FMUL.FTZ R13, R13, R21;          # [ 69][000228]
//     	FMUL.FTZ R12, R22, R21;          # [ 70][000230]
//     	FMUL.FTZ R11, R11, R21;          # [ 71][000238]
//     	FFMA.FTZ R21, R2, 2, R3;         # [ 72][000240]
//     	FFMA.FTZ R22, R0, 2, R3;         # [ 73][000248]
//     	TEX.NODEP.T R0, R4, 0x2, 0x4, 2D; # [ 74][000250]
//     	IPA R5, a[0xb0], R16;            # [ 75][000258] ATTR3
//     	IPA R24, a[0xb4], R16;           # [ 76][000260] GENERIC_ATTRIBUTE_03_Y
//     	IPA R4, a[0xb8], R16;            # [ 77][000268] GENERIC_ATTRIBUTE_03_Z
//     	FMUL.FTZ R5, R23, R5;            # [ 78][000270]
//     	FMUL.FTZ R24, R23, R24;          # [ 79][000278]
//     	FMUL.FTZ R23, R23, R4;           # [ 80][000280]
//     	IPA R4, a[0xa8], R16;            # [ 81][000288] GENERIC_ATTRIBUTE_02_Z
//     	FFMA.FTZ R4, R22, R4, R23;       # [ 82][000290]
//     	IPA R23, a[0xa4], R16;           # [ 83][000298] GENERIC_ATTRIBUTE_02_Y
//     	FFMA.FTZ R23, R22, R23, R24;     # [ 84][0002a0]
//     	IPA R24, a[0xa0], R16;           # [ 85][0002a8] ATTR2
//     	FFMA.FTZ R22, R22, R24, R5;      # [ 86][0002b0]
//     	IPA R5, a[0xc0], R16;            # [ 87][0002b8] ATTR4
//     	IPA R24, a[0xc4], R16;           # [ 88][0002c0] GENERIC_ATTRIBUTE_04_Y
//     	FFMA.FTZ R5, R21, R5, R22;       # [ 89][0002c8]
//     	FFMA.FTZ R22, R21, R24, R23;     # [ 90][0002d0]
//     	IPA R23, a[0xc8], R16;           # [ 91][0002d8] GENERIC_ATTRIBUTE_04_Z
//     	MOV32I R24, 0x3b000000;          # [ 92][0002e0]
//     	FFMA.FTZ R7, R7, c[0x10][0x50], R24; # [ 93][0002e8]
//     	FFMA.FTZ R6, R6, c[0x10][0x50], R24; # [ 94][0002f0]
//     	FFMA.FTZ R4, R21, R23, R4;       # [ 95][0002f8]
//     	FMUL.FTZ R23, R18, R18;          # [ 96][000300]
//     	FMUL.FTZ R21, R5, R5;            # [ 97][000308]
//     	TEX.NODEP.T R6, R6, 0x6, 0x3, 2D, 0x3; # [ 98][000310]
//     	FFMA.FTZ R23, R14, R14, R23;     # [ 99][000318]
//     	FFMA.FTZ R21, R22, R22, R21;     # [100][000320]
//     	FADD.FTZ R15, R15, -R19;         # [101][000328]
//     	FFMA.FTZ R24, R20, R20, R23;     # [102][000330]
//     	FFMA.FTZ R23, R4, R4, R21;       # [103][000338]
//     	MUFU.RSQ R21, R24;               # [104][000340]
//     	MUFU.RSQ R19, R23;               # [105][000348]
//     	FMUL.FTZ R23, R14, R21;          # [106][000350]
//     	FMUL.FTZ R18, R18, R21;          # [107][000358]
//     	FMUL.FTZ R14, R5, R19;           # [108][000360]
//     	FMUL32I.FTZ R5, R15, 0x445b2a3a; # [109][000368]
//     	FMUL.FTZ R15, R22, R19;          # [110][000370]
//     	FMUL.FTZ R22, R14, R18;          # [111][000378]
//     	FMUL32I.FTZ R18, R5, 0x3fb8aa3b; # [112][000380]
//     	FMUL.FTZ R20, R20, R21;          # [113][000388]
//     	FFMA.FTZ R21, R15, R23, R22;     # [114][000390]
//     	RRO.EX2 R22, R18;                # [115][000398]
//     	FMUL.FTZ R18, R4, R19;           # [116][0003a0]
//     	FMUL.FTZ R13, R14, R13;          # [117][0003a8]
//     	MUFU.EX2 R19, R22;               # [118][0003b0]
//     	FFMA.FTZ.SAT R22, R18, R20, R21; # [119][0003b8]
//     	FFMA.FTZ R13, R15, R12, R13;     # [120][0003c0]
//     	FMNMX.FTZ R20, R19, 1, PT;       # [121][0003c8]
//     	FMUL32I.FTZ R14, R14, 0x3f2f4aea; # [122][0003d0]
//     	FFMA.FTZ.SAT R11, R18, R11, R13; # [123][0003d8]
//     	FMUL.FTZ R21, R8, 8;             # [124][0003e0]
//     	FFMA.FTZ R17, R20, R17, c[0x10][0x34]; # [125][0003e8]
//     	MUFU.LG2 R13, R11;               # [126][0003f0]
//     	RRO.EX2 R19, R21;                # [127][0003f8]
//     	MUFU.LG2 R21, R22;               # [128][000400]
//     	FMNMX.FTZ R11, R17, 1, PT;       # [129][000408]
//     	MUFU.EX2 R19, R19;               # [130][000410]
//     	FFMA.FTZ R15, R15, c[0x10][0x3c], R14; # [131][000418]
//     	IPA R12, a[0xf0], R16;           # [132][000420] ATTR7
//     	FMUL.FTZ R20, R21, R19;          # [133][000428]
//     	FMUL.FTZ R17, R13, R19;          # [134][000430]
//     	FMUL32I.FTZ R13, R11, 0.8;       # [135][000438]
//     	RRO.EX2 R21, R20;                # [136][000440]
//     	RRO.EX2 R20, R17;                # [137][000448]
//     	FMUL32I.FTZ R17, R11, 1.4;       # [138][000450]
//     	MUFU.EX2 R21, R21;               # [139][000458]
//     	MOV32I R5, 0x3f000000;           # [140][000460]
//     	MUFU.EX2 R20, R20;               # [141][000468]
//     	FMUL.FTZ R21, R19, R21;          # [142][000470]
//     	FMUL.FTZ R19, R19, R20;          # [143][000478]
//     	FMUL.FTZ R20, R8, R8;            # [144][000480]
//     	FMUL.FTZ R21, R21, 1.5;          # [145][000488]
//     	FMUL.FTZ R8, R19, 1.5;           # [146][000490]
//     	FMUL.FTZ R19, R21, R20;          # [147][000498]
//     	FMUL.FTZ R14, R8, R20;           # [148][0004a0]
//     	FFMA.FTZ.SAT R8, R18, c[0x10][0x40], R15; # [149][0004a8]
//     	FMUL.FTZ R15, R19, 0.5;          # [150][0004b0]
//     	FFMA.FTZ R18, R0, 2, -R17;       # [151][0004b8]
//     	FFMA.FTZ R19, R1, 2, -R11;       # [152][0004c0]
//     	FFMA.FTZ R20, R2, 2, -R13;       # [153][0004c8]
//     	FMUL.FTZ R14, R14, 0.5;          # [154][0004d0]
//     	FFMA.FTZ R18, R9, R18, R17;      # [155][0004d8]
//     	FFMA.FTZ R21, R9, R19, R11;      # [156][0004e0]
//     	FFMA.FTZ R9, R9, R20, R13;       # [157][0004e8]
//     	FFMA.FTZ R20, R18, R14, R0;      # [158][0004f0]
//     	FFMA.FTZ R19, R21, R14, R1;      # [159][0004f8]
//     	FFMA.FTZ R22, R9, R14, R2;       # [160][000500]
//     	FMUL.FTZ R17, R17, R20;          # [161][000508]
//     	IPA R20, a[0xf4], R16;           # [162][000510] GENERIC_ATTRIBUTE_07_Y
//     	FFMA.FTZ R14, R21, R15, R1;      # [163][000518]
//     	IPA R21, a[0xf8], R16;           # [164][000520] GENERIC_ATTRIBUTE_07_Z
//     	FFMA.FTZ R18, R18, R15, R0;      # [165][000528]
//     	FFMA.FTZ R15, R9, R15, R2;       # [166][000530]
//     	MOV32I R9, -0x424ccccd;          # [167][000538]
//     	FMUL.FTZ R20, R14, R20;          # [168][000540]
//     	FMUL.FTZ R18, R18, R12;          # [169][000548]
//     	IPA R14, a[0xe0], R16;           # [170][000550] ATTR6
//     	FMUL.FTZ R12, R13, R22;          # [171][000558]
//     	FMUL.FTZ R23, R15, R21;          # [172][000560]
//     	FMUL.FTZ R22, R11, R19;          # [173][000568]
//     	IPA R15, a[0xe4], R16;           # [174][000570] GENERIC_ATTRIBUTE_06_Y
//     	FFMA.FTZ R19, R17, R8, R18;      # [175][000578]
//     	FFMA.FTZ R17, R22, R8, R20;      # [176][000580]
//     	IPA R18, a[0xe8], R16;           # [177][000588] GENERIC_ATTRIBUTE_06_Z
//     	FFMA.FTZ R14, R14, R0, R19;      # [178][000590]
//     	FFMA.FTZ R20, R12, R8, R23;      # [179][000598]
//     	FFMA.FTZ R15, R15, R1, R17;      # [180][0005a0]
//     	FFMA.FTZ R14, R10, R0, R14;      # [181][0005a8]
//     	IPA R21, a[0x11c], R16;          # [182][0005b0] GENERIC_ATTRIBUTE_09_W
//     	FFMA.FTZ R17, R18, R2, R20;      # [183][0005b8]
//     	FFMA.FTZ R15, R10, R1, R15;      # [184][0005c0]
//     	FADD32I.FTZ R1, R14, 0xb91121b3; # [185][0005c8]
//     	IPA R8, a[0x110], R16;           # [186][0005d0] ATTR9
//     	IPA R12, a[0x114], R16;          # [187][0005d8] GENERIC_ATTRIBUTE_09_Y
//     	FADD.FTZ R21, -R21, 1;           # [188][0005e0]
//     	MOV32I R13, -0x42800000;         # [189][0005e8]
//     	MOV32I R11, -0x42b33333;         # [190][0005f0]
//     	IPA R16, a[0x118], R16;          # [191][0005f8] GENERIC_ATTRIBUTE_09_Z
//     	FFMA.FTZ R22, R3, 0.125, R13;    # [192][000600]
//     	FFMA.FTZ R13, R3, c[0x10][0x44], R11; # [193][000608]
//     	FADD.FTZ R0, -R6, R7;            # [194][000610]
//     	FFMA.FTZ R7, R10, R2, R17;       # [195][000618]
//     	FADD32I.FTZ R2, R15, 0xbc722355; # [196][000620]
//     	FFMA.FTZ R14, R0, c[0x10][0x54], R6; # [197][000628]
//     	FADD32I.FTZ R6, R7, 0xbd53e6fa;  # [198][000630]
//     	FFMA.FTZ R9, R3, c[0x10][0x48], R9; # [199][000638]
//     	FFMA.FTZ R0, R14, 0.5, R5;       # [200][000640]
//     	FFMA.FTZ R1, R14, R1, c[0x10][0x58]; # [201][000648]
//     	FFMA.FTZ R5, R14, R2, c[0x10][0x5c]; # [202][000650]
//     	FMUL.FTZ R2, R0, R21;            # [203][000658]
//     	FADD.FTZ R0, -R1, R8;            # [204][000660]
//     	FFMA.FTZ R7, R14, R6, c[0x10][0x60]; # [205][000668]
//     	FADD.FTZ R6, -R5, R12;           # [206][000670]
//     	FADD.FTZ R11, R10, R22;          # [207][000678]
//     	FFMA.FTZ R0, R2, R0, R1;         # [208][000680]
//     	FFMA.FTZ R1, R2, R6, R5;         # [209][000688]
//     	FADD.FTZ R9, R10, R9;            # [210][000690]
//     	FADD.FTZ R8, -R7, R16;           # [211][000698]
//     	FMUL.FTZ R5, R0, R11;            # [212][0006a0]
//     	FADD.FTZ R6, R10, R13;           # [213][0006a8]
//     	FFMA.FTZ R2, R2, R8, R7;         # [214][0006b0]
//     	FFMA.FTZ R5, R1, R9, R5;         # [215][0006b8]
//     	FFMA.FTZ R8, R3, c[0x10][0x4c], R10; # [216][0006c0]
//     	MOV R7, R4;                      # [217][0006c8]
//     	FFMA.FTZ R3, R2, R6, R5;         # [218][0006d0]
//     	MOV R6, R4;                      # [219][0006d8]
//     	MOV R5, R4;                      # [220][0006e0]
//     	FADD.FTZ R3, R3, R8;             # [221][0006e8]
//     	FMUL.FTZ R3, R14, R3;            # [222][0006f0]
//     	EXIT;                            # [223][0006f8]
//     	END
//     END_SECTION
// END_SHADER
// 
