// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x5cccb3ff23091a43
//         UCODE_HASH: 0x7d0ba20834d0b0c6
//         POOL: APP
//         VERSION: 20
//         # USES: 205
//         // Time: 102.530ms [9.544 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 20
//         USED_TEXTURE_BITS: 0xf
//         TEXTURE_SLOTS: 4
//         SAMPLER_SLOTS: 4
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_R              PERSPECTIVE
//             TEX00_Q              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000aa0
//         0x00000000      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c1, 65504.00000000, 1.00000000, 0.00000000, 3.00000000 ; 0x477fe000 0x3f800000 0x000000 0x40400000
        def c3, 0.20000000, 4.00000000, 0.00010000, 0.00000000 ; 0x3e4ccccd 0x40800000 0x38d1b717 0x000000
        dcl_texcoord0 v0.ba
        dcl_texcoord1 v1.rg
        dcl_2d s0
        dcl_2d s1
        dcl_2d s2
        dcl_2d s3
        max r0.xy, v0.zwzw, c0
        min r1.xy, c0.zwzw, r0
        texld r0, r1, s0
        mad r0.w, r0.w, c2.z, -c2.w
        rcp r0.w, r0.w
        min r1.x, r0.w, c1.x
        add_pp r0.w, -r1.x, c1.x
        mov r1.x, c1.x
        add r1.x, r1.x, -c4.x
        add r0.w, -r0.w, r1.x
        texld_pp r2, v0.zwzw, s0
        mad r1.y, r2.w, c2.z, -c2.w
        rcp_pp r1.y, r1.y
        min r2.w, r1.y, c1.x
        add_pp r1.z, -r2.w, c1.x
        add r1.x, r1.x, -r1.z
        cmp_pp r1.x, r1.x, c1.y, c1.z
        cmp_pp r0.w, r0.w, r1.x, c1.z
        add r1.xzw, r2.xyyz, r2.xyyz
        mad_pp r0.xyz, r0, c1.w, r1.xzw
        mad_pp r0.xyz, r0, c3.x, -r2
        mad_pp r0.xyz, r0.w, r0, r2
        texld_pp r2, v1, s2
        add_pp r0.xyz, r0, r2
        add r1.xz, -r1.y, c5.zyyw
        cmp r2.xy, r1.z, c5, c5.yzzw
        cmp r2.xy, r1.x, r2, c5.zwzw
        add r0.w, r1.y, -r2.x
        add r1.y, -r2.x, r2.y
        rcp r1.y, r1.y
        mul_sat r0.w, r0.w, r1.y
        cmp r1.yz, r1.z, c6.xxyw, c6
        cmp r1.xy, r1.x, r1.yzzw, c6.zwzw
        lrp r2.x, r0.w, r1.y, r1.x
        add_sat_pp r0.w, -r2.x, c1.y
        texld r1, v1, s1
        mul_pp r1.xyz, r1, c3.y
        mad_pp r1.w, r1.w, c3.y, r0.w
        mad_pp r0.xyz, r0, r0.w, r1
        rcp r0.w, r1.w
        mad_sat r0.xyz, r0, r0.w, -c7
        mul r0.xyz, r0, c8
        max r1.xyz, r0, c3.z
        log r0.x, r1.x
        log r0.y, r1.y
        log r0.z, r1.z
        mul r0.xyz, r0, c9
        exp_pp r1.x, r0.x
        exp_pp r1.y, r0.y
        exp_pp r1.z, r0.z
        dp3_pp r0.x, r1, c10
        mad_pp r0.xyz, r1, c7.w, r0.x
        mul r1.xyz, r0, c12
        mov r2.xyz, c12
        mad r0.xyz, r0, -r2, c13
        mad r0.xyz, c13.w, r0, r1
        add_pp r0.xyz, r0, c11
        mad r1.xyz, r0, c15.z, -r0
        add r2.xy, c14, v0.zwzw
        mul_pp r2.xy, r2, c15
        texld_pp r2, r2, s3
        mad_sat r0.xyz, r2.x, r1, r0
        max r1.xyz, r0, c3.z
        log r0.x, r1.x
        log r0.y, r1.y
        log r0.z, r1.z
        mul r0.xyz, r0, c12.w
        exp oC0.x, r0.x
        exp oC0.y, r0.y
        exp oC0.z, r0.z
        mov oC0.w, c1.z
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0001 0x477fe000 0x3f800000
//         0x00000000 0x40400000 0x05000051 0xa00f0003
//         0x3e4ccccd 0x40800000 0x38d1b717 0x00000000
//         0x0200001f 0x80000005 0x900c0000 0x0200001f
//         0x80010005 0x90030001 0x0200001f 0x90000000
//         0xa00f0800 0x0200001f 0x90000000 0xa00f0801
//         0x0200001f 0x90000000 0xa00f0802 0x0200001f
//         0x90000000 0xa00f0803 0x0300000b 0x80030000
//         0x90ee0000 0xa0e40000 0x0300000a 0x80030001
//         0xa0ee0000 0x80e40000 0x03000042 0x800f0000
//         0x80e40001 0xa0e40800 0x04000004 0x80080000
//         0x80ff0000 0xa0aa0002 0xa1ff0002 0x02000006
//         0x80080000 0x80ff0000 0x0300000a 0x80010001
//         0x80ff0000 0xa0000001 0x03000002 0x80280000
//         0x81000001 0xa0000001 0x02000001 0x80010001
//         0xa0000001 0x03000002 0x80010001 0x80000001
//         0xa1000004 0x03000002 0x80080000 0x81ff0000
//         0x80000001 0x03000042 0x802f0002 0x90ee0000
//         0xa0e40800 0x04000004 0x80020001 0x80ff0002
//         0xa0aa0002 0xa1ff0002 0x02000006 0x80220001
//         0x80550001 0x0300000a 0x80080002 0x80550001
//         0xa0000001 0x03000002 0x80240001 0x81ff0002
//         0xa0000001 0x03000002 0x80010001 0x80000001
//         0x81aa0001 0x04000058 0x80210001 0x80000001
//         0xa0550001 0xa0aa0001 0x04000058 0x80280000
//         0x80ff0000 0x80000001 0xa0aa0001 0x03000002
//         0x800d0001 0x80940002 0x80940002 0x04000004
//         0x80270000 0x80e40000 0xa0ff0001 0x80f80001
//         0x04000004 0x80270000 0x80e40000 0xa0000003
//         0x81e40002 0x04000004 0x80270000 0x80ff0000
//         0x80e40000 0x80e40002 0x03000042 0x802f0002
//         0x90e40001 0xa0e40802 0x03000002 0x80270000
//         0x80e40000 0x80e40002 0x03000002 0x80050001
//         0x81550001 0xa0d60005 0x04000058 0x80030002
//         0x80aa0001 0xa0e40005 0xa0e90005 0x04000058
//         0x80030002 0x80000001 0x80e40002 0xa0ee0005
//         0x03000002 0x80080000 0x80550001 0x81000002
//         0x03000002 0x80020001 0x81000002 0x80550002
//         0x02000006 0x80020001 0x80550001 0x03000005
//         0x80180000 0x80ff0000 0x80550001 0x04000058
//         0x80060001 0x80aa0001 0xa0d00006 0xa0e40006
//         0x04000058 0x80030001 0x80000001 0x80e90001
//         0xa0ee0006 0x04000012 0x80010002 0x80ff0000
//         0x80550001 0x80000001 0x03000002 0x80380000
//         0x81000002 0xa0550001 0x03000042 0x800f0001
//         0x90e40001 0xa0e40801 0x03000005 0x80270001
//         0x80e40001 0xa0550003 0x04000004 0x80280001
//         0x80ff0001 0xa0550003 0x80ff0000 0x04000004
//         0x80270000 0x80e40000 0x80ff0000 0x80e40001
//         0x02000006 0x80080000 0x80ff0001 0x04000004
//         0x80170000 0x80e40000 0x80ff0000 0xa1e40007
//         0x03000005 0x80070000 0x80e40000 0xa0e40008
//         0x0300000b 0x80070001 0x80e40000 0xa0aa0003
//         0x0200000f 0x80010000 0x80000001 0x0200000f
//         0x80020000 0x80550001 0x0200000f 0x80040000
//         0x80aa0001 0x03000005 0x80070000 0x80e40000
//         0xa0e40009 0x0200000e 0x80210001 0x80000000
//         0x0200000e 0x80220001 0x80550000 0x0200000e
//         0x80240001 0x80aa0000 0x03000008 0x80210000
//         0x80e40001 0xa0e4000a 0x04000004 0x80270000
//         0x80e40001 0xa0ff0007 0x80000000 0x03000005
//         0x80070001 0x80e40000 0xa0e4000c 0x02000001
//         0x80070002 0xa0e4000c 0x04000004 0x80070000
//         0x80e40000 0x81e40002 0xa0e4000d 0x04000004
//         0x80070000 0xa0ff000d 0x80e40000 0x80e40001
//         0x03000002 0x80270000 0x80e40000 0xa0e4000b
//         0x04000004 0x80070001 0x80e40000 0xa0aa000f
//         0x81e40000 0x03000002 0x80030002 0xa0e4000e
//         0x90ee0000 0x03000005 0x80230002 0x80e40002
//         0xa0e4000f 0x03000042 0x802f0002 0x80e40002
//         0xa0e40803 0x04000004 0x80170000 0x80000002
//         0x80e40001 0x80e40000 0x0300000b 0x80070001
//         0x80e40000 0xa0aa0003 0x0200000f 0x80010000
//         0x80000001 0x0200000f 0x80020000 0x80550001
//         0x0200000f 0x80040000 0x80aa0001 0x03000005
//         0x80070000 0x80e40000 0xa0ff000c 0x0200000e
//         0x80010800 0x80000000 0x0200000e 0x80020800
//         0x80550000 0x0200000e 0x80040800 0x80aa0000
//         0x02000001 0x80080800 0xa0aa0001 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0xb94ccccd // -0.00019531
//         COP_CONST[1]: 0xb9a3d70a // -0.00031250
//         COP_CONST[2]: 0x3f6651ec // 0.89968753
//         COP_CONST[3]: 0x3f7ff333 // 0.99980468
//         COP_CONST[4]: 0x3ccd0148 // 0.02502503
//         COP_CONST[5]: 0x3e4ccccd // 0.20000000
//         COP_CONST[6]: 0x4a989680 // 5000000.00000000
//         COP_CONST[7]: 0x38d1b717 // 0.00010000
//         COP_CONST[8]: 0x3f1d8499 // 0.61530453
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0xb94ccccd // -0.00019531
//         # USER FLOAT CONST: c[6][251] = 0xb9a3d70a // -0.00031250
//         # USER FLOAT CONST: c[6][252] = 0x3f7ff333 // 0.99980468
//         # USER FLOAT CONST: c[6][253] = 0x3f6651ec // 0.89968753
//         # USER FLOAT CONST: c[6][260] = 0x3ccd0148 // 0.02502503
//         # USER FLOAT CONST: c[6][261] = 0x37d1ec24 // 0.00002502
//         # USER FLOAT CONST: c[6][266] = 0x43fa0000 // 500.00000000
//         # USER FLOAT CONST: c[6][270] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][271] = 0x42c80000 // 100.00000000
//         # USER FLOAT CONST: c[6][272] = 0x47c35000 // 100000.00000000
//         # USER FLOAT CONST: c[6][273] = 0x4a989680 // 5000000.00000000
//         # USER FLOAT CONST: c[6][274] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][275] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][276] = 0x3f000000 // 0.50000000
//         # USER FLOAT CONST: c[6][277] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][278] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][279] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][280] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][281] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][282] = 0x3fa00000 // 1.25000000
//         # USER FLOAT CONST: c[6][283] = 0x3faaaaab // 1.33333337
//         # USER FLOAT CONST: c[6][284] = 0x3fb6db6e // 1.42857146
//         # USER FLOAT CONST: c[6][286] = 0x3f8ccccd // 1.10000002
//         # USER FLOAT CONST: c[6][287] = 0x3f8ccccd // 1.10000002
//         # USER FLOAT CONST: c[6][288] = 0x3f8ccccd // 1.10000002
//         # USER FLOAT CONST: c[6][290] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][291] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][292] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][294] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][295] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][296] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][298] = 0x3f7255d8 // 0.94662237
//         # USER FLOAT CONST: c[6][299] = 0x3f7255d8 // 0.94662237
//         # USER FLOAT CONST: c[6][300] = 0x3f7255d8 // 0.94662237
//         # USER FLOAT CONST: c[6][301] = 0x3ee8ba2e // 0.45454544
//         # USER FLOAT CONST: c[6][302] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][303] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][304] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][305] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][306] = 0x3ee676fe // 0.45012659
//         # USER FLOAT CONST: c[6][307] = 0x3ee676fe // 0.45012659
//         # USER FLOAT CONST: c[6][310] = 0x41800000 // 16.00000000
//         # USER FLOAT CONST: c[6][311] = 0x41100000 // 9.00000000
//         # USER FLOAT CONST: c[6][312] = 0x3f266666 // 0.64999998
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@-0.00019531
//         ##    ~c0.y -> c[6][251] = 100.00%@-0.00031250
//         ##    ~c0.z -> c[6][252] = 100.00%@0.99980468
//         ##    ~c0.w -> c[6][253] = 100.00%@0.89968753
//         ##    ~c2.z -> c[6][260] = 100.00%@0.02502503
//         ##    ~c2.w -> c[6][261] = 100.00%@0.00002502
//         ##    ~c4.x -> c[6][266] = 100.00%@500.00000000
//         ##    ~c5.x -> c[6][270] = 100.00%@0.00000000
//         ##    ~c5.y -> c[6][271] = 100.00%@100.00000000
//         ##    ~c5.z -> c[6][272] = 100.00%@100000.00000000
//         ##    ~c5.w -> c[6][273] = 100.00%@5000000.00000000
//         ##    ~c6.x -> c[6][274] = 100.00%@1.00000000
//         ##    ~c6.y -> c[6][275] = 100.00%@0.00000000
//         ##    ~c6.z -> c[6][276] = 100.00%@0.50000000
//         ##    ~c6.w -> c[6][277] = 100.00%@0.00000000
//         ##    ~c7.x -> c[6][278] = 100.00%@0.00000000
//         ##    ~c7.y -> c[6][279] = 100.00%@0.00000000
//         ##    ~c7.z -> c[6][280] = 100.00%@0.00000000
//         ##    ~c7.w -> c[6][281] = 100.00%@1.00000000
//         ##    ~c8.x -> c[6][282] = 100.00%@1.25000000
//         ##    ~c8.y -> c[6][283] = 100.00%@1.33333337
//         ##    ~c8.z -> c[6][284] = 100.00%@1.42857146
//         ##    ~c9.x -> c[6][286] = 100.00%@1.10000002
//         ##    ~c9.y -> c[6][287] = 100.00%@1.10000002
//         ##    ~c9.z -> c[6][288] = 100.00%@1.10000002
//         ##    ~c10.x -> c[6][290] = 100.00%@0.00000000
//         ##    ~c10.y -> c[6][291] = 100.00%@0.00000000
//         ##    ~c10.z -> c[6][292] = 100.00%@0.00000000
//         ##    ~c11.x -> c[6][294] = 100.00%@0.00000000
//         ##    ~c11.y -> c[6][295] = 100.00%@0.00000000
//         ##    ~c11.z -> c[6][296] = 100.00%@0.00000000
//         ##    ~c12.x -> c[6][298] = 100.00%@0.94662237
//         ##    ~c12.y -> c[6][299] = 100.00%@0.94662237
//         ##    ~c12.z -> c[6][300] = 100.00%@0.94662237
//         ##    ~c12.w -> c[6][301] = 100.00%@0.45454544
//         ##    ~c13.x -> c[6][302] = 100.00%@0.00000000
//         ##    ~c13.y -> c[6][303] = 100.00%@0.00000000
//         ##    ~c13.z -> c[6][304] = 100.00%@0.00000000
//         ##    ~c13.w -> c[6][305] = 100.00%@0.00000000
//         ##    ~c14.x -> c[6][306] = 100.00%@0.45012659
//         ##    ~c14.y -> c[6][307] = 100.00%@0.45012659
//         ##    ~c15.x -> c[6][310] = 100.00%@16.00000000
//         ##    ~c15.y -> c[6][311] = 100.00%@9.00000000
//         ##    ~c15.z -> c[6][312] = 100.00%@0.64999998
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,2560x1600,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Point/Point/Point,Clamp/Clamp/Clamp,0.00000000,2560x1600x0,1/0,A16B16G16R16,0,0,0), 0x00000000,0x000000cd
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,640x400x0,1/0,A16B16G16R16,0,0,0), 0x00000000,0x000000cd
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,640x400x0,1/0,A16B16G16R16,0,0,0), 0x00000000,0x000000cd
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,1,0,0), 0x3290f250,0x000000cd
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 1 : 
//          (attr 1 2 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r44, c[6][250]
//         movr r44.x, constant(-0.00019531, -0.00019531, -0.00019531, -0.00019531).x
//         movr r44.y, constant(-0.00031250, -0.00031250, -0.00031250, -0.00031250).x
//         movr r44.z, constant(0.99980468, 0.99980468, 0.99980468, 0.99980468).x
//         movr r44.w, constant(0.89968753, 0.89968753, 0.89968753, 0.89968753).x
//         maxr r5.xy, v1.zwzw, r44
//         movr r45, c[6][250].zwzw
//         movr r45.x, constant(0.99980468, 0.99980468, 0.99980468, 0.99980468).x
//         movr r45.y, constant(0.89968753, 0.89968753, 0.89968753, 0.89968753).x
//         movr r45.z, constant(0.99980468, 0.99980468, 0.99980468, 0.99980468).x
//         movr r45.w, constant(0.89968753, 0.89968753, 0.89968753, 0.89968753).x
//         minr r6.xy, r45, r5
//         texr r5, r6.xyyy, #0, #0, 2D
//         movr r44, c[6][252].z
//         movr r44.x, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r44.y, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r44.z, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r44.w, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r43, -c[6][252].w
//         movr r43.x, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         movr r43.y, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         movr r43.z, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         movr r43.w, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         madr r5.w, r5.w, r44, r43
//         rcpr r5.w, r5.w
//         minr r6.x, r5.w, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).x
//         addh r5.w, -r6.x, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).x
//         movr r6.x, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).x
//         movr r44, -c[6][254].x
//         movr r44.x, -constant(500.00000000, 500.00000000, 500.00000000, 500.00000000).x
//         movr r44.y, -constant(500.00000000, 500.00000000, 500.00000000, 500.00000000).x
//         movr r44.z, -constant(500.00000000, 500.00000000, 500.00000000, 500.00000000).x
//         movr r44.w, -constant(500.00000000, 500.00000000, 500.00000000, 500.00000000).x
//         addr r6.x, r6.x, r44
//         addr r5.w, -r5.w, r6.x
//         texh r7, v1.zwzz, #0, #0, 2D
//         movr r44, c[6][252].z
//         movr r44.x, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r44.y, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r44.z, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r44.w, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r43, -c[6][252].w
//         movr r43.x, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         movr r43.y, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         movr r43.z, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         movr r43.w, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         madr r6.y, r7.w, r44, r43
//         rcph r6.y, r6.y
//         minr r7.w, r6.y, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).x
//         addh r6.z, -r7.w, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).x
//         addr r6.x, r6.x, -r6.z
//         cmph r6.x, r6.x, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).y, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).z
//         cmph r5.w, r5.w, r6.x, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).z
//         addr r6.xzw, r7.xyyz, r7.xyyz
//         madh r5.xyz, r5, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).w, r6.xzww
//         madh r5.xyz, r5, constant(0.20000000, 4.00000000, 0.00010000, 0.00000000).x, -r7
//         madh r5.xyz, r5.w, r5, r7
//         texh r7, v2.xyzz, #2, #2, 2D
//         addh r5.xyz, r5, r7
//         movr r44, c[6][255].zyyw
//         movr r44.x, constant(100000.00000000, 100000.00000000, 100000.00000000, 100000.00000000).x
//         movr r44.y, constant(100.00000000, 100.00000000, 100.00000000, 100.00000000).x
//         movr r44.z, constant(100.00000000, 100.00000000, 100.00000000, 100.00000000).x
//         movr r44.w, constant(5000000.00000000, 5000000.00000000, 5000000.00000000, 5000000.00000000).x
//         addr r6.xz, -r6.y, r44
//         movr r44, c[6][255]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(100.00000000, 100.00000000, 100.00000000, 100.00000000).x
//         movr r44.z, constant(100000.00000000, 100000.00000000, 100000.00000000, 100000.00000000).x
//         movr r44.w, constant(5000000.00000000, 5000000.00000000, 5000000.00000000, 5000000.00000000).x
//         movr r43, c[6][255].yzzw
//         movr r43.x, constant(100.00000000, 100.00000000, 100.00000000, 100.00000000).x
//         movr r43.y, constant(100000.00000000, 100000.00000000, 100000.00000000, 100000.00000000).x
//         movr r43.z, constant(100000.00000000, 100000.00000000, 100000.00000000, 100000.00000000).x
//         movr r43.w, constant(5000000.00000000, 5000000.00000000, 5000000.00000000, 5000000.00000000).x
//         cmpr r7.xy, r6.z, r44, r43
//         movr r43, c[6][255].zwzw
//         movr r43.x, constant(100000.00000000, 100000.00000000, 100000.00000000, 100000.00000000).x
//         movr r43.y, constant(5000000.00000000, 5000000.00000000, 5000000.00000000, 5000000.00000000).x
//         movr r43.z, constant(100000.00000000, 100000.00000000, 100000.00000000, 100000.00000000).x
//         movr r43.w, constant(5000000.00000000, 5000000.00000000, 5000000.00000000, 5000000.00000000).x
//         cmpr r7.xy, r6.x, r7, r43
//         addr r5.w, r6.y, -r7.x
//         addr r6.y, -r7.x, r7.y
//         rcpr r6.y, r6.y
//         mulr_sat r5.w, r5.w, r6.y
//         movr r44, c[6][256].xxyw
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43, c[6][256]
//         movr r43.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         cmpr r6.yz, r6.z, r44, r43
//         movr r43, c[6][256].zwzw
//         movr r43.x, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         cmpr r6.xy, r6.x, r6.yzzw, r43
//         lrpr r7.x, r5.w, r6.y, r6.x
//         addh_sat r5.w, -r7.x, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).y
//         texr r6, v2.xyzz, #1, #1, 2D
//         mulh r6.xyz, r6, constant(0.20000000, 4.00000000, 0.00010000, 0.00000000).y
//         madh r6.w, r6.w, constant(0.20000000, 4.00000000, 0.00010000, 0.00000000).y, r5.w
//         madh r5.xyz, r5, r5.w, r6
//         rcpr r5.w, r6.w
//         movr r43, -c[6][257]
//         movr r43.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madr_sat r5.xyz, r5, r5.w, r43
//         movr r44, c[6][258]
//         movr r44.x, constant(1.25000000, 1.25000000, 1.25000000, 1.25000000).x
//         movr r44.y, constant(1.33333337, 1.33333337, 1.33333337, 1.33333337).x
//         movr r44.z, constant(1.42857146, 1.42857146, 1.42857146, 1.42857146).x
//         mulr r5.xyz, r5, r44
//         maxr r6.xyz, r5, constant(0.20000000, 4.00000000, 0.00010000, 0.00000000).z
//         lg2r r5.x, |r6.x|
//         lg2r r5.y, |r6.y|
//         lg2r r5.z, |r6.z|
//         movr r44, c[6][259]
//         movr r44.x, constant(1.10000002, 1.10000002, 1.10000002, 1.10000002).x
//         movr r44.y, constant(1.10000002, 1.10000002, 1.10000002, 1.10000002).x
//         movr r44.z, constant(1.10000002, 1.10000002, 1.10000002, 1.10000002).x
//         mulr r5.xyz, r5, r44
//         ex2h r6.x, r5.x
//         ex2h r6.y, r5.y
//         ex2h r6.z, r5.z
//         movr r44, c[6][260]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         dp3h r5.x, r6, r44
//         movr r44, c[6][257].w
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madh r5.xyz, r6, r44, r5.x
//         movr r44, c[6][262]
//         movr r44.x, constant(0.94662237, 0.94662237, 0.94662237, 0.94662237).x
//         movr r44.y, constant(0.94662237, 0.94662237, 0.94662237, 0.94662237).x
//         movr r44.z, constant(0.94662237, 0.94662237, 0.94662237, 0.94662237).x
//         movr r44.w, constant(0.45454544, 0.45454544, 0.45454544, 0.45454544).x
//         mulr r6.xyz, r5, r44
//         movr r45, c[6][262]
//         movr r45.x, constant(0.94662237, 0.94662237, 0.94662237, 0.94662237).x
//         movr r45.y, constant(0.94662237, 0.94662237, 0.94662237, 0.94662237).x
//         movr r45.z, constant(0.94662237, 0.94662237, 0.94662237, 0.94662237).x
//         movr r45.w, constant(0.45454544, 0.45454544, 0.45454544, 0.45454544).x
//         movr r7.xyz, r45
//         movr r43, c[6][263]
//         movr r43.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r5.xyz, r5, -r7, r43
//         movr r45, c[6][263].w
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r5.xyz, r45, r5, r6
//         movr r44, c[6][261]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addh r5.xyz, r5, r44
//         movr r44, c[6][265].z
//         movr r44.x, constant(0.64999998, 0.64999998, 0.64999998, 0.64999998).x
//         movr r44.y, constant(0.64999998, 0.64999998, 0.64999998, 0.64999998).x
//         movr r44.z, constant(0.64999998, 0.64999998, 0.64999998, 0.64999998).x
//         movr r44.w, constant(0.64999998, 0.64999998, 0.64999998, 0.64999998).x
//         madr r6.xyz, r5, r44, -r5
//         movr r45, c[6][264]
//         movr r45.x, constant(0.45012659, 0.45012659, 0.45012659, 0.45012659).x
//         movr r45.y, constant(0.45012659, 0.45012659, 0.45012659, 0.45012659).x
//         addr r7.xy, r45, v1.zwzw
//         movr r44, c[6][265]
//         movr r44.x, constant(16.00000000, 16.00000000, 16.00000000, 16.00000000).x
//         movr r44.y, constant(9.00000000, 9.00000000, 9.00000000, 9.00000000).x
//         movr r44.z, constant(0.64999998, 0.64999998, 0.64999998, 0.64999998).x
//         mulh r7.xy, r7, r44
//         texh r7, r7.xyzz, #3, #3, 2D
//         madr_sat r5.xyz, r7.x, r6, r5
//         maxr r6.xyz, r5, constant(0.20000000, 4.00000000, 0.00010000, 0.00000000).z
//         lg2r r5.x, |r6.x|
//         lg2r r5.y, |r6.y|
//         lg2r r5.z, |r6.z|
//         movr r44, c[6][262].w
//         movr r44.x, constant(0.45454544, 0.45454544, 0.45454544, 0.45454544).x
//         movr r44.y, constant(0.45454544, 0.45454544, 0.45454544, 0.45454544).x
//         movr r44.z, constant(0.45454544, 0.45454544, 0.45454544, 0.45454544).x
//         movr r44.w, constant(0.45454544, 0.45454544, 0.45454544, 0.45454544).x
//         mulr r5.xyz, r5, r44
//         ex2r r0.x, r5.x
//         ex2r r0.y, r5.y
//         ex2r r0.z, r5.z
//         movr r0.w, constant(65504.00000000, 1.00000000, 0.00000000, 3.00000000).z
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R3, -0x482e13dc;          # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R0, R0;                 # [  2][000010]
//     	IPA.SC R12, a[0x308], R0;        # [  3][000018] FIXED_FNC_TEXTURE_0_R
//     	FMNMX.FTZ R1, R12, c[0x9][0x0], !PT; # [  4][000020]
//     	IPA.SC R13, a[0x30c], R0;        # [  5][000028] FIXED_FNC_TEXTURE_0_Q
//     	FMNMX.FTZ R4, R1, c[0x9][0xc], PT; # [  6][000030]
//     	FMNMX.FTZ R2, R13, c[0x9][0x4], !PT; # [  7][000038]
//     	FMNMX.FTZ R5, R2, c[0x9][0x8], PT; # [  8][000040]
//     	IPA.SC R1, a[0x314], R0;         # [  9][000048] FIXED_FNC_TEXTURE_1_T
//     	MOV32I R2, 0x42c80000;           # [ 10][000050]
//     	TEX.NODEP R4, R4, 0x0, 0x0, 2D;  # [ 11][000058]
//     	TEX.NODEP.P R8, R12, 0x0, 0x0, 2D; # [ 12][000060]
//     	FADD32I.FTZ R13, R13, 0x3ee676fe; # [ 13][000068]
//     	IPA.SC R0, a[0x310], R0;         # [ 14][000070] TEX1
//     	FFMA.FMZ R7, R7, c[0x9][0x10], R3; # [ 15][000078]
//     	FFMA.FMZ R3, R11, c[0x9][0x10], R3; # [ 16][000080]
//     	FADD.FTZ R14, R8, R8;            # [ 17][000088]
//     	MUFU.RCP R11, R3;                # [ 18][000090]
//     	FADD.FTZ R15, R9, R9;            # [ 19][000098]
//     	FFMA.FMZ R14, R4, 3, R14;        # [ 20][0000a0]
//     	FADD.FTZ R3, R10, R10;           # [ 21][0000a8]
//     	FADD.FTZ R4, -R11, 100;          # [ 22][0000b0]
//     	FFMA.FMZ R18, R5, 3, R15;        # [ 23][0000b8]
//     	FFMA.FMZ R19, R6, 3, R3;         # [ 24][0000c0]
//     	FCMP.GE R5, R2, 0x47c35, R4;     # [ 25][0000c8]
//     	FCMP.GE R2, RZ, 0x42c80, R4;     # [ 26][0000d0]
//     	FADD.FTZ R3, -R11, 100000;       # [ 27][0000d8]
//     	FCMP.LTU R15, RZ, 0x3f800, R4;   # [ 28][0000e0]
//     	FCMP.GE R6, RZ, 0x3f000, R4;     # [ 29][0000e8]
//     	FCMP.GE R5, R5, c[0x9][0x18], R3; # [ 30][0000f0]
//     	FCMP.GE R2, R2, 0x47c35, R3;     # [ 31][0000f8]
//     	FCMP.GE R17, R15, 0x3f000, R3;   # [ 32][000100]
//     	FCMP.GE R16, R6, RZ, R3;         # [ 33][000108]
//     	FADD.FTZ R4, -R2, R5;            # [ 34][000110]
//     	FADD32I.FTZ R12, R12, 0x3ee676fe; # [ 35][000118]
//     	FADD.FTZ R2, R11, -R2;           # [ 36][000120]
//     	MUFU.RCP R3, R4;                 # [ 37][000128]
//     	FMUL.FMZ R13, R13, 9;            # [ 38][000130]
//     	TEX.NODEP.T R4, R0, 0x2, 0x2, 2D, 0x7; # [ 39][000138]
//     	FMUL.FMZ.SAT R15, R2, R3;        # [ 40][000140]
//     	FMUL.FMZ R12, R12, 16;           # [ 41][000148]
//     	MUFU.RCP R7, R7;                 # [ 42][000150]
//     	TEX.NODEP.T R0, R0, 0x1, 0x1, 2D; # [ 43][000158]
//     	FMNMX.FTZ R11, R11, 65504, PT;   # [ 44][000160]
//     	TEX.NODEP.P R12, R12, 0x3, 0x3, 2D, 0x1; # [ 45][000168]
//     	FADD.FTZ R13, R11, -500;         # [ 46][000170]
//     	FMNMX.FTZ R11, R7, 65504, PT;    # [ 47][000178]
//     	FCMP.LTU R7, RZ, 0x3f800, R13;   # [ 48][000180]
//     	FADD.FTZ R11, R11, -500;         # [ 49][000188]
//     	FADD.FTZ R13, R16, -R17;         # [ 50][000190]
//     	FCMP.GE R7, R7, RZ, R11;         # [ 51][000198]
//     	FFMA.FMZ R16, R19, c[0x9][0x14], -R10; # [ 52][0001a0]
//     	FFMA.FTZ R11, R15, R13, R17;     # [ 53][0001a8]
//     	FFMA.FMZ R15, R18, c[0x9][0x14], -R9; # [ 54][0001b0]
//     	FFMA.FMZ R13, R14, c[0x9][0x14], -R8; # [ 55][0001b8]
//     	FFMA.FMZ R10, R7, R16, R10;      # [ 56][0001c0]
//     	FFMA.FMZ R9, R7, R15, R9;        # [ 57][0001c8]
//     	FFMA.FMZ R8, R7, R13, R8;        # [ 58][0001d0]
//     	FADD.FTZ.SAT R7, -R11, 1;        # [ 59][0001d8]
//     	FADD.FTZ R10, R10, R6;           # [ 60][0001e0]
//     	FADD.FTZ R5, R9, R5;             # [ 61][0001e8]
//     	FADD.FTZ R4, R8, R4;             # [ 62][0001f0]
//     	FFMA.FMZ R3, R3, 4, R7;          # [ 63][0001f8]
//     	FMUL.FMZ R6, R1, 4;              # [ 64][000200]
//     	FMUL.FMZ R0, R0, 4;              # [ 65][000208]
//     	FMUL.FMZ R8, R2, 4;              # [ 66][000210]
//     	MUFU.RCP R1, R3;                 # [ 67][000218]
//     	FFMA.FMZ R2, R5, R7, R6;         # [ 68][000220]
//     	FFMA.FMZ R0, R4, R7, R0;         # [ 69][000228]
//     	FFMA.FMZ R3, R10, R7, R8;        # [ 70][000230]
//     	FMUL.FMZ.SAT R2, R2, R1;         # [ 71][000238]
//     	FMUL.FMZ.SAT R0, R0, R1;         # [ 72][000240]
//     	FMUL.FMZ.SAT R3, R3, R1;         # [ 73][000248]
//     	FMUL32I.FMZ R1, R2, 0x3faaaaab;  # [ 74][000250]
//     	FMUL.FMZ R0, R0, 1.25;           # [ 75][000258]
//     	FMUL32I.FMZ R2, R3, 0x3fb6db6e;  # [ 76][000260]
//     	FMNMX.FTZ R0, R0, c[0x9][0x1c], !PT; # [ 77][000268]
//     	FMNMX.FTZ R1, R1, c[0x9][0x1c], !PT; # [ 78][000270]
//     	FMNMX.FTZ R2, R2, c[0x9][0x1c], !PT; # [ 79][000278]
//     	MUFU.LG2 R0, |R0|;               # [ 80][000280]
//     	MUFU.LG2 R1, |R1|;               # [ 81][000288]
//     	MUFU.LG2 R2, |R2|;               # [ 82][000290]
//     	FMUL32I.FMZ R0, R0, 1.1;         # [ 83][000298]
//     	FMUL32I.FMZ R1, R1, 1.1;         # [ 84][0002a0]
//     	FMUL32I.FMZ R2, R2, 1.1;         # [ 85][0002a8]
//     	RRO.EX2 R0, R0;                  # [ 86][0002b0]
//     	RRO.EX2 R1, R1;                  # [ 87][0002b8]
//     	RRO.EX2 R2, R2;                  # [ 88][0002c0]
//     	MUFU.EX2 R0, R0;                 # [ 89][0002c8]
//     	MUFU.EX2 R1, R1;                 # [ 90][0002d0]
//     	MUFU.EX2 R2, R2;                 # [ 91][0002d8]
//     	FMUL32I.FMZ R3, R0, 0x3f7255d8;  # [ 92][0002e0]
//     	FMUL32I.FMZ R4, R1, 0x3f7255d8;  # [ 93][0002e8]
//     	FMUL32I.FMZ R5, R2, 0x3f7255d8;  # [ 94][0002f0]
//     	FFMA.FMZ R0, R0, c[0x9][0x20], -R3; # [ 95][0002f8]
//     	FFMA.FMZ R1, R1, c[0x9][0x20], -R4; # [ 96][000300]
//     	FFMA.FMZ R2, R2, c[0x9][0x20], -R5; # [ 97][000308]
//     	FFMA.FMZ.SAT R0, R12, R0, R3;    # [ 98][000310]
//     	FFMA.FMZ.SAT R1, R12, R1, R4;    # [ 99][000318]
//     	FFMA.FMZ.SAT R2, R12, R2, R5;    # [100][000320]
//     	FMNMX.FTZ R0, R0, c[0x9][0x1c], !PT; # [101][000328]
//     	FMNMX.FTZ R1, R1, c[0x9][0x1c], !PT; # [102][000330]
//     	FMNMX.FTZ R2, R2, c[0x9][0x1c], !PT; # [103][000338]
//     	MUFU.LG2 R0, |R0|;               # [104][000340]
//     	MUFU.LG2 R1, |R1|;               # [105][000348]
//     	MUFU.LG2 R2, |R2|;               # [106][000350]
//     	FMUL32I.FMZ R0, R0, 0x3ee8ba2e;  # [107][000358]
//     	FMUL32I.FMZ R1, R1, 0x3ee8ba2e;  # [108][000360]
//     	FMUL32I.FMZ R2, R2, 0x3ee8ba2e;  # [109][000368]
//     	RRO.EX2 R0, R0;                  # [110][000370]
//     	RRO.EX2 R1, R1;                  # [111][000378]
//     	RRO.EX2 R2, R2;                  # [112][000380]
//     	MOV R3, RZ;                      # [113][000388]
//     	MUFU.EX2 R0, R0;                 # [114][000390]
//     	MUFU.EX2 R1, R1;                 # [115][000398]
//     	MUFU.EX2 R2, R2;                 # [116][0003a0]
//     	EXIT;                            # [117][0003a8]
//     	END
//     END_SECTION
// END_SHADER
// 
