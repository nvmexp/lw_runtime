// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x5576ca8a9c0c8ca9
//         UCODE_HASH: 0xe56d3ec848a898fb
//         POOL: APP
//         VERSION: 20
//         # USES: 1041
//         // Time: 67.119ms [9.021 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 30
//         USED_TEXTURE_BITS: 0x8089
//         TEXTURE_SLOTS: 16
//         SAMPLER_SLOTS: 16
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//             TEX07_S              PERSPECTIVE
//             TEX07_T              PERSPECTIVE
//             TEX07_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0xb0000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x2a2a0a0a
//         0x2a202a2a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c0, 0.30000001, 0.58999997, 0.11000000, 1.00000000 ; 0x3e99999a 0x3f170a3d 0x3de147ae 0x3f800000
        def c2, 2.00000000, -1.00000000, 0.50000000, 0.00000000 ; 0x40000000 0xbf800000 0x3f000000 0x80000000
        def c3, 150.00000000, 0.00000000, 0.00000000, 0.00000000 ; 0x43160000 0x000000 0x000000 0x000000
        dcl_texcoord0 v0.rg
        dcl_texcoord1 v1.rg
        dcl_texcoord2 v2.rgb
        dcl_texcoord3 v3.rgb
        dcl_texcoord4 v4.rgb
        dcl_texcoord5 v5.rgb
        dcl_texcoord6 v6.b
        dcl_texcoord7 v7.rgb
        dcl vPos.rg
        dcl_2d s0
        dcl_2d s3
        dcl_2d s7
        dcl_2d s15
        mul oC0.w, c29.w, v6.z
        abs r0.x, c10.z
        texld r1, v0, s7
        add r0.y, -r1.x, c0.w
        mad r0.y, r1.x, c3.x, r0.y
        cmp r0.x, -r0.x, r0.y, c10.z
        add r0.yzw, c21.xxyz, -v7.xxyz
        nrm r2.xyz, r0.yzw
        texld r3, v0, s3
        mad r0.yzw, r3.xxyz, c2.x, c2.y
        mul r1.xzw, r0.z, v4.xyyz
        mad r1.xzw, v3.xyyz, r0.y, r1
        mad r0.yzw, v5.xxyz, r0.w, r1.xxzw
        nrm r3.xyz, r0.yzw
        nrm r4.xyz, v2
        dp3 r0.y, -r4, r3
        add r0.y, r0.y, r0.y
        mad r0.yzw, r3.xxyz, -r0.y, -r4.xxyz
        dp3_sat r1.x, r3, r4
        dp3_sat r1.z, r0.yzw, r2
        dp3 r1.w, r3, r2
        pow r2.x, r1.z, r0.x
        mov_sat r1.z, r1.w
        mad_sat r1.w, r1.w, c2.z, c2.z
        mul r1.z, r2.x, r1.z
        add r2.xyz, c23, -v7
        nrm r4.xyz, r2
        dp3_sat r0.y, r0.yzw, r4
        dp3 r0.z, r3, r4
        pow r2.x, r0.y, r0.x
        mov_sat r0.x, r0.z
        mad_sat r0.y, r0.z, c2.z, c2.z
        mul r0.x, r2.x, r0.x
        mul r2.xyz, c22, v1.y
        mul r0.xzw, r0.x, r2.xyyz
        mul r4.xyz, c20, v1.x
        mad r0.xzw, r1.z, r4.xyyz, r0
        texld r5, v0, s0
        lrp r1.z, c27.x, r5.w, r3.w
        dp3 r2.w, r5, c0
        lrp r3.w, c10.y, r2.w, r1.z
        mul r1.z, r3.w, c19.w
        lrp r6.xyz, r1.y, r5, c0.w
        cmp r6.xyz, c26.x, c26, r6
        mul r6.xyz, r1.z, r6
        mul r0.xzw, r0, r6.xyyz
        cmp r6.xyz, r3, -c2.w, -c2.y
        mul r3.xyz, r3, r3
        add r7.xyz, -r6, c0.w
        mul r6.xyz, r6, r3
        mul r3.xyz, r3, r7
        mul r7.xyz, r6.x, c5
        mad r7.xyz, r3.x, c4, r7
        mad r3.xyw, r3.y, c6.xyz, r7.xyz
        mad r3.xyw, r6.y, c7.xyz, r3
        mad r3.xyz, r3.z, c8, r3.xyw
        mad r3.xyz, r6.z, c9, r3
        mul r1.y, r1.w, r1.w
        mad r1.yzw, r4.xxyz, r1.y, r3.xxyz
        mul r0.y, r0.y, r0.y
        mad r1.yzw, r2.xxyz, r0.y, r1
        mul r1.yzw, r1, c1.xxyz
        mul r1.yzw, r5.xxyz, r1
        add r0.y, -r1.x, c0.w
        mad r1.x, r0.y, -r0.y, c2.z
        mul r0.y, r0.y, r0.y
        add r2.x, r0.y, r0.y
        mad r0.y, r0.y, c2.x, c2.y
        add r2.y, -c19.x, c19.y
        mad r2.x, r2.x, r2.y, c19.x
        lrp r2.y, r0.y, c19.z, c19.y
        cmp r0.y, r1.x, r2.x, r2.y
        mad r0.xyz, r0.xzw, r0.y, r1.yzw
        mad r1.xy, vPos, c32, c32.zwzw
        texld r1, r1, s15
        add r0.w, r1.x, -c0.w
        mov r1.w, c0.w
        mad r0.w, c11.w, r0.w, r1.w
        mul r0.xyz, r0, r0.w
        mul r1.xyz, r0, c30.x
        mov r2.x, c30.x
        mad r0.xyz, r0, -r2.x, c29
        add r2.xy, c11, -v7
        dp2add r0.w, r2, r2, -c2.w
        rsq r0.w, r0.w
        rcp r0.w, r0.w
        mad_sat r0.w, r0.w, c12.w, c12.x
        min r1.w, r0.w, c12.z
        mul r0.w, r1.w, r1.w
        mad oC0.xyz, r0.w, r0, r1
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0x3e99999a 0x3f170a3d
//         0x3de147ae 0x3f800000 0x05000051 0xa00f0002
//         0x40000000 0xbf800000 0x3f000000 0x80000000
//         0x05000051 0xa00f0003 0x43160000 0x00000000
//         0x00000000 0x00000000 0x0200001f 0x80000005
//         0x90030000 0x0200001f 0x80010005 0x90030001
//         0x0200001f 0x80020005 0x90070002 0x0200001f
//         0x80030005 0x90070003 0x0200001f 0x80040005
//         0x90070004 0x0200001f 0x80050005 0x90070005
//         0x0200001f 0x80060005 0x90040006 0x0200001f
//         0x80070005 0x90070007 0x0200001f 0x80000000
//         0x90031000 0x0200001f 0x90000000 0xa00f0800
//         0x0200001f 0x90000000 0xa00f0803 0x0200001f
//         0x90000000 0xa00f0807 0x0200001f 0x90000000
//         0xa00f080f 0x03000005 0x80080800 0xa0ff001d
//         0x90aa0006 0x02000023 0x80010000 0xa0aa000a
//         0x03000042 0x800f0001 0x90e40000 0xa0e40807
//         0x03000002 0x80020000 0x81000001 0xa0ff0000
//         0x04000004 0x80020000 0x80000001 0xa0000003
//         0x80550000 0x04000058 0x80010000 0x81000000
//         0x80550000 0xa0aa000a 0x03000002 0x800e0000
//         0xa0900015 0x91900007 0x02000024 0x80070002
//         0x80f90000 0x03000042 0x800f0003 0x90e40000
//         0xa0e40803 0x04000004 0x800e0000 0x80900003
//         0xa0000002 0xa0550002 0x03000005 0x800d0001
//         0x80aa0000 0x90940004 0x04000004 0x800d0001
//         0x90940003 0x80550000 0x80e40001 0x04000004
//         0x800e0000 0x90900005 0x80ff0000 0x80e00001
//         0x02000024 0x80070003 0x80f90000 0x02000024
//         0x80070004 0x90e40002 0x03000008 0x80020000
//         0x81e40004 0x80e40003 0x03000002 0x80020000
//         0x80550000 0x80550000 0x04000004 0x800e0000
//         0x80900003 0x81550000 0x81900004 0x03000008
//         0x80110001 0x80e40003 0x80e40004 0x03000008
//         0x80140001 0x80f90000 0x80e40002 0x03000008
//         0x80080001 0x80e40003 0x80e40002 0x03000020
//         0x80010002 0x80aa0001 0x80000000 0x02000001
//         0x80140001 0x80ff0001 0x04000004 0x80180001
//         0x80ff0001 0xa0aa0002 0xa0aa0002 0x03000005
//         0x80040001 0x80000002 0x80aa0001 0x03000002
//         0x80070002 0xa0e40017 0x91e40007 0x02000024
//         0x80070004 0x80e40002 0x03000008 0x80120000
//         0x80f90000 0x80e40004 0x03000008 0x80040000
//         0x80e40003 0x80e40004 0x03000020 0x80010002
//         0x80550000 0x80000000 0x02000001 0x80110000
//         0x80aa0000 0x04000004 0x80120000 0x80aa0000
//         0xa0aa0002 0xa0aa0002 0x03000005 0x80010000
//         0x80000002 0x80000000 0x03000005 0x80070002
//         0xa0e40016 0x90550001 0x03000005 0x800d0000
//         0x80000000 0x80940002 0x03000005 0x80070004
//         0xa0e40014 0x90000001 0x04000004 0x800d0000
//         0x80aa0001 0x80940004 0x80e40000 0x03000042
//         0x800f0005 0x90e40000 0xa0e40800 0x04000012
//         0x80040001 0xa000001b 0x80ff0005 0x80ff0003
//         0x03000008 0x80080002 0x80e40005 0xa0e40000
//         0x04000012 0x80080003 0xa055000a 0x80ff0002
//         0x80aa0001 0x03000005 0x80040001 0x80ff0003
//         0xa0ff0013 0x04000012 0x80070006 0x80550001
//         0x80e40005 0xa0ff0000 0x04000058 0x80070006
//         0xa000001a 0xa0e4001a 0x80e40006 0x03000005
//         0x80070006 0x80aa0001 0x80e40006 0x03000005
//         0x800d0000 0x80e40000 0x80940006 0x04000058
//         0x80070006 0x80e40003 0xa1ff0002 0xa1550002
//         0x03000005 0x80070003 0x80e40003 0x80e40003
//         0x03000002 0x80070007 0x81e40006 0xa0ff0000
//         0x03000005 0x80070006 0x80e40006 0x80e40003
//         0x03000005 0x80070003 0x80e40003 0x80e40007
//         0x03000005 0x80070007 0x80000006 0xa0e40005
//         0x04000004 0x80070007 0x80000003 0xa0e40004
//         0x80e40007 0x04000004 0x800b0003 0x80550003
//         0xa0a40006 0x80a40007 0x04000004 0x800b0003
//         0x80550006 0xa0a40007 0x80e40003 0x04000004
//         0x80070003 0x80aa0003 0xa0e40008 0x80f40003
//         0x04000004 0x80070003 0x80aa0006 0xa0e40009
//         0x80e40003 0x03000005 0x80020001 0x80ff0001
//         0x80ff0001 0x04000004 0x800e0001 0x80900004
//         0x80550001 0x80900003 0x03000005 0x80020000
//         0x80550000 0x80550000 0x04000004 0x800e0001
//         0x80900002 0x80550000 0x80e40001 0x03000005
//         0x800e0001 0x80e40001 0xa0900001 0x03000005
//         0x800e0001 0x80900005 0x80e40001 0x03000002
//         0x80020000 0x81000001 0xa0ff0000 0x04000004
//         0x80010001 0x80550000 0x81550000 0xa0aa0002
//         0x03000005 0x80020000 0x80550000 0x80550000
//         0x03000002 0x80010002 0x80550000 0x80550000
//         0x04000004 0x80020000 0x80550000 0xa0000002
//         0xa0550002 0x03000002 0x80020002 0xa1000013
//         0xa0550013 0x04000004 0x80010002 0x80000002
//         0x80550002 0xa0000013 0x04000012 0x80020002
//         0x80550000 0xa0aa0013 0xa0550013 0x04000058
//         0x80020000 0x80000001 0x80000002 0x80550002
//         0x04000004 0x80070000 0x80f80000 0x80550000
//         0x80f90001 0x04000004 0x80030001 0x90e41000
//         0xa0e40020 0xa0ee0020 0x03000042 0x800f0001
//         0x80e40001 0xa0e4080f 0x03000002 0x80080000
//         0x80000001 0xa1ff0000 0x02000001 0x80080001
//         0xa0ff0000 0x04000004 0x80080000 0xa0ff000b
//         0x80ff0000 0x80ff0001 0x03000005 0x80070000
//         0x80e40000 0x80ff0000 0x03000005 0x80070001
//         0x80e40000 0xa000001e 0x02000001 0x80010002
//         0xa000001e 0x04000004 0x80070000 0x80e40000
//         0x81000002 0xa0e4001d 0x03000002 0x80030002
//         0xa0e4000b 0x91e40007 0x0400005a 0x80080000
//         0x80e40002 0x80e40002 0xa1ff0002 0x02000007
//         0x80080000 0x80ff0000 0x02000006 0x80080000
//         0x80ff0000 0x04000004 0x80180000 0x80ff0000
//         0xa0ff000c 0xa000000c 0x0300000a 0x80080001
//         0x80ff0000 0xa0aa000c 0x03000005 0x80080000
//         0x80ff0001 0x80ff0001 0x04000004 0x80070800
//         0x80ff0000 0x80e40000 0x80e40001 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f170a3d // 0.58999997
//         COP_CONST[1]: 0x3de147ae // 0.11000000
//         COP_CONST[2]: 0x3a5a740e // 0.00083333
//         COP_CONST[3]: 0x3a088889 // 0.00052083
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][294] = 0x44fa8100 // 2004.03125000
//         # USER FLOAT CONST: c[6][295] = 0x445c4599 // 881.08746338
//         # USER FLOAT CONST: c[6][334] = 0x44fe0000 // 2032.00000000
//         # USER FLOAT CONST: c[6][335] = 0x446b0000 // 940.00000000
//         # USER FLOAT CONST: c[6][336] = 0x438a6000 // 276.75000000
//         # USER FLOAT CONST: c[6][342] = 0x44fe0000 // 2032.00000000
//         # USER FLOAT CONST: c[6][343] = 0x446b0000 // 940.00000000
//         # USER FLOAT CONST: c[6][344] = 0x43816000 // 258.75000000
//         # USER FLOAT CONST: c[6][356] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][358] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][369] = 0x3baaaaab // 0.00520833
//         # USER FLOAT CONST: c[6][370] = 0x40a133a1 // 5.03755236
//         # USER FLOAT CONST: c[6][378] = 0x3a088889 // 0.00052083
//         # USER FLOAT CONST: c[6][379] = 0x3a5a740e // 0.00083333
//         # USER FLOAT CONST: c[6][380] = 0x39888889 // 0.00026042
//         # USER FLOAT CONST: c[6][381] = 0x39da740e // 0.00041667
//         ## USER CONST histogram
//         ##     c1.x -> c[6][254] = 59.94%@3.00000000 30.07%@1.00000000 9.99%@1.50000000
//         ##     c1.y -> c[6][255] = 59.94%@3.00000000 30.07%@1.00000000 9.99%@1.50000000
//         ##     c1.z -> c[6][256] = 59.94%@3.00000000 30.07%@1.00000000 9.99%@1.50000000
//         ##     c4.x -> c[6][266] = 10.09%@0.00466919 9.99%@0.00464174 9.99%@0.00466875 9.99%@0.00466927 9.99%@0.00457664 9.99%@0.00466928 9.99%@0.00024171
//         ##     c4.y -> c[6][267] = 10.09%@0.00195313 9.99%@0.00194182 9.99%@0.00195296 9.99%@0.00195318 9.99%@0.00191095 9.99%@0.00195319 9.99%@0.00016353
//         ##     c4.z -> c[6][268] = 10.09%@0.00082397 9.99%@0.00081936 9.99%@0.00082391 9.99%@0.00082400 9.99%@0.00080589 9.99%@0.00082401 9.99%@0.00005205
//         ##     c5.x -> c[6][270] = 10.09%@0.00213623 9.99%@0.00217078 9.99%@0.00213689 9.99%@0.00213627 9.99%@0.00223583 9.99%@0.00213630 9.99%@0.00074174
//         ##     c5.y -> c[6][271] = 10.09%@0.00077820 9.99%@0.00079384 9.99%@0.00077850 9.99%@0.00077822 9.99%@0.00082266 9.99%@0.00077824 9.99%@0.00054432
//         ##     c5.z -> c[6][272] = 10.09%@0.00030518 9.99%@0.00031201 9.99%@0.00030531 9.99%@0.00030518 9.99%@0.00032458 9.99%@0.00030519 9.99%@0.00017741
//         ##     c6.x -> c[6][274] = 19.98%@0.01177978 10.09%@0.01177979 9.99%@0.01177966 9.99%@0.01177246 9.99%@0.01175893 9.99%@0.01177977 9.99%@0.00025854
//         ##     c6.y -> c[6][275] = 10.09%@0.00506592 9.99%@0.00506556 9.99%@0.00506593 9.99%@0.00506593 9.99%@0.00506386 9.99%@0.00506592 9.99%@0.00014699
//         ##     c6.z -> c[6][276] = 10.09%@0.00219727 9.99%@0.00219748 9.99%@0.00219728 9.99%@0.00219727 9.99%@0.00219727 9.99%@0.00219727 9.99%@0.00003627
//         ##     c7.x -> c[6][278] = 10.09%@0.00136566 9.99%@0.00137103 9.99%@0.00136582 9.99%@0.00136573 9.99%@0.00137455 9.99%@0.00136575 9.99%@0.00083998
//         ##     c7.y -> c[6][279] = 10.09%@0.00054932 9.99%@0.00055215 9.99%@0.00054940 9.99%@0.00054935 9.99%@0.00055357 9.99%@0.00054936 9.99%@0.00064992
//         ##     c7.z -> c[6][280] = 10.09%@0.00022125 9.99%@0.00022259 9.99%@0.00022129 9.99%@0.00022127 9.99%@0.00022334 9.99%@0.00022127 9.99%@0.00022963
//         ##     c8.x -> c[6][282] = 10.09%@0.00588989 9.99%@0.00588938 9.99%@0.00588991 9.99%@0.00588993 9.99%@0.00588368 9.99%@0.00588995 9.99%@0.00045554
//         ##     c8.y -> c[6][283] = 10.09%@0.00274658 9.99%@0.00274749 9.99%@0.00274662 9.99%@0.00274661 9.99%@0.00274563 9.99%@0.00274662 9.99%@0.00031641
//         ##     c8.z -> c[6][284] = 10.09%@0.00119019 9.99%@0.00119098 9.99%@0.00119021 9.99%@0.00119020 9.99%@0.00119073 9.99%@0.00119021 9.99%@0.00009845
//         ##     c9.x -> c[6][286] = 10.09%@0.00415039 9.99%@0.00415013 9.99%@0.00415043 9.99%@0.00415043 9.99%@0.00414648 9.99%@0.00415043 9.99%@0.00038206
//         ##     c9.y -> c[6][287] = 10.09%@0.00155640 9.99%@0.00155724 9.99%@0.00155644 9.99%@0.00155642 9.99%@0.00155650 9.99%@0.00155642 9.99%@0.00026336
//         ##     c9.z -> c[6][288] = 10.09%@0.00057983 9.99%@0.00058018 9.99%@0.00057985 9.99%@0.00057984 9.99%@0.00057976 9.99%@0.00057985 9.99%@0.00008632
//         ##     c10.y -> c[6][291] = 69.93%@1.00000000 30.07%@0.00000000
//         ##     c10.z -> c[6][292] = 39.96%@10.00000000 29.97%@20.00000000 20.08%@5.00000000 9.99%@120.00000000
//         ##    ~c11.x -> c[6][294] = 100.00%@2004.03125000
//         ##    ~c11.y -> c[6][295] = 100.00%@881.08746338
//         ##     c11.w -> c[6][297] = 90.01%@1.00000000 9.99%@0.00000000
//         ##     c12.x -> c[6][298] = 80.02%@-0.02627258 19.98%@0.00000000
//         ##     c12.z -> c[6][300] = 80.02%@0.50000000 19.98%@0.00000000
//         ##     c12.w -> c[6][301] = 80.02%@0.00041051 19.98%@0.00000000
//         ##     c19.x -> c[6][326] = 29.97%@5.00000000 29.97%@8.00000000 20.08%@0.30000001 9.99%@10.00000000 9.99%@1.00000000
//         ##     c19.y -> c[6][327] = 29.97%@5.00000000 29.97%@16.00000000 20.08%@0.64999998 9.99%@10.00000000 9.99%@0.50000000
//         ##     c19.z -> c[6][328] = 30.07%@30.00000000 29.97%@16.00000000 29.97%@15.00000000 9.99%@8.00000000
//         ##     c19.w -> c[6][329] = 69.93%@1.00000000 20.08%@1.50000000 9.99%@5.00000000
//         ##     c20.x -> c[6][330] = 59.94%@5053.96093750 30.07%@5053.96240234 9.99%@5053.96142578
//         ##     c20.y -> c[6][331] = 59.94%@3717.89721680 30.07%@3717.89794922 9.99%@3717.89746094
//         ##     c20.z -> c[6][332] = 59.94%@2168.18115234 30.07%@2168.18188477 9.99%@2168.18139648
//         ##    ~c21.x -> c[6][334] = 100.00%@2032.00000000
//         ##    ~c21.y -> c[6][335] = 100.00%@940.00000000
//         ##    ~c21.z -> c[6][336] = 100.00%@276.75000000
//         ##     c22.x -> c[6][338] = 59.94%@168.46537781 30.07%@168.46542358 9.99%@168.46539307
//         ##     c22.y -> c[6][339] = 59.94%@123.92991638 30.07%@123.92993927 9.99%@123.92992401
//         ##     c22.z -> c[6][340] = 59.94%@72.27271271 30.07%@72.27273560 9.99%@72.27272034
//         ##    ~c23.x -> c[6][342] = 100.00%@2032.00000000
//         ##    ~c23.y -> c[6][343] = 100.00%@940.00000000
//         ##    ~c23.z -> c[6][344] = 100.00%@258.75000000
//         ##     c26.x -> c[6][354] = 79.92%@1.00000000 20.08%@0.85000002
//         ##     c26.y -> c[6][355] = 79.92%@1.00000000 20.08%@0.85000002
//         ##    ~c26.z -> c[6][356] = 100.00%@1.00000000
//         ##    ~c27.x -> c[6][358] = 100.00%@0.00000000
//         ##     c29.x -> c[6][366] = 80.02%@0.16067795 19.98%@0.00000000
//         ##     c29.y -> c[6][367] = 80.02%@0.27444726 19.98%@0.00000000
//         ##     c29.z -> c[6][368] = 80.02%@0.31741628 19.98%@0.00000000
//         ##    ~c29.w -> c[6][369] = 100.00%@0.00520833
//         ##    ~c30.x -> c[6][370] = 100.00%@5.03755236
//         ##    ~c32.x -> c[6][378] = 100.00%@0.00052083
//         ##    ~c32.y -> c[6][379] = 100.00%@0.00083333
//         ##    ~c32.z -> c[6][380] = 100.00%@0.00026042
//         ##    ~c32.w -> c[6][381] = 100.00%@0.00041667
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x3,2D,1X)        , (0x7,2D,1X)        , (0xf,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x3,2D,1X)        , (0x7,2D,1X)        , (0xf,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x3,2D,1X)        , (0x7,2D,1X)        , (0xf,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x3,2D,1X)        , (0x7,2D,1X)        , (0xf,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,7/0,DXT1_A1R5G5B5,1,0,0), 0x1ba59bb2,0x000000d1
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x95e5f801,0x000000d1
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,1x1x0,1/0,X8R8G8B8,0,0,0), 0xffffffff,0x000000d1
//         STAGEINFO:(0xf,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,1x1x0,1/0,X8R8G8B8,1,0,0), 0xffffffff,0x000000d1
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,4/0,DXT1_A1R5G5B5,1,0,0), 0x97f2866e,0x00000068
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,5/0,DXT45_A8R8G8B8,0,0,0), 0x6ee4e79d,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,1x1x0,1/0,X8R8G8B8,0,0,0), 0xffffffff,0x00000068
//         STAGEINFO:(0xf,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,1x1x0,1/0,X8R8G8B8,1,0,0), 0xffffffff,0x00000068
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,6/0,DXT1_A1R5G5B5,1,0,0), 0x4e431927,0x00000138
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/None,Wrap/Wrap/Wrap,0.00000000,16x16x0,1/0,X8R8G8B8,0,0,0), 0xa080fe00,0x00000138
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,1x1x0,1/0,X8R8G8B8,0,0,0), 0xffffffff,0x00000138
//         STAGEINFO:(0xf,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,1x1x0,1/0,X8R8G8B8,1,0,0), 0xffffffff,0x00000138
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,6/0,DXT1_A1R5G5B5,1,0,0), 0xab419a5b,0x000001a0
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/None,Wrap/Wrap/Wrap,0.00000000,16x16x0,1/0,X8R8G8B8,0,0,0), 0xa080fe00,0x000001a0
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,1x1x0,1/0,X8R8G8B8,0,0,0), 0xffffffff,0x000001a0
//         STAGEINFO:(0xf,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,1x1x0,1/0,X8R8G8B8,1,0,0), 0xffffffff,0x000001a0
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x10 0 4 "COL1")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 1 : 
//          (attr 1 8 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r45, c[6][279].w
//         movr r45.x, constant(0.00520833, 0.00520833, 0.00520833, 0.00520833).x
//         movr r45.y, constant(0.00520833, 0.00520833, 0.00520833, 0.00520833).x
//         movr r45.z, constant(0.00520833, 0.00520833, 0.00520833, 0.00520833).x
//         movr r45.w, constant(0.00520833, 0.00520833, 0.00520833, 0.00520833).x
//         mulr r0.w, r45, v7.z
//         movr r5.x, |c[6][260].z|
//         texr r6, v1.xyzz, #7, #7, 2D
//         addr r5.y, -r6.x, constant(0.30000001, 0.58999997, 0.11000000, 1.00000000).w
//         madr r5.y, r6.x, constant(150.00000000, 0.00000000, 0.00000000, 0.00000000).x, r5.y
//         cmpr r5.x, -r5.x, r5.y, c[6][260].z
//         movr r45, c[6][271].xxyz
//         movr r45.x, constant(2032.00000000, 2032.00000000, 2032.00000000, 2032.00000000).x
//         movr r45.y, constant(2032.00000000, 2032.00000000, 2032.00000000, 2032.00000000).x
//         movr r45.z, constant(940.00000000, 940.00000000, 940.00000000, 940.00000000).x
//         movr r45.w, constant(276.75000000, 276.75000000, 276.75000000, 276.75000000).x
//         addr r5.yzw, r45, -v8.xxyz
//         nrmr r7.xyz, r5.yzww
//         texr r8, v1.xyzz, #3, #3, 2D
//         madr r5.yzw, r8.xxyz, constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).x, constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).y
//         mulr r6.xzw, r5.z, v5.xyyz
//         madr r6.xzw, v4.xyyz, r5.y, r6
//         madr r5.yzw, v6.xxyz, r5.w, r6.xxzw
//         nrmr r8.xyz, r5.yzww
//         nrmr r9.xyz, v3
//         dp3r r5.y, -r9, r8
//         addr r5.y, r5.y, r5.y
//         madr r5.yzw, r8.xxyz, -r5.y, -r9.xxyz
//         dp3r_sat r6.x, r8, r9
//         dp3r_sat r6.z, r5.yzww, r7
//         dp3r r6.w, r8, r7
//         lg2r r47, |r6.z|
//         mulr r47, r47, r5.x
//         ex2r r7.x, r47
//         movr_sat r6.z, r6.w
//         madr_sat r6.w, r6.w, constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).z, constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).z
//         mulr r6.z, r7.x, r6.z
//         movr r45, c[6][273]
//         movr r45.x, constant(2032.00000000, 2032.00000000, 2032.00000000, 2032.00000000).x
//         movr r45.y, constant(940.00000000, 940.00000000, 940.00000000, 940.00000000).x
//         movr r45.z, constant(258.75000000, 258.75000000, 258.75000000, 258.75000000).x
//         addr r7.xyz, r45, -v8
//         nrmr r9.xyz, r7
//         dp3r_sat r5.y, r5.yzww, r9
//         dp3r r5.z, r8, r9
//         lg2r r47, |r5.y|
//         mulr r47, r47, r5.x
//         ex2r r7.x, r47
//         movr_sat r5.x, r5.z
//         madr_sat r5.y, r5.z, constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).z, constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).z
//         mulr r5.x, r7.x, r5.x
//         mulr r7.xyz, c[6][272], v2.y
//         mulr r5.xzw, r5.x, r7.xyyz
//         mulr r9.xyz, c[6][270], v2.x
//         madr r5.xzw, r6.z, r9.xyyz, r5
//         texr r10, v1.xyzz, #0, #0, 2D
//         movr r45, c[6][277].x
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         lrpr r6.z, r45, r10.w, r8.w
//         dp3r r7.w, r10, constant(0.30000001, 0.58999997, 0.11000000, 1.00000000)
//         lrpr r8.w, c[6][260].y, r7.w, r6.z
//         mulr r6.z, r8.w, c[6][269].w
//         lrpr r11.xyz, r6.y, r10, constant(0.30000001, 0.58999997, 0.11000000, 1.00000000).w
//         movr r44, c[6][276]
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r11.xyz, c[6][276].x, r44, r11
//         mulr r11.xyz, r6.z, r11
//         mulr r5.xzw, r5, r11.xyyz
//         cmpr r11.xyz, r8, -constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).w, -constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).y
//         mulr r8.xyz, r8, r8
//         addr r12.xyz, -r11, constant(0.30000001, 0.58999997, 0.11000000, 1.00000000).w
//         mulr r11.xyz, r11, r8
//         mulr r8.xyz, r8, r12
//         mulr r12.xyz, r11.x, c[6][255]
//         madr r12.xyz, r8.x, c[6][254], r12
//         madr r8.xyw, r8.y, c[6][256].xyzz, r12.xyzz
//         madr r8.xyw, r11.y, c[6][257].xyzz, r8
//         madr r8.xyz, r8.z, c[6][258], r8.xyww
//         madr r8.xyz, r11.z, c[6][259], r8
//         mulr r6.y, r6.w, r6.w
//         madr r6.yzw, r9.xxyz, r6.y, r8.xxyz
//         mulr r5.y, r5.y, r5.y
//         madr r6.yzw, r7.xxyz, r5.y, r6
//         mulr r6.yzw, r6, c[6][251].xxyz
//         mulr r6.yzw, r10.xxyz, r6
//         addr r5.y, -r6.x, constant(0.30000001, 0.58999997, 0.11000000, 1.00000000).w
//         madr r6.x, r5.y, -r5.y, constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).z
//         mulr r5.y, r5.y, r5.y
//         addr r7.x, r5.y, r5.y
//         madr r5.y, r5.y, constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).x, constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).y
//         addr r7.y, -c[6][269].x, c[6][269].y
//         madr r7.x, r7.x, r7.y, c[6][269].x
//         lrpr r7.y, r5.y, c[6][269].z, c[6][269].y
//         cmpr r5.y, r6.x, r7.x, r7.y
//         madr r5.xyz, r5.xzww, r5.y, r6.yzww
//         movr r44, c[6][282]
//         movr r44.x, constant(0.00052083, 0.00052083, 0.00052083, 0.00052083).x
//         movr r44.y, constant(0.00083333, 0.00083333, 0.00083333, 0.00083333).x
//         movr r44.z, constant(0.00026042, 0.00026042, 0.00026042, 0.00026042).x
//         movr r44.w, constant(0.00041667, 0.00041667, 0.00041667, 0.00041667).x
//         movr r43, c[6][282].zwzw
//         movr r43.x, constant(0.00026042, 0.00026042, 0.00026042, 0.00026042).x
//         movr r43.y, constant(0.00041667, 0.00041667, 0.00041667, 0.00041667).x
//         movr r43.z, constant(0.00026042, 0.00026042, 0.00026042, 0.00026042).x
//         movr r43.w, constant(0.00041667, 0.00041667, 0.00041667, 0.00041667).x
//         madr r6.xy, v0, r44, r43
//         texr r6, r6.xyzz, #15, #15, 2D
//         addr r5.w, r6.x, -constant(0.30000001, 0.58999997, 0.11000000, 1.00000000).w
//         movr r6.w, constant(0.30000001, 0.58999997, 0.11000000, 1.00000000).w
//         madr r5.w, c[6][261].w, r5.w, r6.w
//         mulr r5.xyz, r5, r5.w
//         movr r44, c[6][280].x
//         movr r44.x, constant(5.03755236, 5.03755236, 5.03755236, 5.03755236).x
//         movr r44.y, constant(5.03755236, 5.03755236, 5.03755236, 5.03755236).x
//         movr r44.z, constant(5.03755236, 5.03755236, 5.03755236, 5.03755236).x
//         movr r44.w, constant(5.03755236, 5.03755236, 5.03755236, 5.03755236).x
//         mulr r6.xyz, r5, r44
//         movr r45, c[6][280].x
//         movr r45.x, constant(5.03755236, 5.03755236, 5.03755236, 5.03755236).x
//         movr r45.y, constant(5.03755236, 5.03755236, 5.03755236, 5.03755236).x
//         movr r45.z, constant(5.03755236, 5.03755236, 5.03755236, 5.03755236).x
//         movr r45.w, constant(5.03755236, 5.03755236, 5.03755236, 5.03755236).x
//         movr r7.x, r45
//         movr r43, c[6][279]
//         movr r43.w, constant(0.00520833, 0.00520833, 0.00520833, 0.00520833).x
//         madr r5.xyz, r5, -r7.x, r43
//         movr r45, c[6][261]
//         movr r45.x, constant(2004.03125000, 2004.03125000, 2004.03125000, 2004.03125000).x
//         movr r45.y, constant(881.08746338, 881.08746338, 881.08746338, 881.08746338).x
//         addr r7.xy, r45, -v8
//         dp2ar r5.w, r7, r7, -constant(2.00000000, -1.00000000, 0.50000000, 0.00000000).w
//         rsqr r5.w, |r5.w|
//         rcpr r5.w, r5.w
//         madr_sat r5.w, r5.w, c[6][262].w, c[6][262].x
//         minr r6.w, r5.w, c[6][262].z
//         mulr r5.w, r6.w, r6.w
//         madr r0.xyz, r5.w, r5, r6
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R11, -0x40800000;         # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R10, R0;                # [  2][000010]
//     	F2F R12, 1;                      # [  3][000018]
//     	IPA.SC R5, a[0x304], R10;        # [  4][000020] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R4, a[0x300], R10;        # [  5][000028] TEX0
//     	TEX.NODEP.P R0, R4, 0x3, 0x3, 2D; # [  6][000030]
//     	IPA.SC R25, a[0x348], R10;       # [  7][000038] FIXED_FNC_TEXTURE_4_R
//     	IPA.SC R18, a[0x340], R10;       # [  8][000040] TEX4
//     	IPA.SC R8, a[0x370], R10;        # [  9][000048] TEX7
//     	FADD.FTZ R19, -R8, 2032;         # [ 10][000050]
//     	IPA.SC R14, a[0x344], R10;       # [ 11][000058] FIXED_FNC_TEXTURE_4_T
//     	FADD32I.FTZ R8, -R8, 0x44fa8100; # [ 12][000060]
//     	IPA.SC R23, a[0x338], R10;       # [ 13][000068] FIXED_FNC_TEXTURE_3_R
//     	IPA.SC R15, a[0x320], R10;       # [ 14][000070] TEX2
//     	IPA.SC R9, a[0x374], R10;        # [ 15][000078] FIXED_FNC_TEXTURE_7_T
//     	FMUL.FTZ R8, R8, R8;             # [ 16][000080]
//     	IPA.SC R22, a[0x334], R10;       # [ 17][000088] FIXED_FNC_TEXTURE_3_T
//     	IPA.SC R6, a[0x324], R10;        # [ 18][000090] FIXED_FNC_TEXTURE_2_T
//     	IPA.SC R13, a[0x378], R10;       # [ 19][000098] FIXED_FNC_TEXTURE_7_R
//     	FADD.FTZ R16, -R13, 276.75;      # [ 20][0000a0]
//     	IPA.SC R20, a[0x328], R10;       # [ 21][0000a8] FIXED_FNC_TEXTURE_2_R
//     	FADD.FTZ R13, -R13, 258.75;      # [ 22][0000b0]
//     	IPA.SC R17, a[0x330], R10;       # [ 23][0000b8] TEX3
//     	IPA.SC R7, a[0x350], R10;        # [ 24][0000c0] TEX5
//     	IPA.SC R21, a[0x354], R10;       # [ 25][0000c8] FIXED_FNC_TEXTURE_5_T
//     	FFMA.FMZ R24, R1, 2, R11;        # [ 26][0000d0]
//     	FFMA.FMZ R1, R0, 2, R11;         # [ 27][0000d8]
//     	FMUL.FMZ R18, R24, R18;          # [ 28][0000e0]
//     	FMUL.FMZ R0, R24, R25;           # [ 29][0000e8]
//     	FMUL.FMZ R24, R24, R14;          # [ 30][0000f0]
//     	FFMA.FMZ R0, R23, R1, R0;        # [ 31][0000f8]
//     	FMUL.FTZ R23, R15, R15;          # [ 32][000100]
//     	FADD.FTZ R14, -R9, 940;          # [ 33][000108]
//     	FMUL.FTZ R25, R19, R19;          # [ 34][000110]
//     	FFMA.FMZ R22, R22, R1, R24;      # [ 35][000118]
//     	FFMA.FTZ R24, R6, R6, R23;       # [ 36][000120]
//     	FADD32I.FTZ R9, -R9, 0x445c4599; # [ 37][000128]
//     	FFMA.FTZ R23, R14, R14, R25;     # [ 38][000130]
//     	FFMA.FTZ R24, R20, R20, R24;     # [ 39][000138]
//     	FFMA.FMZ R25, R17, R1, R18;      # [ 40][000140]
//     	FFMA.FTZ R26, R13, R13, R23;     # [ 41][000148]
//     	FFMA.FTZ R17, R16, R16, R23;     # [ 42][000150]
//     	MUFU.RSQ R1, R24;                # [ 43][000158]
//     	FFMA.FMZ R23, R2, 2, R11;        # [ 44][000160]
//     	IPA.SC R24, a[0x358], R10;       # [ 45][000168] FIXED_FNC_TEXTURE_5_R
//     	FFMA.FMZ R7, R7, R23, R25;       # [ 46][000170]
//     	FFMA.FMZ R2, R21, R23, R22;      # [ 47][000178]
//     	FMUL.FTZ R21, R7, R7;            # [ 48][000180]
//     	MUFU.RSQ R18, R17;               # [ 49][000188]
//     	FFMA.FMZ R0, R24, R23, R0;       # [ 50][000190]
//     	FMUL.FTZ R15, R15, R1;           # [ 51][000198]
//     	FFMA.FTZ R21, R2, R2, R21;       # [ 52][0001a0]
//     	FMUL.FTZ R6, R6, R1;             # [ 53][0001a8]
//     	FMUL.FTZ R1, R20, R1;            # [ 54][0001b0]
//     	MUFU.RSQ R17, R26;               # [ 55][0001b8]
//     	FFMA.FTZ R20, R0, R0, R21;       # [ 56][0001c0]
//     	FMUL.FTZ R22, R13, R17;          # [ 57][0001c8]
//     	FMUL.FTZ R21, R16, R18;          # [ 58][0001d0]
//     	FMUL.FTZ R23, R19, R17;          # [ 59][0001d8]
//     	MUFU.RSQ R16, R20;               # [ 60][0001e0]
//     	FMUL.FTZ R26, R14, R18;          # [ 61][0001e8]
//     	FMUL.FTZ R13, R7, R16;           # [ 62][0001f0]
//     	FMUL.FTZ R24, R0, R16;           # [ 63][0001f8]
//     	FMUL.FTZ R7, R2, R16;            # [ 64][000200]
//     	FMUL.FTZ R27, R14, R17;          # [ 65][000208]
//     	FCMP.GE R16, RZ, R12, R13;       # [ 66][000210]
//     	FMUL.FTZ R2, R15, -R13;          # [ 67][000218]
//     	FMUL.FMZ R14, R13, R13;          # [ 68][000220]
//     	FADD.FTZ R17, -R16, 1;           # [ 69][000228]
//     	FFMA.FTZ R2, R6, -R7, R2;        # [ 70][000230]
//     	FCMP.GE R0, RZ, R12, R7;         # [ 71][000238]
//     	FMUL.FMZ R29, R16, R14;          # [ 72][000240]
//     	FMUL.FMZ R28, R14, R17;          # [ 73][000248]
//     	FMUL.FMZ R14, R7, R7;            # [ 74][000250]
//     	FFMA.FTZ R2, R1, -R24, R2;       # [ 75][000258]
//     	FADD.FTZ R16, -R0, 1;            # [ 76][000260]
//     	FMUL.FTZ R25, R19, R18;          # [ 77][000268]
//     	FMUL.FMZ R20, R0, R14;           # [ 78][000270]
//     	FMUL.FMZ R19, R14, R16;          # [ 79][000278]
//     	FADD.FTZ R0, R2, R2;             # [ 80][000280]
//     	FMUL.FTZ R14, R13, R25;          # [ 81][000288]
//     	FMUL.FTZ R2, R13, R15;           # [ 82][000290]
//     	FFMA.FMZ R18, R13, -R0, -R15;    # [ 83][000298]
//     	FMUL.FTZ R13, R13, R23;          # [ 84][0002a0]
//     	FFMA.FTZ R17, R7, R26, R14;      # [ 85][0002a8]
//     	FFMA.FMZ R15, R7, -R0, -R6;      # [ 86][0002b0]
//     	FFMA.FTZ R2, R7, R6, R2;         # [ 87][0002b8]
//     	FFMA.FTZ R16, R7, R27, R13;      # [ 88][0002c0]
//     	FFMA.FTZ R8, R9, R9, R8;         # [ 89][0002c8]
//     	FFMA.FMZ R13, R24, -R0, -R1;     # [ 90][0002d0]
//     	TEX.NODEP.T R6, R4, 0x7, 0x7, 2D, 0x3; # [ 91][0002d8]
//     	FFMA.FTZ.SAT R14, R24, R1, R2;   # [ 92][0002e0]
//     	MOV R9, c[0x6][0x1060];          # [ 93][0002e8]
//     	MUFU.RSQ R8, |R8|;               # [ 94][0002f0]
//     	TEX.NODEP.P R0, R4, 0x0, 0x0, 2D, 0x7; # [ 95][0002f8]
//     	FMUL.FTZ R4, R18, R25;           # [ 96][000300]
//     	FMUL.FTZ R5, R18, R23;           # [ 97][000308]
//     	FCMP.GE R23, RZ, R12, R24;       # [ 98][000310]
//     	FFMA.FTZ R18, R15, R26, R4;      # [ 99][000318]
//     	FFMA.FTZ R15, R15, R27, R5;      # [100][000320]
//     	FFMA.FTZ R4, R24, R21, R17;      # [101][000328]
//     	FFMA.FTZ R12, R24, R22, R16;     # [102][000330]
//     	FADD.FTZ R17, -R23, 1;           # [103][000338]
//     	FMUL.FMZ R16, R24, R24;          # [104][000340]
//     	FFMA.FTZ.SAT R22, R13, R22, R15; # [105][000348]
//     	FMUL.FMZ R15, R29, c[0x6][0xff4]; # [106][000350]
//     	FFMA.FTZ.SAT R18, R13, R21, R18; # [107][000358]
//     	FMUL.FMZ R13, R29, c[0x6][0xff0]; # [108][000360]
//     	FMUL.FMZ R21, R29, c[0x6][0xff8]; # [109][000368]
//     	FMUL.FMZ R23, R23, R16;          # [110][000370]
//     	FMUL.FMZ R17, R16, R17;          # [111][000378]
//     	FFMA.FMZ R16, R28, c[0x6][0xfe4], R15; # [112][000380]
//     	FFMA.FMZ R13, R28, c[0x6][0xfe0], R13; # [113][000388]
//     	FFMA.FMZ R25, R28, c[0x6][0xfe8], R21; # [114][000390]
//     	MOV32I R5, 0x3f000000;           # [115][000398]
//     	FFMA.FMZ R21, R19, c[0x6][0x1004], R16; # [116][0003a0]
//     	FFMA.FMZ R15, R19, c[0x6][0x1000], R13; # [117][0003a8]
//     	MOV R24, c[0x6][0x1048];         # [118][0003b0]
//     	IPA.SC R13, a[0x314], R10;       # [119][0003b8] FIXED_FNC_TEXTURE_1_T
//     	FFMA.FMZ R19, R19, c[0x6][0x1008], R25; # [120][0003c0]
//     	F2F R25, -|R24|;                 # [121][0003c8]
//     	FFMA.FMZ R26, R20, c[0x6][0x1010], R15; # [122][0003d0]
//     	FFMA.FMZ R19, R20, c[0x6][0x1018], R19; # [123][0003d8]
//     	FFMA.FMZ R24, R20, c[0x6][0x1014], R21; # [124][0003e0]
//     	FMUL.FMZ R15, R13, c[0x6][0x1104]; # [125][0003e8]
//     	FADD.FTZ R16, -R6, 1;            # [126][0003f0]
//     	FFMA.FMZ R6, R6, 150, R16;       # [127][0003f8]
//     	FCMP.GE R20, R6, c[0x6][0x1048], R25; # [128][000400]
//     	IPA.SC R16, a[0x310], R10;       # [129][000408] TEX1
//     	MUFU.LG2 R25, |R18|;             # [130][000410]
//     	FFMA.FMZ R6, R17, c[0x6][0x1020], R26; # [131][000418]
//     	FFMA.FMZ R18, R17, c[0x6][0x1024], R24; # [132][000420]
//     	FFMA.FMZ R26, R17, c[0x6][0x1028], R19; # [133][000428]
//     	MUFU.LG2 R24, |R22|;             # [134][000430]
//     	FFMA.FMZ R6, R23, c[0x6][0x1030], R6; # [135][000438]
//     	FMUL.FMZ R22, R25, R20;          # [136][000440]
//     	F2F.SAT R19, R4;                 # [137][000448]
//     	FMUL.FMZ R20, R24, R20;          # [138][000450]
//     	FFMA.FMZ R25, R23, c[0x6][0x1038], R26; # [139][000458]
//     	FFMA.FMZ R24, R23, c[0x6][0x1034], R18; # [140][000460]
//     	RRO.EX2 R20, R20;                # [141][000468]
//     	RRO.EX2 R18, R22;                # [142][000470]
//     	F2F.SAT R23, R12;                # [143][000478]
//     	MUFU.EX2 R20, R20;               # [144][000480]
//     	FFMA.FMZ.SAT R26, R4, 0.5, R5;   # [145][000488]
//     	MUFU.EX2 R22, R18;               # [146][000490]
//     	FMUL.FMZ R21, R16, c[0x6][0x10e4]; # [147][000498]
//     	FMUL.FMZ R17, R13, c[0x6][0x1108]; # [148][0004a0]
//     	FMUL.FMZ R18, R26, R26;          # [149][0004a8]
//     	FMUL.FMZ R20, R20, R23;          # [150][0004b0]
//     	FMUL.FMZ R4, R16, c[0x6][0x10e8]; # [151][0004b8]
//     	FMUL.FMZ R22, R22, R19;          # [152][0004c0]
//     	FMUL.FMZ R23, R20, R15;          # [153][0004c8]
//     	FFMA.FMZ R19, R21, R18, R24;     # [154][0004d0]
//     	FMUL.FMZ R26, R20, R17;          # [155][0004d8]
//     	FADD.FTZ R24, -R14, 1;           # [156][0004e0]
//     	FFMA.FMZ.SAT R12, R12, 0.5, R5;  # [157][0004e8]
//     	FFMA.FMZ R21, R22, R21, R23;     # [158][0004f0]
//     	FFMA.FMZ R14, R22, R4, R26;      # [159][0004f8]
//     	FFMA.FMZ R23, R4, R18, R25;      # [160][000500]
//     	FFMA.FMZ R5, R24, -R24, R5;      # [161][000508]
//     	FMUL.FMZ R26, R24, R24;          # [162][000510]
//     	FADD.FTZ R25, R1, -1;            # [163][000518]
//     	FADD.FTZ R24, R0, -1;            # [164][000520]
//     	FADD.FTZ R27, R2, -1;            # [165][000528]
//     	MOV R4, c[0x6][0x10d4];          # [166][000530]
//     	FFMA.FTZ R25, R7, R25, -R11;     # [167][000538]
//     	FFMA.FTZ R24, R7, R24, -R11;     # [168][000540]
//     	FFMA.FTZ R7, R7, R27, -R11;      # [169][000548]
//     	FADD.FTZ R27, R4, -c[0x6][0x10d0]; # [170][000550]
//     	FFMA.FMZ R11, R26, 2, R11;       # [171][000558]
//     	FADD.FTZ R26, R26, R26;          # [172][000560]
//     	FADD.FTZ R4, -R4, c[0x6][0x10d8]; # [173][000568]
//     	FFMA.FMZ R26, R26, R27, c[0x6][0x10d0]; # [174][000570]
//     	FFMA.FTZ R11, R11, R4, c[0x6][0x10d4]; # [175][000578]
//     	FCMP.GE R11, R26, R11, R5;       # [176][000580]
//     	IPA.PASS R27, a[0x74];           # [177][000588] POSITION_Y
//     	MOV32I R5, 0x39da740e;           # [178][000590]
//     	IPA.PASS R4, a[0x70];            # [179][000598] POSITION_X
//     	MOV32I R26, 0x39888889;          # [180][0005a0]
//     	FFMA.FMZ R5, R27, c[0x9][0x8], R5; # [181][0005a8]
//     	FFMA.FMZ R4, R4, c[0x9][0xc], R26; # [182][0005b0]
//     	TEX.NODEP.P R4, R4, 0xf, 0xf, 2D, 0x1; # [183][0005b8]
//     	FMUL.FMZ R5, R13, c[0x6][0x1100]; # [184][0005c0]
//     	FMUL.FMZ R13, R16, c[0x6][0x10e0]; # [185][0005c8]
//     	FMUL.FMZ R16, R20, R5;           # [186][0005d0]
//     	FFMA.FMZ R6, R13, R18, R6;       # [187][0005d8]
//     	FFMA.FMZ R16, R22, R13, R16;     # [188][0005e0]
//     	MOV R22, c[0x6][0x1140];         # [189][0005e8]
//     	FCMP.LTU R7, R7, 0x3f800, R22;   # [190][0005f0]
//     	FCMP.LTU R20, R25, c[0x6][0x1144], R22; # [191][0005f8]
//     	FCMP.GE R22, R22, R24, c[0x6][0x1140]; # [192][000600]
//     	FMUL32I.FTZ R24, R0, 0.3;        # [193][000608]
//     	FFMA.FTZ R24, R1, c[0x9][0x0], R24; # [194][000610]
//     	FFMA.FTZ R24, R2, c[0x9][0x4], R24; # [195][000618]
//     	FADD.FTZ R24, R24, -R3;          # [196][000620]
//     	FFMA.FTZ R3, R24, c[0x6][0x1044], R3; # [197][000628]
//     	MUFU.RCP R24, R8;                # [198][000630]
//     	FMUL.FMZ R25, R3, c[0x6][0x10dc]; # [199][000638]
//     	FMUL.FMZ R8, R25, R22;           # [200][000640]
//     	IPA.SC R3, a[0x368], R10;        # [201][000648] FIXED_FNC_TEXTURE_6_R
//     	FMUL.FMZ R22, R12, R12;          # [202][000650]
//     	FMUL.FMZ R10, R25, R20;          # [203][000658]
//     	FFMA.FMZ R13, R15, R22, R19;     # [204][000660]
//     	FFMA.FMZ R17, R17, R22, R23;     # [205][000668]
//     	FFMA.FMZ R5, R5, R22, R6;        # [206][000670]
//     	FMUL.FMZ R7, R25, R7;            # [207][000678]
//     	FMUL.FMZ R6, R13, c[0x6][0xfb4]; # [208][000680]
//     	FMUL.FMZ R15, R17, c[0x6][0xfb8]; # [209][000688]
//     	FMUL.FMZ R5, R5, c[0x6][0xfb0];  # [210][000690]
//     	FMUL.FMZ R10, R21, R10;          # [211][000698]
//     	FMUL.FMZ R6, R1, R6;             # [212][0006a0]
//     	FFMA.FMZ.SAT R21, R24, c[0x6][0x106c], R9; # [213][0006a8]
//     	FMUL.FMZ R13, R2, R15;           # [214][0006b0]
//     	FMUL.FMZ R1, R0, R5;             # [215][0006b8]
//     	MOV32I R9, 0x3f800000;           # [216][0006c0]
//     	FMUL.FMZ R5, R14, R7;            # [217][0006c8]
//     	FMUL.FMZ R0, R16, R8;            # [218][0006d0]
//     	FFMA.FMZ R5, R5, R11, R13;       # [219][0006d8]
//     	MOV32I R20, -0x3f5ecc5f;         # [220][0006e0]
//     	FFMA.FMZ R0, R0, R11, R1;        # [221][0006e8]
//     	FMNMX.FTZ R21, R21, c[0x6][0x1068], PT; # [222][0006f0]
//     	FMUL32I.FMZ R3, R3, 0x3baaaaab;  # [223][0006f8]
//     	FMUL.FMZ R12, R21, R21;          # [224][000700]
//     	FADD.FTZ R2, R4, -1;             # [225][000708]
//     	FFMA.FMZ R4, R10, R11, R6;       # [226][000710]
//     	FFMA.FMZ R2, R2, c[0x6][0x105c], R9; # [227][000718]
//     	FMUL.FMZ R5, R5, R2;             # [228][000720]
//     	FMUL.FMZ R1, R4, R2;             # [229][000728]
//     	FMUL.FMZ R0, R0, R2;             # [230][000730]
//     	FMUL32I.FMZ R6, R5, 0x40a133a1;  # [231][000738]
//     	FFMA.FMZ R2, R5, R20, c[0x6][0x1178]; # [232][000740]
//     	FFMA.FMZ R4, R0, R20, c[0x6][0x1170]; # [233][000748]
//     	FFMA.FMZ R5, R1, R20, c[0x6][0x1174]; # [234][000750]
//     	FMUL32I.FMZ R0, R0, 0x40a133a1;  # [235][000758]
//     	FMUL32I.FMZ R1, R1, 0x40a133a1;  # [236][000760]
//     	FFMA.FMZ R2, R12, R2, R6;        # [237][000768]
//     	FFMA.FMZ R0, R12, R4, R0;        # [238][000770]
//     	FFMA.FMZ R1, R12, R5, R1;        # [239][000778]
//     	EXIT;                            # [240][000780]
//     	END
//     END_SECTION
// END_SHADER
// 
