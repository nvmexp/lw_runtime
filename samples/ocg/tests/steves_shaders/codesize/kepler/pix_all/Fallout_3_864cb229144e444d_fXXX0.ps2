// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x864cb229144e444d
//         UCODE_HASH: 0xa4f202a422dbbf3f
//         POOL: APP
//         VERSION: 20
//         # USES: 13521
//         // Time: 54.517ms [4.755 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 15
//         USED_TEXTURE_BITS: 0x41
//         TEXTURE_SLOTS: 7
//         SAMPLER_SLOTS: 7
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX01_Q              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//             TEX03_Q              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00025462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x80aaaa0a
//         0x002a0000      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_x
        def c0, 0.01000000, 0.02000000, 0.00000000, 0.14285715 ; 0x3c23d70a 0x3ca3d70a 0x000000 0x3e124925
        def c1, 0.50000000, 1.00000000, 15.00000000, -0.00019531 ; 0x3f000000 0x3f800000 0x41700000 0xb94ccccd
        def c2, -0.01000000, 0.01000000, -0.02000000, 0.02000000 ; 0xbc23d70a 0x3c23d70a 0xbca3d70a 0x3ca3d70a
        def c4, 0.00000000, 1.00000000, 2.00000000, 0.60000002 ; 0x000000 0x3f800000 0x40000000 0x3f19999a
        dcl_pp t0.rg
        dcl t6.rgb
        dcl_pp t1
        dcl t2
        dcl_pp t3
        dcl_2d s0
        dcl_2d s6
        mov r0.xyz, t2
        add r0.xyz, -r0, t6
        dp3 r0.x, r0, r0
        rsq r0.x, r0.x
        rcp r0.x, r0.x
        mul r0.y, t2.w, c1.x
        rcp r0.y, r0.y
        mul_sat r0.x, r0.x, r0.y
        rsq r0.y, r0.x
        mul r0.x, r0.x, r0.x
        rcp r0.y, r0.y
        add_sat r0.y, -r0.y, c1.y
        mul_pp r0.y, r0.y, c1.z
        rcp r0.y, r0.y
        rcp r0.z, t1.w
        mul r0.zw, r0.z, t1.xyxy
        mad r1.xy, r0.zwzw, c1.x, c1.x
        add r1.z, -r1.y, c1.y
        mad r2, r0.y, c0.xxy, r1.xzxz
        max r3, r2, c0.z
        mov_sat r3.xy, r3
        mov_sat r2.xy, r3.zwzw
        texld r3, r3, s6
        texld r2, r2, s6
        add r0.z, r2.x, -t1.z
        add r0.z, -r0.z, c1.w
        add r0.w, r3.x, -t1.z
        add r0.w, -r0.w, c1.w
        mov_sat r2.xy, r1.xzzw
        mad r3, r0.y, c2, r1.xzxz
        max r4, r3, c0.z
        mov_sat r4.xy, r4
        mov_sat r3.xy, r4.zwzw
        texld r2, r2, s6
        texld r3, r3, s6
        add r1.y, r2.x, -t1.z
        add r1.y, -r1.y, c1.w
        cmp_pp r1.yw, r1.y, c4.xxzy, c4.xyz
        cmp_pp r0.w, r0.w, r1.y, r1.w
        add_pp r1.y, r0.w, c1.y
        cmp_pp r0.z, r0.z, r0.w, r1.y
        add_pp r0.w, r0.z, c1.y
        add r1.y, r3.x, -t1.z
        add r1.y, -r1.y, c1.w
        mad r2, r0.y, c2.yxwz, r1.xzxz
        mad r3, r0.y, -c0.xxy, r1.xzxz
        max r5, r3, c0.z
        max r3, r2, c0.z
        mov_sat r3.xy, r3
        mov_sat r2.xy, r3.zwzw
        texld r4, r4, s6
        texld r2, r2, s6
        add r0.y, r4.x, -t1.z
        add r0.y, -r0.y, c1.w
        cmp_pp r0.y, r0.y, r0.z, r0.w
        add_pp r0.z, r0.y, c1.y
        cmp_pp r0.y, r1.y, r0.y, r0.z
        add_pp r0.z, r0.y, c1.y
        add r0.w, r2.x, -t1.z
        add r0.w, -r0.w, c1.w
        mov_sat r5.xy, r5
        mov_sat r1.xy, r5.zwzw
        texld r2, r3, s6
        texld r1, r1, s6
        add r1.y, r2.x, -t1.z
        add r1.y, -r1.y, c1.w
        cmp_pp r0.y, r1.y, r0.y, r0.z
        add_pp r0.z, r0.y, c1.y
        cmp_pp r0.y, r0.w, r0.y, r0.z
        add_pp r0.z, r0.y, c1.y
        add r0.w, r1.x, -t1.z
        add r0.w, -r0.w, c1.w
        texld_pp r1, t0, s0
        texld r2, r5, s6
        add r1.x, r2.x, -t1.z
        add r1.x, -r1.x, c1.w
        cmp_pp r0.y, r1.x, r0.y, r0.z
        add_pp r0.z, r0.y, c1.y
        cmp_pp r0.y, r0.w, r0.y, r0.z
        mul_sat_pp r0.y, r0.y, c0.w
        add r0.y, r0.y, -c1.y
        mov r1.y, c1.y
        mad_pp r0.y, c3.w, r0.y, r1.y
        add_pp r0.z, -r0.y, c1.y
        cmp_pp r2.w, -r0.y, c1.y, r0.z
        mul_pp r0.y, r0.z, c4.w
        mad_pp r0.yzw, r0.y, -c3.xxyz, r1.y
        lrp_pp r1.xyz, r0.x, c1.y, r0.yzw
        lrp_pp r0.xyz, t3.w, c1.y, r1
        lrp_pp r2.xyz, r1.w, r0, c1.y
        mov_pp oC0, r2
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0x3c23d70a 0x3ca3d70a
//         0x00000000 0x3e124925 0x05000051 0xa00f0001
//         0x3f000000 0x3f800000 0x41700000 0xb94ccccd
//         0x05000051 0xa00f0002 0xbc23d70a 0x3c23d70a
//         0xbca3d70a 0x3ca3d70a 0x05000051 0xa00f0004
//         0x00000000 0x3f800000 0x40000000 0x3f19999a
//         0x0200001f 0x80000000 0xb0230000 0x0200001f
//         0x80000000 0xb0470006 0x0200001f 0x80000000
//         0xb06f0001 0x0200001f 0x80000000 0xb04f0002
//         0x0200001f 0x80000000 0xb02f0003 0x0200001f
//         0x90000000 0xa00f0800 0x0200001f 0x90000000
//         0xa00f0806 0x02000001 0x80070000 0xb0e40002
//         0x03000002 0x80070000 0x81e40000 0xb0e40006
//         0x03000008 0x80010000 0x80e40000 0x80e40000
//         0x02000007 0x80010000 0x80000000 0x02000006
//         0x80010000 0x80000000 0x03000005 0x80020000
//         0xb0ff0002 0xa0000001 0x02000006 0x80020000
//         0x80550000 0x03000005 0x80110000 0x80000000
//         0x80550000 0x02000007 0x80020000 0x80000000
//         0x03000005 0x80010000 0x80000000 0x80000000
//         0x02000006 0x80020000 0x80550000 0x03000002
//         0x80120000 0x81550000 0xa0550001 0x03000005
//         0x80220000 0x80550000 0xa0aa0001 0x02000006
//         0x80020000 0x80550000 0x02000006 0x80040000
//         0xb0ff0001 0x03000005 0x800c0000 0x80aa0000
//         0xb0440001 0x04000004 0x80030001 0x80ee0000
//         0xa0000001 0xa0000001 0x03000002 0x80040001
//         0x81550001 0xa0550001 0x04000004 0x800f0002
//         0x80550000 0xa0500000 0x80880001 0x0300000b
//         0x800f0003 0x80e40002 0xa0aa0000 0x02000001
//         0x80130003 0x80e40003 0x02000001 0x80130002
//         0x80ee0003 0x03000042 0x800f0003 0x80e40003
//         0xa0e40806 0x03000042 0x800f0002 0x80e40002
//         0xa0e40806 0x03000002 0x80040000 0x80000002
//         0xb1aa0001 0x03000002 0x80040000 0x81aa0000
//         0xa0ff0001 0x03000002 0x80080000 0x80000003
//         0xb1aa0001 0x03000002 0x80080000 0x81ff0000
//         0xa0ff0001 0x02000001 0x80130002 0x80e80001
//         0x04000004 0x800f0003 0x80550000 0xa0e40002
//         0x80880001 0x0300000b 0x800f0004 0x80e40003
//         0xa0aa0000 0x02000001 0x80130004 0x80e40004
//         0x02000001 0x80130003 0x80ee0004 0x03000042
//         0x800f0002 0x80e40002 0xa0e40806 0x03000042
//         0x800f0003 0x80e40003 0xa0e40806 0x03000002
//         0x80020001 0x80000002 0xb1aa0001 0x03000002
//         0x80020001 0x81550001 0xa0ff0001 0x04000058
//         0x802a0001 0x80550001 0xa0600004 0xa0a40004
//         0x04000058 0x80280000 0x80ff0000 0x80550001
//         0x80ff0001 0x03000002 0x80220001 0x80ff0000
//         0xa0550001 0x04000058 0x80240000 0x80aa0000
//         0x80ff0000 0x80550001 0x03000002 0x80280000
//         0x80aa0000 0xa0550001 0x03000002 0x80020001
//         0x80000003 0xb1aa0001 0x03000002 0x80020001
//         0x81550001 0xa0ff0001 0x04000004 0x800f0002
//         0x80550000 0xa0b10002 0x80880001 0x04000004
//         0x800f0003 0x80550000 0xa1500000 0x80880001
//         0x0300000b 0x800f0005 0x80e40003 0xa0aa0000
//         0x0300000b 0x800f0003 0x80e40002 0xa0aa0000
//         0x02000001 0x80130003 0x80e40003 0x02000001
//         0x80130002 0x80ee0003 0x03000042 0x800f0004
//         0x80e40004 0xa0e40806 0x03000042 0x800f0002
//         0x80e40002 0xa0e40806 0x03000002 0x80020000
//         0x80000004 0xb1aa0001 0x03000002 0x80020000
//         0x81550000 0xa0ff0001 0x04000058 0x80220000
//         0x80550000 0x80aa0000 0x80ff0000 0x03000002
//         0x80240000 0x80550000 0xa0550001 0x04000058
//         0x80220000 0x80550001 0x80550000 0x80aa0000
//         0x03000002 0x80240000 0x80550000 0xa0550001
//         0x03000002 0x80080000 0x80000002 0xb1aa0001
//         0x03000002 0x80080000 0x81ff0000 0xa0ff0001
//         0x02000001 0x80130005 0x80e40005 0x02000001
//         0x80130001 0x80ee0005 0x03000042 0x800f0002
//         0x80e40003 0xa0e40806 0x03000042 0x800f0001
//         0x80e40001 0xa0e40806 0x03000002 0x80020001
//         0x80000002 0xb1aa0001 0x03000002 0x80020001
//         0x81550001 0xa0ff0001 0x04000058 0x80220000
//         0x80550001 0x80550000 0x80aa0000 0x03000002
//         0x80240000 0x80550000 0xa0550001 0x04000058
//         0x80220000 0x80ff0000 0x80550000 0x80aa0000
//         0x03000002 0x80240000 0x80550000 0xa0550001
//         0x03000002 0x80080000 0x80000001 0xb1aa0001
//         0x03000002 0x80080000 0x81ff0000 0xa0ff0001
//         0x03000042 0x802f0001 0xb0e40000 0xa0e40800
//         0x03000042 0x800f0002 0x80e40005 0xa0e40806
//         0x03000002 0x80010001 0x80000002 0xb1aa0001
//         0x03000002 0x80010001 0x81000001 0xa0ff0001
//         0x04000058 0x80220000 0x80000001 0x80550000
//         0x80aa0000 0x03000002 0x80240000 0x80550000
//         0xa0550001 0x04000058 0x80220000 0x80ff0000
//         0x80550000 0x80aa0000 0x03000005 0x80320000
//         0x80550000 0xa0ff0000 0x03000002 0x80020000
//         0x80550000 0xa1550001 0x02000001 0x80020001
//         0xa0550001 0x04000004 0x80220000 0xa0ff0003
//         0x80550000 0x80550001 0x03000002 0x80240000
//         0x81550000 0xa0550001 0x04000058 0x80280002
//         0x81550000 0xa0550001 0x80aa0000 0x03000005
//         0x80220000 0x80aa0000 0xa0ff0004 0x04000004
//         0x802e0000 0x80550000 0xa1900003 0x80550001
//         0x04000012 0x80270001 0x80000000 0xa0550001
//         0x80f90000 0x04000012 0x80270000 0xb0ff0003
//         0xa0550001 0x80e40001 0x04000012 0x80270002
//         0x80ff0001 0x80e40000 0xa0550001 0x02000001
//         0x802f0800 0x80e40002 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3c23d70a // 0.01000000
//         COP_CONST[1]: 0x3ca3d70a // 0.02000000
//         COP_CONST[2]: 0xbef5c290 // -0.48000000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][550] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][551] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][552] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][553] = 0x3f800000 // 1.00000000
//         ## USER CONST histogram
//         ##    ~c3.x -> c[6][550] = 100.00%@0.80000000
//         ##    ~c3.y -> c[6][551] = 100.00%@0.80000000
//         ##    ~c3.z -> c[6][552] = 100.00%@0.80000000
//         ##    ~c3.w -> c[6][553] = 100.00%@1.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x213eb8ea,0x00000139
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000139
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xff2caa99,0x000006e8
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x000006e8
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x582d0713,0x000004e0
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x000004e0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x472dbd33,0x000009c0
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x000009c0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xa08538eb,0x00000478
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000478
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xe98d2584,0x00000270
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000270
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xee2b6fd7,0x00000410
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000410
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x69d0ffba,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x000001a0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x96ab7736,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x6386c831,0x00000680
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000680
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x694a1bc1,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x4f1fe533,0x00000138
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xf46121d0,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xfef2575f,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x000001a0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xf8c8d8a2,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x84eb9e54,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xecc1062d,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x8d737979,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0x6e766191,0x00000138
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x47954f75,0x000002d8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x000002d8
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0xf677a025,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x18 0 4 "COL1")
//         (0x18 0 4 "ATTR00")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x18 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r5.xyz, v6
//         addr r5.xyz, -r5, v10
//         dp3r r5.x, r5, r5
//         rsqr r5.x, |r5.x|
//         rcpr r5.x, r5.x
//         mulr r5.y, v6.w, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).x
//         rcpr r5.y, r5.y
//         mulr_sat r5.x, r5.x, r5.y
//         rsqr r5.y, |r5.x|
//         mulr r5.x, r5.x, r5.x
//         rcpr r5.y, r5.y
//         addr_sat r5.y, -r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         mulh r5.y, r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).z
//         rcpr r5.y, r5.y
//         rcpr r5.z, v5.w
//         mulr r5.zw, r5.z, v5.xyxy
//         madr r6.xy, r5.zwzw, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).x, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).x
//         addr r6.z, -r6.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         madr r7, r5.y, constant(0.01000000, 0.02000000, 0.00000000, 0.14285716).xxyy, r6.xzxz
//         maxr r8, r7, constant(0.01000000, 0.02000000, 0.00000000, 0.14285716).z
//         movr_sat r8.xy, r8
//         movr_sat r7.xy, r8.zwzw
//         texr r8, r8.xyzz, #6, #6, 2D
//         texr r7, r7.xyzz, #6, #6, 2D
//         addr r5.z, r7.x, -v5.z
//         addr r5.z, -r5.z, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         addr r5.w, r8.x, -v5.z
//         addr r5.w, -r5.w, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         movr_sat r7.xy, r6.xzzw
//         madr r8, r5.y, constant(-0.01000000, 0.01000000, -0.02000000, 0.02000000), r6.xzxz
//         maxr r9, r8, constant(0.01000000, 0.02000000, 0.00000000, 0.14285716).z
//         movr_sat r9.xy, r9
//         movr_sat r8.xy, r9.zwzw
//         texr r7, r7.xyzz, #6, #6, 2D
//         texr r8, r8.xyzz, #6, #6, 2D
//         addr r6.y, r7.x, -v5.z
//         addr r6.y, -r6.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         cmph r6.yw, r6.y, constant(0.00000000, 1.00000000, 2.00000000, 0.60000004).xxzy, constant(0.00000000, 1.00000000, 2.00000000, 0.60000004).xyzz
//         cmph r5.w, r5.w, r6.y, r6.w
//         addh r6.y, r5.w, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         cmph r5.z, r5.z, r5.w, r6.y
//         addh r5.w, r5.z, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         addr r6.y, r8.x, -v5.z
//         addr r6.y, -r6.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         madr r7, r5.y, constant(-0.01000000, 0.01000000, -0.02000000, 0.02000000).yxwz, r6.xzxz
//         madr r8, r5.y, -constant(0.01000000, 0.02000000, 0.00000000, 0.14285716).xxyy, r6.xzxz
//         maxr r10, r8, constant(0.01000000, 0.02000000, 0.00000000, 0.14285716).z
//         maxr r8, r7, constant(0.01000000, 0.02000000, 0.00000000, 0.14285716).z
//         movr_sat r8.xy, r8
//         movr_sat r7.xy, r8.zwzw
//         texr r9, r9.xyzz, #6, #6, 2D
//         texr r7, r7.xyzz, #6, #6, 2D
//         addr r5.y, r9.x, -v5.z
//         addr r5.y, -r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         cmph r5.y, r5.y, r5.z, r5.w
//         addh r5.z, r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         cmph r5.y, r6.y, r5.y, r5.z
//         addh r5.z, r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         addr r5.w, r7.x, -v5.z
//         addr r5.w, -r5.w, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         movr_sat r10.xy, r10
//         movr_sat r6.xy, r10.zwzw
//         texr r7, r8.xyzz, #6, #6, 2D
//         texr r6, r6.xyzz, #6, #6, 2D
//         addr r6.y, r7.x, -v5.z
//         addr r6.y, -r6.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         cmph r5.y, r6.y, r5.y, r5.z
//         addh r5.z, r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         cmph r5.y, r5.w, r5.y, r5.z
//         addh r5.z, r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         addr r5.w, r6.x, -v5.z
//         addr r5.w, -r5.w, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         texh r6, v4.xyzz, #0, #0, 2D
//         texr r7, r10.xyzz, #6, #6, 2D
//         addr r6.x, r7.x, -v5.z
//         addr r6.x, -r6.x, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         cmph r5.y, r6.x, r5.y, r5.z
//         addh r5.z, r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         cmph r5.y, r5.w, r5.y, r5.z
//         mulh_sat r5.y, r5.y, constant(0.01000000, 0.02000000, 0.00000000, 0.14285716).w
//         addr r5.y, r5.y, -constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         movr r6.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         movr r45, c[6][541].w
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madh r5.y, r45, r5.y, r6.y
//         addh r5.z, -r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         cmph r7.w, -r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y, r5.z
//         mulh r5.y, r5.z, constant(0.00000000, 1.00000000, 2.00000000, 0.60000004).w
//         movr r44, -c[6][541].xxyz
//         movr r44.x, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r44.y, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r44.z, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r44.w, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         madh r5.yzw, r5.y, r44, r6.y
//         lrph r6.xyz, r5.x, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y, r5.yzww
//         lrph r5.xyz, v7.w, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y, r6
//         lrph r7.xyz, r6.w, r5, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         movh r0, r7
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R8, R0;                 # [  1][000008]
//     	IPA.SC R0, a[0x320], R8;         # [  2][000010] TEX2
//     	IPA.SC R1, a[0x360], R8;         # [  3][000018] TEX6
//     	IPA.SC R2, a[0x324], R8;         # [  4][000020] FIXED_FNC_TEXTURE_2_T
//     	IPA.SC R3, a[0x364], R8;         # [  5][000028] FIXED_FNC_TEXTURE_6_T
//     	IPA.SC R4, a[0x328], R8;         # [  6][000030] FIXED_FNC_TEXTURE_2_R
//     	IPA.SC R5, a[0x368], R8;         # [  7][000038] FIXED_FNC_TEXTURE_6_R
//     	FADD.FTZ R0, -R0, R1;            # [  8][000040]
//     	FADD.FTZ R1, -R2, R3;            # [  9][000048]
//     	FMUL.FTZ R0, R0, R0;             # [ 10][000050]
//     	FADD.FTZ R2, -R4, R5;            # [ 11][000058]
//     	IPA.SC R3, a[0x32c], R8;         # [ 12][000060] FIXED_FNC_TEXTURE_2_Q
//     	FFMA.FTZ R0, R1, R1, R0;         # [ 13][000068]
//     	IPA.SC R4, a[0x314], R8;         # [ 14][000070] FIXED_FNC_TEXTURE_1_T
//     	MOV32I R5, 0x3f000000;           # [ 15][000078]
//     	FFMA.FTZ R0, R2, R2, R0;         # [ 16][000080]
//     	IPA.SC R2, a[0x31c], R8;         # [ 17][000088] FIXED_FNC_TEXTURE_1_Q
//     	FMUL.FMZ R1, R3, 0.5;            # [ 18][000090]
//     	MUFU.RSQ R0, |R0|;               # [ 19][000098]
//     	IPA.SC R3, a[0x310], R8;         # [ 20][0000a0] TEX1
//     	MUFU.RCP R1, R1;                 # [ 21][0000a8]
//     	MUFU.RCP R0, R0;                 # [ 22][0000b0]
//     	FMUL.FMZ.SAT R7, R0, R1;         # [ 23][0000b8]
//     	MUFU.RCP R1, R2;                 # [ 24][0000c0]
//     	MUFU.RSQ R0, |R7|;               # [ 25][0000c8]
//     	FMUL.FMZ R2, R1, R4;             # [ 26][0000d0]
//     	FMUL.FMZ R1, R1, R3;             # [ 27][0000d8]
//     	MUFU.RCP R0, R0;                 # [ 28][0000e0]
//     	FFMA.FMZ R2, R2, 0.5, R5;        # [ 29][0000e8]
//     	FFMA.FMZ R13, R1, 0.5, R5;       # [ 30][0000f0]
//     	FADD.FTZ.SAT R0, -R0, 1;         # [ 31][0000f8]
//     	FADD.FTZ R11, -R2, 1;            # [ 32][000100]
//     	F2F.SAT R2, R13;                 # [ 33][000108]
//     	FMUL.FMZ R0, R0, 15;             # [ 34][000110]
//     	F2F.SAT R3, R11;                 # [ 35][000118]
//     	MUFU.RCP R12, R0;                # [ 36][000120]
//     	TEX.NODEP.T R10, R2, 0x6, 0x6, 2D, 0x1; # [ 37][000128]
//     	FFMA.FMZ R1, R12, c[0x9][0x0], R11; # [ 38][000130]
//     	FFMA.FMZ R0, R12, c[0x9][0x0], R13; # [ 39][000138]
//     	FMNMX.FTZ R1, R1, RZ, !PT;       # [ 40][000140]
//     	FMNMX.FTZ R0, R0, RZ, !PT;       # [ 41][000148]
//     	F2F.SAT R3, R1;                  # [ 42][000150]
//     	F2F.SAT R2, R0;                  # [ 43][000158]
//     	TEX.NODEP.T R6, R2, 0x6, 0x6, 2D, 0x1; # [ 44][000160]
//     	FFMA.FMZ R1, R12, c[0x9][0x4], R11; # [ 45][000168]
//     	FFMA.FMZ R0, R12, c[0x9][0x4], R13; # [ 46][000170]
//     	FMNMX.FTZ R1, R1, RZ, !PT;       # [ 47][000178]
//     	FMNMX.FTZ R0, R0, RZ, !PT;       # [ 48][000180]
//     	F2F.SAT R1, R1;                  # [ 49][000188]
//     	F2F.SAT R0, R0;                  # [ 50][000190]
//     	TEX.NODEP.T R9, R0, 0x6, 0x6, 2D, 0x1; # [ 51][000198]
//     	FFMA.FMZ R4, R12, -c[0x9][0x0], R13; # [ 52][0001a0]
//     	MOV R5, R3;                      # [ 53][0001a8]
//     	FMNMX.FTZ R4, R4, RZ, !PT;       # [ 54][0001b0]
//     	F2F.SAT R4, R4;                  # [ 55][0001b8]
//     	TEX.NODEP.T R3, R4, 0x6, 0x6, 2D, 0x1; # [ 56][0001c0]
//     	FFMA.FMZ R4, R12, -c[0x9][0x4], R13; # [ 57][0001c8]
//     	MOV R5, R1;                      # [ 58][0001d0]
//     	FMNMX.FTZ R4, R4, RZ, !PT;       # [ 59][0001d8]
//     	F2F.SAT R4, R4;                  # [ 60][0001e0]
//     	TEX.NODEP.T R4, R4, 0x6, 0x6, 2D, 0x1; # [ 61][0001e8]
//     	FFMA.FMZ R1, R12, -c[0x9][0x4], R11; # [ 62][0001f0]
//     	FMNMX.FTZ R1, R1, RZ, !PT;       # [ 63][0001f8]
//     	F2F.SAT R1, R1;                  # [ 64][000200]
//     	TEX.NODEP.T R5, R0, 0x6, 0x6, 2D, 0x1; # [ 65][000208]
//     	FFMA.FMZ R0, R12, -c[0x9][0x0], R11; # [ 66][000210]
//     	FMNMX.FTZ R0, R0, RZ, !PT;       # [ 67][000218]
//     	F2F.SAT R1, R0;                  # [ 68][000220]
//     	MOV R0, R2;                      # [ 69][000228]
//     	TEX.NODEP.T R2, R0, 0x6, 0x6, 2D, 0x1; # [ 70][000230]
//     	FFMA.FMZ R1, R12, -c[0x9][0x0], R11; # [ 71][000238]
//     	FFMA.FMZ R0, R12, -c[0x9][0x0], R13; # [ 72][000240]
//     	FMNMX.FTZ R1, R1, RZ, !PT;       # [ 73][000248]
//     	FMNMX.FTZ R0, R0, RZ, !PT;       # [ 74][000250]
//     	F2F.SAT R1, R1;                  # [ 75][000258]
//     	F2F.SAT R0, R0;                  # [ 76][000260]
//     	TEX.NODEP.T R14, R0, 0x6, 0x6, 2D, 0x1; # [ 77][000268]
//     	FFMA.FMZ R1, R12, -c[0x9][0x4], R11; # [ 78][000270]
//     	FFMA.FMZ R0, R12, -c[0x9][0x4], R13; # [ 79][000278]
//     	FMNMX.FTZ R1, R1, RZ, !PT;       # [ 80][000280]
//     	FMNMX.FTZ R0, R0, RZ, !PT;       # [ 81][000288]
//     	F2F.SAT R1, R1;                  # [ 82][000290]
//     	F2F.SAT R0, R0;                  # [ 83][000298]
//     	TEX.NODEP.T R11, R0, 0x6, 0x6, 2D, 0x1; # [ 84][0002a0]
//     	IPA.SC R1, a[0x304], R8;         # [ 85][0002a8] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R0, a[0x300], R8;         # [ 86][0002b0] TEX0
//     	TEX.NODEP.T R0, R0, 0x0, 0x0, 2D, 0x8; # [ 87][0002b8]
//     	IPA.SC R8, a[0x318], R8;         # [ 88][0002c0] FIXED_FNC_TEXTURE_1_R
//     	MOV32I R1, 0x3f800000;           # [ 89][0002c8]
//     	FADD.FTZ R10, R10, -R8;          # [ 90][0002d0]
//     	FADD.FTZ R6, R6, -R8;            # [ 91][0002d8]
//     	FADD.FTZ R3, R3, -R8;            # [ 92][0002e0]
//     	FADD32I.FTZ R10, -R10, 0xb94ccccd; # [ 93][0002e8]
//     	FADD32I.FTZ R6, -R6, 0xb94ccccd; # [ 94][0002f0]
//     	FADD32I.FTZ R3, -R3, 0xb94ccccd; # [ 95][0002f8]
//     	FCMP.GE R12, R1, 0x40000, R10;   # [ 96][000300]
//     	FCMP.GE R10, RZ, 0x3f800, R10;   # [ 97][000308]
//     	FCMP.GE R10, R10, R12, R6;       # [ 98][000310]
//     	FADD.FTZ R6, R9, -R8;            # [ 99][000318]
//     	FADD.FTZ R9, R10, 1;             # [100][000320]
//     	FADD32I.FTZ R6, -R6, 0xb94ccccd; # [101][000328]
//     	FCMP.GE R6, R10, R9, R6;         # [102][000330]
//     	FADD.FTZ R9, R6, 1;              # [103][000338]
//     	FCMP.GE R6, R6, R9, R3;          # [104][000340]
//     	FADD.FTZ R3, R4, -R8;            # [105][000348]
//     	FADD.FTZ R4, R6, 1;              # [106][000350]
//     	FADD32I.FTZ R3, -R3, 0xb94ccccd; # [107][000358]
//     	FCMP.GE R4, R6, R4, R3;          # [108][000360]
//     	FADD.FTZ R6, R4, 1;              # [109][000368]
//     	FADD.FTZ R2, R2, -R8;            # [110][000370]
//     	FADD32I.FTZ R3, -R2, 0xb94ccccd; # [111][000378]
//     	FADD.FTZ R2, R5, -R8;            # [112][000380]
//     	FCMP.GE R3, R4, R6, R3;          # [113][000388]
//     	FADD32I.FTZ R2, -R2, 0xb94ccccd; # [114][000390]
//     	FADD.FTZ R4, R3, 1;              # [115][000398]
//     	FCMP.GE R4, R3, R4, R2;          # [116][0003a0]
//     	FADD.FTZ R2, R14, -R8;           # [117][0003a8]
//     	FADD.FTZ R5, R4, 1;              # [118][0003b0]
//     	FADD32I.FTZ R3, -R2, 0xb94ccccd; # [119][0003b8]
//     	FCMP.GE R3, R4, R5, R3;          # [120][0003c0]
//     	FADD.FTZ R4, R3, 1;              # [121][0003c8]
//     	FADD.FTZ R2, R11, -R8;           # [122][0003d0]
//     	FADD32I.FTZ R2, -R2, 0xb94ccccd; # [123][0003d8]
//     	FCMP.GE R2, R3, R4, R2;          # [124][0003e0]
//     	FMUL.FMZ R3, R7, R7;             # [125][0003e8]
//     	FMUL32I.FMZ.SAT R4, R2, 0x3e124925; # [126][0003f0]
//     	IPA.PASS.CENTROID R2, a[0x7c];   # [127][0003f8] POSITION_W
//     	FADD.FTZ R5, R4, -1;             # [128][000400]
//     	FFMA.FMZ R8, R5, -c[0x9][0x8], R1; # [129][000408]
//     	MUFU.RCP R2, R2;                 # [130][000410]
//     	FADD.FTZ R6, -R8, 1;             # [131][000418]
//     	IPA.SC.CENTROID R2, a[0x33c], R2; # [132][000420] FIXED_FNC_TEXTURE_3_Q
//     	FFMA.FTZ R3, R3, R6, R8;         # [133][000428]
//     	FADD.FTZ R6, -R3, 1;             # [134][000430]
//     	FFMA.FTZ R2, R2, R6, R3;         # [135][000438]
//     	F2F R3, -R5;                     # [136][000440]
//     	FADD.FTZ R2, R2, -1;             # [137][000448]
//     	FCMP.GTU R3, R3, 0x3f800, R4;    # [138][000450]
//     	FFMA.FTZ R0, R0, R2, R1;         # [139][000458]
//     	MOV R1, R0;                      # [140][000460]
//     	MOV R2, R0;                      # [141][000468]
//     	EXIT;                            # [142][000470]
//     	END
//     END_SECTION
// END_SHADER
// 
