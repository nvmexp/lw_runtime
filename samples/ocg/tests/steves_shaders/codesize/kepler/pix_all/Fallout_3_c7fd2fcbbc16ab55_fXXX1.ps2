// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0xc7fd2fcbbc16ab55
//         UCODE_HASH: 0x17346d2017f9c9b1
//         POOL: APP
//         VERSION: 20
//         # USES: 4993
//         // Time: 26.392ms [1.464 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 9
//         USED_TEXTURE_BITS: 0x41
//         TEXTURE_SLOTS: 7
//         SAMPLER_SLOTS: 7
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX01_Q              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//             TEX03_Q              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00025462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x80aaaa0a
//         0x002a0000      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_x
        def c0, 0.01000000, 0.00000000, 1.00000000, 2.00000000 ; 0x3c23d70a 0x000000 0x3f800000 0x40000000
        def c1, 0.50000000, 1.00000000, 15.00000000, -0.00019531 ; 0x3f000000 0x3f800000 0x41700000 0xb94ccccd
        def c2, 0.60000002, 0.00000000, 0.00000000, 0.00000000 ; 0x3f19999a 0x000000 0x000000 0x000000
        dcl_pp t0.rg
        dcl t6.rgb
        dcl_pp t1
        dcl t2
        dcl_pp t3
        dcl_2d s0
        dcl_2d s6
        mov r0.xyz, t2
        add r0.xyz, -r0, t6
        dp3 r0.x, r0, r0
        rsq r0.x, r0.x
        rcp r0.x, r0.x
        mul r0.y, t2.w, c1.x
        rcp r0.y, r0.y
        mul_sat r0.x, r0.x, r0.y
        rsq r0.y, r0.x
        mul r0.x, r0.x, r0.x
        rcp r0.y, r0.y
        add_sat r0.y, -r0.y, c1.y
        mul_pp r0.y, r0.y, c1.z
        rcp r0.y, r0.y
        rcp r0.z, t1.w
        mul r0.zw, r0.z, t1.xyxy
        mad r1.xy, r0.zwzw, c1.x, c1.x
        add r1.z, -r1.y, c1.y
        mad_sat r2.xy, r0.y, c0.x, r1.xzzw
        mov_sat r1.xy, r1.xzzw
        texld r2, r2, s6
        texld r1, r1, s6
        add r0.y, r1.x, -t1.z
        add r0.y, -r0.y, c1.w
        cmp_pp r0.yz, r0.y, c0, c0.xzw
        add r0.w, r2.x, -t1.z
        add r0.w, -r0.w, c1.w
        cmp_sat_pp r0.y, r0.w, r0.y, r0.z
        add r0.y, r0.y, -c1.y
        mov r1.y, c1.y
        mad_pp r0.y, c3.w, r0.y, r1.y
        add_pp r0.z, -r0.y, c1.y
        cmp_pp r2.w, -r0.y, c1.y, r0.z
        mul_pp r0.y, r0.z, c2.x
        mad_pp r0.yzw, r0.y, -c3.xxyz, r1.y
        lrp_pp r1.xyz, r0.x, c1.y, r0.yzw
        lrp_pp r0.xyz, t3.w, c1.y, r1
        texld_pp r1, t0, s0
        lrp_pp r2.xyz, r1.w, r0, c1.y
        mov_pp oC0, r2
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0x3c23d70a 0x00000000
//         0x3f800000 0x40000000 0x05000051 0xa00f0001
//         0x3f000000 0x3f800000 0x41700000 0xb94ccccd
//         0x05000051 0xa00f0002 0x3f19999a 0x00000000
//         0x00000000 0x00000000 0x0200001f 0x80000000
//         0xb0230000 0x0200001f 0x80000000 0xb0470006
//         0x0200001f 0x80000000 0xb06f0001 0x0200001f
//         0x80000000 0xb04f0002 0x0200001f 0x80000000
//         0xb02f0003 0x0200001f 0x90000000 0xa00f0800
//         0x0200001f 0x90000000 0xa00f0806 0x02000001
//         0x80070000 0xb0e40002 0x03000002 0x80070000
//         0x81e40000 0xb0e40006 0x03000008 0x80010000
//         0x80e40000 0x80e40000 0x02000007 0x80010000
//         0x80000000 0x02000006 0x80010000 0x80000000
//         0x03000005 0x80020000 0xb0ff0002 0xa0000001
//         0x02000006 0x80020000 0x80550000 0x03000005
//         0x80110000 0x80000000 0x80550000 0x02000007
//         0x80020000 0x80000000 0x03000005 0x80010000
//         0x80000000 0x80000000 0x02000006 0x80020000
//         0x80550000 0x03000002 0x80120000 0x81550000
//         0xa0550001 0x03000005 0x80220000 0x80550000
//         0xa0aa0001 0x02000006 0x80020000 0x80550000
//         0x02000006 0x80040000 0xb0ff0001 0x03000005
//         0x800c0000 0x80aa0000 0xb0440001 0x04000004
//         0x80030001 0x80ee0000 0xa0000001 0xa0000001
//         0x03000002 0x80040001 0x81550001 0xa0550001
//         0x04000004 0x80130002 0x80550000 0xa0000000
//         0x80e80001 0x02000001 0x80130001 0x80e80001
//         0x03000042 0x800f0002 0x80e40002 0xa0e40806
//         0x03000042 0x800f0001 0x80e40001 0xa0e40806
//         0x03000002 0x80020000 0x80000001 0xb1aa0001
//         0x03000002 0x80020000 0x81550000 0xa0ff0001
//         0x04000058 0x80260000 0x80550000 0xa0e40000
//         0xa0f80000 0x03000002 0x80080000 0x80000002
//         0xb1aa0001 0x03000002 0x80080000 0x81ff0000
//         0xa0ff0001 0x04000058 0x80320000 0x80ff0000
//         0x80550000 0x80aa0000 0x03000002 0x80020000
//         0x80550000 0xa1550001 0x02000001 0x80020001
//         0xa0550001 0x04000004 0x80220000 0xa0ff0003
//         0x80550000 0x80550001 0x03000002 0x80240000
//         0x81550000 0xa0550001 0x04000058 0x80280002
//         0x81550000 0xa0550001 0x80aa0000 0x03000005
//         0x80220000 0x80aa0000 0xa0000002 0x04000004
//         0x802e0000 0x80550000 0xa1900003 0x80550001
//         0x04000012 0x80270001 0x80000000 0xa0550001
//         0x80f90000 0x04000012 0x80270000 0xb0ff0003
//         0xa0550001 0x80e40001 0x03000042 0x802f0001
//         0xb0e40000 0xa0e40800 0x04000012 0x80270002
//         0x80ff0001 0x80e40000 0xa0550001 0x02000001
//         0x802f0800 0x80e40002 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3c23d70a // 0.01000000
//         COP_CONST[1]: 0xbef5c290 // -0.48000000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][550] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][551] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][552] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][553] = 0x3f800000 // 1.00000000
//         ## USER CONST histogram
//         ##    ~c3.x -> c[6][550] = 100.00%@0.80000000
//         ##    ~c3.y -> c[6][551] = 100.00%@0.80000000
//         ##    ~c3.z -> c[6][552] = 100.00%@0.80000000
//         ##    ~c3.w -> c[6][553] = 100.00%@1.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x6,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd6502bcc,0x00000139
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000139
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x3429f56c,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x1d506b5a,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x000001a0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x9afb413f,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x98b3e573,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x242c07f1,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xc84c7bc6,0x00000340
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000340
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x741dd160,0x000002d8
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x000002d8
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x5fbd43a3,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0xa69cc4af,0x000001a0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x000001a0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x813b2e94,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xcbe72c25,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd442040a,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd6502bcc,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x47358061,0x00000138
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x58e3e29e,0x00000340
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000340
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x5549da71,0x00000068
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Wrap/Wrap/Wrap,0.00000000,256x256x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x18 0 4 "COL1")
//         (0x18 0 4 "ATTR00")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x18 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r5.xyz, v6
//         addr r5.xyz, -r5, v10
//         dp3r r5.x, r5, r5
//         rsqr r5.x, |r5.x|
//         rcpr r5.x, r5.x
//         mulr r5.y, v6.w, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).x
//         rcpr r5.y, r5.y
//         mulr_sat r5.x, r5.x, r5.y
//         rsqr r5.y, |r5.x|
//         mulr r5.x, r5.x, r5.x
//         rcpr r5.y, r5.y
//         addr_sat r5.y, -r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         mulh r5.y, r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).z
//         rcpr r5.y, r5.y
//         rcpr r5.z, v5.w
//         mulr r5.zw, r5.z, v5.xyxy
//         madr r6.xy, r5.zwzw, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).x, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).x
//         addr r6.z, -r6.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         madr_sat r7.xy, r5.y, constant(0.01000000, 0.00000000, 1.00000000, 2.00000000).x, r6.xzzw
//         movr_sat r6.xy, r6.xzzw
//         texr r7, r7.xyyy, #6, #6, 2D
//         texr r6, r6.xyzz, #6, #6, 2D
//         addr r5.y, r6.x, -v5.z
//         addr r5.y, -r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         cmph r5.yz, r5.y, constant(0.01000000, 0.00000000, 1.00000000, 2.00000000), constant(0.01000000, 0.00000000, 1.00000000, 2.00000000).xzww
//         addr r5.w, r7.x, -v5.z
//         addr r5.w, -r5.w, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).w
//         cmph_sat r5.y, r5.w, r5.y, r5.z
//         addr r5.y, r5.y, -constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         movr r6.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         movr r45, c[6][541].w
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madh r5.y, r45, r5.y, r6.y
//         addh r5.z, -r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         cmph r7.w, -r5.y, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y, r5.z
//         mulh r5.y, r5.z, constant(0.60000004, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44, -c[6][541].xxyz
//         movr r44.x, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r44.y, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r44.z, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r44.w, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         madh r5.yzw, r5.y, r44, r6.y
//         lrph r6.xyz, r5.x, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y, r5.yzww
//         lrph r5.xyz, v7.w, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y, r6
//         texh r6, v4.xyzz, #0, #0, 2D
//         lrph r7.xyz, r6.w, r5, constant(0.50000000, 1.00000000, 15.00000000, -0.00019531).y
//         movh r0, r7
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R0, R0;                 # [  1][000008]
//     	IPA.SC R1, a[0x320], R0;         # [  2][000010] TEX2
//     	IPA.SC R2, a[0x360], R0;         # [  3][000018] TEX6
//     	IPA.SC R3, a[0x324], R0;         # [  4][000020] FIXED_FNC_TEXTURE_2_T
//     	IPA.SC R4, a[0x364], R0;         # [  5][000028] FIXED_FNC_TEXTURE_6_T
//     	IPA.SC R5, a[0x328], R0;         # [  6][000030] FIXED_FNC_TEXTURE_2_R
//     	IPA.SC R6, a[0x368], R0;         # [  7][000038] FIXED_FNC_TEXTURE_6_R
//     	IPA.SC R7, a[0x32c], R0;         # [  8][000040] FIXED_FNC_TEXTURE_2_Q
//     	FADD.FTZ R1, -R1, R2;            # [  9][000048]
//     	FADD.FTZ R2, -R3, R4;            # [ 10][000050]
//     	IPA.SC R4, a[0x31c], R0;         # [ 11][000058] FIXED_FNC_TEXTURE_1_Q
//     	FMUL.FTZ R1, R1, R1;             # [ 12][000060]
//     	FADD.FTZ R3, -R5, R6;            # [ 13][000068]
//     	IPA.SC R5, a[0x314], R0;         # [ 14][000070] FIXED_FNC_TEXTURE_1_T
//     	FFMA.FTZ R1, R2, R2, R1;         # [ 15][000078]
//     	FMUL.FMZ R2, R7, 0.5;            # [ 16][000080]
//     	MOV32I R6, 0x3f000000;           # [ 17][000088]
//     	FFMA.FTZ R1, R3, R3, R1;         # [ 18][000090]
//     	MUFU.RCP R3, R4;                 # [ 19][000098]
//     	IPA.SC R4, a[0x310], R0;         # [ 20][0000a0] TEX1
//     	MUFU.RSQ R1, |R1|;               # [ 21][0000a8]
//     	FMUL.FMZ R5, R3, R5;             # [ 22][0000b0]
//     	MUFU.RCP R2, R2;                 # [ 23][0000b8]
//     	MUFU.RCP R1, R1;                 # [ 24][0000c0]
//     	FMUL.FMZ R3, R3, R4;             # [ 25][0000c8]
//     	FFMA.FMZ R4, R5, 0.5, R6;        # [ 26][0000d0]
//     	FMUL.FMZ.SAT R1, R1, R2;         # [ 27][0000d8]
//     	FFMA.FMZ R3, R3, 0.5, R6;        # [ 28][0000e0]
//     	FADD.FTZ R4, -R4, 1;             # [ 29][0000e8]
//     	MUFU.RSQ R2, |R1|;               # [ 30][0000f0]
//     	F2F.SAT R6, R3;                  # [ 31][0000f8]
//     	F2F.SAT R7, R4;                  # [ 32][000100]
//     	MUFU.RCP R2, R2;                 # [ 33][000108]
//     	TEX.NODEP.T R5, R6, 0x6, 0x6, 2D, 0x1; # [ 34][000110]
//     	FADD.FTZ.SAT R2, -R2, 1;         # [ 35][000118]
//     	FMUL.FMZ R2, R2, 15;             # [ 36][000120]
//     	MUFU.RCP R2, R2;                 # [ 37][000128]
//     	FFMA.FMZ.SAT R7, R2, c[0x9][0x0], R4; # [ 38][000130]
//     	FFMA.FMZ.SAT R6, R2, c[0x9][0x0], R3; # [ 39][000138]
//     	TEX.NODEP.T R3, R6, 0x6, 0x6, 2D, 0x1; # [ 40][000140]
//     	IPA.SC R7, a[0x304], R0;         # [ 41][000148] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R6, a[0x300], R0;         # [ 42][000150] TEX0
//     	TEX.NODEP.T R2, R6, 0x0, 0x0, 2D, 0x8; # [ 43][000158]
//     	IPA.SC R4, a[0x318], R0;         # [ 44][000160] FIXED_FNC_TEXTURE_1_R
//     	MOV32I R0, 0x3f800000;           # [ 45][000168]
//     	FADD.FTZ R5, R5, -R4;            # [ 46][000170]
//     	FADD.FTZ R3, R3, -R4;            # [ 47][000178]
//     	FADD32I.FTZ R4, -R5, 0xb94ccccd; # [ 48][000180]
//     	FADD32I.FTZ R3, -R3, 0xb94ccccd; # [ 49][000188]
//     	FCMP.GE R5, R0, 0x40000, R4;     # [ 50][000190]
//     	FCMP.GE R4, RZ, 0x3f800, R4;     # [ 51][000198]
//     	FCMP.GE R3, R4, R5, R3;          # [ 52][0001a0]
//     	FMUL.FMZ R4, R1, R1;             # [ 53][0001a8]
//     	F2F.SAT R5, R3;                  # [ 54][0001b0]
//     	IPA.PASS.CENTROID R3, a[0x7c];   # [ 55][0001b8] POSITION_W
//     	FADD.FTZ R6, R5, -1;             # [ 56][0001c0]
//     	FFMA.FMZ R8, R6, -c[0x9][0x4], R0; # [ 57][0001c8]
//     	MUFU.RCP R1, R3;                 # [ 58][0001d0]
//     	FADD.FTZ R7, -R8, 1;             # [ 59][0001d8]
//     	IPA.SC.CENTROID R1, a[0x33c], R1; # [ 60][0001e0] FIXED_FNC_TEXTURE_3_Q
//     	FFMA.FTZ R3, R4, R7, R8;         # [ 61][0001e8]
//     	FADD.FTZ R4, -R3, 1;             # [ 62][0001f0]
//     	FFMA.FTZ R1, R1, R4, R3;         # [ 63][0001f8]
//     	F2F R3, -R6;                     # [ 64][000200]
//     	FADD.FTZ R1, R1, -1;             # [ 65][000208]
//     	FCMP.GTU R3, R3, 0x3f800, R5;    # [ 66][000210]
//     	FFMA.FTZ R0, R2, R1, R0;         # [ 67][000218]
//     	MOV R1, R0;                      # [ 68][000220]
//     	MOV R2, R0;                      # [ 69][000228]
//     	EXIT;                            # [ 70][000230]
//     	END
//     END_SECTION
// END_SHADER
// 
