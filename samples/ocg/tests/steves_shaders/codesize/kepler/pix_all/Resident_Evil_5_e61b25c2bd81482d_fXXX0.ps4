// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 10.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0xe61b25c2bd81482d
//         FINGERPRINTER_HASH: 0x0000000000000000
//         UCODE_HASH: 0xca0ab1517b06db50
//         POOL: APP
//         VERSION: 20
//         # USES: 211
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 0
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 34
//         TEXTURE_SLOTS: 6
//         SAMPLER_SLOTS: 6
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//             KILLS_PIXELS
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//             GENERIC01_X          PERSPECTIVE
//             GENERIC01_Y          PERSPECTIVE
//             GENERIC01_Z          PERSPECTIVE
//             GENERIC01_W          PERSPECTIVE
//             GENERIC02_X          PERSPECTIVE
//             GENERIC02_Y          PERSPECTIVE
//             GENERIC02_Z          PERSPECTIVE
//             GENERIC03_X          PERSPECTIVE
//             GENERIC03_Y          PERSPECTIVE
//             GENERIC04_X          PERSPECTIVE
//             GENERIC04_Y          PERSPECTIVE
//             GENERIC04_Z          PERSPECTIVE
//             GENERIC05_X          PERSPECTIVE
//             GENERIC05_Y          PERSPECTIVE
//             GENERIC05_Z          PERSPECTIVE
//             GENERIC06_X          PERSPECTIVE
//             GENERIC06_Y          PERSPECTIVE
//             GENERIC06_Z          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_4_0
        dcl_constantbuffer cb0[25].xyzw, immediateIndexed
        dcl_constantbuffer cb1[3].xyzw, immediateIndexed
        dcl_constantbuffer cb2[2].xyzw, immediateIndexed
        dcl_constantbuffer cb3[45].xyzw, immediateIndexed
        dcl_constantbuffer cb4[5].xyzw, immediateIndexed
        dcl_constantbuffer cb5[1].xyzw, immediateIndexed
        dcl_constantbuffer cb6[16].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s1, mode_default
        dcl_sampler s2, mode_default
        dcl_sampler s3, mode_default
        dcl_sampler s4, mode_default
        dcl_sampler s5, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_resource t3, texturelwbe, (float, float, float, float)
        dcl_resource t4, texture2d, (float, float, float, float)
        dcl_resource t5, texture2d, (float, float, float, float)
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_input_ps v1.xyzw, linear
        dcl_input_ps v2.xyz, linear
        dcl_input_ps v3.xy, linear
        dcl_input_ps v4.xyz, linear
        dcl_input_ps v5.xyz, linear
        dcl_input_ps v6.xyz, linear
        dcl_output o0.xyzw
        dcl_temps 11 
        add r0.xyz, v2.xyzx, -cb0[24].xyzx
        dp3 r0.w, r0.xyzx, r0.xyzx
        sqrt r1.y, r0.w
        rsq r0.w, r0.w
        mul r0.xyz, r0.xyzx, r0.wwww
        sample r2.xyzw, v1.xyxx, t0.xyzw, s0
        mul r2.xyz, r2.xyzx, cb5[0].xyzx
        add r0.w, r2.w, -cb1[2].x
        lt r0.w, r0.w, l(0.00000000)
        discard_sat r0.w
        sample r3.xyzw, v3.xyxx, t1.xyzw, s1
        mul r4.xy, v3.xyxx, cb6[0].yyyy
        sample r4.xyzw, r4.xyxx, t5.xyzw, s5
        add r3.xyz, r3.xywx, l(-0.51764709, -0.50980395, -0.50000000, 0.00000000)
        add r3.yzw, r3.xxyz, r3.xxyz
        mul r3.x, r3.w, r3.y
        add r4.xyz, r4.xywx, l(-0.51764709, -0.50980395, -0.50000000, 0.00000000)
        mov r5.y, l(0x40000000)
        mov r5.x, cb6[0].x
        mul r4.yzw, r4.xxyz, r5.yyxy
        mul r4.x, r4.w, r4.y
        mad r3.xy, r4.xzxx, r5.xyxx, r3.xzxx
        mad r0.w, -r3.x, r3.x, l(1.00000000)
        mad r0.w, -r3.y, r3.y, r0.w
        max r0.w, r0.w, l(0.00000000)
        sqrt r0.w, r0.w
        mul r3.yzw, r3.yyyy, v5.xxyz
        mad r3.xyz, r3.xxxx, v4.xyzx, r3.yzwy
        mad r3.xyz, r0.wwww, v6.xyzx, r3.xyzx
        dp3 r0.w, r3.xyzx, r3.xyzx
        rsq r0.w, r0.w
        mul r3.xyz, r3.xyzx, r0.wwww
        sample r4.xyzw, v3.xyxx, t2.xyzw, s2
        mul r5.xy, v0.xyxx, cb2[1].zwzz
        sample r5.xyzw, r5.xyxx, t4.xyzw, s4
        mul r5.xyzw, r5.xyzw, cb3[34].xyzw
        min r5.xyzw, r5.xyzw, cb3[44].zzzz
        max r5.xyzw, r5.xyzw, cb3[44].wwww
        max r6.xy, r5.zwzz, r5.xyxx
        max r0.w, r6.y, r6.x
        if_nz cb3[0].x
          mul r6.xyzw, r5.xyzw, cb3[35].xyzw
          max r6.xy, r6.zwzz, r6.xyxx
          max r1.w, r6.y, r6.x
          add r1.w, -r1.w, l(1.00000000)
          add r6.xyz, -v2.xyzx, cb3[11].xyzx
          dp3 r4.w, r6.xyzx, r6.xyzx
          rsq r6.w, r4.w
          mul r7.xyz, r6.xyzx, r6.wwww
          mad r4.w, r4.w, r6.w, -cb3[10].w
          mul_sat r4.w, r4.w, cb3[11].w
          add r4.w, -r4.w, l(1.00000000)
          dp3 r7.w, -cb3[12].xyzx, r7.xyzx
          add r7.w, r7.w, -cb3[13].x
          mul r7.w, r7.w, cb3[13].y
          max r7.w, r7.w, cb3[13].w
          min r7.w, r7.w, l(1.00000000)
          mul r4.w, r4.w, r7.w
          mul r8.xyz, r4.wwww, cb3[10].xyzx
          dp3 r4.w, r3.xyzx, r7.xyzx
          max r4.w, r4.w, l(0.00000000)
          mul r7.xyz, r8.xyzx, r4.wwww
          mad r6.xyz, r6.xyzx, r6.wwww, -r0.xyzx
          dp3 r4.w, r6.xyzx, r6.xyzx
          rsq r4.w, r4.w
          mul r6.xyz, r6.xyzx, r4.wwww
          dp3 r4.w, r3.xyzx, r6.xyzx
          max r4.w, r4.w, l(0.00001000)
          log r4.w, r4.w
          mul r4.w, r4.w, cb6[1].z
          exp r4.w, r4.w
          mul r6.xyz, r8.xyzx, r4.wwww
          mul r7.xyz, r1.wwww, r7.xyzx
          mul r7.xyz, r7.xyzx, cb3[13].zzzz
          mul r6.xyz, r1.wwww, r6.xyzx
          if_nz cb3[0].y
            mul r8.xyzw, r5.xyzw, cb3[36].xyzw
            max r8.xy, r8.zwzz, r8.xyxx
            max r1.w, r8.y, r8.x
            add r1.w, -r1.w, l(1.00000000)
            add r8.xyz, -v2.xyzx, cb3[15].xyzx
            dp3 r4.w, r8.xyzx, r8.xyzx
            rsq r6.w, r4.w
            mul r9.xyz, r8.xyzx, r6.wwww
            mad r4.w, r4.w, r6.w, -cb3[14].w
            mul_sat r4.w, r4.w, cb3[15].w
            add r4.w, -r4.w, l(1.00000000)
            dp3 r7.w, -cb3[16].xyzx, r9.xyzx
            add r7.w, r7.w, -cb3[17].x
            mul r7.w, r7.w, cb3[17].y
            max r7.w, r7.w, cb3[17].w
            min r7.w, r7.w, l(1.00000000)
            mul r4.w, r4.w, r7.w
            mul r10.xyz, r4.wwww, cb3[14].xyzx
            dp3 r4.w, r3.xyzx, r9.xyzx
            max r4.w, r4.w, l(0.00000000)
            mul r9.xyz, r10.xyzx, r4.wwww
            mad r8.xyz, r8.xyzx, r6.wwww, -r0.xyzx
            dp3 r4.w, r8.xyzx, r8.xyzx
            rsq r4.w, r4.w
            mul r8.xyz, r8.xyzx, r4.wwww
            dp3 r4.w, r3.xyzx, r8.xyzx
            max r4.w, r4.w, l(0.00001000)
            log r4.w, r4.w
            mul r4.w, r4.w, cb6[1].z
            exp r4.w, r4.w
            mul r8.xyz, r10.xyzx, r4.wwww
            mul r9.xyz, r1.wwww, r9.xyzx
            mad r7.xyz, r9.xyzx, cb3[17].zzzz, r7.xyzx
            mad r6.xyz, r8.xyzx, r1.wwww, r6.xyzx
            if_nz cb3[0].z
              mul r8.xyzw, r5.xyzw, cb3[37].xyzw
              max r8.xy, r8.zwzz, r8.xyxx
              max r1.w, r8.y, r8.x
              add r1.w, -r1.w, l(1.00000000)
              add r8.xyz, -v2.xyzx, cb3[19].xyzx
              dp3 r4.w, r8.xyzx, r8.xyzx
              rsq r6.w, r4.w
              mul r9.xyz, r8.xyzx, r6.wwww
              mad r4.w, r4.w, r6.w, -cb3[18].w
              mul_sat r4.w, r4.w, cb3[19].w
              add r4.w, -r4.w, l(1.00000000)
              dp3 r7.w, -cb3[20].xyzx, r9.xyzx
              add r7.w, r7.w, -cb3[21].x
              mul r7.w, r7.w, cb3[21].y
              max r7.w, r7.w, cb3[21].w
              min r7.w, r7.w, l(1.00000000)
              mul r4.w, r4.w, r7.w
              mul r10.xyz, r4.wwww, cb3[18].xyzx
              dp3 r4.w, r3.xyzx, r9.xyzx
              max r4.w, r4.w, l(0.00000000)
              mul r9.xyz, r10.xyzx, r4.wwww
              mad r8.xyz, r8.xyzx, r6.wwww, -r0.xyzx
              dp3 r4.w, r8.xyzx, r8.xyzx
              rsq r4.w, r4.w
              mul r8.xyz, r8.xyzx, r4.wwww
              dp3 r4.w, r3.xyzx, r8.xyzx
              max r4.w, r4.w, l(0.00001000)
              log r4.w, r4.w
              mul r4.w, r4.w, cb6[1].z
              exp r4.w, r4.w
              mul r8.xyz, r10.xyzx, r4.wwww
              mul r9.xyz, r1.wwww, r9.xyzx
              mad r7.xyz, r9.xyzx, cb3[21].zzzz, r7.xyzx
              mad r6.xyz, r8.xyzx, r1.wwww, r6.xyzx
              if_nz cb3[0].w
                mul r8.xyzw, r5.xyzw, cb3[38].xyzw
                max r8.xy, r8.zwzz, r8.xyxx
                max r1.w, r8.y, r8.x
                add r1.w, -r1.w, l(1.00000000)
                add r8.xyz, -v2.xyzx, cb3[23].xyzx
                dp3 r4.w, r8.xyzx, r8.xyzx
                rsq r6.w, r4.w
                mul r9.xyz, r8.xyzx, r6.wwww
                mad r4.w, r4.w, r6.w, -cb3[22].w
                mul_sat r4.w, r4.w, cb3[23].w
                add r4.w, -r4.w, l(1.00000000)
                dp3 r7.w, -cb3[24].xyzx, r9.xyzx
                add r7.w, r7.w, -cb3[25].x
                mul r7.w, r7.w, cb3[25].y
                max r7.w, r7.w, cb3[25].w
                min r7.w, r7.w, l(1.00000000)
                mul r4.w, r4.w, r7.w
                mul r10.xyz, r4.wwww, cb3[22].xyzx
                dp3 r4.w, r3.xyzx, r9.xyzx
                max r4.w, r4.w, l(0.00000000)
                mul r9.xyz, r10.xyzx, r4.wwww
                mad r8.xyz, r8.xyzx, r6.wwww, -r0.xyzx
                dp3 r4.w, r8.xyzx, r8.xyzx
                rsq r4.w, r4.w
                mul r8.xyz, r8.xyzx, r4.wwww
                dp3 r4.w, r3.xyzx, r8.xyzx
                max r4.w, r4.w, l(0.00001000)
                log r4.w, r4.w
                mul r4.w, r4.w, cb6[1].z
                exp r4.w, r4.w
                mul r8.xyz, r10.xyzx, r4.wwww
                mul r9.xyz, r1.wwww, r9.xyzx
                mad r7.xyz, r9.xyzx, cb3[25].zzzz, r7.xyzx
                mad r6.xyz, r8.xyzx, r1.wwww, r6.xyzx
              endif 
            endif 
          endif 
        else 
          mov r7.xyz, l(0, 0, 0, 0)
          mov r6.xyz, l(0, 0, 0, 0)
        endif 
        if_nz cb3[1].x
          mul r8.xyzw, r5.xyzw, cb3[39].xyzw
          max r8.xy, r8.zwzz, r8.xyxx
          max r1.w, r8.y, r8.x
          add r1.w, -r1.w, l(1.00000000)
          add r8.xyz, -v2.xyzx, cb3[3].xyzx
          dp3 r4.w, r8.xyzx, r8.xyzx
          rsq r6.w, r4.w
          mul r8.xyz, r8.xyzx, r6.wwww
          mad r4.w, r4.w, r6.w, -cb3[2].w
          mul_sat r4.w, r4.w, cb3[3].w
          add r4.w, -r4.w, l(1.00000000)
          mul r9.xyz, r4.wwww, cb3[2].xyzx
          dp3 r4.w, r8.xyzx, r3.xyzx
          max r4.w, r4.w, l(0.00000000)
          mul r8.xyz, r9.xyzx, r4.wwww
          mad r7.xyz, r8.xyzx, r1.wwww, r7.xyzx
          if_nz cb3[1].y
            mul r8.xyzw, r5.xyzw, cb3[40].xyzw
            max r8.xy, r8.zwzz, r8.xyxx
            max r1.w, r8.y, r8.x
            add r1.w, -r1.w, l(1.00000000)
            add r8.xyz, -v2.xyzx, cb3[5].xyzx
            dp3 r4.w, r8.xyzx, r8.xyzx
            rsq r6.w, r4.w
            mul r8.xyz, r8.xyzx, r6.wwww
            mad r4.w, r4.w, r6.w, -cb3[4].w
            mul_sat r4.w, r4.w, cb3[5].w
            add r4.w, -r4.w, l(1.00000000)
            mul r9.xyz, r4.wwww, cb3[4].xyzx
            dp3 r4.w, r8.xyzx, r3.xyzx
            max r4.w, r4.w, l(0.00000000)
            mul r8.xyz, r9.xyzx, r4.wwww
            mad r7.xyz, r8.xyzx, r1.wwww, r7.xyzx
            if_nz cb3[1].z
              mul r8.xyzw, r5.xyzw, cb3[41].xyzw
              max r8.xy, r8.zwzz, r8.xyxx
              max r1.w, r8.y, r8.x
              add r1.w, -r1.w, l(1.00000000)
              add r8.xyz, -v2.xyzx, cb3[7].xyzx
              dp3 r4.w, r8.xyzx, r8.xyzx
              rsq r6.w, r4.w
              mul r8.xyz, r8.xyzx, r6.wwww
              mad r4.w, r4.w, r6.w, -cb3[6].w
              mul_sat r4.w, r4.w, cb3[7].w
              add r4.w, -r4.w, l(1.00000000)
              mul r9.xyz, r4.wwww, cb3[6].xyzx
              dp3 r4.w, r8.xyzx, r3.xyzx
              max r4.w, r4.w, l(0.00000000)
              mul r8.xyz, r9.xyzx, r4.wwww
              mad r7.xyz, r8.xyzx, r1.wwww, r7.xyzx
              if_nz cb3[1].w
                mul r5.xyzw, r5.xyzw, cb3[42].xyzw
                max r5.xy, r5.zwzz, r5.xyxx
                max r1.w, r5.y, r5.x
                add r1.w, -r1.w, l(1.00000000)
                add r5.xyz, -v2.xyzx, cb3[9].xyzx
                dp3 r4.w, r5.xyzx, r5.xyzx
                rsq r5.w, r4.w
                mul r5.xyz, r5.xyzx, r5.wwww
                mad r4.w, r4.w, r5.w, -cb3[8].w
                mul_sat r4.w, r4.w, cb3[9].w
                add r4.w, -r4.w, l(1.00000000)
                mul r8.xyz, r4.wwww, cb3[8].xyzx
                dp3 r4.w, r5.xyzx, r3.xyzx
                max r4.w, r4.w, l(0.00000000)
                mul r5.xyz, r8.xyzx, r4.wwww
                mad r7.xyz, r5.xyzx, r1.wwww, r7.xyzx
              endif 
            endif 
          endif 
        endif 
        mov r3.w, l(0x3f800000)
        dp4 r5.x, cb3[27].xyzw, r3.xyzw
        dp4 r5.y, cb3[28].xyzw, r3.xyzw
        dp4 r5.z, cb3[29].xyzw, r3.xyzw
        mul r8.xyzw, r3.yzzx, r3.xyzz
        dp4 r9.x, cb3[30].xyzw, r8.xyzw
        dp4 r9.y, cb3[31].xyzw, r8.xyzw
        dp4 r9.z, cb3[32].xyzw, r8.xyzw
        mul r1.w, r3.y, r3.y
        mad r1.w, r3.x, r3.x, -r1.w
        add r5.xyz, r5.xyzx, r9.xyzx
        mad r5.xyz, cb3[33].xyzx, r1.wwww, r5.xyzx
        mad r5.xyz, r7.xyzx, v1.wwww, r5.xyzx
        ne r1.w, l(0.00000000, 0.00000000, 0.00000000, 0.00000000), cb6[11].z
        mul r7.xyz, r5.xyzx, cb6[13].xxxx
        mul r8.xyz, r5.xyzx, cb6[14].xxxx
        mul r8.xyz, r8.xyzx, cb6[12].xxxx
        mad r7.xyz, r7.xyzx, cb6[11].wwww, r8.xyzx
        movc r5.xyz, r1.wwww, r7.xyzx, r5.xyzx
        dp3 r3.w, r0.xyzx, r3.xyzx
        add r4.w, r3.w, r3.w
        mad r3.xyz, r3.xyzx, -r4.wwww, r0.xyzx
        sample_l r7.xyzw, r3.xyzx, t3.xyzw, s3, cb6[2].x
        max r3.x, r7.w, l(0.00392157)
        div r3.x, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r3.x
        mul r3.xyz, r7.xyzx, r3.xxxx
        mad r0.w, -r0.w, cb3[44].x, l(1.00000000)
        mul r3.xyz, r3.xyzx, r0.wwww
        mad r3.xyz, r3.xyzx, cb6[1].wwww, r6.xyzx
        add r0.w, -r3.w, l(1.00000000)
        mul r3.w, r0.w, r0.w
        mul r3.w, r3.w, r3.w
        mul r0.w, r0.w, r3.w
        mad_sat r0.w, r0.w, cb6[1].x, cb6[1].y
        add r0.w, -r0.w, l(1.00000000)
        mul r0.w, r0.w, v1.w
        mul r6.xyz, r3.xyzx, cb6[15].xxxx
        movc r3.xyz, r1.wwww, r6.xyzx, r3.xyzx
        mul r4.xyz, r4.xyzx, r0.wwww
        mul r3.xyz, r3.xyzx, r4.xyzx
        mad r2.xyz, r5.xyzx, r2.xyzx, r3.xyzx
        mul o0.w, r2.w, v1.z
        add r0.w, r1.y, -cb4[1].x
        mul r0.w, r0.w, cb4[1].z
        mov r3.xyz, v2.xyzx
        mov r3.w, l(0x3f800000)
        dp4 r1.w, cb4[2].xyzw, r3.xyzw
        mul r2.w, r1.w, cb4[1].w
        min r1.w, r1.w, l(0.00000000)
        dp3 r0.x, r0.xyzx, cb4[2].xyzx
        min r0.x, r0.x, l(-0.00010000)
        div r1.x, r1.w, r0.x
        mov r1.z, l(0x3f800000)
        dp3 r0.x, r1.xyzx, cb4[4].xyzx
        max r0.x, r2.w, r0.x
        max r0.x, r0.w, r0.x
        min r0.x, r0.x, cb4[3].w
        max r0.x, r0.x, l(0.00000000)
        add r0.yzw, -r2.xxyz, cb4[3].xxyz
        mad r0.xyz, r0.xxxx, r0.yzwy, r2.xyzx
        movc r0.xyz, cb4[0].xxxx, r0.xyzx, r2.xyzx
        mul o0.xyz, r0.xyzx, cb1[0].xxxx
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f800000 // 1.000000
//         COP_CONST[1]: 0x3727c5ac // 0.000010
//         COP_CONST[2]: 0x3b808081 // 0.003922
//         COP_CONST[3]: 0xb8d1b717 // -0.000100
//         COP_CONST[4]: 0x3e4ccccd // 0.200000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][96] = 0x4480bb91 // 1029.861450
//         USER_CONST: c[0][97] = 0x42e9fb4c // 116.990814
//         USER_CONST: c[0][98] = 0x44816a4f // 1035.322144
//         USER_CONST: c[1][0] = 0x3ed51eb7 // 0.416250
//         USER_CONST: c[1][8] = 0x00000000 // 0.000000
//         USER_CONST: c[2][6] = 0x3a088889 // 0.000521
//         USER_CONST: c[2][7] = 0x3a5a740e // 0.000833
//         USER_CONST: c[3][8] = 0x00000000 // 0.000000
//         USER_CONST: c[3][9] = 0x00000000 // 0.000000
//         USER_CONST: c[3][10] = 0x00000000 // 0.000000
//         USER_CONST: c[3][11] = 0x00000000 // 0.000000
//         USER_CONST: c[3][12] = 0x00000000 // 0.000000
//         USER_CONST: c[3][13] = 0x00000000 // 0.000000
//         USER_CONST: c[3][14] = 0x00000000 // 0.000000
//         USER_CONST: c[3][15] = 0x00000000 // 0.000000
//         USER_CONST: c[3][16] = 0x00000000 // 0.000000
//         USER_CONST: c[3][17] = 0x00000000 // 0.000000
//         USER_CONST: c[3][18] = 0x00000000 // 0.000000
//         USER_CONST: c[3][19] = 0x00000000 // 0.000000
//         USER_CONST: c[3][20] = 0x00000000 // 0.000000
//         USER_CONST: c[3][21] = 0x00000000 // 0.000000
//         USER_CONST: c[3][22] = 0x00000000 // 0.000000
//         USER_CONST: c[3][23] = 0x00000000 // 0.000000
//         USER_CONST: c[3][24] = 0x00000000 // 0.000000
//         USER_CONST: c[3][25] = 0x00000000 // 0.000000
//         USER_CONST: c[3][26] = 0x00000000 // 0.000000
//         USER_CONST: c[3][27] = 0x00000000 // 0.000000
//         USER_CONST: c[3][28] = 0x00000000 // 0.000000
//         USER_CONST: c[3][29] = 0x00000000 // 0.000000
//         USER_CONST: c[3][30] = 0x00000000 // 0.000000
//         USER_CONST: c[3][31] = 0x00000000 // 0.000000
//         USER_CONST: c[3][32] = 0x00000000 // 0.000000
//         USER_CONST: c[3][33] = 0x00000000 // 0.000000
//         USER_CONST: c[3][34] = 0x00000000 // 0.000000
//         USER_CONST: c[3][35] = 0x00000000 // 0.000000
//         USER_CONST: c[3][36] = 0x00000000 // 0.000000
//         USER_CONST: c[3][37] = 0x00000000 // 0.000000
//         USER_CONST: c[3][38] = 0x00000000 // 0.000000
//         USER_CONST: c[3][39] = 0x00000000 // 0.000000
//         USER_CONST: c[3][43] = 0x00000000 // 0.000000
//         USER_CONST: c[3][47] = 0x00000000 // 0.000000
//         USER_CONST: c[3][52] = 0x00000000 // 0.000000
//         USER_CONST: c[3][53] = 0x00000000 // 0.000000
//         USER_CONST: c[3][55] = 0x3f800000 // 1.000000
//         USER_CONST: c[3][59] = 0x00000000 // 0.000000
//         USER_CONST: c[3][63] = 0x00000000 // 0.000000
//         USER_CONST: c[3][68] = 0x00000000 // 0.000000
//         USER_CONST: c[3][69] = 0x00000000 // 0.000000
//         USER_CONST: c[3][71] = 0x3f800000 // 1.000000
//         USER_CONST: c[3][72] = 0x00000000 // 0.000000
//         USER_CONST: c[3][73] = 0x00000000 // 0.000000
//         USER_CONST: c[3][74] = 0x00000000 // 0.000000
//         USER_CONST: c[3][75] = 0x00000000 // 0.000000
//         USER_CONST: c[3][76] = 0x00000000 // 0.000000
//         USER_CONST: c[3][77] = 0x00000000 // 0.000000
//         USER_CONST: c[3][78] = 0x00000000 // 0.000000
//         USER_CONST: c[3][79] = 0x00000000 // 0.000000
//         USER_CONST: c[3][80] = 0x00000000 // 0.000000
//         USER_CONST: c[3][81] = 0x00000000 // 0.000000
//         USER_CONST: c[3][82] = 0x00000000 // 0.000000
//         USER_CONST: c[3][84] = 0x00000000 // 0.000000
//         USER_CONST: c[3][85] = 0x00000000 // 0.000000
//         USER_CONST: c[3][86] = 0x00000000 // 0.000000
//         USER_CONST: c[3][87] = 0x00000000 // 0.000000
//         USER_CONST: c[3][88] = 0x00000000 // 0.000000
//         USER_CONST: c[3][89] = 0x00000000 // 0.000000
//         USER_CONST: c[3][90] = 0x00000000 // 0.000000
//         USER_CONST: c[3][91] = 0x00000000 // 0.000000
//         USER_CONST: c[3][92] = 0x00000000 // 0.000000
//         USER_CONST: c[3][93] = 0x00000000 // 0.000000
//         USER_CONST: c[3][94] = 0x00000000 // 0.000000
//         USER_CONST: c[3][95] = 0x00000000 // 0.000000
//         USER_CONST: c[3][96] = 0x00000000 // 0.000000
//         USER_CONST: c[3][97] = 0x00000000 // 0.000000
//         USER_CONST: c[3][98] = 0x00000000 // 0.000000
//         USER_CONST: c[3][100] = 0x00000000 // 0.000000
//         USER_CONST: c[3][101] = 0x00000000 // 0.000000
//         USER_CONST: c[3][102] = 0x00000000 // 0.000000
//         USER_CONST: c[3][103] = 0x00000000 // 0.000000
//         USER_CONST: c[3][136] = 0x00000000 // 0.000000
//         USER_CONST: c[3][137] = 0x00000000 // 0.000000
//         USER_CONST: c[3][141] = 0x00000000 // 0.000000
//         USER_CONST: c[3][143] = 0x00000000 // 0.000000
//         USER_CONST: c[3][145] = 0x00000000 // 0.000000
//         USER_CONST: c[3][147] = 0x00000000 // 0.000000
//         USER_CONST: c[3][148] = 0x00000000 // 0.000000
//         USER_CONST: c[3][149] = 0x00000000 // 0.000000
//         USER_CONST: c[3][150] = 0x00000000 // 0.000000
//         USER_CONST: c[3][151] = 0x00000000 // 0.000000
//         USER_CONST: c[3][152] = 0x00000000 // 0.000000
//         USER_CONST: c[3][153] = 0x00000000 // 0.000000
//         USER_CONST: c[3][154] = 0x00000000 // 0.000000
//         USER_CONST: c[3][155] = 0x00000000 // 0.000000
//         USER_CONST: c[3][156] = 0x00000000 // 0.000000
//         USER_CONST: c[3][157] = 0x00000000 // 0.000000
//         USER_CONST: c[3][158] = 0x00000000 // 0.000000
//         USER_CONST: c[3][159] = 0x00000000 // 0.000000
//         USER_CONST: c[3][160] = 0x00000000 // 0.000000
//         USER_CONST: c[3][161] = 0x00000000 // 0.000000
//         USER_CONST: c[3][162] = 0x00000000 // 0.000000
//         USER_CONST: c[3][163] = 0x00000000 // 0.000000
//         USER_CONST: c[3][164] = 0x00000000 // 0.000000
//         USER_CONST: c[3][165] = 0x00000000 // 0.000000
//         USER_CONST: c[3][166] = 0x00000000 // 0.000000
//         USER_CONST: c[3][167] = 0x00000000 // 0.000000
//         USER_CONST: c[3][168] = 0x00000000 // 0.000000
//         USER_CONST: c[3][169] = 0x00000000 // 0.000000
//         USER_CONST: c[3][170] = 0x00000000 // 0.000000
//         USER_CONST: c[3][171] = 0x00000000 // 0.000000
//         USER_CONST: c[3][176] = 0x3f400000 // 0.750000
//         USER_CONST: c[3][178] = 0x3f800000 // 1.000000
//         USER_CONST: c[4][4] = 0x44bb8000 // 1500.000000
//         USER_CONST: c[4][6] = 0x38f6b949 // 0.000118
//         USER_CONST: c[4][7] = 0x00000000 // 0.000000
//         USER_CONST: c[4][8] = 0x00000000 // 0.000000
//         USER_CONST: c[4][9] = 0x3f800000 // 1.000000
//         USER_CONST: c[4][10] = 0x00000000 // 0.000000
//         USER_CONST: c[4][11] = 0x00000000 // 0.000000
//         USER_CONST: c[4][12] = 0x3f800000 // 1.000000
//         USER_CONST: c[4][13] = 0x3f800000 // 1.000000
//         USER_CONST: c[4][14] = 0x3f4ccccd // 0.800000
//         USER_CONST: c[4][15] = 0x3e4ccccd // 0.200000
//         USER_CONST: c[4][16] = 0x00000000 // 0.000000
//         USER_CONST: c[4][17] = 0x00000000 // 0.000000
//         USER_CONST: c[4][18] = 0x00000000 // 0.000000
//         USER_CONST: c[6][9] = 0x00000000 // 0.000000
//         USER_CONST: c[6][10] = 0x00000000 // 0.000000
//         USER_CONST: c[6][11] = 0x00000000 // 0.000000
//         USER_CONST: c[6][48] = 0x00000000 // 0.000000
//         USER_CONST: c[6][60] = 0x3f800000 // 1.000000
//         USER_CONST: c[3][0] = 0x00000001 // 0.000000
//         USER_CONST: c[3][2] = 0x00000000 // 0.000000
//         USER_CONST: c[3][3] = 0x00000000 // 0.000000
//         USER_CONST: c[3][4] = 0x00000000 // 0.000000
//         USER_CONST: c[3][5] = 0x00000000 // 0.000000
//         USER_CONST: c[3][6] = 0x00000000 // 0.000000
//         USER_CONST: c[3][7] = 0x00000000 // 0.000000
//         USER_CONST: c[4][0] = 0x00000001 // 0.000000
//     END_SECTION
//     # Exelwtion Time: 56.290ms [2.721 percent]
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][96] = 100.00%@1029.86145020
//                 ~c[0][97] = 100.00%@116.99081421
//                 ~c[0][98] = 100.00%@1035.32214355
//                 ~c[1][0] = 100.00%@0.41624996
//                 ~c[1][8] = 100.00%@0.00000000
//                 ~c[2][6] = 100.00%@0.00052083
//                 ~c[2][7] = 100.00%@0.00083333
//                 ~c[3][8] = 100.00%@0.00000000
//                 ~c[3][9] = 100.00%@0.00000000
//                 ~c[3][10] = 100.00%@0.00000000
//                 ~c[3][11] = 100.00%@0.00000000
//                 ~c[3][12] = 100.00%@0.00000000
//                 ~c[3][13] = 100.00%@0.00000000
//                 ~c[3][14] = 100.00%@0.00000000
//                 ~c[3][15] = 100.00%@0.00000000
//                 ~c[3][16] = 100.00%@0.00000000
//                 ~c[3][17] = 100.00%@0.00000000
//                 ~c[3][18] = 100.00%@0.00000000
//                 ~c[3][19] = 100.00%@0.00000000
//                 ~c[3][20] = 100.00%@0.00000000
//                 ~c[3][21] = 100.00%@0.00000000
//                 ~c[3][22] = 100.00%@0.00000000
//                 ~c[3][23] = 100.00%@0.00000000
//                 ~c[3][24] = 100.00%@0.00000000
//                 ~c[3][25] = 100.00%@0.00000000
//                 ~c[3][26] = 100.00%@0.00000000
//                 ~c[3][27] = 100.00%@0.00000000
//                 ~c[3][28] = 100.00%@0.00000000
//                 ~c[3][29] = 100.00%@0.00000000
//                 ~c[3][30] = 100.00%@0.00000000
//                 ~c[3][31] = 100.00%@0.00000000
//                 ~c[3][32] = 100.00%@0.00000000
//                 ~c[3][33] = 100.00%@0.00000000
//                 ~c[3][34] = 100.00%@0.00000000
//                 ~c[3][35] = 100.00%@0.00000000
//                 ~c[3][36] = 100.00%@0.00000000
//                 ~c[3][37] = 100.00%@0.00000000
//                 ~c[3][38] = 100.00%@0.00000000
//                 ~c[3][39] = 100.00%@0.00000000
//                  c[3][40] = 100.00%@3.00000000
//                  c[3][41] = 100.00%@3.00000000
//                  c[3][42] = 100.00%@3.00000000
//                 ~c[3][43] = 100.00%@0.00000000
//                  c[3][44] = 100.00%@-1212070016.00000000
//                  c[3][45] = 100.00%@3678204928.00000000
//                  c[3][46] = 100.00%@3162550016.00000000
//                 ~c[3][47] = 100.00%@0.00000000
//                  c[3][48] = 100.00%@0.24241400
//                  c[3][49] = 100.00%@-0.73564100
//                  c[3][50] = 100.00%@-0.63251001
//                 ~c[3][52] = 100.00%@0.00000000
//                 ~c[3][53] = 100.00%@0.00000000
//                  c[3][54] = 100.00%@0.69999999
//                 ~c[3][55] = 100.00%@1.00000000
//                  c[3][56] = 50.00%@0.24772394 50.00%@1.80634332
//                  c[3][57] = 50.00%@0.24772394 50.00%@1.80634332
//                  c[3][58] = 50.00%@0.24772394 50.00%@1.80634332
//                 ~c[3][59] = 100.00%@0.00000000
//                  c[3][60] = 50.00%@-2197114880.00000000 50.00%@2778340096.00000000
//                  c[3][61] = 50.00%@3075405056.00000000 50.00%@3038004992.00000000
//                  c[3][62] = 50.00%@3273309952.00000000 50.00%@2837490176.00000000
//                 ~c[3][63] = 100.00%@0.00000000
//                  c[3][64] = 50.00%@0.43942299 50.00%@-0.55566800
//                  c[3][65] = 50.00%@-0.61508101 50.00%@-0.60760099
//                  c[3][66] = 50.00%@-0.65466201 50.00%@-0.56749803
//                 ~c[3][68] = 100.00%@0.00000000
//                 ~c[3][69] = 100.00%@0.00000000
//                  c[3][70] = 50.00%@0.20000000 50.00%@0.50000000
//                 ~c[3][71] = 100.00%@1.00000000
//                 ~c[3][72] = 100.00%@0.00000000
//                 ~c[3][73] = 100.00%@0.00000000
//                 ~c[3][74] = 100.00%@0.00000000
//                 ~c[3][75] = 100.00%@0.00000000
//                 ~c[3][76] = 100.00%@0.00000000
//                 ~c[3][77] = 100.00%@0.00000000
//                 ~c[3][78] = 100.00%@0.00000000
//                 ~c[3][79] = 100.00%@0.00000000
//                 ~c[3][80] = 100.00%@0.00000000
//                 ~c[3][81] = 100.00%@0.00000000
//                 ~c[3][82] = 100.00%@0.00000000
//                 ~c[3][84] = 100.00%@0.00000000
//                 ~c[3][85] = 100.00%@0.00000000
//                 ~c[3][86] = 100.00%@0.00000000
//                 ~c[3][87] = 100.00%@0.00000000
//                 ~c[3][88] = 100.00%@0.00000000
//                 ~c[3][89] = 100.00%@0.00000000
//                 ~c[3][90] = 100.00%@0.00000000
//                 ~c[3][91] = 100.00%@0.00000000
//                 ~c[3][92] = 100.00%@0.00000000
//                 ~c[3][93] = 100.00%@0.00000000
//                 ~c[3][94] = 100.00%@0.00000000
//                 ~c[3][95] = 100.00%@0.00000000
//                 ~c[3][96] = 100.00%@0.00000000
//                 ~c[3][97] = 100.00%@0.00000000
//                 ~c[3][98] = 100.00%@0.00000000
//                 ~c[3][100] = 100.00%@0.00000000
//                 ~c[3][101] = 100.00%@0.00000000
//                 ~c[3][102] = 100.00%@0.00000000
//                 ~c[3][103] = 100.00%@0.00000000
//                  c[3][108] = 100.00%@-0.01040301
//                  c[3][109] = 100.00%@-0.13738787
//                  c[3][110] = 100.00%@-0.12684548
//                  c[3][111] = 100.00%@0.76772344
//                  c[3][112] = 100.00%@-0.00845503
//                  c[3][113] = 100.00%@-0.07244126
//                  c[3][114] = 100.00%@-0.08779449
//                  c[3][115] = 100.00%@0.72197646
//                  c[3][116] = 100.00%@-0.00860058
//                  c[3][117] = 100.00%@0.05538566
//                  c[3][118] = 100.00%@-0.04841223
//                  c[3][119] = 100.00%@0.67449683
//                  c[3][120] = 100.00%@0.00268269
//                  c[3][121] = 100.00%@0.15376480
//                  c[3][122] = 100.00%@0.17216517
//                  c[3][123] = 100.00%@0.05083793
//                  c[3][124] = 100.00%@0.00125568
//                  c[3][125] = 100.00%@0.13671792
//                  c[3][126] = 100.00%@0.13748758
//                  c[3][127] = 100.00%@0.04550060
//                  c[3][128] = 100.00%@-0.00112293
//                  c[3][129] = 100.00%@0.11699869
//                  c[3][130] = 100.00%@0.09982945
//                  c[3][131] = 100.00%@0.04162620
//                  c[3][132] = 100.00%@-0.04239877
//                  c[3][133] = 100.00%@-0.04040262
//                  c[3][134] = 100.00%@-0.04163122
//                 ~c[3][136] = 100.00%@0.00000000
//                 ~c[3][137] = 100.00%@0.00000000
//                  c[3][138] = 50.00%@0.00000000 50.00%@1.00000000
//                  c[3][139] = 50.00%@0.00000000 50.00%@1.00000000
//                  c[3][140] = 100.00%@0.89999998
//                 ~c[3][141] = 100.00%@0.00000000
//                  c[3][142] = 100.00%@0.89999998
//                 ~c[3][143] = 100.00%@0.00000000
//                  c[3][144] = 50.00%@0.00000000 50.00%@0.89999998
//                 ~c[3][145] = 100.00%@0.00000000
//                  c[3][146] = 50.00%@0.00000000 50.00%@0.89999998
//                 ~c[3][147] = 100.00%@0.00000000
//                 ~c[3][148] = 100.00%@0.00000000
//                 ~c[3][149] = 100.00%@0.00000000
//                 ~c[3][150] = 100.00%@0.00000000
//                 ~c[3][151] = 100.00%@0.00000000
//                 ~c[3][152] = 100.00%@0.00000000
//                 ~c[3][153] = 100.00%@0.00000000
//                 ~c[3][154] = 100.00%@0.00000000
//                 ~c[3][155] = 100.00%@0.00000000
//                 ~c[3][156] = 100.00%@0.00000000
//                 ~c[3][157] = 100.00%@0.00000000
//                 ~c[3][158] = 100.00%@0.00000000
//                 ~c[3][159] = 100.00%@0.00000000
//                 ~c[3][160] = 100.00%@0.00000000
//                 ~c[3][161] = 100.00%@0.00000000
//                 ~c[3][162] = 100.00%@0.00000000
//                 ~c[3][163] = 100.00%@0.00000000
//                 ~c[3][164] = 100.00%@0.00000000
//                 ~c[3][165] = 100.00%@0.00000000
//                 ~c[3][166] = 100.00%@0.00000000
//                 ~c[3][167] = 100.00%@0.00000000
//                 ~c[3][168] = 100.00%@0.00000000
//                 ~c[3][169] = 100.00%@0.00000000
//                 ~c[3][170] = 100.00%@0.00000000
//                 ~c[3][171] = 100.00%@0.00000000
//                 ~c[3][176] = 100.00%@0.75000000
//                 ~c[3][178] = 100.00%@1.00000000
//                  c[3][179] = 50.00%@1.00000000 50.00%@0.00000000
//                 ~c[4][4] = 100.00%@1500.00000000
//                 ~c[4][6] = 100.00%@0.00011765
//                 ~c[4][7] = 100.00%@0.00000000
//                 ~c[4][8] = 100.00%@0.00000000
//                 ~c[4][9] = 100.00%@1.00000000
//                 ~c[4][10] = 100.00%@0.00000000
//                 ~c[4][11] = 100.00%@0.00000000
//                 ~c[4][12] = 100.00%@1.00000000
//                 ~c[4][13] = 100.00%@1.00000000
//                 ~c[4][14] = 100.00%@0.80000001
//                 ~c[4][15] = 100.00%@0.20000000
//                 ~c[4][16] = 100.00%@0.00000000
//                 ~c[4][17] = 100.00%@0.00000000
//                 ~c[4][18] = 100.00%@0.00000000
//                  c[5][0] = 50.00%@0.74117649 50.00%@0.66666669
//                  c[5][1] = 50.00%@0.74117649 50.00%@0.66666669
//                  c[5][2] = 50.00%@0.74117649 50.00%@0.66666669
//                  c[6][1] = 100.00%@15.00000000
//                  c[6][4] = 50.00%@0.00100000 50.00%@0.00000000
//                  c[6][5] = 50.00%@0.89999998 50.00%@0.50000000
//                  c[6][6] = 50.00%@8.00000000 50.00%@16.00000000
//                  c[6][7] = 50.00%@0.05000000 50.00%@0.20000000
//                  c[6][8] = 100.00%@5.00000000
//                 ~c[6][9] = 100.00%@0.00000000
//                 ~c[6][10] = 100.00%@0.00000000
//                 ~c[6][11] = 100.00%@0.00000000
//                  c[6][46] = 100.00%@1.00000000
//                  c[6][47] = 100.00%@1.00000000
//                 ~c[6][48] = 100.00%@0.00000000
//                  c[6][52] = 100.00%@1.00000000
//                  c[6][56] = 100.00%@1.00000000
//                 ~c[6][60] = 100.00%@1.00000000
//                 ~c[3][0] = 100.00%@0x1
//                  c[3][1] = 100.00%@0x0
//                 ~c[3][2] = 100.00%@0x0
//                 ~c[3][3] = 100.00%@0x0
//                 ~c[3][4] = 100.00%@0x0
//                 ~c[3][5] = 100.00%@0x0
//                 ~c[3][6] = 100.00%@0x0
//                 ~c[3][7] = 100.00%@0x0
//                 ~c[4][0] = 100.00%@0x1
//                  c[6][0] = 50.00%@0x3e99999a 50.00%@0x0
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x200, height=0x200, mips=0xa, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x1
//         100.00% width=0x200, height=0x200, mips=0xa, DXGI_FORMAT_BC3_UNORM
//         TEXTURE_SLOT 0x2
//         100.00% width=0x100, height=0x100, mips=0x9, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x3
//         100.00% width=0x80, height=0x80, mips=0x8, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x4
//         100.00% width=0x780, height=0x4b0, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x5
//         100.00% width=0x80, height=0x80, mips=0x8, DXGI_FORMAT_BC3_UNORM
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=16, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x1
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=16, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x2
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x3
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//         SAMPLER_SLOT 0x4
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x5
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R11, R0;                # [  1][000008]
//     	IPA R1, a[0x94], R11;            # [  2][000010] GENERIC_ATTRIBUTE_01_Y
//     	IPA R0, a[0x90], R11;            # [  3][000018] ATTR1
//     	TEX.NODEP.T R4, R0, 0x0, 0x0, 2D; # [  4][000020]
//     	IPA R17, a[0xb4], R11;           # [  5][000028] GENERIC_ATTRIBUTE_03_Y
//     	IPA R16, a[0xb0], R11;           # [  6][000030] ATTR3
//     	FSETP.LT.FTZ.AND P0, PT, R7, RZ, PT; # [  7][000038]
//     	@P0 KIL;                         # [  8][000040]
//     	TEX.T R12, R16, 0x1, 0x1, 2D, 0xb; # [  9][000048]
//     	FMUL.FTZ R1, R17, c[0x6][0x4];   # [ 10][000050]
//     	FMUL.FTZ R0, R16, c[0x6][0x4];   # [ 11][000058]
//     	TEX.T R8, R0, 0x5, 0x5, 2D, 0xb; # [ 12][000060]
//     	IPA.PASS R1, a[0x74];            # [ 13][000068] POSITION_Y
//     	IPA.PASS R0, a[0x70];            # [ 14][000070] POSITION_X
//     	IPA R2, a[0xa0], R11;            # [ 15][000078] ATTR2
//     	I2I RZ.CC, c[0x3][0x4];          # [ 16][000080]
//     	IPA R19, a[0xd0], R11;           # [ 17][000088] ATTR5
//     	IPA R25, a[0xd4], R11;           # [ 18][000090] GENERIC_ATTRIBUTE_05_Y
//     	FMUL32I.FTZ R1, R1, 0x3a5a740e;  # [ 19][000098]
//     	FMUL32I.FTZ R0, R0, 0x3a088889;  # [ 20][0000a0]
//     	FADD.FTZ R20, -R2, c[0x3][0xb0]; # [ 21][0000a8]
//     	FADD32I.FTZ R24, R2, 0xc480bb91; # [ 22][0000b0]
//     	IPA R26, a[0xd8], R11;           # [ 23][0000b8] GENERIC_ATTRIBUTE_05_Z
//     	IPA R22, a[0xc8], R11;           # [ 24][0000c0] GENERIC_ATTRIBUTE_04_Z
//     	IPA R23, a[0xc4], R11;           # [ 25][0000c8] GENERIC_ATTRIBUTE_04_Y
//     	IPA R18, a[0xc0], R11;           # [ 26][0000d0] ATTR4
//     	IPA R27, a[0xa4], R11;           # [ 27][0000d8] GENERIC_ATTRIBUTE_02_Y
//     	IPA R15, a[0xe0], R11;           # [ 28][0000e0] ATTR6
//     	IPA R28, a[0xa8], R11;           # [ 29][0000e8] GENERIC_ATTRIBUTE_02_Z
//     	TEX.NODEP.T R0, R0, 0x4, 0x4, 2D; # [ 30][0000f0]
//     	FADD.FTZ R21, -R27, c[0x3][0xb4]; # [ 31][0000f8]
//     	FADD32I.FTZ R27, R27, 0xc2e9fb4c; # [ 32][000100]
//     	FADD32I.FTZ R29, R12, 0xbf048485; # [ 33][000108]
//     	FADD.FTZ R30, R14, -0.5;         # [ 34][000110]
//     	FADD.FTZ R12, -R28, c[0x3][0xb8]; # [ 35][000118]
//     	FADD.FTZ R14, R29, R29;          # [ 36][000120]
//     	FADD.FTZ R30, R30, R30;          # [ 37][000128]
//     	FADD32I.FTZ R13, R13, 0xbf028283; # [ 38][000130]
//     	FMUL.FTZ R31, R30, R14;          # [ 39][000138]
//     	FMUL.FTZ R14, R20, R20;          # [ 40][000140]
//     	FADD32I.FTZ R29, R8, 0xbf048485; # [ 41][000148]
//     	FADD.FTZ R8, R10, -0.5;          # [ 42][000150]
//     	FADD32I.FTZ R9, R9, 0xbf028283;  # [ 43][000158]
//     	FMUL.FTZ R10, R29, 2;            # [ 44][000160]
//     	FMUL.FTZ R8, R8, 2;              # [ 45][000168]
//     	FMUL.FTZ R29, R24, R24;          # [ 46][000170]
//     	FFMA.FTZ R14, R21, R21, R14;     # [ 47][000178]
//     	FMUL.FTZ R10, R8, R10;           # [ 48][000180]
//     	FADD32I.FTZ R8, R28, 0xc4816a4f; # [ 49][000188]
//     	FFMA.FTZ R28, R27, R27, R29;     # [ 50][000190]
//     	FFMA.FTZ R29, R8, R8, R28;       # [ 51][000198]
//     	FADD.FTZ R28, R13, R13;          # [ 52][0001a0]
//     	FMUL.FTZ R13, R9, c[0x6][0x0];   # [ 53][0001a8]
//     	FFMA.FTZ R9, R12, R12, R14;      # [ 54][0001b0]
//     	MUFU.RSQ R14, R29;               # [ 55][0001b8]
//     	FFMA.FTZ R29, R13, 2, R28;       # [ 56][0001c0]
//     	MUFU.RSQ R30, R9;                # [ 57][0001c8]
//     	FFMA.FTZ R13, R10, c[0x6][0x0], R31; # [ 58][0001d0]
//     	FMUL.FTZ R10, R29, R25;          # [ 59][0001d8]
//     	FMUL.FTZ R31, R9, R30;           # [ 60][0001e0]
//     	FMUL.FTZ R9, R29, R26;           # [ 61][0001e8]
//     	FFMA.FTZ R26, R13, -R13, c[0x10][0x0]; # [ 62][0001f0]
//     	FMUL.FTZ R25, R8, R14;           # [ 63][0001f8]
//     	FFMA.FTZ R22, R13, R22, R9;      # [ 64][000200]
//     	FFMA.FTZ R23, R13, R23, R10;     # [ 65][000208]
//     	IPA R28, a[0xe4], R11;           # [ 66][000210] GENERIC_ATTRIBUTE_06_Y
//     	FMUL.FTZ R24, R24, R14;          # [ 67][000218]
//     	FMUL.FTZ R27, R27, R14;          # [ 68][000220]
//     	TEX.NODEP.T R8, R16, 0x2, 0x2, 2D, 0x7; # [ 69][000228]
//     	FFMA.FTZ R17, R29, -R29, R26;    # [ 70][000230]
//     	FMUL.FTZ R16, R29, R19;          # [ 71][000238]
//     	FMUL.FTZ R26, R20, R30;          # [ 72][000240]
//     	FMNMX.FTZ R17, R17, RZ, !PT;     # [ 73][000248]
//     	FFMA.FTZ R16, R13, R18, R16;     # [ 74][000250]
//     	FMUL.FTZ R29, R21, R30;          # [ 75][000258]
//     	MUFU.RSQ R19, R17;               # [ 76][000260]
//     	FFMA.FTZ R17, R20, R30, -R24;    # [ 77][000268]
//     	FMUL.FTZ R20, R26, -c[0x3][0xc0]; # [ 78][000270]
//     	MUFU.RCP R19, R19;               # [ 79][000278]
//     	FMUL.FTZ R13, R12, R30;          # [ 80][000280]
//     	FFMA.FTZ R18, R21, R30, -R27;    # [ 81][000288]
//     	FFMA.FTZ R12, R12, R30, -R25;    # [ 82][000290]
//     	FFMA.FTZ R15, R19, R15, R16;     # [ 83][000298]
//     	MUFU.RCP R16, R14;               # [ 84][0002a0]
//     	FFMA.FTZ R30, R29, -c[0x3][0xc4], R20; # [ 85][0002a8]
//     	IPA R21, a[0xe8], R11;           # [ 86][0002b0] GENERIC_ATTRIBUTE_06_Z
//     	FFMA.FTZ R20, R19, R28, R23;     # [ 87][0002b8]
//     	FMUL.FTZ R14, R17, R17;          # [ 88][0002c0]
//     	FMUL.FTZ.SAT R28, R31, RZ;       # [ 89][0002c8]
//     	FFMA.FTZ R30, R13, -c[0x3][0xc8], R30; # [ 90][0002d0]
//     	FFMA.FTZ R23, R18, R18, R14;     # [ 91][0002d8]
//     	FADD.FTZ R14, -R28, 1;           # [ 92][0002e0]
//     	FMUL.FTZ R28, R30, RZ;           # [ 93][0002e8]
//     	FFMA.FTZ R21, R19, R21, R22;     # [ 94][0002f0]
//     	FMUL.FTZ R22, R15, R15;          # [ 95][0002f8]
//     	FFMA.FTZ R23, R12, R12, R23;     # [ 96][000300]
//     	FMNMX.FTZ R28, R28, 1, !PT;      # [ 97][000308]
//     	FFMA.FTZ R22, R20, R20, R22;     # [ 98][000310]
//     	MUFU.RSQ R19, R23;               # [ 99][000318]
//     	FMNMX.FTZ R23, R28, 1, PT;       # [100][000320]
//     	FFMA.FTZ R28, R21, R21, R22;     # [101][000328]
//     	FMUL.FTZ R17, R17, R19;          # [102][000330]
//     	FMUL.FTZ R22, R18, R19;          # [103][000338]
//     	MUFU.RSQ R30, R28;               # [104][000340]
//     	FMUL.FTZ R28, R12, R19;          # [105][000348]
//     	FMUL.FTZ R23, R14, R23;          # [106][000350]
//     	FMUL.FTZ R19, R15, R30;          # [107][000358]
//     	FMUL.FTZ R18, R20, R30;          # [108][000360]
//     	FMUL.FTZ R12, R23, c[0x3][0xa0]; # [109][000368]
//     	FMUL.FTZ R15, R19, R17;          # [110][000370]
//     	FMUL.FTZ R17, R21, R30;          # [111][000378]
//     	FMUL.FTZ R21, R19, R26;          # [112][000380]
//     	FFMA.FTZ R20, R18, R22, R15;     # [113][000388]
//     	FMUL.FTZ R14, R23, c[0x3][0xa4]; # [114][000390]
//     	FFMA.FTZ R21, R18, R29, R21;     # [115][000398]
//     	FFMA.FTZ R20, R17, R28, R20;     # [116][0003a0]
//     	FMUL.FTZ R15, R23, c[0x3][0xa8]; # [117][0003a8]
//     	FFMA.FTZ R21, R17, R13, R21;     # [118][0003b0]
//     	FMNMX.FTZ R13, R20, c[0x10][0x4], !PT; # [119][0003b8]
//     	FMUL.FTZ R2, R2, c[0x3][0x228];  # [120][0003c0]
//     	FMUL.FTZ R1, R1, RZ;             # [121][0003c8]
//     	MUFU.LG2 R13, R13;               # [122][0003d0]
//     	FMNMX.FTZ R2, R2, 1, PT;         # [123][0003d8]
//     	FMNMX.FTZ R1, R1, 1, PT;         # [124][0003e0]
//     	FMUL.FTZ R13, R13, c[0x6][0x18]; # [125][0003e8]
//     	FMNMX.FTZ R2, R2, c[0x3][0x2cc], !PT; # [126][0003f0]
//     	FMNMX.FTZ R1, R1, c[0x3][0x2cc], !PT; # [127][0003f8]
//     	RRO.EX2 R23, R13;                # [128][000400]
//     	FMUL.FTZ R13, R0, RZ;            # [129][000408]
//     	FMUL.FTZ R0, R3, c[0x3][0x22c];  # [130][000410]
//     	FMUL.FTZ R29, R2, c[0x3][0x238]; # [131][000418]
//     	FMNMX.FTZ R3, R13, 1, PT;        # [132][000420]
//     	FMNMX.FTZ R0, R0, 1, PT;         # [133][000428]
//     	FMUL.FTZ R28, R1, RZ;            # [134][000430]
//     	FMNMX.FTZ R13, R3, c[0x3][0x2cc], !PT; # [135][000438]
//     	FMNMX.FTZ R0, R0, c[0x3][0x2cc], !PT; # [136][000440]
//     	MUFU.EX2 R3, R23;                # [137][000448]
//     	FMUL.FTZ R30, R13, c[0x3][0x230]; # [138][000450]
//     	FMUL.FTZ R26, R0, RZ;            # [139][000458]
//     	FMNMX.FTZ R22, R21, RZ, !PT;     # [140][000460]
//     	FMNMX.FTZ R29, R29, R30, !PT;    # [141][000468]
//     	FMNMX.FTZ R23, R26, R28, !PT;    # [142][000470]
//     	FMUL.FTZ R20, R15, R22;          # [143][000478]
//     	FMUL.FTZ R21, R14, R22;          # [144][000480]
//     	FMNMX.FTZ R26, R23, R29, !PT;    # [145][000488]
//     	FMUL.FTZ R22, R12, R22;          # [146][000490]
//     	FMNMX.FTZ R28, R2, R13, !PT;     # [147][000498]
//     	FADD.FTZ R26, -R26, 1;           # [148][0004a0]
//     	FMNMX.FTZ R23, R0, R1, !PT;      # [149][0004a8]
//     	FMUL.FTZ R30, R15, R3;           # [150][0004b0]
//     	FMUL.FTZ R12, R12, R3;           # [151][0004b8]
//     	FMUL.FTZ R14, R14, R3;           # [152][0004c0]
//     	FMUL.FTZ R15, R26, R20;          # [153][0004c8]
//     	FMUL.FTZ R29, R26, R22;          # [154][0004d0]
//     	FMUL.FTZ R20, R26, R21;          # [155][0004d8]
//     	FMNMX.FTZ R3, R23, R28, !PT;     # [156][0004e0]
//     	FMUL.FTZ R23, R26, R30;          # [157][0004e8]
//     	FMUL.FTZ R22, R26, R14;          # [158][0004f0]
//     	FMUL.FTZ R21, R26, R12;          # [159][0004f8]
//     	FMUL.FTZ R6, R6, c[0x5][0x8];    # [160][000500]
//     	FMUL.FTZ R5, R5, c[0x5][0x4];    # [161][000508]
//     	FMUL.FTZ R4, R4, c[0x5][0x0];    # [162][000510]
//     	FMUL.FTZ R26, R15, c[0x3][0xd8]; # [163][000518]
//     	FMUL.FTZ R28, R20, c[0x3][0xd8]; # [164][000520]
//     	FMUL.FTZ R29, R29, c[0x3][0xd8]; # [165][000528]
//     	BRA CC.EQ, L0770;                # [166][000530]
//     	IPA R12, a[0xa0], R11;           # [167][000538] ATTR2
//     	IPA R14, a[0xa4], R11;           # [168][000540] GENERIC_ATTRIBUTE_02_Y
//     	IPA R30, a[0xa8], R11;           # [169][000548] GENERIC_ATTRIBUTE_02_Z
//     	FMUL.FTZ R0, R0, RZ;             # [170][000550]
//     	FMUL.FTZ R13, R13, c[0x3][0x240]; # [171][000558]
//     	FADD.FTZ R15, -R12, c[0x3][0xf0]; # [172][000560]
//     	FADD.FTZ R12, -R14, c[0x3][0xf4]; # [173][000568]
//     	FMUL.FTZ R14, R2, c[0x3][0x248]; # [174][000570]
//     	FMUL.FTZ R20, R15, R15;          # [175][000578]
//     	FADD.FTZ R2, -R30, c[0x3][0xf8]; # [176][000580]
//     	FMUL.FTZ R30, R1, RZ;            # [177][000588]
//     	FFMA.FTZ R20, R12, R12, R20;     # [178][000590]
//     	FMNMX.FTZ R13, R14, R13, !PT;    # [179][000598]
//     	FMNMX.FTZ R0, R0, R30, !PT;      # [180][0005a0]
//     	FFMA.FTZ R1, R2, R2, R20;        # [181][0005a8]
//     	FMNMX.FTZ R0, R0, R13, !PT;      # [182][0005b0]
//     	MUFU.RSQ R30, R1;                # [183][0005b8]
//     	FADD.FTZ R0, -R0, 1;             # [184][0005c0]
//     	FMUL.FTZ R14, R15, R30;          # [185][0005c8]
//     	FFMA.FTZ R13, R15, R30, -R24;    # [186][0005d0]
//     	FMUL.FTZ R15, R12, R30;          # [187][0005d8]
//     	FMUL.FTZ R31, R14, -c[0x3][0x100]; # [188][0005e0]
//     	FMUL.FTZ R20, R1, R30;           # [189][0005e8]
//     	FFMA.FTZ R1, R12, R30, -R27;     # [190][0005f0]
//     	FMUL.FTZ R12, R2, R30;           # [191][0005f8]
//     	FFMA.FTZ R31, R15, -c[0x3][0x104], R31; # [192][000600]
//     	FFMA.FTZ R2, R2, R30, -R25;      # [193][000608]
//     	FMUL.FTZ R30, R13, R13;          # [194][000610]
//     	FFMA.FTZ R32, R12, -c[0x3][0x108], R31; # [195][000618]
//     	FMUL.FTZ.SAT R20, R20, RZ;       # [196][000620]
//     	FFMA.FTZ R31, R1, R1, R30;       # [197][000628]
//     	FMUL.FTZ R32, R32, RZ;           # [198][000630]
//     	FMUL.FTZ R30, R19, R14;          # [199][000638]
//     	FFMA.FTZ R14, R2, R2, R31;       # [200][000640]
//     	FMNMX.FTZ R31, R32, 1, !PT;      # [201][000648]
//     	FADD.FTZ R20, -R20, 1;           # [202][000650]
//     	MUFU.RSQ R14, R14;               # [203][000658]
//     	FMNMX.FTZ R31, R31, 1, PT;       # [204][000660]
//     	FFMA.FTZ R15, R18, R15, R30;     # [205][000668]
//     	FMUL.FTZ R30, R13, R14;          # [206][000670]
//     	FMUL.FTZ R13, R20, R31;          # [207][000678]
//     	FMUL.FTZ R20, R1, R14;           # [208][000680]
//     	FMUL.FTZ R1, R19, R30;           # [209][000688]
//     	FFMA.FTZ R12, R17, R12, R15;     # [210][000690]
//     	FMUL.FTZ R2, R2, R14;            # [211][000698]
//     	FFMA.FTZ R1, R18, R20, R1;       # [212][0006a0]
//     	FMNMX.FTZ R14, R12, RZ, !PT;     # [213][0006a8]
//     	FFMA.FTZ R12, R17, R2, R1;       # [214][0006b0]
//     	FMUL.FTZ R2, R13, c[0x3][0xe0];  # [215][0006b8]
//     	FMUL.FTZ R1, R13, c[0x3][0xe8];  # [216][0006c0]
//     	FMNMX.FTZ R15, R12, c[0x10][0x4], !PT; # [217][0006c8]
//     	FMUL.FTZ R12, R13, c[0x3][0xe4]; # [218][0006d0]
//     	FMUL.FTZ R20, R1, R14;           # [219][0006d8]
//     	MUFU.LG2 R13, R15;               # [220][0006e0]
//     	FMUL.FTZ R15, R12, R14;          # [221][0006e8]
//     	FMUL.FTZ R30, R2, R14;           # [222][0006f0]
//     	FMUL.FTZ R13, R13, c[0x6][0x18]; # [223][0006f8]
//     	FMUL.FTZ R14, R0, R20;           # [224][000700]
//     	FMUL.FTZ R15, R0, R15;           # [225][000708]
//     	RRO.EX2 R13, R13;                # [226][000710]
//     	FMUL.FTZ R20, R0, R30;           # [227][000718]
//     	FFMA.FTZ R26, R14, c[0x3][0x118], R26; # [228][000720]
//     	MUFU.EX2 R13, R13;               # [229][000728]
//     	FFMA.FTZ R28, R15, c[0x3][0x118], R28; # [230][000730]
//     	FFMA.FTZ R29, R20, c[0x3][0x118], R29; # [231][000738]
//     	FMUL.FTZ R1, R1, R13;            # [232][000740]
//     	FMUL.FTZ R12, R12, R13;          # [233][000748]
//     	FMUL.FTZ R2, R2, R13;            # [234][000750]
//     	FFMA.FTZ R23, R1, R0, R23;       # [235][000758]
//     	FFMA.FTZ R22, R12, R0, R22;      # [236][000760]
//     	FFMA.FTZ R21, R2, R0, R21;       # [237][000768]
//     L0770:
//     	FMUL.FTZ R0, R24, R19;           # [238][000770]
//     	MOV R14, c[0x6][0x20];           # [239][000778]
//     	FFMA.FTZ R0, R27, R18, R0;       # [240][000780]
//     	FFMA.FTZ R20, R25, R17, R0;      # [241][000788]
//     	FADD.FTZ R0, R20, R20;           # [242][000790]
//     	FFMA.FTZ R1, R18, -R0, R27;      # [243][000798]
//     	FFMA.FTZ R12, R19, -R0, R24;     # [244][0007a0]
//     	FFMA.FTZ R0, R17, -R0, R25;      # [245][0007a8]
//     	FMNMX R2, |R12|, |R1|, !PT;      # [246][0007b0]
//     	FMNMX R2, |R0|, R2, !PT;         # [247][0007b8]
//     	MUFU.RCP R13, R2;                # [248][0007c0]
//     	FMUL R2, R0, R13;                # [249][0007c8]
//     	FMUL R1, R1, R13;                # [250][0007d0]
//     	FMUL R0, R12, R13;               # [251][0007d8]
//     	TEX.LL.NODEP.T R12, R0, R14, 0x3, 0x3, LWBE; # [252][0007e0]
//     	FMUL.FTZ R0, R18, R19;           # [253][0007e8]
//     	FMUL.FTZ R2, R17, R18;           # [254][0007f0]
//     	FFMA.FTZ R24, R24, RZ, R27;      # [255][0007f8]
//     	FMUL.FTZ R1, R0, c[0x3][0x1e0];  # [256][000800]
//     	FMUL.FTZ R30, R0, c[0x3][0x1f0]; # [257][000808]
//     	FMUL.FTZ R0, R0, c[0x3][0x200];  # [258][000810]
//     	FFMA.FTZ R1, R2, c[0x3][0x1e4], R1; # [259][000818]
//     	FFMA.FTZ R31, R2, c[0x3][0x1f4], R30; # [260][000820]
//     	FFMA.FTZ R33, R2, c[0x3][0x204], R0; # [261][000828]
//     	FMUL.FTZ R0, R19, c[0x3][0x1d0]; # [262][000830]
//     	FMUL.FTZ R30, R19, c[0x3][0x1c0]; # [263][000838]
//     	FMUL.FTZ R2, R19, c[0x3][0x1b0]; # [264][000840]
//     	FFMA.FTZ R32, R18, c[0x3][0x1d4], R0; # [265][000848]
//     	FMUL.FTZ R0, R18, R18;           # [266][000850]
//     	FFMA.FTZ R30, R18, c[0x3][0x1c4], R30; # [267][000858]
//     	FFMA.FTZ R2, R18, c[0x3][0x1b4], R2; # [268][000860]
//     	FFMA.FTZ R0, R19, R19, -R0;      # [269][000868]
//     	FMUL.FTZ R18, R19, R17;          # [270][000870]
//     	FFMA.FTZ R19, R17, c[0x3][0x1c8], R30; # [271][000878]
//     	FFMA.FTZ R30, R17, c[0x3][0x1d8], R32; # [272][000880]
//     	MOV32I R32, 0x3f800000;          # [273][000888]
//     	FFMA.FTZ R2, R17, c[0x3][0x1b8], R2; # [274][000890]
//     	FMUL.FTZ R17, R17, R17;          # [275][000898]
//     	FFMA.FTZ R32, R3, -0.75, R32;    # [276][0008a0]
//     	IPA R3, a[0x98], R11;            # [277][0008a8] GENERIC_ATTRIBUTE_01_Z
//     	FFMA.FTZ R1, R17, c[0x3][0x1e8], R1; # [278][0008b0]
//     	FFMA.FTZ R31, R17, c[0x3][0x1f8], R31; # [279][0008b8]
//     	FFMA.FTZ R17, R17, c[0x3][0x208], R33; # [280][0008c0]
//     	FFMA.FTZ R1, R18, c[0x3][0x1ec], R1; # [281][0008c8]
//     	FADD.FTZ R2, R2, c[0x3][0x1bc];  # [282][0008d0]
//     	FMUL.FTZ R3, R7, R3;             # [283][0008d8]
//     	FFMA.FTZ R7, R18, c[0x3][0x1fc], R31; # [284][0008e0]
//     	FFMA.FTZ R31, R18, c[0x3][0x20c], R17; # [285][0008e8]
//     	IPA R18, a[0xa0], R11;           # [286][0008f0] ATTR2
//     	IPA R17, a[0xa4], R11;           # [287][0008f8] GENERIC_ATTRIBUTE_02_Y
//     	FADD.FTZ R19, R19, c[0x3][0x1cc]; # [288][000900]
//     	FADD.FTZ R30, R30, c[0x3][0x1dc]; # [289][000908]
//     	FADD.FTZ R1, R2, R1;             # [290][000910]
//     	FADD.FTZ R2, R19, R7;            # [291][000918]
//     	IPA R19, a[0xa8], R11;           # [292][000920] GENERIC_ATTRIBUTE_02_Z
//     	FFMA.FTZ R18, RZ, R18, R17;      # [293][000928]
//     	FADD.FTZ R17, -R20, 1;           # [294][000930]
//     	FADD.FTZ R7, R30, R31;           # [295][000938]
//     	FFMA.FTZ R24, R25, RZ, R24;      # [296][000940]
//     	FMUL.FTZ R20, R17, R17;          # [297][000948]
//     	FFMA.FTZ R1, R0, c[0x3][0x210], R1; # [298][000950]
//     	FFMA.FTZ R2, R0, c[0x3][0x214], R2; # [299][000958]
//     	FFMA.FTZ R0, R0, c[0x3][0x218], R7; # [300][000960]
//     	FMUL.FTZ R7, R20, R20;           # [301][000968]
//     	FMNMX.FTZ R20, R24, c[0x10][0xc], PT; # [302][000970]
//     	FFMA.FTZ R18, RZ, R19, R18;      # [303][000978]
//     	FMUL.FTZ R17, R17, R7;           # [304][000980]
//     	MUFU.RCP R20, R20;               # [305][000988]
//     	FMNMX.FTZ R19, R18, RZ, PT;      # [306][000990]
//     	IPA R7, a[0x9c], R11;            # [307][000998] GENERIC_ATTRIBUTE_01_W
//     	FADD.FTZ R11, R16, -1500;        # [308][0009a0]
//     	FMUL.FTZ R19, R19, R20;          # [309][0009a8]
//     	MOV R20, c[0x6][0x14];           # [310][0009b0]
//     	FMUL.FTZ R18, R18, RZ;           # [311][0009b8]
//     	FMUL.FTZ R19, R19, RZ;           # [312][0009c0]
//     	FFMA.FTZ R0, R26, R7, R0;        # [313][0009c8]
//     	FFMA.FTZ R1, R29, R7, R1;        # [314][0009d0]
//     	FFMA.FTZ R19, R16, RZ, R19;      # [315][0009d8]
//     	FFMA.FTZ.SAT R16, R17, c[0x6][0x10], R20; # [316][0009e0]
//     	FMUL.FTZ R17, R0, c[0x6][0xe0];  # [317][0009e8]
//     	FMUL32I.FTZ R11, R11, 0x38f6b949; # [318][0009f0]
//     	FMNMX.FTZ R18, R18, R19, !PT;    # [319][0009f8]
//     	FMUL.FTZ R24, R17, RZ;           # [320][000a00]
//     	FADD.FTZ R17, -R16, 1;           # [321][000a08]
//     	FMUL.FTZ R16, R1, c[0x6][0xe0];  # [322][000a10]
//     	FFMA.FTZ R2, R28, R7, R2;        # [323][000a18]
//     	FMUL.FTZ R17, R17, R7;           # [324][000a20]
//     	FMNMX.FTZ R18, R11, R18, !PT;    # [325][000a28]
//     	FSETP.NEU.FTZ.AND P0, PT, RZ, c[0x6][0xb8], PT; # [326][000a30]
//     	FMUL.FTZ R7, R1, c[0x6][0xd0];   # [327][000a38]
//     	FMUL.FTZ R11, R16, RZ;           # [328][000a40]
//     	FMNMX.FTZ R16, R18, c[0x10][0x10], PT; # [329][000a48]
//     	FMUL.FTZ R18, R10, R17;          # [330][000a50]
//     	@P0 FFMA.FTZ R1, R7, c[0x6][0xbc], R11; # [331][000a58]
//     	FMUL.FTZ R10, R8, R17;           # [332][000a60]
//     	FMUL.FTZ R19, R0, c[0x6][0xd0];  # [333][000a68]
//     	FMUL.FTZ R20, R2, c[0x6][0xe0];  # [334][000a70]
//     	@P0 FFMA.FTZ R0, R19, c[0x6][0xbc], R24; # [335][000a78]
//     	FMUL.FTZ R19, R2, c[0x6][0xd0];  # [336][000a80]
//     	FMUL.FTZ R20, R20, RZ;           # [337][000a88]
//     	@P0 FFMA.FTZ R2, R19, c[0x6][0xbc], R20; # [338][000a90]
//     	FMNMX.FTZ R7, R15, c[0x10][0x8], !PT; # [339][000a98]
//     	FMUL.FTZ R15, R9, R17;           # [340][000aa0]
//     	MUFU.RCP R9, R7;                 # [341][000aa8]
//     	FMNMX.FTZ R7, R16, RZ, !PT;      # [342][000ab0]
//     	FMUL.FTZ R14, R14, R9;           # [343][000ab8]
//     	FMUL.FTZ R11, R13, R9;           # [344][000ac0]
//     	FMUL.FTZ R8, R12, R9;            # [345][000ac8]
//     	FMUL.FTZ R12, R14, R32;          # [346][000ad0]
//     	FMUL.FTZ R9, R11, R32;           # [347][000ad8]
//     	FMUL.FTZ R8, R8, R32;            # [348][000ae0]
//     	FFMA.FTZ R11, R12, c[0x6][0x1c], R23; # [349][000ae8]
//     	FFMA.FTZ R9, R9, c[0x6][0x1c], R22; # [350][000af0]
//     	FFMA.FTZ R8, R8, c[0x6][0x1c], R21; # [351][000af8]
//     	FMUL.FTZ R11, R11, R18;          # [352][000b00]
//     	FMUL.FTZ R9, R9, R15;            # [353][000b08]
//     	FMUL.FTZ R8, R8, R10;            # [354][000b10]
//     	FFMA.FTZ R6, R0, R6, R11;        # [355][000b18]
//     	FFMA.FTZ R2, R2, R5, R9;         # [356][000b20]
//     	FFMA.FTZ R0, R1, R4, R8;         # [357][000b28]
//     	FADD32I.FTZ R5, -R6, 0.8;        # [358][000b30]
//     	FADD.FTZ R4, -R2, 1;             # [359][000b38]
//     	FADD.FTZ R1, -R0, 1;             # [360][000b40]
//     	FFMA.FTZ R5, R7, R5, R6;         # [361][000b48]
//     	FFMA.FTZ R4, R7, R4, R2;         # [362][000b50]
//     	FFMA.FTZ R0, R7, R1, R0;         # [363][000b58]
//     	FMUL32I.FTZ R2, R5, 0x3ed51eb7;  # [364][000b60]
//     	FMUL32I.FTZ R1, R4, 0x3ed51eb7;  # [365][000b68]
//     	FMUL32I.FTZ R0, R0, 0x3ed51eb7;  # [366][000b70]
//     	EXIT;                            # [367][000b78]
//     	END
//     END_SECTION
// END_SHADER
// 
