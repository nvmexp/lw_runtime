// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x28a2b1d96846020f
//         UCODE_HASH: 0xb805a892bd362636
//         POOL: APP
//         VERSION: 20
//         # USES: 18721
//         // Time: 116.583ms [10.169 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 20
//         USED_TEXTURE_BITS: 0x23
//         TEXTURE_SLOTS: 6
//         SAMPLER_SLOTS: 6
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//             KILLS_PIXELS
//         IMAP:
//             POSITION_W
//             COLOR_DIFFUSE_RED    PERSPECTIVE
//             COLOR_DIFFUSE_GREEN  PERSPECTIVE
//             COLOR_DIFFUSE_BLUE   PERSPECTIVE
//             COLOR_SPELWLAR_RED   PERSPECTIVE
//             COLOR_SPELWLAR_GREEN PERSPECTIVE
//             COLOR_SPELWLAR_BLUE  PERSPECTIVE
//             COLOR_SPELWLAR_ALPHA PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX05_Q              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x0002d462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x0000aa2a      0x002a000a
//         0x0000aa2a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_x
        def c0, -0.50000000, 0.20000000, 0.50000000, 1.00000000 ; 0xbf000000 0x3e4ccccd 0x3f000000 0x3f800000
        def c2, 0.00000000, 1.00000000, 0.00000000, 0.00000000 ; 0x000000 0x3f800000 0x000000 0x000000
        dcl_pp t0.rg
        dcl v0.rgb
        dcl v1
        dcl_pp t1
        dcl_pp t2.rgb
        dcl_pp t3.rgb
        dcl_pp t4.rgb
        dcl_pp t5
        dcl_2d s0
        dcl_2d s1
        dcl_2d s5
        mov r0.w, c0.w
        add r0.x, -r0.w, c1.w
        cmp r0.x, r0.x, c2.x, c2.y
        texld_pp r1, t0, s0
        add r0.y, r1.w, -c27.w
        mul r0, r0.x, r0.y
        texld_pp r2, t0, s1
        texkill r0
        mul_pp r0.xyz, r1, v0
        cmp_pp r0.xyz, -c27.x, r1, r0
        mul_pp r1.w, r1.w, c1.w
        nrm_pp r3.xyz, t4
        add r2.xyz, r2, c0.x
        add_pp r2.xyz, r2, r2
        nrm_pp r4.xyz, r2
        dp3_sat_pp r0.w, r4, r3
        pow_pp r4.w, r0.w, c27.z
        mul_pp r0.w, r2.w, r4.w
        nrm_pp r2.xyz, t2
        dp3_pp r4.w, r4, r2
        add_sat_pp r2.x, r4.w, c0.z
        mul_pp r2.x, r0.w, r2.x
        add r2.y, -r4.w, c0.y
        mov_sat_pp r4.w, r4.w
        mul_pp r3.xyz, r4.w, c4
        cmp_pp r0.w, r2.y, r2.x, r0.w
        mul_pp r2.xyz, r0.w, c4
        mov_pp r5.xy, t5.zwzw
        texld_pp r6, t5, s5
        texld_pp r5, r5, s5
        add_pp r0.w, -r6.x, c0.w
        add_sat_pp r0.w, -r5.x, r0.w
        mul_sat_pp r2.xyz, r2, r0.w
        mul_pp r3.xyz, r3, r0.w
        nrm_pp r5.xyz, t3
        dp3_sat_pp r0.w, r4, r5
        dp3_pp r3.w, r4, t1
        pow_pp r4.x, r0.w, c27.z
        mul_pp r0.w, r2.w, r4.x
        add_sat_pp r2.w, r3.w, c0.z
        mul_pp r2.w, r0.w, r2.w
        add r4.x, -r3.w, c0.y
        mov_sat_pp r3.w, r3.w
        mad_pp r3.xyz, c3, r3.w, r3
        add_pp r3.xyz, r3, c1
        max_pp r4.yzw, r3.xxyz, c2.x
        cmp_pp r0.w, r4.x, r2.w, r0.w
        mul_pp r3.xyz, r0.w, c3
        mul_sat_pp r3.xyz, r3, t1.w
        add_pp r2.xyz, r2, r3
        mad_pp r0.xyz, r4.yzw, r0, r2
        lrp_pp r2.xyz, v1.w, v1, r0
        cmp_pp r1.xyz, -c27.y, r0, r2
        mov_pp oC0, r1
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0xbf000000 0x3e4ccccd
//         0x3f000000 0x3f800000 0x05000051 0xa00f0002
//         0x00000000 0x3f800000 0x00000000 0x00000000
//         0x0200001f 0x80000000 0xb0230000 0x0200001f
//         0x80000000 0x90070000 0x0200001f 0x80000000
//         0x900f0001 0x0200001f 0x80000000 0xb06f0001
//         0x0200001f 0x80000000 0xb0670002 0x0200001f
//         0x80000000 0xb0670003 0x0200001f 0x80000000
//         0xb0670004 0x0200001f 0x80000000 0xb02f0005
//         0x0200001f 0x90000000 0xa00f0800 0x0200001f
//         0x90000000 0xa00f0801 0x0200001f 0x90000000
//         0xa00f0805 0x02000001 0x80080000 0xa0ff0000
//         0x03000002 0x80010000 0x81ff0000 0xa0ff0001
//         0x04000058 0x80010000 0x80000000 0xa0000002
//         0xa0550002 0x03000042 0x802f0001 0xb0e40000
//         0xa0e40800 0x03000002 0x80020000 0x80ff0001
//         0xa1ff001b 0x03000005 0x800f0000 0x80000000
//         0x80550000 0x03000042 0x802f0002 0xb0e40000
//         0xa0e40801 0x01000041 0x800f0000 0x03000005
//         0x80270000 0x80e40001 0x90e40000 0x04000058
//         0x80270000 0xa100001b 0x80e40001 0x80e40000
//         0x03000005 0x80280001 0x80ff0001 0xa0ff0001
//         0x02000024 0x80270003 0xb0e40004 0x03000002
//         0x80070002 0x80e40002 0xa0000000 0x03000002
//         0x80270002 0x80e40002 0x80e40002 0x02000024
//         0x80270004 0x80e40002 0x03000008 0x80380000
//         0x80e40004 0x80e40003 0x03000020 0x80280004
//         0x80ff0000 0xa0aa001b 0x03000005 0x80280000
//         0x80ff0002 0x80ff0004 0x02000024 0x80270002
//         0xb0e40002 0x03000008 0x80280004 0x80e40004
//         0x80e40002 0x03000002 0x80310002 0x80ff0004
//         0xa0aa0000 0x03000005 0x80210002 0x80ff0000
//         0x80000002 0x03000002 0x80020002 0x81ff0004
//         0xa0550000 0x02000001 0x80380004 0x80ff0004
//         0x03000005 0x80270003 0x80ff0004 0xa0e40004
//         0x04000058 0x80280000 0x80550002 0x80000002
//         0x80ff0000 0x03000005 0x80270002 0x80ff0000
//         0xa0e40004 0x02000001 0x80230005 0xb0ee0005
//         0x03000042 0x802f0006 0xb0e40005 0xa0e40805
//         0x03000042 0x802f0005 0x80e40005 0xa0e40805
//         0x03000002 0x80280000 0x81000006 0xa0ff0000
//         0x03000002 0x80380000 0x81000005 0x80ff0000
//         0x03000005 0x80370002 0x80e40002 0x80ff0000
//         0x03000005 0x80270003 0x80e40003 0x80ff0000
//         0x02000024 0x80270005 0xb0e40003 0x03000008
//         0x80380000 0x80e40004 0x80e40005 0x03000008
//         0x80280003 0x80e40004 0xb0e40001 0x03000020
//         0x80210004 0x80ff0000 0xa0aa001b 0x03000005
//         0x80280000 0x80ff0002 0x80000004 0x03000002
//         0x80380002 0x80ff0003 0xa0aa0000 0x03000005
//         0x80280002 0x80ff0000 0x80ff0002 0x03000002
//         0x80010004 0x81ff0003 0xa0550000 0x02000001
//         0x80380003 0x80ff0003 0x04000004 0x80270003
//         0xa0e40003 0x80ff0003 0x80e40003 0x03000002
//         0x80270003 0x80e40003 0xa0e40001 0x0300000b
//         0x802e0004 0x80900003 0xa0000002 0x04000058
//         0x80280000 0x80000004 0x80ff0002 0x80ff0000
//         0x03000005 0x80270003 0x80ff0000 0xa0e40003
//         0x03000005 0x80370003 0x80e40003 0xb0ff0001
//         0x03000002 0x80270002 0x80e40002 0x80e40003
//         0x04000004 0x80270000 0x80f90004 0x80e40000
//         0x80e40002 0x04000012 0x80270002 0x90ff0001
//         0x90e40001 0x80e40000 0x04000058 0x80270001
//         0xa155001b 0x80e40000 0x80e40002 0x02000001
//         0x802f0800 0x80e40001 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][550] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][551] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][552] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][554] = 0x3f897cb0 // 1.07411766
//         # USER FLOAT CONST: c[6][555] = 0x3f8a9764 // 1.08274508
//         # USER FLOAT CONST: c[6][556] = 0x3f4a16e4 // 0.78941176
//         ## USER CONST histogram
//         ##     c1.x -> c[6][542] = 97.22%@0.06666667 2.78%@1.22431386
//         ##     c1.y -> c[6][543] = 97.22%@0.13333334 2.78%@1.29098046
//         ##     c1.z -> c[6][544] = 97.22%@0.20784314 2.78%@1.36549032
//         ##     c1.w -> c[6][545] = 98.33%@1.00000000 0.56%@0.93834600 0.56%@0.61714720 0.56%@0.83333936
//         ##    ~c3.x -> c[6][550] = 100.00%@0.00000000
//         ##    ~c3.y -> c[6][551] = 100.00%@0.00000000
//         ##    ~c3.z -> c[6][552] = 100.00%@0.00000000
//         ##    ~c4.x -> c[6][554] = 100.00%@1.07411766
//         ##    ~c4.y -> c[6][555] = 100.00%@1.08274508
//         ##    ~c4.z -> c[6][556] = 100.00%@0.78941176
//         ##     c27.x -> c[6][646] = 52.78%@1.00000000 47.22%@0.00000000
//         ##     c27.y -> c[6][647] = 95.56%@1.00000000 4.44%@0.00000000
//         ##     c27.z -> c[6][648] = 28.33%@10.00000000 18.89%@70.00000000 16.67%@80.00000000 13.89%@60.00000000 9.00%@40.00000000 3.33%@100.00000000 0.56%@90.00000000
//         ##     c27.w -> c[6][649] = 70.00%@0.00000000 11.67%@0.50196080 6.67%@0.49803920 6.67%@0.00390625 3.33%@0.00392157 1.11%@0.39215688 0.56%@0.23529412
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x5,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x438e6e95,0x000004e1
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x06a6cfd4,0x000004e1
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000004e1
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0xfd5169d9,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x93f88274,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0x51f19ed1,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x93f88274,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xe98d2584,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x93db7359,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd521a261,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x6f89e23f,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x582d0713,0x00000750
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x8862a74d,0x00000750
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000750
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xa08538eb,0x00000750
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x562e4c0d,0x00000750
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000750
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xff2caa99,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x96657a9a,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000138
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x472dbd33,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7573d455,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x5f1c966f,0x00000270
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbb46e10f,0x00000270
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000270
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xe2da6bcf,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x1e97875a,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000138
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xdb059ff4,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3d10703a,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x248f2ffc,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x3168e220,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0x39036459,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x36d26bdf,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000138
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0xe93e3177,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT23_A8R8G8B8,0,0,0), 0x13c53468,0x00000068
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xc9f3a1fc,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x6b543ab5,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xf163527a,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x79da3d78,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x96ab7736,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3ecb6e41,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000138
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x6386c831,0x00000c98
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3b8f4fe8,0x00000c98
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000c98
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x694a1bc1,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xb18d295b,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x4f1fe533,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xea01d86e,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xf46121d0,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4f6ca060,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000138
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x64x0,9/0,DXT23_A8R8G8B8,0,0,0), 0xf34e99b3,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x93f88274,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x64x0,9/0,DXT23_A8R8G8B8,0,0,0), 0x9217984b,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x93f88274,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x84355ce3,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x074928dd,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x84eb9e54,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x80b509cd,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x5cde3b6f,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0333b287,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0xf3985730,0x000003a8
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xcad0c8cc,0x000003a8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000003a8
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0x894e915e,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xa8780b4e,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0x2da17441,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x6a187748,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0xe8f31689,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x0752fa1c,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0x6e766191,0x00000618
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0x144ba56a,0x00000618
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000618
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0x13d7b7d6,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x7197b790,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x000000d0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x8f87fa9a,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x276da3e7,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000068
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x69e8dbfd,0x00000478
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x13c7adc6,0x00000478
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000478
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x47954f75,0x00000410
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xf02e528c,0x00000410
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000410
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x4ba77a9a,0x00000208
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x8dd1b228,0x00000208
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,X8R8G8B8,0,0,0), 0x29391210,0x00000208
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x18 0 4 "COL1")
//         (0x18 0 4 "ATTR00")
//         (0x18 0 4 "TEX0")
//         (0x18 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r5.w, constant(-0.50000000, 0.20000000, 0.50000000, 1.00000000).w
//         addr r5.x, -r5.w, c[6][539].w
//         cmpr r5.x, r5.x, constant(0.00000000, 1.00000000, 0.00000000, 0.00000000).x, constant(0.00000000, 1.00000000, 0.00000000, 0.00000000).y
//         texh r6, v4.xyzz, #0, #0, 2D
//         addr r5.y, r6.w, -c[6][565].w
//         mulr r5, r5.x, r5.y
//         texh r7, v4.xyzz, #1, #1, 2D
//         movr.c rc, r5
//         kil LT
//         mulh r5.xyz, r6, v1
//         cmph r5.xyz, -c[6][565].x, r6, r5
//         mulh r6.w, r6.w, c[6][539].w
//         nrmh r8.xyz, v8
//         addr r7.xyz, r7, constant(-0.50000000, 0.20000000, 0.50000000, 1.00000000).x
//         addh r7.xyz, r7, r7
//         nrmh r9.xyz, r7
//         dp3h_sat r5.w, r9, r8
//         lg2r r47, |r5.w|
//         mulr r47, r47, c[6][565].z
//         ex2r r47, r47
//         movh r9.w, r47
//         mulh r5.w, r7.w, r9.w
//         nrmh r7.xyz, v6
//         dp3h r9.w, r9, r7
//         addh_sat r7.x, r9.w, constant(-0.50000000, 0.20000000, 0.50000000, 1.00000000).z
//         mulh r7.x, r5.w, r7.x
//         addr r7.y, -r9.w, constant(-0.50000000, 0.20000000, 0.50000000, 1.00000000).y
//         movh_sat r9.w, r9.w
//         movr r44, c[6][542]
//         movr r44.x, constant(1.07411766, 1.07411766, 1.07411766, 1.07411766).x
//         movr r44.y, constant(1.08274508, 1.08274508, 1.08274508, 1.08274508).x
//         movr r44.z, constant(0.78941176, 0.78941176, 0.78941176, 0.78941176).x
//         mulh r8.xyz, r9.w, r44
//         cmph r5.w, r7.y, r7.x, r5.w
//         movr r44, c[6][542]
//         movr r44.x, constant(1.07411766, 1.07411766, 1.07411766, 1.07411766).x
//         movr r44.y, constant(1.08274508, 1.08274508, 1.08274508, 1.08274508).x
//         movr r44.z, constant(0.78941176, 0.78941176, 0.78941176, 0.78941176).x
//         mulh r7.xyz, r5.w, r44
//         movh r10.xy, v9.zwzw
//         texh r11, v9.xyzz, #5, #5, 2D
//         texh r10, r10.xyyy, #5, #5, 2D
//         addh r5.w, -r11.x, constant(-0.50000000, 0.20000000, 0.50000000, 1.00000000).w
//         addh_sat r5.w, -r10.x, r5.w
//         mulh_sat r7.xyz, r7, r5.w
//         mulh r8.xyz, r8, r5.w
//         nrmh r10.xyz, v7
//         dp3h_sat r5.w, r9, r10
//         dp3h r8.w, r9, v5
//         lg2r r47, |r5.w|
//         mulr r47, r47, c[6][565].z
//         ex2r r47, r47
//         movh r9.x, r47
//         mulh r5.w, r7.w, r9.x
//         addh_sat r7.w, r8.w, constant(-0.50000000, 0.20000000, 0.50000000, 1.00000000).z
//         mulh r7.w, r5.w, r7.w
//         addr r9.x, -r8.w, constant(-0.50000000, 0.20000000, 0.50000000, 1.00000000).y
//         movh_sat r8.w, r8.w
//         movr r45, c[6][541]
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madh r8.xyz, r45, r8.w, r8
//         addh r8.xyz, r8, c[6][539]
//         maxh r9.yzw, r8.xxyz, constant(0.00000000, 1.00000000, 0.00000000, 0.00000000).x
//         cmph r5.w, r9.x, r7.w, r5.w
//         movr r44, c[6][541]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulh r8.xyz, r5.w, r44
//         mulh_sat r8.xyz, r8, v5.w
//         addh r7.xyz, r7, r8
//         madh r5.xyz, r9.yzww, r5, r7
//         lrph r7.xyz, v2.w, v2, r5
//         cmph r6.xyz, -c[6][565].y, r5, r7
//         movh r0, r6
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS.CENTROID R0, a[0x7c];   # [  0][000000] POSITION_W
//     	MUFU.RCP R11, R0;                # [  1][000008]
//     	IPA.SC.CENTROID R5, a[0x304], R11; # [  2][000010] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC.CENTROID R4, a[0x300], R11; # [  3][000018] TEX0
//     	TEX.NODEP.T R0, R4, 0x0, 0x0, 2D; # [  4][000020]
//     	MOV R6, c[0x6][0x21bc];          # [  5][000028]
//     	FADD.FTZ R6, R6, -1;             # [  6][000030]
//     	FCMP.GE R6, RZ, 0x3f800, R6;     # [  7][000038]
//     	FADD.FTZ R7, R3, -c[0x6][0x235c]; # [  8][000040]
//     	FMUL.FMZ R6, R6, R7;             # [  9][000048]
//     	FSETP.LT.AND P0, PT, R6, RZ, PT; # [ 10][000050]
//     	@P0 KIL;                         # [ 11][000058]
//     	TEX.NODEP.T R4, R4, 0x1, 0x1, 2D; # [ 12][000060]
//     	IPA.PASS R8, a[0x7c];            # [ 13][000068] POSITION_W
//     	MUFU.RCP R10, R8;                # [ 14][000070]
//     	IPA.SC R9, a[0x354], R10;        # [ 15][000078] FIXED_FNC_TEXTURE_5_T
//     	IPA.SC R8, a[0x350], R10;        # [ 16][000080] TEX5
//     	TEX.NODEP.T R12, R8, 0x5, 0x5, 2D, 0x1; # [ 17][000088]
//     	IPA.SC R9, a[0x35c], R10;        # [ 18][000090] FIXED_FNC_TEXTURE_5_Q
//     	IPA.SC R8, a[0x358], R10;        # [ 19][000098] FIXED_FNC_TEXTURE_5_R
//     	TEX.NODEP.T R8, R8, 0x5, 0x5, 2D, 0x1; # [ 20][0000a0]
//     	IPA.SC R15, a[0x340], R10;       # [ 21][0000a8] TEX4
//     	IPA.SC R16, a[0x344], R10;       # [ 22][0000b0] FIXED_FNC_TEXTURE_4_T
//     	IPA.SC R9, a[0x348], R10;        # [ 23][0000b8] FIXED_FNC_TEXTURE_4_R
//     	IPA.SC R14, a[0x320], R10;       # [ 24][0000c0] TEX2
//     	FMUL.FMZ R3, R3, c[0x6][0x21bc]; # [ 25][0000c8]
//     	FMUL.FTZ R13, R15, R15;          # [ 26][0000d0]
//     	FFMA.FTZ R13, R16, R16, R13;     # [ 27][0000d8]
//     	FMUL.FTZ R18, R14, R14;          # [ 28][0000e0]
//     	FFMA.FTZ R13, R9, R9, R13;       # [ 29][0000e8]
//     	MUFU.RSQ R17, R13;               # [ 30][0000f0]
//     	IPA.SC R13, a[0x324], R10;       # [ 31][0000f8] FIXED_FNC_TEXTURE_2_T
//     	FMUL.FTZ R15, R15, R17;          # [ 32][000100]
//     	FMUL.FTZ R16, R16, R17;          # [ 33][000108]
//     	FMUL.FTZ R9, R9, R17;            # [ 34][000110]
//     	IPA.SC R17, a[0x328], R10;       # [ 35][000118] FIXED_FNC_TEXTURE_2_R
//     	FFMA.FTZ R18, R13, R13, R18;     # [ 36][000120]
//     	FFMA.FTZ R18, R17, R17, R18;     # [ 37][000128]
//     	MUFU.RSQ R18, R18;               # [ 38][000130]
//     	FMUL.FTZ R14, R14, R18;          # [ 39][000138]
//     	FMUL.FTZ R13, R13, R18;          # [ 40][000140]
//     	FADD.FTZ R19, R4, -0.5;          # [ 41][000148]
//     	FMUL.FTZ R4, R17, R18;           # [ 42][000150]
//     	FADD.FTZ R17, R5, -0.5;          # [ 43][000158]
//     	FADD.FTZ R5, R19, R19;           # [ 44][000160]
//     	FADD.FTZ R18, R6, -0.5;          # [ 45][000168]
//     	FADD.FTZ R6, R17, R17;           # [ 46][000170]
//     	FMUL.FTZ R17, R5, R5;            # [ 47][000178]
//     	FADD.FTZ R18, R18, R18;          # [ 48][000180]
//     	FFMA.FTZ R17, R6, R6, R17;       # [ 49][000188]
//     	FFMA.FTZ R17, R18, R18, R17;     # [ 50][000190]
//     	MUFU.RSQ R17, R17;               # [ 51][000198]
//     	FMUL.FTZ R5, R5, R17;            # [ 52][0001a0]
//     	FMUL.FTZ R19, R6, R17;           # [ 53][0001a8]
//     	FMUL.FTZ R6, R5, R15;            # [ 54][0001b0]
//     	FMUL.FTZ R14, R5, R14;           # [ 55][0001b8]
//     	IPA.SC R5, a[0x280], R10;        # [ 56][0001c0] COLOR_FRONT_DIFFUSE_RED
//     	FFMA.FTZ R6, R19, R16, R6;       # [ 57][0001c8]
//     	FFMA.FTZ R13, R19, R13, R14;     # [ 58][0001d0]
//     	FMUL.FTZ R14, R18, R17;          # [ 59][0001d8]
//     	IPA.SC R15, a[0x284], R10;       # [ 60][0001e0] COLOR_FRONT_DIFFUSE_GREEN
//     	IPA.SC R16, a[0x288], R10;       # [ 61][0001e8] COLOR_FRONT_DIFFUSE_BLUE
//     	FMUL.FMZ R17, R0, R5;            # [ 62][0001f0]
//     	FFMA.FTZ.SAT R9, R14, R9, R6;    # [ 63][0001f8]
//     	IPA.SC.CENTROID R10, a[0x298], R11; # [ 64][000200] COLOR_FRONT_SPELWLAR_BLUE
//     	FCMP.LE R0, R0, R17, c[0x6][0x2350]; # [ 65][000208]
//     	MUFU.LG2 R17, |R9|;              # [ 66][000210]
//     	IPA.SC.CENTROID R5, a[0x29c], R11; # [ 67][000218] COLOR_FRONT_SPELWLAR_ALPHA
//     	IPA.SC.CENTROID R6, a[0x294], R11; # [ 68][000220] COLOR_FRONT_SPELWLAR_GREEN
//     	IPA.SC.CENTROID R9, a[0x290], R11; # [ 69][000228] COLOR_FRONT_SPELWLAR_RED
//     	FMUL.FMZ R17, R17, c[0x6][0x2358]; # [ 70][000230]
//     	FMUL.FMZ R11, R1, R15;           # [ 71][000238]
//     	FMUL.FMZ R15, R2, R16;           # [ 72][000240]
//     	RRO.EX2 R16, R17;                # [ 73][000248]
//     	FCMP.LE R1, R1, R11, c[0x6][0x2350]; # [ 74][000250]
//     	FFMA.FTZ R4, R14, R4, R13;       # [ 75][000258]
//     	MUFU.EX2 R11, R16;               # [ 76][000260]
//     	FCMP.LE R2, R2, R15, c[0x6][0x2350]; # [ 77][000268]
//     	FADD.FTZ.SAT R15, R4, 0.5;       # [ 78][000270]
//     	FMUL.FMZ R14, R7, R11;           # [ 79][000278]
//     	FADD32I.FTZ R13, -R4, 0.2;       # [ 80][000280]
//     	F2F.SAT R11, R4;                 # [ 81][000288]
//     	FMUL.FMZ R15, R14, R15;          # [ 82][000290]
//     	FMUL32I.FMZ R4, R11, 0x3f4a16e4; # [ 83][000298]
//     	FCMP.GE R14, R15, R14, R13;      # [ 84][0002a0]
//     	FADD.FTZ R13, -R12, 1;           # [ 85][0002a8]
//     	FMUL32I.FMZ R7, R11, 0x3f8a9764; # [ 86][0002b0]
//     	FMUL32I.FMZ R12, R11, 0x3f897cb0; # [ 87][0002b8]
//     	FADD.FTZ.SAT R11, -R8, R13;      # [ 88][0002c0]
//     	FMUL32I.FMZ R13, R14, 0x3f897cb0; # [ 89][0002c8]
//     	FMUL32I.FMZ R15, R14, 0x3f8a9764; # [ 90][0002d0]
//     	FFMA.FTZ R8, R12, R11, c[0x6][0x21b0]; # [ 91][0002d8]
//     	FMUL32I.FMZ R16, R14, 0x3f4a16e4; # [ 92][0002e0]
//     	FMUL.FMZ.SAT R12, R13, R11;      # [ 93][0002e8]
//     	FMUL.FMZ.SAT R13, R15, R11;      # [ 94][0002f0]
//     	FFMA.FTZ R14, R7, R11, c[0x6][0x21b4]; # [ 95][0002f8]
//     	FFMA.FTZ R15, R4, R11, c[0x6][0x21b8]; # [ 96][000300]
//     	FMUL.FMZ.SAT R7, R16, R11;       # [ 97][000308]
//     	FMNMX.FTZ R4, R8, RZ, !PT;       # [ 98][000310]
//     	FADD.FTZ R8, R12, RZ;            # [ 99][000318]
//     	FMNMX.FTZ R11, R14, RZ, !PT;     # [100][000320]
//     	FADD.FTZ R12, R13, RZ;           # [101][000328]
//     	FMNMX.FTZ R13, R15, RZ, !PT;     # [102][000330]
//     	FADD.FTZ R7, R7, RZ;             # [103][000338]
//     	FFMA.FMZ R0, R4, R0, R8;         # [104][000340]
//     	FFMA.FMZ R4, R11, R1, R12;       # [105][000348]
//     	FFMA.FMZ R7, R13, R2, R7;        # [106][000350]
//     	FADD.FTZ R1, R9, -R0;            # [107][000358]
//     	FADD.FTZ R2, R6, -R4;            # [108][000360]
//     	FADD.FTZ R6, R10, -R7;           # [109][000368]
//     	FFMA.FTZ R1, R5, R1, R0;         # [110][000370]
//     	FFMA.FTZ R2, R5, R2, R4;         # [111][000378]
//     	FFMA.FTZ R5, R5, R6, R7;         # [112][000380]
//     	FCMP.LE R0, R0, R1, c[0x6][0x2354]; # [113][000388]
//     	FCMP.LE R1, R4, R2, c[0x6][0x2354]; # [114][000390]
//     	FCMP.LE R2, R7, R5, c[0x6][0x2354]; # [115][000398]
//     	EXIT;                            # [116][0003a0]
//     	END
//     END_SECTION
// END_SHADER
// 
