// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0xc6f76e8cf967f2c2
//         UCODE_HASH: 0x35295e8e717fb6d3
//         POOL: APP
//         VERSION: 20
//         # USES: 3329
//         // Time: 74.367ms [4.358 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         BOOLVARS: 0x15
//         CLASS: FERMI
//         TEXINFO: SHADOWMAP:0x30
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 36
//         USED_TEXTURE_BITS: 0x1ff
//         TEXTURE_SLOTS: 9
//         SAMPLER_SLOTS: 9
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//             KILLS_PIXELS
//         IMAP:
//             POSITION_W
//             COLOR_DIFFUSE_RED    PERSPECTIVE
//             COLOR_DIFFUSE_GREEN  PERSPECTIVE
//             COLOR_DIFFUSE_BLUE   PERSPECTIVE
//             COLOR_DIFFUSE_ALPHA  PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//             TEX07_S              PERSPECTIVE
//             TEX07_T              PERSPECTIVE
//             TEX08_S              PERSPECTIVE
//             TEX08_T              PERSPECTIVE
//             TEX08_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x0006d462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x000000aa      0x2aaa2a0a
//         0x0a2a2a2a      0x0000002a      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c0, -0.10000000, 0.00000000, -1.00000000, 0.25000000 ; 0xbdcccccd 0x80000000 0xbf800000 0x3e800000
        def c1, 0.50000000, 1.00000000, -0.01000000, 0.01000000 ; 0x3f000000 0x3f800000 0xbc23d70a 0x3c23d70a
        def c2, 0.33000001, 2.00000000, -1.00000000, 10.00000000 ; 0x3ea8f5c3 0x40000000 0xbf800000 0x41200000
        def c3, 200.00000000, 10.00000000, 8.00000000, 0.66000003 ; 0x43480000 0x41200000 0x41000000 0x3f28f5c3
        def c4, -1.00000000, -2.00000000, -3.00000000, -4.00000000 ; 0xbf800000 0xc0000000 0xc0400000 0xc0800000
        def c5, 0.29899999, 0.58700001, 0.14399999, 0.12500000 ; 0x3e991687 0x3f1645a2 0x3e1374bc 0x3e000000
        def c6, 2.88539004, 65504.00000000, 0.00000000, 0.00000000 ; 0x4038aa3b 0x477fe000 0x000000 0x000000
        def c7, 0.00000000, -1.00000000, -2.00000000, -3.00000000 ; 0x000000 0xbf800000 0xc0000000 0xc0400000
        dcl_color0_pp v0
        dcl_texcoord0_pp v1.rg
        dcl_texcoord1_pp v2.rgb
        dcl_texcoord2_pp v3
        dcl_texcoord3_pp v4.rgb
        dcl_texcoord4_pp v5.rgb
        dcl_texcoord5_pp v6.rgb
        dcl_texcoord6_pp v7.rgb
        dcl_texcoord7 v8.rg
        dcl_texcoord8 v9.rgb
        dcl_2d s0
        dcl_2d s1
        dcl_lwbe s2
        dcl_2d s3
        dcl_2d s4
        dcl_2d s5
        dcl_2d s6
        dcl_2d s7
        dcl_2d s8
        texld_pp r0, v1, s6
        mul_pp r1.x, r0.w, v0.w
        mad r0.w, r0.w, v0.w, c0.x
        cmp r2, r0.w, c0.y, c0.z
        texkill r2
        mul_pp r0.xyz, r0, v0
        if b0
        if b1
        texld r2, v3, s5
        add r2, r2, -v3.z
        cmp r2, r2, -c0.z, -c0.y
        dp4_pp r0.w, r2, c0.w
        else
        mad r2, v3.xyzx, -c0.zzzy, -c0.yyyz
        texldp r2, r2, s5
        add r1.y, r2.x, -v3.z
        cmp r1.y, r1.y, -c0.z, -c0.y
        cmp r0.w, -c174.x, r1.y, r2.x
        endif
        if b2
        mov r2.xyz, c181
        mad_pp r2.xyz, v3, r2, c180
        texld r3, r2, s4
        add r3, -r2.z, r3
        cmp r3, r3, -c0.z, -c0.y
        dp4_pp r1.y, r3, c0.w
        mov r2.w, -c0.z
        texldp r3, r2, s4
        add r1.z, -r2.z, r3.x
        cmp_pp r1.z, r1.z, -c0.z, -c0.y
        cmp_pp r1.z, -c174.x, r1.z, r3.x
        cmp_pp r1.y, -c173.x, r1.z, r1.y
        mov_sat r1.z, v3.w
        lrp_pp r2.x, r1.z, r0.w, r1.y
        mov_pp r0.w, r2.x
        endif
        if b3
        mov r1.z, c0.z
        mad r2.x, v2.x, -r1.z, -c182.x
        mad r2.y, v2.y, r1.z, c182.y
        texld_pp r2, r2, s3
        add_pp r1.y, -r2.w, -c0.z
        min_pp r2.x, r1.y, r0.w
        mov_pp r0.w, r2.x
        mov_sat_pp r0.w, r0.w
        else
        mov_sat_pp r0.w, r0.w
        endif
        else
        mov r0.w, -c0.z
        endif
        texld_pp r2, v1, s7
        dp3_pp r1.y, r2, c2.x
        texld_pp r3, v1, s8
        mad_pp r3.xyz, r3, c2.y, c2.z
        mul_pp r4.xyz, r3.y, v4
        mad_pp r4.xyz, r3.x, v7, r4
        mad_pp r3.xyz, r3.z, v5, r4
        nrm_pp r4.xyz, r3
        dp3_pp r1.z, -v6, r4
        add_pp r1.z, r1.z, r1.z
        mad_pp r3.xyz, r4, -r1.z, -v6
        nrm_pp r5.xyz, r3
        mad_pp r1.z, r1.y, c3.x, c3.y
        texld_pp r6, v8, s3
        dp3_sat_pp r1.w, r4, -c175
        mul_pp r3.xyz, r1.w, c179
        mul_sat_pp r1.w, r1.w, c2.w
        dp3_sat_pp r2.w, -c175, r5
        pow_pp r4.w, r2.w, r1.z
        mul_pp r7.xyz, r4.w, c179
        mul_pp r7.xyz, r1.w, r7
        mad_pp r3.xyz, r3, r0.w, r6
        mul_pp r6.xyz, r0.w, r7
        mov r7.xyz, r3
        mov r8.xyz, r6
        mov r0.w, -c0.y
        rep i0
        add r9, r0.w, c4
        mov r10.y, c0.y
        cmp r10.xzw, -r0.w, c165.xyyz, -r10.y
        cmp r10.xzw, -r9_abs.x, c166.xyyz, r10
        cmp r10.xzw, -r9_abs.y, c167.xyyz, r10
        cmp r9.xyz, -r9_abs.z, c168, r10.xzw
        cmp r9.xyz, -r9_abs.w, c169, r9
        add_pp r9.xyz, r9, -v9
        dp3_pp r1.w, r9, r9
        rcp_pp r2.w, r1.w
        rsq_pp r1.w, r1.w
        mul_pp r9.xyz, r9, r1.w
        add r11, r0.w, c7
        cmp r10.xyz, -r11_abs.x, c169, -r10.y
        cmp r10.xyz, -r11_abs.y, c170, r10
        cmp r10.xyz, -r11_abs.z, c171, r10
        cmp r10.xyz, -r11_abs.w, c172, r10
        mul_pp r10.xyz, r2.w, r10
        dp3_sat_pp r1.w, r4, r9
        mad_pp r7.xyz, r10, r1.w, r7
        mul_sat_pp r1.w, r1.w, c2.w
        dp3_sat_pp r2.w, r9, r5
        pow_pp r4.w, r2.w, r1.z
        mul_pp r9.xyz, r10, r4.w
        mad_pp r8.xyz, r9, r1.w, r8
        add r0.w, r0.w, -c0.z
        endrep
        texld_pp r4, r5, s2
        mul_pp r3.xyz, r1.y, r4
        mul_pp r3.xyz, r3, c3.z
        mad_pp r4.xyz, r3.w, c2.w, r7
        mad_pp r0.w, r1.z, c1.x, c1.y
        mad_pp r1.yzw, r8.xxyz, r0.w, r3.xxyz
        dp3_pp r0.w, r0, c5
        cmp_pp r0.xyz, -c187.x, r0, r0.w
        mov r3.x, c187.x
        cmp_pp r3.yzw, -r3.x, r4.xxyz, c176.xxyz
        cmp_pp r1.yzw, -r3.x, r1, c177.xxyz
        mul_pp r1.yzw, r2.xxyz, r1
        mad_pp r0.xyz, r0, r3.yzw, r1.yzw
        mul r1.yz, -c0, v2.z
        texld r2, r1.yzzw, s1
        dp3_sat r0.w, r0, c3.w
        if b4
        add r1.yz, c1.z, v2.xxyw
        texld_pp r3, r1.yzzw, s0
        add r1.yz, c1.xwzw, v2.xxyw
        texld_pp r4, r1.yzzw, s0
        add r1.yz, c1.w, v2.xxyw
        texld_pp r5, r1.yzzw, s0
        add r1.yz, c1.xzw, v2.xxyw
        texld_pp r6, r1.yzzw, s0
        texld_pp r7, v2, s0
        add_pp r1.y, r3.w, r4.w
        add_pp r1.y, r5.w, r1.y
        add_pp r1.y, r6.w, r1.y
        mul_pp r1.z, r7.w, c1.x
        mad_pp r1.y, r1.y, c5.w, r1.z
        else
        mov r1.y, -c0.y
        endif
        mad r3.xyz, r2, r0.w, -r0
        mad r1.yzw, r1.y, r3.xxyz, r0.xxyz
        dp3 r0.x, r0, c5
        dp3 r0.y, r2, c5
        add r0.x, -r0.x, r0.y
        mul r0.x, r0.x, c178.x
        mul r0.x, r0.x, c6.x
        exp r0.x, r0.x
        mul_sat r0.x, r2.w, r0.x
        lrp r3.xyz, r0.x, r2, r1.yzw
        dp3 r0.x, r3, c185
        mad r0.xyz, r3, c185.w, r0.x
        mad_sat r1.yzw, r0.xxyz, c184.xxyz, c184.w
        cmp r0.xyz, -c186.x, r0, r1.yzw
        cmp r0.xyz, -c183.x, r0, r3
        min oC0.xyz, r0, c6.y
        mov oC0.w, r1.x
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0xbdcccccd 0x80000000
//         0xbf800000 0x3e800000 0x05000051 0xa00f0001
//         0x3f000000 0x3f800000 0xbc23d70a 0x3c23d70a
//         0x05000051 0xa00f0002 0x3ea8f5c3 0x40000000
//         0xbf800000 0x41200000 0x05000051 0xa00f0003
//         0x43480000 0x41200000 0x41000000 0x3f28f5c3
//         0x05000051 0xa00f0004 0xbf800000 0xc0000000
//         0xc0400000 0xc0800000 0x05000051 0xa00f0005
//         0x3e991687 0x3f1645a2 0x3e1374bc 0x3e000000
//         0x05000051 0xa00f0006 0x4038aa3b 0x477fe000
//         0x00000000 0x00000000 0x05000051 0xa00f0007
//         0x00000000 0xbf800000 0xc0000000 0xc0400000
//         0x0200001f 0x8000000a 0x902f0000 0x0200001f
//         0x80000005 0x90230001 0x0200001f 0x80010005
//         0x90270002 0x0200001f 0x80020005 0x902f0003
//         0x0200001f 0x80030005 0x90270004 0x0200001f
//         0x80040005 0x90270005 0x0200001f 0x80050005
//         0x90270006 0x0200001f 0x80060005 0x90270007
//         0x0200001f 0x80070005 0x90030008 0x0200001f
//         0x80080005 0x90070009 0x0200001f 0x90000000
//         0xa00f0800 0x0200001f 0x90000000 0xa00f0801
//         0x0200001f 0x98000000 0xa00f0802 0x0200001f
//         0x90000000 0xa00f0803 0x0200001f 0x90000000
//         0xa00f0804 0x0200001f 0x90000000 0xa00f0805
//         0x0200001f 0x90000000 0xa00f0806 0x0200001f
//         0x90000000 0xa00f0807 0x0200001f 0x90000000
//         0xa00f0808 0x03000042 0x802f0000 0x90e40001
//         0xa0e40806 0x03000005 0x80210001 0x80ff0000
//         0x90ff0000 0x04000004 0x80080000 0x80ff0000
//         0x90ff0000 0xa0000000 0x04000058 0x800f0002
//         0x80ff0000 0xa0550000 0xa0aa0000 0x01000041
//         0x800f0002 0x03000005 0x80270000 0x80e40000
//         0x90e40000 0x01000028 0xe0e40800 0x01000028
//         0xe0e40801 0x03000042 0x800f0002 0x90e40003
//         0xa0e40805 0x03000002 0x800f0002 0x80e40002
//         0x91aa0003 0x04000058 0x800f0002 0x80e40002
//         0xa1aa0000 0xa1550000 0x03000009 0x80280000
//         0x80e40002 0xa0ff0000 0x0000002a 0x04000004
//         0x800f0002 0x90240003 0xa16a0000 0xa1950000
//         0x03010042 0x800f0002 0x80e40002 0xa0e40805
//         0x03000002 0x80020001 0x80000002 0x91aa0003
//         0x04000058 0x80020001 0x80550001 0xa1aa0000
//         0xa1550000 0x04000058 0x80080000 0xa10000ae
//         0x80550001 0x80000002 0x0000002b 0x01000028
//         0xe0e40802 0x02000001 0x80070002 0xa0e400b5
//         0x04000004 0x80270002 0x90e40003 0x80e40002
//         0xa0e400b4 0x03000042 0x800f0003 0x80e40002
//         0xa0e40804 0x03000002 0x800f0003 0x81aa0002
//         0x80e40003 0x04000058 0x800f0003 0x80e40003
//         0xa1aa0000 0xa1550000 0x03000009 0x80220001
//         0x80e40003 0xa0ff0000 0x02000001 0x80080002
//         0xa1aa0000 0x03010042 0x800f0003 0x80e40002
//         0xa0e40804 0x03000002 0x80040001 0x81aa0002
//         0x80000003 0x04000058 0x80240001 0x80aa0001
//         0xa1aa0000 0xa1550000 0x04000058 0x80240001
//         0xa10000ae 0x80aa0001 0x80000003 0x04000058
//         0x80220001 0xa10000ad 0x80aa0001 0x80550001
//         0x02000001 0x80140001 0x90ff0003 0x04000012
//         0x80210002 0x80aa0001 0x80ff0000 0x80550001
//         0x02000001 0x80280000 0x80000002 0x0000002b
//         0x01000028 0xe0e40803 0x02000001 0x80040001
//         0xa0aa0000 0x04000004 0x80010002 0x90000002
//         0x81aa0001 0xa10000b6 0x04000004 0x80020002
//         0x90550002 0x80aa0001 0xa05500b6 0x03000042
//         0x802f0002 0x80e40002 0xa0e40803 0x03000002
//         0x80220001 0x81ff0002 0xa1aa0000 0x0300000a
//         0x80210002 0x80550001 0x80ff0000 0x02000001
//         0x80280000 0x80000002 0x02000001 0x80380000
//         0x80ff0000 0x0000002a 0x02000001 0x80380000
//         0x80ff0000 0x0000002b 0x0000002a 0x02000001
//         0x80080000 0xa1aa0000 0x0000002b 0x03000042
//         0x802f0002 0x90e40001 0xa0e40807 0x03000008
//         0x80220001 0x80e40002 0xa0000002 0x03000042
//         0x802f0003 0x90e40001 0xa0e40808 0x04000004
//         0x80270003 0x80e40003 0xa0550002 0xa0aa0002
//         0x03000005 0x80270004 0x80550003 0x90e40004
//         0x04000004 0x80270004 0x80000003 0x90e40007
//         0x80e40004 0x04000004 0x80270003 0x80aa0003
//         0x90e40005 0x80e40004 0x02000024 0x80270004
//         0x80e40003 0x03000008 0x80240001 0x91e40006
//         0x80e40004 0x03000002 0x80240001 0x80aa0001
//         0x80aa0001 0x04000004 0x80270003 0x80e40004
//         0x81aa0001 0x91e40006 0x02000024 0x80270005
//         0x80e40003 0x04000004 0x80240001 0x80550001
//         0xa0000003 0xa0550003 0x03000042 0x802f0006
//         0x90e40008 0xa0e40803 0x03000008 0x80380001
//         0x80e40004 0xa1e400af 0x03000005 0x80270003
//         0x80ff0001 0xa0e400b3 0x03000005 0x80380001
//         0x80ff0001 0xa0ff0002 0x03000008 0x80380002
//         0xa1e400af 0x80e40005 0x03000020 0x80280004
//         0x80ff0002 0x80aa0001 0x03000005 0x80270007
//         0x80ff0004 0xa0e400b3 0x03000005 0x80270007
//         0x80ff0001 0x80e40007 0x04000004 0x80270003
//         0x80e40003 0x80ff0000 0x80e40006 0x03000005
//         0x80270006 0x80ff0000 0x80e40007 0x02000001
//         0x80070007 0x80e40003 0x02000001 0x80070008
//         0x80e40006 0x02000001 0x80080000 0xa1550000
//         0x01000026 0xf0e40000 0x03000002 0x800f0009
//         0x80ff0000 0xa0e40004 0x02000001 0x8002000a
//         0xa0550000 0x04000058 0x800d000a 0x81ff0000
//         0xa09400a5 0x8155000a 0x04000058 0x800d000a
//         0x8c000009 0xa09400a6 0x80e4000a 0x04000058
//         0x800d000a 0x8c550009 0xa09400a7 0x80e4000a
//         0x04000058 0x80070009 0x8caa0009 0xa0e400a8
//         0x80f8000a 0x04000058 0x80070009 0x8cff0009
//         0xa0e400a9 0x80e40009 0x03000002 0x80270009
//         0x80e40009 0x91e40009 0x03000008 0x80280001
//         0x80e40009 0x80e40009 0x02000006 0x80280002
//         0x80ff0001 0x02000007 0x80280001 0x80ff0001
//         0x03000005 0x80270009 0x80e40009 0x80ff0001
//         0x03000002 0x800f000b 0x80ff0000 0xa0e40007
//         0x04000058 0x8007000a 0x8c00000b 0xa0e400a9
//         0x8155000a 0x04000058 0x8007000a 0x8c55000b
//         0xa0e400aa 0x80e4000a 0x04000058 0x8007000a
//         0x8caa000b 0xa0e400ab 0x80e4000a 0x04000058
//         0x8007000a 0x8cff000b 0xa0e400ac 0x80e4000a
//         0x03000005 0x8027000a 0x80ff0002 0x80e4000a
//         0x03000008 0x80380001 0x80e40004 0x80e40009
//         0x04000004 0x80270007 0x80e4000a 0x80ff0001
//         0x80e40007 0x03000005 0x80380001 0x80ff0001
//         0xa0ff0002 0x03000008 0x80380002 0x80e40009
//         0x80e40005 0x03000020 0x80280004 0x80ff0002
//         0x80aa0001 0x03000005 0x80270009 0x80e4000a
//         0x80ff0004 0x04000004 0x80270008 0x80e40009
//         0x80ff0001 0x80e40008 0x03000002 0x80080000
//         0x80ff0000 0xa1aa0000 0x00000027 0x03000042
//         0x802f0004 0x80e40005 0xa0e40802 0x03000005
//         0x80270003 0x80550001 0x80e40004 0x03000005
//         0x80270003 0x80e40003 0xa0aa0003 0x04000004
//         0x80270004 0x80ff0003 0xa0ff0002 0x80e40007
//         0x04000004 0x80280000 0x80aa0001 0xa0000001
//         0xa0550001 0x04000004 0x802e0001 0x80900008
//         0x80ff0000 0x80900003 0x03000008 0x80280000
//         0x80e40000 0xa0e40005 0x04000058 0x80270000
//         0xa10000bb 0x80e40000 0x80ff0000 0x02000001
//         0x80010003 0xa00000bb 0x04000058 0x802e0003
//         0x81000003 0x80900004 0xa09000b0 0x04000058
//         0x802e0001 0x81000003 0x80e40001 0xa09000b1
//         0x03000005 0x802e0001 0x80900002 0x80e40001
//         0x04000004 0x80270000 0x80e40000 0x80f90003
//         0x80f90001 0x03000005 0x80060001 0xa1e40000
//         0x90aa0002 0x03000042 0x800f0002 0x80e90001
//         0xa0e40801 0x03000008 0x80180000 0x80e40000
//         0xa0ff0003 0x01000028 0xe0e40804 0x03000002
//         0x80060001 0xa0aa0001 0x90d00002 0x03000042
//         0x802f0003 0x80e90001 0xa0e40800 0x03000002
//         0x80060001 0xa0ec0001 0x90d00002 0x03000042
//         0x802f0004 0x80e90001 0xa0e40800 0x03000002
//         0x80060001 0xa0ff0001 0x90d00002 0x03000042
//         0x802f0005 0x80e90001 0xa0e40800 0x03000002
//         0x80060001 0xa0f80001 0x90d00002 0x03000042
//         0x802f0006 0x80e90001 0xa0e40800 0x03000042
//         0x802f0007 0x90e40002 0xa0e40800 0x03000002
//         0x80220001 0x80ff0003 0x80ff0004 0x03000002
//         0x80220001 0x80ff0005 0x80550001 0x03000002
//         0x80220001 0x80ff0006 0x80550001 0x03000005
//         0x80240001 0x80ff0007 0xa0000001 0x04000004
//         0x80220001 0x80550001 0xa0ff0005 0x80aa0001
//         0x0000002a 0x02000001 0x80020001 0xa1550000
//         0x0000002b 0x04000004 0x80070003 0x80e40002
//         0x80ff0000 0x81e40000 0x04000004 0x800e0001
//         0x80550001 0x80900003 0x80900000 0x03000008
//         0x80010000 0x80e40000 0xa0e40005 0x03000008
//         0x80020000 0x80e40002 0xa0e40005 0x03000002
//         0x80010000 0x81000000 0x80550000 0x03000005
//         0x80010000 0x80000000 0xa00000b2 0x03000005
//         0x80010000 0x80000000 0xa0000006 0x0200000e
//         0x80010000 0x80000000 0x03000005 0x80110000
//         0x80ff0002 0x80000000 0x04000012 0x80070003
//         0x80000000 0x80e40002 0x80f90001 0x03000008
//         0x80010000 0x80e40003 0xa0e400b9 0x04000004
//         0x80070000 0x80e40003 0xa0ff00b9 0x80000000
//         0x04000004 0x801e0001 0x80900000 0xa09000b8
//         0xa0ff00b8 0x04000058 0x80070000 0xa10000ba
//         0x80e40000 0x80f90001 0x04000058 0x80070000
//         0xa10000b7 0x80e40000 0x80e40003 0x0300000a
//         0x80070800 0x80e40000 0xa0550006 0x02000001
//         0x80080800 0x80000001 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0xbdcccccd // -0.10000000
//         COP_CONST[1]: 0x3fe47bc0 // 1.78502655
//         COP_CONST[2]: 0x40200002 // 2.50000048
//         COP_CONST[3]: 0x3fb3d778 // 1.40501308
//         COP_CONST[4]: 0x3ea8f5c3 // 0.33000001
//         COP_CONST[5]: 0x3f46f309 // 0.77714592
//         COP_CONST[6]: 0xbea11b24 // -0.31466019
//         COP_CONST[7]: 0x3f28f5c3 // 0.66000003
//         COP_CONST[8]: 0x3f1645a2 // 0.58700001
//         COP_CONST[9]: 0x3e1374bc // 0.14399999
//         COP_CONST[10]: 0x3e991687 // 0.29899999
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][942] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][946] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][950] = 0xbf0b859c // -0.54500747
//         # USER FLOAT CONST: c[6][951] = 0xbf46f309 // -0.77714592
//         # USER FLOAT CONST: c[6][952] = 0x3ea11b24 // 0.31466019
//         # USER FLOAT CONST: c[6][954] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][955] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][956] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][958] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][959] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][960] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][962] = 0x3e4ccccd // 0.20000000
//         # USER FLOAT CONST: c[6][966] = 0x40000000 // 2.00000000
//         # USER FLOAT CONST: c[6][967] = 0x3fccccce // 1.60000014
//         # USER FLOAT CONST: c[6][968] = 0x3f939394 // 1.15294123
//         # USER FLOAT CONST: c[6][970] = 0xbeda435c // -0.42629516
//         # USER FLOAT CONST: c[6][971] = 0xbfbff404 // -1.49963427
//         # USER FLOAT CONST: c[6][972] = 0xbe3e2f10 // -0.18572640
//         # USER FLOAT CONST: c[6][974] = 0x3fe47bc0 // 1.78502655
//         # USER FLOAT CONST: c[6][975] = 0x40200002 // 2.50000048
//         # USER FLOAT CONST: c[6][976] = 0x3fb3d778 // 1.40501308
//         # USER FLOAT CONST: c[6][978] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][979] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][982] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][986] = 0x3f808102 // 1.00393701
//         # USER FLOAT CONST: c[6][987] = 0x3f808102 // 1.00393701
//         # USER FLOAT CONST: c[6][988] = 0x3f808102 // 1.00393701
//         # USER FLOAT CONST: c[6][989] = 0xbb810205 // -0.00393701
//         # USER FLOAT CONST: c[6][990] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][991] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][992] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][993] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][994] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][998] = 0x00000000 // 0.00000000
//         ## USER CONST histogram
//         ##     c165.x -> c[6][910] = 71.88%@-0.28820422 6.25%@96.30513000 3.12%@81.57030487 3.12%@56.53196335 3.12%@99.60878754 3.12%@57.82131958 3.12%@93.78000641
//         ##     c165.y -> c[6][911] = 71.88%@-0.06187831 6.25%@299.55950928 3.12%@299.73516846 3.12%@298.59255981 3.12%@299.62527466 3.12%@298.76223755 3.12%@298.98251343
//         ##     c165.z -> c[6][912] = 71.88%@0.18286324 6.25%@-130.92321777 3.12%@-145.10984802 3.12%@-133.78955078 3.12%@-164.81010437 3.12%@-145.61322021 3.12%@-166.35607910
//         ##     c166.x -> c[6][914] = 75.01%@-0.23326193 6.25%@94.50474548 3.12%@80.51093292 3.12%@99.60778809 3.12%@56.53196335 3.12%@108.66151428 3.12%@95.88562775
//         ##     c166.y -> c[6][915] = 75.01%@-0.04942029 6.25%@299.00033569 3.12%@299.68652344 3.12%@299.62670898 3.12%@298.59255981 3.12%@300.24392700 3.12%@299.50741577
//         ##     c166.z -> c[6][916] = 75.01%@0.17369223 6.25%@-135.78031921 3.12%@-146.47018433 3.12%@-164.81092834 3.12%@-133.78955078 3.12%@-147.00137329 3.12%@-165.09759521
//         ##     c167.x -> c[6][918] = 78.13%@-0.28062665 3.12%@63.90951920 3.12%@89.20131683 3.12%@99.76660919 3.12%@56.53196335 3.12%@114.82205200 3.12%@95.88646698
//         ##     c167.y -> c[6][919] = 78.13%@0.02314091 3.12%@298.87951660 3.12%@298.88623047 3.12%@299.62152100 3.12%@298.59255981 3.12%@300.59863281 3.12%@299.50634766
//         ##     c167.z -> c[6][920] = 78.13%@0.21997546 3.12%@-143.86140442 3.12%@-137.57182312 3.12%@-161.91932678 3.12%@-133.78955078 3.12%@-148.51835632 3.12%@-165.09692383
//         ##     c168.x -> c[6][922] = 84.38%@0.09459949 3.12%@63.90951920 3.12%@95.88646698 3.12%@110.91021729 3.12%@0.09973134 3.12%@99.60778809
//         ##     c168.y -> c[6][923] = 84.38%@-0.11833321 3.12%@298.87951660 3.12%@299.50634766 3.12%@300.90072632 3.12%@-0.12308875 3.12%@299.62670898
//         ##     c168.z -> c[6][924] = 84.38%@0.06819209 3.12%@-143.86140442 3.12%@-165.09692383 3.12%@-150.80056763 3.12%@0.06628243 3.12%@-164.81092834
//         ##     c169.x -> c[6][926] = 71.88%@0.08161073 21.87%@0.00000000 3.12%@0.08884333 3.12%@2.12528992
//         ##     c169.y -> c[6][927] = 71.88%@-0.08951223 21.87%@0.00000000 3.12%@-0.09218661 3.12%@2.12528992
//         ##     c169.z -> c[6][928] = 71.88%@0.07425401 21.87%@0.00000000 3.12%@0.07256585 3.12%@2.12528992
//         ##     c170.x -> c[6][930] = 75.01%@0.01380184 12.50%@2.12528992 9.37%@0.00000000 3.12%@0.02845348
//         ##     c170.y -> c[6][931] = 75.01%@-0.04063986 12.50%@2.12528992 9.37%@0.00000000 3.12%@-0.04128891
//         ##     c170.z -> c[6][932] = 75.01%@0.16549103 12.50%@2.12528992 9.37%@0.00000000 3.12%@0.16330124
//         ##     c171.x -> c[6][934] = 78.13%@0.06599397 15.62%@0.00000000 3.12%@0.07763918 3.12%@2.12528992
//         ##     c171.y -> c[6][935] = 78.13%@0.05222831 15.62%@0.00000000 3.12%@0.05854114 3.12%@2.12528992
//         ##     c171.z -> c[6][936] = 78.13%@0.07351997 15.62%@0.00000000 3.12%@0.07872820 3.12%@2.12528992
//         ##     c172.x -> c[6][938] = 84.38%@0.00000000 12.50%@0.00000000 3.12%@2.12528992
//         ##     c172.y -> c[6][939] = 84.38%@denormal   9.37%@0.00000000 3.12%@2.12528992 3.12%@denormal  
//         ##     c172.z -> c[6][940] = 84.38%@denormal   12.50%@0.00000000 3.12%@2.12528992
//         ##    ~c173.x -> c[6][942] = 100.00%@0.00000000
//         ##    ~c174.x -> c[6][946] = 100.00%@1.00000000
//         ##    ~c175.x -> c[6][950] = 100.00%@-0.54500747
//         ##    ~c175.y -> c[6][951] = 100.00%@-0.77714592
//         ##    ~c175.z -> c[6][952] = 100.00%@0.31466019
//         ##    ~c176.x -> c[6][954] = 100.00%@1.00000000
//         ##    ~c176.y -> c[6][955] = 100.00%@1.00000000
//         ##    ~c176.z -> c[6][956] = 100.00%@1.00000000
//         ##    ~c177.x -> c[6][958] = 100.00%@1.00000000
//         ##    ~c177.y -> c[6][959] = 100.00%@1.00000000
//         ##    ~c177.z -> c[6][960] = 100.00%@1.00000000
//         ##    ~c178.x -> c[6][962] = 100.00%@0.20000000
//         ##    ~c179.x -> c[6][966] = 100.00%@2.00000000
//         ##    ~c179.y -> c[6][967] = 100.00%@1.60000014
//         ##    ~c179.z -> c[6][968] = 100.00%@1.15294123
//         ##    ~c180.x -> c[6][970] = 100.00%@-0.42629516
//         ##    ~c180.y -> c[6][971] = 100.00%@-1.49963427
//         ##    ~c180.z -> c[6][972] = 100.00%@-0.18572640
//         ##    ~c181.x -> c[6][974] = 100.00%@1.78502655
//         ##    ~c181.y -> c[6][975] = 100.00%@2.50000048
//         ##    ~c181.z -> c[6][976] = 100.00%@1.40501308
//         ##    ~c182.x -> c[6][978] = 100.00%@0.00000000
//         ##    ~c182.y -> c[6][979] = 100.00%@0.00000000
//         ##    ~c183.x -> c[6][982] = 100.00%@1.00000000
//         ##    ~c184.x -> c[6][986] = 100.00%@1.00393701
//         ##    ~c184.y -> c[6][987] = 100.00%@1.00393701
//         ##    ~c184.z -> c[6][988] = 100.00%@1.00393701
//         ##    ~c184.w -> c[6][989] = 100.00%@-0.00393701
//         ##    ~c185.x -> c[6][990] = 100.00%@0.00000000
//         ##    ~c185.y -> c[6][991] = 100.00%@0.00000000
//         ##    ~c185.z -> c[6][992] = 100.00%@0.00000000
//         ##    ~c185.w -> c[6][993] = 100.00%@1.00000000
//         ##    ~c186.x -> c[6][994] = 100.00%@1.00000000
//         ##    ~c187.x -> c[6][998] = 100.00%@0.00000000
//         ##     i0.x -> c[6][474] = 75.01%@0 12.50%@4 6.25%@3 3.12%@2 3.12%@1
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000d01
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000d01
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000d01
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,768x768x0,1/0,A16B16G16R16,0,0,0), 0xfdaa2931,0x00000d01
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000d01
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000d01
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,12/0,DXT45_A8R8G8B8,1,0,0), 0x6cc1fbd3,0x00000d01
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,12/0,DXT1_A1R5G5B5,1,0,0), 0xa49a719a,0x00000d01
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,12/0,DXT45_A8R8G8B8,0,0,0), 0x7525888b,0x00000d01
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x18 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 2 : 
//          (attr 1 1 4) (attr 2 9 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texh r5, v2.xyzz, #6, #6, 2D
//         mulh r6.x, r5.w, v1.w
//         madr r5.w, r5.w, v1.w, constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).x
//         cmpr r7, r5.w, constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).y, constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z
//         movr.c rc, r7
//         kil LT
//         mulh r5.xyz, r5, v1
//         ife , cBool00, l0, l1
//         ife FL1.x, cBool01, l2, l3
//         texr r7, v4.xyzz, #5, #5, SHADOW2D
//         addr r7, r7, -v4.z
//         cmpr r7, r7, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).y
//         dp4h r5.w, r7, constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).w
//         l2:
//         madr r7, v4.xyzx, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).zzzy, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).yyyz
//         txpr r7, r7, #5, #5, SHADOW2D
//         addr r6.y, r7.x, -v4.z
//         cmpr r6.y, r6.y, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).y
//         movr r45, -c[6][424].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r5.w, r45, r6.y, r7.x
//         l3:
//         ife , cBool02, l4, l5
//         movr r45, c[6][431]
//         movr r45.x, constant(1.78502655, 1.78502655, 1.78502655, 1.78502655).x
//         movr r45.y, constant(2.50000048, 2.50000048, 2.50000048, 2.50000048).x
//         movr r45.z, constant(1.40501308, 1.40501308, 1.40501308, 1.40501308).x
//         movr r7.xyz, r45
//         movr r43, c[6][430]
//         movr r43.x, constant(-0.42629516, -0.42629516, -0.42629516, -0.42629516).x
//         movr r43.y, constant(-1.49963427, -1.49963427, -1.49963427, -1.49963427).x
//         movr r43.z, constant(-0.18572640, -0.18572640, -0.18572640, -0.18572640).x
//         madh r7.xyz, v4, r7, r43
//         texr r8, r7.xyzz, #4, #4, SHADOW2D
//         addr r8, -r7.z, r8
//         cmpr r8, r8, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).y
//         dp4h r6.y, r8, constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).w
//         movr r7.w, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z
//         txpr r8, r7, #4, #4, SHADOW2D
//         addr r6.z, -r7.z, r8.x
//         cmph r6.z, r6.z, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).y
//         movr r45, -c[6][424].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmph r6.z, r45, r6.z, r8.x
//         movr r45, -c[6][423].x
//         movr r45.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         cmph r6.y, r45, r6.z, r6.y
//         movr_sat r6.z, v4.w
//         lrph r7.x, r6.z, r5.w, r6.y
//         movh r5.w, r7.x
//         l4:
//         l5:
//         ife FL1.x, cBool03, l6, l7
//         movr r6.z, constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z
//         movr r43, -c[6][432].x
//         movr r43.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r7.x, v3.x, -r6.z, r43
//         movr r43, c[6][432].y
//         movr r43.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r7.y, v3.y, r6.z, r43
//         texh r7, r7.xyzz, #3, #3, 2D
//         addh r6.y, -r7.w, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z
//         minh r7.x, r6.y, r5.w
//         movh r5.w, r7.x
//         movh_sat r5.w, r5.w
//         l6:
//         movh_sat r5.w, r5.w
//         l7:
//         l0:
//         movr r5.w, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z
//         l1:
//         texh r7, v2.xyzz, #7, #7, 2D
//         dp3h r6.y, r7, constant(0.33000001, 2.00000000, -1.00000000, 10.00000000).x
//         texh r8, v2.xyzz, #8, #8, 2D
//         madh r8.xyz, r8, constant(0.33000001, 2.00000000, -1.00000000, 10.00000000).y, constant(0.33000001, 2.00000000, -1.00000000, 10.00000000).z
//         mulh r9.xyz, r8.y, v5
//         madh r9.xyz, r8.x, v8, r9
//         madh r8.xyz, r8.z, v6, r9
//         nrmh r9.xyz, r8
//         dp3h r6.z, -v7, r9
//         addh r6.z, r6.z, r6.z
//         madh r8.xyz, r9, -r6.z, -v7
//         nrmh r10.xyz, r8
//         madh r6.z, r6.y, constant(200.00000000, 10.00000000, 8.00000000, 0.66000003).x, constant(200.00000000, 10.00000000, 8.00000000, 0.66000003).y
//         texh r11, v9.xyzz, #3, #3, 2D
//         movr r44, -c[6][425]
//         movr r44.x, -constant(-0.54500747, -0.54500747, -0.54500747, -0.54500747).x
//         movr r44.y, -constant(-0.77714592, -0.77714592, -0.77714592, -0.77714592).x
//         movr r44.z, -constant(0.31466019, 0.31466019, 0.31466019, 0.31466019).x
//         dp3h_sat r6.w, r9, r44
//         movr r44, c[6][429]
//         movr r44.x, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.y, constant(1.60000014, 1.60000014, 1.60000014, 1.60000014).x
//         movr r44.z, constant(1.15294123, 1.15294123, 1.15294123, 1.15294123).x
//         mulh r8.xyz, r6.w, r44
//         mulh_sat r6.w, r6.w, constant(0.33000001, 2.00000000, -1.00000000, 10.00000000).w
//         movr r45, -c[6][425]
//         movr r45.x, -constant(-0.54500747, -0.54500747, -0.54500747, -0.54500747).x
//         movr r45.y, -constant(-0.77714592, -0.77714592, -0.77714592, -0.77714592).x
//         movr r45.z, -constant(0.31466019, 0.31466019, 0.31466019, 0.31466019).x
//         dp3h_sat r7.w, r45, r10
//         lg2r r47, |r7.w|
//         mulr r47, r47, r6.z
//         ex2r r47, r47
//         movh r9.w, r47
//         movr r44, c[6][429]
//         movr r44.x, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.y, constant(1.60000014, 1.60000014, 1.60000014, 1.60000014).x
//         movr r44.z, constant(1.15294123, 1.15294123, 1.15294123, 1.15294123).x
//         mulh r12.xyz, r9.w, r44
//         mulh r12.xyz, r6.w, r12
//         madh r8.xyz, r8, r5.w, r11
//         mulh r11.xyz, r5.w, r12
//         movr r12.xyz, r8
//         movr r13.xyz, r11
//         movr r5.w, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).y
//         rep c[6][474], l8
//         addr r14, r5.w, constant(-1.00000000, -2.00000000, -3.00000000, -4.00000000)
//         movr r15.y, constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).y
//         cmpr r15.xzw, -r5.w, c[6][415].xyyz, -r15.y
//         cmpr r15.xzw, -|r14.x|, c[6][416].xyyz, r15
//         cmpr r15.xzw, -|r14.y|, c[6][417].xyyz, r15
//         cmpr r14.xyz, -|r14.z|, c[6][418], r15.xzww
//         cmpr r14.xyz, -|r14.w|, c[6][419], r14
//         addh r14.xyz, r14, -v10
//         dp3h r6.w, r14, r14
//         rcph r7.w, r6.w
//         rsqh r6.w, |r6.w|
//         mulh r14.xyz, r14, r6.w
//         addr r16, r5.w, constant(0.00000000, -1.00000000, -2.00000000, -3.00000000)
//         cmpr r15.xyz, -|r16.x|, c[6][419], -r15.y
//         cmpr r15.xyz, -|r16.y|, c[6][420], r15
//         cmpr r15.xyz, -|r16.z|, c[6][421], r15
//         cmpr r15.xyz, -|r16.w|, c[6][422], r15
//         mulh r15.xyz, r7.w, r15
//         dp3h_sat r6.w, r9, r14
//         madh r12.xyz, r15, r6.w, r12
//         mulh_sat r6.w, r6.w, constant(0.33000001, 2.00000000, -1.00000000, 10.00000000).w
//         dp3h_sat r7.w, r14, r10
//         lg2r r47, |r7.w|
//         mulr r47, r47, r6.z
//         ex2r r47, r47
//         movh r9.w, r47
//         mulh r14.xyz, r15, r9.w
//         madh r13.xyz, r14, r6.w, r13
//         addr r5.w, r5.w, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).z
//         l8:
//         texh r9, r10.xyzz, #2, #2, LWBE
//         mulh r8.xyz, r6.y, r9
//         mulh r8.xyz, r8, constant(200.00000000, 10.00000000, 8.00000000, 0.66000003).z
//         madh r9.xyz, r8.w, constant(0.33000001, 2.00000000, -1.00000000, 10.00000000).w, r12
//         madh r5.w, r6.z, constant(0.50000000, 1.00000000, -0.01000000, 0.01000000).x, constant(0.50000000, 1.00000000, -0.01000000, 0.01000000).y
//         madh r6.yzw, r13.xxyz, r5.w, r8.xxyz
//         dp3h r5.w, r5, constant(0.29899999, 0.58700001, 0.14399999, 0.12500000)
//         movr r45, -c[6][437].x
//         movr r45.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         cmph r5.xyz, r45, r5, r5.w
//         movr r45, c[6][437].x
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r8.x, r45
//         movr r43, c[6][426].xxyz
//         movr r43.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmph r8.yzw, -r8.x, r9.xxyz, r43
//         movr r43, c[6][427].xxyz
//         movr r43.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmph r6.yzw, -r8.x, r6, r43
//         mulh r6.yzw, r7.xxyz, r6
//         madh r5.xyz, r5, r8.yzww, r6.yzww
//         mulr r6.yz, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000), v3.z
//         texr r7, r6.yzzz, #1, #1, 2D
//         dp3r_sat r5.w, r5, constant(200.00000000, 10.00000000, 8.00000000, 0.66000003).w
//         ife , cBool04, l9, l10
//         addr r6.yz, constant(0.50000000, 1.00000000, -0.01000000, 0.01000000).z, v3.xxyw
//         texh r8, r6.yzzz, #0, #0, 2D
//         addr r6.yz, constant(0.50000000, 1.00000000, -0.01000000, 0.01000000).xwzw, v3.xxyw
//         texh r9, r6.yzzz, #0, #0, 2D
//         addr r6.yz, constant(0.50000000, 1.00000000, -0.01000000, 0.01000000).w, v3.xxyw
//         texh r10, r6.yzzz, #0, #0, 2D
//         addr r6.yz, constant(0.50000000, 1.00000000, -0.01000000, 0.01000000).xzww, v3.xxyw
//         texh r11, r6.yzzz, #0, #0, 2D
//         texh r12, v3.xyzz, #0, #0, 2D
//         addh r6.y, r8.w, r9.w
//         addh r6.y, r10.w, r6.y
//         addh r6.y, r11.w, r6.y
//         mulh r6.z, r12.w, constant(0.50000000, 1.00000000, -0.01000000, 0.01000000).x
//         madh r6.y, r6.y, constant(0.29899999, 0.58700001, 0.14399999, 0.12500000).w, r6.z
//         l9:
//         movr r6.y, -constant(-0.10000000, 0.00000000, -1.00000000, 0.25000000).y
//         l10:
//         madr r8.xyz, r7, r5.w, -r5
//         madr r6.yzw, r6.y, r8.xxyz, r5.xxyz
//         dp3r r5.x, r5, constant(0.29899999, 0.58700001, 0.14399999, 0.12500000)
//         dp3r r5.y, r7, constant(0.29899999, 0.58700001, 0.14399999, 0.12500000)
//         addr r5.x, -r5.x, r5.y
//         movr r44, c[6][428].x
//         movr r44.x, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         movr r44.y, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         movr r44.z, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         movr r44.w, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         mulr r5.x, r5.x, r44
//         mulr r5.x, r5.x, constant(2.88539004, 65504.00000000, 0.00000000, 0.00000000).x
//         ex2r r5.x, r5.x
//         mulr_sat r5.x, r7.w, r5.x
//         lrpr r8.xyz, r5.x, r7, r6.yzww
//         movr r44, c[6][435]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         dp3r r5.x, r8, r44
//         movr r44, c[6][435].w
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madr r5.xyz, r8, r44, r5.x
//         movr r44, c[6][434].xxyz
//         movr r44.x, constant(1.00393701, 1.00393701, 1.00393701, 1.00393701).x
//         movr r44.y, constant(1.00393701, 1.00393701, 1.00393701, 1.00393701).x
//         movr r44.z, constant(1.00393701, 1.00393701, 1.00393701, 1.00393701).x
//         movr r44.w, constant(1.00393701, 1.00393701, 1.00393701, 1.00393701).x
//         movr r43, c[6][434].w
//         movr r43.x, constant(-0.00393701, -0.00393701, -0.00393701, -0.00393701).x
//         movr r43.y, constant(-0.00393701, -0.00393701, -0.00393701, -0.00393701).x
//         movr r43.z, constant(-0.00393701, -0.00393701, -0.00393701, -0.00393701).x
//         movr r43.w, constant(-0.00393701, -0.00393701, -0.00393701, -0.00393701).x
//         madr_sat r6.yzw, r5.xxyz, r44, r43
//         movr r45, -c[6][436].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r5.xyz, r45, r5, r6.yzww
//         movr r45, -c[6][433].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r5.xyz, r45, r5, r8
//         minr r0.xyz, r5, constant(2.88539004, 65504.00000000, 0.00000000, 0.00000000).y
//         movr r0.w, r6.x
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R15, -0x40800000;         # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R11, R0;                # [  2][000010]
//     	IPA.PASS.CENTROID R4, a[0x7c];   # [  3][000018] POSITION_W
//     	IPA.SC R9, a[0x304], R11;        # [  4][000020] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R8, a[0x300], R11;        # [  5][000028] TEX0
//     	MUFU.RCP R16, R4;                # [  6][000030]
//     	TEX.NODEP.P R0, R8, 0x6, 0x6, 2D; # [  7][000038]
//     	IPA.SC.CENTROID R19, a[0x28c], R16; # [  8][000040] COLOR_FRONT_DIFFUSE_ALPHA
//     	FFMA.FMZ R4, R3, R19, c[0x9][0x0]; # [  9][000048]
//     	FCMP.LTU R4, R15, 0x80000, R4;   # [ 10][000050]
//     	FSETP.LT.AND P0, PT, R4, RZ, PT; # [ 11][000058]
//     	@P0 KIL;                         # [ 12][000060]
//     	MOV32I R21, -0x4125bca4;         # [ 13][000068]
//     	TEX.T R4, R8, 0x8, 0x8, 2D;      # [ 14][000070]
//     	IPA.SC R10, a[0x328], R11;       # [ 15][000078] FIXED_FNC_TEXTURE_2_R
//     	MOV32I R20, -0x40400bfc;         # [ 16][000080]
//     	IPA.SC R12, a[0x320], R11;       # [ 17][000088] TEX2
//     	MOV32I R17, -0x41c1d0f0;         # [ 18][000090]
//     	IPA.SC R13, a[0x324], R11;       # [ 19][000098] FIXED_FNC_TEXTURE_2_T
//     	F2F.FTZ R14, R10;                # [ 20][0000a0]
//     	IPA.SC R26, a[0x330], R11;       # [ 21][0000a8] TEX3
//     	FMUL.FMZ R3, R3, R19;            # [ 22][0000b0]
//     	TEX.DC.NODEP.T R18, R12, R14, 0x5, 0x5, 2D, 0x1; # [ 23][0000b8]
//     	FFMA.FMZ R12, R12, c[0x9][0x4], R21; # [ 24][0000c0]
//     	FFMA.FMZ R13, R13, c[0x9][0x8], R20; # [ 25][0000c8]
//     	FFMA.FMZ R10, R10, c[0x9][0xc], R17; # [ 26][0000d0]
//     	IPA.SC R28, a[0x334], R11;       # [ 27][0000d8] FIXED_FNC_TEXTURE_3_T
//     	TEX.DC.NODEP.T R20, R12, R10, 0x4, 0x4, 2D, 0x1; # [ 28][0000e0]
//     	TEX.NODEP.T R8, R8, 0x7, 0x7, 2D, 0x7; # [ 29][0000e8]
//     	ISETP.GE.AND P0, PT, RZ, c[0x6][0x1da0], PT; # [ 30][0000f0]
//     	IPA.SC R13, a[0x374], R11;       # [ 31][0000f8] FIXED_FNC_TEXTURE_7_T
//     	IPA.SC R12, a[0x370], R11;       # [ 32][000100] TEX7
//     	TEX.NODEP.P R12, R12, 0x3, 0x3, 2D, 0x7; # [ 33][000108]
//     	IPA.SC R24, a[0x360], R11;       # [ 34][000110] TEX6
//     	IPA.SC R29, a[0x338], R11;       # [ 35][000118] FIXED_FNC_TEXTURE_3_R
//     	IPA.SC R27, a[0x364], R11;       # [ 36][000120] FIXED_FNC_TEXTURE_6_T
//     	IPA.SC R22, a[0x340], R11;       # [ 37][000128] TEX4
//     	IPA.SC R21, a[0x368], R11;       # [ 38][000130] FIXED_FNC_TEXTURE_6_R
//     	IPA.SC R17, a[0x344], R11;       # [ 39][000138] FIXED_FNC_TEXTURE_4_T
//     	FFMA.FMZ R25, R5, 2, R15;        # [ 40][000140]
//     	FFMA.FMZ R23, R4, 2, R15;        # [ 41][000148]
//     	FFMA.FMZ R4, R6, 2, R15;         # [ 42][000150]
//     	FMUL.FMZ R26, R25, R26;          # [ 43][000158]
//     	FMUL.FMZ R15, R25, R28;          # [ 44][000160]
//     	IPA.SC R5, a[0x348], R11;        # [ 45][000168] FIXED_FNC_TEXTURE_4_R
//     	FFMA.FMZ R6, R23, R24, R26;      # [ 46][000170]
//     	FFMA.FMZ R15, R23, R27, R15;     # [ 47][000178]
//     	FMUL.FMZ R24, R25, R29;          # [ 48][000180]
//     	FFMA.FMZ R6, R4, R22, R6;        # [ 49][000188]
//     	FFMA.FMZ R17, R4, R17, R15;      # [ 50][000190]
//     	FFMA.FMZ R21, R23, R21, R24;     # [ 51][000198]
//     	FMUL.FTZ R15, R6, R6;            # [ 52][0001a0]
//     	FFMA.FMZ R21, R4, R5, R21;       # [ 53][0001a8]
//     	FFMA.FTZ R4, R17, R17, R15;      # [ 54][0001b0]
//     	IPA.SC R22, a[0x350], R11;       # [ 55][0001b8] TEX5
//     	FFMA.FTZ R4, R21, R21, R4;       # [ 56][0001c0]
//     	IPA.SC R23, a[0x354], R11;       # [ 57][0001c8] FIXED_FNC_TEXTURE_5_T
//     	MUFU.RSQ R4, R4;                 # [ 58][0001d0]
//     	IPA.SC.CENTROID R29, a[0x280], R16; # [ 59][0001d8] COLOR_FRONT_DIFFUSE_RED
//     	FMUL.FTZ R5, R6, R4;             # [ 60][0001e0]
//     	FMUL.FTZ R15, R17, R4;           # [ 61][0001e8]
//     	FMUL.FTZ R26, R21, R4;           # [ 62][0001f0]
//     	IPA.SC R6, a[0x358], R11;        # [ 63][0001f8] FIXED_FNC_TEXTURE_5_R
//     	FMUL.FTZ R17, R22, -R5;          # [ 64][000200]
//     	IPA.SC.CENTROID R28, a[0x284], R16; # [ 65][000208] COLOR_FRONT_DIFFUSE_GREEN
//     	FFMA.FTZ R4, R23, -R15, R17;     # [ 66][000210]
//     	MOV32I R21, 0x41200000;          # [ 67][000218]
//     	FFMA.FTZ R4, R6, -R26, R4;       # [ 68][000220]
//     	IPA.SC.CENTROID R17, a[0x288], R16; # [ 69][000228] COLOR_FRONT_DIFFUSE_BLUE
//     	FADD.FTZ R24, R4, R4;            # [ 70][000230]
//     	FFMA.FMZ R25, R5, -R24, -R22;    # [ 71][000238]
//     	FFMA.FMZ R23, R15, -R24, -R23;   # [ 72][000240]
//     	FMUL.FTZ R27, R25, R25;          # [ 73][000248]
//     	FFMA.FMZ R24, R26, -R24, -R6;    # [ 74][000250]
//     	IPA.SC R22, a[0x32c], R11;       # [ 75][000258] FIXED_FNC_TEXTURE_2_Q
//     	FFMA.FTZ R6, R23, R23, R27;      # [ 76][000260]
//     	F2F.SAT R22, R22;                # [ 77][000268]
//     	FFMA.FTZ R16, R24, R24, R6;      # [ 78][000270]
//     	MOV R4, RZ;                      # [ 79][000278]
//     	FMUL.FMZ R6, R2, R17;            # [ 80][000280]
//     	MOV R27, RZ;                     # [ 81][000288]
//     	MUFU.RSQ R2, R16;                # [ 82][000290]
//     	FMUL.FMZ R17, R0, R29;           # [ 83][000298]
//     	FMUL.FMZ R16, R1, R28;           # [ 84][0002a0]
//     	FMUL.FTZ R0, R25, R2;            # [ 85][0002a8]
//     	FADD.FTZ R25, R18, -R20;         # [ 86][0002b0]
//     	FMUL.FTZ R1, R23, R2;            # [ 87][0002b8]
//     	FMUL32I.FTZ R18, R0, 0x3f0b859c; # [ 88][0002c0]
//     	FMUL32I.FTZ R23, R8, 0.33;       # [ 89][0002c8]
//     	FMUL.FTZ R2, R24, R2;            # [ 90][0002d0]
//     	FFMA.FTZ R19, R1, c[0x9][0x14], R18; # [ 91][0002d8]
//     	FFMA.FTZ R23, R9, c[0x9][0x10], R23; # [ 92][0002e0]
//     	FMUL32I.FTZ R18, R5, 0x3f0b859c; # [ 93][0002e8]
//     	FFMA.FTZ.SAT R24, R2, c[0x9][0x18], R19; # [ 94][0002f0]
//     	FFMA.FTZ.SAT R22, R22, R25, R20; # [ 95][0002f8]
//     	FFMA.FTZ R19, R10, c[0x9][0x10], R23; # [ 96][000300]
//     	MUFU.LG2 R24, |R24|;             # [ 97][000308]
//     	FFMA.FTZ R23, R15, c[0x9][0x14], R18; # [ 98][000310]
//     	FFMA.FMZ R18, R19, 200, R21;     # [ 99][000318]
//     	FMUL.FMZ R20, R24, R18;          # [100][000320]
//     	FFMA.FTZ.SAT R21, R26, c[0x9][0x18], R23; # [101][000328]
//     	RRO.EX2 R20, R20;                # [102][000330]
//     	FMUL32I.FMZ R25, R21, 0x3f939394; # [103][000338]
//     	FMUL32I.FMZ R28, R21, 0x3fccccce; # [104][000340]
//     	FMUL.FMZ R29, R21, 2;            # [105][000348]
//     	MUFU.EX2 R24, R20;               # [106][000350]
//     	FMUL.FMZ.SAT R23, R21, 10;       # [107][000358]
//     	FFMA.FMZ R20, R25, R22, R14;     # [108][000360]
//     	FFMA.FMZ R21, R28, R22, R13;     # [109][000368]
//     	FFMA.FMZ R25, R29, R22, R12;     # [110][000370]
//     	FMUL.FMZ R14, R24, 2;            # [111][000378]
//     	FMUL32I.FMZ R13, R24, 0x3fccccce; # [112][000380]
//     	FMUL32I.FMZ R12, R24, 0x3f939394; # [113][000388]
//     	FMUL.FMZ R14, R23, R14;          # [114][000390]
//     	FMUL.FMZ R13, R23, R13;          # [115][000398]
//     	FMUL.FMZ R12, R23, R12;          # [116][0003a0]
//     	FMUL.FMZ R24, R22, R14;          # [117][0003a8]
//     	FMUL.FMZ R23, R22, R13;          # [118][0003b0]
//     	FMUL.FMZ R22, R22, R12;          # [119][0003b8]
//     	@P0 BRA L0630;                   # [120][0003c0]
//     L03c8:
//     	FADD.FTZ R29, R4, -1;            # [121][0003c8]
//     	FCMP.GTU R33, RZ, c[0x6][0x19f0], R4; # [122][0003d0]
//     	FADD.FTZ R30, R4, -2;            # [123][0003d8]
//     	FCMP.GTU R34, RZ, c[0x6][0x19f4], R4; # [124][0003e0]
//     	F2F R29, -|R29|;                 # [125][0003e8]
//     	FCMP.GTU R13, RZ, c[0x6][0x19f8], R4; # [126][0003f0]
//     	F2F R30, -|R30|;                 # [127][0003f8]
//     	FADD.FTZ R31, R4, -3;            # [128][000400]
//     	FCMP.LTU R33, R33, c[0x6][0x1a00], R29; # [129][000408]
//     	FCMP.LTU R34, R34, c[0x6][0x1a04], R29; # [130][000410]
//     	FADD.FTZ R32, R4, -4;            # [131][000418]
//     	FCMP.LTU R13, R13, c[0x6][0x1a08], R29; # [132][000420]
//     	F2F R31, -|R31|;                 # [133][000428]
//     	FCMP.LTU R33, R33, c[0x6][0x1a10], R30; # [134][000430]
//     	FCMP.LTU R34, R34, c[0x6][0x1a14], R30; # [135][000438]
//     	F2F R32, -|R32|;                 # [136][000440]
//     	IPA.SC R12, a[0x380], R11;       # [137][000448] FIXED_FNC_TEXTURE_8_S
//     	FCMP.LTU R13, R13, c[0x6][0x1a18], R30; # [138][000450]
//     	IPA.SC R14, a[0x384], R11;       # [139][000458] FIXED_FNC_TEXTURE_8_T
//     	FCMP.LTU R33, R33, c[0x6][0x1a20], R31; # [140][000460]
//     	FCMP.LTU R34, R34, c[0x6][0x1a24], R31; # [141][000468]
//     	FCMP.LTU R13, R13, c[0x6][0x1a28], R31; # [142][000470]
//     	IPA.SC R28, a[0x388], R11;       # [143][000478] FIXED_FNC_TEXTURE_8_R
//     	FCMP.LTU R35, R33, c[0x6][0x1a30], R32; # [144][000480]
//     	IADD R27, R27, 0x1;              # [145][000488]
//     	FCMP.LTU R33, R34, c[0x6][0x1a34], R32; # [146][000490]
//     	FADD.FTZ R12, R35, -R12;         # [147][000498]
//     	FCMP.LTU R32, R13, c[0x6][0x1a38], R32; # [148][0004a0]
//     	F2F R34, -|R4|;                  # [149][0004a8]
//     	FADD.FTZ R13, R33, -R14;         # [150][0004b0]
//     	FADD.FTZ R32, R32, -R28;         # [151][0004b8]
//     	FMUL.FTZ R14, R12, R12;          # [152][0004c0]
//     	FCMP.LTU R33, RZ, c[0x6][0x1a30], R34; # [153][0004c8]
//     	FFMA.FTZ R14, R13, R13, R14;     # [154][0004d0]
//     	FCMP.LTU R28, RZ, c[0x6][0x1a38], R34; # [155][0004d8]
//     	FCMP.LTU R34, RZ, c[0x6][0x1a34], R34; # [156][0004e0]
//     	FFMA.FTZ R14, R32, R32, R14;     # [157][0004e8]
//     	FCMP.LTU R35, R33, c[0x6][0x1a40], R29; # [158][0004f0]
//     	FCMP.LTU R28, R28, c[0x6][0x1a48], R29; # [159][0004f8]
//     	MUFU.RSQ R33, |R14|;             # [160][000500]
//     	FCMP.LTU R29, R34, c[0x6][0x1a44], R29; # [161][000508]
//     	FCMP.LTU R34, R35, c[0x6][0x1a50], R30; # [162][000510]
//     	FCMP.LTU R28, R28, c[0x6][0x1a58], R30; # [163][000518]
//     	FCMP.LTU R29, R29, c[0x6][0x1a54], R30; # [164][000520]
//     	FMUL.FMZ R12, R12, R33;          # [165][000528]
//     	FMUL.FMZ R13, R13, R33;          # [166][000530]
//     	FMUL.FMZ R30, R32, R33;          # [167][000538]
//     	MUFU.RCP R14, R14;               # [168][000540]
//     	FMUL.FTZ R33, R12, R0;           # [169][000548]
//     	FCMP.LTU R32, R34, c[0x6][0x1a60], R31; # [170][000550]
//     	FCMP.LTU R28, R28, c[0x6][0x1a68], R31; # [171][000558]
//     	FCMP.LTU R31, R29, c[0x6][0x1a64], R31; # [172][000560]
//     	FFMA.FTZ R33, R13, R1, R33;      # [173][000568]
//     	FMUL.FMZ R29, R14, R32;          # [174][000570]
//     	FMUL.FMZ R31, R14, R31;          # [175][000578]
//     	FFMA.FTZ.SAT R32, R30, R2, R33;  # [176][000580]
//     	ISETP.LT.AND P0, PT, R27, c[0x6][0x1da0], PT; # [177][000588]
//     	FMUL.FTZ R33, R5, R12;           # [178][000590]
//     	MUFU.LG2 R32, |R32|;             # [179][000598]
//     	FMUL.FMZ R12, R14, R28;          # [180][0005a0]
//     	FADD.FTZ R4, R4, 1;              # [181][0005a8]
//     	FFMA.FTZ R14, R15, R13, R33;     # [182][0005b0]
//     	FMUL.FMZ R13, R32, R18;          # [183][0005b8]
//     	RRO.EX2 R13, R13;                # [184][0005c0]
//     	FFMA.FTZ.SAT R14, R26, R30, R14; # [185][0005c8]
//     	MUFU.EX2 R13, R13;               # [186][0005d0]
//     	FFMA.FMZ R20, R12, R14, R20;     # [187][0005d8]
//     	FFMA.FMZ R21, R31, R14, R21;     # [188][0005e0]
//     	FFMA.FMZ R25, R29, R14, R25;     # [189][0005e8]
//     	FMUL.FMZ.SAT R14, R14, 10;       # [190][0005f0]
//     	FMUL.FMZ R12, R12, R13;          # [191][0005f8]
//     	FMUL.FMZ R28, R31, R13;          # [192][000600]
//     	FFMA.FMZ R22, R12, R14, R22;     # [193][000608]
//     	FMUL.FMZ R13, R29, R13;          # [194][000610]
//     	FFMA.FMZ R23, R28, R14, R23;     # [195][000618]
//     	FFMA.FMZ R24, R13, R14, R24;     # [196][000620]
//     	@P0 BRA L03c8;                   # [197][000628]
//     L0630:
//     	FMNMX R4, |R0|, |R1|, !PT;       # [198][000630]
//     	IPA.SC R5, a[0x314], R11;        # [199][000638] FIXED_FNC_TEXTURE_1_T
//     	FMNMX R4, |R2|, R4, !PT;         # [200][000640]
//     	FFMA.FMZ R25, R7, 10, R25;       # [201][000648]
//     	MUFU.RCP R12, R4;                # [202][000650]
//     	FMUL R2, R2, R12;                # [203][000658]
//     	IPA.SC R4, a[0x310], R11;        # [204][000660] TEX1
//     	FMUL R1, R1, R12;                # [205][000668]
//     	FMUL R0, R0, R12;                # [206][000670]
//     	TEX.NODEP.T R0, R0, 0x2, 0x2, LWBE, 0x7; # [207][000678]
//     	FADD32I.FTZ R13, R5, -0.01;      # [208][000680]
//     	FADD32I.FTZ R12, R4, -0.01;      # [209][000688]
//     	FADD32I.FTZ R14, R4, 0.01;       # [210][000690]
//     	TEX.NODEP.T R26, R12, 0x0, 0x0, 2D, 0x8; # [211][000698]
//     	MOV R15, R13;                    # [212][0006a0]
//     	TEX.NODEP.T R27, R14, 0x0, 0x0, 2D, 0x8; # [213][0006a8]
//     	FADD32I.FTZ R15, R5, 0.01;       # [214][0006b0]
//     	TEX.NODEP.T R28, R14, 0x0, 0x0, 2D, 0x8; # [215][0006b8]
//     	MOV R13, R15;                    # [216][0006c0]
//     	MOV R14, RZ;                     # [217][0006c8]
//     	IPA.SC R15, a[0x318], R11;       # [218][0006d0] FIXED_FNC_TEXTURE_1_R
//     	TEX.NODEP.T R11, R12, 0x0, 0x0, 2D, 0x8; # [219][0006d8]
//     	TEX.NODEP.T R12, R14, 0x1, 0x1, 2D; # [220][0006e0]
//     	TEX.NODEP.P R4, R4, 0x0, 0x0, 2D, 0x8; # [221][0006e8]
//     	FFMA.FMZ R5, R7, 10, R21;        # [222][0006f0]
//     	MOV32I R21, 0x3f800000;          # [223][0006f8]
//     	FFMA.FMZ R7, R7, 10, R20;        # [224][000700]
//     	FMUL.FMZ R20, R19, R0;           # [225][000708]
//     	FFMA.FMZ R0, R18, 0.5, R21;      # [226][000710]
//     	FMUL.FMZ R21, R19, R1;           # [227][000718]
//     	FMUL.FMZ R18, R20, 8;            # [228][000720]
//     	FMUL.FMZ R1, R19, R2;            # [229][000728]
//     	FMUL.FMZ R19, R21, 8;            # [230][000730]
//     	FFMA.FMZ R2, R24, R0, R18;       # [231][000738]
//     	FMUL.FMZ R1, R1, 8;              # [232][000740]
//     	FFMA.FMZ R18, R23, R0, R19;      # [233][000748]
//     	FMUL.FMZ R2, R8, R2;             # [234][000750]
//     	FFMA.FMZ R1, R22, R0, R1;        # [235][000758]
//     	FMUL.FMZ R8, R9, R18;            # [236][000760]
//     	FFMA.FMZ R0, R17, R25, R2;       # [237][000768]
//     	FMUL.FMZ R2, R10, R1;            # [238][000770]
//     	FFMA.FMZ R1, R16, R5, R8;        # [239][000778]
//     	FMUL32I.FTZ R5, R0, 0.299;       # [240][000780]
//     	FFMA.FMZ R7, R6, R7, R2;         # [241][000788]
//     	FFMA.FTZ R2, R1, -c[0x9][0x20], -R5; # [242][000790]
//     	FFMA.FTZ R6, R7, -c[0x9][0x24], R2; # [243][000798]
//     	FADD.FTZ R5, R26, R27;           # [244][0007a0]
//     	FMUL32I.FTZ R2, R0, 0.66;        # [245][0007a8]
//     	FFMA.FTZ R6, R12, c[0x9][0x28], R6; # [246][0007b0]
//     	FADD.FTZ R5, R28, R5;            # [247][0007b8]
//     	FFMA.FTZ R6, R14, c[0x9][0x24], R6; # [248][0007c0]
//     	FADD.FTZ R5, R11, R5;            # [249][0007c8]
//     	FFMA.FTZ R2, R1, c[0x9][0x1c], R2; # [250][0007d0]
//     	FMUL.FMZ R4, R4, 0.5;            # [251][0007d8]
//     	FFMA.FTZ R6, R13, c[0x9][0x20], R6; # [252][0007e0]
//     	FFMA.FMZ R9, R5, 0.125, R4;      # [253][0007e8]
//     	FFMA.FTZ.SAT R8, R7, c[0x9][0x1c], R2; # [254][0007f0]
//     	FMUL32I.FMZ R2, R6, 0x3f13bb63;  # [255][0007f8]
//     	FFMA.FMZ R4, R12, R8, -R0;       # [256][000800]
//     	RRO.EX2 R2, R2;                  # [257][000808]
//     	FFMA.FMZ R5, R13, R8, -R1;       # [258][000810]
//     	FFMA.FMZ R6, R14, R8, -R7;       # [259][000818]
//     	FFMA.FMZ R4, R9, R4, R0;         # [260][000820]
//     	FFMA.FMZ R6, R9, R6, R7;         # [261][000828]
//     	MUFU.EX2 R0, R2;                 # [262][000830]
//     	FADD.FTZ R7, R14, -R6;           # [263][000838]
//     	FFMA.FMZ R2, R9, R5, R1;         # [264][000840]
//     	FMUL.FMZ.SAT R0, R15, R0;        # [265][000848]
//     	FADD.FTZ R1, R12, -R4;           # [266][000850]
//     	FADD.FTZ R5, R13, -R2;           # [267][000858]
//     	FFMA.FTZ R1, R0, R1, R4;         # [268][000860]
//     	FFMA.FTZ R2, R0, R5, R2;         # [269][000868]
//     	FFMA.FTZ R4, R0, R7, R6;         # [270][000870]
//     	FMNMX.FTZ R0, R1, 65504, PT;     # [271][000878]
//     	FMNMX.FTZ R1, R2, 65504, PT;     # [272][000880]
//     	FMNMX.FTZ R2, R4, 65504, PT;     # [273][000888]
//     	EXIT;                            # [274][000890]
//     	END
//     END_SECTION
// END_SHADER
// 
