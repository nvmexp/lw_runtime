// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0xce52f6a85eb813ab
//         UCODE_HASH: 0xb63e04b48926a09c
//         POOL: APP
//         VERSION: 20
//         # USES: 2085
//         // Time: 51.507ms [4.794 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 23
//         USED_TEXTURE_BITS: 0x3f
//         TEXTURE_SLOTS: 6
//         SAMPLER_SLOTS: 6
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             COLOR_SPELWLAR_RED   PERSPECTIVE
//             COLOR_SPELWLAR_GREEN PERSPECTIVE
//             COLOR_SPELWLAR_BLUE  PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_Q              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00002a00      0x2a2a2a0a
//         0x00002a80      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c1, 2.00000000, -1.00000000, 0.00010000, 1.00000000 ; 0x40000000 0xbf800000 0x38d1b717 0x3f800000
        def c3, 0.81649661, 0.57735026, 0.00000000, 0.00000000 ; 0x3f5105ec 0x3f13cd3a 0x000000 0x000000
        def c11, -0.70710677, -0.40824831, 0.57735026, 0.70710677 ; 0xbf3504f3 0xbed105ec 0x3f13cd3a 0x3f3504f3
        dcl_color1 v0.rgb
        dcl_texcoord0 v1.rg
        dcl_texcoord2_pp v2.rgb
        dcl_texcoord3_pp v3.rgb
        dcl_texcoord4_pp v4.rgb
        dcl_texcoord5 v5.a
        dcl_texcoord6 v6.rgb
        dcl_2d s0
        dcl_2d s1
        dcl_2d s2
        dcl_2d s3
        dcl_2d s4
        dcl_2d s5
        nrm r0.xyz, v0
        mul r1.xy, c6.x, v1
        texld r1, r1, s2
        mul r1.xy, c4, v1
        texld r2, r1, s3
        add_sat r1.xy, r1.z, r2.yzzw
        mul r1.zw, c5.x, v1.xyxy
        texld r3, r1.zwzw, s0
        mad r3.xyz, r3, c1.x, c1.y
        texld r4, r1.zwzw, s1
        mad r4.xyz, r4, c1.x, c1.y
        lrp_pp r5.xyz, r1.x, r4, r3
        dp3 r0.x, r0, r5
        nrm_pp r3.xyz, r5
        add r0.x, r0.x, -c7.x
        mul_sat r0.x, r0.x, c8.x
        mov_sat r0.y, r2.y
        mul r0.x, r0.x, r0.y
        texld r4, r1.zwzw, s4
        texld r5, r1.zwzw, s2
        texld r6, r1.zwzw, s5
        mul r0.yzw, r4.xxyz, r5.x
        mad r1.xzw, r5.x, -r4.xyyz, r4.xyyz
        mul r2.y, r5.x, c9.x
        mad r0.yzw, r1.y, r1.xxzw, r0
        lrp r1.xyz, r0.x, r6, r0.yzw
        nrm r0.xyz, v6
        dp3 r0.x, r3, r0
        dp2add r0.x, r3.z, r0.x, -r0.z
        mul_sat r0.x, r0.x, r0.x
        mul r0.x, r2.y, r0.x
        mad r0.xyz, r2.x, r1, r0.x
        mov r0.w, c1.w
        add r1.xyz, r0.w, -c0
        mul_pp r0.xyz, r0, r1
        dp2add_sat_pp r1.x, r3.yzzw, c3, c3.z
        dp3_sat_pp r1.y, r3, c11
        dp3_sat_pp r1.z, r3.yzxw, c11.yzw
        mul r1.xyz, r1, r1
        max_pp r2.xyz, r1, c1.z
        mul_pp r1.xyz, r2.y, v3
        mul_pp r1.xyz, r0, r1
        mul_pp r2.xyw, r2.x, v2.xyz
        mul_pp r3.xyz, r2.z, v4
        mad_pp r1.xyz, r2.xyw, r0, r1
        mad_pp r1.xyz, r3, r0, r1
        add_pp r1.xyz, r1, c0
        mad_pp oC0.xyz, r0, c10, r1
        rcp r0.x, v5.w
        mad_pp oC0.w, c2.x, r0.x, c2.y
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0001 0x40000000 0xbf800000
//         0x38d1b717 0x3f800000 0x05000051 0xa00f0003
//         0x3f5105ec 0x3f13cd3a 0x00000000 0x00000000
//         0x05000051 0xa00f000b 0xbf3504f3 0xbed105ec
//         0x3f13cd3a 0x3f3504f3 0x0200001f 0x8001000a
//         0x90070000 0x0200001f 0x80000005 0x90030001
//         0x0200001f 0x80020005 0x90270002 0x0200001f
//         0x80030005 0x90270003 0x0200001f 0x80040005
//         0x90270004 0x0200001f 0x80050005 0x90080005
//         0x0200001f 0x80060005 0x90070006 0x0200001f
//         0x90000000 0xa00f0800 0x0200001f 0x90000000
//         0xa00f0801 0x0200001f 0x90000000 0xa00f0802
//         0x0200001f 0x90000000 0xa00f0803 0x0200001f
//         0x90000000 0xa00f0804 0x0200001f 0x90000000
//         0xa00f0805 0x02000024 0x80070000 0x90e40000
//         0x03000005 0x80030001 0xa0000006 0x90e40001
//         0x03000042 0x800f0001 0x80e40001 0xa0e40802
//         0x03000005 0x80030001 0xa0e40004 0x90e40001
//         0x03000042 0x800f0002 0x80e40001 0xa0e40803
//         0x03000002 0x80130001 0x80aa0001 0x80e90002
//         0x03000005 0x800c0001 0xa0000005 0x90440001
//         0x03000042 0x800f0003 0x80ee0001 0xa0e40800
//         0x04000004 0x80070003 0x80e40003 0xa0000001
//         0xa0550001 0x03000042 0x800f0004 0x80ee0001
//         0xa0e40801 0x04000004 0x80070004 0x80e40004
//         0xa0000001 0xa0550001 0x04000012 0x80270005
//         0x80000001 0x80e40004 0x80e40003 0x03000008
//         0x80010000 0x80e40000 0x80e40005 0x02000024
//         0x80270003 0x80e40005 0x03000002 0x80010000
//         0x80000000 0xa1000007 0x03000005 0x80110000
//         0x80000000 0xa0000008 0x02000001 0x80120000
//         0x80550002 0x03000005 0x80010000 0x80000000
//         0x80550000 0x03000042 0x800f0004 0x80ee0001
//         0xa0e40804 0x03000042 0x800f0005 0x80ee0001
//         0xa0e40802 0x03000042 0x800f0006 0x80ee0001
//         0xa0e40805 0x03000005 0x800e0000 0x80900004
//         0x80000005 0x04000004 0x800d0001 0x80000005
//         0x81940004 0x80940004 0x03000005 0x80020002
//         0x80000005 0xa0000009 0x04000004 0x800e0000
//         0x80550001 0x80e00001 0x80e40000 0x04000012
//         0x80070001 0x80000000 0x80e40006 0x80f90000
//         0x02000024 0x80070000 0x90e40006 0x03000008
//         0x80010000 0x80e40003 0x80e40000 0x0400005a
//         0x80010000 0x80aa0003 0x80000000 0x81aa0000
//         0x03000005 0x80110000 0x80000000 0x80000000
//         0x03000005 0x80010000 0x80550002 0x80000000
//         0x04000004 0x80070000 0x80000002 0x80e40001
//         0x80000000 0x02000001 0x80080000 0xa0ff0001
//         0x03000002 0x80070001 0x80ff0000 0xa1e40000
//         0x03000005 0x80270000 0x80e40000 0x80e40001
//         0x0400005a 0x80310001 0x80e90003 0xa0e40003
//         0xa0aa0003 0x03000008 0x80320001 0x80e40003
//         0xa0e4000b 0x03000008 0x80340001 0x80c90003
//         0xa0f9000b 0x03000005 0x80070001 0x80e40001
//         0x80e40001 0x0300000b 0x80270002 0x80e40001
//         0xa0aa0001 0x03000005 0x80270001 0x80550002
//         0x90e40003 0x03000005 0x80270001 0x80e40000
//         0x80e40001 0x03000005 0x802b0002 0x80000002
//         0x90a40002 0x03000005 0x80270003 0x80aa0002
//         0x90e40004 0x04000004 0x80270001 0x80f40002
//         0x80e40000 0x80e40001 0x04000004 0x80270001
//         0x80e40003 0x80e40000 0x80e40001 0x03000002
//         0x80270001 0x80e40001 0xa0e40000 0x04000004
//         0x80270800 0x80e40000 0xa0e4000a 0x80e40001
//         0x02000006 0x80010000 0x90ff0005 0x04000004
//         0x80280800 0xa0000002 0x80000000 0xa0550002
//         0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f5105ec // 0.81649661
//         COP_CONST[1]: 0xbed105ec // -0.40824831
//         COP_CONST[2]: 0x3f3504f3 // 0.70710677
//         COP_CONST[3]: 0x38d1b717 // 0.00010000
//         COP_CONST[4]: 0x421fd70a // 39.95999908
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][251] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][252] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][258] = 0x421fd70a // 39.95999908
//         # USER FLOAT CONST: c[6][259] = 0x3a831200 // 0.00099999
//         # USER FLOAT CONST: c[6][266] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][267] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][286] = 0x3d199999 // 0.03750000
//         # USER FLOAT CONST: c[6][290] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][291] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][292] = 0x00000000 // 0.00000000
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@0.00000000
//         ##    ~c0.y -> c[6][251] = 100.00%@0.00000000
//         ##    ~c0.z -> c[6][252] = 100.00%@0.00000000
//         ##    ~c2.x -> c[6][258] = 100.00%@39.95999908
//         ##    ~c2.y -> c[6][259] = 100.00%@0.00099999
//         ##    ~c4.x -> c[6][266] = 100.00%@1.00000000
//         ##    ~c4.y -> c[6][267] = 100.00%@1.00000000
//         ##     c5.x -> c[6][270] = 54.87%@4.00000000 25.18%@3.00000000 19.95%@10.00000000
//         ##     c6.x -> c[6][274] = 74.82%@2.00000000 25.18%@1.00000000
//         ##     c7.x -> c[6][278] = 54.87%@0.20000000 45.13%@0.00000000
//         ##     c8.x -> c[6][282] = 54.87%@2.00000000 45.13%@1.00000000
//         ##    ~c9.x -> c[6][286] = 100.00%@0.03750000
//         ##    ~c10.x -> c[6][290] = 100.00%@0.00000000
//         ##    ~c10.y -> c[6][291] = 100.00%@0.00000000
//         ##    ~c10.z -> c[6][292] = 100.00%@0.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,2560x1600,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x54d33e35,0x0000020d
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x19ed4ab9,0x0000020d
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0xf626f275,0x0000020d
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,1,0,0), 0x7ad14be0,0x0000020d
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x60f9efdf,0x0000020d
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x6a9c9005,0x0000020d
//         RENDERTARGETINFO: 1,2560x1600,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x54d33e35,0x00000478
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x19ed4ab9,0x00000478
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0xf626f275,0x00000478
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,1,0,0), 0x4d363e1a,0x00000478
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x60f9efdf,0x00000478
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x6a9c9005,0x00000478
//         RENDERTARGETINFO: 1,2560x1600,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x54d33e35,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x19ed4ab9,0x000001a0
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0xf626f275,0x000001a0
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,1,0,0), 0x52998ea0,0x000001a0
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x60f9efdf,0x000001a0
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x6a9c9005,0x000001a0
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x18 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 2 : 
//          (attr 1 1 4) (attr 2 6 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         nrmr r5.xyz, v1
//         mulr r6.xy, c[6][256].x, v2
//         texr r6, r6.xyyy, #2, #2, 2D
//         movr r45, c[6][254]
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulr r6.xy, r45, v2
//         texr r7, r6.xyzz, #3, #3, 2D
//         addr_sat r6.xy, r6.z, r7.yzzw
//         mulr r6.zw, c[6][255].x, v2.xyxy
//         texr r8, r6.zwzz, #0, #0, 2D
//         madr r8.xyz, r8, constant(2.00000000, -1.00000000, 0.00010000, 1.00000000).x, constant(2.00000000, -1.00000000, 0.00010000, 1.00000000).y
//         texr r9, r6.zwzz, #1, #1, 2D
//         madr r9.xyz, r9, constant(2.00000000, -1.00000000, 0.00010000, 1.00000000).x, constant(2.00000000, -1.00000000, 0.00010000, 1.00000000).y
//         lrph r10.xyz, r6.x, r9, r8
//         dp3r r5.x, r5, r10
//         nrmh r8.xyz, r10
//         addr r5.x, r5.x, -c[6][257].x
//         mulr_sat r5.x, r5.x, c[6][258].x
//         movr_sat r5.y, r7.y
//         mulr r5.x, r5.x, r5.y
//         texr r9, r6.zwzz, #4, #4, 2D
//         texr r10, r6.zwzz, #2, #2, 2D
//         texr r11, r6.zwzz, #5, #5, 2D
//         mulr r5.yzw, r9.xxyz, r10.x
//         madr r6.xzw, r10.x, -r9.xyyz, r9.xyyz
//         movr r44, c[6][259].x
//         movr r44.x, constant(0.03750000, 0.03750000, 0.03750000, 0.03750000).x
//         movr r44.y, constant(0.03750000, 0.03750000, 0.03750000, 0.03750000).x
//         movr r44.z, constant(0.03750000, 0.03750000, 0.03750000, 0.03750000).x
//         movr r44.w, constant(0.03750000, 0.03750000, 0.03750000, 0.03750000).x
//         mulr r7.y, r10.x, r44
//         madr r5.yzw, r6.y, r6.xxzw, r5
//         lrpr r6.xyz, r5.x, r11, r5.yzww
//         nrmr r5.xyz, v7
//         dp3r r5.x, r8, r5
//         dp2ar r5.x, r8.z, r5.x, -r5.z
//         mulr_sat r5.x, r5.x, r5.x
//         mulr r5.x, r7.y, r5.x
//         madr r5.xyz, r7.x, r6, r5.x
//         movr r5.w, constant(2.00000000, -1.00000000, 0.00010000, 1.00000000).w
//         movr r44, -c[6][250]
//         movr r44.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addr r6.xyz, r5.w, r44
//         mulh r5.xyz, r5, r6
//         dp2ah_sat r6.x, r8.yzzw, constant(0.81649661, 0.57735026, 0.00000000, 0.00000000), constant(0.81649661, 0.57735026, 0.00000000, 0.00000000).z
//         dp3h_sat r6.y, r8, constant(-0.70710677, -0.40824831, 0.57735026, 0.70710677)
//         dp3h_sat r6.z, r8.yzxw, constant(-0.70710677, -0.40824831, 0.57735026, 0.70710677).yzww
//         mulr r6.xyz, r6, r6
//         maxh r7.xyz, r6, constant(2.00000000, -1.00000000, 0.00010000, 1.00000000).z
//         mulh r6.xyz, r7.y, v4
//         mulh r6.xyz, r5, r6
//         mulh r7.xyw, r7.x, v3.xyzz
//         mulh r8.xyz, r7.z, v5
//         madh r6.xyz, r7.xyww, r5, r6
//         madh r6.xyz, r8, r5, r6
//         movr r44, c[6][250]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addh r6.xyz, r6, r44
//         movr r44, c[6][260]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madh r0.xyz, r5, r44, r6
//         rcpr r5.x, v6.w
//         movr r45, c[6][252].x
//         movr r45.x, constant(39.95999908, 39.95999908, 39.95999908, 39.95999908).x
//         movr r45.y, constant(39.95999908, 39.95999908, 39.95999908, 39.95999908).x
//         movr r45.z, constant(39.95999908, 39.95999908, 39.95999908, 39.95999908).x
//         movr r45.w, constant(39.95999908, 39.95999908, 39.95999908, 39.95999908).x
//         movr r43, c[6][252].y
//         movr r43.x, constant(0.00099999, 0.00099999, 0.00099999, 0.00099999).x
//         movr r43.y, constant(0.00099999, 0.00099999, 0.00099999, 0.00099999).x
//         movr r43.z, constant(0.00099999, 0.00099999, 0.00099999, 0.00099999).x
//         movr r43.w, constant(0.00099999, 0.00099999, 0.00099999, 0.00099999).x
//         madh r0.w, r45, r5.x, r43
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R19, -0x40800000;         # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R11, R0;                # [  2][000010]
//     	IPA.PASS.CENTROID R3, a[0x7c];   # [  3][000018] POSITION_W
//     	IPA.SC R5, a[0x304], R11;        # [  4][000020] FIXED_FNC_TEXTURE_0_T
//     	FMUL.FMZ R1, R5, c[0x6][0x1000]; # [  5][000028]
//     	IPA.SC R4, a[0x300], R11;        # [  6][000030] TEX0
//     	FMUL.FMZ R0, R4, c[0x6][0x1000]; # [  7][000038]
//     	MUFU.RCP R7, R3;                 # [  8][000040]
//     	TEX.NODEP.T R18, R0, 0x2, 0x2, 2D, 0x4; # [  9][000048]
//     	TEX.NODEP.T R0, R4, 0x3, 0x3, 2D, 0x7; # [ 10][000050]
//     	FMUL.FMZ R16, R4, c[0x6][0xff0]; # [ 11][000058]
//     	FMUL.FMZ R17, R5, c[0x6][0xff0]; # [ 12][000060]
//     	TEX.NODEP.T R8, R16, 0x0, 0x0, 2D, 0x7; # [ 13][000068]
//     	TEX.NODEP.T R4, R16, 0x1, 0x1, 2D, 0x7; # [ 14][000070]
//     	TEX.NODEP.T R15, R16, 0x2, 0x2, 2D, 0x1; # [ 15][000078]
//     	TEX.NODEP.P R12, R16, 0x4, 0x4, 2D, 0x7; # [ 16][000080]
//     	FADD.FTZ.SAT R3, R18, R1;        # [ 17][000088]
//     	FFMA.FMZ R20, R10, 2, R19;       # [ 18][000090]
//     	FFMA.FMZ R21, R9, 2, R19;        # [ 19][000098]
//     	FFMA.FMZ R22, R8, 2, R19;        # [ 20][0000a0]
//     	FFMA.FMZ R4, R4, 2, R19;         # [ 21][0000a8]
//     	TEX.NODEP.P R8, R16, 0x5, 0x5, 2D, 0x7; # [ 22][0000b0]
//     	FFMA.FMZ R6, R6, 2, R19;         # [ 23][0000b8]
//     	FFMA.FMZ R16, R5, 2, R19;        # [ 24][0000c0]
//     	IPA.SC.CENTROID R17, a[0x294], R7; # [ 25][0000c8] COLOR_FRONT_SPELWLAR_GREEN
//     	FADD.FTZ R16, R16, -R21;         # [ 26][0000d0]
//     	IPA.SC.CENTROID R5, a[0x290], R7; # [ 27][0000d8] COLOR_FRONT_SPELWLAR_RED
//     	FMUL.FTZ R19, R5, R5;            # [ 28][0000e0]
//     	IPA.SC.CENTROID R7, a[0x298], R7; # [ 29][0000e8] COLOR_FRONT_SPELWLAR_BLUE
//     	FFMA.FTZ R19, R17, R17, R19;     # [ 30][0000f0]
//     	FFMA.FTZ R16, R3, R16, R21;      # [ 31][0000f8]
//     	FADD.FTZ R21, R6, -R20;          # [ 32][000100]
//     	FADD.FTZ R4, R4, -R22;           # [ 33][000108]
//     	FFMA.FTZ R19, R7, R7, R19;       # [ 34][000110]
//     	FFMA.FTZ R4, R3, R4, R22;        # [ 35][000118]
//     	MUFU.RSQ R6, R19;                # [ 36][000120]
//     	FADD.FTZ.SAT R2, R18, R2;        # [ 37][000128]
//     	FFMA.FTZ R19, R3, R21, R20;      # [ 38][000130]
//     	F2F.SAT R1, R1;                  # [ 39][000138]
//     	FMUL.FTZ R20, R5, R6;            # [ 40][000140]
//     	IPA.SC R3, a[0x350], R11;        # [ 41][000148] TEX5
//     	FMUL.FTZ R21, R17, R6;           # [ 42][000150]
//     	IPA.SC R5, a[0x354], R11;        # [ 43][000158] FIXED_FNC_TEXTURE_5_T
//     	FMUL.FTZ R20, R20, R4;           # [ 44][000160]
//     	FMUL.FTZ R6, R7, R6;             # [ 45][000168]
//     	FFMA.FTZ R7, R21, R16, R20;      # [ 46][000170]
//     	IPA.SC R17, a[0x358], R11;       # [ 47][000178] FIXED_FNC_TEXTURE_5_R
//     	FMUL.FTZ R20, R3, R3;            # [ 48][000180]
//     	FFMA.FTZ R6, R6, R19, R7;        # [ 49][000188]
//     	FFMA.FTZ R20, R5, R5, R20;       # [ 50][000190]
//     	FMUL.FMZ R18, R13, R15;          # [ 51][000198]
//     	FFMA.FTZ R7, R17, R17, R20;      # [ 52][0001a0]
//     	FFMA.FMZ R13, R15, -R13, R13;    # [ 53][0001a8]
//     	FMUL.FTZ R20, R4, R4;            # [ 54][0001b0]
//     	MUFU.RSQ R7, R7;                 # [ 55][0001b8]
//     	FFMA.FTZ R20, R16, R16, R20;     # [ 56][0001c0]
//     	FMUL.FTZ R3, R3, R7;             # [ 57][0001c8]
//     	FFMA.FTZ R20, R19, R19, R20;     # [ 58][0001d0]
//     	FMUL.FTZ R5, R5, R7;             # [ 59][0001d8]
//     	FMUL.FTZ R7, R17, R7;            # [ 60][0001e0]
//     	MUFU.RSQ R20, R20;               # [ 61][0001e8]
//     	FADD.FTZ R17, R6, -c[0x6][0x1010]; # [ 62][0001f0]
//     	FMUL.FTZ R16, R16, R20;          # [ 63][0001f8]
//     	FMUL.FTZ R6, R4, R20;            # [ 64][000200]
//     	FMUL.FMZ.SAT R17, R17, c[0x6][0x1020]; # [ 65][000208]
//     	FMUL.FTZ R3, R6, R3;             # [ 66][000210]
//     	FMUL.FTZ R4, R19, R20;           # [ 67][000218]
//     	FMUL.FMZ R1, R17, R1;            # [ 68][000220]
//     	FFMA.FTZ R5, R16, R5, R3;        # [ 69][000228]
//     	FFMA.FMZ R3, R2, R13, R18;       # [ 70][000230]
//     	FFMA.FTZ R17, R4, R7, R5;        # [ 71][000238]
//     	FMUL.FMZ R13, R12, R15;          # [ 72][000240]
//     	FFMA.FMZ R5, R15, -R12, R12;     # [ 73][000248]
//     	FMUL32I.FTZ R12, R4, 0x3f13cd3a; # [ 74][000250]
//     	FFMA.FTZ R7, R4, R17, -R7;       # [ 75][000258]
//     	FFMA.FTZ R18, R16, c[0x9][0x4], R12; # [ 76][000260]
//     	FFMA.FTZ R4, R4, R17, R7;        # [ 77][000268]
//     	FMUL32I.FTZ R7, R6, 0xbf3504f3;  # [ 78][000270]
//     	FFMA.FMZ R5, R2, R5, R13;        # [ 79][000278]
//     	FFMA.FTZ.SAT R6, R6, c[0x9][0x8], R18; # [ 80][000280]
//     	IPA.SC R13, a[0x310], R11;       # [ 81][000288] TEX1
//     	FFMA.FTZ R18, R16, c[0x9][0x4], R7; # [ 82][000290]
//     	FMUL.FMZ R20, R14, R15;          # [ 83][000298]
//     	FFMA.FTZ.SAT R7, R16, c[0x9][0x0], R12; # [ 84][0002a0]
//     	IPA.SC R17, a[0x314], R11;       # [ 85][0002a8] FIXED_FNC_TEXTURE_1_T
//     	FFMA.FMZ R16, R15, -R14, R14;    # [ 86][0002b0]
//     	IPA.SC R19, a[0x318], R11;       # [ 87][0002b8] FIXED_FNC_TEXTURE_1_R
//     	FADD.FTZ.SAT R12, R18, R12;      # [ 88][0002c0]
//     	FMUL.FMZ R14, R7, R7;            # [ 89][0002c8]
//     	FFMA.FMZ R7, R2, R16, R20;       # [ 90][0002d0]
//     	IPA.SC R21, a[0x328], R11;       # [ 91][0002d8] FIXED_FNC_TEXTURE_2_R
//     	FMNMX.FTZ R2, R14, c[0x9][0xc], !PT; # [ 92][0002e0]
//     	FMUL.FMZ R12, R12, R12;          # [ 93][0002e8]
//     	FMUL.FMZ R16, R2, R13;           # [ 94][0002f0]
//     	FMNMX.FTZ R12, R12, c[0x9][0xc], !PT; # [ 95][0002f8]
//     	FMUL.FMZ R14, R2, R17;           # [ 96][000300]
//     	FMUL.FMZ R13, R2, R19;           # [ 97][000308]
//     	FMUL.FMZ R17, R6, R6;            # [ 98][000310]
//     	IPA.SC R2, a[0x324], R11;        # [ 99][000318] FIXED_FNC_TEXTURE_2_T
//     	FMUL.FMZ R6, R12, R21;           # [100][000320]
//     	IPA.SC R20, a[0x320], R11;       # [101][000328] TEX2
//     	FMUL.FMZ.SAT R4, R4, R4;         # [102][000330]
//     	FMUL32I.FMZ R15, R15, 0x3d199999; # [103][000338]
//     	FMUL.FMZ R4, R15, R4;            # [104][000340]
//     	IPA.SC R18, a[0x330], R11;       # [105][000348] TEX3
//     	FMUL.FMZ R2, R12, R2;            # [106][000350]
//     	IPA.SC R19, a[0x334], R11;       # [107][000358] FIXED_FNC_TEXTURE_3_T
//     	FMUL.FMZ R12, R12, R20;          # [108][000360]
//     	FMNMX.FTZ R17, R17, c[0x9][0xc], !PT; # [109][000368]
//     	FMUL.FMZ R18, R17, R18;          # [110][000370]
//     	IPA.SC R20, a[0x338], R11;       # [111][000378] FIXED_FNC_TEXTURE_3_R
//     	FADD.FTZ R21, R9, -R3;           # [112][000380]
//     	IPA.SC R11, a[0x34c], R11;       # [113][000388] FIXED_FNC_TEXTURE_4_Q
//     	FFMA.FTZ R15, R1, R21, R3;       # [114][000390]
//     	FMUL.FMZ R19, R17, R19;          # [115][000398]
//     	FADD.FTZ R3, R8, -R5;            # [116][0003a0]
//     	FMUL.FMZ R9, R17, R20;           # [117][0003a8]
//     	FADD.FTZ R8, R10, -R7;           # [118][0003b0]
//     	FFMA.FTZ R5, R1, R3, R5;         # [119][0003b8]
//     	FFMA.FTZ R7, R1, R8, R7;         # [120][0003c0]
//     	FFMA.FMZ R5, R0, R5, R4;         # [121][0003c8]
//     	FFMA.FMZ R1, R0, R15, R4;        # [122][0003d0]
//     	MUFU.RCP R11, R11;               # [123][0003d8]
//     	FFMA.FMZ R4, R0, R7, R4;         # [124][0003e0]
//     	FMUL.FMZ R2, R1, R2;             # [125][0003e8]
//     	FMUL.FMZ R0, R5, R12;            # [126][0003f0]
//     	FMUL.FMZ R6, R4, R6;             # [127][0003f8]
//     	FFMA.FMZ R2, R14, R1, R2;        # [128][000400]
//     	MOV32I R17, 0x3a831200;          # [129][000408]
//     	FFMA.FMZ R0, R16, R5, R0;        # [130][000410]
//     	FFMA.FMZ R6, R13, R4, R6;        # [131][000418]
//     	FFMA.FMZ R1, R19, R1, R2;        # [132][000420]
//     	FFMA.FMZ R3, R11, c[0x9][0x10], R17; # [133][000428]
//     	FFMA.FMZ R0, R18, R5, R0;        # [134][000430]
//     	FFMA.FMZ R2, R9, R4, R6;         # [135][000438]
//     	EXIT;                            # [136][000440]
//     	END
//     END_SECTION
// END_SHADER
// 
