// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x9f3f8203844d0cb0
//         FINGERPRINTER_HASH: 0xbd7e29431bf983cf
//         UCODE_HASH: 0xf5052bc5c18fb1b0
//         POOL: APP
//         VERSION: 20
//         # USES: 105
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 1
//         # Tex / Tld vectorized: 0
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 24
//         TEXTURE_SLOTS: 2
//         SAMPLER_SLOTS: 0
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_4_0
        dcl_constantbuffer cb1[7].xyzw, immediateIndexed
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_output o0.xyzw
        dcl_temps 7 
        ftoi r0.xy, v0.xyxx
        mov r0.zw, l(0, 0, 0, 0)
        ld r0.xyzw, r0.xyzw, t1.xyzw
        dp2 r0.w, r0.xyxx, r0.xyxx
        add r0.w, -r0.w, l(1.00000000)
        sqrt r0.w, r0.w
        lt r1.x, l(0.00000000), r0.z
        movc r0.w, r1.x, r0.w, -r0.w
        mul r1.xyz, r0.yyyy, cb1[1].xyzx
        mad r1.xyz, r0.xxxx, cb1[0].xyzx, r1.xyzx
        mad r0.z, |r0.z|, cb1[6].x, -cb1[6].y
        mad r1.xyz, r0.wwww, cb1[2].xyzx, r1.xyzx
        mov r2.zw, l(0, 0, 0, 0)
        max r0.w, r0.z, l(10.00000000)
        div r0.w, l(10.00000000), r0.w
        mad r0.w, r0.w, l(11.00000000), l(1.00000000)
        mad r3.xyzw, r0.wwww, l(-0.32621199, -0.40580499, -0.84014398, -0.07358000), v0.xyxy
        ftoi r2.xy, r3.zwzz
        ld r2.xyzw, r2.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r4.xy, r2.zzzz, cb1[5].xyxx
        mad r5.xyzw, r3.xyzw, cb1[4].zwzw, l(-1.00000000, -1.00000000, -1.00000000, -1.00000000)
        ftoi r3.xy, r3.xyxx
        mul r2.xy, r4.xyxx, r5.zwzz
        mad r4.xy, v0.xyxx, cb1[4].zwzz, l(-1.00000000, -1.00000000, 0.00000000, 0.00000000)
        mul r4.zw, r0.zzzz, cb1[5].xxxy
        mul r0.xy, r4.xyxx, r4.zwzz
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r1.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r1.w, r1.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mul r1.w, r1.w, r2.x
        mov r3.zw, l(0, 0, 0, 0)
        ld r2.xyzw, r3.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r3.xy, r2.zzzz, cb1[5].xyxx
        mul r2.xy, r5.xyxx, r3.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r2.w, r2.xyzx, r2.xyzx
        dp3 r2.x, r1.xyzx, r2.xyzx
        sqrt r2.y, r2.w
        div_sat r2.x, r2.x, r2.y
        div r2.y, r2.y, cb1[5].w
        add_sat r2.y, -r2.y, l(1.00000000)
        mad r1.w, r2.x, r2.y, r1.w
        mov r2.zw, l(0, 0, 0, 0)
        mad r3.xyzw, r0.wwww, l(-0.69591397, 0.45713699, -0.20334500, 0.62071598), v0.xyxy
        ftoi r2.xy, r3.xyxx
        ld r2.xyzw, r2.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r4.xy, r2.zzzz, cb1[5].xyxx
        mad r5.xyzw, r3.xyzw, cb1[4].zwzw, l(-1.00000000, -1.00000000, -1.00000000, -1.00000000)
        ftoi r3.xy, r3.zwzz
        mul r2.xy, r4.xyxx, r5.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r2.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r2.y, r2.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mad r1.w, r2.y, r2.x, r1.w
        mov r3.zw, l(0, 0, 0, 0)
        ld r2.xyzw, r3.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r3.xy, r2.zzzz, cb1[5].xyxx
        mul r2.xy, r5.zwzz, r3.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r2.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r2.y, r2.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mad r1.w, r2.y, r2.x, r1.w
        mov r2.zw, l(0, 0, 0, 0)
        mad r3.xyzw, r0.wwww, l(0.96234000, -0.19498301, 0.47343400, -0.48002601), v0.xyxy
        ftoi r2.xy, r3.xyxx
        ld r2.xyzw, r2.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r4.xy, r2.zzzz, cb1[5].xyxx
        mad r5.xyzw, r3.xyzw, cb1[4].zwzw, l(-1.00000000, -1.00000000, -1.00000000, -1.00000000)
        ftoi r3.xy, r3.zwzz
        mul r2.xy, r4.xyxx, r5.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r2.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r2.y, r2.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mad r1.w, r2.y, r2.x, r1.w
        mov r3.zw, l(0, 0, 0, 0)
        ld r2.xyzw, r3.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r3.xy, r2.zzzz, cb1[5].xyxx
        mul r2.xy, r5.zwzz, r3.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r2.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r2.y, r2.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mad r1.w, r2.y, r2.x, r1.w
        mov r2.zw, l(0, 0, 0, 0)
        mad r3.xyzw, r0.wwww, l(0.51945603, 0.76702201, 0.18546100, -0.89312398), v0.xyxy
        ftoi r2.xy, r3.xyxx
        ld r2.xyzw, r2.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r4.xy, r2.zzzz, cb1[5].xyxx
        mad r5.xyzw, r3.xyzw, cb1[4].zwzw, l(-1.00000000, -1.00000000, -1.00000000, -1.00000000)
        ftoi r3.xy, r3.zwzz
        mul r2.xy, r4.xyxx, r5.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r2.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r2.y, r2.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mad r1.w, r2.y, r2.x, r1.w
        mov r3.zw, l(0, 0, 0, 0)
        ld r2.xyzw, r3.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r3.xy, r2.zzzz, cb1[5].xyxx
        mul r2.xy, r5.zwzz, r3.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r2.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r2.y, r2.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mad r1.w, r2.y, r2.x, r1.w
        mov r2.zw, l(0, 0, 0, 0)
        mad r3.xyzw, r0.wwww, l(0.50743097, 0.06442500, 0.89642000, 0.41245800), v0.xyxy
        mad r4.xyzw, r0.wwww, l(-0.32194000, -0.93261498, -0.79155898, -0.59770501), v0.xyxy
        ftoi r2.xy, r3.xyxx
        ld r2.xyzw, r2.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r5.xy, r2.zzzz, cb1[5].xyxx
        mad r6.xyzw, r3.xyzw, cb1[4].zwzw, l(-1.00000000, -1.00000000, -1.00000000, -1.00000000)
        ftoi r3.xy, r3.zwzz
        mul r2.xy, r5.xyxx, r6.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r0.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r0.w, r0.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mad r0.w, r0.w, r2.x, r1.w
        mov r3.zw, l(0, 0, 0, 0)
        ld r2.xyzw, r3.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r3.xy, r2.zzzz, cb1[5].xyxx
        mul r2.xy, r6.zwzz, r3.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r1.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r1.w, r1.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mad r0.w, r1.w, r2.x, r0.w
        ftoi r2.xy, r4.xyxx
        mov r2.zw, l(0, 0, 0, 0)
        ld r2.xyzw, r2.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r3.xy, r2.zzzz, cb1[5].xyxx
        mad r5.xyzw, r4.xyzw, cb1[4].zwzw, l(-1.00000000, -1.00000000, -1.00000000, -1.00000000)
        ftoi r4.xy, r4.zwzz
        mul r2.xy, r3.xyxx, r5.xyxx
        add r2.xyz, -r0.xyzx, r2.xyzx
        dp3 r1.w, r1.xyzx, r2.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        div_sat r1.w, r1.w, r2.x
        div r2.x, r2.x, cb1[5].w
        add_sat r2.x, -r2.x, l(1.00000000)
        mad r0.w, r1.w, r2.x, r0.w
        mov r4.zw, l(0, 0, 0, 0)
        ld r2.xyzw, r4.xyzw, t1.xyzw
        mov r2.z, |r2.z|
        mul r3.xy, r2.zzzz, cb1[5].xyxx
        mul r2.xy, r5.zwzz, r3.xyxx
        add r0.xyz, -r0.xyzx, r2.xyzx
        dp3 r1.x, r1.xyzx, r0.xyzx
        dp3 r0.x, r0.xyzx, r0.xyzx
        sqrt r0.x, r0.x
        div_sat r0.y, r1.x, r0.x
        div r0.x, r0.x, cb1[5].w
        add_sat r0.x, -r0.x, l(1.00000000)
        mad r0.x, r0.y, r0.x, r0.w
        mul r0.x, r0.x, cb1[5].z
        mad o0.xyz, -r0.xxxx, l(0.08333334, 0.08333334, 0.08333334, 0.00000000), l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
        mov o0.w, l(0x3f800000)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3e09fac3 // 0.134746
//         COP_CONST[1]: 0xbc0741d0 // -0.008255
//         COP_CONST[2]: 0xbf7da81a // -0.990846
//         COP_CONST[3]: 0x3f7f7cee // 0.998000
//         COP_CONST[4]: 0xbe0a3cff // -0.134998
//         COP_CONST[5]: 0x3d78437d // 0.060611
//         COP_CONST[6]: 0xbf7d2e80 // -0.988991
//         COP_CONST[7]: 0xbecfc5ac // -0.405805
//         COP_CONST[8]: 0xbea70542 // -0.326212
//         COP_CONST[9]: 0xbf5713ad // -0.840144
//         COP_CONST[10]: 0xbd96b11c // -0.073580
//         COP_CONST[11]: 0x3a4ccccd // 0.000781
//         COP_CONST[12]: 0x3aa3d70a // 0.001250
//         COP_CONST[13]: 0x3f1ee73e // 0.620716
//         COP_CONST[14]: 0xbe5039ac // -0.203345
//         COP_CONST[15]: 0xbf32276b // -0.695914
//         COP_CONST[16]: 0x3eea0ddc // 0.457137
//         COP_CONST[17]: 0xbef5c5f8 // -0.480026
//         COP_CONST[18]: 0x3ef265f1 // 0.473434
//         COP_CONST[19]: 0x3f765bea // 0.962340
//         COP_CONST[20]: 0xbe47a9a0 // -0.194983
//         COP_CONST[21]: 0xbf64a3c6 // -0.893124
//         COP_CONST[22]: 0x3e3de97d // 0.185461
//         COP_CONST[23]: 0x3f04fb12 // 0.519456
//         COP_CONST[24]: 0x3f445b8e // 0.767022
//         COP_CONST[25]: 0x3ed32db2 // 0.412458
//         COP_CONST[26]: 0x3f657bc8 // 0.896420
//         COP_CONST[27]: 0x3f01e6ff // 0.507431
//         COP_CONST[28]: 0x3d83f141 // 0.064425
//         COP_CONST[29]: 0xbf190332 // -0.597705
//         COP_CONST[30]: 0xbf4aa39c // -0.791559
//         COP_CONST[31]: 0xbea4d552 // -0.321940
//         COP_CONST[32]: 0xbf6ebfdb // -0.932615
//         COP_CONST[33]: 0x3daaaaab // 0.083333
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[1][0] = 0xbf7da81a // -0.990846
//         USER_CONST: c[1][1] = 0xbc0741d0 // -0.008255
//         USER_CONST: c[1][2] = 0x3e09fac3 // 0.134746
//         USER_CONST: c[1][4] = 0x362b2800 // 0.000003
//         USER_CONST: c[1][5] = 0x3f7f8545 // 0.998127
//         USER_CONST: c[1][6] = 0x3d7a8e4d // 0.061171
//         USER_CONST: c[1][8] = 0xbe0a3cff // -0.134998
//         USER_CONST: c[1][9] = 0x3d78437d // 0.060611
//         USER_CONST: c[1][10] = 0xbf7d2e80 // -0.988991
//         USER_CONST: c[1][18] = 0x3a4ccccd // 0.000781
//         USER_CONST: c[1][19] = 0x3aa3d70a // 0.001250
//         USER_CONST: c[1][20] = 0x3f52f537 // 0.824054
//         USER_CONST: c[1][21] = 0x3f03d942 // 0.515034
//         USER_CONST: c[1][22] = 0x400ccccd // 2.200000
//         USER_CONST: c[1][23] = 0x3f4ccccd // 0.800000
//         USER_CONST: c[1][24] = 0x3f7f7cee // 0.998000
//         USER_CONST: c[1][25] = 0x3a83126f // 0.001000
//     END_SECTION
//     # Exelwtion Time: 227.982ms [4.948 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x3 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x4 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 0 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 4 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 0
//         bCanReorderHalf: 0
//         bCanReorderFloat: 0
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr (s32) r9.xy, (r) v0.xyxx  //   0 SHD
//         movu32 (u32) r9.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r9.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r9, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r9, (r) r4105  //   0 SHD
//         dp2r (r) r9.w, (r) r9.xyxx, (r) r9.xyxx  //   0 SHD
//         addr (r) r9.w, (r) -r9.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         rsqr (r) r4106.x, (r) r9.w  //   0 SHD
//         rsqr (r) r4106.y, (r) r9.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r9.w  //   0 SHD
//         rsqr (r) r4106.w, (r) r9.w  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 SHD
//         movr (r) r9.w, (r) r4107  //   0 SHD
//         set_ltr.c (s32) r10.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.x  //   0 SHD
//         movr (r) r4105, (r) r9.w  //   0 SHD
//         movr (r) r4105(EQ), (r) -r9.w  //   0 SHD
//         movr (r) r9.w, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[1][1].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00000255, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.99812728, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.06117086, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000255, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r10.xyz, (r) r9.y, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[1][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.99084628, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00825544, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.13474564, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.99084628, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.xyz, (r) r9.x, (r) r4110, (r) r10.xyzx  //   0 SHD
//         movr (r) r4110, (r) c[1][6].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.99800003, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.99800003, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.99800003, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.99800003, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111, (r) -c[1][6].y  //   0 SHD
//         movr (r) r4111.x, (r) -constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) -constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) -constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) -constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.z, (r) |r9.z|, (r) r4110, (r) r4111  //   0 SHD
//         movr (r) r4110, (r) c[1][2].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.13499831, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.06061124, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.98899078, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.13499831, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.xyz, (r) r9.w, (r) r4110, (r) r10.xyzx  //   0 SHD
//         movu32 (u32) r11.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         maxr (r) r9.w, (r) r9.z, (r) constant(10.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) constant(10.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.w  //   0 SHD
//         movr (r) r9.w, (r) r4105  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         madr (r) r9.w, (r) r9.w, (r) constant(11.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         madr (r) r12, (r) r9.w, (r) constant(-0.32621199, -0.40580499, -0.84014398, -0.07358000), (r) v0.xyxy  //   0 SHD
//         movr (s32) r11.xy, (r) r12.zwzz  //   0 SHD
//         movu32 (u32) r4106, (u32) r11.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r11, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xy, (r) r11.z, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[1][4].zwzw  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r14, (r) r12, (r) r4110, (r) constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000)  //   0 SHD
//         movr (s32) r12.xy, (r) r12.xyxx  //   0 SHD
//         mulr (r) r11.xy, (r) r13.xyxx, (r) r14.zwzz  //   0 SHD
//         movr (r) r4110, (r) c[1][4].zwzz  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r13.xy, (r) v0.xyxx, (r) r4110, (r) constant(-1.00000000, -1.00000000, 0.00000000, 0.00000000)  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xxxy  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.zw, (r) r9.z, (r) r4110  //   0 SHD
//         mulr (r) r9.xy, (r) r13.xyxx, (r) r13.zwzz  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r10.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.w, (r) r10.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r10.w, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r10.w, (r) r10.w, (r) r11.x  //   0 SHD
//         movu32 (u32) r12.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r12.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r12, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xy, (r) r11.z, (r) r4110  //   0 SHD
//         mulr (r) r11.xy, (r) r14.xyxx, (r) r12.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.w, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.w  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.w  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.w  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.y, (r) r4105.y  //   0 SHD
//         movr (r) r11.y, (r) r4107  //   0 SHD
//         divr (r) r4108.x, (r) r11.x, (r) r11.y  //   0 SHD
//         movr_sat (r) r11.x, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.y, (r) r11.y, (r) r4110  //   0 SHD
//         movr (r) r11.y, (r) r4105  //   0 SHD
//         addr_sat (r) r11.y, (r) -r11.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r11.x, (r) r11.y, (r) r10.w  //   0 SHD
//         movu32 (u32) r11.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         madr (r) r12, (r) r9.w, (r) constant(-0.69591397, 0.45713699, -0.20334500, 0.62071598), (r) v0.xyxy  //   0 SHD
//         movr (s32) r11.xy, (r) r12.xyxx  //   0 SHD
//         movu32 (u32) r4106, (u32) r11.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r11, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xy, (r) r11.z, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[1][4].zwzw  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r14, (r) r12, (r) r4110, (r) constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000)  //   0 SHD
//         movr (s32) r12.xy, (r) r12.zwzz  //   0 SHD
//         mulr (r) r11.xy, (r) r13.xyxx, (r) r14.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r11.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r11.y, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r11.y, (r) r11.x, (r) r10.w  //   0 SHD
//         movu32 (u32) r12.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r12.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r12, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xy, (r) r11.z, (r) r4110  //   0 SHD
//         mulr (r) r11.xy, (r) r14.zwzz, (r) r12.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r11.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r11.y, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r11.y, (r) r11.x, (r) r10.w  //   0 SHD
//         movu32 (u32) r11.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         madr (r) r12, (r) r9.w, (r) constant(0.96234000, -0.19498301, 0.47343400, -0.48002601), (r) v0.xyxy  //   0 SHD
//         movr (s32) r11.xy, (r) r12.xyxx  //   0 SHD
//         movu32 (u32) r4106, (u32) r11.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r11, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xy, (r) r11.z, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[1][4].zwzw  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r14, (r) r12, (r) r4110, (r) constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000)  //   0 SHD
//         movr (s32) r12.xy, (r) r12.zwzz  //   0 SHD
//         mulr (r) r11.xy, (r) r13.xyxx, (r) r14.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r11.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r11.y, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r11.y, (r) r11.x, (r) r10.w  //   0 SHD
//         movu32 (u32) r12.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r12.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r12, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xy, (r) r11.z, (r) r4110  //   0 SHD
//         mulr (r) r11.xy, (r) r14.zwzz, (r) r12.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r11.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r11.y, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r11.y, (r) r11.x, (r) r10.w  //   0 SHD
//         movu32 (u32) r11.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         madr (r) r12, (r) r9.w, (r) constant(0.51945603, 0.76702201, 0.18546100, -0.89312398), (r) v0.xyxy  //   0 SHD
//         movr (s32) r11.xy, (r) r12.xyxx  //   0 SHD
//         movu32 (u32) r4106, (u32) r11.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r11, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xy, (r) r11.z, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[1][4].zwzw  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r14, (r) r12, (r) r4110, (r) constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000)  //   0 SHD
//         movr (s32) r12.xy, (r) r12.zwzz  //   0 SHD
//         mulr (r) r11.xy, (r) r13.xyxx, (r) r14.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r11.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r11.y, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r11.y, (r) r11.x, (r) r10.w  //   0 SHD
//         movu32 (u32) r12.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r12.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r12, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xy, (r) r11.z, (r) r4110  //   0 SHD
//         mulr (r) r11.xy, (r) r14.zwzz, (r) r12.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r11.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r11.y, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r11.y, (r) r11.x, (r) r10.w  //   0 SHD
//         movu32 (u32) r11.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         madr (r) r12, (r) r9.w, (r) constant(0.50743097, 0.06442500, 0.89642000, 0.41245800), (r) v0.xyxy  //   0 SHD
//         madr (r) r13, (r) r9.w, (r) constant(-0.32194000, -0.93261498, -0.79155898, -0.59770501), (r) v0.xyxy  //   0 SHD
//         movr (s32) r11.xy, (r) r12.xyxx  //   0 SHD
//         movu32 (u32) r4106, (u32) r11.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r11, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.xy, (r) r11.z, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[1][4].zwzw  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r15, (r) r12, (r) r4110, (r) constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000)  //   0 SHD
//         movr (s32) r12.xy, (r) r12.zwzz  //   0 SHD
//         mulr (r) r11.xy, (r) r14.xyxx, (r) r15.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r9.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.w, (r) r9.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r9.w, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.w, (r) r9.w, (r) r11.x, (r) r10.w  //   0 SHD
//         movu32 (u32) r12.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r12.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r12, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xy, (r) r11.z, (r) r4110  //   0 SHD
//         mulr (r) r11.xy, (r) r15.zwzz, (r) r12.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r10.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.w, (r) r10.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r10.w, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.w, (r) r10.w, (r) r11.x, (r) r9.w  //   0 SHD
//         movr (s32) r11.xy, (r) r13.xyxx  //   0 SHD
//         movu32 (u32) r11.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r11.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r11, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xy, (r) r11.z, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[1][4].zwzw  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r14, (r) r13, (r) r4110, (r) constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000)  //   0 SHD
//         movr (s32) r13.xy, (r) r13.zwzz  //   0 SHD
//         mulr (r) r11.xy, (r) r12.xyxx, (r) r14.xyxx  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r10.w, (r) r10.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r11.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         divr (r) r4108.w, (r) r10.w, (r) r11.x  //   0 SHD
//         movr_sat (r) r10.w, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r4110  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         addr_sat (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.w, (r) r10.w, (r) r11.x, (r) r9.w  //   0 SHD
//         movu32 (u32) r13.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r13.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r13, (u32) r4106, #1, #0, 2D, LOAD  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r11.z, (r) |r11.z|  //   0 SHD
//         movr (r) r4110, (r) c[1][5].xyxx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xy, (r) r11.z, (r) r4110  //   0 SHD
//         mulr (r) r11.xy, (r) r14.zwzz, (r) r12.xyxx  //   0 SHD
//         addr (r) r9.xyz, (r) -r9.xyzx, (r) r11.xyzx  //   0 SHD
//         dp3r (r) r10.x, (r) r10.xyzx, (r) r9.xyzx  //   0 SHD
//         dp3r (r) r9.x, (r) r9.xyzx, (r) r9.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r9.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r9.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r9.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r9.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r9.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r10.x, (r) r9.x  //   0 SHD
//         movr_sat (r) r9.y, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) c[1][5].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.80000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.x, (r) r9.x, (r) r4110  //   0 SHD
//         movr (r) r9.x, (r) r4105  //   0 SHD
//         addr_sat (r) r9.x, (r) -r9.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.x, (r) r9.y, (r) r9.x, (r) r9.w  //   0 SHD
//         movr (r) r4110, (r) c[1][5].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(2.20000005, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(2.20000005, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(2.20000005, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(2.20000005, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r9.x, (r) r9.x, (r) r4110  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1065353216, 1065353216, 1065353216, 0)  //   0 SHD
//         madr (r) r0.xyz, (r) -r9.x, (r) constant(0.08333334, 0.08333334, 0.08333334, 0.00000000), (r) r4105  //   0 SHD
//         movu32 (u32) r0.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         ret   //   0 SHD
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[1][0] = 100.00%@-0.99084628
//                 ~c[1][1] = 100.00%@-0.00825544
//                 ~c[1][2] = 100.00%@0.13474564
//                 ~c[1][4] = 100.00%@0.00000255
//                 ~c[1][5] = 100.00%@0.99812728
//                 ~c[1][6] = 100.00%@0.06117086
//                 ~c[1][8] = 100.00%@-0.13499831
//                 ~c[1][9] = 100.00%@0.06061124
//                 ~c[1][10] = 100.00%@-0.98899078
//                 ~c[1][18] = 100.00%@0.00078125
//                 ~c[1][19] = 100.00%@0.00125000
//                 ~c[1][20] = 100.00%@0.82405418
//                 ~c[1][21] = 100.00%@0.51503384
//                 ~c[1][22] = 100.00%@2.20000005
//                 ~c[1][23] = 100.00%@0.80000001
//                 ~c[1][24] = 100.00%@0.99800003
//                 ~c[1][25] = 100.00%@0.00100000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x100, height=0x400, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x1
//         100.00% width=0xa00, height=0x640, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE pixel
//     	IPA.PASS R7, a[0x74];            # [  0][000000] POSITION_Y
//     	IPA.PASS R5, a[0x70];            # [  1][000008] POSITION_X
//     	F2I.TRUNC R1, R7;                # [  2][000010]
//     	F2I.TRUNC R0, R5;                # [  3][000018]
//     	TLD.LZ.T R0, R0, 0x1, 2D, 0x7;   # [  4][000020]
//     	MOV32I R4, -0x457ced91;          # [  5][000028]
//     	MOV32I R10, 0x3f800000;          # [  6][000030]
//     	F2F R3, |R2|;                    # [  7][000038]
//     	FFMA.FTZ R6, R3, c[0x10][0xc], R4; # [  8][000040]
//     	FMNMX.FTZ R3, R6, 10, !PT;       # [  9][000048]
//     	MUFU.RCP R3, R3;                 # [ 10][000050]
//     	FMUL.FTZ R3, R3, 10;             # [ 11][000058]
//     	FFMA.FTZ R4, R3, 11, R10;        # [ 12][000060]
//     	FFMA.FTZ R8, R4, c[0x10][0x28], R7; # [ 13][000068]
//     	FFMA.FTZ R3, R4, c[0x10][0x24], R5; # [ 14][000070]
//     	F2I.TRUNC R13, R8;               # [ 15][000078]
//     	F2I.TRUNC R12, R3;               # [ 16][000080]
//     	TLD.LZ.NODEP.T R9, R12, 0x1, 2D, 0x4; # [ 17][000088]
//     	FMUL.FTZ R11, R0, R0;            # [ 18][000090]
//     	FMUL32I.FTZ R13, R1, 0x362b2800; # [ 19][000098]
//     	FMUL32I.FTZ R17, R1, 0x3d7a8e4d; # [ 20][0000a0]
//     	FFMA.FTZ R11, R1, R1, R11;       # [ 21][0000a8]
//     	FMUL32I.FTZ R16, R1, 0x3f7f8545; # [ 22][0000b0]
//     	FFMA.FTZ R13, R0, c[0x10][0x8], R13; # [ 23][0000b8]
//     	FADD.FTZ R12, -R11, 1;           # [ 24][0000c0]
//     	FFMA.FTZ R11, R0, c[0x10][0x0], R17; # [ 25][0000c8]
//     	FFMA.FTZ R14, R5, c[0x10][0x2c], -R10; # [ 26][0000d0]
//     	MUFU.RSQ R1, R12;                # [ 27][0000d8]
//     	FFMA.FTZ R12, R0, c[0x10][0x4], R16; # [ 28][0000e0]
//     	FFMA.FTZ R20, R4, c[0x10][0x20], R5; # [ 29][0000e8]
//     	MUFU.RCP R0, R1;                 # [ 30][0000f0]
//     	FMUL32I.FTZ R1, R6, 0x3f52f537;  # [ 31][0000f8]
//     	FFMA.FTZ R15, R7, c[0x10][0x30], -R10; # [ 32][000100]
//     	F2F R17, -R0;                    # [ 33][000108]
//     	FMUL.FTZ R14, R14, R1;           # [ 34][000110]
//     	FMUL32I.FTZ R16, R6, 0x3f03d942; # [ 35][000118]
//     	FCMP.LEU.FTZ R21, R17, R0, R2;   # [ 36][000120]
//     	FFMA.FTZ R2, R3, c[0x10][0x2c], -R10; # [ 37][000128]
//     	FFMA.FTZ R17, R4, c[0x10][0x1c], R7; # [ 38][000130]
//     	FFMA.FTZ R19, R4, c[0x10][0x40], R7; # [ 39][000138]
//     	F2I.TRUNC R0, R20;               # [ 40][000140]
//     	FMUL.FTZ R15, R15, R16;          # [ 41][000148]
//     	FFMA.FTZ R16, R4, c[0x10][0x3c], R5; # [ 42][000150]
//     	F2I.TRUNC R3, R19;               # [ 43][000158]
//     	F2F R22, |R9|;                   # [ 44][000160]
//     	FMUL32I.FTZ R1, R22, 0x3f52f537; # [ 45][000168]
//     	FFMA.FTZ R18, R1, R2, -R14;      # [ 46][000170]
//     	F2I.TRUNC R1, R17;               # [ 47][000178]
//     	TLD.LZ.NODEP R0, R0, 0x1, 2D, 0x4; # [ 48][000180]
//     	F2I.TRUNC R2, R16;               # [ 49][000188]
//     	TLD.LZ.NODEP.T R1, R2, 0x1, 2D, 0x4; # [ 50][000190]
//     	FFMA.FTZ R2, R8, c[0x10][0x30], -R10; # [ 51][000198]
//     	FMUL32I.FTZ R3, R22, 0x3f03d942; # [ 52][0001a0]
//     	FFMA.FTZ R8, R21, c[0x10][0x10], R13; # [ 53][0001a8]
//     	FFMA.FTZ R22, R21, c[0x10][0x14], R12; # [ 54][0001b0]
//     	FFMA.FTZ R2, R3, R2, -R15;       # [ 55][0001b8]
//     	FMUL.FTZ R3, R8, R18;            # [ 56][0001c0]
//     	FMUL.FTZ R12, R18, R18;          # [ 57][0001c8]
//     	FADD.FTZ R9, -R6, |R9|;          # [ 58][0001d0]
//     	FFMA.FTZ R3, R22, R2, R3;        # [ 59][0001d8]
//     	FFMA.FTZ R2, R2, R2, R12;        # [ 60][0001e0]
//     	FFMA.FTZ R12, R20, c[0x10][0x2c], -R10; # [ 61][0001e8]
//     	FFMA.FTZ R17, R17, c[0x10][0x30], -R10; # [ 62][0001f0]
//     	FFMA.FTZ R20, R9, R9, R2;        # [ 63][0001f8]
//     	FFMA.FTZ R11, R21, c[0x10][0x18], R11; # [ 64][000200]
//     	FFMA.FTZ R9, R11, R9, R3;        # [ 65][000208]
//     	F2F R13, |R0|;                   # [ 66][000210]
//     	FMUL32I.FTZ R18, R13, 0x3f52f537; # [ 67][000218]
//     	FMUL32I.FTZ R13, R13, 0x3f03d942; # [ 68][000220]
//     	FFMA.FTZ R2, R12, R18, -R14;     # [ 69][000228]
//     	FFMA.FTZ R17, R17, R13, -R15;    # [ 70][000230]
//     	MUFU.RSQ R12, R20;               # [ 71][000238]
//     	FMUL.FTZ R18, R2, R2;            # [ 72][000240]
//     	FADD.FTZ R13, -R6, |R0|;         # [ 73][000248]
//     	MUFU.RCP R12, R12;               # [ 74][000250]
//     	FFMA.FTZ R0, R17, R17, R18;      # [ 75][000258]
//     	MUFU.RCP R18, R12;               # [ 76][000260]
//     	FFMA.FTZ R3, R13, R13, R0;       # [ 77][000268]
//     	FMUL.FTZ R0, R8, R2;             # [ 78][000270]
//     	FMUL.FTZ.SAT R2, R9, R18;        # [ 79][000278]
//     	MUFU.RSQ R3, R3;                 # [ 80][000280]
//     	FFMA.FTZ R9, R22, R17, R0;       # [ 81][000288]
//     	FFMA.FTZ.SAT R17, R12, -1.25, R10; # [ 82][000290]
//     	MUFU.RCP R3, R3;                 # [ 83][000298]
//     	FFMA.FTZ R9, R11, R13, R9;       # [ 84][0002a0]
//     	FMUL.FTZ R13, R2, R17;           # [ 85][0002a8]
//     	MUFU.RCP R12, R3;                # [ 86][0002b0]
//     	FFMA.FTZ.SAT R3, R3, -1.25, R10; # [ 87][0002b8]
//     	F2F R17, |R1|;                   # [ 88][0002c0]
//     	FMUL.FTZ.SAT R2, R9, R12;        # [ 89][0002c8]
//     	FFMA.FTZ R12, R16, c[0x10][0x2c], -R10; # [ 90][0002d0]
//     	FFMA.FTZ R0, R4, c[0x10][0x38], R5; # [ 91][0002d8]
//     	FFMA.FTZ R21, R2, R3, R13;       # [ 92][0002e0]
//     	FMUL32I.FTZ R3, R17, 0x3f52f537; # [ 93][0002e8]
//     	FFMA.FTZ R18, R4, c[0x10][0x34], R7; # [ 94][0002f0]
//     	FFMA.FTZ R9, R4, c[0x10][0x50], R7; # [ 95][0002f8]
//     	FFMA.FTZ R20, R3, R12, -R14;     # [ 96][000300]
//     	F2I.TRUNC R2, R0;                # [ 97][000308]
//     	F2I.TRUNC R3, R18;               # [ 98][000310]
//     	FFMA.FTZ R16, R4, c[0x10][0x4c], R5; # [ 99][000318]
//     	F2I.TRUNC R13, R9;               # [100][000320]
//     	TLD.LZ.NODEP R2, R2, 0x1, 2D, 0x4; # [101][000328]
//     	F2I.TRUNC R12, R16;              # [102][000330]
//     	TLD.LZ.NODEP.T R13, R12, 0x1, 2D, 0x4; # [103][000338]
//     	FFMA.FTZ R12, R19, c[0x10][0x30], -R10; # [104][000340]
//     	FMUL32I.FTZ R3, R17, 0x3f03d942; # [105][000348]
//     	FMUL.FTZ R17, R8, R20;           # [106][000350]
//     	FMUL.FTZ R19, R20, R20;          # [107][000358]
//     	FFMA.FTZ R12, R3, R12, -R15;     # [108][000360]
//     	FADD.FTZ R3, -R6, |R1|;          # [109][000368]
//     	FFMA.FTZ R0, R0, c[0x10][0x2c], -R10; # [110][000370]
//     	FFMA.FTZ R1, R22, R12, R17;      # [111][000378]
//     	FFMA.FTZ R17, R12, R12, R19;     # [112][000380]
//     	FFMA.FTZ R20, R4, c[0x10][0x44], R7; # [113][000388]
//     	FFMA.FTZ R1, R11, R3, R1;        # [114][000390]
//     	FFMA.FTZ R3, R3, R3, R17;        # [115][000398]
//     	FFMA.FTZ R17, R18, c[0x10][0x30], -R10; # [116][0003a0]
//     	MUFU.RSQ R18, R3;                # [117][0003a8]
//     	F2F R12, |R2|;                   # [118][0003b0]
//     	FADD.FTZ R2, -R6, |R2|;          # [119][0003b8]
//     	FMUL32I.FTZ R19, R12, 0x3f52f537; # [120][0003c0]
//     	FMUL32I.FTZ R12, R12, 0x3f03d942; # [121][0003c8]
//     	FFMA.FTZ R0, R0, R19, -R14;      # [122][0003d0]
//     	FFMA.FTZ R3, R17, R12, -R15;     # [123][0003d8]
//     	MUFU.RCP R12, R18;               # [124][0003e0]
//     	FMUL.FTZ R17, R0, R0;            # [125][0003e8]
//     	FMUL.FTZ R0, R8, R0;             # [126][0003f0]
//     	MUFU.RCP R18, R12;               # [127][0003f8]
//     	FFMA.FTZ R17, R3, R3, R17;       # [128][000400]
//     	F2F R19, |R13|;                  # [129][000408]
//     	FMUL.FTZ.SAT R1, R1, R18;        # [130][000410]
//     	FFMA.FTZ R17, R2, R2, R17;       # [131][000418]
//     	FFMA.FTZ.SAT R18, R12, -1.25, R10; # [132][000420]
//     	FFMA.FTZ R12, R22, R3, R0;       # [133][000428]
//     	MUFU.RSQ R17, R17;               # [134][000430]
//     	FFMA.FTZ R0, R1, R18, R21;       # [135][000438]
//     	FFMA.FTZ R1, R11, R2, R12;       # [136][000440]
//     	MUFU.RCP R3, R17;                # [137][000448]
//     	FFMA.FTZ R18, R4, c[0x10][0x48], R5; # [138][000450]
//     	FFMA.FTZ R12, R4, c[0x10][0x60], R7; # [139][000458]
//     	MUFU.RCP R2, R3;                 # [140][000460]
//     	FFMA.FTZ.SAT R3, R3, -1.25, R10; # [141][000468]
//     	FMUL.FTZ.SAT R1, R1, R2;         # [142][000470]
//     	FFMA.FTZ R2, R16, c[0x10][0x2c], -R10; # [143][000478]
//     	FFMA.FTZ R16, R4, c[0x10][0x5c], R5; # [144][000480]
//     	FFMA.FTZ R23, R1, R3, R0;        # [145][000488]
//     	FMUL32I.FTZ R1, R19, 0x3f52f537; # [146][000490]
//     	F2I.TRUNC R0, R18;               # [147][000498]
//     	F2I.TRUNC R3, R12;               # [148][0004a0]
//     	FFMA.FTZ R21, R1, R2, -R14;      # [149][0004a8]
//     	F2I.TRUNC R1, R20;               # [150][0004b0]
//     	TLD.LZ.NODEP R0, R0, 0x1, 2D, 0x4; # [151][0004b8]
//     	F2I.TRUNC R2, R16;               # [152][0004c0]
//     	TLD.LZ.NODEP.T R17, R2, 0x1, 2D, 0x4; # [153][0004c8]
//     	FFMA.FTZ R2, R9, c[0x10][0x30], -R10; # [154][0004d0]
//     	FMUL32I.FTZ R1, R19, 0x3f03d942; # [155][0004d8]
//     	FMUL.FTZ R3, R8, R21;            # [156][0004e0]
//     	FMUL.FTZ R9, R21, R21;           # [157][0004e8]
//     	FFMA.FTZ R1, R1, R2, -R15;       # [158][0004f0]
//     	FADD.FTZ R2, -R6, |R13|;         # [159][0004f8]
//     	FFMA.FTZ R13, R18, c[0x10][0x2c], -R10; # [160][000500]
//     	FFMA.FTZ R3, R22, R1, R3;        # [161][000508]
//     	FFMA.FTZ R9, R1, R1, R9;         # [162][000510]
//     	FFMA.FTZ R21, R4, c[0x10][0x6c], R5; # [163][000518]
//     	FFMA.FTZ R1, R11, R2, R3;        # [164][000520]
//     	FFMA.FTZ R2, R2, R2, R9;         # [165][000528]
//     	FFMA.FTZ R9, R20, c[0x10][0x30], -R10; # [166][000530]
//     	F2F R3, |R0|;                    # [167][000538]
//     	FADD.FTZ R0, -R6, |R0|;          # [168][000540]
//     	FMUL32I.FTZ R18, R3, 0x3f52f537; # [169][000548]
//     	FMUL32I.FTZ R19, R3, 0x3f03d942; # [170][000550]
//     	FFMA.FTZ R3, R13, R18, -R14;     # [171][000558]
//     	MUFU.RSQ R18, R2;                # [172][000560]
//     	FFMA.FTZ R2, R9, R19, -R15;      # [173][000568]
//     	FMUL.FTZ R13, R3, R3;            # [174][000570]
//     	MUFU.RCP R9, R18;                # [175][000578]
//     	FMUL.FTZ R3, R8, R3;             # [176][000580]
//     	FFMA.FTZ R13, R2, R2, R13;       # [177][000588]
//     	MUFU.RCP R18, R9;                # [178][000590]
//     	FFMA.FTZ R3, R22, R2, R3;        # [179][000598]
//     	FFMA.FTZ R13, R0, R0, R13;       # [180][0005a0]
//     	FMUL.FTZ.SAT R1, R1, R18;        # [181][0005a8]
//     	FFMA.FTZ.SAT R9, R9, -1.25, R10; # [182][0005b0]
//     	MUFU.RSQ R13, R13;               # [183][0005b8]
//     	FFMA.FTZ R0, R11, R0, R3;        # [184][0005c0]
//     	FFMA.FTZ R1, R1, R9, R23;        # [185][0005c8]
//     	MUFU.RCP R2, R13;                # [186][0005d0]
//     	F2F R18, |R17|;                  # [187][0005d8]
//     	FFMA.FTZ R13, R4, c[0x10][0x58], R5; # [188][0005e0]
//     	MUFU.RCP R3, R2;                 # [189][0005e8]
//     	FFMA.FTZ.SAT R9, R2, -1.25, R10; # [190][0005f0]
//     	FFMA.FTZ R2, R16, c[0x10][0x2c], -R10; # [191][0005f8]
//     	FMUL.FTZ.SAT R0, R0, R3;         # [192][000600]
//     	FFMA.FTZ R19, R4, c[0x10][0x54], R7; # [193][000608]
//     	FFMA.FTZ R23, R0, R9, R1;        # [194][000610]
//     	FMUL32I.FTZ R1, R18, 0x3f52f537; # [195][000618]
//     	FFMA.FTZ R9, R4, c[0x10][0x70], R7; # [196][000620]
//     	F2I.TRUNC R0, R13;               # [197][000628]
//     	FFMA.FTZ R20, R1, R2, -R14;      # [198][000630]
//     	F2I.TRUNC R1, R19;               # [199][000638]
//     	F2I.TRUNC R3, R9;                # [200][000640]
//     	TLD.LZ.NODEP R0, R0, 0x1, 2D, 0x4; # [201][000648]
//     	F2I.TRUNC R2, R21;               # [202][000650]
//     	TLD.LZ.NODEP.T R16, R2, 0x1, 2D, 0x4; # [203][000658]
//     	FFMA.FTZ R2, R12, c[0x10][0x30], -R10; # [204][000660]
//     	FMUL32I.FTZ R1, R18, 0x3f03d942; # [205][000668]
//     	FMUL.FTZ R12, R20, R20;          # [206][000670]
//     	FADD.FTZ R3, -R6, |R17|;         # [207][000678]
//     	FFMA.FTZ R2, R1, R2, -R15;       # [208][000680]
//     	FMUL.FTZ R1, R8, R20;            # [209][000688]
//     	FFMA.FTZ R18, R4, c[0x10][0x80], R7; # [210][000690]
//     	FFMA.FTZ R1, R22, R2, R1;        # [211][000698]
//     	FFMA.FTZ R2, R2, R2, R12;        # [212][0006a0]
//     	FFMA.FTZ R12, R13, c[0x10][0x2c], -R10; # [213][0006a8]
//     	FFMA.FTZ R1, R11, R3, R1;        # [214][0006b0]
//     	FFMA.FTZ R2, R3, R3, R2;         # [215][0006b8]
//     	FFMA.FTZ R13, R19, c[0x10][0x30], -R10; # [216][0006c0]
//     	MUFU.RSQ R2, R2;                 # [217][0006c8]
//     	MUFU.RCP R2, R2;                 # [218][0006d0]
//     	F2F R3, |R0|;                    # [219][0006d8]
//     	FADD.FTZ R0, -R6, |R0|;          # [220][0006e0]
//     	FMUL32I.FTZ R17, R3, 0x3f52f537; # [221][0006e8]
//     	FMUL32I.FTZ R3, R3, 0x3f03d942;  # [222][0006f0]
//     	F2F R20, |R16|;                  # [223][0006f8]
//     	FFMA.FTZ R12, R12, R17, -R14;    # [224][000700]
//     	FFMA.FTZ R3, R13, R3, -R15;      # [225][000708]
//     	MUFU.RCP R13, R2;                # [226][000710]
//     	FMUL.FTZ R17, R12, R12;          # [227][000718]
//     	FMUL.FTZ.SAT R1, R1, R13;        # [228][000720]
//     	FFMA.FTZ R17, R3, R3, R17;       # [229][000728]
//     	FFMA.FTZ R13, R0, R0, R17;       # [230][000730]
//     	FFMA.FTZ.SAT R17, R2, -1.25, R10; # [231][000738]
//     	FMUL.FTZ R2, R8, R12;            # [232][000740]
//     	MUFU.RSQ R12, R13;               # [233][000748]
//     	FFMA.FTZ R1, R1, R17, R23;       # [234][000750]
//     	FFMA.FTZ R2, R22, R3, R2;        # [235][000758]
//     	MUFU.RCP R3, R12;                # [236][000760]
//     	FFMA.FTZ R13, R4, c[0x10][0x68], R5; # [237][000768]
//     	FFMA.FTZ R0, R11, R0, R2;        # [238][000770]
//     	MUFU.RCP R2, R3;                 # [239][000778]
//     	FFMA.FTZ R12, R4, c[0x10][0x7c], R5; # [240][000780]
//     	FFMA.FTZ.SAT R3, R3, -1.25, R10; # [241][000788]
//     	FMUL.FTZ.SAT R0, R0, R2;         # [242][000790]
//     	FFMA.FTZ R17, R4, c[0x10][0x78], R5; # [243][000798]
//     	FFMA.FTZ R5, R4, c[0x10][0x74], R7; # [244][0007a0]
//     	FFMA.FTZ R4, R4, c[0x10][0x64], R7; # [245][0007a8]
//     	FFMA.FTZ R19, R0, R3, R1;        # [246][0007b0]
//     	FFMA.FTZ R3, R21, c[0x10][0x2c], -R10; # [247][0007b8]
//     	FMUL32I.FTZ R2, R20, 0x3f52f537; # [248][0007c0]
//     	F2I.TRUNC R0, R13;               # [249][0007c8]
//     	F2I.TRUNC R1, R4;                # [250][0007d0]
//     	FFMA.FTZ R7, R2, R3, -R14;       # [251][0007d8]
//     	F2I.TRUNC R3, R18;               # [252][0007e0]
//     	TLD.LZ.NODEP R21, R0, 0x1, 2D, 0x4; # [253][0007e8]
//     	F2I.TRUNC R2, R12;               # [254][0007f0]
//     	F2I.TRUNC R0, R17;               # [255][0007f8]
//     	TLD.LZ.NODEP R2, R2, 0x1, 2D, 0x4; # [256][000800]
//     	F2I.TRUNC R1, R5;                # [257][000808]
//     	TLD.LZ.NODEP.T R0, R0, 0x1, 2D, 0x4; # [258][000810]
//     	FFMA.FTZ R3, R9, c[0x10][0x30], -R10; # [259][000818]
//     	FMUL32I.FTZ R1, R20, 0x3f03d942; # [260][000820]
//     	FMUL.FTZ R9, R7, R7;             # [261][000828]
//     	FFMA.FTZ R12, R12, c[0x10][0x2c], -R10; # [262][000830]
//     	FFMA.FTZ R3, R1, R3, -R15;       # [263][000838]
//     	FMUL.FTZ R1, R8, R7;             # [264][000840]
//     	FADD.FTZ R7, -R6, |R16|;         # [265][000848]
//     	FFMA.FTZ R9, R3, R3, R9;         # [266][000850]
//     	FFMA.FTZ R1, R22, R3, R1;        # [267][000858]
//     	FFMA.FTZ R5, R5, c[0x10][0x30], -R10; # [268][000860]
//     	FFMA.FTZ R3, R11, R7, R1;        # [269][000868]
//     	FFMA.FTZ R7, R7, R7, R9;         # [270][000870]
//     	FFMA.FTZ R1, R13, c[0x10][0x2c], -R10; # [271][000878]
//     	MUFU.RSQ R7, R7;                 # [272][000880]
//     	MUFU.RCP R7, R7;                 # [273][000888]
//     	FFMA.FTZ.SAT R16, R7, -1.25, R10; # [274][000890]
//     	F2F R9, |R21|;                   # [275][000898]
//     	FMUL32I.FTZ R13, R9, 0x3f52f537; # [276][0008a0]
//     	FMUL32I.FTZ R9, R9, 0x3f03d942;  # [277][0008a8]
//     	FFMA.FTZ R1, R1, R13, -R14;      # [278][0008b0]
//     	FFMA.FTZ R13, R4, c[0x10][0x30], -R10; # [279][0008b8]
//     	MUFU.RCP R4, R7;                 # [280][0008c0]
//     	FADD.FTZ R7, -R6, |R21|;         # [281][0008c8]
//     	FMUL.FTZ.SAT R4, R3, R4;         # [282][0008d0]
//     	FFMA.FTZ R3, R13, R9, -R15;      # [283][0008d8]
//     	FMUL.FTZ R9, R1, R1;             # [284][0008e0]
//     	FMUL.FTZ R1, R8, R1;             # [285][0008e8]
//     	FFMA.FTZ R13, R3, R3, R9;        # [286][0008f0]
//     	FFMA.FTZ R1, R22, R3, R1;        # [287][0008f8]
//     	FFMA.FTZ R9, R4, R16, R19;       # [288][000900]
//     	FFMA.FTZ R13, R7, R7, R13;       # [289][000908]
//     	FFMA.FTZ R1, R11, R7, R1;        # [290][000910]
//     	F2F R16, |R2|;                   # [291][000918]
//     	MUFU.RSQ R13, R13;               # [292][000920]
//     	FFMA.FTZ R4, R18, c[0x10][0x30], -R10; # [293][000928]
//     	FFMA.FTZ R3, R17, c[0x10][0x2c], -R10; # [294][000930]
//     	MUFU.RCP R13, R13;               # [295][000938]
//     	FADD.FTZ R2, -R6, |R2|;          # [296][000940]
//     	MUFU.RCP R7, R13;                # [297][000948]
//     	FFMA.FTZ.SAT R13, R13, -1.25, R10; # [298][000950]
//     	FMUL.FTZ.SAT R1, R1, R7;         # [299][000958]
//     	FMUL32I.FTZ R7, R16, 0x3f52f537; # [300][000960]
//     	FFMA.FTZ R1, R1, R13, R9;        # [301][000968]
//     	FMUL32I.FTZ R9, R16, 0x3f03d942; # [302][000970]
//     	FFMA.FTZ R7, R7, R12, -R14;      # [303][000978]
//     	F2F R13, |R0|;                   # [304][000980]
//     	FFMA.FTZ R9, R9, R4, -R15;       # [305][000988]
//     	FMUL.FTZ R4, R8, R7;             # [306][000990]
//     	FMUL.FTZ R12, R7, R7;            # [307][000998]
//     	FMUL32I.FTZ R7, R13, 0x3f52f537; # [308][0009a0]
//     	FFMA.FTZ R4, R22, R9, R4;        # [309][0009a8]
//     	FFMA.FTZ R12, R9, R9, R12;       # [310][0009b0]
//     	FMUL32I.FTZ R9, R13, 0x3f03d942; # [311][0009b8]
//     	FFMA.FTZ R3, R3, R7, -R14;       # [312][0009c0]
//     	FFMA.FTZ R12, R2, R2, R12;       # [313][0009c8]
//     	FFMA.FTZ R5, R5, R9, -R15;       # [314][0009d0]
//     	FMUL.FTZ R7, R3, R3;             # [315][0009d8]
//     	FADD.FTZ R0, -R6, |R0|;          # [316][0009e0]
//     	MUFU.RSQ R9, R12;                # [317][0009e8]
//     	FFMA.FTZ R6, R5, R5, R7;         # [318][0009f0]
//     	FFMA.FTZ R7, R11, R2, R4;        # [319][0009f8]
//     	MUFU.RCP R9, R9;                 # [320][000a00]
//     	FFMA.FTZ R4, R0, R0, R6;         # [321][000a08]
//     	FMUL.FTZ R2, R8, R3;             # [322][000a10]
//     	MUFU.RCP R6, R9;                 # [323][000a18]
//     	FFMA.FTZ.SAT R8, R9, -1.25, R10; # [324][000a20]
//     	MUFU.RSQ R3, R4;                 # [325][000a28]
//     	FFMA.FTZ R2, R22, R5, R2;        # [326][000a30]
//     	FMUL.FTZ.SAT R4, R7, R6;         # [327][000a38]
//     	MUFU.RCP R3, R3;                 # [328][000a40]
//     	FFMA.FTZ R0, R11, R0, R2;        # [329][000a48]
//     	FFMA.FTZ R4, R4, R8, R1;         # [330][000a50]
//     	MUFU.RCP R2, R3;                 # [331][000a58]
//     	FFMA.FTZ.SAT R1, R3, -1.25, R10; # [332][000a60]
//     	MOV32I R3, 0x3f800000;           # [333][000a68]
//     	FMUL.FTZ.SAT R0, R0, R2;         # [334][000a70]
//     	FFMA.FTZ R0, R0, R1, R4;         # [335][000a78]
//     	FMUL32I.FTZ R0, R0, 2.2;         # [336][000a80]
//     	FFMA.FTZ R0, R0, -c[0x10][0x84], R10; # [337][000a88]
//     	MOV R1, R0;                      # [338][000a90]
//     	MOV R2, R0;                      # [339][000a98]
//     	EXIT;                            # [340][000aa0]
//     	END
//     END_SECTION
// END_SHADER
// 
