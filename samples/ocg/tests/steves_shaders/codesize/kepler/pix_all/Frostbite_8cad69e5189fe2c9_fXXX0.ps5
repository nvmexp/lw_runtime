// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x8cad69e5189fe2c9
//         FINGERPRINTER_HASH: 0x2aa8c8971bbff205
//         UCODE_HASH: 0xaa961a3c3cc5172a
//         POOL: APP
//         VERSION: 20
//         # USES: 211
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 0
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 24
//         TEXTURE_SLOTS: 8
//         SAMPLER_SLOTS: 1
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//             GENERIC01_Y          PERSPECTIVE
//             GENERIC01_Z          PERSPECTIVE
//             GENERIC02_X          PERSPECTIVE
//             GENERIC02_Y          PERSPECTIVE
//             GENERIC02_Z          PERSPECTIVE
//             GENERIC03_X          PERSPECTIVE
//             GENERIC03_Z          PERSPECTIVE
//             GENERIC04_X          PERSPECTIVE
//             GENERIC04_Y          PERSPECTIVE
//             GENERIC04_Z          PERSPECTIVE
//             GENERIC05_X          PERSPECTIVE
//             GENERIC05_Y          PERSPECTIVE
//             GENERIC05_Z          PERSPECTIVE
//             GENERIC06_X          PERSPECTIVE
//             GENERIC06_Y          PERSPECTIVE
//             GENERIC06_Z          PERSPECTIVE
//             GENERIC07_X          PERSPECTIVE
//             GENERIC07_Y          PERSPECTIVE
//             GENERIC07_Z          PERSPECTIVE
//             GENERIC07_W          PERSPECTIVE
//             GENERIC08_X          CONSTANT
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//             TARGET01_R
//             TARGET01_G
//             TARGET01_B
//             TARGET01_A
//             TARGET02_R
//             TARGET02_G
//             TARGET02_B
//             TARGET02_A
//             TARGET03_R
//             TARGET03_G
//             TARGET03_B
//             TARGET03_A
//             TARGET04_R
//             TARGET04_G
//             TARGET04_B
//             TARGET04_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_5_0
        dcl_globalflags refactoringAllowed
        dcl_constantbuffer cb2[13].xyzw, immediateIndexed
        dcl_constantbuffer cb1[24].xyzw, dynamicIndexed
        dcl_sampler s0, mode_default
        dcl_resource t0, texture2darray, (float, float, float, float)
        dcl_resource t1, texture2darray, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_resource t3, texture2d, (float, float, float, float)
        dcl_resource t4, texture2d, (float, float, float, float)
        dcl_resource t5, texture2d, (float, float, float, float)
        dcl_resource t6, texture2darray, (float, float, float, float)
        dcl_resource t7, texture2darray, (float, float, float, float)
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_input_ps v1.yz, linear
        dcl_input_ps v2.xyz, linear
        dcl_input_ps v3.xz, linear
        dcl_input_ps v4.xyz, linear
        dcl_input_ps v5.xyz, linear
        dcl_input_ps v6.xyz, linear
        dcl_input_ps v7.xyzw, linear
        dcl_input_ps v8.x, constant
        dcl_input vCoverage
        dcl_output o0.xyzw
        dcl_output o1.xyzw
        dcl_output o2.xyzw
        dcl_output o3.xyzw
        dcl_output o4.xyzw
        dcl_temps 5 
        mov r0.xy, v7.xyxx
        mov r0.w, v8.x
        mov r0.z, cb1[r0.w+8].x
        sample (texture2darray) (float,float,float,float) r0.xy, r0.xyzx, t6.xyzw, s0
        dp2 r0.z, r0.xyxx, r0.xyxx
        mad r1.xy, r0.xyxx, l(2.00000000, 2.00000000, 0.00000000, 0.00000000), l(-1.00000000, -1.00000000, 0.00000000, 0.00000000)
        add r0.x, -r0.z, l(1.00000000)
        max r0.x, r0.x, l(0.00000000)
        sqrt r1.z, r0.x
        dp3 r0.x, r1.xyzx, v4.xyzx
        dp3 r0.y, r1.xyzx, v5.xyzx
        dp3 r0.z, r1.xyzx, v6.xyzx
        dp3 r1.x, r0.xyzx, r0.xyzx
        rsq r1.x, r1.x
        mul r0.xyz, r0.xyzx, r1.xxxx
        mov r1.z, cb1[r0.w+16].x
        mov r2.z, cb1[r0.w].x
        mov r1.xy, v7.xyxx
        sample (texture2darray) (float,float,float,float) r1.xy, r1.xyzx, t7.xyzw, s0
        dp2 r0.w, r1.xyxx, r1.xyxx
        mad r1.xy, r1.xyxx, l(2.00000000, 2.00000000, 0.00000000, 0.00000000), l(-1.00000000, -1.00000000, 0.00000000, 0.00000000)
        add r0.w, -r0.w, l(1.00000000)
        max r0.w, r0.w, l(0.00000000)
        sqrt r1.z, r0.w
        dp3 r3.x, r1.xyzx, v4.xyzx
        dp3 r3.y, r1.xyzx, v5.xyzx
        dp3 r3.z, r1.xyzx, v6.xyzx
        dp3 r0.w, r3.xyzx, r3.xyzx
        rsq r0.w, r0.w
        mad r1.xyz, r3.xyzx, r0.wwww, -r0.xyzx
        mad r0.xyz, v1.zzzz, r1.xyzx, r0.xyzx
        mov o0.xyz, r0.xyzx
        mov o0.w, l(0x3f0ca8c1)
        mov r1.xy, v7.xyxx
        mov r1.z, l(0)
        sample (texture2darray) (float,float,float,float) r1.xyz, r1.xyzx, t1.xyzw, s0
        mov r2.xy, v7.xyxx
        sample (texture2darray) (float,float,float,float) r2.xyz, r2.xyzx, t0.xyzw, s0
        add r1.xyz, r1.xyzx, -r2.xyzx
        mad r1.xyz, v1.zzzz, r1.xyzx, r2.xyzx
        mul r0.w, r2.x, l(5.00000000)
        mul r0.w, r0.w, r0.w
        min r0.w, r0.w, l(1.00000000)
        mul r2.xy, v2.xzxx, l(0.01200000, 0.01200000, 0.00000000, 0.00000000)
        sample (texture2d) (float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s0
        mul r1.xyz, r1.xyzx, r1.wwww
        add r1.xyz, r1.xyzx, r1.xyzx
        sample (texture2d) (float,float,float,float) r2.xyz, v7.zwzz, t3.xyzw, s0
        mad r1.xyz, r0.wwww, r2.xyzx, r1.xyzx
        mad r2.xyz, v1.yyyy, l(0.13000000, 0.10900000, 0.06300000, 0.00000000), r1.xyzx
        mul r3.xyz, r2.xyzx, l(1.50000000, 1.50000000, 1.50000000, 0.00000000)
        mad r2.xyz, -r2.xyzx, l(1.50000000, 1.50000000, 1.50000000, 0.00000000), l(0.73000002, 0.64300001, 0.47600001, 0.00000000)
        mul r4.xy, v2.xyxx, l(-0.80000001, 0.80000001, 0.00000000, 0.00000000)
        sample (texture2d) (float,float,float,float) r0.w, r4.xyxx, t5.yzwx, s0
        mul r4.xy, v2.zyzz, l(-0.80000001, 0.80000001, 0.00000000, 0.00000000)
        sample (texture2d) (float,float,float,float) r1.w, r4.xyxx, t5.yzwx, s0
        add r4.xy, |v3.zxzz|, l(-0.50000000, -0.50000000, 0.00000000, 0.00000000)
        mad_sat r4.xy, r4.xyxx, l(5.00000000, 5.00000000, 0.00000000, 0.00000000), l(0.50000000, 0.50000000, 0.00000000, 0.00000000)
        mul r1.w, r1.w, r4.y
        mad r0.w, r0.w, r4.x, r1.w
        add r1.w, r4.y, r4.x
        add r2.w, r1.w, l(0.00100000)
        min r1.w, r1.w, l(1.00000000)
        div_sat r0.w, r0.w, r2.w
        mul r4.xy, v2.xzxx, l(-0.80000001, 0.80000001, 0.00000000, 0.00000000)
        sample (texture2d) (float,float,float,float) r2.w, r4.xyxx, t5.yzwx, s0
        add r0.w, r0.w, -r2.w
        mad r0.w, r1.w, r0.w, r2.w
        mul r4.xy, v0.xyxx, cb2[1].xyxx
        sample (texture2d) (float,float,float,float) r1.w, r4.xyxx, t4.yzwx, s0
        mul r2.w, r0.w, r1.w
        mad r0.w, -r1.w, r0.w, l(1.00000000)
        mad o1.xyz, r2.wwww, r2.xyzx, r3.xyzx
        mov o1.w, l(0x3f800000)
        add r1.w, -v1.y, l(1.00000000)
        mul r1.xyz, r1.xyzx, r1.wwww
        mul r1.xyz, r0.wwww, r1.xyzx
        add r2.xyz, -v2.xyzx, cb2[12].xyzx
        dp3 r0.w, r2.xyzx, r2.xyzx
        rsq r0.w, r0.w
        mul r2.xyz, r2.xyzx, r0.wwww
        dp3 r0.x, r0.xyzx, r2.xyzx
        add r0.x, -r0.x, l(1.00100005)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        min r0.x, r0.x, l(1.00000000)
        mad r0.x, r0.x, l(0.80000001), l(0.20000000)
        mul o2.xyz, r1.xyzx, r0.xxxx
        ieq r0.x, vCoverage.x, l(0xf)
        movc o2.w, r0.x, l(0), l(0x3f800000)
        mov o3.xyzw, l(0x3a83126f, 0x3a83126f, 0x3a83126f, 0)
        mov o4.xyzw, l(0x3a83126f, 0x3a83126f, 0x3a83126f, 0)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3e051eb8 // 0.130000
//         COP_CONST[1]: 0x3ddf3b64 // 0.109000
//         COP_CONST[2]: 0x3d810625 // 0.063000
//         COP_CONST[3]: 0x3ef3b646 // 0.476000
//         COP_CONST[4]: 0x3f249ba6 // 0.643000
//         COP_CONST[5]: 0x3f3ae148 // 0.730000
//         COP_CONST[6]: 0x3f4ccccd // 0.800000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[2][4] = 0x3a088889 // 0.000521
//         USER_CONST: c[2][5] = 0x3a72b9d6 // 0.000926
//         USER_CONST: c[2][48] = 0x3e8c174c // 0.273615
//         USER_CONST: c[2][49] = 0x3ffd9138 // 1.980994
//         USER_CONST: c[2][50] = 0xbfb0153d // -1.375648
//     END_SECTION
//     # Exelwtion Time: 150.440ms [36.463 percent]
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[2][4] = 100.00%@0.00052083
//                 ~c[2][5] = 100.00%@0.00092593
//                 ~c[2][48] = 100.00%@0.27361524
//                 ~c[2][49] = 100.00%@1.98099422
//                 ~c[2][50] = 100.00%@-1.37564814
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x400, height=0x400, mips=0xb, DXGI_FORMAT_BC1_UNORM_SRGB
//         TEXTURE_SLOT 0x1
//         100.00% width=0x800, height=0x200, mips=0xc, DXGI_FORMAT_BC1_UNORM_SRGB
//         TEXTURE_SLOT 0x2
//         100.00% width=0x100, height=0x100, mips=0x9, DXGI_FORMAT_BC1_UNORM_SRGB
//         TEXTURE_SLOT 0x3
//         100.00% width=0x400, height=0x1000, mips=0xd, DXGI_FORMAT_BC1_UNORM_SRGB
//         TEXTURE_SLOT 0x4
//         100.00% width=0x780, height=0x438, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x5
//         100.00% width=0x200, height=0x200, mips=0xa, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x6
//         100.00% width=0x400, height=0x400, mips=0xb, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x7
//         100.00% width=0x800, height=0x200, mips=0xc, DXGI_FORMAT_BC1_UNORM
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=-340282346638528860000000000000000000000.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.CONSTANT R1, a[0x100];       # [  0][000000] ATTR8
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	SHL.W R8, R1, 0x4;               # [  2][000010]
//     	MUFU.RCP R7, R0;                 # [  3][000018]
//     	LDC R1, c[0x1][R8+0x80];         # [  4][000020]
//     	IPA R6, a[0xf4], R7;             # [  5][000028] GENERIC_ATTRIBUTE_07_Y
//     	IPA R5, a[0xf0], R7;             # [  6][000030] ATTR7
//     	F2I.FTZ.U32 R0, R1;              # [  7][000038]
//     	I2I.U16.U32.SAT R4, R0;          # [  8][000040]
//     	LDC R0, c[0x1][R8+0x100];        # [  9][000048]
//     	TEX.NODEP.T R2, R4, 0x6, 0x0, ARRAY_2D, 0x3; # [ 10][000050]
//     	F2I.FTZ.U32 R0, R0;              # [ 11][000058]
//     	I2I.U16.U32.SAT R4, R0;          # [ 12][000060]
//     	TEX.NODEP.T R0, R4, 0x7, 0x0, ARRAY_2D, 0x3; # [ 13][000068]
//     	LDC R4, c[0x1][R8];              # [ 14][000070]
//     	F2I.FTZ.U32 R4, R4;              # [ 15][000078]
//     	I2I.U16.U32.SAT R4, R4;          # [ 16][000080]
//     	TEX.NODEP.T R8, R4, 0x0, 0x0, ARRAY_2D, 0x7; # [ 17][000088]
//     	F2I.FTZ.U32 R4, RZ;              # [ 18][000090]
//     	I2I.U16.U32.SAT R4, R4;          # [ 19][000098]
//     	TEX.NODEP.T R12, R4, 0x1, 0x0, ARRAY_2D, 0x7; # [ 20][0000a0]
//     	MOV32I R11, -0x40800000;         # [ 21][0000a8]
//     	IPA R18, a[0xd0], R7;            # [ 22][0000b0] ATTR5
//     	IPA R17, a[0xc0], R7;            # [ 23][0000b8] ATTR4
//     	IPA R20, a[0xe0], R7;            # [ 24][0000c0] ATTR6
//     	IPA R4, a[0xd4], R7;             # [ 25][0000c8] GENERIC_ATTRIBUTE_05_Y
//     	IPA R5, a[0xc4], R7;             # [ 26][0000d0] GENERIC_ATTRIBUTE_04_Y
//     	IPA R6, a[0xe4], R7;             # [ 27][0000d8] GENERIC_ATTRIBUTE_06_Y
//     	FMUL.FTZ R16, R2, R2;            # [ 28][0000e0]
//     	FFMA.FTZ R15, R2, 2, R11;        # [ 29][0000e8]
//     	FFMA.FTZ R2, R3, 2, R11;         # [ 30][0000f0]
//     	FFMA.FTZ R16, R3, R3, R16;       # [ 31][0000f8]
//     	FMUL.FTZ R3, R15, R18;           # [ 32][000100]
//     	FMUL.FTZ R19, R15, R17;          # [ 33][000108]
//     	FMUL.FTZ R21, R15, R20;          # [ 34][000110]
//     	FFMA.FTZ R15, R2, R4, R3;        # [ 35][000118]
//     	FADD.FTZ R16, -R16, 1;           # [ 36][000120]
//     	FFMA.FTZ R19, R2, R5, R19;       # [ 37][000128]
//     	FFMA.FTZ R2, R2, R6, R21;        # [ 38][000130]
//     	FMUL.FTZ R3, R0, R0;             # [ 39][000138]
//     	FFMA.FTZ R0, R0, 2, R11;         # [ 40][000140]
//     	FFMA.FTZ R3, R1, R1, R3;         # [ 41][000148]
//     	FFMA.FTZ R1, R1, 2, R11;         # [ 42][000150]
//     	FMUL.FTZ R18, R0, R18;           # [ 43][000158]
//     	FMUL.FTZ R17, R0, R17;           # [ 44][000160]
//     	FMUL.FTZ R0, R0, R20;            # [ 45][000168]
//     	FFMA.FTZ R4, R1, R4, R18;        # [ 46][000170]
//     	FMNMX.FTZ R20, R16, RZ, !PT;     # [ 47][000178]
//     	FADD.FTZ R18, -R3, 1;            # [ 48][000180]
//     	FFMA.FTZ R17, R1, R5, R17;       # [ 49][000188]
//     	MUFU.RSQ R21, R20;               # [ 50][000190]
//     	FMNMX.FTZ R20, R18, RZ, !PT;     # [ 51][000198]
//     	IPA R5, a[0xc8], R7;             # [ 52][0001a0] GENERIC_ATTRIBUTE_04_Z
//     	FFMA.FTZ R1, R1, R6, R0;         # [ 53][0001a8]
//     	MUFU.RSQ R0, R20;                # [ 54][0001b0]
//     	IPA R16, a[0xd8], R7;            # [ 55][0001b8] GENERIC_ATTRIBUTE_05_Z
//     	MUFU.RCP R18, R21;               # [ 56][0001c0]
//     	IPA R3, a[0xe8], R7;             # [ 57][0001c8] GENERIC_ATTRIBUTE_06_Z
//     	MUFU.RCP R0, R0;                 # [ 58][0001d0]
//     	FFMA.FTZ R6, R18, R5, R19;       # [ 59][0001d8]
//     	IPA R20, a[0xa8], R7;            # [ 60][0001e0] GENERIC_ATTRIBUTE_02_Z
//     	FFMA.FTZ R5, R0, R5, R17;        # [ 61][0001e8]
//     	FFMA.FTZ R15, R18, R16, R15;     # [ 62][0001f0]
//     	FMUL.FTZ R17, R6, R6;            # [ 63][0001f8]
//     	IPA R19, a[0xa0], R7;            # [ 64][000200] ATTR2
//     	FFMA.FTZ R4, R0, R16, R4;        # [ 65][000208]
//     	FFMA.FTZ R2, R18, R3, R2;        # [ 66][000210]
//     	FFMA.FTZ R16, R15, R15, R17;     # [ 67][000218]
//     	FMUL.FTZ R17, R5, R5;            # [ 68][000220]
//     	FFMA.FTZ R3, R0, R3, R1;         # [ 69][000228]
//     	FFMA.FTZ R16, R2, R2, R16;       # [ 70][000230]
//     	FMUL32I.FTZ R1, R20, 0.012;      # [ 71][000238]
//     	FMUL32I.FTZ R0, R19, 0.012;      # [ 72][000240]
//     	FFMA.FTZ R17, R4, R4, R17;       # [ 73][000248]
//     	MUFU.RSQ R16, R16;               # [ 74][000250]
//     	TEX.NODEP.T R21, R0, 0x2, 0x0, 2D, 0x1; # [ 75][000258]
//     	FFMA.FTZ R0, R3, R3, R17;        # [ 76][000260]
//     	FMUL.FTZ R17, R15, R16;          # [ 77][000268]
//     	FMUL.FTZ R15, R6, R16;           # [ 78][000270]
//     	MUFU.RSQ R6, R0;                 # [ 79][000278]
//     	IPA R1, a[0xfc], R7;             # [ 80][000280] GENERIC_ATTRIBUTE_07_W
//     	IPA R0, a[0xf8], R7;             # [ 81][000288] GENERIC_ATTRIBUTE_07_Z
//     	FMUL.FTZ R2, R2, R16;            # [ 82][000290]
//     	FFMA.FTZ R16, R5, R6, -R15;      # [ 83][000298]
//     	FFMA.FTZ R22, R4, R6, -R17;      # [ 84][0002a0]
//     	FFMA.FTZ R23, R3, R6, -R2;       # [ 85][0002a8]
//     	IPA R3, a[0x98], R7;             # [ 86][0002b0] GENERIC_ATTRIBUTE_01_Z
//     	IPA R18, a[0xa4], R7;            # [ 87][0002b8] GENERIC_ATTRIBUTE_02_Y
//     	TEX.NODEP.T R4, R0, 0x3, 0x0, 2D, 0x7; # [ 88][0002c0]
//     	FFMA.FTZ R1, R3, R22, R17;       # [ 89][0002c8]
//     	FFMA.FTZ R0, R3, R16, R15;       # [ 90][0002d0]
//     	FMUL32I.FTZ R17, R18, 0.8;       # [ 91][0002d8]
//     	FMUL32I.FTZ R16, R20, -0.8;      # [ 92][0002e0]
//     	FFMA.FTZ R2, R3, R23, R2;        # [ 93][0002e8]
//     	TEX.NODEP.T R22, R16, 0x5, 0x0, 2D, 0x1; # [ 94][0002f0]
//     	FMUL32I.FTZ R16, R19, -0.8;      # [ 95][0002f8]
//     	TEX.NODEP.T R23, R16, 0x5, 0x0, 2D, 0x1; # [ 96][000300]
//     	FADD.FTZ R13, R13, -R9;          # [ 97][000308]
//     	FMUL32I.FTZ R17, R20, 0.8;       # [ 98][000310]
//     	FADD.FTZ R14, R14, -R10;         # [ 99][000318]
//     	FFMA.FTZ R9, R3, R13, R9;        # [100][000320]
//     	TEX.NODEP.T R13, R16, 0x5, 0x0, 2D, 0x1; # [101][000328]
//     	FFMA.FTZ R16, R3, R14, R10;      # [102][000330]
//     	IPA.PASS R14, a[0x74];           # [103][000338] POSITION_Y
//     	IPA.PASS R10, a[0x70];           # [104][000340] POSITION_X
//     	FMUL32I.FTZ R15, R14, 0x3a72b9d6; # [105][000348]
//     	FMUL32I.FTZ R14, R10, 0x3a088889; # [106][000350]
//     	TEX.NODEP.T R10, R14, 0x4, 0x0, 2D, 0x1; # [107][000358]
//     	FADD.FTZ R12, R12, -R8;          # [108][000360]
//     	FFMA.FTZ R12, R3, R12, R8;       # [109][000368]
//     	FMUL.FTZ R3, R8, 25;             # [110][000370]
//     	FMUL.FTZ R3, R3, R8;             # [111][000378]
//     	FMNMX.FTZ R3, R3, 1, PT;         # [112][000380]
//     	FMUL.FTZ R8, R16, R21;           # [113][000388]
//     	FMUL.FTZ R9, R9, R21;            # [114][000390]
//     	FMUL.FTZ R14, R12, R21;          # [115][000398]
//     	FADD.FTZ R8, R8, R8;             # [116][0003a0]
//     	FADD.FTZ R9, R9, R9;             # [117][0003a8]
//     	FADD.FTZ R14, R14, R14;          # [118][0003b0]
//     	IPA R12, a[0xb0], R7;            # [119][0003b8] ATTR3
//     	FFMA.FTZ R8, R3, R6, R8;         # [120][0003c0]
//     	IPA R6, a[0xb8], R7;             # [121][0003c8] GENERIC_ATTRIBUTE_03_Z
//     	FFMA.FTZ R9, R3, R5, R9;         # [122][0003d0]
//     	FFMA.FTZ R16, R3, R4, R14;       # [123][0003d8]
//     	FADD32I.FTZ R3, -R19, 0x3e8c174c; # [124][0003e0]
//     	FADD.FTZ R5, |R12|, -0.5;        # [125][0003e8]
//     	MOV32I R4, 0x3f000000;           # [126][0003f0]
//     	FADD.FTZ R14, |R6|, -0.5;        # [127][0003f8]
//     	FADD32I.FTZ R6, -R18, 0x3ffd9138; # [128][000400]
//     	FMUL.FTZ R15, R3, R3;            # [129][000408]
//     	FADD32I.FTZ R12, -R20, 0xbfb0153d; # [130][000410]
//     	FFMA.FTZ.SAT R5, R5, 5, R4;      # [131][000418]
//     	FFMA.FTZ R15, R6, R6, R15;       # [132][000420]
//     	FFMA.FTZ.SAT R14, R14, 5, R4;    # [133][000428]
//     	FMUL.FTZ R17, R22, R5;           # [134][000430]
//     	FFMA.FTZ R15, R12, R12, R15;     # [135][000438]
//     	FADD.FTZ R5, R5, R14;            # [136][000440]
//     	MOV32I R4, 0x3fc00000;           # [137][000448]
//     	MUFU.RSQ R15, R15;               # [138][000450]
//     	FADD32I.FTZ R18, R5, 0.001;      # [139][000458]
//     	FMNMX.FTZ R5, R5, 1, PT;         # [140][000460]
//     	FMUL.FTZ R19, R3, R15;           # [141][000468]
//     	FMUL.FTZ R3, R6, R15;            # [142][000470]
//     	FMUL.FTZ R6, R12, R15;           # [143][000478]
//     	FMUL.FTZ R15, R0, R19;           # [144][000480]
//     	FFMA.FTZ R14, R23, R14, R17;     # [145][000488]
//     	MUFU.RCP R19, R18;               # [146][000490]
//     	IPA R18, a[0x94], R7;            # [147][000498] GENERIC_ATTRIBUTE_01_Y
//     	FFMA.FTZ R15, R1, R3, R15;       # [148][0004a0]
//     	FMUL.FTZ.SAT R14, R14, R19;      # [149][0004a8]
//     	MOV32I R17, 0x3e4ccccd;          # [150][0004b0]
//     	FFMA.FTZ R6, R2, R6, R15;        # [151][0004b8]
//     	FADD.FTZ R14, R14, -R13;         # [152][0004c0]
//     	FFMA.FTZ R15, R18, c[0x10][0x4], R9; # [153][0004c8]
//     	FADD32I.FTZ R6, -R6, 1.001;      # [154][0004d0]
//     	FFMA.FTZ R13, R5, R14, R13;      # [155][0004d8]
//     	FMUL.FTZ R5, R15, 1.5;           # [156][0004e0]
//     	FFMA.FTZ R15, R15, -R4, c[0x10][0x10]; # [157][0004e8]
//     	FFMA.FTZ R14, R18, c[0x10][0x0], R16; # [158][0004f0]
//     	PIXLD.COVMASK R12, [0x0];        # [159][0004f8]
//     	MOV32I R3, 0x3f0ca8c1;           # [160][000500]
//     	FMUL.FTZ R19, R14, 1.5;          # [161][000508]
//     	ISETP.EQ.AND P0, PT, R12, 0xf, PT; # [162][000510]
//     	MOV32I R7, 0x3f800000;           # [163][000518]
//     	FFMA.FTZ R11, R10, -R13, -R11;   # [164][000520]
//     	FMUL.FTZ R10, R13, R10;          # [165][000528]
//     	FFMA.FTZ R13, R18, c[0x10][0x8], R8; # [166][000530]
//     	FADD.FTZ R18, -R18, 1;           # [167][000538]
//     	FFMA.FTZ R5, R10, R15, R5;       # [168][000540]
//     	FFMA.FTZ R15, R14, -R4, c[0x10][0x14]; # [169][000548]
//     	FFMA.FTZ R14, R13, -R4, c[0x10][0xc]; # [170][000550]
//     	FMUL.FTZ R13, R13, 1.5;          # [171][000558]
//     	FFMA.FTZ R4, R10, R15, R19;      # [172][000560]
//     	FMUL.FTZ R19, R6, R6;            # [173][000568]
//     	FFMA.FTZ R6, R10, R14, R13;      # [174][000570]
//     	FMUL.FTZ R8, R8, R18;            # [175][000578]
//     	FMUL.FTZ R10, R19, R19;          # [176][000580]
//     	FMUL.FTZ R9, R9, R18;            # [177][000588]
//     	MOV R15, RZ;                     # [178][000590]
//     	FMNMX.FTZ R10, R10, 1, PT;       # [179][000598]
//     	FMUL.FTZ R9, R11, R9;            # [180][0005a0]
//     	MOV32I R14, 0x3a83126f;          # [181][0005a8]
//     	FFMA.FTZ R10, R10, c[0x10][0x18], R17; # [182][0005b0]
//     	FMUL.FTZ R17, R16, R18;          # [183][0005b8]
//     	FMUL.FTZ R16, R11, R8;           # [184][0005c0]
//     	FMUL.FTZ R9, R9, R10;            # [185][0005c8]
//     	FMUL.FTZ R8, R11, R17;           # [186][0005d0]
//     	MOV32I R13, 0x3a83126f;          # [187][0005d8]
//     	MOV32I R12, 0x3a83126f;          # [188][0005e0]
//     	FMUL.FTZ R8, R8, R10;            # [189][0005e8]
//     	FMUL.FTZ R10, R16, R10;          # [190][0005f0]
//     	MOV R19, RZ;                     # [191][0005f8]
//     	MOV32I R18, 0x3a83126f;          # [192][000600]
//     	MOV32I R17, 0x3a83126f;          # [193][000608]
//     	MOV32I R16, 0x3a83126f;          # [194][000610]
//     	PSET.BF.AND.AND R11, !P0, !P0, PT; # [195][000618]
//     	EXIT;                            # [196][000620]
//     	END
//     END_SECTION
// END_SHADER
// 
