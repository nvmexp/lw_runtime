// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x69d19f8f09e3580c
//         FINGERPRINTER_HASH: 0xdbf1a7990b6d97e1
//         UCODE_HASH: 0x95efc01974b36e92
//         POOL: APP
//         VERSION: 20
//         # USES: 529
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 1
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 28
//         TEXTURE_SLOTS: 10
//         SAMPLER_SLOTS: 10
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             GENERIC01_X          PERSPECTIVE
//             GENERIC01_Y          PERSPECTIVE
//             GENERIC01_W          PERSPECTIVE
//             GENERIC02_X          PERSPECTIVE
//             GENERIC02_Y          PERSPECTIVE
//             GENERIC02_Z          PERSPECTIVE
//             GENERIC03_X          PERSPECTIVE
//             GENERIC03_Y          PERSPECTIVE
//             GENERIC03_Z          PERSPECTIVE
//             GENERIC03_W          PERSPECTIVE
//             GENERIC04_X          PERSPECTIVE
//             GENERIC04_Y          PERSPECTIVE
//             GENERIC04_Z          PERSPECTIVE
//             GENERIC05_X          PERSPECTIVE
//             GENERIC05_Y          PERSPECTIVE
//             GENERIC05_Z          PERSPECTIVE
//             GENERIC05_W          PERSPECTIVE
//             GENERIC06_X          PERSPECTIVE
//             GENERIC06_Y          PERSPECTIVE
//             GENERIC06_Z          PERSPECTIVE
//             GENERIC06_W          PERSPECTIVE
//             GENERIC07_Y          PERSPECTIVE
//             GENERIC07_Z          PERSPECTIVE
//             GENERIC08_X          PERSPECTIVE
//             GENERIC08_Y          PERSPECTIVE
//             GENERIC08_Z          PERSPECTIVE
//             GENERIC08_W          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_5_0
        dcl_globalflags refactoringAllowed
        dcl_constantbuffer cb0[10].xyzw, immediateIndexed
        dcl_constantbuffer cb2[1].xyzw, immediateIndexed
        dcl_constantbuffer cb3[25].xyzw, immediateIndexed
        dcl_constantbuffer cb1[17].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s1, mode_default
        dcl_sampler s2, mode_default
        dcl_sampler s3, mode_default
        dcl_sampler s4, mode_default
        dcl_sampler s5, mode_default
        dcl_sampler s6, mode_default
        dcl_sampler s7, mode_default
        dcl_sampler s8, mode_default
        dcl_sampler s9, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_resource t3, texture2d, (float, float, float, float)
        dcl_resource t4, texture2d, (float, float, float, float)
        dcl_resource t5, texture2d, (float, float, float, float)
        dcl_resource t6, texture2d, (float, float, float, float)
        dcl_resource t7, texture2d, (float, float, float, float)
        dcl_resource t8, texture2d, (float, float, float, float)
        dcl_resource t9, texture2d, (float, float, float, float)
        dcl_input_ps v1.xyw, linear centroid
        dcl_input_ps v2.xyz, linear centroid
        dcl_input_ps v3.xyzw, linear centroid
        dcl_input_ps v4.xyz, linear centroid
        dcl_input_ps v5.xyzw, linear centroid
        dcl_input_ps v6.xyzw, linear centroid
        dcl_input_ps v7.yz, linear centroid
        dcl_input_ps v8.xyzw, linear centroid
        dcl_output o0.xyzw
        dcl_temps 7 
        mad r0.x, v3.x, cb0[2].x, cb0[2].z
        add r0.zw, -v3.yyyw, l(0.00000000, 0.00000000, 1.00000000, 1.00000000)
        mad r1.x, r0.z, cb0[2].y, cb0[2].w
        add r0.y, -r1.x, l(1.00000000)
        sample (texture2d) (float,float,float,float) r1.xy, r0.xyxx, t7.ywxz, s6
        sample (texture2d) (float,float,float,float) r2.xyzw, r0.xyxx, t1.xyzw, s3
        mad r0.x, r0.z, cb0[1].y, cb0[1].w
        mad r0.y, r0.w, cb0[3].y, cb0[3].w
        add r3.y, -r0.y, l(1.00000000)
        add r0.y, -r0.x, l(1.00000000)
        mad r0.x, v3.x, cb0[1].x, cb0[1].z
        sample (texture2d) (float,float,float,float) r0.zw, r0.xyxx, t6.xzyw, s5
        sample (texture2d) (float,float,float,float) r4.xyzw, r0.xyxx, t0.xyzw, s2
        add r0.xy, -r0.wzww, r1.yxyy
        mad r0.xy, v7.zzzz, r0.xyxx, r0.wzww
        mad r3.x, v3.z, cb0[3].x, cb0[3].z
        sample (texture2d) (float,float,float,float) r0.zw, r3.xyxx, t8.xzyw, s7
        add r0.zw, -r0.xxxy, r0.wwwz
        sample (texture2d) (float,float,float,float) r1.x, r3.xyxx, t3.yxzw, s8
        sample (texture2d) (float,float,float,float) r3.xyzw, r3.xyxx, t2.xyzw, s4
        mul r1.x, r1.x, v7.y
        mad r0.xy, r1.xxxx, r0.zwzz, r0.xyxx
        mad r0.xy, r0.xyxx, l(2.00000000, 2.00000000, 0.00000000, 0.00000000), l(-1.00000000, -1.00000000, 0.00000000, 0.00000000)
        mul r1.yzw, r0.yyyy, v6.xxyz
        mad r1.yzw, v5.xxyz, r0.xxxx, r1.yyzw
        dp2 r0.x, r0.xyxx, r0.xyxx
        add r0.x, -r0.x, l(1.00000000)
        max r0.x, r0.x, l(0.00000000)
        sqrt r0.x, r0.x
        mad r0.xyz, v2.xyzx, r0.xxxx, r1.yzwy
        dp3 r0.w, r0.xyzx, r0.xyzx
        rsq r0.w, r0.w
        mul r1.yzw, r0.wwww, r0.xxyz
        mad r0.x, r0.y, r0.w, l(0.30000001)
        mul_sat r0.x, r0.x, l(0.76923078)
        mul r0.xyz, r0.xxxx, cb1[2].xyzx
        add r5.xyz, v4.xyzx, -cb3[24].xyzx
        dp3 r0.w, r5.xyzx, r5.xyzx
        rsq r5.w, r0.w
        mad_sat r0.w, r0.w, cb1[15].z, cb1[15].w
        mul r5.xyz, r5.wwww, r5.xyzx
        dp3 r5.w, r5.xyzx, r1.yzwy
        add r6.x, r5.w, r5.w
        add r5.w, r5.w, l(1.00000000)
        max r5.w, r5.w, l(0.00000000)
        log r5.w, r5.w
        mul r5.w, r5.w, cb0[5].z
        exp r5.w, r5.w
        min r5.w, r5.w, l(1.00000000)
        mad r5.xyz, r1.yzwy, -r6.xxxx, r5.xyzx
        dp3 r1.y, r1.yzwy, cb1[0].xyzx
        dp3_sat r1.z, r5.xyzx, cb1[6].xyzx
        log r1.z, r1.z
        mul r1.z, r1.z, cb0[6].y
        exp r1.z, r1.z
        mul r5.xyz, r1.zzzz, cb1[7].xyzx
        add r2.xyzw, r2.xyzw, -r4.xyzw
        mad r2.xyzw, v7.zzzz, r2.xyzw, r4.xyzw
        add r3.xyzw, -r2.xyzw, r3.xyzw
        mad r2.xyzw, r1.xxxx, r3.xyzw, r2.xyzw
        mul r1.xzw, r2.wwww, r5.xxyz
        add r2.w, -cb0[5].x, cb0[5].y
        mad r2.w, r5.w, r2.w, cb0[5].x
        mul r2.w, r2.w, cb0[6].x
        mov r3.x, v5.w
        mov r3.y, v6.w
        sample (texture2d) (float,float,float,float) r3.xyz, r3.xyxx, t4.xyzw, s9
        add r3.y, r3.y, l(-1.00000000)
        mad r3.y, cb1[3].x, r3.y, l(1.00000000)
        mul r2.w, r2.w, r3.y
        mul r1.xzw, r1.xxzw, r2.wwww
        mul r4.xy, cb2[0].zwzz, cb1[16].xxxx
        add r5.y, -v1.y, v1.w
        mov r5.x, v1.x
        mad r4.xy, v1.wwww, r4.xyxx, r5.xyxx
        div r4.zw, r5.xxxy, v1.wwww
        sample (texture2d) (float,float,float,float) r2.w, r4.zwzz, t5.yzwx, s1
        div r4.xy, r4.xyxx, v1.wwww
        sample (texture2d) (float,float,float,float) r4.xyzw, r4.xyxx, t9.xyzw, s0
        add r3.x, r3.x, -r4.x
        mul r2.xyz, r2.xyzx, r3.zzzz
        mad r0.w, r0.w, r3.x, r4.x
        add r3.x, r0.w, l(-1.00000000)
        mad r0.w, r0.w, l(0.50000000), l(0.50000000)
        mad r3.x, cb1[1].w, r3.x, l(1.00000000)
        mul r1.xzw, r1.xxzw, r3.xxxx
        mov_sat r3.z, r1.y
        add r1.y, -r1.y, l(0.30000001)
        mul_sat r1.y, r1.y, l(0.76923078)
        mad r0.xyz, cb1[4].xyzx, r1.yyyy, r0.xyzx
        add r0.xyz, r0.xyzx, cb1[14].xyzx
        mul r5.xyz, r3.zzzz, cb1[1].xyzx
        mul r6.xyz, r4.yzwy, cb1[16].wwww
        mad r4.xyz, r4.yzwy, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), l(-1.00000000, -1.00000000, -1.00000000, 0.00000000)
        mad r3.xzw, r5.xxyz, r3.xxxx, r6.xxyz
        add r0.xyz, r0.xyzx, r3.xzwx
        eq r1.y, cb1[16].w, l(0.00000000)
        and r3.xzw, r4.xxyz, r1.yyyy
        mul r3.xzw, r0.wwww, r3.xxzw
        mad r0.xyz, r0.xyzx, r3.yyyy, r3.xzwx
        max r0.xyz, r0.xyzx, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        mad r0.xyz, r2.xyzx, r0.xyzx, r1.xzwx
        mul r0.xyz, r2.wwww, r0.xyzx
        mad r0.xyz, r0.xyzx, v8.wwww, v8.xyzx
        max o0.xyz, r0.xyzx, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        mov_sat o0.w, cb0[9].z
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3e99999a // 0.300000
//         COP_CONST[1]: 0x3a81f658 // 0.000992
//         COP_CONST[2]: 0x3f2b4c25 // 0.669131
//         COP_CONST[3]: 0xbf2efdd4 // -0.683561
//         COP_CONST[4]: 0x3f391687 // 0.723000
//         COP_CONST[5]: 0x39da740e // 0.000417
//         COP_CONST[6]: 0x39888889 // 0.000260
//         COP_CONST[7]: 0x3f6e5604 // 0.931000
//         COP_CONST[8]: 0x3efafafc // 0.490196
//         COP_CONST[9]: 0x3ebebebf // 0.372549
//         COP_CONST[10]: 0x3e64e4e6 // 0.223529
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][4] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][5] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][6] = 0x00000000 // 0.000000
//         USER_CONST: c[0][7] = 0x00000000 // 0.000000
//         USER_CONST: c[0][8] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][9] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][10] = 0x00000000 // 0.000000
//         USER_CONST: c[0][11] = 0x00000000 // 0.000000
//         USER_CONST: c[0][12] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][13] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][14] = 0x00000000 // 0.000000
//         USER_CONST: c[0][15] = 0x00000000 // 0.000000
//         USER_CONST: c[0][20] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][21] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][22] = 0x40b77dbf // 5.734100
//         USER_CONST: c[0][24] = 0x40aba787 // 5.364200
//         USER_CONST: c[0][25] = 0x41377dbf // 11.468200
//         USER_CONST: c[0][38] = 0x3f800000 // 1.000000
//         USER_CONST: c[1][0] = 0xbe9547cd // -0.291563
//         USER_CONST: c[1][1] = 0x3f2b4c25 // 0.669131
//         USER_CONST: c[1][2] = 0xbf2efdd4 // -0.683561
//         USER_CONST: c[1][4] = 0x402ba788 // 2.682100
//         USER_CONST: c[1][5] = 0x3fda1a22 // 1.703923
//         USER_CONST: c[1][6] = 0x3f2f052b // 0.683673
//         USER_CONST: c[1][7] = 0x3f6e5604 // 0.931000
//         USER_CONST: c[1][8] = 0x3f0d8d8e // 0.552941
//         USER_CONST: c[1][9] = 0x3f21a1a2 // 0.631373
//         USER_CONST: c[1][10] = 0x3f41c1c3 // 0.756863
//         USER_CONST: c[1][12] = 0x3f391687 // 0.723000
//         USER_CONST: c[1][16] = 0x3efafafc // 0.490196
//         USER_CONST: c[1][17] = 0x3ebebebf // 0.372549
//         USER_CONST: c[1][18] = 0x3e64e4e6 // 0.223529
//         USER_CONST: c[1][24] = 0xbe9547cd // -0.291563
//         USER_CONST: c[1][25] = 0x3f2b4c25 // 0.669131
//         USER_CONST: c[1][26] = 0xbf2efdd4 // -0.683561
//         USER_CONST: c[1][28] = 0x40c683d0 // 6.203590
//         USER_CONST: c[1][29] = 0x407c3b0e // 3.941104
//         USER_CONST: c[1][30] = 0x3fca6847 // 1.581307
//         USER_CONST: c[1][56] = 0x3e989899 // 0.298039
//         USER_CONST: c[1][57] = 0x3ebababb // 0.364706
//         USER_CONST: c[1][58] = 0x3f0a8a8b // 0.541176
//         USER_CONST: c[1][62] = 0x3a81f658 // 0.000992
//         USER_CONST: c[1][63] = 0xbe91ef1c // -0.285027
//         USER_CONST: c[1][64] = 0x3f000000 // 0.500000
//         USER_CONST: c[1][67] = 0x00000000 // 0.000000
//         USER_CONST: c[2][2] = 0x3a088889 // 0.000521
//         USER_CONST: c[2][3] = 0x3a5a740e // 0.000833
//         USER_CONST: c[3][96] = 0xbf9d2e63 // -1.227978
//         USER_CONST: c[3][97] = 0x3fc33edd // 1.525356
//         USER_CONST: c[3][98] = 0x4061b055 // 3.526387
//     END_SECTION
//     # Exelwtion Time: 71.758ms [3.456 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x1 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x4 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 0 "ATTR00" 32)
//         (0x8 0 4 "ATTR01" 36)
//         (0x8 0 3 "ATTR02" 40)
//         (0x8 0 4 "ATTR03" 44)
//         (0x8 0 4 "ATTR04" 48)
//         (0x8 0 4 "ATTR05" 52)
//         (0x8 0 4 "ATTR06" 56)
//         (0x8 0 4 "ATTR07" 60)
//         (0x8 0 4 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 4 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//                 indexableRanges: 10 :  (null 0 -1 254) (null 0 -2 56) (null 0 4194304 0) (null 0 -1 0) (null 0 0 0) (null 0 0 255) (null 0 0 152) (null 0 0 0) (null 0 0 1) (null 0 2013397746 0)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr (r) r4109, (r) c[0][2].x  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][2].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.x, (r) v11.x, (r) r4109, (r) r4110  //   0 SHD
//         addr (r) r9.zw, (r) -v11.yyyw, (r) constant(0.00000000, 0.00000000, 1.00000000, 1.00000000)  //   0 SHD
//         movr (r) r4109, (r) c[0][2].y  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][2].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 83493376 SHD
//         madr (r) r10.x, (r) r9.z, (r) r4109, (r) r4110  // 83493376 SHD
//         addr (r) r9.y, (r) -r10.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 83493376 SHD
//         txgr (r) r4105, (r) r9.xyxx, (r) r4106, #7, #6, 2D, AUTO  //   0 SHD
//         movr (r) r10.xy, (r) r4105.ywxz  //   0 SHD
//         txgr (r) r4105, (r) r9.xyxx, (r) r4106, #1, #3, 2D, AUTO  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[0][1].y  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][1].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.x, (r) r9.z, (r) r4109, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[0][3].y  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][3].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.y, (r) r9.w, (r) r4109, (r) r4110  //   0 SHD
//         addr (r) r12.y, (r) -r9.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         addr (r) r9.y, (r) -r9.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[0][1].x  //   8 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 83563224 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][1].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         madr (r) r9.x, (r) v11.x, (r) r4109, (r) r4110  //   2 
//         txgr (r) r4105, (r) r9.xyxx, (r) r4106, #6, #5, 2D, AUTO  //   8 SHD
//         movr (r) r9.zw, (r) r4105.xzyw  // 83561368 SHD
//         txgr (r) r4105, (r) r9.xyxx, (r) r4106, #0, #2, 2D, AUTO  // 83561368 SHD
//         movr (r) r13, (r) r4105  //   0 SHD
//         addr (r) r9.xy, (r) -r9.wzww, (r) r10.yxyy  //   2 
//         madr (r) r9.xy, (r) v15.z, (r) r9.xyxx, (r) r9.wzww  //   2 
//         movr (r) r4109, (r) c[0][3].x  //  14 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 83559512 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 83559512 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB0
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4110, (r) c[0][3].z  //   0 
//         movr (r) r4110.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHD
//         movr (r) r4110.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12.x, (r) v11.z, (r) r4109, (r) r4110  //   0 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) r4106, #8, #7, 2D, AUTO  //   0 SHD
//         movr (r) r9.zw, (r) r4105.xzyw  //   0 SHD
//         addr (r) r9.zw, (r) -r9.xxxy, (r) r9.wwwz  //   0 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) r4106, #3, #8, 2D, AUTO  //   0 SHD
//         movr (r) r10.x, (r) r4105.yxzw  //  66 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) r4106, #2, #4, 2D, AUTO  //  44 SHD
//         movr (r) r12, (r) r4105  //   0 SHD
//         mulr (r) r10.x, (r) r10.x, (r) v15.y  //   0 SHD
//         madr (r) r9.xy, (r) r10.x, (r) r9.zwzz, (r) r9.xyxx  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(3212836864, 3212836864, 0, 0)  //   2 
//         madr (r) r9.xy, (r) r9.xyxx, (r) constant(2.00000000, 2.00000000, 0.00000000, 0.00000000), (r) r4105  //   2 
//         mulr (r) r10.yzw, (r) r9.y, (r) v14.xxyz  //   2 SHD
//         madr (r) r10.yzw, (r) v13.xxyz, (r) r9.x, (r) r10.yyzw  //   0 SHD
//         dp2r (r) r9.x, (r) r9.xyxx, (r) r9.xyxx  //   0 SHD
//         addr (r) r9.x, (r) -r9.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r9.x, (r) r9.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         rsqr (r) r4106.x, (r) r9.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r9.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r9.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r9.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   2 
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r9.x, (r) r4107  //   2 SHD
//         madr (r) r9.xyz, (r) v10.xyzx, (r) r9.x, (r) r10.yzwy  //   0 SHD
//         dp3r (r) r9.w, (r) r9.xyzx, (r) r9.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r9.w  //   0 SHD
//         movr (r) r9.w, (r) r4105  // 160 SHD
//         mulr (r) r10.yzw, (r) r9.w, (r) r9.xxyz  //   0 SHD
//         madr (r) r9.x, (r) r9.y, (r) r9.w, (r) constant(0.30000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r9.x, (r) r9.x, (r) constant(0.76923078, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[1][2].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.55294120, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.63137257, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.75686282, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.55294120, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r9.xyz, (r) r9.x, (r) r4109  // 141 SHD
//         movr (r) r4109, (r) -c[3][24].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) -constant(-1.22797811, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) -constant(1.52535594, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(3.52638745, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(-1.22797811, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r14.xyz, (r) v12.xyzx, (r) r4109  //   0 SHD
//         dp3r (r) r9.w, (r) r14.xyzx, (r) r14.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r9.w  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[1][15].z  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00099153, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4109.y, (r) constant(0.00099153, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4109.z, (r) constant(0.00099153, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHD
//         movr (r) r4109.w, (r) constant(0.00099153, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[1][15].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.28502738, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.28502738, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.28502738, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.28502738, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr_sat (r) r9.w, (r) r9.w, (r) r4109, (r) r4110  //   0 SHD
//         mulr (r) r14.xyz, (r) r14.w, (r) r14.xyzx  //   1 SHD
//         dp3r (r) r14.w, (r) r14.xyzx, (r) r10.yzwy  //   2 
//         addr (r) r15.x, (r) r14.w, (r) r14.w  //   2 
//         addr (r) r14.w, (r) r14.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r14.w, (r) r14.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         lg2r (r) r4105.w, (r) r14.w  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[0][5].z  //   0 SHD
//         movr (r) r4109.x, (r) constant(5.73409986, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHD
//         movr (r) r4109.y, (r) constant(5.73409986, 0.00000000, 0.00000000, 0.00000000).x  // 83799440 SHD
//         movr (r) r4109.z, (r) constant(5.73409986, 0.00000000, 0.00000000, 0.00000000).x  // 83799440 SHD
//         movr (r) r4109.w, (r) constant(5.73409986, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.w, (r) r14.w, (r) r4109  //   0 SHD
//         ex2r (r) r4105.w, (r) r14.w  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         minr (r) r14.w, (r) r14.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r14.xyz, (r) r10.yzwy, (r) -r15.x, (r) r14.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[1][0].xyzx  //   7 SHD
//         movr (r) r4109.x, (r) constant(-0.29156342, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.66913062, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.68356061, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.29156342, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r10.y, (r) r10.yzwy, (r) r4109  //   0 SHD
//         movr (r) r4109, (r) c[1][6].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.29156342, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.66913062, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.68356061, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.29156342, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r_sat (r) r10.z, (r) r14.xyzx, (r) r4109  //   0 SHD
//         lg2r (r) r4105.z, (r) r10.z  //   0 SHD
//         movr (r) r10.z, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[0][6].y  //   0 SHD
//         movr (r) r4109.x, (r) constant(11.46819973, 0.00000000, 0.00000000, 0.00000000).x  //  10 FPB1
//         movr (r) r4109.y, (r) constant(11.46819973, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(11.46819973, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(11.46819973, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r10.z, (r) r10.z, (r) r4109  //   0 SHD
//         ex2r (r) r4105.z, (r) r10.z  //   1 SHD
//         movr (r) r10.z, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[1][7].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(6.20359039, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(3.94110441, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.58130729, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(6.20359039, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.xyz, (r) r10.z, (r) r4109  //   0 SHD
//         addr (r) r11, (r) r11, (r) -r13  //   0 SHD
//         madr (r) r11, (r) v15.z, (r) r11, (r) r13  //   0 SHD
//         addr (r) r12, (r) -r11, (r) r12  //   0 SHD
//         madr (r) r11, (r) r10.x, (r) r12, (r) r11  //   0 SHD
//         mulr (r) r10.xzw, (r) r11.w, (r) r14.xxyz  //   0 SHD
//         movr (r) r4108, (r) -c[0][5].x  //   2 
//         movr (r) r4108.x, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB0
//         movr (r) r4108.y, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[0][5].y  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r11.w, (r) r4108, (r) r4109  //   0 SHD
//         movr (r) r4110, (r) c[0][5].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r11.w, (r) r14.w, (r) r11.w, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[0][6].x  //   0 SHD
//         movr (r) r4109.x, (r) constant(5.36420012, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(5.36420012, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(5.36420012, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(5.36420012, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.w, (r) r11.w, (r) r4109  //   0 SHD
//         movu32 (u32) r12.x, (u32) v13.w  //   0 SHD
//         movu32 (u32) r12.y, (u32) v14.w  // 73466048 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) r4106, #4, #9, 2D, AUTO  // 73466048 SHD
//         movr (r) r12.xyz, (r) r4105  // 73466048 SHD
//         addr (r) r12.y, (r) r12.y, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108, (r) c[1][3].x  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.72299999, 0.00000000, 0.00000000, 0.00000000).x  // 1179654 SHD
//         movr (r) r4108.y, (r) constant(0.72299999, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(0.72299999, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.72299999, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12.y, (r) r4108, (r) r12.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.w, (r) r11.w, (r) r12.y  //   0 SHD
//         mulr (r) r10.xzw, (r) r10.xxzw, (r) r11.w  //   0 SHD
//         movr (r) r4108, (r) c[2][0].zwzz  // 83541928 SHD
//         movr (r) r4108.x, (r) constant(0.00052083, 0.00000000, 0.00000000, 0.00000000).x  // 83541928 SHD
//         movr (r) r4108.y, (r) constant(0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 83541928 SHD
//         movr (r) r4108.z, (r) constant(0.00052083, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.00052083, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[1][16].x  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xy, (r) r4108, (r) r4109  // 1179653 SHD
//         addr (r) r14.y, (r) -v9.y, (r) v9.w  // 1179653 SHD
//         movu32 (u32) r14.x, (u32) v9.x  //   0 SHD
//         madr (r) r13.xy, (r) v9.w, (r) r13.xyxx, (r) r14.xyxx  //   0 SHD
//         divr (r) r4105.z, (r) r14.x, (r) v9.w  //   0 SHD
//         divr (r) r4105.w, (r) r14.y, (r) v9.w  //   0 SHD
//         movr (r) r13.zw, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r13.zwzz, (r) r4106, #5, #1, 2D, AUTO  //   0 SHD
//         movr (r) r11.w, (r) r4105.yzwx  //   0 SHD
//         divr (r) r4105.x, (r) r13.x, (r) v9.w  //   0 SHD
//         divr (r) r4105.y, (r) r13.y, (r) v9.w  //   0 SHD
//         movr (r) r13.xy, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r13.xyxx, (r) r4106, #9, #0, 2D, AUTO  //   0 SHD
//         movr (r) r13, (r) r4105  //   0 SHD
//         addr (r) r12.x, (r) r12.x, (r) -r13.x  //   0 SHD
//         mulr (r) r11.xyz, (r) r11.xyzx, (r) r12.z  //   0 SHD
//         madr (r) r9.w, (r) r9.w, (r) r12.x, (r) r13.x  //   0 SHD
//         addr (r) r12.x, (r) r9.w, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1056964608, 0, 0, 0).x  //   1 SHD
//         madr (r) r9.w, (r) r9.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         movr (r) r4108, (r) c[1][1].w  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.93099999, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.93099999, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(0.93099999, 0.00000000, 0.00000000, 0.00000000).x  // 65666 FPB0
//         movr (r) r4108.w, (r) constant(0.93099999, 0.00000000, 0.00000000, 0.00000000).x  // 65666 FPB0
//         madr (r) r12.x, (r) r4108, (r) r12.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         mulr (r) r10.xzw, (r) r10.xxzw, (r) r12.x  // 65601 
//         movr_sat (r) r12.z, (r) r10.y  // 65601 
//         addr (r) r10.y, (r) -r10.y, (r) constant(0.30000001, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         mulr_sat (r) r10.y, (r) r10.y, (r) constant(0.76923078, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         movr (r) r4108, (r) c[1][4].xyzx  // 65601 
//         movr (r) r4108.x, (r) constant(0.49019611, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         movr (r) r4108.y, (r) constant(0.37254903, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         movr (r) r4108.z, (r) constant(0.22352943, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         movr (r) r4108.w, (r) constant(0.49019611, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         madr (r) r9.xyz, (r) r4108, (r) r10.y, (r) r9.xyzx  // 65601 
//         movr (r) r4109, (r) c[1][14].xyzx  // 65601 
//         movr (r) r4109.x, (r) constant(0.29803923, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         movr (r) r4109.y, (r) constant(0.36470589, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         movr (r) r4109.z, (r) constant(0.54117650, 0.00000000, 0.00000000, 0.00000000).x  // 65601 
//         movr (r) r4109.w, (r) constant(0.29803923, 0.00000000, 0.00000000, 0.00000000).x  // 488 SHD
//         addr (r) r9.xyz, (r) r9.xyzx, (r) r4109  // 488 SHD
//         movr (r) r4109, (r) c[1][1].xyzx  // 488 SHD
//         movr (r) r4109.x, (r) constant(2.68210030, 0.00000000, 0.00000000, 0.00000000).x  // 488 SHD
//         movr (r) r4109.y, (r) constant(1.70392251, 0.00000000, 0.00000000, 0.00000000).x  // 488 SHD
//         movr (r) r4109.z, (r) constant(0.68367261, 0.00000000, 0.00000000, 0.00000000).x  // 488 SHD
//         movr (r) r4109.w, (r) constant(2.68210030, 0.00000000, 0.00000000, 0.00000000).x  // 488 SHD
//         mulr (r) r14.xyz, (r) r12.z, (r) r4109  // 488 SHD
//         movr (r) r4109, (r) c[1][16].w  // 488 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r15.xyz, (r) r13.yzwy, (r) r4109  //   1 SHDOPT
//         movu32 (u32) r4105, (u32) constant(3212836864, 3212836864, 3212836864, 0)  //   0 SHDOPT
//         madr (r) r13.xyz, (r) r13.yzwy, (r) constant(2.00000000, 2.00000000, 2.00000000, 0.00000000), (r) r4105  //   0 SHD
//         madr (r) r12.xzw, (r) r14.xxyz, (r) r12.x, (r) r15.xxyz  //   0 SHD
//         addr (r) r9.xyz, (r) r9.xyzx, (r) r12.xzwx  //   0 SHD
//         movr (r) r4108, (r) c[1][16].w  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         set_eqr.c (s32) r10.y, (r) r4108, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         andu32 (u32) r12.xzw, (u32) r13.xxyz, (u32) r10.y  //   0 SHD
//         mulr (r) r12.xzw, (r) r9.w, (r) r12.xxzw  //   0 SHD
//         madr (r) r9.xyz, (r) r9.xyzx, (r) r12.y, (r) r12.xzwx  //   0 SHD
//         maxr (r) r9.xyz, (r) r9.xyzx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)  //   0 SHD
//         madr (r) r9.xyz, (r) r11.xyzx, (r) r9.xyzx, (r) r10.xzwx  //   0 SHD
//         mulr (r) r9.xyz, (r) r11.w, (r) r9.xyzx  //   0 SHD
//         madr (r) r9.xyz, (r) r9.xyzx, (r) v16.w, (r) v16.xyzx  //   0 SHD
//         maxr (r) r0.xyz, (r) r9.xyzx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)  //   0 SHD
//         movr (r) r4108, (r) c[0][9].z  //   0 SHD
//         movr (r) r4108.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4108.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4108.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr_sat (r) r0.w, (r) r4108  //   0 SHD
//         ret   //   0 SHD
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][4] = 100.00%@1.00000000
//                 ~c[0][5] = 100.00%@1.00000000
//                 ~c[0][6] = 100.00%@0.00000000
//                 ~c[0][7] = 100.00%@0.00000000
//                 ~c[0][8] = 100.00%@1.00000000
//                 ~c[0][9] = 100.00%@1.00000000
//                 ~c[0][10] = 100.00%@0.00000000
//                 ~c[0][11] = 100.00%@0.00000000
//                 ~c[0][12] = 100.00%@1.00000000
//                 ~c[0][13] = 100.00%@1.00000000
//                 ~c[0][14] = 100.00%@0.00000000
//                 ~c[0][15] = 100.00%@0.00000000
//                 ~c[0][20] = 100.00%@1.00000000
//                 ~c[0][21] = 100.00%@1.00000000
//                 ~c[0][22] = 100.00%@5.73409986
//                 ~c[0][24] = 100.00%@5.36420012
//                 ~c[0][25] = 100.00%@11.46819973
//                 ~c[0][38] = 100.00%@1.00000000
//                 ~c[1][0] = 100.00%@-0.29156342
//                 ~c[1][1] = 100.00%@0.66913062
//                 ~c[1][2] = 100.00%@-0.68356061
//                 ~c[1][4] = 100.00%@2.68210030
//                 ~c[1][5] = 100.00%@1.70392251
//                 ~c[1][6] = 100.00%@0.68367261
//                 ~c[1][7] = 100.00%@0.93099999
//                 ~c[1][8] = 100.00%@0.55294120
//                 ~c[1][9] = 100.00%@0.63137257
//                 ~c[1][10] = 100.00%@0.75686282
//                 ~c[1][12] = 100.00%@0.72299999
//                 ~c[1][16] = 100.00%@0.49019611
//                 ~c[1][17] = 100.00%@0.37254903
//                 ~c[1][18] = 100.00%@0.22352943
//                 ~c[1][24] = 100.00%@-0.29156342
//                 ~c[1][25] = 100.00%@0.66913062
//                 ~c[1][26] = 100.00%@-0.68356061
//                 ~c[1][28] = 100.00%@6.20359039
//                 ~c[1][29] = 100.00%@3.94110441
//                 ~c[1][30] = 100.00%@1.58130729
//                 ~c[1][56] = 100.00%@0.29803923
//                 ~c[1][57] = 100.00%@0.36470589
//                 ~c[1][58] = 100.00%@0.54117650
//                 ~c[1][62] = 100.00%@0.00099153
//                 ~c[1][63] = 100.00%@-0.28502738
//                 ~c[1][64] = 100.00%@0.50000000
//                 ~c[1][67] = 100.00%@0.00000000
//                 ~c[2][2] = 100.00%@0.00052083
//                 ~c[2][3] = 100.00%@0.00083333
//                 ~c[3][96] = 100.00%@-1.22797811
//                 ~c[3][97] = 100.00%@1.52535594
//                 ~c[3][98] = 100.00%@3.52638745
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         50.24% width=0x200, height=0x400, mips=0x8, DXGI_FORMAT_BC3_UNORM
//         49.76% width=0x200, height=0x200, mips=0x8, DXGI_FORMAT_BC3_UNORM
//         TEXTURE_SLOT 0x1
//         50.24% width=0x200, height=0x400, mips=0x8, DXGI_FORMAT_BC3_UNORM
//         49.76% width=0x200, height=0x200, mips=0x8, DXGI_FORMAT_BC3_UNORM
//         TEXTURE_SLOT 0x2
//         100.00% width=0x80, height=0x80, mips=0x6, DXGI_FORMAT_BC3_UNORM
//         TEXTURE_SLOT 0x3
//         100.00% width=0x80, height=0x80, mips=0x6, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x4
//         100.00% width=0x400, height=0x400, mips=0x9, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x5
//         100.00% width=0x3c0, height=0x258, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x6
//         50.24% width=0x80, height=0x80, mips=0x6, DXGI_FORMAT_BC3_UNORM
//         49.76% width=0x200, height=0x200, mips=0x8, DXGI_FORMAT_BC3_UNORM
//         TEXTURE_SLOT 0x7
//         50.24% width=0x80, height=0x80, mips=0x6, DXGI_FORMAT_BC3_UNORM
//         49.76% width=0x200, height=0x200, mips=0x8, DXGI_FORMAT_BC3_UNORM
//         TEXTURE_SLOT 0x8
//         100.00% width=0x80, height=0x80, mips=0x6, DXGI_FORMAT_BC3_UNORM
//         TEXTURE_SLOT 0x9
//         100.00% width=0x780, height=0x4b0, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Linear, mag=Linear, mip=Point aniso=1, minLOD=0.000000, maxLOD=1.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=WRAP
//         SAMPLER_SLOT 0x1
//         100.00%  min=Linear, mag=Linear, mip=Point aniso=1, minLOD=0.000000, maxLOD=1.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=WRAP
//         SAMPLER_SLOT 0x2
//         50.24%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=8.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         49.76%  min=Anisotropic, mag=Linear, mip=Linear aniso=6, minLOD=0.000000, maxLOD=8.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x3
//         50.24%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=8.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         49.76%  min=Anisotropic, mag=Linear, mip=Linear aniso=6, minLOD=0.000000, maxLOD=8.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x4
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=6.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x5
//         50.24%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=6.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         49.76%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=8.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x6
//         50.24%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=6.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         49.76%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=8.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x7
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=6.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x8
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=6.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x9
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=9.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R15, -0x40800000;         # [  0][000000]
//     	IPA.PASS.CENTROID R0, a[0x7c];   # [  1][000008] POSITION_W
//     	MUFU.RCP R14, R0;                # [  2][000010]
//     	IPA.CENTROID R0, a[0xb0], R14;   # [  3][000018] ATTR3
//     	IPA.CENTROID R1, a[0xb4], R14;   # [  4][000020] GENERIC_ATTRIBUTE_03_Y
//     	IPA.CENTROID R18, a[0xb8], R14;  # [  5][000028] GENERIC_ATTRIBUTE_03_Z
//     	TEX.NODEP.T R12, R0, 0x7, 0x6, 2D, 0xa; # [  6][000030]
//     	IPA.CENTROID R16, a[0xbc], R14;  # [  7][000038] GENERIC_ATTRIBUTE_03_W
//     	MOV R2, R18;                     # [  8][000040]
//     	TEX.NODEP.T R10, R0, 0x6, 0x5, 2D, 0xa; # [  9][000048]
//     	MOV R3, R16;                     # [ 10][000050]
//     	IPA.CENTROID R27, a[0xf8], R14;  # [ 11][000058] GENERIC_ATTRIBUTE_07_Z
//     	TEX.NODEP.T R17, R2, 0x3, 0x8, 2D, 0x2; # [ 12][000060]
//     	TEX.NODEP.T R8, R2, 0x8, 0x7, 2D, 0xa; # [ 13][000068]
//     	TEX.NODEP.T R4, R0, 0x1, 0x3, 2D; # [ 14][000070]
//     	TEX.NODEP.P R0, R0, 0x0, 0x2, 2D; # [ 15][000078]
//     	IPA.CENTROID R19, a[0xf4], R14;  # [ 16][000080] GENERIC_ATTRIBUTE_07_Y
//     	IPA.CENTROID R20, a[0xd4], R14;  # [ 17][000088] GENERIC_ATTRIBUTE_05_Y
//     	FADD.FTZ R13, -R11, R13;         # [ 18][000090]
//     	FADD.FTZ R12, -R10, R12;         # [ 19][000098]
//     	FFMA.FTZ R11, R27, R13, R11;     # [ 20][0000a0]
//     	FFMA.FTZ R12, R27, R12, R10;     # [ 21][0000a8]
//     	FMUL.FTZ R17, R17, R19;          # [ 22][0000b0]
//     	FADD.FTZ R9, -R11, R9;           # [ 23][0000b8]
//     	FADD.FTZ R13, -R12, R8;          # [ 24][0000c0]
//     	IPA.CENTROID R10, a[0xe8], R14;  # [ 25][0000c8] GENERIC_ATTRIBUTE_06_Z
//     	FFMA.FTZ R8, R17, R9, R11;       # [ 26][0000d0]
//     	FFMA.FTZ R11, R17, R13, R12;     # [ 27][0000d8]
//     	FFMA.FTZ R19, R8, 2, R15;        # [ 28][0000e0]
//     	FFMA.FTZ R11, R11, 2, R15;       # [ 29][0000e8]
//     	IPA.CENTROID R13, a[0xe4], R14;  # [ 30][0000f0] GENERIC_ATTRIBUTE_06_Y
//     	FMUL.FTZ R8, R19, R19;           # [ 31][0000f8]
//     	FFMA.FTZ R21, R11, -R11, -R8;    # [ 32][000100]
//     	IPA.CENTROID R12, a[0xe0], R14;  # [ 33][000108] ATTR6
//     	FMUL.FTZ R22, R11, R10;          # [ 34][000110]
//     	IPA.CENTROID R9, a[0xd8], R14;   # [ 35][000118] GENERIC_ATTRIBUTE_05_Z
//     	FADD.FTZ R10, R21, 1;            # [ 36][000120]
//     	IPA.CENTROID R8, a[0xd0], R14;   # [ 37][000128] ATTR5
//     	FMUL.FTZ R21, R11, R13;          # [ 38][000130]
//     	FMUL.FTZ R12, R11, R12;          # [ 39][000138]
//     	FMNMX.FTZ R11, R10, RZ, !PT;     # [ 40][000140]
//     	FFMA.FTZ R13, R9, R19, R22;      # [ 41][000148]
//     	MUFU.RSQ R9, R11;                # [ 42][000150]
//     	FFMA.FTZ R22, R8, R19, R12;      # [ 43][000158]
//     	FFMA.FTZ R21, R20, R19, R21;     # [ 44][000160]
//     	IPA.CENTROID R11, a[0xc0], R14;  # [ 45][000168] ATTR4
//     	MUFU.RCP R9, R9;                 # [ 46][000170]
//     	IPA.CENTROID R10, a[0xa0], R14;  # [ 47][000178] ATTR2
//     	FADD32I.FTZ R11, R11, 0x3f9d2e63; # [ 48][000180]
//     	IPA.CENTROID R8, a[0xa4], R14;   # [ 49][000188] GENERIC_ATTRIBUTE_02_Y
//     	FFMA.FTZ R10, R10, R9, R22;      # [ 50][000190]
//     	IPA.CENTROID R12, a[0xc4], R14;  # [ 51][000198] GENERIC_ATTRIBUTE_04_Y
//     	FFMA.FTZ R23, R8, R9, R21;       # [ 52][0001a0]
//     	IPA.CENTROID R20, a[0xc8], R14;  # [ 53][0001a8] GENERIC_ATTRIBUTE_04_Z
//     	FMUL.FTZ R21, R11, R11;          # [ 54][0001b0]
//     	IPA.CENTROID R19, a[0xa8], R14;  # [ 55][0001b8] GENERIC_ATTRIBUTE_02_Z
//     	FADD32I.FTZ R12, R12, 0xbfc33edd; # [ 56][0001c0]
//     	FADD32I.FTZ R8, R20, 0xc061b055; # [ 57][0001c8]
//     	FMUL.FTZ R20, R10, R10;          # [ 58][0001d0]
//     	FFMA.FTZ R9, R19, R9, R13;       # [ 59][0001d8]
//     	FFMA.FTZ R21, R12, R12, R21;     # [ 60][0001e0]
//     	FFMA.FTZ R13, R23, R23, R20;     # [ 61][0001e8]
//     	FFMA.FTZ R19, R8, R8, R21;       # [ 62][0001f0]
//     	FFMA.FTZ R20, R9, R9, R13;       # [ 63][0001f8]
//     	MUFU.RSQ R13, R19;               # [ 64][000200]
//     	MUFU.RSQ R24, R20;               # [ 65][000208]
//     	FMUL.FTZ R21, R13, R12;          # [ 66][000210]
//     	FMUL.FTZ R22, R13, R11;          # [ 67][000218]
//     	FMUL.FTZ R12, R24, R10;          # [ 68][000220]
//     	FMUL.FTZ R20, R24, R23;          # [ 69][000228]
//     	FMUL.FTZ R25, R13, R8;           # [ 70][000230]
//     	FMUL.FTZ R10, R22, R12;          # [ 71][000238]
//     	FMUL.FTZ R13, R24, R9;           # [ 72][000240]
//     	MOV R8, R18;                     # [ 73][000248]
//     	FFMA.FTZ R10, R21, R20, R10;     # [ 74][000250]
//     	MOV R9, R16;                     # [ 75][000258]
//     	FFMA.FTZ R18, R25, R13, R10;     # [ 76][000260]
//     	FFMA.FTZ R16, R23, R24, c[0x10][0x0]; # [ 77][000268]
//     	FADD.FTZ R5, R5, -R1;            # [ 78][000270]
//     	TEX.NODEP.P R8, R8, 0x2, 0x4, 2D; # [ 79][000278]
//     	FADD.FTZ R26, R18, R18;          # [ 80][000280]
//     	FADD.FTZ R6, R6, -R2;            # [ 81][000288]
//     	FFMA.FTZ R23, R12, -R26, R22;    # [ 82][000290]
//     	FFMA.FTZ R21, R20, -R26, R21;    # [ 83][000298]
//     	FMUL32I.FTZ R12, R12, 0xbe9547cd; # [ 84][0002a0]
//     	FFMA.FTZ R22, R27, R5, R1;       # [ 85][0002a8]
//     	FADD.FTZ R1, R4, -R0;            # [ 86][0002b0]
//     	FFMA.FTZ R12, R20, c[0x10][0x8], R12; # [ 87][0002b8]
//     	MOV32I R20, -0x416e10e4;         # [ 88][0002c0]
//     	IPA.CENTROID R4, a[0xdc], R14;   # [ 89][0002c8] GENERIC_ATTRIBUTE_05_W
//     	FFMA.FTZ R24, R27, R1, R0;       # [ 90][0002d0]
//     	IPA.CENTROID R5, a[0xec], R14;   # [ 91][0002d8] GENERIC_ATTRIBUTE_06_W
//     	FADD.FTZ R0, R7, -R3;            # [ 92][0002e0]
//     	FFMA.FTZ.SAT R19, R19, c[0x10][0x4], R20; # [ 93][0002e8]
//     	FFMA.FTZ R20, R27, R6, R2;       # [ 94][0002f0]
//     	IPA.CENTROID R7, a[0x9c], R14;   # [ 95][0002f8] GENERIC_ATTRIBUTE_01_W
//     	FFMA.FTZ R3, R27, R0, R3;        # [ 96][000300]
//     	IPA.CENTROID R6, a[0x94], R14;   # [ 97][000308] GENERIC_ATTRIBUTE_01_Y
//     	FFMA.FTZ R25, R13, -R26, R25;    # [ 98][000310]
//     	IPA.CENTROID R27, a[0x90], R14;  # [ 99][000318] ATTR1
//     	TEX.NODEP.T R0, R4, 0x4, 0x9, 2D, 0x7; # [100][000320]
//     	MUFU.RCP R5, R7;                 # [101][000328]
//     	FFMA.FTZ R26, R13, c[0x10][0xc], R12; # [102][000330]
//     	FADD.FTZ R4, -R6, R7;            # [103][000338]
//     	FFMA.FTZ R6, R7, c[0x10][0x18], R27; # [104][000340]
//     	FMUL.FTZ R13, R4, R5;            # [105][000348]
//     	FFMA.FTZ R7, R7, c[0x10][0x14], R4; # [106][000350]
//     	FMUL.FTZ R12, R27, R5;           # [107][000358]
//     	FMUL.FTZ R4, R6, R5;             # [108][000360]
//     	FMUL32I.FTZ R6, R23, 0xbe9547cd; # [109][000368]
//     	FMUL.FTZ R5, R7, R5;             # [110][000370]
//     	FFMA.FTZ R21, R21, c[0x10][0x8], R6; # [111][000378]
//     	TEX.NODEP.T R4, R4, 0x9, 0x0, 2D; # [112][000380]
//     	TEX.NODEP.P R12, R12, 0x5, 0x1, 2D, 0x1; # [113][000388]
//     	FADD.FTZ R13, R18, 1;            # [114][000390]
//     	FFMA.FTZ.SAT R21, R25, c[0x10][0xc], R21; # [115][000398]
//     	FMNMX.FTZ R18, R13, RZ, !PT;     # [116][0003a0]
//     	MUFU.LG2 R13, R21;               # [117][0003a8]
//     	FADD.FTZ R10, -R20, R10;         # [118][0003b0]
//     	FFMA.FTZ R10, R17, R10, R20;     # [119][0003b8]
//     	FADD.FTZ R20, -R22, R9;          # [120][0003c0]
//     	FADD.FTZ R8, -R24, R8;           # [121][0003c8]
//     	MUFU.LG2 R9, R18;                # [122][0003d0]
//     	FADD.FTZ R21, -R3, R11;          # [123][0003d8]
//     	FMUL32I.FTZ R18, R13, 11.4682;   # [124][0003e0]
//     	FFMA.FTZ R20, R17, R20, R22;     # [125][0003e8]
//     	FMUL32I.FTZ.SAT R13, R16, 0x3f44ec4f; # [126][0003f0]
//     	RRO.EX2 R18, R18;                # [127][0003f8]
//     	FMUL32I.FTZ R16, R9, 5.7341;     # [128][000400]
//     	FFMA.FTZ R8, R17, R8, R24;       # [129][000408]
//     	MUFU.EX2 R9, R18;                # [130][000410]
//     	FFMA.FTZ R17, R17, R21, R3;      # [131][000418]
//     	RRO.EX2 R11, R16;                # [132][000420]
//     	FMUL32I.FTZ R3, R9, 0x40c683d0;  # [133][000428]
//     	FMUL32I.FTZ R16, R9, 0x407c3b0e; # [134][000430]
//     	MUFU.EX2 R11, R11;               # [135][000438]
//     	FMUL32I.FTZ R9, R9, 0x3fca6847;  # [136][000440]
//     	FMUL.FTZ R3, R17, R3;            # [137][000448]
//     	FMUL.FTZ R16, R17, R16;          # [138][000450]
//     	FADD32I.FTZ R21, -R26, 0.3;      # [139][000458]
//     	FMUL.FTZ R17, R17, R9;           # [140][000460]
//     	FMNMX.FTZ R11, R11, 1, PT;       # [141][000468]
//     	FMUL.FTZ R9, R8, R2;             # [142][000470]
//     	FMUL32I.FTZ R18, R13, 0x3f41c1c3; # [143][000478]
//     	FMUL.FTZ R8, R20, R2;            # [144][000480]
//     	FFMA.FTZ R22, R11, RZ, -R15;     # [145][000488]
//     	FMUL.FTZ R2, R10, R2;            # [146][000490]
//     	FMUL32I.FTZ R20, R13, 0x3f21a1a2; # [147][000498]
//     	FMUL32I.FTZ R10, R13, 0x3f0d8d8e; # [148][0004a0]
//     	FADD.FTZ R11, R1, -1;            # [149][0004a8]
//     	FMUL32I.FTZ.SAT R13, R21, 0x3f44ec4f; # [150][0004b0]
//     	FFMA.FTZ R11, R11, c[0x10][0x10], -R15; # [151][0004b8]
//     	FFMA.FTZ R1, R13, c[0x10][0x24], R20; # [152][0004c0]
//     	FADD.FTZ R0, R0, -R4;            # [153][0004c8]
//     	FMUL32I.FTZ R20, R22, 5.3642;    # [154][0004d0]
//     	FFMA.FTZ R10, R13, c[0x10][0x20], R10; # [155][0004d8]
//     	FFMA.FTZ R13, R13, c[0x10][0x28], R18; # [156][0004e0]
//     	FFMA.FTZ R0, R19, R0, R4;        # [157][0004e8]
//     	FMUL.FTZ R22, R20, R11;          # [158][0004f0]
//     	F2F.SAT R21, R26;                # [159][0004f8]
//     	FMUL.FTZ R18, R17, R22;          # [160][000500]
//     	FMUL.FTZ R4, R16, R22;           # [161][000508]
//     	FADD.FTZ R17, R0, -1;            # [162][000510]
//     	FMUL.FTZ R16, R3, R22;           # [163][000518]
//     	FMUL32I.FTZ R20, R21, 0x3fda1a22; # [164][000520]
//     	FMUL.FTZ R19, R6, RZ;            # [165][000528]
//     	FFMA.FTZ R3, R17, c[0x10][0x1c], -R15; # [166][000530]
//     	FMUL.FTZ R22, R7, RZ;            # [167][000538]
//     	FMUL32I.FTZ R17, R21, 0x3f2f052b; # [168][000540]
//     	FFMA.FTZ R20, R20, R3, R19;      # [169][000548]
//     	FMUL32I.FTZ R21, R21, 0x402ba788; # [170][000550]
//     	FFMA.FTZ R19, R17, R3, R22;      # [171][000558]
//     	FMUL.FTZ R22, R5, RZ;            # [172][000560]
//     	FMUL.FTZ R17, R16, R3;           # [173][000568]
//     	FMUL.FTZ R16, R18, R3;           # [174][000570]
//     	FFMA.FTZ R5, R5, 2, R15;         # [175][000578]
//     	FFMA.FTZ R18, R21, R3, R22;      # [176][000580]
//     	FADD32I.FTZ R10, R10, 0x3e989899; # [177][000588]
//     	MOV32I R22, 0x3f000000;          # [178][000590]
//     	FFMA.FTZ R6, R6, 2, R15;         # [179][000598]
//     	FADD32I.FTZ R1, R1, 0x3ebababb;  # [180][0005a0]
//     	FFMA.FTZ R22, R0, 0.5, R22;      # [181][0005a8]
//     	FFMA.FTZ R7, R7, 2, R15;         # [182][0005b0]
//     	FADD32I.FTZ R13, R13, 0x3f0a8a8b; # [183][0005b8]
//     	FADD.FTZ R10, R10, R18;          # [184][0005c0]
//     	FMUL.FTZ R5, R22, R5;            # [185][0005c8]
//     	FMUL.FTZ R6, R22, R6;            # [186][0005d0]
//     	FADD.FTZ R18, R1, R20;           # [187][0005d8]
//     	FMUL.FTZ R7, R22, R7;            # [188][0005e0]
//     	FADD.FTZ R13, R13, R19;          # [189][0005e8]
//     	FFMA.FTZ R1, R10, R11, R5;       # [190][0005f0]
//     	IPA.CENTROID R21, a[0x108], R14; # [191][0005f8] GENERIC_ATTRIBUTE_08_Z
//     	FFMA.FTZ R5, R18, R11, R6;       # [192][000600]
//     	IPA.CENTROID R15, a[0x10c], R14; # [193][000608] GENERIC_ATTRIBUTE_08_W
//     	FFMA.FTZ R6, R13, R11, R7;       # [194][000610]
//     	IPA.CENTROID R0, a[0x104], R14;  # [195][000618] GENERIC_ATTRIBUTE_08_Y
//     	FMNMX.FTZ R1, R1, RZ, !PT;       # [196][000620]
//     	FMUL.FTZ R4, R4, R3;             # [197][000628]
//     	FMNMX.FTZ R5, R5, RZ, !PT;       # [198][000630]
//     	IPA.CENTROID R14, a[0x100], R14; # [199][000638] ATTR8
//     	FMNMX.FTZ R6, R6, RZ, !PT;       # [200][000640]
//     	FFMA.FTZ R1, R9, R1, R17;        # [201][000648]
//     	FFMA.FTZ R4, R8, R5, R4;         # [202][000650]
//     	FMUL.FTZ R1, R12, R1;            # [203][000658]
//     	FFMA.FTZ R5, R2, R6, R16;        # [204][000660]
//     	FFMA.FTZ R1, R1, R15, R14;       # [205][000668]
//     	FMUL.FTZ R2, R12, R4;            # [206][000670]
//     	MOV32I R3, 0x3f800000;           # [207][000678]
//     	FMUL.FTZ R4, R12, R5;            # [208][000680]
//     	FFMA.FTZ R2, R2, R15, R0;        # [209][000688]
//     	FMNMX.FTZ R0, R1, RZ, !PT;       # [210][000690]
//     	FFMA.FTZ R4, R4, R15, R21;       # [211][000698]
//     	FMNMX.FTZ R1, R2, RZ, !PT;       # [212][0006a0]
//     	FMNMX.FTZ R2, R4, RZ, !PT;       # [213][0006a8]
//     	EXIT;                            # [214][0006b0]
//     	END
//     END_SECTION
// END_SHADER
// 
