// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x842ca0bae450313a
//         UCODE_HASH: 0x27ba1ed8aebba46a
//         POOL: APP
//         VERSION: 20
//         # USES: 205
//         // Time: 121.292ms [11.290 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 20
//         USED_TEXTURE_BITS: 0xf
//         TEXTURE_SLOTS: 4
//         SAMPLER_SLOTS: 4
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//             KILLS_PIXELS
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX03_Q              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x0006d462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0xaaaa2a0a
//         0x00000000      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c1, 1.00000000, 2097120.00000000, 0.00100000, 0.00000000 ; 0x3f800000 0x49ffff00 0x3a83126f 0x000000
        def c3, 0.50000000, 0.25000000, 0.00000000, 0.00000000 ; 0x3f000000 0x3e800000 0x000000 0x000000
        dcl_texcoord0 v0.rg
        dcl_texcoord1 v1.rgb
        dcl_texcoord2 v2
        dcl_texcoord3 v3
        dcl_2d s0
        dcl_volume s1
        dcl_volume s2
        dcl_volume s3
        texld_pp r0, v0, s0
        mad r0.x, r0.w, c2.z, -c2.w
        rcp r0.x, r0.x
        max r1.x, r0.x, c1.x
        min r0.x, r1.x, c1.y
        add r1, r0.x, -c22.x
        texkill r1
        mov r1.xyz, c14
        mul r0.yzw, r1.xxyz, c11.x
        mad r2.xyz, v1, r0.x, c10
        rcp r3.x, c12.x
        rcp r3.y, c12.y
        rcp r3.z, c12.z
        mad r4.xyz, r2, r3, r0.yzw
        texld r4, r4, s1
        mul r4.yzw, r1.xxyz, c11.y
        mad r5.xyz, r2, r3, r4.yzw
        texld r5, r5, s2
        mad r1.w, r5.x, c3.x, r4.x
        mul r1.xyz, r1, c11.z
        mad r3.xyz, r2, r3, r1
        add r2.xyz, r2, -c19
        texld r3, r3, s3
        mad r1.w, r3.x, c3.y, r1.w
        mad r1.w, r1.w, c15.z, c15.y
        add r1.w, r1.w, -c1.x
        add r2.w, r0.x, -c16.x
        rcp r3.x, c16.y
        mul_sat r2.w, r2.w, r3.x
        add r2.w, -r2.w, c1.x
        mad r1.w, r2.w, r1.w, c1.x
        min r2.w, c15.x, r0.x
        mad r3.xyz, v1, r2.w, c10
        rcp r5.x, c13.x
        rcp r5.y, c13.y
        rcp r5.z, c13.z
        mad r0.yzw, r3.xxyz, r5.xxyz, r0
        texld r6, r0.yzw, s1
        mad r0.yzw, r3.xxyz, r5.xxyz, r4
        mad r1.xyz, r3, r5, r1
        texld r3, r0.yzw, s2
        mad r0.y, r3.x, c3.x, r6.x
        texld r3, r1, s3
        mad r0.y, r3.x, c3.y, r0.y
        mad r0.y, r0.y, c15.w, r1.w
        mov r1.x, c1.x
        mad r1, c9, -r0.y, r1.x
        log r3.x, r1.x
        log r3.y, r1.y
        log r3.z, r1.z
        log r3.w, r1.w
        mul r0.y, r0.x, v1.z
        add r1, r0.x, -c8
        add r0.x, -r0_abs.y, c1.z
        cmp r0.x, r0.x, c1.z, r0.y
        rcp r0.x, r0.x
        mul_sat r4, r0.x, v2
        mul_sat r0, r0.x, v3
        add r0, -r4, r0
        max r4, r1, c1.w
        mul r1, r0_abs, r4
        mad r0, r4, r0_abs, -c0
        mul r1, r3, r1
        exp r3.x, r1.x
        exp r3.y, r1.y
        exp r3.z, r1.z
        exp r3.w, r1.w
        cmp r0, r0, c1.w, r3
        mul r1.x, r0.z, r0.w
        mul r1.y, r0.y, r1.x
        mul oC0.w, r0.x, r1.y
        add r3, r0, -c1.x
        mul r0.x, r0.w, r3.z
        mul r0.xyz, r0.x, c6
        mad r0.xyz, r3.w, c7, r0
        mul r0.w, r1.x, r3.y
        mul r1.x, r1.y, r3.x
        mad r0.xyz, r0.w, c5, r0
        mad r0.xyz, r1.x, c4, r0
        dp3 r0.w, r2, c20
        mov r1.xyz, c17
        cmp r1.xyz, r0.w, r1, c18
        mad r1.xyz, r0, r1, -r0
        cmp r2.xy, r0.w, c21, c21.zwzw
        add r0.w, r0_abs.w, -r2.x
        add r1.w, -r2.x, r2.y
        rcp r1.w, r1.w
        mul_sat r0.w, r0.w, r1.w
        mad oC0.xyz, r0.w, r1, r0
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0001 0x3f800000 0x49ffff00
//         0x3a83126f 0x00000000 0x05000051 0xa00f0003
//         0x3f000000 0x3e800000 0x00000000 0x00000000
//         0x0200001f 0x80000005 0x90030000 0x0200001f
//         0x80010005 0x90070001 0x0200001f 0x80020005
//         0x900f0002 0x0200001f 0x80030005 0x900f0003
//         0x0200001f 0x90000000 0xa00f0800 0x0200001f
//         0xa0000000 0xa00f0801 0x0200001f 0xa0000000
//         0xa00f0802 0x0200001f 0xa0000000 0xa00f0803
//         0x03000042 0x802f0000 0x90e40000 0xa0e40800
//         0x04000004 0x80010000 0x80ff0000 0xa0aa0002
//         0xa1ff0002 0x02000006 0x80010000 0x80000000
//         0x0300000b 0x80010001 0x80000000 0xa0000001
//         0x0300000a 0x80010000 0x80000001 0xa0550001
//         0x03000002 0x800f0001 0x80000000 0xa1000016
//         0x01000041 0x800f0001 0x02000001 0x80070001
//         0xa0e4000e 0x03000005 0x800e0000 0x80900001
//         0xa000000b 0x04000004 0x80070002 0x90e40001
//         0x80000000 0xa0e4000a 0x02000006 0x80010003
//         0xa000000c 0x02000006 0x80020003 0xa055000c
//         0x02000006 0x80040003 0xa0aa000c 0x04000004
//         0x80070004 0x80e40002 0x80e40003 0x80f90000
//         0x03000042 0x800f0004 0x80e40004 0xa0e40801
//         0x03000005 0x800e0004 0x80900001 0xa055000b
//         0x04000004 0x80070005 0x80e40002 0x80e40003
//         0x80f90004 0x03000042 0x800f0005 0x80e40005
//         0xa0e40802 0x04000004 0x80080001 0x80000005
//         0xa0000003 0x80000004 0x03000005 0x80070001
//         0x80e40001 0xa0aa000b 0x04000004 0x80070003
//         0x80e40002 0x80e40003 0x80e40001 0x03000002
//         0x80070002 0x80e40002 0xa1e40013 0x03000042
//         0x800f0003 0x80e40003 0xa0e40803 0x04000004
//         0x80080001 0x80000003 0xa0550003 0x80ff0001
//         0x04000004 0x80080001 0x80ff0001 0xa0aa000f
//         0xa055000f 0x03000002 0x80080001 0x80ff0001
//         0xa1000001 0x03000002 0x80080002 0x80000000
//         0xa1000010 0x02000006 0x80010003 0xa0550010
//         0x03000005 0x80180002 0x80ff0002 0x80000003
//         0x03000002 0x80080002 0x81ff0002 0xa0000001
//         0x04000004 0x80080001 0x80ff0002 0x80ff0001
//         0xa0000001 0x0300000a 0x80080002 0xa000000f
//         0x80000000 0x04000004 0x80070003 0x90e40001
//         0x80ff0002 0xa0e4000a 0x02000006 0x80010005
//         0xa000000d 0x02000006 0x80020005 0xa055000d
//         0x02000006 0x80040005 0xa0aa000d 0x04000004
//         0x800e0000 0x80900003 0x80900005 0x80e40000
//         0x03000042 0x800f0006 0x80f90000 0xa0e40801
//         0x04000004 0x800e0000 0x80900003 0x80900005
//         0x80e40004 0x04000004 0x80070001 0x80e40003
//         0x80e40005 0x80e40001 0x03000042 0x800f0003
//         0x80f90000 0xa0e40802 0x04000004 0x80020000
//         0x80000003 0xa0000003 0x80000006 0x03000042
//         0x800f0003 0x80e40001 0xa0e40803 0x04000004
//         0x80020000 0x80000003 0xa0550003 0x80550000
//         0x04000004 0x80020000 0x80550000 0xa0ff000f
//         0x80ff0001 0x02000001 0x80010001 0xa0000001
//         0x04000004 0x800f0001 0xa0e40009 0x81550000
//         0x80000001 0x0200000f 0x80010003 0x80000001
//         0x0200000f 0x80020003 0x80550001 0x0200000f
//         0x80040003 0x80aa0001 0x0200000f 0x80080003
//         0x80ff0001 0x03000005 0x80020000 0x80000000
//         0x90aa0001 0x03000002 0x800f0001 0x80000000
//         0xa1e40008 0x03000002 0x80010000 0x8c550000
//         0xa0aa0001 0x04000058 0x80010000 0x80000000
//         0xa0aa0001 0x80550000 0x02000006 0x80010000
//         0x80000000 0x03000005 0x801f0004 0x80000000
//         0x90e40002 0x03000005 0x801f0000 0x80000000
//         0x90e40003 0x03000002 0x800f0000 0x81e40004
//         0x80e40000 0x0300000b 0x800f0004 0x80e40001
//         0xa0ff0001 0x03000005 0x800f0001 0x8be40000
//         0x80e40004 0x04000004 0x800f0000 0x80e40004
//         0x8be40000 0xa1e40000 0x03000005 0x800f0001
//         0x80e40003 0x80e40001 0x0200000e 0x80010003
//         0x80000001 0x0200000e 0x80020003 0x80550001
//         0x0200000e 0x80040003 0x80aa0001 0x0200000e
//         0x80080003 0x80ff0001 0x04000058 0x800f0000
//         0x80e40000 0xa0ff0001 0x80e40003 0x03000005
//         0x80010001 0x80aa0000 0x80ff0000 0x03000005
//         0x80020001 0x80550000 0x80000001 0x03000005
//         0x80080800 0x80000000 0x80550001 0x03000002
//         0x800f0003 0x80e40000 0xa1000001 0x03000005
//         0x80010000 0x80ff0000 0x80aa0003 0x03000005
//         0x80070000 0x80000000 0xa0e40006 0x04000004
//         0x80070000 0x80ff0003 0xa0e40007 0x80e40000
//         0x03000005 0x80080000 0x80000001 0x80550003
//         0x03000005 0x80010001 0x80550001 0x80000003
//         0x04000004 0x80070000 0x80ff0000 0xa0e40005
//         0x80e40000 0x04000004 0x80070000 0x80000001
//         0xa0e40004 0x80e40000 0x03000008 0x80080000
//         0x80e40002 0xa0e40014 0x02000001 0x80070001
//         0xa0e40011 0x04000058 0x80070001 0x80ff0000
//         0x80e40001 0xa0e40012 0x04000004 0x80070001
//         0x80e40000 0x80e40001 0x81e40000 0x04000058
//         0x80030002 0x80ff0000 0xa0e40015 0xa0ee0015
//         0x03000002 0x80080000 0x8bff0000 0x81000002
//         0x03000002 0x80080001 0x81000002 0x80550002
//         0x02000006 0x80080001 0x80ff0001 0x03000005
//         0x80180000 0x80ff0000 0x80ff0001 0x04000004
//         0x80070800 0x80ff0000 0x80e40001 0x80e40000
//         0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3ccd0148 // 0.02502503
//         COP_CONST[1]: 0x49ffff00 // 2097120.00000000
//         COP_CONST[2]: 0x39bd1ff4 // 0.00036073
//         COP_CONST[3]: 0x46de29e1 // 28436.93945313
//         COP_CONST[4]: 0x4700d8f3 // 32984.94921875
//         COP_CONST[5]: 0xc5e624ff // -7364.62451172
//         COP_CONST[6]: 0xbe4f5fef // -0.20251440
//         COP_CONST[7]: 0xc03573f1 // -2.83520150
//         COP_CONST[8]: 0xbdcf5fef // -0.10125720
//         COP_CONST[9]: 0xbfb573f1 // -1.41760075
//         COP_CONST[10]: 0x3ca5e655 // 0.02025143
//         COP_CONST[11]: 0x3e91298a // 0.28352004
//         COP_CONST[12]: 0x3f800000 // 1.00000000
//         COP_CONST[13]: 0x36bab98d // 0.00000556
//         COP_CONST[14]: 0x3851ed13 // 0.00005005
//         COP_CONST[15]: 0x39831330 // 0.00025001
//         COP_CONST[16]: 0x3a83126f // 0.00100000
//         COP_CONST[17]: 0xccbebc20 // -100000000.00000000
//         COP_CONST[18]: 0xff7fffff // -340282346638528900000000000000000000000.00000000
//         COP_CONST[19]: 0xcb189680 // -10000000.00000000
//         COP_CONST[20]: 0xc7435000 // -50000.00000000
//         COP_CONST[21]: 0xbecbbf25 // -0.39794269
//         COP_CONST[22]: 0xbe1cd393 // -0.15315084
//         COP_CONST[23]: 0xbd7e05b1 // -0.06201715
//         COP_CONST[24]: 0xbd0214b8 // -0.03175804
//         COP_CONST[25]: 0xbc8c6b95 // -0.01714114
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x47435000 // 50000.00000000
//         # USER FLOAT CONST: c[6][251] = 0x4b189680 // 10000000.00000000
//         # USER FLOAT CONST: c[6][252] = 0x4cbebc20 // 100000000.00000000
//         # USER FLOAT CONST: c[6][253] = 0x7f7fffff // 340282346638528900000000000000000000000.00000000
//         # USER FLOAT CONST: c[6][260] = 0x3ccd0148 // 0.02502503
//         # USER FLOAT CONST: c[6][261] = 0x37d1ec24 // 0.00002502
//         # USER FLOAT CONST: c[6][266] = 0xbc8c6b95 // -0.01714114
//         # USER FLOAT CONST: c[6][267] = 0xbc8c6b95 // -0.01714114
//         # USER FLOAT CONST: c[6][268] = 0xbd0214b8 // -0.03175804
//         # USER FLOAT CONST: c[6][270] = 0xbecbbf25 // -0.39794269
//         # USER FLOAT CONST: c[6][271] = 0xbe1cd393 // -0.15315084
//         # USER FLOAT CONST: c[6][272] = 0xbd7e05b1 // -0.06201715
//         # USER FLOAT CONST: c[6][274] = 0xbed89646 // -0.42302150
//         # USER FLOAT CONST: c[6][275] = 0xbe03c470 // -0.12867904
//         # USER FLOAT CONST: c[6][276] = 0xbd6358a1 // -0.05550444
//         # USER FLOAT CONST: c[6][278] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][279] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][280] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][282] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][283] = 0x43480000 // 200.00000000
//         # USER FLOAT CONST: c[6][284] = 0x453b8000 // 3000.00000000
//         # USER FLOAT CONST: c[6][285] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][286] = 0x39831330 // 0.00025001
//         # USER FLOAT CONST: c[6][287] = 0x3851ed13 // 0.00005005
//         # USER FLOAT CONST: c[6][288] = 0x36bab98d // 0.00000556
//         # USER FLOAT CONST: c[6][289] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][290] = 0x46de29e1 // 28436.93945313
//         # USER FLOAT CONST: c[6][291] = 0x4700d8f3 // 32984.94921875
//         # USER FLOAT CONST: c[6][292] = 0xc5e624ff // -7364.62451172
//         # USER FLOAT CONST: c[6][294] = 0xbf4f5fef // -0.81005758
//         # USER FLOAT CONST: c[6][295] = 0xbecf5fef // -0.40502879
//         # USER FLOAT CONST: c[6][296] = 0x3da5e655 // 0.08100573
//         # USER FLOAT CONST: c[6][298] = 0x471c4000 // 40000.00000000
//         # USER FLOAT CONST: c[6][299] = 0x471c4000 // 40000.00000000
//         # USER FLOAT CONST: c[6][300] = 0x471c4000 // 40000.00000000
//         # USER FLOAT CONST: c[6][302] = 0x461c4000 // 10000.00000000
//         # USER FLOAT CONST: c[6][303] = 0x461c4000 // 10000.00000000
//         # USER FLOAT CONST: c[6][304] = 0x461c4000 // 10000.00000000
//         # USER FLOAT CONST: c[6][306] = 0x3e800000 // 0.25000000
//         # USER FLOAT CONST: c[6][307] = 0x40600000 // 3.50000000
//         # USER FLOAT CONST: c[6][308] = 0x3e800000 // 0.25000000
//         # USER FLOAT CONST: c[6][310] = 0x40400000 // 3.00000000
//         # USER FLOAT CONST: c[6][311] = 0x3e000000 // 0.12500000
//         # USER FLOAT CONST: c[6][312] = 0x40400000 // 3.00000000
//         # USER FLOAT CONST: c[6][313] = 0x3f000000 // 0.50000000
//         # USER FLOAT CONST: c[6][314] = 0x466a6000 // 15000.00000000
//         # USER FLOAT CONST: c[6][315] = 0x476a6000 // 60000.00000000
//         # USER FLOAT CONST: c[6][318] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][319] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][320] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][322] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][323] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][324] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][326] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][327] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][328] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][330] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][331] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][332] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][334] = 0x49742400 // 1000000.00000000
//         # USER FLOAT CONST: c[6][335] = 0x4b189680 // 10000000.00000000
//         # USER FLOAT CONST: c[6][336] = 0x49742400 // 1000000.00000000
//         # USER FLOAT CONST: c[6][337] = 0x4b189680 // 10000000.00000000
//         # USER FLOAT CONST: c[6][338] = 0xb9bd1ff4 // -0.00036073
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@50000.00000000
//         ##    ~c0.y -> c[6][251] = 100.00%@10000000.00000000
//         ##    ~c0.z -> c[6][252] = 100.00%@100000000.00000000
//         ##    ~c0.w -> c[6][253] = 100.00%@340282346638528900000000000000000000000.00000000
//         ##    ~c2.z -> c[6][260] = 100.00%@0.02502503
//         ##    ~c2.w -> c[6][261] = 100.00%@0.00002502
//         ##    ~c4.x -> c[6][266] = 100.00%@-0.01714114
//         ##    ~c4.y -> c[6][267] = 100.00%@-0.01714114
//         ##    ~c4.z -> c[6][268] = 100.00%@-0.03175804
//         ##    ~c5.x -> c[6][270] = 100.00%@-0.39794269
//         ##    ~c5.y -> c[6][271] = 100.00%@-0.15315084
//         ##    ~c5.z -> c[6][272] = 100.00%@-0.06201715
//         ##    ~c6.x -> c[6][274] = 100.00%@-0.42302150
//         ##    ~c6.y -> c[6][275] = 100.00%@-0.12867904
//         ##    ~c6.z -> c[6][276] = 100.00%@-0.05550444
//         ##    ~c7.x -> c[6][278] = 100.00%@0.00000000
//         ##    ~c7.y -> c[6][279] = 100.00%@0.00000000
//         ##    ~c7.z -> c[6][280] = 100.00%@0.00000000
//         ##    ~c8.x -> c[6][282] = 100.00%@0.00000000
//         ##    ~c8.y -> c[6][283] = 100.00%@200.00000000
//         ##    ~c8.z -> c[6][284] = 100.00%@3000.00000000
//         ##    ~c8.w -> c[6][285] = 100.00%@0.00000000
//         ##    ~c9.x -> c[6][286] = 100.00%@0.00025001
//         ##    ~c9.y -> c[6][287] = 100.00%@0.00005005
//         ##    ~c9.z -> c[6][288] = 100.00%@0.00000556
//         ##    ~c9.w -> c[6][289] = 100.00%@0.00000000
//         ##    ~c10.x -> c[6][290] = 100.00%@28436.93945313
//         ##    ~c10.y -> c[6][291] = 100.00%@32984.94921875
//         ##    ~c10.z -> c[6][292] = 100.00%@-7364.62451172
//         ##    ~c11.x -> c[6][294] = 100.00%@-0.81005758
//         ##    ~c11.y -> c[6][295] = 100.00%@-0.40502879
//         ##    ~c11.z -> c[6][296] = 100.00%@0.08100573
//         ##    ~c12.x -> c[6][298] = 100.00%@40000.00000000
//         ##    ~c12.y -> c[6][299] = 100.00%@40000.00000000
//         ##    ~c12.z -> c[6][300] = 100.00%@40000.00000000
//         ##    ~c13.x -> c[6][302] = 100.00%@10000.00000000
//         ##    ~c13.y -> c[6][303] = 100.00%@10000.00000000
//         ##    ~c13.z -> c[6][304] = 100.00%@10000.00000000
//         ##    ~c14.x -> c[6][306] = 100.00%@0.25000000
//         ##    ~c14.y -> c[6][307] = 100.00%@3.50000000
//         ##    ~c14.z -> c[6][308] = 100.00%@0.25000000
//         ##    ~c15.x -> c[6][310] = 100.00%@3.00000000
//         ##    ~c15.y -> c[6][311] = 100.00%@0.12500000
//         ##    ~c15.z -> c[6][312] = 100.00%@3.00000000
//         ##    ~c15.w -> c[6][313] = 100.00%@0.50000000
//         ##    ~c16.x -> c[6][314] = 100.00%@15000.00000000
//         ##    ~c16.y -> c[6][315] = 100.00%@60000.00000000
//         ##    ~c17.x -> c[6][318] = 100.00%@1.00000000
//         ##    ~c17.y -> c[6][319] = 100.00%@1.00000000
//         ##    ~c17.z -> c[6][320] = 100.00%@1.00000000
//         ##    ~c18.x -> c[6][322] = 100.00%@1.00000000
//         ##    ~c18.y -> c[6][323] = 100.00%@1.00000000
//         ##    ~c18.z -> c[6][324] = 100.00%@1.00000000
//         ##    ~c19.x -> c[6][326] = 100.00%@0.00000000
//         ##    ~c19.y -> c[6][327] = 100.00%@0.00000000
//         ##    ~c19.z -> c[6][328] = 100.00%@0.00000000
//         ##    ~c20.x -> c[6][330] = 100.00%@1.00000000
//         ##    ~c20.y -> c[6][331] = 100.00%@0.00000000
//         ##    ~c20.z -> c[6][332] = 100.00%@0.00000000
//         ##    ~c21.x -> c[6][334] = 100.00%@1000000.00000000
//         ##    ~c21.y -> c[6][335] = 100.00%@10000000.00000000
//         ##    ~c21.z -> c[6][336] = 100.00%@1000000.00000000
//         ##    ~c21.w -> c[6][337] = 100.00%@10000000.00000000
//         ##    ~c22.x -> c[6][338] = 100.00%@-0.00036073
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,3D,1X)        , (0x2,3D,1X)        , (0x3,3D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,2560x1600,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/Point,Clamp/Clamp/Clamp,0.00000000,2560x1600x0,1/0,A16B16G16R16,0,0,0), 0x00000000,0x000000cd
//         STAGEINFO:(0x1,3D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,8x8x8,1/0,Y8,0,0,0), 0x00000000,0x000000cd
//         STAGEINFO:(0x2,3D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,16x16x16,1/0,Y8,0,0,0), 0x00000000,0x000000cd
//         STAGEINFO:(0x3,3D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,32x32x32,1/0,Y8,0,0,0), 0x00000000,0x000000cd
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 1 : 
//          (attr 1 4 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texh r5, v1.xyzz, #0, #0, 2D
//         movr r44, c[6][252].z
//         movr r44.x, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r44.y, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r44.z, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r44.w, constant(0.02502503, 0.02502503, 0.02502503, 0.02502503).x
//         movr r43, -c[6][252].w
//         movr r43.x, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         movr r43.y, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         movr r43.z, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         movr r43.w, -constant(0.00002502, 0.00002502, 0.00002502, 0.00002502).x
//         madr r5.x, r5.w, r44, r43
//         rcpr r5.x, r5.x
//         maxr r6.x, r5.x, constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).x
//         minr r5.x, r6.x, constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).y
//         movr r44, -c[6][272].x
//         movr r44.x, -constant(-0.00036073, -0.00036073, -0.00036073, -0.00036073).x
//         movr r44.y, -constant(-0.00036073, -0.00036073, -0.00036073, -0.00036073).x
//         movr r44.z, -constant(-0.00036073, -0.00036073, -0.00036073, -0.00036073).x
//         movr r44.w, -constant(-0.00036073, -0.00036073, -0.00036073, -0.00036073).x
//         addr r6, r5.x, r44
//         movr.c rc, r6
//         kil LT
//         movr r45, c[6][264]
//         movr r45.x, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r45.y, constant(3.50000000, 3.50000000, 3.50000000, 3.50000000).x
//         movr r45.z, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r6.xyz, r45
//         movr r44, c[6][261].x
//         movr r44.x, constant(-0.81005758, -0.81005758, -0.81005758, -0.81005758).x
//         movr r44.y, constant(-0.81005758, -0.81005758, -0.81005758, -0.81005758).x
//         movr r44.z, constant(-0.81005758, -0.81005758, -0.81005758, -0.81005758).x
//         movr r44.w, constant(-0.81005758, -0.81005758, -0.81005758, -0.81005758).x
//         mulr r5.yzw, r6.xxyz, r44
//         movr r43, c[6][260]
//         movr r43.x, constant(28436.93945313, 28436.93945313, 28436.93945313, 28436.93945313).x
//         movr r43.y, constant(32984.94921875, 32984.94921875, 32984.94921875, 32984.94921875).x
//         movr r43.z, constant(-7364.62451172, -7364.62451172, -7364.62451172, -7364.62451172).x
//         madr r7.xyz, v2, r5.x, r43
//         movr r45, c[6][262].x
//         movr r45.x, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         movr r45.y, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         movr r45.z, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         movr r45.w, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         rcpr r8.x, r45
//         movr r45, c[6][262].y
//         movr r45.x, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         movr r45.y, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         movr r45.z, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         movr r45.w, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         rcpr r8.y, r45
//         movr r45, c[6][262].z
//         movr r45.x, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         movr r45.y, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         movr r45.z, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         movr r45.w, constant(40000.00000000, 40000.00000000, 40000.00000000, 40000.00000000).x
//         rcpr r8.z, r45
//         madr r9.xyz, r7, r8, r5.yzww
//         texr r9, r9.xyzz, #1, #1, 3D
//         movr r44, c[6][261].y
//         movr r44.x, constant(-0.40502879, -0.40502879, -0.40502879, -0.40502879).x
//         movr r44.y, constant(-0.40502879, -0.40502879, -0.40502879, -0.40502879).x
//         movr r44.z, constant(-0.40502879, -0.40502879, -0.40502879, -0.40502879).x
//         movr r44.w, constant(-0.40502879, -0.40502879, -0.40502879, -0.40502879).x
//         mulr r9.yzw, r6.xxyz, r44
//         madr r10.xyz, r7, r8, r9.yzww
//         texr r10, r10.xyzz, #2, #2, 3D
//         madr r6.w, r10.x, constant(0.50000000, 0.25000000, 0.00000000, 0.00000000).x, r9.x
//         movr r44, c[6][261].z
//         movr r44.x, constant(0.08100573, 0.08100573, 0.08100573, 0.08100573).x
//         movr r44.y, constant(0.08100573, 0.08100573, 0.08100573, 0.08100573).x
//         movr r44.z, constant(0.08100573, 0.08100573, 0.08100573, 0.08100573).x
//         movr r44.w, constant(0.08100573, 0.08100573, 0.08100573, 0.08100573).x
//         mulr r6.xyz, r6, r44
//         madr r8.xyz, r7, r8, r6
//         movr r44, -c[6][269]
//         movr r44.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addr r7.xyz, r7, r44
//         texr r8, r8.xyzz, #3, #3, 3D
//         madr r6.w, r8.x, constant(0.50000000, 0.25000000, 0.00000000, 0.00000000).y, r6.w
//         movr r44, c[6][265].z
//         movr r44.x, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r44.y, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r44.z, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r44.w, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r43, c[6][265].y
//         movr r43.x, constant(0.12500000, 0.12500000, 0.12500000, 0.12500000).x
//         movr r43.y, constant(0.12500000, 0.12500000, 0.12500000, 0.12500000).x
//         movr r43.z, constant(0.12500000, 0.12500000, 0.12500000, 0.12500000).x
//         movr r43.w, constant(0.12500000, 0.12500000, 0.12500000, 0.12500000).x
//         madr r6.w, r6.w, r44, r43
//         addr r6.w, r6.w, -constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).x
//         movr r44, -c[6][266].x
//         movr r44.x, -constant(15000.00000000, 15000.00000000, 15000.00000000, 15000.00000000).x
//         movr r44.y, -constant(15000.00000000, 15000.00000000, 15000.00000000, 15000.00000000).x
//         movr r44.z, -constant(15000.00000000, 15000.00000000, 15000.00000000, 15000.00000000).x
//         movr r44.w, -constant(15000.00000000, 15000.00000000, 15000.00000000, 15000.00000000).x
//         addr r7.w, r5.x, r44
//         movr r45, c[6][266].y
//         movr r45.x, constant(60000.00000000, 60000.00000000, 60000.00000000, 60000.00000000).x
//         movr r45.y, constant(60000.00000000, 60000.00000000, 60000.00000000, 60000.00000000).x
//         movr r45.z, constant(60000.00000000, 60000.00000000, 60000.00000000, 60000.00000000).x
//         movr r45.w, constant(60000.00000000, 60000.00000000, 60000.00000000, 60000.00000000).x
//         rcpr r8.x, r45
//         mulr_sat r7.w, r7.w, r8.x
//         addr r7.w, -r7.w, constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).x
//         madr r6.w, r7.w, r6.w, constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).x
//         movr r45, c[6][265].x
//         movr r45.x, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r45.y, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r45.z, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r45.w, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         minr r7.w, r45, r5.x
//         movr r43, c[6][260]
//         movr r43.x, constant(28436.93945313, 28436.93945313, 28436.93945313, 28436.93945313).x
//         movr r43.y, constant(32984.94921875, 32984.94921875, 32984.94921875, 32984.94921875).x
//         movr r43.z, constant(-7364.62451172, -7364.62451172, -7364.62451172, -7364.62451172).x
//         madr r8.xyz, v2, r7.w, r43
//         movr r45, c[6][263].x
//         movr r45.x, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         movr r45.y, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         movr r45.z, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         movr r45.w, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         rcpr r10.x, r45
//         movr r45, c[6][263].y
//         movr r45.x, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         movr r45.y, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         movr r45.z, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         movr r45.w, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         rcpr r10.y, r45
//         movr r45, c[6][263].z
//         movr r45.x, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         movr r45.y, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         movr r45.z, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         movr r45.w, constant(10000.00000000, 10000.00000000, 10000.00000000, 10000.00000000).x
//         rcpr r10.z, r45
//         madr r5.yzw, r8.xxyz, r10.xxyz, r5
//         texr r11, r5.yzww, #1, #1, 3D
//         madr r5.yzw, r8.xxyz, r10.xxyz, r9
//         madr r6.xyz, r8, r10, r6
//         texr r8, r5.yzww, #2, #2, 3D
//         madr r5.y, r8.x, constant(0.50000000, 0.25000000, 0.00000000, 0.00000000).x, r11.x
//         texr r8, r6.xyzz, #3, #3, 3D
//         madr r5.y, r8.x, constant(0.50000000, 0.25000000, 0.00000000, 0.00000000).y, r5.y
//         movr r44, c[6][265].w
//         movr r44.x, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r44.y, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r44.z, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r44.w, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         madr r5.y, r5.y, r44, r6.w
//         movr r6.x, constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).x
//         movr r45, c[6][259]
//         movr r45.x, constant(0.00025001, 0.00025001, 0.00025001, 0.00025001).x
//         movr r45.y, constant(0.00005005, 0.00005005, 0.00005005, 0.00005005).x
//         movr r45.z, constant(0.00000556, 0.00000556, 0.00000556, 0.00000556).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r6, r45, -r5.y, r6.x
//         lg2r r8.x, |r6.x|
//         lg2r r8.y, |r6.y|
//         lg2r r8.z, |r6.z|
//         lg2r r8.w, |r6.w|
//         mulr r5.y, r5.x, v2.z
//         movr r44, -c[6][258]
//         movr r44.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, -constant(200.00000000, 200.00000000, 200.00000000, 200.00000000).x
//         movr r44.z, -constant(3000.00000000, 3000.00000000, 3000.00000000, 3000.00000000).x
//         movr r44.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addr r6, r5.x, r44
//         addr r5.x, -|r5.y|, constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).z
//         cmpr r5.x, r5.x, constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).z, r5.y
//         rcpr r5.x, r5.x
//         mulr_sat r9, r5.x, v3
//         mulr_sat r5, r5.x, v4
//         addr r5, -r9, r5
//         maxr r9, r6, constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).w
//         mulr r6, |r5|, r9
//         movr r43, -c[6][250]
//         movr r43.x, -constant(50000.00000000, 50000.00000000, 50000.00000000, 50000.00000000).x
//         movr r43.y, -constant(10000000.00000000, 10000000.00000000, 10000000.00000000, 10000000.00000000).x
//         movr r43.z, -constant(100000000.00000000, 100000000.00000000, 100000000.00000000, 100000000.00000000).x
//         movr r43.w, -constant(340282346638528900000000000000000000000.00000000, 340282346638528900000000000000000000000.00000000, 340282346638528900000000000000000000000.00000000, 340282346638528900000000000000000000000.00000000).x
//         madr r5, r9, |r5|, r43
//         mulr r6, r8, r6
//         ex2r r8.x, r6.x
//         ex2r r8.y, r6.y
//         ex2r r8.z, r6.z
//         ex2r r8.w, r6.w
//         cmpr r5, r5, constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).w, r8
//         mulr r6.x, r5.z, r5.w
//         mulr r6.y, r5.y, r6.x
//         mulr r0.w, r5.x, r6.y
//         addr r8, r5, -constant(1.00000000, 2097120.00000000, 0.00100000, 0.00000000).x
//         mulr r5.x, r5.w, r8.z
//         movr r44, c[6][256]
//         movr r44.x, constant(-0.42302150, -0.42302150, -0.42302150, -0.42302150).x
//         movr r44.y, constant(-0.12867904, -0.12867904, -0.12867904, -0.12867904).x
//         movr r44.z, constant(-0.05550444, -0.05550444, -0.05550444, -0.05550444).x
//         mulr r5.xyz, r5.x, r44
//         movr r44, c[6][257]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r5.xyz, r8.w, r44, r5
//         mulr r5.w, r6.x, r8.y
//         mulr r6.x, r6.y, r8.x
//         movr r44, c[6][255]
//         movr r44.x, constant(-0.39794269, -0.39794269, -0.39794269, -0.39794269).x
//         movr r44.y, constant(-0.15315084, -0.15315084, -0.15315084, -0.15315084).x
//         movr r44.z, constant(-0.06201715, -0.06201715, -0.06201715, -0.06201715).x
//         madr r5.xyz, r5.w, r44, r5
//         movr r44, c[6][254]
//         movr r44.x, constant(-0.01714114, -0.01714114, -0.01714114, -0.01714114).x
//         movr r44.y, constant(-0.01714114, -0.01714114, -0.01714114, -0.01714114).x
//         movr r44.z, constant(-0.03175804, -0.03175804, -0.03175804, -0.03175804).x
//         madr r5.xyz, r6.x, r44, r5
//         movr r44, c[6][270]
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         dp3r r5.w, r7, r44
//         movr r45, c[6][267]
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r6.xyz, r45
//         movr r43, c[6][268]
//         movr r43.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r6.xyz, r5.w, r6, r43
//         madr r6.xyz, r5, r6, -r5
//         movr r44, c[6][271]
//         movr r44.x, constant(1000000.00000000, 1000000.00000000, 1000000.00000000, 1000000.00000000).x
//         movr r44.y, constant(10000000.00000000, 10000000.00000000, 10000000.00000000, 10000000.00000000).x
//         movr r44.z, constant(1000000.00000000, 1000000.00000000, 1000000.00000000, 1000000.00000000).x
//         movr r44.w, constant(10000000.00000000, 10000000.00000000, 10000000.00000000, 10000000.00000000).x
//         movr r43, c[6][271].zwzw
//         movr r43.x, constant(1000000.00000000, 1000000.00000000, 1000000.00000000, 1000000.00000000).x
//         movr r43.y, constant(10000000.00000000, 10000000.00000000, 10000000.00000000, 10000000.00000000).x
//         movr r43.z, constant(1000000.00000000, 1000000.00000000, 1000000.00000000, 1000000.00000000).x
//         movr r43.w, constant(10000000.00000000, 10000000.00000000, 10000000.00000000, 10000000.00000000).x
//         cmpr r7.xy, r5.w, r44, r43
//         addr r5.w, |r5.w|, -r7.x
//         addr r6.w, -r7.x, r7.y
//         rcpr r6.w, r6.w
//         mulr_sat r5.w, r5.w, r6.w
//         madr r0.xyz, r5.w, r6, r5
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R9, R0;                 # [  1][000008]
//     	IPA.SC R1, a[0x304], R9;         # [  2][000010] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R0, a[0x300], R9;         # [  3][000018] TEX0
//     	TEX.P R0, R0, 0x0, 0x0, 2D, 0x8; # [  4][000020]
//     	MOV32I R1, -0x482e13dc;          # [  5][000028]
//     	FFMA.FMZ R0, R0, c[0x9][0x0], R1; # [  6][000030]
//     	MUFU.RCP R0, R0;                 # [  7][000038]
//     	FMNMX.FTZ R0, R0, 1, !PT;        # [  8][000040]
//     	FMNMX.FTZ R7, R0, c[0x9][0x4], PT; # [  9][000048]
//     	IPA.SC R3, a[0x318], R9;         # [ 10][000050] FIXED_FNC_TEXTURE_1_R
//     	FSETP.GT.FTZ.AND P0, PT, -R7, c[0x9][0x8], PT; # [ 11][000058]
//     	IPA.SC R0, a[0x310], R9;         # [ 12][000060] TEX1
//     	@P0 KIL;                         # [ 13][000068]
//     	FMNMX.FTZ R10, R7, 3, PT;        # [ 14][000070]
//     	IPA.SC R1, a[0x314], R9;         # [ 15][000078] FIXED_FNC_TEXTURE_1_T
//     	MOV32I R15, 0x37d1b717;          # [ 16][000080]
//     	FFMA.FMZ R17, R3, R7, c[0x9][0x14]; # [ 17][000088]
//     	FFMA.FMZ R8, R0, R7, c[0x9][0xc]; # [ 18][000090]
//     	MOV32I R11, 0x38d1b717;          # [ 19][000098]
//     	FFMA.FMZ R13, R3, R10, c[0x9][0x14]; # [ 20][0000a0]
//     	FFMA.FMZ R6, R17, R15, c[0x9][0x18]; # [ 21][0000a8]
//     	FFMA.FMZ R16, R1, R7, c[0x9][0x10]; # [ 22][0000b0]
//     	FFMA.FMZ R12, R1, R10, c[0x9][0x10]; # [ 23][0000b8]
//     	FFMA.FMZ R4, R8, R15, c[0x9][0x18]; # [ 24][0000c0]
//     	FFMA.FMZ R5, R16, R15, c[0x9][0x1c]; # [ 25][0000c8]
//     	FFMA.FMZ R10, R0, R10, c[0x9][0xc]; # [ 26][0000d0]
//     	FFMA.FMZ R2, R13, R11, c[0x9][0x18]; # [ 27][0000d8]
//     	FFMA.FMZ R1, R12, R11, c[0x9][0x1c]; # [ 28][0000e0]
//     	TEX.NODEP.T R14, R4, 0x1, 0x1, 3D, 0x1; # [ 29][0000e8]
//     	FFMA.FMZ R0, R10, R11, c[0x9][0x18]; # [ 30][0000f0]
//     	FFMA.FMZ R6, R17, R15, c[0x9][0x20]; # [ 31][0000f8]
//     	FFMA.FMZ R5, R16, R15, c[0x9][0x24]; # [ 32][000100]
//     	FFMA.FMZ R4, R8, R15, c[0x9][0x20]; # [ 33][000108]
//     	TEX.NODEP.T R18, R0, 0x1, 0x1, 3D, 0x1; # [ 34][000110]
//     	FFMA.FMZ R2, R13, R11, c[0x9][0x20]; # [ 35][000118]
//     	FFMA.FMZ R1, R12, R11, c[0x9][0x24]; # [ 36][000120]
//     	TEX.NODEP.T R19, R4, 0x2, 0x2, 3D, 0x1; # [ 37][000128]
//     	FFMA.FMZ R0, R10, R11, c[0x9][0x20]; # [ 38][000130]
//     	FFMA.FMZ R5, R16, R15, c[0x9][0x2c]; # [ 39][000138]
//     	FFMA.FMZ R6, R17, R15, c[0x9][0x28]; # [ 40][000140]
//     	FFMA.FMZ R4, R8, R15, c[0x9][0x28]; # [ 41][000148]
//     	TEX.NODEP.T R16, R0, 0x2, 0x2, 3D, 0x1; # [ 42][000150]
//     	FFMA.FMZ R2, R13, R11, c[0x9][0x28]; # [ 43][000158]
//     	FFMA.FMZ R1, R12, R11, c[0x9][0x2c]; # [ 44][000160]
//     	TEX.NODEP.T R4, R4, 0x3, 0x3, 3D, 0x1; # [ 45][000168]
//     	FFMA.FMZ R0, R10, R11, c[0x9][0x28]; # [ 46][000170]
//     	IPA.SC R12, a[0x328], R9;        # [ 47][000178] FIXED_FNC_TEXTURE_2_R
//     	TEX.NODEP.P R0, R0, 0x3, 0x3, 3D, 0x1; # [ 48][000180]
//     	FMUL.FMZ R1, R7, R3;             # [ 49][000188]
//     	IPA.SC R2, a[0x324], R9;         # [ 50][000190] FIXED_FNC_TEXTURE_2_T
//     	FADD32I.FTZ R5, -|R1|, 0.001;    # [ 51][000198]
//     	IPA.SC R3, a[0x320], R9;         # [ 52][0001a0] TEX2
//     	FCMP.LTU R1, R1, c[0x9][0x40], R5; # [ 53][0001a8]
//     	IPA.SC R6, a[0x32c], R9;         # [ 54][0001b0] FIXED_FNC_TEXTURE_2_Q
//     	IPA.SC R5, a[0x330], R9;         # [ 55][0001b8] TEX3
//     	MUFU.RCP R10, R1;                # [ 56][0001c0]
//     	IPA.SC R11, a[0x338], R9;        # [ 57][0001c8] FIXED_FNC_TEXTURE_3_R
//     	FMUL.FMZ.SAT R3, R10, R3;        # [ 58][0001d0]
//     	IPA.SC R1, a[0x334], R9;         # [ 59][0001d8] FIXED_FNC_TEXTURE_3_T
//     	FMUL.FMZ.SAT R2, R10, R2;        # [ 60][0001e0]
//     	IPA.SC R9, a[0x33c], R9;         # [ 61][0001e8] FIXED_FNC_TEXTURE_3_Q
//     	FMUL.FMZ.SAT R12, R10, R12;      # [ 62][0001f0]
//     	FMUL.FMZ.SAT R6, R10, R6;        # [ 63][0001f8]
//     	FMUL.FMZ.SAT R5, R10, R5;        # [ 64][000200]
//     	FMUL.FMZ.SAT R13, R10, R11;      # [ 65][000208]
//     	FMUL.FMZ.SAT R1, R10, R1;        # [ 66][000210]
//     	FADD.FTZ R12, -R12, R13;         # [ 67][000218]
//     	FMUL.FMZ.SAT R10, R10, R9;       # [ 68][000220]
//     	MOV32I R13, 0x49742400;          # [ 69][000228]
//     	FADD.FTZ R6, -R6, R10;           # [ 70][000230]
//     	MOV32I R11, 0x3e000000;          # [ 71][000238]
//     	MOV32I R10, 0x4b189680;          # [ 72][000240]
//     	FADD.FTZ R1, -R2, R1;            # [ 73][000248]
//     	FCMP.LTU R15, R10, R10, R8;      # [ 74][000250]
//     	FADD.FTZ R2, R7, -3000;          # [ 75][000258]
//     	FCMP.LTU R10, R13, R13, R8;      # [ 76][000260]
//     	FADD.FTZ R5, -R3, R5;            # [ 77][000268]
//     	FADD.FTZ R13, -R10, R15;         # [ 78][000270]
//     	FADD.FTZ R3, R7, -200;           # [ 79][000278]
//     	MUFU.RCP R13, R13;               # [ 80][000280]
//     	FMNMX.FTZ R2, R2, RZ, !PT;       # [ 81][000288]
//     	F2F R12, |R12|;                  # [ 82][000290]
//     	MOV32I R9, 0x3f800000;           # [ 83][000298]
//     	F2F R5, |R5|;                    # [ 84][0002a0]
//     	FMNMX.FTZ R3, R3, RZ, !PT;       # [ 85][0002a8]
//     	F2F R1, |R1|;                    # [ 86][0002b0]
//     	FFMA.FMZ R14, R19, 0.5, R14;     # [ 87][0002b8]
//     	FFMA.FMZ R14, R4, 0.25, R14;     # [ 88][0002c0]
//     	FADD.FTZ R4, R7, -15000;         # [ 89][0002c8]
//     	FFMA.FMZ R11, R14, 3, R11;       # [ 90][0002d0]
//     	FADD.FTZ R14, |R8|, -R10;        # [ 91][0002d8]
//     	FMUL32I.FMZ.SAT R4, R4, 0x378bcf65; # [ 92][0002e0]
//     	FADD.FTZ R10, -R4, 1;            # [ 93][0002e8]
//     	FMNMX.FTZ R7, R7, RZ, !PT;       # [ 94][0002f0]
//     	FMUL.FMZ.SAT R4, R14, R13;       # [ 95][0002f8]
//     	FADD.FTZ R13, R11, -1;           # [ 96][000300]
//     	FCMP.GE R8, R9, 0x3f800, R8;     # [ 97][000308]
//     	FFMA.FMZ R11, R16, 0.5, R18;     # [ 98][000310]
//     	FFMA.FMZ R10, R10, R13, c[0x9][0x30]; # [ 99][000318]
//     	FFMA.FMZ R0, R0, 0.25, R11;      # [100][000320]
//     	FMUL.FMZ R13, R5, R7;            # [101][000328]
//     	F2F R11, |R6|;                   # [102][000330]
//     	FFMA.FMZ R10, R0, 0.5, R10;      # [103][000338]
//     	FMUL.FMZ R6, R12, R2;            # [104][000340]
//     	FFMA.FMZ R0, R2, R12, c[0x9][0x44]; # [105][000348]
//     	FFMA.FMZ R2, R7, R11, c[0x9][0x48]; # [106][000350]
//     	FFMA.FMZ R11, R10, -c[0x9][0x34], R9; # [107][000358]
//     	FFMA.FMZ R12, R10, -c[0x9][0x3c], R9; # [108][000360]
//     	FFMA.FMZ R9, R10, -c[0x9][0x38], R9; # [109][000368]
//     	MUFU.LG2 R12, |R12|;             # [110][000370]
//     	MUFU.LG2 R10, |R11|;             # [111][000378]
//     	FFMA.FMZ R5, R7, R5, c[0x9][0x50]; # [112][000380]
//     	FMUL.FMZ R10, R10, R6;           # [113][000388]
//     	MUFU.LG2 R7, |R9|;               # [114][000390]
//     	FMUL.FMZ R11, R12, R13;          # [115][000398]
//     	FMUL.FMZ R9, R1, R3;             # [116][0003a0]
//     	RRO.EX2 R11, R11;                # [117][0003a8]
//     	FMUL.FMZ R6, R7, R9;             # [118][0003b0]
//     	FFMA.FMZ R1, R3, R1, c[0x9][0x4c]; # [119][0003b8]
//     	RRO.EX2 R7, R10;                 # [120][0003c0]
//     	RRO.EX2 R6, R6;                  # [121][0003c8]
//     	MUFU.EX2 R7, R7;                 # [122][0003d0]
//     	MUFU.EX2 R3, R6;                 # [123][0003d8]
//     	FCMP.GE R6, RZ, 0x3f800, R2;     # [124][0003e0]
//     	MUFU.EX2 R9, R11;                # [125][0003e8]
//     	FCMP.GE R2, RZ, R7, R0;          # [126][0003f0]
//     	FCMP.GE R5, RZ, R9, R5;          # [127][0003f8]
//     	FCMP.GE R0, RZ, R3, R1;          # [128][000400]
//     	FADD.FTZ R7, R2, -1;             # [129][000408]
//     	FMUL.FMZ R1, R2, R6;             # [130][000410]
//     	FADD.FTZ R3, R0, -1;             # [131][000418]
//     	FADD.FTZ R2, R5, -1;             # [132][000420]
//     	FMUL.FMZ R7, R6, R7;             # [133][000428]
//     	FMUL.FMZ R0, R0, R1;             # [134][000430]
//     	FMUL.FMZ R6, R1, R3;             # [135][000438]
//     	FMUL.FMZ R1, R0, R2;             # [136][000440]
//     	FMUL.FMZ R3, R5, R0;             # [137][000448]
//     	FMUL32I.FMZ R2, R7, 0xbe03c470;  # [138][000450]
//     	FMUL32I.FMZ R5, R7, 0xbd6358a1;  # [139][000458]
//     	FMUL32I.FMZ R0, R7, 0xbed89646;  # [140][000460]
//     	FFMA.FMZ R2, R6, c[0x9][0x58], R2; # [141][000468]
//     	FFMA.FMZ R5, R6, c[0x9][0x5c], R5; # [142][000470]
//     	FFMA.FMZ R0, R6, c[0x9][0x54], R0; # [143][000478]
//     	FFMA.FMZ R2, R1, c[0x9][0x64], R2; # [144][000480]
//     	FFMA.FMZ R6, R1, c[0x9][0x60], R5; # [145][000488]
//     	FFMA.FMZ R0, R1, c[0x9][0x64], R0; # [146][000490]
//     	FFMA.FMZ R7, R6, R8, -R6;        # [147][000498]
//     	FFMA.FMZ R1, R2, R8, -R2;        # [148][0004a0]
//     	FFMA.FMZ R5, R0, R8, -R0;        # [149][0004a8]
//     	FFMA.FMZ R1, R4, R1, R2;         # [150][0004b0]
//     	FFMA.FMZ R0, R4, R5, R0;         # [151][0004b8]
//     	FFMA.FMZ R2, R4, R7, R6;         # [152][0004c0]
//     	EXIT;                            # [153][0004c8]
//     	END
//     END_SECTION
// END_SHADER
// 
