// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0xafbc645beb23b5c2
//         UCODE_HASH: 0x1b76936fc54eece2
//         POOL: APP
//         VERSION: 20
//         # USES: 5305
//         // Time: 66.813ms [7.513 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 19
//         USED_TEXTURE_BITS: 0x71
//         TEXTURE_SLOTS: 7
//         SAMPLER_SLOTS: 7
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//             KILLS_PIXELS
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX00_R              PERSPECTIVE
//             TEX00_Q              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX03_Q              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x0006d462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0xaaaa2aaa
//         0x00000000      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c1, 0.00000000, 32.00000000, 1.00000000, 0.00000000 ; 0x000000 0x42000000 0x3f800000 0x000000
        dcl_texcoord0_pp v0
        dcl_texcoord1_pp v1.rgb
        dcl_texcoord2_pp v2
        dcl_texcoord3 v3
        dcl_2d s0
        dcl_volume s4
        dcl_2d s5
        dcl_2d s6
        texld_pp r2, v0, s0
        nrm_pp r3.xyz, v2
        max_pp r1.w, r3_abs.y, r3_abs.z
        mul_pp r0.x, r2.w, v0.w
        max_pp r0.w, r3_abs.x, r1.w
        rcp_pp r0.w, r0.w
        mul_pp r1.xyz, r3, c5
        dp3_sat_pp r0.z, c17, r3
        mad_pp r1.xyz, r1, r0.w, v3
        texld_pp r1, r1, s4
        texld_pp r3, v0, s5
        add_pp r3.xy, -r3.wyzw, v1
        dp2add_pp r0.w, r3, r3, c1.x
        add_pp r4.xyz, r1, r1
        mad_sat_pp r0.w, r0.w, -c1.y, c1.z
        mad_pp r1.xyz, c18, r0.z, -c18
        mul_pp r3.xyz, r0.w, c19
        mov_pp r5.xyz, c18
        mad_pp r1.xyz, c7.x, r1, r5
        mul_pp r5.xyz, r1.w, r3
        texld_pp r3, v0, s6
        mul_pp r3.xyz, r5, r3
        mad_pp r1.xyz, r1.w, r1, r4
        mul_pp r3.xyz, r3, v2.w
        mad_pp r2.xyz, r2, r1, r3
        mov_pp r1.xyz, c19
        mul_pp r1.xyz, r1, c6
        mul_pp r1.w, r1.w, v1.z
        mad_pp r1.xyz, r1, c8.x, -r2
        mov_pp r0.yzw, r0.x
        mad_pp r1.xyz, r1.w, r1, r2
        mov_pp oC0.w, r0.w
        mad_pp r1.xyz, r1, v0.z, -c0
        texkill r0
        mad_pp oC0.xyz, v3.w, r1, c0
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0001 0x00000000 0x42000000
//         0x3f800000 0x00000000 0x0200001f 0x80000005
//         0x902f0000 0x0200001f 0x80010005 0x90270001
//         0x0200001f 0x80020005 0x902f0002 0x0200001f
//         0x80030005 0x900f0003 0x0200001f 0x90000000
//         0xa00f0800 0x0200001f 0xa0000000 0xa00f0804
//         0x0200001f 0x90000000 0xa00f0805 0x0200001f
//         0x90000000 0xa00f0806 0x03000042 0x802f0002
//         0x90e40000 0xa0e40800 0x02000024 0x80270003
//         0x90e40002 0x0300000b 0x80280001 0x8b550003
//         0x8baa0003 0x03000005 0x80210000 0x80ff0002
//         0x90ff0000 0x0300000b 0x80280000 0x8b000003
//         0x80ff0001 0x02000006 0x80280000 0x80ff0000
//         0x03000005 0x80270001 0x80e40003 0xa0e40005
//         0x03000008 0x80340000 0xa0e40011 0x80e40003
//         0x04000004 0x80270001 0x80e40001 0x80ff0000
//         0x90e40003 0x03000042 0x802f0001 0x80e40001
//         0xa0e40804 0x03000042 0x802f0003 0x90e40000
//         0xa0e40805 0x03000002 0x80230003 0x81e70003
//         0x90e40001 0x0400005a 0x80280000 0x80e40003
//         0x80e40003 0xa0000001 0x03000002 0x80270004
//         0x80e40001 0x80e40001 0x04000004 0x80380000
//         0x80ff0000 0xa1550001 0xa0aa0001 0x04000004
//         0x80270001 0xa0e40012 0x80aa0000 0xa1e40012
//         0x03000005 0x80270003 0x80ff0000 0xa0e40013
//         0x02000001 0x80270005 0xa0e40012 0x04000004
//         0x80270001 0xa0000007 0x80e40001 0x80e40005
//         0x03000005 0x80270005 0x80ff0001 0x80e40003
//         0x03000042 0x802f0003 0x90e40000 0xa0e40806
//         0x03000005 0x80270003 0x80e40005 0x80e40003
//         0x04000004 0x80270001 0x80ff0001 0x80e40001
//         0x80e40004 0x03000005 0x80270003 0x80e40003
//         0x90ff0002 0x04000004 0x80270002 0x80e40002
//         0x80e40001 0x80e40003 0x02000001 0x80270001
//         0xa0e40013 0x03000005 0x80270001 0x80e40001
//         0xa0e40006 0x03000005 0x80280001 0x80ff0001
//         0x90aa0001 0x04000004 0x80270001 0x80e40001
//         0xa0000008 0x81e40002 0x02000001 0x802e0000
//         0x80000000 0x04000004 0x80270001 0x80ff0001
//         0x80e40001 0x80e40002 0x02000001 0x80280800
//         0x80ff0000 0x04000004 0x80270001 0x80e40001
//         0x90aa0000 0xa1e40000 0x01000041 0x800f0000
//         0x04000004 0x80270800 0x90ff0003 0x80e40001
//         0xa0e40000 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f29d580 // 0.66341400
//         COP_CONST[1]: 0x3f248dba // 0.64278756
//         COP_CONST[2]: 0xbf28a8a9 // -0.65882356
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x3f28a8a9 // 0.65882356
//         # USER FLOAT CONST: c[6][251] = 0x3f28a8a9 // 0.65882356
//         # USER FLOAT CONST: c[6][252] = 0x3f28a8a9 // 0.65882356
//         # USER FLOAT CONST: c[6][270] = 0x3bc00000 // 0.00585938
//         # USER FLOAT CONST: c[6][271] = 0x3bc00000 // 0.00585938
//         # USER FLOAT CONST: c[6][272] = 0x3ec00000 // 0.37500000
//         # USER FLOAT CONST: c[6][282] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][318] = 0x3ec41b7c // 0.38302220
//         # USER FLOAT CONST: c[6][319] = 0x3f29d580 // 0.66341400
//         # USER FLOAT CONST: c[6][320] = 0x3f248dba // 0.64278756
//         # USER FLOAT CONST: c[6][322] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][323] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][324] = 0x3f33e71b // 0.70274512
//         # USER FLOAT CONST: c[6][326] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][327] = 0x3f4ccccd // 0.80000000
//         # USER FLOAT CONST: c[6][328] = 0x3f33e71b // 0.70274512
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@0.65882356
//         ##    ~c0.y -> c[6][251] = 100.00%@0.65882356
//         ##    ~c0.z -> c[6][252] = 100.00%@0.65882356
//         ##    ~c5.x -> c[6][270] = 100.00%@0.00585938
//         ##    ~c5.y -> c[6][271] = 100.00%@0.00585938
//         ##    ~c5.z -> c[6][272] = 100.00%@0.37500000
//         ##     c6.x -> c[6][274] = 35.29%@0.35686300 23.52%@0.32549000 23.52%@0.43921600 17.66%@0.56078400
//         ##     c6.y -> c[6][275] = 35.29%@0.31764702 23.52%@0.33725500 23.52%@0.45098000 17.66%@0.39607800
//         ##     c6.z -> c[6][276] = 35.29%@0.21568600 23.52%@0.20392200 23.52%@0.28235302 17.66%@0.58039200
//         ##     c7.x -> c[6][278] = 58.81%@0.60000004 23.52%@0.90000000 17.66%@0.25000000
//         ##    ~c8.x -> c[6][282] = 100.00%@1.00000000
//         ##    ~c17.x -> c[6][318] = 100.00%@0.38302220
//         ##    ~c17.y -> c[6][319] = 100.00%@0.66341400
//         ##    ~c17.z -> c[6][320] = 100.00%@0.64278756
//         ##    ~c18.x -> c[6][322] = 100.00%@0.80000000
//         ##    ~c18.y -> c[6][323] = 100.00%@0.80000000
//         ##    ~c18.z -> c[6][324] = 100.00%@0.70274512
//         ##    ~c19.x -> c[6][326] = 100.00%@0.80000000
//         ##    ~c19.y -> c[6][327] = 100.00%@0.80000000
//         ##    ~c19.z -> c[6][328] = 100.00%@0.70274512
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,3360x2100,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0x76419358,0x000003a9
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000003a9
//         STAGEINFO:(0x5,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,A8R8G8B8,0,0,0), 0x808080ff,0x000003a9
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x68b26980,0x000003a9
//         RENDERTARGETINFO: 1,3360x2100,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0x17a015ca,0x00000750
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000750
//         STAGEINFO:(0x5,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,A8R8G8B8,0,0,0), 0x808080ff,0x00000750
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xc9dd97a8,0x00000750
//         RENDERTARGETINFO: 1,3360x2100,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0x3616691a,0x000004e0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000004e0
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x70f6d60f,0x000004e0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x6551f6ec,0x000004e0
//         RENDERTARGETINFO: 1,3360x2100,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0x13407fd4,0x000004e0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000004e0
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x70f6d60f,0x000004e0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Clamp/Clamp/Clamp,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x6551f6ec,0x000004e0
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "ATTR02")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 1 : 
//          (attr 1 4 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texh r7, v1.xyzz, #0, #0, 2D
//         nrmh r8.xyz, v3
//         maxh r6.w, |r8.y|, |r8.z|
//         mulh r5.x, r7.w, v1.w
//         maxh r5.w, |r8.x|, r6.w
//         rcph r5.w, r5.w
//         movr r44, c[6][255]
//         movr r44.x, constant(0.00585938, 0.00585938, 0.00585938, 0.00585938).x
//         movr r44.y, constant(0.00585938, 0.00585938, 0.00585938, 0.00585938).x
//         movr r44.z, constant(0.37500000, 0.37500000, 0.37500000, 0.37500000).x
//         mulh r6.xyz, r8, r44
//         movr r45, c[6][267]
//         movr r45.x, constant(0.38302220, 0.38302220, 0.38302220, 0.38302220).x
//         movr r45.y, constant(0.66341400, 0.66341400, 0.66341400, 0.66341400).x
//         movr r45.z, constant(0.64278756, 0.64278756, 0.64278756, 0.64278756).x
//         dp3h_sat r5.z, r45, r8
//         madh r6.xyz, r6, r5.w, v4
//         texh r6, r6.xyzz, #4, #4, 3D
//         texh r8, v1.xyzz, #5, #5, 2D
//         addh r8.xy, -r8.wyzw, v2
//         dp2ah r5.w, r8, r8, constant(0.00000000, 32.00000000, 1.00000000, 0.00000000).x
//         addh r9.xyz, r6, r6
//         madh_sat r5.w, r5.w, -constant(0.00000000, 32.00000000, 1.00000000, 0.00000000).y, constant(0.00000000, 32.00000000, 1.00000000, 0.00000000).z
//         movr r45, c[6][268]
//         movr r45.x, constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r45.y, constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r45.z, constant(0.70274512, 0.70274512, 0.70274512, 0.70274512).x
//         movr r43, -c[6][268]
//         movr r43.x, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r43.y, -constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r43.z, -constant(0.70274512, 0.70274512, 0.70274512, 0.70274512).x
//         madh r6.xyz, r45, r5.z, r43
//         movr r44, c[6][269]
//         movr r44.x, constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r44.y, constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r44.z, constant(0.70274512, 0.70274512, 0.70274512, 0.70274512).x
//         mulh r8.xyz, r5.w, r44
//         movr r45, c[6][268]
//         movr r45.x, constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r45.y, constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r45.z, constant(0.70274512, 0.70274512, 0.70274512, 0.70274512).x
//         movh r10.xyz, r45
//         madh r6.xyz, c[6][257].x, r6, r10
//         mulh r10.xyz, r6.w, r8
//         texh r8, v1.xyzz, #6, #6, 2D
//         mulh r8.xyz, r10, r8
//         madh r6.xyz, r6.w, r6, r9
//         mulh r8.xyz, r8, v3.w
//         madh r7.xyz, r7, r6, r8
//         movr r45, c[6][269]
//         movr r45.x, constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r45.y, constant(0.80000000, 0.80000000, 0.80000000, 0.80000000).x
//         movr r45.z, constant(0.70274512, 0.70274512, 0.70274512, 0.70274512).x
//         movh r6.xyz, r45
//         mulh r6.xyz, r6, c[6][256]
//         mulh r6.w, r6.w, v2.z
//         movr r44, c[6][258].x
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madh r6.xyz, r6, r44, -r7
//         movh r5.yzw, r5.x
//         madh r6.xyz, r6.w, r6, r7
//         movh r0.w, r5.w
//         movr r43, -c[6][250]
//         movr r43.x, -constant(0.65882356, 0.65882356, 0.65882356, 0.65882356).x
//         movr r43.y, -constant(0.65882356, 0.65882356, 0.65882356, 0.65882356).x
//         movr r43.z, -constant(0.65882356, 0.65882356, 0.65882356, 0.65882356).x
//         madh r6.xyz, r6, v1.z, r43
//         movr.c rc, r5
//         kil LT
//         movr r43, c[6][250]
//         movr r43.x, constant(0.65882356, 0.65882356, 0.65882356, 0.65882356).x
//         movr r43.y, constant(0.65882356, 0.65882356, 0.65882356, 0.65882356).x
//         movr r43.z, constant(0.65882356, 0.65882356, 0.65882356, 0.65882356).x
//         madh r0.xyz, v4.w, r6, r43
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R11, R0;                # [  1][000008]
//     	IPA.SC R9, a[0x304], R11;        # [  2][000010] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R8, a[0x300], R11;        # [  3][000018] TEX0
//     	TEX.NODEP.P R0, R8, 0x0, 0x0, 2D; # [  4][000020]
//     	IPA.SC R4, a[0x30c], R11;        # [  5][000028] FIXED_FNC_TEXTURE_0_Q
//     	FMUL.FMZ R3, R3, R4;             # [  6][000030]
//     	FSETP.LT.AND P0, PT, R3, RZ, PT; # [  7][000038]
//     	@P0 KIL;                         # [  8][000040]
//     	IPA.SC R4, a[0x320], R11;        # [  9][000048] TEX2
//     	FMUL.FTZ R5, R4, R4;             # [ 10][000050]
//     	IPA.SC R6, a[0x324], R11;        # [ 11][000058] FIXED_FNC_TEXTURE_2_T
//     	FFMA.FTZ R5, R6, R6, R5;         # [ 12][000060]
//     	IPA.SC R7, a[0x328], R11;        # [ 13][000068] FIXED_FNC_TEXTURE_2_R
//     	FFMA.FTZ R5, R7, R7, R5;         # [ 14][000070]
//     	TEX.NODEP.P R12, R8, 0x5, 0x5, 2D, 0xa; # [ 15][000078]
//     	MUFU.RSQ R5, R5;                 # [ 16][000080]
//     	FMUL.FTZ R16, R7, R5;            # [ 17][000088]
//     	FMUL.FTZ R15, R6, R5;            # [ 18][000090]
//     	FMUL.FTZ R14, R4, R5;            # [ 19][000098]
//     	IPA.SC R6, a[0x338], R11;        # [ 20][0000a0] FIXED_FNC_TEXTURE_3_R
//     	FMNMX.FTZ R4, |R15|, |R16|, !PT; # [ 21][0000a8]
//     	IPA.SC R5, a[0x334], R11;        # [ 22][0000b0] FIXED_FNC_TEXTURE_3_T
//     	FMNMX.FTZ R7, |R14|, R4, !PT;    # [ 23][0000b8]
//     	FMUL.FMZ R18, R16, 0.375;        # [ 24][0000c0]
//     	IPA.SC R4, a[0x330], R11;        # [ 25][0000c8] TEX3
//     	MUFU.RCP R10, R7;                # [ 26][0000d0]
//     	FMUL.FMZ R17, R15, 0x3bc00;      # [ 27][0000d8]
//     	FMUL.FMZ R7, R14, 0x3bc00;       # [ 28][0000e0]
//     	FFMA.FMZ R6, R18, R10, R6;       # [ 29][0000e8]
//     	FFMA.FMZ R5, R17, R10, R5;       # [ 30][0000f0]
//     	FFMA.FMZ R4, R7, R10, R4;        # [ 31][0000f8]
//     	FMUL32I.FTZ R14, R14, 0x3ec41b7c; # [ 32][000100]
//     	TEX.NODEP.T R4, R4, 0x4, 0x4, 3D; # [ 33][000108]
//     	TEX.NODEP.P R8, R8, 0x6, 0x6, 2D, 0x7; # [ 34][000110]
//     	FFMA.FTZ R14, R15, c[0x9][0x0], R14; # [ 35][000118]
//     	IPA.SC R17, a[0x310], R11;       # [ 36][000120] TEX1
//     	MOV32I R15, 0x3f800000;          # [ 37][000128]
//     	IPA.SC R18, a[0x314], R11;       # [ 38][000130] FIXED_FNC_TEXTURE_1_T
//     	FFMA.FTZ.SAT R16, R16, c[0x9][0x4], R14; # [ 39][000138]
//     	FADD.FTZ R13, -R13, R17;         # [ 40][000140]
//     	FADD.FTZ R17, -R12, R18;         # [ 41][000148]
//     	FMUL.FTZ R13, R13, R13;          # [ 42][000150]
//     	MOV32I R12, 0x3f4ccccd;          # [ 43][000158]
//     	FFMA.FTZ R14, R17, R17, R13;     # [ 44][000160]
//     	MOV32I R13, 0x3f33e71b;          # [ 45][000168]
//     	FFMA.FMZ R17, R16, R12, -R12;    # [ 46][000170]
//     	FFMA.FMZ.SAT R14, R14, -32, R15; # [ 47][000178]
//     	FFMA.FMZ R16, R16, R13, -R13;    # [ 48][000180]
//     	FFMA.FMZ R15, R17, c[0x6][0x1010], R12; # [ 49][000188]
//     	FMUL32I.FMZ R17, R14, 0x3f33e71b; # [ 50][000190]
//     	FFMA.FMZ R16, R16, c[0x6][0x1010], R13; # [ 51][000198]
//     	FADD.FTZ R4, R4, R4;             # [ 52][0001a0]
//     	FADD.FTZ R5, R5, R5;             # [ 53][0001a8]
//     	FADD.FTZ R6, R6, R6;             # [ 54][0001b0]
//     	FMUL.FMZ R17, R7, R17;           # [ 55][0001b8]
//     	FFMA.FMZ R4, R7, R15, R4;        # [ 56][0001c0]
//     	FFMA.FMZ R5, R7, R15, R5;        # [ 57][0001c8]
//     	FFMA.FMZ R6, R7, R16, R6;        # [ 58][0001d0]
//     	IPA.SC R15, a[0x318], R11;       # [ 59][0001d8] FIXED_FNC_TEXTURE_1_R
//     	FMUL32I.FMZ R16, R14, 0.8;       # [ 60][0001e0]
//     	FMUL.FMZ R15, R7, R15;           # [ 61][0001e8]
//     	FMUL.FMZ R14, R17, R10;          # [ 62][0001f0]
//     	IPA.SC R10, a[0x32c], R11;       # [ 63][0001f8] FIXED_FNC_TEXTURE_2_Q
//     	FMUL.FMZ R17, R7, R16;           # [ 64][000200]
//     	FMUL.FMZ R9, R17, R9;            # [ 65][000208]
//     	IPA.SC R16, a[0x308], R11;       # [ 66][000210] FIXED_FNC_TEXTURE_0_R
//     	FMUL.FMZ R8, R17, R8;            # [ 67][000218]
//     	IPA.SC R7, a[0x33c], R11;        # [ 68][000220] FIXED_FNC_TEXTURE_3_Q
//     	FMUL.FMZ R11, R14, R10;          # [ 69][000228]
//     	FMUL.FMZ R9, R9, R10;            # [ 70][000230]
//     	FMUL.FMZ R8, R8, R10;            # [ 71][000238]
//     	FFMA.FMZ R6, R2, R6, R11;        # [ 72][000240]
//     	FFMA.FMZ R0, R0, R4, R8;         # [ 73][000248]
//     	FFMA.FMZ R2, R1, R5, R9;         # [ 74][000250]
//     	FFMA.FTZ R5, R13, c[0x6][0x1008], -R6; # [ 75][000258]
//     	FFMA.FTZ R1, R12, c[0x6][0x1000], -R0; # [ 76][000260]
//     	FFMA.FTZ R4, R12, c[0x6][0x1004], -R2; # [ 77][000268]
//     	FFMA.FMZ R5, R15, R5, R6;        # [ 78][000270]
//     	FFMA.FMZ R0, R15, R1, R0;        # [ 79][000278]
//     	FFMA.FMZ R2, R15, R4, R2;        # [ 80][000280]
//     	FFMA.FMZ R0, R0, R16, c[0x9][0x8]; # [ 81][000288]
//     	FFMA.FMZ R4, R5, R16, c[0x9][0x8]; # [ 82][000290]
//     	FFMA.FMZ R1, R2, R16, c[0x9][0x8]; # [ 83][000298]
//     	FFMA.FMZ R0, R7, R0, -c[0x9][0x8]; # [ 84][0002a0]
//     	FFMA.FMZ R2, R7, R4, -c[0x9][0x8]; # [ 85][0002a8]
//     	FFMA.FMZ R1, R7, R1, -c[0x9][0x8]; # [ 86][0002b0]
//     	EXIT;                            # [ 87][0002b8]
//     	END
//     END_SECTION
// END_SHADER
// 
