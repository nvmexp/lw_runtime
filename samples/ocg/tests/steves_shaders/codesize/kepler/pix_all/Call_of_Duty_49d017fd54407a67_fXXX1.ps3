// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x49d017fd54407a67
//         UCODE_HASH: 0x20d26139e13ea437
//         POOL: APP
//         VERSION: 20
//         # USES: 2601
//         // Time: 57.931ms [4.477 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//         TEXINFO: SHADOWMAP:0x20
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 27
//         USED_TEXTURE_BITS: 0xf3
//         TEXTURE_SLOTS: 8
//         SAMPLER_SLOTS: 8
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             COLOR_DIFFUSE_RED    PERSPECTIVE
//             COLOR_DIFFUSE_GREEN  PERSPECTIVE
//             COLOR_DIFFUSE_BLUE   PERSPECTIVE
//             COLOR_DIFFUSE_ALPHA  PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX01_Q              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x000000aa      0x2a2aaa0a
//         0x002a2a2a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c1, 4.07999992, 4.06451607, -2.07999992, -2.06451607 ; 0x40828f5c 0x40821084 0xc0051eb8 0xc0042108
        def c7, -0.50000000, 1.00000000, 0.00000000, 2.50000000 ; 0xbf000000 0x3f800000 0x000000 0x40200000
        def c8, 9.37751770, 8.00000000, 6.00000000, 7.00000000 ; 0x41160a50 0x41000000 0x40c00000 0x40e00000
        def c9, -0.99924999, 1.44269502, 0.25000000, 0.00000000 ; 0xbf7fced9 0x3fb8aa3b 0x3e800000 0x000000
        dcl_color0 v0
        dcl_texcoord0 v1.rg
        dcl_texcoord1 v2
        dcl_texcoord2 v3.rgb
        dcl_texcoord3 v4.rgb
        dcl_texcoord4 v5.rgb
        dcl_texcoord5 v6.rgb
        dcl_texcoord6 v7.rgb
        dcl_2d s0
        dcl_lwbe s1
        dcl_volume s4
        dcl_2d s5
        dcl_2d s6
        dcl_2d s7
        add r0.xy, c5, v5
        mul r0.zw, c7.xyyz, v5.z
        texldl r0, r0, s5
        add r1.xy, -c5, v5
        mul r1.zw, c7.xyyz, v5.z
        texldl r1, r1, s5
        mov r0.y, r1.x
        add r1.xy, c5.zwzw, v5
        mul r1.zw, c7.xyyz, v5.z
        texldl r1, r1, s5
        mov r0.z, r1.x
        add r1.xy, -c5.zwzw, v5
        mul r1.zw, c7.xyyz, v5.z
        texldl r1, r1, s5
        mov r0.w, r1.x
        dp4_pp r0.x, r0, c9.z
        mul r1.zw, c7.xyyz, v5.z
        mad_pp r2.zw, v5.xyxy, c2.w, c2.xyxy
        add r1.xy, r2.zwzw, c5
        texldl r1, r1, s5
        mul r3.zw, c7.xyyz, v5.z
        add r3.xy, r2.zwzw, -c5
        texldl r3, r3, s5
        mov r1.y, r3.x
        mul r3.zw, c7.xyyz, v5.z
        add r3.xy, r2.zwzw, c5.zwzw
        texldl r3, r3, s5
        mov r1.z, r3.x
        add r3.xy, r2.zwzw, -c5.zwzw
        mul r3.zw, c7.xyyz, v5.z
        texldl r3, r3, s5
        mov r1.w, r3.x
        dp4_pp r0.y, r1, c9.z
        texld_pp r1, v1, s6
        mad_pp r0.zw, r1.xywy, c1.xyxy, c1
        texld_pp r1, v1, s0
        mad r1.w, r1.w, v0.w, c7.x
        mul_pp r1.xyz, r1, v0
        cmp_pp r0.zw, r1.w, r0, c7.z
        mov r3.xyz, v2
        mad_pp r3.xyz, r0.z, v4, r3
        mad_pp r3.xyz, r0.w, v3, r3
        nrm_pp r4.xyz, r3
        max_pp r0.z, r4_abs.y, r4_abs.z
        max_pp r3.x, r4_abs.x, r0.z
        rcp r0.z, r3.x
        mul_pp r3.xyz, r4, c3
        mad_pp r3.xyz, r3, r0.z, v7
        texld_pp r3, r3, s4
        mov r2.xy, v5
        mad_pp r2, r2, c4.xyxy, c4.zzzw
        max_pp r0.zw, r2_abs.xyxz, r2_abs.xyyw
        add_sat_pp r0.zw, -r0, c8.y
        lrp_pp r2.x, r0.w, r0.y, r3.w
        add_pp r2.yzw, r3.xxyz, r3.xxyz
        mad r0.y, r0.z, -r0.w, r0.z
        cmp_pp r0.y, -r0_abs.y, r0.z, c7.y
        lrp_pp r3.x, r0.y, r0.x, r2.x
        nrm_pp r0.xyz, v6
        dp3_pp r0.w, r0, r4
        add_pp r2.x, r0.w, r0.w
        add_pp r0.w, -r0_abs.w, c7.y
        mad_pp r5.xyz, r4, -r2.x, r0
        dp3_sat_pp r2.x, c17, r4
        dp3_pp r0.x, c33, r0
        dp3_pp r0.y, r5, c17
        add_pp r0.y, r0.y, c9.x
        texld_pp r4, v1, s7
        mul_pp r4.xyz, r4, r4
        cmp_pp r4, r1.w, r4, c7.z
        mul_pp r0.z, r4.w, c8.x
        exp_pp r0.z, r0.z
        add_pp r0.z, r0.z, c8.w
        mul_pp r0.y, r0.y, r0.z
        mul_pp r0.y, r0.y, c9.y
        exp_sat_pp r0.y, r0.y
        mul_pp r3.yzw, r0.y, c19.xxyz
        mad_pp r5.w, r4.w, -c8.y, c8.z
        texldl_pp r5, r5, s1
        mul_pp r5.xyz, r5, r5
        mad_pp r3.yzw, r3.x, r3, r5.xxyz
        mov r5.zw, c7
        cmp_pp r5.xyz, r1.w, c6, r5.zzw
        pow_pp r4.w, r0.w, r5.z
        lrp_pp r0.y, r4.w, r5.y, r5.x
        mul_pp r0.yzw, r4.xxyz, r0.y
        mul_pp r0.yzw, r3, r0
        mul_pp r2.yzw, r2, r2
        mul_pp r3.yzw, r2.x, c18.xxyz
        mad_pp r2.xyz, r3.x, r3.yzw, r2.yzw
        mul_pp r1.xyz, r1, r1
        cmp_pp r3.xyz, r1.w, r1, c7.z
        mad_pp r0.yzw, r3.xxyz, r2.xxyz, r0
        add_pp r0.x, r0.x, -c32.y
        mul_sat_pp r0.x, r0.x, c32.z
        mov_pp r1.xyz, c0
        add_pp r1.xyz, -r1, c34
        mad_pp r1.xyz, r0.x, r1, c0
        lrp_pp r2.xyz, v2.w, r0.yzw, r1
        cmp r2.w, r1.w, c7.y, c7.z
        mov r3.w, r2.w
        cmp_pp oC0, r1.w, r2, r3
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0001 0x40828f5c 0x40821084
//         0xc0051eb8 0xc0042108 0x05000051 0xa00f0007
//         0xbf000000 0x3f800000 0x00000000 0x40200000
//         0x05000051 0xa00f0008 0x41160a50 0x41000000
//         0x40c00000 0x40e00000 0x05000051 0xa00f0009
//         0xbf7fced9 0x3fb8aa3b 0x3e800000 0x00000000
//         0x0200001f 0x8000000a 0x900f0000 0x0200001f
//         0x80000005 0x90030001 0x0200001f 0x80010005
//         0x900f0002 0x0200001f 0x80020005 0x90070003
//         0x0200001f 0x80030005 0x90070004 0x0200001f
//         0x80040005 0x90070005 0x0200001f 0x80050005
//         0x90070006 0x0200001f 0x80060005 0x90070007
//         0x0200001f 0x90000000 0xa00f0800 0x0200001f
//         0x98000000 0xa00f0801 0x0200001f 0xa0000000
//         0xa00f0804 0x0200001f 0x90000000 0xa00f0805
//         0x0200001f 0x90000000 0xa00f0806 0x0200001f
//         0x90000000 0xa00f0807 0x03000002 0x80030000
//         0xa0e40005 0x90e40005 0x03000005 0x800c0000
//         0xa0940007 0x90aa0005 0x0300005f 0x800f0000
//         0x80e40000 0xa0e40805 0x03000002 0x80030001
//         0xa1e40005 0x90e40005 0x03000005 0x800c0001
//         0xa0940007 0x90aa0005 0x0300005f 0x800f0001
//         0x80e40001 0xa0e40805 0x02000001 0x80020000
//         0x80000001 0x03000002 0x80030001 0xa0ee0005
//         0x90e40005 0x03000005 0x800c0001 0xa0940007
//         0x90aa0005 0x0300005f 0x800f0001 0x80e40001
//         0xa0e40805 0x02000001 0x80040000 0x80000001
//         0x03000002 0x80030001 0xa1ee0005 0x90e40005
//         0x03000005 0x800c0001 0xa0940007 0x90aa0005
//         0x0300005f 0x800f0001 0x80e40001 0xa0e40805
//         0x02000001 0x80080000 0x80000001 0x03000009
//         0x80210000 0x80e40000 0xa0aa0009 0x03000005
//         0x800c0001 0xa0940007 0x90aa0005 0x04000004
//         0x802c0002 0x90440005 0xa0ff0002 0xa0440002
//         0x03000002 0x80030001 0x80ee0002 0xa0e40005
//         0x0300005f 0x800f0001 0x80e40001 0xa0e40805
//         0x03000005 0x800c0003 0xa0940007 0x90aa0005
//         0x03000002 0x80030003 0x80ee0002 0xa1e40005
//         0x0300005f 0x800f0003 0x80e40003 0xa0e40805
//         0x02000001 0x80020001 0x80000003 0x03000005
//         0x800c0003 0xa0940007 0x90aa0005 0x03000002
//         0x80030003 0x80ee0002 0xa0ee0005 0x0300005f
//         0x800f0003 0x80e40003 0xa0e40805 0x02000001
//         0x80040001 0x80000003 0x03000002 0x80030003
//         0x80ee0002 0xa1ee0005 0x03000005 0x800c0003
//         0xa0940007 0x90aa0005 0x0300005f 0x800f0003
//         0x80e40003 0xa0e40805 0x02000001 0x80080001
//         0x80000003 0x03000009 0x80220000 0x80e40001
//         0xa0aa0009 0x03000042 0x802f0001 0x90e40001
//         0xa0e40806 0x04000004 0x802c0000 0x80740001
//         0xa0440001 0xa0e40001 0x03000042 0x802f0001
//         0x90e40001 0xa0e40800 0x04000004 0x80080001
//         0x80ff0001 0x90ff0000 0xa0000007 0x03000005
//         0x80270001 0x80e40001 0x90e40000 0x04000058
//         0x802c0000 0x80ff0001 0x80e40000 0xa0aa0007
//         0x02000001 0x80070003 0x90e40002 0x04000004
//         0x80270003 0x80aa0000 0x90e40004 0x80e40003
//         0x04000004 0x80270003 0x80ff0000 0x90e40003
//         0x80e40003 0x02000024 0x80270004 0x80e40003
//         0x0300000b 0x80240000 0x8b550004 0x8baa0004
//         0x0300000b 0x80210003 0x8b000004 0x80aa0000
//         0x02000006 0x80040000 0x80000003 0x03000005
//         0x80270003 0x80e40004 0xa0e40003 0x04000004
//         0x80270003 0x80e40003 0x80aa0000 0x90e40007
//         0x03000042 0x802f0003 0x80e40003 0xa0e40804
//         0x02000001 0x80030002 0x90e40005 0x04000004
//         0x802f0002 0x80e40002 0xa0440004 0xa0ea0004
//         0x0300000b 0x802c0000 0x8b840002 0x8bd40002
//         0x03000002 0x803c0000 0x81e40000 0xa0550008
//         0x04000012 0x80210002 0x80ff0000 0x80550000
//         0x80ff0003 0x03000002 0x802e0002 0x80900003
//         0x80900003 0x04000004 0x80020000 0x80aa0000
//         0x81ff0000 0x80aa0000 0x04000058 0x80220000
//         0x8c550000 0x80aa0000 0xa0550007 0x04000012
//         0x80210003 0x80550000 0x80000000 0x80000002
//         0x02000024 0x80270000 0x90e40006 0x03000008
//         0x80280000 0x80e40000 0x80e40004 0x03000002
//         0x80210002 0x80ff0000 0x80ff0000 0x03000002
//         0x80280000 0x8cff0000 0xa0550007 0x04000004
//         0x80270005 0x80e40004 0x81000002 0x80e40000
//         0x03000008 0x80310002 0xa0e40011 0x80e40004
//         0x03000008 0x80210000 0xa0e40021 0x80e40000
//         0x03000008 0x80220000 0x80e40005 0xa0e40011
//         0x03000002 0x80220000 0x80550000 0xa0000009
//         0x03000042 0x802f0004 0x90e40001 0xa0e40807
//         0x03000005 0x80270004 0x80e40004 0x80e40004
//         0x04000058 0x802f0004 0x80ff0001 0x80e40004
//         0xa0aa0007 0x03000005 0x80240000 0x80ff0004
//         0xa0000008 0x0200000e 0x80240000 0x80aa0000
//         0x03000002 0x80240000 0x80aa0000 0xa0ff0008
//         0x03000005 0x80220000 0x80550000 0x80aa0000
//         0x03000005 0x80220000 0x80550000 0xa0550009
//         0x0200000e 0x80320000 0x80550000 0x03000005
//         0x802e0003 0x80550000 0xa0900013 0x04000004
//         0x80280005 0x80ff0004 0xa1550008 0xa0aa0008
//         0x0300005f 0x802f0005 0x80e40005 0xa0e40801
//         0x03000005 0x80270005 0x80e40005 0x80e40005
//         0x04000004 0x802e0003 0x80000003 0x80e40003
//         0x80900005 0x02000001 0x800c0005 0xa0e40007
//         0x04000058 0x80270005 0x80ff0001 0xa0e40006
//         0x80fa0005 0x03000020 0x80280004 0x80ff0000
//         0x80aa0005 0x04000012 0x80220000 0x80ff0004
//         0x80550005 0x80000005 0x03000005 0x802e0000
//         0x80900004 0x80550000 0x03000005 0x802e0000
//         0x80e40003 0x80e40000 0x03000005 0x802e0002
//         0x80e40002 0x80e40002 0x03000005 0x802e0003
//         0x80000002 0xa0900012 0x04000004 0x80270002
//         0x80000003 0x80f90003 0x80f90002 0x03000005
//         0x80270001 0x80e40001 0x80e40001 0x04000058
//         0x80270003 0x80ff0001 0x80e40001 0xa0aa0007
//         0x04000004 0x802e0000 0x80900003 0x80900002
//         0x80e40000 0x03000002 0x80210000 0x80000000
//         0xa1550020 0x03000005 0x80310000 0x80000000
//         0xa0aa0020 0x02000001 0x80270001 0xa0e40000
//         0x03000002 0x80270001 0x81e40001 0xa0e40022
//         0x04000004 0x80270001 0x80000000 0x80e40001
//         0xa0e40000 0x04000012 0x80270002 0x90ff0002
//         0x80f90000 0x80e40001 0x04000058 0x80080002
//         0x80ff0001 0xa0550007 0xa0aa0007 0x02000001
//         0x80080003 0x80ff0002 0x04000058 0x802f0800
//         0x80ff0001 0x80e40002 0x80e40003 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f3fb000 // 0.74877930
//         COP_CONST[1]: 0x3f3c0000 // 0.73437500
//         COP_CONST[2]: 0x40828f5c // 4.07999992
//         COP_CONST[3]: 0x40821084 // 4.06451607
//         COP_CONST[4]: 0xbf000000 // -0.50000000
//         COP_CONST[5]: 0xc1c00000 // -24.00000000
//         COP_CONST[6]: 0xbe5e4600 // -0.21706390
//         COP_CONST[7]: 0x3f0b6d77 // 0.54463905
//         COP_CONST[8]: 0xbe9ac92c // -0.30231607
//         COP_CONST[9]: 0xbeaea729 // -0.34111908
//         COP_CONST[10]: 0x40c00000 // 6.00000000
//         COP_CONST[11]: 0x3d8f5c29 // 0.07000000
//         COP_CONST[12]: 0x3e3bbc0e // 0.18333456
//         COP_CONST[13]: 0x3e135a5e // 0.14389941
//         COP_CONST[14]: 0x3e0e618e // 0.13904402
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x3e0ae378 // 0.13563335
//         # USER FLOAT CONST: c[6][251] = 0x3e32d6c6 // 0.17464742
//         # USER FLOAT CONST: c[6][252] = 0x3e702e08 // 0.23455060
//         # USER FLOAT CONST: c[6][258] = 0x3f3fb000 // 0.74877930
//         # USER FLOAT CONST: c[6][259] = 0x3f3c0000 // 0.73437500
//         # USER FLOAT CONST: c[6][261] = 0x3e800000 // 0.25000000
//         # USER FLOAT CONST: c[6][262] = 0x3bc00000 // 0.00585938
//         # USER FLOAT CONST: c[6][263] = 0x3bc00000 // 0.00585938
//         # USER FLOAT CONST: c[6][264] = 0x3ec00000 // 0.37500000
//         # USER FLOAT CONST: c[6][266] = 0x41800000 // 16.00000000
//         # USER FLOAT CONST: c[6][267] = 0x42000000 // 32.00000000
//         # USER FLOAT CONST: c[6][268] = 0xc1000000 // -8.00000000
//         # USER FLOAT CONST: c[6][269] = 0xc1c00000 // -24.00000000
//         # USER FLOAT CONST: c[6][270] = 0x39800000 // 0.00024414
//         # USER FLOAT CONST: c[6][271] = 0x39800000 // 0.00024414
//         # USER FLOAT CONST: c[6][272] = 0x3a000000 // 0.00048828
//         # USER FLOAT CONST: c[6][273] = 0xb9000000 // -0.00012207
//         # USER FLOAT CONST: c[6][274] = 0x3d8f5c29 // 0.07000000
//         # USER FLOAT CONST: c[6][318] = 0x3f4f624a // 0.81009352
//         # USER FLOAT CONST: c[6][319] = 0xbe5e4600 // -0.21706390
//         # USER FLOAT CONST: c[6][320] = 0x3f0b6d77 // 0.54463905
//         # USER FLOAT CONST: c[6][322] = 0x3fe9608e // 1.82325912
//         # USER FLOAT CONST: c[6][323] = 0x3fdec616 // 1.74042010
//         # USER FLOAT CONST: c[6][324] = 0x3fc5837d // 1.54307520
//         # USER FLOAT CONST: c[6][326] = 0x4177ed96 // 15.49550438
//         # USER FLOAT CONST: c[6][327] = 0x416c62e1 // 14.77414036
//         # USER FLOAT CONST: c[6][328] = 0x4150ecb1 // 13.05778599
//         # USER FLOAT CONST: c[6][379] = 0x3f2092b9 // 0.62723881
//         # USER FLOAT CONST: c[6][380] = 0x402bb113 // 2.68268275
//         # USER FLOAT CONST: c[6][382] = 0x3f63dc4c // 0.89008021
//         # USER FLOAT CONST: c[6][383] = 0xbe9ac92c // -0.30231607
//         # USER FLOAT CONST: c[6][384] = 0xbeaea729 // -0.34111908
//         # USER FLOAT CONST: c[6][386] = 0x3e8ca283 // 0.27467737
//         # USER FLOAT CONST: c[6][387] = 0x3ea31892 // 0.31854683
//         # USER FLOAT CONST: c[6][388] = 0x3ed5f50b // 0.41788515
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@0.13563335
//         ##    ~c0.y -> c[6][251] = 100.00%@0.17464742
//         ##    ~c0.z -> c[6][252] = 100.00%@0.23455060
//         ##    ~c2.x -> c[6][258] = 100.00%@0.74877930
//         ##    ~c2.y -> c[6][259] = 100.00%@0.73437500
//         ##    ~c2.w -> c[6][261] = 100.00%@0.25000000
//         ##    ~c3.x -> c[6][262] = 100.00%@0.00585938
//         ##    ~c3.y -> c[6][263] = 100.00%@0.00585938
//         ##    ~c3.z -> c[6][264] = 100.00%@0.37500000
//         ##    ~c4.x -> c[6][266] = 100.00%@16.00000000
//         ##    ~c4.y -> c[6][267] = 100.00%@32.00000000
//         ##    ~c4.z -> c[6][268] = 100.00%@-8.00000000
//         ##    ~c4.w -> c[6][269] = 100.00%@-24.00000000
//         ##    ~c5.x -> c[6][270] = 100.00%@0.00024414
//         ##    ~c5.y -> c[6][271] = 100.00%@0.00024414
//         ##    ~c5.z -> c[6][272] = 100.00%@0.00048828
//         ##    ~c5.w -> c[6][273] = 100.00%@-0.00012207
//         ##    ~c6.x -> c[6][274] = 100.00%@0.07000000
//         ##     c6.y -> c[6][275] = 63.98%@1.29999995 36.02%@0.33000001
//         ##     c6.z -> c[6][276] = 63.98%@4.00000000 36.02%@1.39999998
//         ##    ~c17.x -> c[6][318] = 100.00%@0.81009352
//         ##    ~c17.y -> c[6][319] = 100.00%@-0.21706390
//         ##    ~c17.z -> c[6][320] = 100.00%@0.54463905
//         ##    ~c18.x -> c[6][322] = 100.00%@1.82325912
//         ##    ~c18.y -> c[6][323] = 100.00%@1.74042010
//         ##    ~c18.z -> c[6][324] = 100.00%@1.54307520
//         ##    ~c19.x -> c[6][326] = 100.00%@15.49550438
//         ##    ~c19.y -> c[6][327] = 100.00%@14.77414036
//         ##    ~c19.z -> c[6][328] = 100.00%@13.05778599
//         ##    ~c32.y -> c[6][379] = 100.00%@0.62723881
//         ##    ~c32.z -> c[6][380] = 100.00%@2.68268275
//         ##    ~c33.x -> c[6][382] = 100.00%@0.89008021
//         ##    ~c33.y -> c[6][383] = 100.00%@-0.30231607
//         ##    ~c33.z -> c[6][384] = 100.00%@-0.34111908
//         ##    ~c34.x -> c[6][386] = 100.00%@0.27467737
//         ##    ~c34.y -> c[6][387] = 100.00%@0.31854683
//         ##    ~c34.z -> c[6][388] = 100.00%@0.41788515
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x4,3D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3b673a05,0x00000069
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xeb2fb3fb,0x00000069
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000069
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000069
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x593f8b95,0x00000069
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x507e8fc5,0x00000069
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0x5882dca1,0x000000d0
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x31a472f7,0x000000d0
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x6a465d22,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x9182359f,0x000000d0
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x42a57271,0x000001a0
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xeb2fb3fb,0x000001a0
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd5fbd3fe,0x000001a0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x0856e94d,0x000001a0
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0x73b829a0,0x000001a0
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xe450f0af,0x000001a0
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xa9969075,0x000001a0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x87d0abe2,0x000001a0
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3b673a05,0x00000068
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xa20a8af5,0x00000068
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x593f8b95,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x507e8fc5,0x00000068
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x42a57271,0x00000068
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xe450f0af,0x00000068
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd5fbd3fe,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x0856e94d,0x00000068
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0xc15c40c7,0x00000068
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xeb2fb3fb,0x00000068
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x30b62244,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x038d9634,0x00000068
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0xc15c40c7,0x00000068
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xe450f0af,0x00000068
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x30b62244,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x038d9634,0x00000068
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0xc15c40c7,0x00000068
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xa20a8af5,0x00000068
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x30b62244,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x038d9634,0x00000068
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x37ef3df3,0x000002d8
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xe450f0af,0x000002d8
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x26f11743,0x000002d8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0xa9f37b7e,0x000002d8
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0x73b829a0,0x000000d0
//         STAGEINFO:(0x1,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0xeb2fb3fb,0x000000d0
//         STAGEINFO:(0x4,3D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,256x256x4,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xa9969075,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x87d0abe2,0x000000d0
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x18 0 4 "COL0")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 2 : 
//          (attr 1 1 4) (attr 2 7 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r45, c[6][255]
//         movr r45.x, constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r45.y, constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r45.z, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.w, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r5.xy, r45, v6
//         mulr r5.zw, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).xyyz, v6.z
//         txlr r5, r5.xyzz, r5.w, #5, #5, SHADOW2D
//         movr r45, -c[6][255]
//         movr r45.x, -constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r45.y, -constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r45.z, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.w, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r6.xy, r45, v6
//         mulr r6.zw, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).xyyz, v6.z
//         txlr r6, r6.xyzz, r6.w, #5, #5, SHADOW2D
//         movr r5.y, r6.x
//         movr r45, c[6][255].zwzw
//         movr r45.x, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.y, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         movr r45.z, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.w, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r6.xy, r45, v6
//         mulr r6.zw, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).xyyz, v6.z
//         txlr r6, r6.xyzz, r6.w, #5, #5, SHADOW2D
//         movr r5.z, r6.x
//         movr r45, -c[6][255].zwzw
//         movr r45.x, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.y, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         movr r45.z, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.w, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r6.xy, r45, v6
//         mulr r6.zw, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).xyyz, v6.z
//         txlr r6, r6.xyzz, r6.w, #5, #5, SHADOW2D
//         movr r5.w, r6.x
//         dp4h r5.x, r5, constant(-0.99924999, 1.44269502, 0.25000000, 0.00000000).z
//         mulr r6.zw, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).xyyz, v6.z
//         movr r44, c[6][252].w
//         movr r44.x, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r44.y, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r44.z, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r44.w, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r43, c[6][252].xyxy
//         movr r43.x, constant(0.74877930, 0.74877930, 0.74877930, 0.74877930).x
//         movr r43.y, constant(0.73437500, 0.73437500, 0.73437500, 0.73437500).x
//         movr r43.z, constant(0.74877930, 0.74877930, 0.74877930, 0.74877930).x
//         movr r43.w, constant(0.73437500, 0.73437500, 0.73437500, 0.73437500).x
//         madh r7.zw, v6.xyxy, r44, r43
//         movr r44, c[6][255]
//         movr r44.x, constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r44.y, constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r44.z, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.w, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r6.xy, r7.zwzw, r44
//         txlr r6, r6.xyzz, r6.w, #5, #5, SHADOW2D
//         mulr r8.zw, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).xyyz, v6.z
//         movr r44, -c[6][255]
//         movr r44.x, -constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r44.y, -constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r44.z, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.w, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r8.xy, r7.zwzw, r44
//         txlr r8, r8.xyzz, r8.w, #5, #5, SHADOW2D
//         movr r6.y, r8.x
//         mulr r8.zw, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).xyyz, v6.z
//         movr r44, c[6][255].zwzw
//         movr r44.x, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.y, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         movr r44.z, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.w, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r8.xy, r7.zwzw, r44
//         txlr r8, r8.xyzz, r8.w, #5, #5, SHADOW2D
//         movr r6.z, r8.x
//         movr r44, -c[6][255].zwzw
//         movr r44.x, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.y, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         movr r44.z, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.w, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r8.xy, r7.zwzw, r44
//         mulr r8.zw, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).xyyz, v6.z
//         txlr r8, r8.xyzz, r8.w, #5, #5, SHADOW2D
//         movr r6.w, r8.x
//         dp4h r5.y, r6, constant(-0.99924999, 1.44269502, 0.25000000, 0.00000000).z
//         texh r6, v2.xyzz, #6, #6, 2D
//         madh r5.zw, r6.xywy, constant(4.07999992, 4.06451607, -2.07999992, -2.06451607).xyxy, constant(4.07999992, 4.06451607, -2.07999992, -2.06451607)
//         texh r6, v2.xyzz, #0, #0, 2D
//         madr r6.w, r6.w, v1.w, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).x
//         mulh r6.xyz, r6, v1
//         cmph r5.zw, r6.w, r5, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).z
//         movr r8.xyz, v3
//         madh r8.xyz, r5.z, v5, r8
//         madh r8.xyz, r5.w, v4, r8
//         nrmh r9.xyz, r8
//         maxh r5.z, |r9.y|, |r9.z|
//         maxh r8.x, |r9.x|, r5.z
//         rcpr r5.z, r8.x
//         movr r44, c[6][253]
//         movr r44.x, constant(0.00585938, 0.00585938, 0.00585938, 0.00585938).x
//         movr r44.y, constant(0.00585938, 0.00585938, 0.00585938, 0.00585938).x
//         movr r44.z, constant(0.37500000, 0.37500000, 0.37500000, 0.37500000).x
//         mulh r8.xyz, r9, r44
//         madh r8.xyz, r8, r5.z, v8
//         texh r8, r8.xyzz, #4, #4, 3D
//         movr r7.xy, v6
//         movr r44, c[6][254].xyxy
//         movr r44.x, constant(16.00000000, 16.00000000, 16.00000000, 16.00000000).x
//         movr r44.y, constant(32.00000000, 32.00000000, 32.00000000, 32.00000000).x
//         movr r44.z, constant(16.00000000, 16.00000000, 16.00000000, 16.00000000).x
//         movr r44.w, constant(32.00000000, 32.00000000, 32.00000000, 32.00000000).x
//         movr r43, c[6][254].zzzw
//         movr r43.x, constant(-8.00000000, -8.00000000, -8.00000000, -8.00000000).x
//         movr r43.y, constant(-8.00000000, -8.00000000, -8.00000000, -8.00000000).x
//         movr r43.z, constant(-8.00000000, -8.00000000, -8.00000000, -8.00000000).x
//         movr r43.w, constant(-24.00000000, -24.00000000, -24.00000000, -24.00000000).x
//         madh r7, r7, r44, r43
//         maxh r5.zw, |r7.xyxz|, |r7.xyyw|
//         addh_sat r5.zw, -r5, constant(9.37751770, 8.00000000, 6.00000000, 7.00000000).y
//         lrph r7.x, r5.w, r5.y, r8.w
//         addh r7.yzw, r8.xxyz, r8.xxyz
//         madr r5.y, r5.z, -r5.w, r5.z
//         cmph r5.y, -|r5.y|, r5.z, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).y
//         lrph r8.x, r5.y, r5.x, r7.x
//         nrmh r5.xyz, v7
//         dp3h r5.w, r5, r9
//         addh r7.x, r5.w, r5.w
//         addh r5.w, -|r5.w|, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).y
//         madh r10.xyz, r9, -r7.x, r5
//         movr r45, c[6][267]
//         movr r45.x, constant(0.81009352, 0.81009352, 0.81009352, 0.81009352).x
//         movr r45.y, constant(-0.21706390, -0.21706390, -0.21706390, -0.21706390).x
//         movr r45.z, constant(0.54463905, 0.54463905, 0.54463905, 0.54463905).x
//         dp3h_sat r7.x, r45, r9
//         movr r45, c[6][283]
//         movr r45.x, constant(0.89008021, 0.89008021, 0.89008021, 0.89008021).x
//         movr r45.y, constant(-0.30231607, -0.30231607, -0.30231607, -0.30231607).x
//         movr r45.z, constant(-0.34111908, -0.34111908, -0.34111908, -0.34111908).x
//         dp3h r5.x, r45, r5
//         movr r44, c[6][267]
//         movr r44.x, constant(0.81009352, 0.81009352, 0.81009352, 0.81009352).x
//         movr r44.y, constant(-0.21706390, -0.21706390, -0.21706390, -0.21706390).x
//         movr r44.z, constant(0.54463905, 0.54463905, 0.54463905, 0.54463905).x
//         dp3h r5.y, r10, r44
//         addh r5.y, r5.y, constant(-0.99924999, 1.44269502, 0.25000000, 0.00000000).x
//         texh r9, v2.xyzz, #7, #7, 2D
//         mulh r9.xyz, r9, r9
//         cmph r9, r6.w, r9, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).z
//         mulh r5.z, r9.w, constant(9.37751770, 8.00000000, 6.00000000, 7.00000000).x
//         ex2h r5.z, r5.z
//         addh r5.z, r5.z, constant(9.37751770, 8.00000000, 6.00000000, 7.00000000).w
//         mulh r5.y, r5.y, r5.z
//         mulh r5.y, r5.y, constant(-0.99924999, 1.44269502, 0.25000000, 0.00000000).y
//         ex2h_sat r5.y, r5.y
//         movr r44, c[6][269].xxyz
//         movr r44.x, constant(15.49550438, 15.49550438, 15.49550438, 15.49550438).x
//         movr r44.y, constant(15.49550438, 15.49550438, 15.49550438, 15.49550438).x
//         movr r44.z, constant(14.77414036, 14.77414036, 14.77414036, 14.77414036).x
//         movr r44.w, constant(13.05778599, 13.05778599, 13.05778599, 13.05778599).x
//         mulh r8.yzw, r5.y, r44
//         madh r10.w, r9.w, -constant(9.37751770, 8.00000000, 6.00000000, 7.00000000).y, constant(9.37751770, 8.00000000, 6.00000000, 7.00000000).z
//         txlh r10, r10.xyzz, r10.w, #1, #1, LWBE
//         mulh r10.xyz, r10, r10
//         madh r8.yzw, r8.x, r8, r10.xxyz
//         movr r10.zw, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000)
//         movr r44, c[6][256]
//         movr r44.x, constant(0.07000000, 0.07000000, 0.07000000, 0.07000000).x
//         cmph r10.xyz, r6.w, r44, r10.zzww
//         lg2r r47, |r5.w|
//         mulr r47, r47, r10.z
//         ex2r r47, r47
//         movh r9.w, r47
//         lrph r5.y, r9.w, r10.y, r10.x
//         mulh r5.yzw, r9.xxyz, r5.y
//         mulh r5.yzw, r8, r5
//         mulh r7.yzw, r7, r7
//         movr r44, c[6][268].xxyz
//         movr r44.x, constant(1.82325912, 1.82325912, 1.82325912, 1.82325912).x
//         movr r44.y, constant(1.82325912, 1.82325912, 1.82325912, 1.82325912).x
//         movr r44.z, constant(1.74042010, 1.74042010, 1.74042010, 1.74042010).x
//         movr r44.w, constant(1.54307520, 1.54307520, 1.54307520, 1.54307520).x
//         mulh r8.yzw, r7.x, r44
//         madh r7.xyz, r8.x, r8.yzww, r7.yzww
//         mulh r6.xyz, r6, r6
//         cmph r8.xyz, r6.w, r6, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).z
//         madh r5.yzw, r8.xxyz, r7.xxyz, r5
//         movr r44, -c[6][282].y
//         movr r44.x, -constant(0.62723881, 0.62723881, 0.62723881, 0.62723881).x
//         movr r44.y, -constant(0.62723881, 0.62723881, 0.62723881, 0.62723881).x
//         movr r44.z, -constant(0.62723881, 0.62723881, 0.62723881, 0.62723881).x
//         movr r44.w, -constant(0.62723881, 0.62723881, 0.62723881, 0.62723881).x
//         addh r5.x, r5.x, r44
//         movr r44, c[6][282].z
//         movr r44.x, constant(2.68268275, 2.68268275, 2.68268275, 2.68268275).x
//         movr r44.y, constant(2.68268275, 2.68268275, 2.68268275, 2.68268275).x
//         movr r44.z, constant(2.68268275, 2.68268275, 2.68268275, 2.68268275).x
//         movr r44.w, constant(2.68268275, 2.68268275, 2.68268275, 2.68268275).x
//         mulh_sat r5.x, r5.x, r44
//         movr r45, c[6][250]
//         movr r45.x, constant(0.13563335, 0.13563335, 0.13563335, 0.13563335).x
//         movr r45.y, constant(0.17464742, 0.17464742, 0.17464742, 0.17464742).x
//         movr r45.z, constant(0.23455060, 0.23455060, 0.23455060, 0.23455060).x
//         movh r6.xyz, r45
//         movr r44, c[6][284]
//         movr r44.x, constant(0.27467737, 0.27467737, 0.27467737, 0.27467737).x
//         movr r44.y, constant(0.31854683, 0.31854683, 0.31854683, 0.31854683).x
//         movr r44.z, constant(0.41788515, 0.41788515, 0.41788515, 0.41788515).x
//         addh r6.xyz, -r6, r44
//         movr r43, c[6][250]
//         movr r43.x, constant(0.13563335, 0.13563335, 0.13563335, 0.13563335).x
//         movr r43.y, constant(0.17464742, 0.17464742, 0.17464742, 0.17464742).x
//         movr r43.z, constant(0.23455060, 0.23455060, 0.23455060, 0.23455060).x
//         madh r6.xyz, r5.x, r6, r43
//         lrph r7.xyz, v3.w, r5.yzww, r6
//         cmpr r7.w, r6.w, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).y, constant(-0.50000000, 1.00000000, 0.00000000, 2.50000000).z
//         movr r8.w, r7.w
//         cmph r0, r6.w, r7, r8
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R8, 0x3e800000;           # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R14, R0;                # [  2][000010]
//     	IPA.SC R0, a[0x348], R14;        # [  3][000018] FIXED_FNC_TEXTURE_4_R
//     	F2F.FTZ R20, R0;                 # [  4][000020]
//     	IPA.SC R16, a[0x344], R14;       # [  5][000028] FIXED_FNC_TEXTURE_4_T
//     	FADD.FTZ R1, R16, 0x39800;       # [  6][000030]
//     	IPA.SC R13, a[0x340], R14;       # [  7][000038] TEX4
//     	FADD.FTZ R0, R13, 0x39800;       # [  8][000040]
//     	IPA.SC R5, a[0x304], R14;        # [  9][000048] FIXED_FNC_TEXTURE_0_T
//     	TEX.LZ.DC.NODEP.T R11, R0, R20, 0x5, 0x5, 2D, 0x1; # [ 10][000050]
//     	FADD.FTZ R1, R16, 0xb9800;       # [ 11][000058]
//     	FADD.FTZ R0, R13, 0xb9800;       # [ 12][000060]
//     	TEX.LZ.DC.NODEP.T R17, R0, R20, 0x5, 0x5, 2D, 0x1; # [ 13][000068]
//     	FADD.FTZ R1, R16, 0xb9000;       # [ 14][000070]
//     	FADD.FTZ R0, R13, 0x3a000;       # [ 15][000078]
//     	TEX.LZ.DC.NODEP.T R18, R0, R20, 0x5, 0x5, 2D, 0x1; # [ 16][000080]
//     	FADD.FTZ R1, R16, 0x39000;       # [ 17][000088]
//     	FADD.FTZ R0, R13, 0xba000;       # [ 18][000090]
//     	FFMA.FMZ R10, R16, R8, c[0x9][0x4]; # [ 19][000098]
//     	IPA.SC R4, a[0x300], R14;        # [ 20][0000a0] TEX0
//     	FADD.FTZ R9, R10, 0x39800;       # [ 21][0000a8]
//     	TEX.LZ.DC.NODEP.T R19, R0, R20, 0x5, 0x5, 2D, 0x1; # [ 22][0000b0]
//     	TEX.T R0, R4, 0x0, 0x0, 2D;      # [ 23][0000b8]
//     	TEX.T R6, R4, 0x6, 0x6, 2D, 0xa; # [ 24][0000c0]
//     	FFMA.FMZ R15, R13, R8, c[0x9][0x0]; # [ 25][0000c8]
//     	FADD.FTZ R8, R15, 0x39800;       # [ 26][0000d0]
//     	TEX.LZ.DC.NODEP.T R23, R8, R20, 0x5, 0x5, 2D, 0x1; # [ 27][0000d8]
//     	FADD.FTZ R9, R10, 0xb9800;       # [ 28][0000e0]
//     	FADD.FTZ R8, R15, 0xb9800;       # [ 29][0000e8]
//     	TEX.LZ.DC.NODEP.P R12, R8, R20, 0x5, 0x5, 2D, 0x1; # [ 30][0000f0]
//     	FADD.FTZ R9, R10, 0xb9000;       # [ 31][0000f8]
//     	FADD.FTZ R8, R15, 0x3a000;       # [ 32][000100]
//     	TEX.LZ.DC.NODEP.T R24, R8, R20, 0x5, 0x5, 2D, 0x1; # [ 33][000108]
//     	FADD.FTZ R9, R10, 0x39000;       # [ 34][000110]
//     	FADD.FTZ R8, R15, 0xba000;       # [ 35][000118]
//     	TEX.LZ.DC.NODEP.P R9, R8, R20, 0x5, 0x5, 2D, 0x1; # [ 36][000120]
//     	IPA.PASS.CENTROID R8, a[0x7c];   # [ 37][000128] POSITION_W
//     	MUFU.RCP R21, R8;                # [ 38][000130]
//     	IPA.SC R20, a[0x310], R14;       # [ 39][000138] TEX1
//     	FMUL.FTZ R8, R11, 0.25;          # [ 40][000140]
//     	FFMA.FTZ R11, R17, 0.25, R8;     # [ 41][000148]
//     	FFMA.FTZ R11, R18, 0.25, R11;    # [ 42][000150]
//     	IPA.SC.CENTROID R8, a[0x28c], R21; # [ 43][000158] COLOR_FRONT_DIFFUSE_ALPHA
//     	MOV32I R18, -0x3ffae148;         # [ 44][000160]
//     	FFMA.FTZ R17, R19, 0.25, R11;    # [ 45][000168]
//     	FFMA.FMZ R11, R3, R8, c[0x9][0x10]; # [ 46][000170]
//     	IPA.SC R19, a[0x330], R14;       # [ 47][000178] TEX3
//     	FFMA.FMZ R3, R7, c[0x9][0x8], R18; # [ 48][000180]
//     	IPA.SC R8, a[0x318], R14;        # [ 49][000188] FIXED_FNC_TEXTURE_1_R
//     	MOV32I R7, -0x3ffbdef8;          # [ 50][000190]
//     	IPA.SC R18, a[0x338], R14;       # [ 51][000198] FIXED_FNC_TEXTURE_3_R
//     	FCMP.GE R3, R3, RZ, R11;         # [ 52][0001a0]
//     	FFMA.FMZ R7, R6, c[0x9][0xc], R7; # [ 53][0001a8]
//     	FFMA.FMZ R8, R3, R18, R8;        # [ 54][0001b0]
//     	IPA.SC R6, a[0x334], R14;        # [ 55][0001b8] FIXED_FNC_TEXTURE_3_T
//     	FFMA.FMZ R20, R3, R19, R20;      # [ 56][0001c0]
//     	IPA.SC R18, a[0x314], R14;       # [ 57][0001c8] FIXED_FNC_TEXTURE_1_T
//     	FCMP.GE R7, R7, RZ, R11;         # [ 58][0001d0]
//     	IPA.SC R19, a[0x320], R14;       # [ 59][0001d8] TEX2
//     	FFMA.FMZ R6, R3, R6, R18;        # [ 60][0001e0]
//     	FMUL.FTZ R23, R23, 0.25;         # [ 61][0001e8]
//     	MOV32I R18, 0x42000000;          # [ 62][0001f0]
//     	FFMA.FMZ R3, R7, R19, R20;       # [ 63][0001f8]
//     	MOV32I R20, -0x3f000000;         # [ 64][000200]
//     	IPA.SC R19, a[0x324], R14;       # [ 65][000208] FIXED_FNC_TEXTURE_2_T
//     	FFMA.FMZ R18, R10, R18, c[0x9][0x14]; # [ 66][000210]
//     	FFMA.FMZ R16, R16, 32, R20;      # [ 67][000218]
//     	FFMA.FMZ R22, R13, 16, R20;      # [ 68][000220]
//     	IPA.SC R10, a[0x328], R14;       # [ 69][000228] FIXED_FNC_TEXTURE_2_R
//     	FFMA.FMZ R25, R15, 16, R20;      # [ 70][000230]
//     	IPA.SC.CENTROID R13, a[0x280], R21; # [ 71][000238] COLOR_FRONT_DIFFUSE_RED
//     	FMNMX.FTZ R15, |R22|, |R16|, !PT; # [ 72][000240]
//     	FFMA.FMZ R6, R7, R19, R6;        # [ 73][000248]
//     	FMNMX.FTZ R16, |R25|, |R18|, !PT; # [ 74][000250]
//     	FFMA.FMZ R7, R7, R10, R8;        # [ 75][000258]
//     	FADD.FTZ.SAT R10, -R15, 8;       # [ 76][000260]
//     	FADD.FTZ.SAT R8, -R16, 8;        # [ 77][000268]
//     	FMUL.FTZ R18, R3, R3;            # [ 78][000270]
//     	FMUL.FMZ R16, R0, R13;           # [ 79][000278]
//     	FFMA.FMZ R15, R10, -R8, R10;     # [ 80][000280]
//     	IPA.SC.CENTROID R13, a[0x284], R21; # [ 81][000288] COLOR_FRONT_DIFFUSE_GREEN
//     	FFMA.FTZ R18, R6, R6, R18;       # [ 82][000290]
//     	IPA.SC.CENTROID R0, a[0x288], R21; # [ 83][000298] COLOR_FRONT_DIFFUSE_BLUE
//     	F2F R15, -|R15|;                 # [ 84][0002a0]
//     	IPA.SC R21, a[0x350], R14;       # [ 85][0002a8] TEX5
//     	FFMA.FTZ R18, R7, R7, R18;       # [ 86][0002b0]
//     	FCMP.GE R15, R10, 0x3f800, R15;  # [ 87][0002b8]
//     	MUFU.RSQ R19, R18;               # [ 88][0002c0]
//     	IPA.SC R10, a[0x354], R14;       # [ 89][0002c8] FIXED_FNC_TEXTURE_5_T
//     	FMUL.FMZ R18, R1, R13;           # [ 90][0002d0]
//     	IPA.SC R25, a[0x358], R14;       # [ 91][0002d8] FIXED_FNC_TEXTURE_5_R
//     	FMUL.FTZ R1, R21, R21;           # [ 92][0002e0]
//     	FMUL.FTZ R13, R7, R19;           # [ 93][0002e8]
//     	FMUL.FTZ R6, R6, R19;            # [ 94][0002f0]
//     	FMUL.FTZ R7, R3, R19;            # [ 95][0002f8]
//     	FFMA.FTZ R1, R10, R10, R1;       # [ 96][000300]
//     	FMNMX.FTZ R3, |R6|, |R13|, !PT;  # [ 97][000308]
//     	FFMA.FTZ R19, R25, R25, R1;      # [ 98][000310]
//     	FMNMX.FTZ R3, |R7|, R3, !PT;     # [ 99][000318]
//     	MUFU.RSQ R26, R19;               # [100][000320]
//     	IPA.SC R1, a[0x368], R14;        # [101][000328] FIXED_FNC_TEXTURE_6_R
//     	FMUL.FMZ R19, R2, R0;            # [102][000330]
//     	FMUL.FTZ R22, R21, R26;          # [103][000338]
//     	MUFU.RCP R0, R3;                 # [104][000340]
//     	FMUL.FMZ R2, R13, 0.375;         # [105][000348]
//     	FMUL.FTZ R21, R10, R26;          # [106][000350]
//     	IPA.SC R3, a[0x364], R14;        # [107][000358] FIXED_FNC_TEXTURE_6_T
//     	FFMA.FMZ R2, R2, R0, R1;         # [108][000360]
//     	FMUL.FTZ R10, R25, R26;          # [109][000368]
//     	FMUL.FMZ R1, R6, 0x3bc00;        # [110][000370]
//     	FMUL.FTZ R25, R22, R7;           # [111][000378]
//     	FFMA.FMZ R1, R1, R0, R3;         # [112][000380]
//     	FFMA.FTZ R23, R12, 0.25, R23;    # [113][000388]
//     	FFMA.FTZ R12, R21, R6, R25;      # [114][000390]
//     	IPA.SC R3, a[0x360], R14;        # [115][000398] TEX6
//     	FMUL.FMZ R25, R7, 0x3bc00;       # [116][0003a0]
//     	FFMA.FTZ R23, R24, 0.25, R23;    # [117][0003a8]
//     	FFMA.FTZ R12, R10, R13, R12;     # [118][0003b0]
//     	FFMA.FTZ R9, R9, 0.25, R23;      # [119][0003b8]
//     	FFMA.FMZ R0, R25, R0, R3;        # [120][0003c0]
//     	FMUL32I.FTZ R23, R22, 0x3f63dc4c; # [121][0003c8]
//     	FADD.FTZ R25, R12, R12;          # [122][0003d0]
//     	TEX.NODEP.T R0, R0, 0x4, 0x4, 3D; # [123][0003d8]
//     	FFMA.FTZ R24, R21, c[0x9][0x20], R23; # [124][0003e0]
//     	FFMA.FMZ R22, R7, -R25, R22;     # [125][0003e8]
//     	FMUL32I.FTZ R7, R7, 0x3f4f624a;  # [126][0003f0]
//     	FFMA.FMZ R23, R6, -R25, R21;     # [127][0003f8]
//     	FFMA.FTZ R21, R6, c[0x9][0x18], R7; # [128][000400]
//     	FFMA.FMZ R25, R13, -R25, R10;    # [129][000408]
//     	TEX.P R4, R4, 0x7, 0x7, 2D;      # [130][000410]
//     	FFMA.FTZ R24, R10, c[0x9][0x24], R24; # [131][000418]
//     	IPA.SC R14, a[0x31c], R14;       # [132][000420] FIXED_FNC_TEXTURE_1_Q
//     	FMNMX R10, |R22|, |R23|, !PT;    # [133][000428]
//     	FFMA.FTZ.SAT R13, R13, c[0x9][0x1c], R21; # [134][000430]
//     	FMNMX R10, |R25|, R10, !PT;      # [135][000438]
//     	MUFU.RCP R26, R10;               # [136][000440]
//     	FCMP.LTU R21, RZ, c[0x6][0x1004], R11; # [137][000448]
//     	FMUL R10, R25, R26;              # [138][000450]
//     	FADD.FTZ R9, R9, -R3;            # [139][000458]
//     	FFMA.FTZ R3, R8, R9, R3;         # [140][000460]
//     	FCMP.GE R7, R7, RZ, R11;         # [141][000468]
//     	FMUL R9, R23, R26;               # [142][000470]
//     	FMUL R8, R22, R26;               # [143][000478]
//     	FFMA.FMZ R20, R7, R20, c[0x9][0x28]; # [144][000480]
//     	FMUL32I.FTZ R22, R22, 0x3f4f624a; # [145][000488]
//     	FADD.FTZ R17, R17, -R3;          # [146][000490]
//     	TEX.LL.NODEP.P R8, R8, R20, 0x1, 0x1, LWBE, 0x7; # [147][000498]
//     	FADD.FTZ R20, -|R12|, 1;         # [148][0004a0]
//     	FADD.FTZ R0, R0, R0;             # [149][0004a8]
//     	MOV R12, c[0x6][0x1008];         # [150][0004b0]
//     	MUFU.LG2 R20, |R20|;             # [151][0004b8]
//     	FCMP.GE R12, R12, 0x40200, R11;  # [152][0004c0]
//     	FFMA.FTZ R22, R23, c[0x9][0x18], R22; # [153][0004c8]
//     	FMUL.FMZ R12, R20, R12;          # [154][0004d0]
//     	FFMA.FTZ R15, R15, R17, R3;      # [155][0004d8]
//     	FCMP.LTU R20, RZ, c[0x9][0x2c], R11; # [156][0004e0]
//     	RRO.EX2 R12, R12;                # [157][0004e8]
//     	MUFU.EX2 R12, R12;               # [158][0004f0]
//     	FADD.FTZ R21, R21, -R20;         # [159][0004f8]
//     	FFMA.FTZ R12, R12, R21, R20;     # [160][000500]
//     	FADD32I.FTZ R17, R24, 0xbf2092b9; # [161][000508]
//     	FADD.FTZ R21, R1, R1;            # [162][000510]
//     	FMUL32I.FMZ R20, R13, 0x3fdec616; # [163][000518]
//     	FMUL32I.FMZ R23, R13, 0x3fe9608e; # [164][000520]
//     	FMUL.FMZ R24, R0, R0;            # [165][000528]
//     	FMUL.FMZ R21, R21, R21;          # [166][000530]
//     	FFMA.FTZ R1, R25, c[0x9][0x1c], R22; # [167][000538]
//     	FMUL32I.FMZ.SAT R22, R17, 0x402bb113; # [168][000540]
//     	MOV32I R3, 0x3e0ae378;           # [169][000548]
//     	FFMA.FMZ R0, R15, R20, R21;      # [170][000550]
//     	FFMA.FMZ R17, R15, R23, R24;     # [171][000558]
//     	MOV32I R21, 0x3e32d6c6;          # [172][000560]
//     	MOV32I R23, 0x3e702e08;          # [173][000568]
//     	FFMA.FMZ R20, R22, c[0x9][0x38], R3; # [174][000570]
//     	FFMA.FMZ R21, R22, c[0x9][0x34], R21; # [175][000578]
//     	FFMA.FMZ R22, R22, c[0x9][0x30], R23; # [176][000580]
//     	FMUL32I.FMZ R7, R7, 0x41160a50;  # [177][000588]
//     	FMUL.FMZ R23, R19, R19;          # [178][000590]
//     	FADD.FTZ R24, R2, R2;            # [179][000598]
//     	FMUL.FMZ R19, R18, R18;          # [180][0005a0]
//     	FADD32I.FTZ R2, R1, -0.99925;    # [181][0005a8]
//     	FMUL.FMZ R18, R16, R16;          # [182][0005b0]
//     	FMUL.FMZ R4, R4, R4;             # [183][0005b8]
//     	FCMP.GE R16, R23, RZ, R11;       # [184][0005c0]
//     	FMUL.FMZ R1, R24, R24;           # [185][0005c8]
//     	RRO.EX2 R23, R7;                 # [186][0005d0]
//     	FCMP.LTU R3, RZ, 0x3f800, R11;   # [187][0005d8]
//     	MUFU.EX2 R23, R23;               # [188][0005e0]
//     	FCMP.GE R7, R19, RZ, R11;        # [189][0005e8]
//     	FADD.FTZ R23, R23, 7;            # [190][0005f0]
//     	FMUL32I.FMZ R19, R13, 0x3fc5837d; # [191][0005f8]
//     	FMUL.FMZ R2, R2, R23;            # [192][000600]
//     	FCMP.GE R13, R18, RZ, R11;       # [193][000608]
//     	FMUL.FMZ R18, R6, R6;            # [194][000610]
//     	FMUL32I.FMZ R2, R2, 0x3fb8aa3b;  # [195][000618]
//     	FMUL.FMZ R6, R5, R5;             # [196][000620]
//     	RRO.EX2 R2, R2;                  # [197][000628]
//     	FCMP.GE R5, R4, RZ, R11;         # [198][000630]
//     	FCMP.GE R6, R6, RZ, R11;         # [199][000638]
//     	FCMP.GE R4, R18, RZ, R11;        # [200][000640]
//     	FMUL.FMZ R5, R5, R12;            # [201][000648]
//     	MUFU.EX2.SAT R18, R2;            # [202][000650]
//     	FMUL.FMZ R4, R4, R12;            # [203][000658]
//     	FMUL.FMZ R2, R6, R12;            # [204][000660]
//     	FFMA.FMZ R1, R15, R19, R1;       # [205][000668]
//     	FMUL32I.FMZ R12, R18, 0x416c62e1; # [206][000670]
//     	FMUL32I.FMZ R6, R18, 0x4177ed96; # [207][000678]
//     	FMUL32I.FMZ R18, R18, 0x4150ecb1; # [208][000680]
//     	FMUL.FMZ R10, R10, R10;          # [209][000688]
//     	FMUL.FMZ R9, R9, R9;             # [210][000690]
//     	FMUL.FMZ R8, R8, R8;             # [211][000698]
//     	FFMA.FMZ R10, R15, R18, R10;     # [212][0006a0]
//     	FFMA.FMZ R9, R15, R12, R9;       # [213][0006a8]
//     	FFMA.FMZ R6, R15, R6, R8;        # [214][0006b0]
//     	FMUL.FMZ R8, R10, R4;            # [215][0006b8]
//     	FMUL.FMZ R4, R9, R2;             # [216][0006c0]
//     	FMUL.FMZ R2, R6, R5;             # [217][0006c8]
//     	FFMA.FMZ R5, R16, R1, R8;        # [218][0006d0]
//     	FFMA.FMZ R1, R7, R0, R4;         # [219][0006d8]
//     	FFMA.FMZ R0, R13, R17, R2;       # [220][0006e0]
//     	FADD.FTZ R1, R1, -R21;           # [221][0006e8]
//     	FADD.FTZ R2, R5, -R22;           # [222][0006f0]
//     	FADD.FTZ R0, R0, -R20;           # [223][0006f8]
//     	FFMA.FTZ R1, R14, R1, R21;       # [224][000700]
//     	FFMA.FTZ R2, R14, R2, R22;       # [225][000708]
//     	FFMA.FTZ R0, R14, R0, R20;       # [226][000710]
//     	FCMP.GE R2, R2, R16, R11;        # [227][000718]
//     	FCMP.GE R1, R1, R7, R11;         # [228][000720]
//     	FCMP.GE R0, R0, R13, R11;        # [229][000728]
//     	EXIT;                            # [230][000730]
//     	END
//     END_SECTION
// END_SHADER
// 
