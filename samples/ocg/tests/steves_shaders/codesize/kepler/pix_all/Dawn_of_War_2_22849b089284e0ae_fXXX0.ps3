// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x22849b089284e0ae
//         UCODE_HASH: 0xbca8dde3c47733b6
//         POOL: APP
//         VERSION: 20
//         # USES: 9569
//         // Time: 97.247ms [5.699 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         BOOLVARS: 0x2a
//         CLASS: FERMI
//         TEXINFO: SHADOWMAP:0x18
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 32
//         USED_TEXTURE_BITS: 0x7df
//         TEXTURE_SLOTS: 11
//         SAMPLER_SLOTS: 11
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//             KILLS_PIXELS
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX00_R              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX04_Q              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//             TEX07_S              PERSPECTIVE
//             TEX07_T              PERSPECTIVE
//             TEX07_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x0006d462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x2a0a2a2a
//         0x2a2a2aaa      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c0, -0.50000000, 0.00000000, 1.00000000, -2.00000000 ; 0xbf000000 0x000000 0x3f800000 0xc0000000
        def c1, -0.00100000, 2.20000005, 0.25000000, 10.00000000 ; 0xba83126f 0x400ccccd 0x3e800000 0x41200000
        def c2, -1.00000000, -2.00000000, -3.00000000, -4.00000000 ; 0xbf800000 0xc0000000 0xc0400000 0xc0800000
        def c3, 8.00000000, 0.29899999, 0.58700001, 0.14399999 ; 0x41000000 0x3e991687 0x3f1645a2 0x3e1374bc
        def c4, 0.66000003, -0.01000000, 0.01000000, 0.12500000 ; 0x3f28f5c3 0xbc23d70a 0x3c23d70a 0x3e000000
        def c5, 2.88539004, 65504.00000000, 0.00000000, 0.00000000 ; 0x4038aa3b 0x477fe000 0x000000 0x000000
        def c6, 0.00000000, -1.00000000, -2.00000000, -3.00000000 ; 0x000000 0xbf800000 0xc0000000 0xc0400000
        dcl_texcoord0_pp v0.rgb
        dcl_texcoord1_pp v1.rgb
        dcl_texcoord2 v2.rg
        dcl_texcoord3_pp v3.rgb
        dcl_texcoord4 v4
        dcl_texcoord6_pp v5.rgb
        dcl_texcoord7_pp v6.rgb
        dcl_texcoord8_pp v7.rgb
        dcl_2d s0
        dcl_2d s1
        dcl_lwbe s2
        dcl_2d s3
        dcl_2d s4
        dcl_2d s5
        dcl_2d s6
        dcl_2d s7
        dcl_2d s8
        dcl_2d s9
        dcl_2d s10
        dcl_2d s11
        dcl_2d s12
        dcl_2d s13
        dcl_2d s14
        texld r0, v2, s6
        add r0.w, r0.w, c0.x
        cmp r0.w, r0.w, c0.y, c0.z
        mul r0.w, r0.w, c197.x
        mov r1, -r0.w
        texkill r1
        texld_pp r1, v2, s9
        if b0
        mul r2.xy, c200.x, v2
        texld_pp r3, r2, s12
        mad_pp r3.xyz, r3, -c0.w, -c0.z
        texld_pp r4, v2, s14
        mul r2.zw, r2.xyxy, c200.x
        texld_pp r5, r2.zwzw, s12
        mad_pp r5.xyz, r5, -c0.w, -c0.z
        lrp_pp r6.xyz, r4.y, r5, r3
        texld_pp r3, r2, s11
        lrp_pp r5.xyz, r4.y, r3, r0
        add_pp r0.w, -r4.x, c0.z
        add r3.xyz, -r5, c0.z
        rcp r0.w, r0.w
        mad_sat r3.xyz, r3, -r0.w, c0.z
        lrp_pp r0.xyz, -c0.x, r3, r5
        texld_pp r2, r2.zwzw, s13
        lrp_pp r3.xyz, r4.y, r2, r1
        mov_pp r1.xyz, r3
        mov_pp r2.xy, r0.yzzw
        else
        texld_pp r3, v2, s7
        mad_pp r6.xyz, r3, -c0.w, -c0.z
        mov_pp r2.xy, r0.yzzw
        endif
        mul_pp r0.yzw, r6.y, v5.xxyz
        mad_pp r0.yzw, r6.x, v1.xxyz, r0
        mad_pp r0.yzw, r6.z, v0.xxyz, r0
        dp3_pp r1.w, r0.yzw, r0.yzw
        rsq_pp r1.w, r1.w
        rcp_pp r2.z, r1.w
        add r2.z, r2.z, c1.x
        mul_pp r0.yzw, r0, r1.w
        cmp_pp r3.xyz, r2.z, r0.yzw, c0.yyzw
        log r0.x, r0.x
        log r0.y, r2.x
        log r0.z, r2.y
        mul r0.xyz, r0, c1.y
        exp_pp r2.x, r0.x
        exp_pp r2.y, r0.y
        exp_pp r2.z, r0.z
        texld_pp r0, v2, s8
        texld r4, v2, s10
        mul_pp r0.y, r4.x, c199.x
        dp3_pp r0.z, -v6, r3
        add_pp r0.z, r0.z, r0.z
        mad_pp r4.xyz, r3, -r0.z, -v6
        nrm_pp r5.xyz, r4
        if b1
        if b2
        texld r4, v4, s4
        add r4, r4, -v4.z
        cmp r4, r4, c0.z, c0.y
        dp4_pp r0.z, r4, c1.z
        else
        mad r4, v4.xyzx, c0.zzzy, c0.yyyz
        texldp r4, r4, s4
        add r0.w, r4.x, -v4.z
        cmp r0.w, r0.w, c0.z, c0.y
        cmp r0.z, -c181.x, r0.w, r4.x
        endif
        if b3
        mov r4.xyz, c190
        mad_pp r4.xyz, v4, r4, c189
        texld r6, r4, s3
        add r6, -r4.z, r6
        cmp r6, r6, c0.z, c0.y
        dp4_pp r0.w, r6, c1.z
        mov r4.w, c0.z
        texldp r6, r4, s3
        add r1.w, -r4.z, r6.x
        cmp_pp r1.w, r1.w, c0.z, c0.y
        cmp_pp r1.w, -c181.x, r1.w, r6.x
        cmp_pp r0.w, -c180.x, r1.w, r0.w
        mov_sat r1.w, v4.w
        lrp_pp r2.w, r1.w, r0.z, r0.w
        mov_pp r0.z, r2.w
        endif
        if b4
        mov r4.z, c0.z
        mad r4.x, v3.x, r4.z, -c191.x
        mad r4.y, v3.y, -r4.z, c191.y
        texld_pp r4, r4, s5
        add_pp r0.w, -r4.w, c0.z
        min_pp r1.w, r0.w, r0.z
        mov_pp r0.z, r1.w
        mov_sat_pp r0.z, r0.z
        else
        mov_sat_pp r0.z, r0.z
        endif
        else
        mov r0.z, c0.z
        endif
        dp3_sat_pp r0.w, r3, -c182
        mul_pp r4.xyz, r0.w, c188
        mul_sat_pp r0.w, r0.w, c1.w
        dp3_sat_pp r1.w, -c182, r5
        pow_pp r2.w, r1.w, c183.x
        mul_pp r6.xyz, r2.w, c188
        mul_pp r6.xyz, r0.w, r6
        mul_pp r6.xyz, r0.z, r6
        mov_pp r3.w, c0.z
        dp4_pp r7.x, c173, r3
        dp4_pp r7.y, c174, r3
        dp4_pp r7.z, c175, r3
        mul_pp r8, r3.yzzx, r3.xyz
        dp4_pp r9.x, c176, r8
        dp4_pp r9.y, c177, r8
        dp4_pp r9.z, c178, r8
        mul_pp r0.w, r3.y, r3.y
        mad_pp r0.w, r3.x, r3.x, -r0.w
        add_pp r7.xyz, r7, r9
        mad_pp r7.xyz, c179, r0.w, r7
        mul_pp r7.xyz, r0.x, r7
        mad_pp r0.xzw, r4.xyyz, r0.z, r7.xyyz
        mov r4.xyz, r0.xzw
        mov r7.xyz, r6
        mov r1.w, c0.y
        rep i0
        add r8, r1.w, c2
        mov r9.y, c0.y
        cmp r9.xzw, -r1.w, c165.xyyz, r9.y
        cmp r9.xzw, -r8_abs.x, c166.xyyz, r9
        cmp r9.xzw, -r8_abs.y, c167.xyyz, r9
        cmp r8.xyz, -r8_abs.z, c168, r9.xzw
        cmp r8.xyz, -r8_abs.w, c169, r8
        add_pp r8.xyz, r8, -v7
        dp3_pp r2.w, r8, r8
        rcp_pp r3.w, r2.w
        rsq_pp r2.w, r2.w
        mul_pp r8.xyz, r8, r2.w
        add r10, r1.w, c6
        cmp r9.xyz, -r10_abs.x, c169, r9.y
        cmp r9.xyz, -r10_abs.y, c170, r9
        cmp r9.xyz, -r10_abs.z, c171, r9
        cmp r9.xyz, -r10_abs.w, c172, r9
        mul_pp r9.xyz, r3.w, r9
        dp3_sat_pp r2.w, r3, r8
        mad_pp r4.xyz, r9, r2.w, r4
        mul_sat_pp r2.w, r2.w, c1.w
        dp3_sat_pp r3.w, r8, r5
        pow_pp r4.w, r3.w, c183.x
        mul_pp r8.xyz, r9, r4.w
        mad_pp r7.xyz, r8, r2.w, r7
        add r1.w, r1.w, c0.z
        endrep
        texld_pp r3, r5, s2
        mul_pp r0.xzw, r3.xyyz, c198.x
        mul_pp r0.xzw, r0, c3.x
        mad_pp r3.xyz, r0.y, c1.w, r4
        mad_pp r0.xyz, r7, c184.x, r0.xzw
        dp3_pp r0.w, r2, c3.yzw
        cmp_pp r2.xyz, -c196.x, r2, r0.w
        mov r4.x, c196.x
        cmp_pp r3.xyz, -r4.x, r3, c185
        cmp_pp r0.xyz, -r4.x, r0, c186
        mul_pp r0.xyz, r1, r0
        mad_pp r0.xyz, r2, r3, r0
        mul r1.xy, c0.yzzw, v3.z
        texld r1, r1, s1
        dp3_sat r0.w, r0, c4.x
        if b5
        add r2.xy, c4.y, v3
        texld_pp r2, r2, s0
        add r2.xy, c4.zyzw, v3
        texld_pp r3, r2, s0
        add r2.xy, c4.z, v3
        texld_pp r4, r2, s0
        add r2.xy, c4.yzzw, v3
        texld_pp r5, r2, s0
        texld_pp r6, v3, s0
        add_pp r2.x, r2.w, r3.w
        add_pp r2.x, r4.w, r2.x
        add_pp r2.x, r5.w, r2.x
        mul_pp r2.y, r6.w, -c0.x
        mad_pp r2.x, r2.x, c4.w, r2.y
        else
        mov r2.x, c0.y
        endif
        mad r2.yzw, r1.xxyz, r0.w, -r0.xxyz
        mad r2.xyz, r2.x, r2.yzw, r0
        dp3 r0.x, r0, c3.yzw
        dp3 r0.y, r1, c3.yzw
        add r0.x, -r0.x, r0.y
        mul r0.x, r0.x, c187.x
        mul r0.x, r0.x, c5.x
        exp r0.x, r0.x
        mul_sat r0.x, r1.w, r0.x
        lrp r3.xyz, r0.x, r1, r2
        dp3 r0.x, r3, c194
        mad r0.xyz, r3, c194.w, r0.x
        mad_sat r1.xyz, r0, c193, c193.w
        cmp r0.xyz, -c195.x, r0, r1
        cmp r0.xyz, -c192.x, r0, r3
        min_pp oC0.xyz, r0, c5.y
        mov_pp oC0.w, c0.z
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0xbf000000 0x00000000
//         0x3f800000 0xc0000000 0x05000051 0xa00f0001
//         0xba83126f 0x400ccccd 0x3e800000 0x41200000
//         0x05000051 0xa00f0002 0xbf800000 0xc0000000
//         0xc0400000 0xc0800000 0x05000051 0xa00f0003
//         0x41000000 0x3e991687 0x3f1645a2 0x3e1374bc
//         0x05000051 0xa00f0004 0x3f28f5c3 0xbc23d70a
//         0x3c23d70a 0x3e000000 0x05000051 0xa00f0005
//         0x4038aa3b 0x477fe000 0x00000000 0x00000000
//         0x05000051 0xa00f0006 0x00000000 0xbf800000
//         0xc0000000 0xc0400000 0x0200001f 0x80000005
//         0x90270000 0x0200001f 0x80010005 0x90270001
//         0x0200001f 0x80020005 0x90030002 0x0200001f
//         0x80030005 0x90270003 0x0200001f 0x80040005
//         0x900f0004 0x0200001f 0x80060005 0x90270005
//         0x0200001f 0x80070005 0x90270006 0x0200001f
//         0x80080005 0x90270007 0x0200001f 0x90000000
//         0xa00f0800 0x0200001f 0x90000000 0xa00f0801
//         0x0200001f 0x98000000 0xa00f0802 0x0200001f
//         0x90000000 0xa00f0803 0x0200001f 0x90000000
//         0xa00f0804 0x0200001f 0x90000000 0xa00f0805
//         0x0200001f 0x90000000 0xa00f0806 0x0200001f
//         0x90000000 0xa00f0807 0x0200001f 0x90000000
//         0xa00f0808 0x0200001f 0x90000000 0xa00f0809
//         0x0200001f 0x90000000 0xa00f080a 0x0200001f
//         0x90000000 0xa00f080b 0x0200001f 0x90000000
//         0xa00f080c 0x0200001f 0x90000000 0xa00f080d
//         0x0200001f 0x90000000 0xa00f080e 0x03000042
//         0x800f0000 0x90e40002 0xa0e40806 0x03000002
//         0x80080000 0x80ff0000 0xa0000000 0x04000058
//         0x80080000 0x80ff0000 0xa0550000 0xa0aa0000
//         0x03000005 0x80080000 0x80ff0000 0xa00000c5
//         0x02000001 0x800f0001 0x81ff0000 0x01000041
//         0x800f0001 0x03000042 0x802f0001 0x90e40002
//         0xa0e40809 0x01000028 0xe0e40800 0x03000005
//         0x80030002 0xa00000c8 0x90e40002 0x03000042
//         0x802f0003 0x80e40002 0xa0e4080c 0x04000004
//         0x80270003 0x80e40003 0xa1ff0000 0xa1aa0000
//         0x03000042 0x802f0004 0x90e40002 0xa0e4080e
//         0x03000005 0x800c0002 0x80440002 0xa00000c8
//         0x03000042 0x802f0005 0x80ee0002 0xa0e4080c
//         0x04000004 0x80270005 0x80e40005 0xa1ff0000
//         0xa1aa0000 0x04000012 0x80270006 0x80550004
//         0x80e40005 0x80e40003 0x03000042 0x802f0003
//         0x80e40002 0xa0e4080b 0x04000012 0x80270005
//         0x80550004 0x80e40003 0x80e40000 0x03000002
//         0x80280000 0x81000004 0xa0aa0000 0x03000002
//         0x80070003 0x81e40005 0xa0aa0000 0x02000006
//         0x80080000 0x80ff0000 0x04000004 0x80170003
//         0x80e40003 0x81ff0000 0xa0aa0000 0x04000012
//         0x80270000 0xa1000000 0x80e40003 0x80e40005
//         0x03000042 0x802f0002 0x80ee0002 0xa0e4080d
//         0x04000012 0x80270003 0x80550004 0x80e40002
//         0x80e40001 0x02000001 0x80270001 0x80e40003
//         0x02000001 0x80230002 0x80e90000 0x0000002a
//         0x03000042 0x802f0003 0x90e40002 0xa0e40807
//         0x04000004 0x80270006 0x80e40003 0xa1ff0000
//         0xa1aa0000 0x02000001 0x80230002 0x80e90000
//         0x0000002b 0x03000005 0x802e0000 0x80550006
//         0x90900005 0x04000004 0x802e0000 0x80000006
//         0x90900001 0x80e40000 0x04000004 0x802e0000
//         0x80aa0006 0x90900000 0x80e40000 0x03000008
//         0x80280001 0x80f90000 0x80f90000 0x02000007
//         0x80280001 0x80ff0001 0x02000006 0x80240002
//         0x80ff0001 0x03000002 0x80040002 0x80aa0002
//         0xa0000001 0x03000005 0x802e0000 0x80e40000
//         0x80ff0001 0x04000058 0x80270003 0x80aa0002
//         0x80f90000 0xa0e50000 0x0200000f 0x80010000
//         0x80000000 0x0200000f 0x80020000 0x80000002
//         0x0200000f 0x80040000 0x80550002 0x03000005
//         0x80070000 0x80e40000 0xa0550001 0x0200000e
//         0x80210002 0x80000000 0x0200000e 0x80220002
//         0x80550000 0x0200000e 0x80240002 0x80aa0000
//         0x03000042 0x802f0000 0x90e40002 0xa0e40808
//         0x03000042 0x800f0004 0x90e40002 0xa0e4080a
//         0x03000005 0x80220000 0x80000004 0xa00000c7
//         0x03000008 0x80240000 0x91e40006 0x80e40003
//         0x03000002 0x80240000 0x80aa0000 0x80aa0000
//         0x04000004 0x80270004 0x80e40003 0x81aa0000
//         0x91e40006 0x02000024 0x80270005 0x80e40004
//         0x01000028 0xe0e40801 0x01000028 0xe0e40802
//         0x03000042 0x800f0004 0x90e40004 0xa0e40804
//         0x03000002 0x800f0004 0x80e40004 0x91aa0004
//         0x04000058 0x800f0004 0x80e40004 0xa0aa0000
//         0xa0550000 0x03000009 0x80240000 0x80e40004
//         0xa0aa0001 0x0000002a 0x04000004 0x800f0004
//         0x90240004 0xa06a0000 0xa0950000 0x03010042
//         0x800f0004 0x80e40004 0xa0e40804 0x03000002
//         0x80080000 0x80000004 0x91aa0004 0x04000058
//         0x80080000 0x80ff0000 0xa0aa0000 0xa0550000
//         0x04000058 0x80040000 0xa10000b5 0x80ff0000
//         0x80000004 0x0000002b 0x01000028 0xe0e40803
//         0x02000001 0x80070004 0xa0e400be 0x04000004
//         0x80270004 0x90e40004 0x80e40004 0xa0e400bd
//         0x03000042 0x800f0006 0x80e40004 0xa0e40803
//         0x03000002 0x800f0006 0x81aa0004 0x80e40006
//         0x04000058 0x800f0006 0x80e40006 0xa0aa0000
//         0xa0550000 0x03000009 0x80280000 0x80e40006
//         0xa0aa0001 0x02000001 0x80080004 0xa0aa0000
//         0x03010042 0x800f0006 0x80e40004 0xa0e40803
//         0x03000002 0x80080001 0x81aa0004 0x80000006
//         0x04000058 0x80280001 0x80ff0001 0xa0aa0000
//         0xa0550000 0x04000058 0x80280001 0xa10000b5
//         0x80ff0001 0x80000006 0x04000058 0x80280000
//         0xa10000b4 0x80ff0001 0x80ff0000 0x02000001
//         0x80180001 0x90ff0004 0x04000012 0x80280002
//         0x80ff0001 0x80aa0000 0x80ff0000 0x02000001
//         0x80240000 0x80ff0002 0x0000002b 0x01000028
//         0xe0e40804 0x02000001 0x80040004 0xa0aa0000
//         0x04000004 0x80010004 0x90000003 0x80aa0004
//         0xa10000bf 0x04000004 0x80020004 0x90550003
//         0x81aa0004 0xa05500bf 0x03000042 0x802f0004
//         0x80e40004 0xa0e40805 0x03000002 0x80280000
//         0x81ff0004 0xa0aa0000 0x0300000a 0x80280001
//         0x80ff0000 0x80aa0000 0x02000001 0x80240000
//         0x80ff0001 0x02000001 0x80340000 0x80aa0000
//         0x0000002a 0x02000001 0x80340000 0x80aa0000
//         0x0000002b 0x0000002a 0x02000001 0x80040000
//         0xa0aa0000 0x0000002b 0x03000008 0x80380000
//         0x80e40003 0xa1e400b6 0x03000005 0x80270004
//         0x80ff0000 0xa0e400bc 0x03000005 0x80380000
//         0x80ff0000 0xa0ff0001 0x03000008 0x80380001
//         0xa1e400b6 0x80e40005 0x03000020 0x80280002
//         0x80ff0001 0xa00000b7 0x03000005 0x80270006
//         0x80ff0002 0xa0e400bc 0x03000005 0x80270006
//         0x80ff0000 0x80e40006 0x03000005 0x80270006
//         0x80aa0000 0x80e40006 0x02000001 0x80280003
//         0xa0aa0000 0x03000009 0x80210007 0xa0e400ad
//         0x80e40003 0x03000009 0x80220007 0xa0e400ae
//         0x80e40003 0x03000009 0x80240007 0xa0e400af
//         0x80e40003 0x03000005 0x802f0008 0x80290003
//         0x80a40003 0x03000009 0x80210009 0xa0e400b0
//         0x80e40008 0x03000009 0x80220009 0xa0e400b1
//         0x80e40008 0x03000009 0x80240009 0xa0e400b2
//         0x80e40008 0x03000005 0x80280000 0x80550003
//         0x80550003 0x04000004 0x80280000 0x80000003
//         0x80000003 0x81ff0000 0x03000002 0x80270007
//         0x80e40007 0x80e40009 0x04000004 0x80270007
//         0xa0e400b3 0x80ff0000 0x80e40007 0x03000005
//         0x80270007 0x80000000 0x80e40007 0x04000004
//         0x802d0000 0x80940004 0x80aa0000 0x80940007
//         0x02000001 0x80070004 0x80f80000 0x02000001
//         0x80070007 0x80e40006 0x02000001 0x80080001
//         0xa0550000 0x01000026 0xf0e40000 0x03000002
//         0x800f0008 0x80ff0001 0xa0e40002 0x02000001
//         0x80020009 0xa0550000 0x04000058 0x800d0009
//         0x81ff0001 0xa09400a5 0x80550009 0x04000058
//         0x800d0009 0x8c000008 0xa09400a6 0x80e40009
//         0x04000058 0x800d0009 0x8c550008 0xa09400a7
//         0x80e40009 0x04000058 0x80070008 0x8caa0008
//         0xa0e400a8 0x80f80009 0x04000058 0x80070008
//         0x8cff0008 0xa0e400a9 0x80e40008 0x03000002
//         0x80270008 0x80e40008 0x91e40007 0x03000008
//         0x80280002 0x80e40008 0x80e40008 0x02000006
//         0x80280003 0x80ff0002 0x02000007 0x80280002
//         0x80ff0002 0x03000005 0x80270008 0x80e40008
//         0x80ff0002 0x03000002 0x800f000a 0x80ff0001
//         0xa0e40006 0x04000058 0x80070009 0x8c00000a
//         0xa0e400a9 0x80550009 0x04000058 0x80070009
//         0x8c55000a 0xa0e400aa 0x80e40009 0x04000058
//         0x80070009 0x8caa000a 0xa0e400ab 0x80e40009
//         0x04000058 0x80070009 0x8cff000a 0xa0e400ac
//         0x80e40009 0x03000005 0x80270009 0x80ff0003
//         0x80e40009 0x03000008 0x80380002 0x80e40003
//         0x80e40008 0x04000004 0x80270004 0x80e40009
//         0x80ff0002 0x80e40004 0x03000005 0x80380002
//         0x80ff0002 0xa0ff0001 0x03000008 0x80380003
//         0x80e40008 0x80e40005 0x03000020 0x80280004
//         0x80ff0003 0xa00000b7 0x03000005 0x80270008
//         0x80e40009 0x80ff0004 0x04000004 0x80270007
//         0x80e40008 0x80ff0002 0x80e40007 0x03000002
//         0x80080001 0x80ff0001 0xa0aa0000 0x00000027
//         0x03000042 0x802f0003 0x80e40005 0xa0e40802
//         0x03000005 0x802d0000 0x80940003 0xa00000c6
//         0x03000005 0x802d0000 0x80e40000 0xa0000003
//         0x04000004 0x80270003 0x80550000 0xa0ff0001
//         0x80e40004 0x04000004 0x80270000 0x80e40007
//         0xa00000b8 0x80f80000 0x03000008 0x80280000
//         0x80e40002 0xa0f90003 0x04000058 0x80270002
//         0xa10000c4 0x80e40002 0x80ff0000 0x02000001
//         0x80010004 0xa00000c4 0x04000058 0x80270003
//         0x81000004 0x80e40003 0xa0e400b9 0x04000058
//         0x80270000 0x81000004 0x80e40000 0xa0e400ba
//         0x03000005 0x80270000 0x80e40001 0x80e40000
//         0x04000004 0x80270000 0x80e40002 0x80e40003
//         0x80e40000 0x03000005 0x80030001 0xa0e90000
//         0x90aa0003 0x03000042 0x800f0001 0x80e40001
//         0xa0e40801 0x03000008 0x80180000 0x80e40000
//         0xa0000004 0x01000028 0xe0e40805 0x03000002
//         0x80030002 0xa0550004 0x90e40003 0x03000042
//         0x802f0002 0x80e40002 0xa0e40800 0x03000002
//         0x80030002 0xa0e60004 0x90e40003 0x03000042
//         0x802f0003 0x80e40002 0xa0e40800 0x03000002
//         0x80030002 0xa0aa0004 0x90e40003 0x03000042
//         0x802f0004 0x80e40002 0xa0e40800 0x03000002
//         0x80030002 0xa0e90004 0x90e40003 0x03000042
//         0x802f0005 0x80e40002 0xa0e40800 0x03000042
//         0x802f0006 0x90e40003 0xa0e40800 0x03000002
//         0x80210002 0x80ff0002 0x80ff0003 0x03000002
//         0x80210002 0x80ff0004 0x80000002 0x03000002
//         0x80210002 0x80ff0005 0x80000002 0x03000005
//         0x80220002 0x80ff0006 0xa1000000 0x04000004
//         0x80210002 0x80000002 0xa0ff0004 0x80550002
//         0x0000002a 0x02000001 0x80010002 0xa0550000
//         0x0000002b 0x04000004 0x800e0002 0x80900001
//         0x80ff0000 0x81900000 0x04000004 0x80070002
//         0x80000002 0x80f90002 0x80e40000 0x03000008
//         0x80010000 0x80e40000 0xa0f90003 0x03000008
//         0x80020000 0x80e40001 0xa0f90003 0x03000002
//         0x80010000 0x81000000 0x80550000 0x03000005
//         0x80010000 0x80000000 0xa00000bb 0x03000005
//         0x80010000 0x80000000 0xa0000005 0x0200000e
//         0x80010000 0x80000000 0x03000005 0x80110000
//         0x80ff0001 0x80000000 0x04000012 0x80070003
//         0x80000000 0x80e40001 0x80e40002 0x03000008
//         0x80010000 0x80e40003 0xa0e400c2 0x04000004
//         0x80070000 0x80e40003 0xa0ff00c2 0x80000000
//         0x04000004 0x80170001 0x80e40000 0xa0e400c1
//         0xa0ff00c1 0x04000058 0x80070000 0xa10000c3
//         0x80e40000 0x80e40001 0x04000058 0x80070000
//         0xa10000c0 0x80e40000 0x80e40003 0x0300000a
//         0x80270800 0x80e40000 0xa0550005 0x02000001
//         0x80280800 0xa0aa0000 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3fe47bc0 // 1.78502655
//         COP_CONST[1]: 0x40200002 // 2.50000048
//         COP_CONST[2]: 0x3fb3d778 // 1.40501308
//         COP_CONST[3]: 0x3f46f309 // 0.77714592
//         COP_CONST[4]: 0xbea11b24 // -0.31466019
//         COP_CONST[5]: 0xbd8569e2 // -0.06514336
//         COP_CONST[6]: 0x3d8727d9 // 0.06599397
//         COP_CONST[7]: 0x3f28f5c3 // 0.66000003
//         COP_CONST[8]: 0x3f1645a2 // 0.58700001
//         COP_CONST[9]: 0x3e1374bc // 0.14399999
//         COP_CONST[10]: 0x3e991687 // 0.29899999
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][945] = 0x3e6aac2f // 0.22917245
//         # USER FLOAT CONST: c[6][961] = 0xbd8569e2 // -0.06514336
//         # USER FLOAT CONST: c[6][966] = 0x3d8727d9 // 0.06599397
//         # USER FLOAT CONST: c[6][970] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][974] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][978] = 0xbf0b859c // -0.54500747
//         # USER FLOAT CONST: c[6][979] = 0xbf46f309 // -0.77714592
//         # USER FLOAT CONST: c[6][980] = 0x3ea11b24 // 0.31466019
//         # USER FLOAT CONST: c[6][982] = 0x42480000 // 50.00000000
//         # USER FLOAT CONST: c[6][986] = 0x41d00000 // 26.00000000
//         # USER FLOAT CONST: c[6][990] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][991] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][992] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][994] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][995] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][996] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][998] = 0x3e4ccccd // 0.20000000
//         # USER FLOAT CONST: c[6][1002] = 0x40000000 // 2.00000000
//         # USER FLOAT CONST: c[6][1003] = 0x3fccccce // 1.60000014
//         # USER FLOAT CONST: c[6][1004] = 0x3f939394 // 1.15294123
//         # USER FLOAT CONST: c[6][1006] = 0xbeda435c // -0.42629516
//         # USER FLOAT CONST: c[6][1007] = 0xbfbff404 // -1.49963427
//         # USER FLOAT CONST: c[6][1008] = 0xbe3e2f10 // -0.18572640
//         # USER FLOAT CONST: c[6][1010] = 0x3fe47bc0 // 1.78502655
//         # USER FLOAT CONST: c[6][1011] = 0x40200002 // 2.50000048
//         # USER FLOAT CONST: c[6][1012] = 0x3fb3d778 // 1.40501308
//         # USER FLOAT CONST: c[6][1014] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][1015] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][1018] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][1022] = 0x3f808102 // 1.00393701
//         # USER FLOAT CONST: c[6][1023] = 0x3f808102 // 1.00393701
//         # USER FLOAT CONST: c[6][1024] = 0x3f808102 // 1.00393701
//         # USER FLOAT CONST: c[6][1025] = 0xbb810205 // -0.00393701
//         # USER FLOAT CONST: c[6][1026] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][1027] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][1028] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][1029] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][1030] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][1034] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][1042] = 0x3e4ccccd // 0.20000000
//         # USER FLOAT CONST: c[6][1050] = 0x3f800000 // 1.00000000
//         ## USER CONST histogram
//         ##     c165.x -> c[6][910] = 22.82%@-0.28820422 13.04%@96.30513000 10.87%@57.82131958 7.62%@56.53196335 7.61%@110.50410461 4.35%@93.78000641 4.35%@114.82205200
//         ##     c165.y -> c[6][911] = 20.65%@-0.06187831 13.04%@299.55950928 10.87%@298.76223755 7.62%@298.59255981 7.61%@300.45089722 4.35%@298.98251343 4.35%@300.59863281
//         ##     c165.z -> c[6][912] = 21.74%@0.18286324 13.04%@-130.92321777 10.87%@-145.61322021 7.62%@-133.78955078 7.61%@-140.11566162 4.35%@-166.35607910 4.35%@-148.51835632
//         ##     c166.x -> c[6][914] = 24.00%@-0.23326193 15.22%@94.50474548 14.14%@63.90951920 5.43%@104.38460541 4.35%@95.88562775 3.26%@114.82205200 2.17%@99.60878754
//         ##     c166.y -> c[6][915] = 23.91%@-0.04942029 15.22%@299.00033569 14.14%@298.87951660 5.43%@299.64453125 4.35%@299.50741577 3.26%@300.59863281 2.17%@299.62527466
//         ##     c166.z -> c[6][916] = 28.26%@0.17369223 15.22%@-135.78031921 14.14%@-143.86140442 5.43%@-139.33976746 4.35%@-165.09759521 3.26%@-148.51835632 2.17%@-164.81010437
//         ##     c167.x -> c[6][918] = 42.40%@-0.28062665 5.43%@95.88646698 4.35%@108.66151428 4.35%@-0.28062662 3.26%@96.30513000 2.17%@110.50410461 1.09%@102.44867706
//         ##     c167.y -> c[6][919] = 50.01%@0.02314091 5.43%@299.50634766 4.35%@300.24392700 3.26%@299.55950928 2.17%@300.45089722 2.17%@299.50741577 1.09%@299.30581665
//         ##     c167.z -> c[6][920] = 44.57%@0.21997546 5.43%@-165.09692383 4.35%@-147.00137329 4.35%@0.21997543 2.17%@-140.11566162 1.09%@0.21997547 1.09%@-142.42758179
//         ##     c168.x -> c[6][922] = 57.61%@0.09459949 7.61%@94.50474548 4.35%@104.38460541 4.35%@102.44867706 3.26%@99.60778809 1.09%@95.88646698 1.09%@96.30513000
//         ##     c168.y -> c[6][923] = 44.57%@-0.11833321 11.96%@-0.11833321 7.61%@299.00033569 4.35%@299.64453125 3.26%@299.62670898 3.26%@-0.11833320 1.09%@299.55950928
//         ##     c168.z -> c[6][924] = 57.61%@0.06819209 7.61%@-135.78031921 4.35%@-139.33976746 4.35%@-142.42758179 3.26%@-164.81092834 1.09%@-165.09692383 1.09%@-130.92321777
//         ##     c169.x -> c[6][926] = 54.35%@0.00000000 22.82%@2.12528992 21.74%@0.08161073 1.09%@0.08161072
//         ##     c169.y -> c[6][927] = 54.35%@0.00000000 22.82%@2.12528992 20.65%@-0.08951223 2.17%@-0.08951224
//         ##     c169.z -> c[6][928] = 54.35%@0.00000000 22.82%@2.12528992 18.48%@0.07425401 4.35%@0.07425402
//         ##     c170.x -> c[6][930] = 41.31%@0.00000000 29.34%@2.12528992 26.08%@0.01380184 2.17%@0.01380184 1.09%@0.01380184
//         ##     c170.y -> c[6][931] = 41.31%@0.00000000 29.34%@2.12528992 27.17%@-0.04063986 2.17%@-0.04063986
//         ##     c170.z -> c[6][932] = 41.31%@0.00000000 29.34%@2.12528992 27.17%@0.16549103 2.17%@0.16549101
//         ##     c171.x -> c[6][934] = 50.01%@0.06599397 41.30%@0.00000000 8.69%@2.12528992
//         ##     c171.y -> c[6][935] = 47.83%@0.05222831 41.30%@0.00000000 8.69%@2.12528992 2.17%@0.05222831
//         ##     c171.z -> c[6][936] = 46.73%@0.07351997 41.30%@0.00000000 8.69%@2.12528992 3.27%@0.07351998
//         ##     c172.x -> c[6][938] = 59.79%@0.00000000 24.00%@0.00000000 15.22%@2.12528992
//         ##     c172.y -> c[6][939] = 47.83%@689386923369214300000000000.00000000 24.00%@0.00000000 15.22%@2.12528992 11.96%@denormal  
//         ##     c172.z -> c[6][940] = 59.79%@0.00000000 24.00%@0.00000000 15.22%@2.12528992
//         ##     c173.x -> c[6][942] = 92.39%@-0.28820422 4.35%@-0.28820425 3.26%@-0.28820419
//         ##     c173.y -> c[6][943] = 93.48%@-0.06187831 4.35%@-0.06187830 2.17%@-0.06187832
//         ##     c173.z -> c[6][944] = 93.48%@0.18286324 4.35%@0.18286322 2.17%@0.18286327
//         ##    ~c173.w -> c[6][945] = 100.00%@0.22917245
//         ##     c174.x -> c[6][946] = 90.22%@-0.23326193 7.61%@-0.23326196 2.17%@-0.23326191
//         ##     c174.y -> c[6][947] = 84.78%@-0.04942029 15.22%@-0.04942029
//         ##     c174.z -> c[6][948] = 96.74%@0.17369223 3.26%@0.17369220
//         ##     c174.w -> c[6][949] = 91.31%@0.19024295 5.43%@0.19024296 3.26%@0.19024293
//         ##     c175.x -> c[6][950] = 86.96%@-0.28062665 8.69%@-0.28062662 4.35%@-0.28062668
//         ##     c175.y -> c[6][951] = 98.91%@0.02314091 1.09%@0.02314091
//         ##     c175.z -> c[6][952] = 92.39%@0.21997546 5.43%@0.21997543 2.17%@0.21997547
//         ##     c175.w -> c[6][953] = 91.31%@0.24287555 4.35%@0.24287556 2.17%@0.24287553 1.09%@0.24287552 1.09%@0.24287562
//         ##     c176.x -> c[6][954] = 95.65%@0.09459949 4.35%@0.09459948
//         ##     c176.y -> c[6][955] = 75.00%@-0.11833321 17.39%@-0.11833321 7.61%@-0.11833320
//         ##     c176.z -> c[6][956] = 93.48%@0.06819209 5.43%@0.06819207 1.09%@0.06819209
//         ##     c176.w -> c[6][957] = 93.48%@-0.07184873 6.52%@-0.07184872
//         ##     c177.x -> c[6][958] = 84.77%@0.08161073 8.71%@0.08161074 6.52%@0.08161072
//         ##     c177.y -> c[6][959] = 85.87%@-0.08951223 7.61%@-0.08951222 6.52%@-0.08951224
//         ##     c177.z -> c[6][960] = 74.99%@0.07425401 17.40%@0.07425401 7.61%@0.07425402
//         ##    ~c177.w -> c[6][961] = 100.00%@-0.06514336
//         ##     c178.x -> c[6][962] = 95.65%@0.01380184 2.17%@0.01380184 2.17%@0.01380184
//         ##     c178.y -> c[6][963] = 91.31%@-0.04063986 5.43%@-0.04063986 3.26%@-0.04063987
//         ##     c178.z -> c[6][964] = 91.31%@0.16549103 7.61%@0.16549101 1.09%@0.16549104
//         ##     c178.w -> c[6][965] = 96.74%@0.03855912 3.26%@0.03855912
//         ##    ~c179.x -> c[6][966] = 100.00%@0.06599397
//         ##     c179.y -> c[6][967] = 97.83%@0.05222831 2.17%@0.05222831
//         ##     c179.z -> c[6][968] = 90.21%@0.07351997 9.79%@0.07351998
//         ##    ~c180.x -> c[6][970] = 100.00%@0.00000000
//         ##    ~c181.x -> c[6][974] = 100.00%@1.00000000
//         ##    ~c182.x -> c[6][978] = 100.00%@-0.54500747
//         ##    ~c182.y -> c[6][979] = 100.00%@-0.77714592
//         ##    ~c182.z -> c[6][980] = 100.00%@0.31466019
//         ##    ~c183.x -> c[6][982] = 100.00%@50.00000000
//         ##    ~c184.x -> c[6][986] = 100.00%@26.00000000
//         ##    ~c185.x -> c[6][990] = 100.00%@1.00000000
//         ##    ~c185.y -> c[6][991] = 100.00%@1.00000000
//         ##    ~c185.z -> c[6][992] = 100.00%@1.00000000
//         ##    ~c186.x -> c[6][994] = 100.00%@1.00000000
//         ##    ~c186.y -> c[6][995] = 100.00%@1.00000000
//         ##    ~c186.z -> c[6][996] = 100.00%@1.00000000
//         ##    ~c187.x -> c[6][998] = 100.00%@0.20000000
//         ##    ~c188.x -> c[6][1002] = 100.00%@2.00000000
//         ##    ~c188.y -> c[6][1003] = 100.00%@1.60000014
//         ##    ~c188.z -> c[6][1004] = 100.00%@1.15294123
//         ##    ~c189.x -> c[6][1006] = 100.00%@-0.42629516
//         ##    ~c189.y -> c[6][1007] = 100.00%@-1.49963427
//         ##    ~c189.z -> c[6][1008] = 100.00%@-0.18572640
//         ##    ~c190.x -> c[6][1010] = 100.00%@1.78502655
//         ##    ~c190.y -> c[6][1011] = 100.00%@2.50000048
//         ##    ~c190.z -> c[6][1012] = 100.00%@1.40501308
//         ##    ~c191.x -> c[6][1014] = 100.00%@0.00000000
//         ##    ~c191.y -> c[6][1015] = 100.00%@0.00000000
//         ##    ~c192.x -> c[6][1018] = 100.00%@1.00000000
//         ##    ~c193.x -> c[6][1022] = 100.00%@1.00393701
//         ##    ~c193.y -> c[6][1023] = 100.00%@1.00393701
//         ##    ~c193.z -> c[6][1024] = 100.00%@1.00393701
//         ##    ~c193.w -> c[6][1025] = 100.00%@-0.00393701
//         ##    ~c194.x -> c[6][1026] = 100.00%@0.00000000
//         ##    ~c194.y -> c[6][1027] = 100.00%@0.00000000
//         ##    ~c194.z -> c[6][1028] = 100.00%@0.00000000
//         ##    ~c194.w -> c[6][1029] = 100.00%@1.00000000
//         ##    ~c195.x -> c[6][1030] = 100.00%@1.00000000
//         ##    ~c196.x -> c[6][1034] = 100.00%@0.00000000
//         ##     c197.x -> c[6][1038] = 66.31%@0.00000000 33.69%@1.00000000
//         ##    ~c198.x -> c[6][1042] = 100.00%@0.20000000
//         ##     c199.x -> c[6][1046] = 73.92%@0.00000000 24.00%@1.00000000 1.09%@5.00000000
//         ##    ~c200.x -> c[6][1050] = 100.00%@1.00000000
//         ##     i0.x -> c[6][474] = 40.21%@4 22.82%@0 20.66%@2 9.78%@3 6.52%@1
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        , (0xa,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x000000d1
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x000000d1
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d1
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d1
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d1
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x7f18bde4,0x000000d1
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xcb95c0a2,0x000000d1
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x85ef0573,0x000000d1
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x7a71f41d,0x000000d1
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x000000d1
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x7267f836,0x00000068
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xc0c7670d,0x00000068
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0xab099e27,0x00000068
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x7a97febf,0x00000068
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000068
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x256x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x0098998a,0x00000068
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x6b9dd5eb,0x00000068
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x16232105,0x00000068
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x3c22db92,0x00000068
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x256x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x21cad012,0x00000068
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000340
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000340
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000340
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000340
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000340
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x581eb0da,0x00000340
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x9b06a9b4,0x00000340
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x60c14431,0x00000340
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0xbd3f8aaa,0x00000340
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000340
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x000007b8
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x000007b8
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x000007b8
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000007b8
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000007b8
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x7084e073,0x000007b8
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xc93bc027,0x000007b8
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x0000ffff,0x000007b8
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,1,0,0), 0x55556000,0x000007b8
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x000007b8
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000138
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000138
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xb9f007b3,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x20ade2a4,0x00000138
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x9a5d0697,0x00000138
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0xd6ab31ca,0x00000138
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000138
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x81a8fd41,0x00000068
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x27e14508,0x00000068
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,1,0,0), 0xf3d31e9f,0x00000068
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,1,0,0), 0x8efb9e6b,0x00000068
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000068
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000138
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000138
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd59e3594,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd5d0c6d2,0x00000138
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0xf53208ef,0x00000138
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x4f8c4e6e,0x00000138
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000138
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd59e3594,0x00000068
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd5d0c6d2,0x00000068
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x2742924f,0x00000068
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x4f8c4e6e,0x00000068
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000068
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x000001a0
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x6c382fe5,0x000001a0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x8676a1e7,0x000001a0
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,1,0,0), 0xffff0000,0x000001a0
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,1,0,0), 0x55560000,0x000001a0
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x000001a0
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x000000d0
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,1024x512x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x2a847a52,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x0f83119c,0x000000d0
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x1352964f,0x000000d0
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT1_A1R5G5B5,1,0,0), 0xd3da0a39,0x000000d0
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x000000d0
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x7c517778,0x00000068
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x6f0c76a1,0x00000068
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x89af665e,0x00000068
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0xfc1a66f3,0x00000068
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000068
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x000002d8
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x000002d8
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x638d0fc5,0x000002d8
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x07362d18,0x000002d8
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x8652a7fd,0x000002d8
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x01c70f6a,0x000002d8
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x000002d8
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000410
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000410
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000410
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000410
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000410
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,256x128x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xddc6bcbf,0x00000410
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x128x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x22717b73,0x00000410
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,8x8x0,4/0,DXT45_A8R8G8B8,1,0,0), 0xe083e078,0x00000410
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x128x0,9/0,DXT1_A1R5G5B5,1,0,0), 0xb18c7322,0x00000410
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000410
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x000003a8
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x000003a8
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x000003a8
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000003a8
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000003a8
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x56804598,0x000003a8
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x9ffbba63,0x000003a8
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x964f17bb,0x000003a8
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x33c30d8c,0x000003a8
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x000003a8
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000208
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000208
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xe3a11629,0x00000208
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xc88023e4,0x00000208
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,1,0,0), 0x7022ae8b,0x00000208
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,1,0,0), 0x472418b0,0x00000208
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000208
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x000002d8
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x000002d8
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x71975ae7,0x000002d8
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd8cb63d7,0x000002d8
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x8594f92e,0x000002d8
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x0d1c2b9a,0x000002d8
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x000002d8
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x00000270
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x00000270
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x7fdcb901,0x00000270
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x9f4a2131,0x00000270
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,8x8x0,4/0,DXT45_A8R8G8B8,1,0,0), 0xe083e078,0x00000270
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,1,0,0), 0xbdc6c589,0x00000270
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x00000270
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xe5000000,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x846ccc20,0x000000d0
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,0x0x0,0/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x7fdcb901,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x9f4a2131,0x000000d0
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x0000ffff,0x000000d0
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,1,0,0), 0xbdc6c589,0x000000d0
//         STAGEINFO:(0xa,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,-0.50000000,4x4x0,3/0,DXT1_A1R5G5B5,1,0,0), 0x55555556,0x000000d0
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 1 : 
//          (attr 1 8 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texr r5, v3.xyzz, #6, #6, 2D
//         addr r5.w, r5.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).x
//         cmpr r5.w, r5.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).y, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         mulr r5.w, r5.w, c[6][447].x
//         movr r6, -r5.w
//         movr.c rc, r6
//         kil LT
//         texh r6, v3.xyzz, #9, #9, 2D
//         ife FL1.x, cBool00, l0, l1
//         movr r45, c[6][450].x
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulr r7.xy, r45, v3
//         texh r8, r7.xyyy, #12, #12, 2D
//         madh r8.xyz, r8, -constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).w, -constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         texh r9, v3.xyzz, #14, #14, 2D
//         movr r44, c[6][450].x
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulr r7.zw, r7.xyxy, r44
//         texh r10, r7.zwzz, #12, #12, 2D
//         madh r10.xyz, r10, -constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).w, -constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         lrph r11.xyz, r9.y, r10, r8
//         texh r8, r7.xyzz, #11, #11, 2D
//         lrph r10.xyz, r9.y, r8, r5
//         addh r5.w, -r9.x, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         addr r8.xyz, -r10, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         rcpr r5.w, r5.w
//         madr_sat r8.xyz, r8, -r5.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         lrph r5.xyz, -constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).x, r8, r10
//         texh r7, r7.zwzz, #13, #13, 2D
//         lrph r8.xyz, r9.y, r7, r6
//         movh r6.xyz, r8
//         movh r7.xy, r5.yzzw
//         l0:
//         texh r8, v3.xyzz, #7, #7, 2D
//         madh r11.xyz, r8, -constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).w, -constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         movh r7.xy, r5.yzzw
//         l1:
//         mulh r5.yzw, r11.y, v6.xxyz
//         madh r5.yzw, r11.x, v2.xxyz, r5
//         madh r5.yzw, r11.z, v1.xxyz, r5
//         dp3h r6.w, r5.yzww, r5.yzww
//         rsqh r6.w, |r6.w|
//         rcph r7.z, r6.w
//         addr r7.z, r7.z, constant(-0.00100000, 2.20000005, 0.25000000, 10.00000000).x
//         mulh r5.yzw, r5, r6.w
//         cmph r8.xyz, r7.z, r5.yzww, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).yyzw
//         lg2r r5.x, |r5.x|
//         lg2r r5.y, |r7.x|
//         lg2r r5.z, |r7.y|
//         mulr r5.xyz, r5, constant(-0.00100000, 2.20000005, 0.25000000, 10.00000000).y
//         ex2h r7.x, r5.x
//         ex2h r7.y, r5.y
//         ex2h r7.z, r5.z
//         texh r5, v3.xyzz, #8, #8, 2D
//         texr r9, v3.xyzz, #10, #10, 2D
//         mulh r5.y, r9.x, c[6][449].x
//         dp3h r5.z, -v7, r8
//         addh r5.z, r5.z, r5.z
//         madh r9.xyz, r8, -r5.z, -v7
//         nrmh r10.xyz, r9
//         ife , cBool01, l2, l3
//         ife FL1.x, cBool02, l4, l5
//         texr r9, v5.xyzz, #4, #4, SHADOW2D
//         addr r9, r9, -v5.z
//         cmpr r9, r9, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).y
//         dp4h r5.z, r9, constant(-0.00100000, 2.20000005, 0.25000000, 10.00000000).z
//         l4:
//         madr r9, v5.xyzx, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).zzzy, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).yyyz
//         txpr r9, r9, #4, #4, SHADOW2D
//         addr r5.w, r9.x, -v5.z
//         cmpr r5.w, r5.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).y
//         movr r45, -c[6][431].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r5.z, r45, r5.w, r9.x
//         l5:
//         ife , cBool03, l6, l7
//         movr r45, c[6][440]
//         movr r45.x, constant(1.78502655, 1.78502655, 1.78502655, 1.78502655).x
//         movr r45.y, constant(2.50000048, 2.50000048, 2.50000048, 2.50000048).x
//         movr r45.z, constant(1.40501308, 1.40501308, 1.40501308, 1.40501308).x
//         movr r9.xyz, r45
//         movr r43, c[6][439]
//         movr r43.x, constant(-0.42629516, -0.42629516, -0.42629516, -0.42629516).x
//         movr r43.y, constant(-1.49963427, -1.49963427, -1.49963427, -1.49963427).x
//         movr r43.z, constant(-0.18572640, -0.18572640, -0.18572640, -0.18572640).x
//         madh r9.xyz, v5, r9, r43
//         texr r11, r9.xyzz, #3, #3, SHADOW2D
//         addr r11, -r9.z, r11
//         cmpr r11, r11, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).y
//         dp4h r5.w, r11, constant(-0.00100000, 2.20000005, 0.25000000, 10.00000000).z
//         movr r9.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         txpr r11, r9, #3, #3, SHADOW2D
//         addr r6.w, -r9.z, r11.x
//         cmph r6.w, r6.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).y
//         movr r45, -c[6][431].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmph r6.w, r45, r6.w, r11.x
//         movr r45, -c[6][430].x
//         movr r45.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         cmph r5.w, r45, r6.w, r5.w
//         movr_sat r6.w, v5.w
//         lrph r7.w, r6.w, r5.z, r5.w
//         movh r5.z, r7.w
//         l6:
//         l7:
//         ife FL1.x, cBool04, l8, l9
//         movr r9.z, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         movr r43, -c[6][441].x
//         movr r43.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r9.x, v4.x, r9.z, r43
//         movr r43, c[6][441].y
//         movr r43.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r9.y, v4.y, -r9.z, r43
//         texh r9, r9.xyzz, #5, #5, 2D
//         addh r5.w, -r9.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         minh r6.w, r5.w, r5.z
//         movh r5.z, r6.w
//         movh_sat r5.z, r5.z
//         l8:
//         movh_sat r5.z, r5.z
//         l9:
//         l2:
//         movr r5.z, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         l3:
//         movr r44, -c[6][432]
//         movr r44.x, -constant(-0.54500747, -0.54500747, -0.54500747, -0.54500747).x
//         movr r44.y, -constant(-0.77714592, -0.77714592, -0.77714592, -0.77714592).x
//         movr r44.z, -constant(0.31466019, 0.31466019, 0.31466019, 0.31466019).x
//         dp3h_sat r5.w, r8, r44
//         movr r44, c[6][438]
//         movr r44.x, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.y, constant(1.60000014, 1.60000014, 1.60000014, 1.60000014).x
//         movr r44.z, constant(1.15294123, 1.15294123, 1.15294123, 1.15294123).x
//         mulh r9.xyz, r5.w, r44
//         mulh_sat r5.w, r5.w, constant(-0.00100000, 2.20000005, 0.25000000, 10.00000000).w
//         movr r45, -c[6][432]
//         movr r45.x, -constant(-0.54500747, -0.54500747, -0.54500747, -0.54500747).x
//         movr r45.y, -constant(-0.77714592, -0.77714592, -0.77714592, -0.77714592).x
//         movr r45.z, -constant(0.31466019, 0.31466019, 0.31466019, 0.31466019).x
//         dp3h_sat r6.w, r45, r10
//         lg2r r47, |r6.w|
//         movr r44, c[6][433].x
//         movr r44.x, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         movr r44.y, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         movr r44.z, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         movr r44.w, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         mulr r47, r47, r44
//         ex2r r47, r47
//         movh r7.w, r47
//         movr r44, c[6][438]
//         movr r44.x, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r44.y, constant(1.60000014, 1.60000014, 1.60000014, 1.60000014).x
//         movr r44.z, constant(1.15294123, 1.15294123, 1.15294123, 1.15294123).x
//         mulh r11.xyz, r7.w, r44
//         mulh r11.xyz, r5.w, r11
//         mulh r11.xyz, r5.z, r11
//         movh r8.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         movr r45, c[6][423]
//         movr r45.w, constant(0.22917245, 0.22917245, 0.22917245, 0.22917245).x
//         dp4h r12.x, r45, r8
//         dp4h r12.y, c[6][424], r8
//         dp4h r12.z, c[6][425], r8
//         mulh r13, r8.yzzx, r8.xyzz
//         dp4h r14.x, c[6][426], r13
//         movr r45, c[6][427]
//         movr r45.w, constant(-0.06514336, -0.06514336, -0.06514336, -0.06514336).x
//         dp4h r14.y, r45, r13
//         dp4h r14.z, c[6][428], r13
//         mulh r5.w, r8.y, r8.y
//         madh r5.w, r8.x, r8.x, -r5.w
//         addh r12.xyz, r12, r14
//         movr r45, c[6][429]
//         movr r45.x, constant(0.06599397, 0.06599397, 0.06599397, 0.06599397).x
//         madh r12.xyz, r45, r5.w, r12
//         mulh r12.xyz, r5.x, r12
//         madh r5.xzw, r9.xyyz, r5.z, r12.xyyz
//         movr r9.xyz, r5.xzww
//         movr r12.xyz, r11
//         movr r6.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).y
//         rep c[6][474], l10
//         addr r13, r6.w, constant(-1.00000000, -2.00000000, -3.00000000, -4.00000000)
//         movr r14.y, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).y
//         cmpr r14.xzw, -r6.w, c[6][415].xyyz, r14.y
//         cmpr r14.xzw, -|r13.x|, c[6][416].xyyz, r14
//         cmpr r14.xzw, -|r13.y|, c[6][417].xyyz, r14
//         cmpr r13.xyz, -|r13.z|, c[6][418], r14.xzww
//         cmpr r13.xyz, -|r13.w|, c[6][419], r13
//         addh r13.xyz, r13, -v8
//         dp3h r7.w, r13, r13
//         rcph r8.w, r7.w
//         rsqh r7.w, |r7.w|
//         mulh r13.xyz, r13, r7.w
//         addr r15, r6.w, constant(0.00000000, -1.00000000, -2.00000000, -3.00000000)
//         cmpr r14.xyz, -|r15.x|, c[6][419], r14.y
//         cmpr r14.xyz, -|r15.y|, c[6][420], r14
//         cmpr r14.xyz, -|r15.z|, c[6][421], r14
//         cmpr r14.xyz, -|r15.w|, c[6][422], r14
//         mulh r14.xyz, r8.w, r14
//         dp3h_sat r7.w, r8, r13
//         madh r9.xyz, r14, r7.w, r9
//         mulh_sat r7.w, r7.w, constant(-0.00100000, 2.20000005, 0.25000000, 10.00000000).w
//         dp3h_sat r8.w, r13, r10
//         lg2r r47, |r8.w|
//         movr r44, c[6][433].x
//         movr r44.x, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         movr r44.y, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         movr r44.z, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         movr r44.w, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         mulr r47, r47, r44
//         ex2r r47, r47
//         movh r9.w, r47
//         mulh r13.xyz, r14, r9.w
//         madh r12.xyz, r13, r7.w, r12
//         addr r6.w, r6.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//         l10:
//         texh r8, r10.xyzz, #2, #2, LWBE
//         movr r44, c[6][448].x
//         movr r44.x, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         movr r44.y, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         movr r44.z, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         movr r44.w, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         mulh r5.xzw, r8.xyyz, r44
//         mulh r5.xzw, r5, constant(8.00000000, 0.29899999, 0.58700001, 0.14399999).x
//         madh r8.xyz, r5.y, constant(-0.00100000, 2.20000005, 0.25000000, 10.00000000).w, r9
//         movr r44, c[6][434].x
//         movr r44.x, constant(26.00000000, 26.00000000, 26.00000000, 26.00000000).x
//         movr r44.y, constant(26.00000000, 26.00000000, 26.00000000, 26.00000000).x
//         movr r44.z, constant(26.00000000, 26.00000000, 26.00000000, 26.00000000).x
//         movr r44.w, constant(26.00000000, 26.00000000, 26.00000000, 26.00000000).x
//         madh r5.xyz, r12, r44, r5.xzww
//         dp3h r5.w, r7, constant(8.00000000, 0.29899999, 0.58700001, 0.14399999).yzww
//         movr r45, -c[6][446].x
//         movr r45.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         cmph r7.xyz, r45, r7, r5.w
//         movr r45, c[6][446].x
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r9.x, r45
//         movr r43, c[6][435]
//         movr r43.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmph r8.xyz, -r9.x, r8, r43
//         movr r43, c[6][436]
//         movr r43.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmph r5.xyz, -r9.x, r5, r43
//         mulh r5.xyz, r6, r5
//         madh r5.xyz, r7, r8, r5
//         mulr r6.xy, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).yzzw, v4.z
//         texr r6, r6.xyzz, #1, #1, 2D
//         dp3r_sat r5.w, r5, constant(0.66000003, -0.01000000, 0.01000000, 0.12500000).x
//         ife , cBool05, l11, l12
//         addr r7.xy, constant(0.66000003, -0.01000000, 0.01000000, 0.12500000).y, v4
//         texh r7, r7.xyzz, #0, #0, 2D
//         addr r7.xy, constant(0.66000003, -0.01000000, 0.01000000, 0.12500000).zyzw, v4
//         texh r8, r7.xyzz, #0, #0, 2D
//         addr r7.xy, constant(0.66000003, -0.01000000, 0.01000000, 0.12500000).z, v4
//         texh r9, r7.xyzz, #0, #0, 2D
//         addr r7.xy, constant(0.66000003, -0.01000000, 0.01000000, 0.12500000).yzzw, v4
//         texh r10, r7.xyzz, #0, #0, 2D
//         texh r11, v4.xyzz, #0, #0, 2D
//         addh r7.x, r7.w, r8.w
//         addh r7.x, r9.w, r7.x
//         addh r7.x, r10.w, r7.x
//         mulh r7.y, r11.w, -constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).x
//         madh r7.x, r7.x, constant(0.66000003, -0.01000000, 0.01000000, 0.12500000).w, r7.y
//         l11:
//         movr r7.x, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).y
//         l12:
//         madr r7.yzw, r6.xxyz, r5.w, -r5.xxyz
//         madr r7.xyz, r7.x, r7.yzww, r5
//         dp3r r5.x, r5, constant(8.00000000, 0.29899999, 0.58700001, 0.14399999).yzww
//         dp3r r5.y, r6, constant(8.00000000, 0.29899999, 0.58700001, 0.14399999).yzww
//         addr r5.x, -r5.x, r5.y
//         movr r44, c[6][437].x
//         movr r44.x, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         movr r44.y, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         movr r44.z, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         movr r44.w, constant(0.20000000, 0.20000000, 0.20000000, 0.20000000).x
//         mulr r5.x, r5.x, r44
//         mulr r5.x, r5.x, constant(2.88539004, 65504.00000000, 0.00000000, 0.00000000).x
//         ex2r r5.x, r5.x
//         mulr_sat r5.x, r6.w, r5.x
//         lrpr r8.xyz, r5.x, r6, r7
//         movr r44, c[6][444]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         dp3r r5.x, r8, r44
//         movr r44, c[6][444].w
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madr r5.xyz, r8, r44, r5.x
//         movr r44, c[6][443]
//         movr r44.x, constant(1.00393701, 1.00393701, 1.00393701, 1.00393701).x
//         movr r44.y, constant(1.00393701, 1.00393701, 1.00393701, 1.00393701).x
//         movr r44.z, constant(1.00393701, 1.00393701, 1.00393701, 1.00393701).x
//         movr r44.w, constant(-0.00393701, -0.00393701, -0.00393701, -0.00393701).x
//         movr r43, c[6][443].w
//         movr r43.x, constant(-0.00393701, -0.00393701, -0.00393701, -0.00393701).x
//         movr r43.y, constant(-0.00393701, -0.00393701, -0.00393701, -0.00393701).x
//         movr r43.z, constant(-0.00393701, -0.00393701, -0.00393701, -0.00393701).x
//         movr r43.w, constant(-0.00393701, -0.00393701, -0.00393701, -0.00393701).x
//         madr_sat r6.xyz, r5, r44, r43
//         movr r45, -c[6][445].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r5.xyz, r45, r5, r6
//         movr r45, -c[6][442].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r5.xyz, r45, r5, r8
//         minh r0.xyz, r5, constant(2.88539004, 65504.00000000, 0.00000000, 0.00000000).y
//         movh r0.w, constant(-0.50000000, 0.00000000, 1.00000000, -2.00000000).z
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R24, R0;                # [  1][000008]
//     	IPA.SC R11, a[0x324], R24;       # [  2][000010] FIXED_FNC_TEXTURE_2_T
//     	IPA.SC R10, a[0x320], R24;       # [  3][000018] TEX2
//     	TEX.NODEP.P R0, R10, 0x6, 0x6, 2D; # [  4][000020]
//     	FADD.FTZ R3, R3, -0.5;           # [  5][000028]
//     	FCMP.GE R3, RZ, 0x3f800, R3;     # [  6][000030]
//     	FMUL.FMZ R3, R3, c[0x6][0x1bf0]; # [  7][000038]
//     	F2F RZ.CC, -R3;                  # [  8][000040]
//     	KIL CC.LT;                       # [  9][000048]
//     	MOV32I R12, -0x4125bca4;         # [ 10][000050]
//     	TEX.P R4, R10, 0x7, 0x7, 2D, 0x7; # [ 11][000058]
//     	MOV32I R13, -0x40400bfc;         # [ 12][000060]
//     	IPA.SC R16, a[0x348], R24;       # [ 13][000068] FIXED_FNC_TEXTURE_4_R
//     	ISETP.GE.AND P0, PT, RZ, c[0x6][0x1da0], PT; # [ 14][000070]
//     	IPA.SC R14, a[0x340], R24;       # [ 15][000078] TEX4
//     	MOV32I R28, 0x3f800000;          # [ 16][000080]
//     	IPA.SC R15, a[0x344], R24;       # [ 17][000088] FIXED_FNC_TEXTURE_4_T
//     	MOV32I R21, -0x41c1d0f0;         # [ 18][000090]
//     	IPA.SC R26, a[0x350], R24;       # [ 19][000098] TEX5
//     	MOV R8, RZ;                      # [ 20][0000a0]
//     	IPA.SC R25, a[0x354], R24;       # [ 21][0000a8] FIXED_FNC_TEXTURE_5_T
//     	F2F.FTZ R3, R16;                 # [ 22][0000b0]
//     	IPA.SC R23, a[0x358], R24;       # [ 23][0000b8] FIXED_FNC_TEXTURE_5_R
//     	MOV R22, RZ;                     # [ 24][0000c0]
//     	IPA.SC R19, a[0x318], R24;       # [ 25][0000c8] FIXED_FNC_TEXTURE_1_R
//     	FFMA.FMZ R12, R14, c[0x9][0x0], R12; # [ 26][0000d0]
//     	IPA.SC R17, a[0x314], R24;       # [ 27][0000d8] FIXED_FNC_TEXTURE_1_T
//     	FFMA.FMZ R13, R15, c[0x9][0x4], R13; # [ 28][0000e0]
//     	IPA.SC R27, a[0x310], R24;       # [ 29][0000e8] TEX1
//     	MUFU.LG2 R1, |R1|;               # [ 30][0000f0]
//     	IPA.SC R20, a[0x300], R24;       # [ 31][0000f8] TEX0
//     	IPA.SC R18, a[0x304], R24;       # [ 32][000100] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R9, a[0x308], R24;        # [ 33][000108] FIXED_FNC_TEXTURE_0_R
//     	IPA.SC R7, a[0x364], R24;        # [ 34][000110] FIXED_FNC_TEXTURE_6_T
//     	TEX.DC.NODEP.T R3, R14, R3, 0x4, 0x4, 2D, 0x1; # [ 35][000118]
//     	FFMA.FMZ R14, R16, c[0x9][0x8], R21; # [ 36][000120]
//     	MUFU.LG2 R15, |R0|;              # [ 37][000128]
//     	MUFU.LG2 R0, |R2|;               # [ 38][000130]
//     	IPA.SC R16, a[0x360], R24;       # [ 39][000138] TEX6
//     	TEX.DC.NODEP.T R14, R12, R14, 0x3, 0x3, 2D, 0x1; # [ 40][000140]
//     	FMUL32I.FMZ R12, R0, 2.2;        # [ 41][000148]
//     	IPA.SC R21, a[0x34c], R24;       # [ 42][000150] FIXED_FNC_TEXTURE_4_Q
//     	FMUL32I.FMZ R0, R1, 2.2;         # [ 43][000158]
//     	FMUL32I.FMZ R1, R15, 2.2;        # [ 44][000160]
//     	NOP;                             # [ 45][000168]
//     	RRO.EX2 R12, R12;                # [ 46][000170]
//     	TEX.NODEP.P R15, R10, 0x8, 0x8, 2D, 0x1; # [ 47][000178]
//     	FFMA.FMZ R13, R5, 2, -R28;       # [ 48][000180]
//     	FFMA.FMZ R2, R6, 2, -R28;        # [ 49][000188]
//     	FFMA.FMZ R28, R4, 2, -R28;       # [ 50][000190]
//     	FMUL.FMZ R5, R13, R25;           # [ 51][000198]
//     	FMUL.FMZ R4, R13, R26;           # [ 52][0001a0]
//     	FMUL.FMZ R6, R13, R23;           # [ 53][0001a8]
//     	FFMA.FMZ R4, R28, R27, R4;       # [ 54][0001b0]
//     	FFMA.FMZ R5, R28, R17, R5;       # [ 55][0001b8]
//     	FFMA.FMZ R17, R28, R19, R6;      # [ 56][0001c0]
//     	FFMA.FMZ R4, R2, R20, R4;        # [ 57][0001c8]
//     	FFMA.FMZ R5, R2, R18, R5;        # [ 58][0001d0]
//     	TEX.NODEP.T R13, R10, 0xa, 0xa, 2D, 0x1; # [ 59][0001d8]
//     	FMUL.FTZ R6, R4, R4;             # [ 60][0001e0]
//     	FFMA.FMZ R9, R2, R9, R17;        # [ 61][0001e8]
//     	RRO.EX2 R1, R1;                  # [ 62][0001f0]
//     	FFMA.FTZ R2, R5, R5, R6;         # [ 63][0001f8]
//     	RRO.EX2 R17, R0;                 # [ 64][000200]
//     	FFMA.FTZ R6, R9, R9, R2;         # [ 65][000208]
//     	MUFU.EX2 R19, R1;                # [ 66][000210]
//     	F2F.SAT R21, R21;                # [ 67][000218]
//     	TEX.NODEP.P R0, R10, 0x9, 0x9, 2D, 0x7; # [ 68][000220]
//     	MUFU.RSQ R10, |R6|;              # [ 69][000228]
//     	MUFU.EX2 R18, R12;               # [ 70][000230]
//     	MUFU.RCP R11, R10;               # [ 71][000238]
//     	FMUL.FMZ R12, R4, R10;           # [ 72][000240]
//     	FMUL.FMZ R9, R9, R10;            # [ 73][000248]
//     	FMUL.FMZ R5, R5, R10;            # [ 74][000250]
//     	FADD32I.FTZ R4, R11, -0.001;     # [ 75][000258]
//     	FCMP.GE R10, R12, RZ, R4;        # [ 76][000260]
//     	IPA.SC R6, a[0x368], R24;        # [ 77][000268] FIXED_FNC_TEXTURE_6_R
//     	FCMP.GE R9, R9, 0x3f800, R4;     # [ 78][000270]
//     	FCMP.GE R12, R5, RZ, R4;         # [ 79][000278]
//     	FMUL.FTZ R4, R16, -R10;          # [ 80][000280]
//     	FMUL.FTZ R25, R10, c[0x6][0x1a90]; # [ 81][000288]
//     	FFMA.FTZ R4, R7, -R12, R4;       # [ 82][000290]
//     	FFMA.FTZ R25, R12, c[0x6][0x1a94], R25; # [ 83][000298]
//     	FFMA.FTZ R4, R6, -R9, R4;        # [ 84][0002a0]
//     	FFMA.FTZ R25, R9, c[0x6][0x1a98], R25; # [ 85][0002a8]
//     	FMUL.FTZ R27, R10, c[0x6][0x1a80]; # [ 86][0002b0]
//     	FADD.FTZ R30, R4, R4;            # [ 87][0002b8]
//     	FMUL.FTZ R28, R10, c[0x6][0x1a70]; # [ 88][0002c0]
//     	FFMA.FMZ R4, R10, -R30, -R16;    # [ 89][0002c8]
//     	FADD.FTZ R29, R25, c[0x6][0x1a9c]; # [ 90][0002d0]
//     	FFMA.FMZ R6, R9, -R30, -R6;      # [ 91][0002d8]
//     	FFMA.FTZ R27, R12, c[0x6][0x1a84], R27; # [ 92][0002e0]
//     	FFMA.FMZ R25, R12, -R30, -R7;    # [ 93][0002e8]
//     	FFMA.FTZ R28, R12, c[0x6][0x1a74], R28; # [ 94][0002f0]
//     	FMUL.FTZ R7, R4, R4;             # [ 95][0002f8]
//     	FFMA.FTZ R27, R9, c[0x6][0x1a88], R27; # [ 96][000300]
//     	FMUL.FMZ R26, R12, R10;          # [ 97][000308]
//     	FFMA.FTZ R28, R9, c[0x6][0x1a78], R28; # [ 98][000310]
//     	FFMA.FTZ R7, R25, R25, R7;       # [ 99][000318]
//     	FADD.FTZ R27, R27, c[0x6][0x1a8c]; # [100][000320]
//     	FADD32I.FTZ R28, R28, 0x3e6aac2f; # [101][000328]
//     	FFMA.FTZ R7, R6, R6, R7;         # [102][000330]
//     	FFMA.FTZ R16, R26, c[0x6][0x1ac0], R29; # [103][000338]
//     	FFMA.FTZ R29, R26, c[0x6][0x1ab0], R27; # [104][000340]
//     	FMUL32I.FTZ R23, R10, 0x3f0b859c; # [105][000348]
//     	FFMA.FTZ R28, R26, c[0x6][0x1aa0], R28; # [106][000350]
//     	FMUL.FMZ R5, R9, R9;             # [107][000358]
//     	MUFU.RSQ R26, R7;                # [108][000360]
//     	FFMA.FTZ R27, R12, c[0x9][0xc], R23; # [109][000368]
//     	FFMA.FTZ R23, R5, c[0x6][0x1ac8], R16; # [110][000370]
//     	FMUL.FTZ R4, R4, R26;            # [111][000378]
//     	FFMA.FTZ R16, R5, c[0x6][0x1ab8], R29; # [112][000380]
//     	FMUL.FTZ R6, R6, R26;            # [113][000388]
//     	FFMA.FTZ R28, R5, c[0x6][0x1aa8], R28; # [114][000390]
//     	FMUL32I.FTZ R29, R4, 0x3f0b859c; # [115][000398]
//     	FMUL.FTZ R5, R25, R26;           # [116][0003a0]
//     	MUFU.EX2 R20, R17;               # [117][0003a8]
//     	FFMA.FTZ.SAT R25, R9, c[0x9][0x10], R27; # [118][0003b0]
//     	FMUL.FMZ R30, R12, R12;          # [119][0003b8]
//     	FFMA.FTZ R27, R5, c[0x9][0xc], R29; # [120][0003c0]
//     	FMUL.FMZ R17, R10, R9;           # [121][0003c8]
//     	FFMA.FMZ R7, R10, R10, -R30;     # [122][0003d0]
//     	FFMA.FTZ.SAT R27, R6, c[0x9][0x10], R27; # [123][0003d8]
//     	FMUL.FMZ R11, R9, R12;           # [124][0003e0]
//     	FFMA.FTZ R23, R17, c[0x6][0x1acc], R23; # [125][0003e8]
//     	MUFU.LG2 R30, |R27|;             # [126][0003f0]
//     	FFMA.FTZ R16, R17, c[0x9][0x14], R16; # [127][0003f8]
//     	FFMA.FTZ R29, R17, c[0x6][0x1aac], R28; # [128][000400]
//     	FADD.FTZ R3, R3, -R14;           # [129][000408]
//     	FFMA.FTZ R27, R11, c[0x6][0x1ac4], R23; # [130][000410]
//     	FMUL.FMZ.SAT R26, R25, 10;       # [131][000418]
//     	FMUL.FMZ R23, R30, 50;           # [132][000420]
//     	FFMA.FTZ R28, R11, c[0x6][0x1ab4], R16; # [133][000428]
//     	FFMA.FTZ R29, R11, c[0x6][0x1aa4], R29; # [134][000430]
//     	FMUL.FMZ R17, R25, 2;            # [135][000438]
//     	RRO.EX2 R11, R23;                # [136][000440]
//     	FMUL32I.FMZ R16, R25, 0x3fccccce; # [137][000448]
//     	FMUL32I.FMZ R23, R25, 0x3f939394; # [138][000450]
//     	MUFU.EX2 R11, R11;               # [139][000458]
//     	FFMA.FMZ R25, R7, c[0x9][0x18], R29; # [140][000460]
//     	FFMA.FTZ.SAT R21, R21, R3, R14;  # [141][000468]
//     	FFMA.FMZ R28, R7, c[0x6][0x1ad4], R28; # [142][000470]
//     	FMUL32I.FMZ R14, R11, 0x3fccccce; # [143][000478]
//     	FFMA.FMZ R7, R7, c[0x6][0x1ad8], R27; # [144][000480]
//     	FMUL32I.FMZ R3, R11, 0x3f939394; # [145][000488]
//     	FMUL.FMZ R27, R11, 2;            # [146][000490]
//     	FMUL.FMZ R7, R15, R7;            # [147][000498]
//     	FMUL.FMZ R11, R26, R14;          # [148][0004a0]
//     	FMUL.FMZ R27, R26, R27;          # [149][0004a8]
//     	FMUL.FMZ R14, R26, R3;           # [150][0004b0]
//     	FMUL.FMZ R11, R21, R11;          # [151][0004b8]
//     	FMUL.FMZ R26, R15, R25;          # [152][0004c0]
//     	FMUL.FMZ R3, R21, R27;           # [153][0004c8]
//     	FMUL.FMZ R25, R15, R28;          # [154][0004d0]
//     	FMUL.FMZ R14, R21, R14;          # [155][0004d8]
//     	FFMA.FMZ R17, R17, R21, R26;     # [156][0004e0]
//     	FFMA.FMZ R15, R23, R21, R7;      # [157][0004e8]
//     	FFMA.FMZ R16, R16, R21, R25;     # [158][0004f0]
//     	FMUL.FMZ R21, R13, c[0x6][0x1c10]; # [159][0004f8]
//     	@P0 BRA L0770;                   # [160][000500]
//     L0508:
//     	FADD.FTZ R27, R8, -1;            # [161][000508]
//     	FCMP.GTU R7, RZ, c[0x6][0x19f0], R8; # [162][000510]
//     	FADD.FTZ R28, R8, -2;            # [163][000518]
//     	FCMP.GTU R25, RZ, c[0x6][0x19f8], R8; # [164][000520]
//     	F2F R27, -|R27|;                 # [165][000528]
//     	FCMP.GTU R31, RZ, c[0x6][0x19f4], R8; # [166][000530]
//     	F2F R28, -|R28|;                 # [167][000538]
//     	FADD.FTZ R29, R8, -3;            # [168][000540]
//     	FCMP.LTU R7, R7, c[0x6][0x1a00], R27; # [169][000548]
//     	FCMP.LTU R25, R25, c[0x6][0x1a08], R27; # [170][000550]
//     	FCMP.LTU R31, R31, c[0x6][0x1a04], R27; # [171][000558]
//     	FADD.FTZ R30, R8, -4;            # [172][000560]
//     	F2F R29, -|R29|;                 # [173][000568]
//     	FCMP.LTU R7, R7, c[0x6][0x1a10], R28; # [174][000570]
//     	FCMP.LTU R25, R25, c[0x6][0x1a18], R28; # [175][000578]
//     	FCMP.LTU R31, R31, c[0x6][0x1a14], R28; # [176][000580]
//     	IPA.SC R13, a[0x370], R24;       # [177][000588] TEX7
//     	F2F R30, -|R30|;                 # [178][000590]
//     	IPA.SC R26, a[0x378], R24;       # [179][000598] FIXED_FNC_TEXTURE_7_R
//     	FCMP.LTU R7, R7, c[0x6][0x1a20], R29; # [180][0005a0]
//     	IPA.SC R23, a[0x374], R24;       # [181][0005a8] FIXED_FNC_TEXTURE_7_T
//     	FCMP.LTU R25, R25, c[0x6][0x1a28], R29; # [182][0005b0]
//     	FCMP.LTU R31, R31, c[0x6][0x1a24], R29; # [183][0005b8]
//     	FCMP.LTU R7, R7, c[0x6][0x1a30], R30; # [184][0005c0]
//     	FCMP.LTU R25, R25, c[0x6][0x1a38], R30; # [185][0005c8]
//     	FCMP.LTU R31, R31, c[0x6][0x1a34], R30; # [186][0005d0]
//     	FADD.FTZ R7, R7, -R13;           # [187][0005d8]
//     	FADD.FTZ R30, R25, -R26;         # [188][0005e0]
//     	FADD.FTZ R13, R31, -R23;         # [189][0005e8]
//     	FMUL.FTZ R26, R7, R7;            # [190][0005f0]
//     	F2F R23, -|R8|;                  # [191][0005f8]
//     	FFMA.FTZ R26, R13, R13, R26;     # [192][000600]
//     	FCMP.LTU R25, RZ, c[0x6][0x1a38], R23; # [193][000608]
//     	FCMP.LTU R31, RZ, c[0x6][0x1a30], R23; # [194][000610]
//     	FFMA.FTZ R26, R30, R30, R26;     # [195][000618]
//     	FCMP.LTU R23, RZ, c[0x6][0x1a34], R23; # [196][000620]
//     	IADD R22, R22, 0x1;              # [197][000628]
//     	FCMP.LTU R25, R25, c[0x6][0x1a48], R27; # [198][000630]
//     	FCMP.LTU R31, R31, c[0x6][0x1a40], R27; # [199][000638]
//     	FCMP.LTU R23, R23, c[0x6][0x1a44], R27; # [200][000640]
//     	FADD.FTZ R8, R8, 1;              # [201][000648]
//     	MUFU.RSQ R27, |R26|;             # [202][000650]
//     	FCMP.LTU R25, R25, c[0x6][0x1a58], R28; # [203][000658]
//     	FCMP.LTU R23, R23, c[0x6][0x1a54], R28; # [204][000660]
//     	FMUL.FMZ R7, R7, R27;            # [205][000668]
//     	FMUL.FMZ R13, R13, R27;          # [206][000670]
//     	FCMP.LTU R28, R31, c[0x6][0x1a50], R28; # [207][000678]
//     	FMUL.FMZ R27, R30, R27;          # [208][000680]
//     	MUFU.RCP R26, R26;               # [209][000688]
//     	FMUL.FTZ R30, R7, R4;            # [210][000690]
//     	FCMP.LTU R25, R25, c[0x6][0x1a68], R29; # [211][000698]
//     	FCMP.LTU R28, R28, c[0x6][0x1a60], R29; # [212][0006a0]
//     	FFMA.FTZ R30, R13, R5, R30;      # [213][0006a8]
//     	FCMP.LTU R29, R23, c[0x6][0x1a64], R29; # [214][0006b0]
//     	FFMA.FTZ.SAT R30, R27, R6, R30;  # [215][0006b8]
//     	FMUL.FMZ R23, R26, R25;          # [216][0006c0]
//     	FMUL.FTZ R31, R10, R7;           # [217][0006c8]
//     	FMUL.FMZ R25, R26, R29;          # [218][0006d0]
//     	FMUL.FMZ R7, R26, R28;           # [219][0006d8]
//     	MUFU.LG2 R29, |R30|;             # [220][0006e0]
//     	FFMA.FTZ R26, R12, R13, R31;     # [221][0006e8]
//     	FMUL.FMZ R13, R29, 50;           # [222][0006f0]
//     	FFMA.FTZ.SAT R26, R9, R27, R26;  # [223][0006f8]
//     	RRO.EX2 R13, R13;                # [224][000700]
//     	FFMA.FMZ R17, R7, R26, R17;      # [225][000708]
//     	MUFU.EX2 R13, R13;               # [226][000710]
//     	FFMA.FMZ R16, R25, R26, R16;     # [227][000718]
//     	FFMA.FMZ R15, R23, R26, R15;     # [228][000720]
//     	ISETP.LT.AND P0, PT, R22, c[0x6][0x1da0], PT; # [229][000728]
//     	FMUL.FMZ.SAT R26, R26, 10;       # [230][000730]
//     	FMUL.FMZ R23, R23, R13;          # [231][000738]
//     	FMUL.FMZ R25, R25, R13;          # [232][000740]
//     	FMUL.FMZ R7, R7, R13;            # [233][000748]
//     	FFMA.FMZ R14, R23, R26, R14;     # [234][000750]
//     	FFMA.FMZ R11, R25, R26, R11;     # [235][000758]
//     	FFMA.FMZ R3, R7, R26, R3;        # [236][000760]
//     	@P0 BRA L0508;                   # [237][000768]
//     L0770:
//     	FMNMX R7, |R4|, |R5|, !PT;       # [238][000770]
//     	IPA.SC R13, a[0x334], R24;       # [239][000778] FIXED_FNC_TEXTURE_3_T
//     	FMNMX R7, |R6|, R7, !PT;         # [240][000780]
//     	IPA.SC R12, a[0x330], R24;       # [241][000788] TEX3
//     	MUFU.RCP R7, R7;                 # [242][000790]
//     	FFMA.FMZ R17, R21, 10, R17;      # [243][000798]
//     	FMUL R6, R6, R7;                 # [244][0007a0]
//     	FMUL R5, R5, R7;                 # [245][0007a8]
//     	FMUL R4, R4, R7;                 # [246][0007b0]
//     	TEX.NODEP.T R8, R4, 0x2, 0x2, LWBE, 0x7; # [247][0007b8]
//     	FADD32I.FTZ R5, R13, -0.01;      # [248][0007c0]
//     	FADD32I.FTZ R4, R12, -0.01;      # [249][0007c8]
//     	FADD32I.FTZ R6, R12, 0.01;       # [250][0007d0]
//     	TEX.NODEP.T R22, R4, 0x0, 0x0, 2D, 0x8; # [251][0007d8]
//     	MOV R7, R5;                      # [252][0007e0]
//     	TEX.NODEP.T R23, R6, 0x0, 0x0, 2D, 0x8; # [253][0007e8]
//     	FADD32I.FTZ R7, R13, 0.01;       # [254][0007f0]
//     	TEX.NODEP.T R25, R6, 0x0, 0x0, 2D, 0x8; # [255][0007f8]
//     	MOV R5, R7;                      # [256][000800]
//     	MOV R6, RZ;                      # [257][000808]
//     	IPA.SC R7, a[0x338], R24;        # [258][000810] FIXED_FNC_TEXTURE_3_R
//     	TEX.NODEP.T R24, R4, 0x0, 0x0, 2D, 0x8; # [259][000818]
//     	TEX.NODEP.T R4, R6, 0x1, 0x1, 2D; # [260][000820]
//     	TEX.NODEP.P R12, R12, 0x0, 0x0, 2D, 0x8; # [261][000828]
//     	FFMA.FMZ R13, R21, 10, R16;      # [262][000830]
//     	FMUL32I.FMZ R9, R9, 1.6;         # [263][000838]
//     	FMUL32I.FMZ R16, R8, 1.6;        # [264][000840]
//     	FMUL32I.FMZ R10, R10, 1.6;       # [265][000848]
//     	FFMA.FMZ R3, R3, 26, R16;        # [266][000850]
//     	FFMA.FMZ R9, R11, 26, R9;        # [267][000858]
//     	FMUL.FMZ R0, R0, R3;             # [268][000860]
//     	FMUL.FMZ R1, R1, R9;             # [269][000868]
//     	FFMA.FMZ R3, R14, 26, R10;       # [270][000870]
//     	FFMA.FMZ R8, R21, 10, R15;       # [271][000878]
//     	FFMA.FMZ R0, R19, R17, R0;       # [272][000880]
//     	FFMA.FMZ R1, R20, R13, R1;       # [273][000888]
//     	FMUL.FMZ R2, R2, R3;             # [274][000890]
//     	FADD.FTZ R9, R22, R23;           # [275][000898]
//     	FMUL32I.FTZ R3, R0, 0.299;       # [276][0008a0]
//     	FFMA.FMZ R2, R18, R8, R2;        # [277][0008a8]
//     	FFMA.FTZ R8, R1, -c[0x9][0x20], -R3; # [278][0008b0]
//     	FADD.FTZ R9, R25, R9;            # [279][0008b8]
//     	FFMA.FTZ R10, R2, -c[0x9][0x24], R8; # [280][0008c0]
//     	MOV32I R3, 0x3f800000;           # [281][0008c8]
//     	FMUL32I.FTZ R8, R0, 0.66;        # [282][0008d0]
//     	FFMA.FTZ R8, R1, c[0x9][0x1c], R8; # [283][0008d8]
//     	FFMA.FTZ R10, R4, c[0x9][0x28], R10; # [284][0008e0]
//     	FFMA.FTZ R11, R6, c[0x9][0x24], R10; # [285][0008e8]
//     	FADD.FTZ R10, R24, R9;           # [286][0008f0]
//     	FFMA.FTZ R11, R5, c[0x9][0x20], R11; # [287][0008f8]
//     	FMUL.FMZ R9, R12, 0.5;           # [288][000900]
//     	FFMA.FTZ.SAT R12, R2, c[0x9][0x1c], R8; # [289][000908]
//     	FFMA.FMZ R13, R10, 0.125, R9;    # [290][000910]
//     	FMUL32I.FMZ R8, R11, 0x3f13bb63; # [291][000918]
//     	FFMA.FMZ R9, R4, R12, -R0;       # [292][000920]
//     	FFMA.FMZ R11, R6, R12, -R2;      # [293][000928]
//     	RRO.EX2 R8, R8;                  # [294][000930]
//     	FFMA.FMZ R9, R13, R9, R0;        # [295][000938]
//     	FFMA.FMZ R10, R5, R12, -R1;      # [296][000940]
//     	MUFU.EX2 R0, R8;                 # [297][000948]
//     	FFMA.FMZ R8, R13, R11, R2;       # [298][000950]
//     	FMUL.FMZ.SAT R0, R7, R0;         # [299][000958]
//     	FFMA.FMZ R2, R13, R10, R1;       # [300][000960]
//     	FADD.FTZ R1, R4, -R9;            # [301][000968]
//     	FADD.FTZ R4, R5, -R2;            # [302][000970]
//     	FFMA.FTZ R1, R0, R1, R9;         # [303][000978]
//     	FADD.FTZ R5, R6, -R8;            # [304][000980]
//     	FFMA.FTZ R2, R0, R4, R2;         # [305][000988]
//     	FFMA.FTZ R4, R0, R5, R8;         # [306][000990]
//     	FMNMX.FTZ R0, R1, 65504, PT;     # [307][000998]
//     	FMNMX.FTZ R1, R2, 65504, PT;     # [308][0009a0]
//     	FMNMX.FTZ R2, R4, 65504, PT;     # [309][0009a8]
//     	EXIT;                            # [310][0009b0]
//     	END
//     END_SECTION
// END_SHADER
// 
