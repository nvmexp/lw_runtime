// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 10.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x27a9433a8adbc15f
//         FINGERPRINTER_HASH: 0xda788baa67f536c5
//         UCODE_HASH: 0x535c5bf0c1fb8614
//         POOL: APP
//         VERSION: 20
//         # USES: 211
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 1
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 42
//         TEXTURE_SLOTS: 8
//         SAMPLER_SLOTS: 8
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             GENERIC00_X          PERSPECTIVE
//             GENERIC00_Y          PERSPECTIVE
//             GENERIC00_Z          PERSPECTIVE
//             GENERIC00_W          PERSPECTIVE
//             GENERIC01_X          PERSPECTIVE
//             GENERIC01_Y          PERSPECTIVE
//             GENERIC01_Z          PERSPECTIVE
//             GENERIC01_W          PERSPECTIVE
//             GENERIC02_X          PERSPECTIVE
//             GENERIC02_Y          PERSPECTIVE
//             GENERIC02_Z          PERSPECTIVE
//             GENERIC02_W          PERSPECTIVE
//             GENERIC03_X          PERSPECTIVE
//             GENERIC03_Y          PERSPECTIVE
//             GENERIC03_Z          PERSPECTIVE
//             GENERIC03_W          PERSPECTIVE
//             GENERIC04_X          PERSPECTIVE
//             GENERIC04_Y          PERSPECTIVE
//             GENERIC04_W          PERSPECTIVE
//             GENERIC05_X          PERSPECTIVE
//             GENERIC05_Y          PERSPECTIVE
//             GENERIC05_Z          PERSPECTIVE
//             GENERIC06_X          PERSPECTIVE
//             GENERIC06_Y          PERSPECTIVE
//             GENERIC06_Z          PERSPECTIVE
//             GENERIC06_W          PERSPECTIVE
//             GENERIC07_X          PERSPECTIVE
//             GENERIC07_Y          PERSPECTIVE
//             GENERIC07_Z          PERSPECTIVE
//             GENERIC07_W          PERSPECTIVE
//             GENERIC08_X          PERSPECTIVE
//             GENERIC08_Y          PERSPECTIVE
//             GENERIC08_Z          PERSPECTIVE
//             GENERIC08_W          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_4_0
        dcl_input_ps v0.xyzw, linear
        dcl_input_ps v1.xyzw, linear
        dcl_input_ps v2.xyzw, linear
        dcl_input_ps v3.xyzw, linear
        dcl_input_ps v4.xyw, linear
        dcl_input_ps v5.xyz, linear
        dcl_input_ps v6.xyzw, linear
        dcl_input_ps v7.xyzw, linear
        dcl_input_ps v8.xyzw, linear
        dcl_output o0.xyzw
        dcl_constantbuffer cb0[66].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s1, mode_default
        dcl_sampler s2, mode_default
        dcl_sampler s3, mode_default
        dcl_sampler s4, mode_default
        dcl_sampler s5, mode_default
        dcl_sampler s6, mode_default
        dcl_sampler s7, mode_default
        dcl_resource t5, texture2d, (float, float, float, float)
        dcl_resource t4, texture2d, (float, float, float, float)
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t6, texture2d, (float, float, float, float)
        dcl_resource t7, texture2d, (float, float, float, float)
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_resource t3, texture2d, (float, float, float, float)
        dcl_temps 11 
        sample r0.xyzw, v0.xyxx, t0.xyzw, s3
        mad r0.xyz, r0.xyzx, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), l(-1.00000000, -1.00000000, -1.00000000, 0.00000000)
        sample r1.xyzw, v0.zwzz, t0.xyzw, s3
        mad r0.xyz, r1.xyzx, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), r0.xyzx
        add r0.xyz, r0.xyzx, l(-1.00000000, -1.00000000, -1.00000000, 0.00000000)
        mul r1.xy, r0.xyxx, cb0[22].xxxx
        mov r1.z, v1.z
        mov r1.w, cb0[18].x
        sample r2.xyzw, r1.zwzz, t2.xyzw, s5
        sample r3.xyzw, r1.zwzz, t3.xyzw, s6
        add r0.w, r2.x, -v1.w
        mul_sat r0.w, r0.w, l(10000000.00000000)
        add r1.z, -r3.x, v1.w
        mul_sat r1.z, r1.z, l(10000000.00000000)
        add r0.w, r0.w, r1.z
        min r0.w, r0.w, l(1.00000000)
        sample r2.xyzw, v1.xyxx, t1.xyzw, s4
        mul r0.w, r0.w, r2.x
        mul r0.xy, r1.xyxx, r0.wwww
        dp3 r1.x, r0.xyzx, r0.xyzx
        rsq r1.x, r1.x
        mul r1.xyz, r0.xyzx, r1.xxxx
        dp3 r0.x, v5.xyzx, r0.xyzx
        and r0.xy, r0.xxxx, l(0x80000000, 0x7fffffff, 0, 0)
        movc r0.x, r0.x, l(0xffffffff), l(0x1)
        movc r0.x, r0.y, r0.x, l(0)
        itof r0.x, r0.x
        mul r0.xyz, r1.xyzx, r0.xxxx
        mul r1.xyz, r0.yyyy, v7.xyzx
        mad r1.xyz, r0.xxxx, v6.xyzx, r1.xyzx
        mad r1.xyz, r0.zzzz, v8.xyzx, r1.xyzx
        dp3 r1.w, r1.xyzx, r1.xyzx
        rsq r1.w, r1.w
        mul r1.xyz, r1.xyzx, r1.wwww
        dp3 r1.w, r1.xyzx, r1.xyzx
        rsq r1.w, r1.w
        mul r2.xyz, r1.xyzx, r1.wwww
        mul r3.xyz, v4.yyyy, cb0[62].xyzx
        mad r3.xyz, v4.xxxx, cb0[61].xyzx, r3.xyzx
        mad r3.xyz, v4.wwww, cb0[63].xyzx, r3.xyzx
        add r3.xyz, r3.xyzx, cb0[64].xyzx
        add r4.xyz, -r3.xyzx, cb0[65].xyzx
        dp3 r1.w, r4.xyzx, r4.xyzx
        rsq r1.w, r1.w
        mul r4.xyz, r4.xyzx, r1.wwww
        mad r5.xyz, -r3.xyzx, cb0[48].wwww, cb0[48].xyzx
        dp3 r1.w, r5.xyzx, r5.xyzx
        rsq r1.w, r1.w
        mad r6.xyz, r5.xyzx, r1.wwww, r4.xyzx
        mul r5.xyz, r5.xyzx, r1.wwww
        dp3 r1.w, r6.xyzx, r6.xyzx
        rsq r1.w, r1.w
        mul r6.xyz, r6.xyzx, r1.wwww
        dp3_sat r1.w, r2.xyzx, r6.xyzx
        log r1.w, r1.w
        add r2.w, cb0[23].z, l(0.00000010)
        mul r1.w, r1.w, r2.w
        exp r1.w, r1.w
        mad r6.xyz, -r3.xyzx, cb0[51].wwww, cb0[51].xyzx
        mad r3.xyz, -r3.xyzx, cb0[54].wwww, cb0[54].xyzx
        dp3 r3.w, r6.xyzx, r6.xyzx
        rsq r3.w, r3.w
        mad r7.xyz, r6.xyzx, r3.wwww, r4.xyzx
        mul r6.xyz, r6.xyzx, r3.wwww
        dp3 r3.w, r7.xyzx, r7.xyzx
        rsq r3.w, r3.w
        mul r7.xyz, r7.xyzx, r3.wwww
        dp3_sat r3.w, r2.xyzx, r7.xyzx
        log r3.w, r3.w
        mul r3.w, r2.w, r3.w
        exp r3.w, r3.w
        div r7.xy, v4.xyxx, v4.wwww
        sample r7.xyzw, r7.xyxx, t5.xyzw, s7
        dp4_sat r4.w, r7.xyzw, cb0[53].xyzw
        add r4.w, -r4.w, l(1.00000000)
        mul_sat r4.w, r4.w, v8.w
        mul r8.xyz, r4.wwww, cb0[52].xyzx
        mul r9.xyz, r3.wwww, r8.xyzx
        dp4_sat r3.w, r7.xyzw, cb0[50].xyzw
        dp4_sat r4.w, r7.xyzw, cb0[56].xyzw
        add r3.w, -r3.w, l(1.00000000)
        mul_sat r3.w, r3.w, v7.w
        mul r7.xyz, r3.wwww, cb0[49].xyzx
        mad r9.xyz, r1.wwww, r7.xyzx, r9.xyzx
        dp3 r1.w, r3.xyzx, r3.xyzx
        rsq r1.w, r1.w
        mad r4.xyz, r3.xyzx, r1.wwww, r4.xyzx
        mul r3.xyz, r3.xyzx, r1.wwww
        dp3 r1.w, r4.xyzx, r4.xyzx
        rsq r1.w, r1.w
        mul r4.xyz, r4.xyzx, r1.wwww
        dp3_sat r1.w, r2.xyzx, r4.xyzx
        log r1.w, r1.w
        mul r1.w, r2.w, r1.w
        exp r1.w, r1.w
        add r2.x, -r4.w, l(1.00000000)
        mul_sat r2.x, r2.x, v6.w
        mul r2.xyz, r2.xxxx, cb0[55].xyzx
        mad r4.xyz, r1.wwww, r2.xyzx, r9.xyzx
        sample r9.xyzw, v3.zwzz, t4.xyzw, s2
        sample r10.xyzw, v3.xyxx, t4.xyzw, s2
        add r1.w, r9.x, -r10.x
        mad r1.w, r1.w, l(0.50000000), r10.x
        mul r9.xyz, r1.wwww, cb0[24].xyzx
        dp3 r1.w, v5.xyzx, v5.xyzx
        rsq r1.w, r1.w
        mul r10.xyz, r1.wwww, v5.xyzx
        dp3 r1.w, r0.xyzx, r10.xyzx
        add r10.xy, -r1.wwww, l(1.00000000, 1.00000000, 0.00000000, 0.00000000)
        mul r1.w, |r10.y|, |r10.y|
        mul r1.w, r1.w, r1.w
        mul r1.w, |r10.y|, r1.w
        mov_sat r10.x, r10.x
        mad_sat r2.w, cb0[23].y, r1.w, cb0[23].x
        mad_sat r1.w, cb0[22].w, r1.w, cb0[22].z
        mul r9.xyz, r9.xyzx, r2.wwww
        mul r9.xyz, r0.wwww, r9.xyzx
        dp3_sat r2.w, r6.xyzx, r1.xyzx
        mul r6.xyz, r8.xyzx, r2.wwww
        dp3_sat r2.w, r5.xyzx, r1.xyzx
        dp3_sat r1.x, r3.xyzx, r1.xyzx
        mad r3.xyz, r2.wwww, r7.xyzx, r6.xyzx
        mad r1.xyz, r1.xxxx, r2.xyzx, r3.xyzx
        sample r2.xyzw, v2.zwzz, t4.xyzw, s2
        sample r3.xyzw, v2.xyxx, t4.xyzw, s2
        add r2.xyz, r2.xyzx, -r3.xyzx
        mad r2.xyz, r2.xyzx, l(0.50000000, 0.50000000, 0.50000000, 0.00000000), r3.xyzx
        mul r2.xyz, r2.xyzx, cb0[24].wwww
        mul r2.xyz, r0.wwww, r2.xyzx
        mul r2.xyz, r2.xyzx, cb0[19].xyzx
        mul r1.xyz, r1.xyzx, r2.xyzx
        mad r1.xyz, r9.xyzx, r4.xyzx, r1.xyzx
        add r3.xyzw, -cb0[20].xyzw, cb0[21].xyzw
        mad r3.xyzw, r10.xxxx, r3.xyzw, cb0[20].xyzw
        add r3.xyzw, r3.xyzw, l(-1.00000000, -1.00000000, -1.00000000, -1.00000000)
        mad r3.xyzw, r0.wwww, r3.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
        mad r4.xy, -cb0[22].yyyy, r0.xyxx, v4.xyxx
        dp3 r0.x, v8.xyzx, r0.xyzx
        mul r0.y, v4.w, cb0[7].w
        min r0.yz, r4.xxyx, r0.yyyy
        div r0.yz, r0.yyzy, v4.wwww
        sample r4.xyzw, r0.yzyy, t6.xyzw, s0
        sample r5.xyzw, r0.yzyy, t7.xyzw, s1
        mad r4.xyz, r4.xyzx, r5.wwww, r5.xyzx
        div r0.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), cb0[7].x
        mul r4.xyz, r4.xyzx, r0.yyyy
        mad r4.xyz, r3.xyzx, r4.xyzx, -r3.xyzx
        mad r3.xyz, r3.wwww, r4.xyzx, r3.xyzx
        mad_sat r0.x, r0.x, l(0.50000000), l(0.50000000)
        mul r0.x, r0.x, r0.x
        add r0.y, -cb0[46].w, l(1.00000000)
        mad r0.x, r0.x, r0.y, cb0[46].w
        mul r0.xyz, r2.xyzx, r0.xxxx
        mad r0.xyz, cb0[46].xyzx, r0.xyzx, -r3.xyzx
        mul r1.w, r0.w, r1.w
        mad r0.xyz, r1.wwww, r0.xyzx, r3.xyzx
        add r2.xyz, -r0.xyzx, cb0[1].xyzx
        mov r3.xyz, v4.xywx
        mov r3.w, l(0x3f800000)
        dp4 r4.x, cb0[4].xyzw, r3.xyzw
        dp4 r4.y, cb0[5].xyzw, r3.xyzw
        dp4 r4.z, cb0[6].xyzw, r3.xyzw
        dp3 r1.w, r4.xyzx, r4.xyzx
        sqrt r1.w, r1.w
        mad r1.w, r1.w, cb0[2].x, cb0[2].y
        mul r1.w, r1.w, l(1.44269502)
        exp_sat r1.w, r1.w
        mad r1.w, -cb0[1].w, r1.w, cb0[1].w
        mul r1.w, r1.w, cb0[2].z
        mul r0.w, r0.w, r1.w
        mad r0.xyz, r0.wwww, r2.xyzx, r0.xyzx
        add r0.xyz, r1.xyzx, r0.xyzx
        mul o0.xyz, r0.xyzx, cb0[7].xxxx
        mov o0.w, l(0)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x2976f1dd // 0.000000
//         COP_CONST[1]: 0xb3900e7d // -0.000000
//         COP_CONST[2]: 0xbfc46f8b // -1.534654
//         COP_CONST[3]: 0x3f446e00 // 0.767303
//         COP_CONST[4]: 0x3f7fff00 // 0.999985
//         COP_CONST[5]: 0x3ef58b80 // 0.479580
//         COP_CONST[6]: 0x3e888889 // 0.266667
//         COP_CONST[7]: 0x3f7a3d71 // 0.977500
//         COP_CONST[8]: 0x3d8d6238 // 0.069035
//         COP_CONST[9]: 0x3da345ea // 0.079723
//         COP_CONST[10]: 0x3cff1d3c // 0.031142
//         COP_CONST[11]: 0x3fc46f8a // 1.534654
//         COP_CONST[12]: 0xbf446f8a // -0.767327
//         COP_CONST[13]: 0xbf758b6c // -0.959159
//         COP_CONST[14]: 0x3ef58b6c // 0.479579
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][4] = 0x00000000 // 0.000000
//         USER_CONST: c[0][5] = 0x00000000 // 0.000000
//         USER_CONST: c[0][6] = 0x00000000 // 0.000000
//         USER_CONST: c[0][7] = 0x00000000 // 0.000000
//         USER_CONST: c[0][8] = 0x00000000 // 0.000000
//         USER_CONST: c[0][9] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][10] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][16] = 0x3fc46f8a // 1.534654
//         USER_CONST: c[0][17] = 0x00000000 // 0.000000
//         USER_CONST: c[0][18] = 0xbf446f8a // -0.767327
//         USER_CONST: c[0][19] = 0x00000000 // 0.000000
//         USER_CONST: c[0][20] = 0x00000000 // 0.000000
//         USER_CONST: c[0][21] = 0xbf758b6c // -0.959159
//         USER_CONST: c[0][22] = 0x3ef58b6c // 0.479579
//         USER_CONST: c[0][23] = 0x00000000 // 0.000000
//         USER_CONST: c[0][24] = 0x00000000 // 0.000000
//         USER_CONST: c[0][25] = 0x00000000 // 0.000000
//         USER_CONST: c[0][26] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][27] = 0x00000000 // 0.000000
//         USER_CONST: c[0][28] = 0x41000000 // 8.000000
//         USER_CONST: c[0][31] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][76] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][77] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][78] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][80] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][81] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][82] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][83] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][84] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][85] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][86] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][87] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][88] = 0x3ef1f1f3 // 0.472549
//         USER_CONST: c[0][89] = 0x40a00000 // 5.000000
//         USER_CONST: c[0][90] = 0x00000000 // 0.000000
//         USER_CONST: c[0][91] = 0x3fc7c7c9 // 1.560784
//         USER_CONST: c[0][92] = 0x3f3bbbbc // 0.733333
//         USER_CONST: c[0][93] = 0x3e888889 // 0.266667
//         USER_CONST: c[0][94] = 0x43a77a30 // 334.954590
//         USER_CONST: c[0][96] = 0x4185c291 // 16.720003
//         USER_CONST: c[0][97] = 0x4185c291 // 16.720003
//         USER_CONST: c[0][98] = 0x4185c291 // 16.720003
//         USER_CONST: c[0][99] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][184] = 0x3cff1d3c // 0.031142
//         USER_CONST: c[0][185] = 0x3da345ea // 0.079723
//         USER_CONST: c[0][186] = 0x3d8d6238 // 0.069035
//         USER_CONST: c[0][187] = 0x3cb851ec // 0.022500
//         USER_CONST: c[0][192] = 0x45a08000 // 5136.000000
//         USER_CONST: c[0][193] = 0x43400000 // 192.000000
//         USER_CONST: c[0][194] = 0xc4920000 // -1168.000000
//         USER_CONST: c[0][195] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][196] = 0x403a3e03 // 2.910035
//         USER_CONST: c[0][197] = 0x40aa25a2 // 5.317094
//         USER_CONST: c[0][198] = 0x408931dc // 4.287336
//         USER_CONST: c[0][200] = 0x00000000 // 0.000000
//         USER_CONST: c[0][201] = 0x00000000 // 0.000000
//         USER_CONST: c[0][202] = 0x00000000 // 0.000000
//         USER_CONST: c[0][203] = 0x00000000 // 0.000000
//         USER_CONST: c[0][207] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][212] = 0x00000000 // 0.000000
//         USER_CONST: c[0][213] = 0x00000000 // 0.000000
//         USER_CONST: c[0][214] = 0x00000000 // 0.000000
//         USER_CONST: c[0][215] = 0x00000000 // 0.000000
//         USER_CONST: c[0][219] = 0x3f800000 // 1.000000
//         USER_CONST: c[0][224] = 0x00000000 // 0.000000
//         USER_CONST: c[0][225] = 0x00000000 // 0.000000
//         USER_CONST: c[0][226] = 0x00000000 // 0.000000
//         USER_CONST: c[0][227] = 0x00000000 // 0.000000
//         USER_CONST: c[0][244] = 0xbfc46f8b // -1.534654
//         USER_CONST: c[0][245] = 0xb3900e7d // -0.000000
//         USER_CONST: c[0][246] = 0x2976f1dd // 0.000000
//         USER_CONST: c[0][248] = 0x00000000 // 0.000000
//         USER_CONST: c[0][249] = 0x00000000 // 0.000000
//         USER_CONST: c[0][250] = 0xbf758b6c // -0.959159
//         USER_CONST: c[0][252] = 0x3f446e00 // 0.767303
//         USER_CONST: c[0][253] = 0x3f7fff00 // 0.999985
//         USER_CONST: c[0][254] = 0x3ef58b80 // 0.479580
//         USER_CONST: c[0][256] = 0x458014b3 // 4098.587402
//         USER_CONST: c[0][257] = 0xc4a31248 // -1304.571289
//         USER_CONST: c[0][258] = 0xc38102f6 // -258.023132
//         USER_CONST: c[0][260] = 0x45801460 // 4098.546875
//         USER_CONST: c[0][261] = 0xc4a311e0 // -1304.558594
//         USER_CONST: c[0][262] = 0xc38102a4 // -258.020630
//     END_SECTION
//     # Exelwtion Time: 27.366ms [2.872 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x1 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x4 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 4 "ATTR00" 32)
//         (0x0 0 4 "ATTR01" 36)
//         (0x0 0 4 "ATTR02" 40)
//         (0x0 0 4 "ATTR03" 44)
//         (0x0 0 4 "ATTR04" 48)
//         (0x0 0 4 "ATTR05" 52)
//         (0x0 0 4 "ATTR06" 56)
//         (0x0 0 4 "ATTR07" 60)
//         (0x0 0 4 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 4 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 0
//         bCanReorderHalf: 0
//         bCanReorderFloat: 0
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//                 indexableRanges: 8 :  (null 0 0 0) (null 0 0 0) (null 0 0 0) (null 0 0 0) (null 0 0 0) (null 0 0 0) (null 0 0 0) (null 0 0 0)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         txgr (r) r4105, (r) v8.xyxx, (r) r4106, #0, #3, 2D, AUTO  // 1028443341 SHD
//         movr (r) r9, (r) r4105  // 1028443341 SHD
//         movu32 (u32) r4105, (u32) constant(3212836864, 3212836864, 3212836864, 0)  //   0 SHD
//         madr (r) r9.xyz, (r) r9.xyzx, (r) constant(2.00000000, 2.00000000, 2.00000000, 0.00000000), (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) v8.zwzz, (r) r4106, #0, #3, 2D, AUTO  //   0 SHD
//         movr (r) r10, (r) r4105  //   0 SHD
//         madr (r) r9.xyz, (r) r10.xyzx, (r) constant(2.00000000, 2.00000000, 2.00000000, 0.00000000), (r) r9.xyzx  //   0 SHD
//         addr (r) r9.xyz, (r) r9.xyzx, (r) constant(-1.00000000, -1.00000000, -1.00000000, 0.00000000)  //   0 SHD
//         movr (r) r4109, (r) c[0][22].x  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.47254905, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.47254905, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.47254905, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.47254905, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r10.xy, (r) r9.xyxx, (r) r4109  //   0 SHD
//         movu32 (u32) r10.z, (u32) v9.z  //   0 SHD
//         movu32 (u32) r10.w, (u32) c[0][18].x  //   0 SHD
//         txgr (r) r4105, (r) r10.zwzz, (r) r4106, #2, #5, 2D, AUTO  // 133143856 SHD
//         movr (r) r11, (r) r4105  // 133143856 SHD
//         txgr (r) r4105, (r) r10.zwzz, (r) r4106, #3, #6, 2D, AUTO  // 133143856 SHD
//         movr (r) r12, (r) r4105  // 133143856 SHD
//         addr (r) r9.w, (r) r11.x, (r) -v9.w  // 133143856 SHD
//         mulr_sat (r) r9.w, (r) r9.w, (r) constant(10000000.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  96 
//         addr (r) r10.z, (r) -r12.x, (r) v9.w  //   2 SHDOPT
//         mulr_sat (r) r10.z, (r) r10.z, (r) constant(10000000.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  93 SHD
//         addr (r) r9.w, (r) r9.w, (r) r10.z  //  93 SHD
//         minr (r) r9.w, (r) r9.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  93 SHD
//         txgr (r) r4105, (r) v9.xyxx, (r) r4106, #1, #4, 2D, AUTO  // 50462976 SHDOPT
//         movr (r) r11, (r) r4105  // 1179659 SHD
//         mulr (r) r9.w, (r) r9.w, (r) r11.x  // 1179659 SHD
//         mulr (r) r9.xy, (r) r10.xyxx, (r) r9.w  //   0 SHD
//         dp3r (r) r10.x, (r) r9.xyzx, (r) r9.xyzx  // 133983864 SHD
//         rsqr (r) r4105.x, (r) r10.x  // 133983864 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         mulr (r) r10.xyz, (r) r9.xyzx, (r) r10.x  //   0 SHD
//         dp3r (r) r9.x, (r) v13.xyzx, (r) r9.xyzx  //   0 SHD
//         andu32 (u32) r9.xy, (u32) r9.x, (u32) constant(2147483648, 2147483647, 0, 0)  //   0 SHD
//         movs32.c (s32) hc, (s32) r9.x  //   0 SHD
//         movr (r) r4105, (r) constant(NaN       , 0.00000000, 0.00000000, 0.00000000).x  //  65 SHD
//         movr (r) r4105(EQ), (r) constant(denormal  , 0.00000000, 0.00000000, 0.00000000).x  //  65 SHD
//         movr (r) r9.x, (r) r4105  //  65 SHD
//         movs32.c (s32) hc, (s32) r9.y  //   0 SHD
//         movr (r) r4105, (r) r9.x  //  65 SHD
//         movr (r) r4105(EQ), (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  65 SHD
//         movr (r) r9.x, (r) r4105  //  65 SHD
//         movs32 (r) r9.x, (s32) r9.x  //  65 SHD
//         mulr (r) r9.xyz, (r) r10.xyzx, (r) r9.x  //  65 SHD
//         mulr (r) r10.xyz, (r) r9.y, (r) v15.xyzx  //  65 SHD
//         madr (r) r10.xyz, (r) r9.x, (r) v14.xyzx, (r) r10.xyzx  //  65 SHD
//         madr (r) r10.xyz, (r) r9.z, (r) v16.xyzx, (r) r10.xyzx  //  65 SHD
//         dp3r (r) r10.w, (r) r10.xyzx, (r) r10.xyzx  //  65 SHD
//         rsqr (r) r4105.w, (r) r10.w  //  65 SHD
//         movr (r) r10.w, (r) r4105  //  65 SHD
//         mulr (r) r10.xyz, (r) r10.xyzx, (r) r10.w  //  65 SHD
//         dp3r (r) r10.w, (r) r10.xyzx, (r) r10.xyzx  //  65 SHD
//         rsqr (r) r4105.w, (r) r10.w  //   0 SHD
//         movr (r) r10.w, (r) r4105  //   0 SHDOPT
//         mulr (r) r11.xyz, (r) r10.xyzx, (r) r10.w  //   2 SHDOPT
//         movr (r) r4109, (r) c[0][62].xyzx  //   2 SHDOPT
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         movr (r) r4109.z, (r) constant(-0.95915866, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         mulr (r) r12.xyz, (r) v12.y, (r) r4109  //   0 SHD
//         movr (r) r4109, (r) c[0][61].xyzx  //   0 FPB0
//         movr (r) r4109.x, (r) constant(-1.53465402, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(-0.00000007, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4109.w, (r) constant(-1.53465402, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         madr (r) r12.xyz, (r) v12.x, (r) r4109, (r) r12.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[0][63].xyzx  //   8 SHD
//         movr (r) r4109.x, (r) constant(0.76730347, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.99998474, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.47957993, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.76730347, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12.xyz, (r) v12.w, (r) r4109, (r) r12.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[0][64].xyzx  // 137 
//         movr (r) r4109.x, (r) constant(4098.58740234, 0.00000000, 0.00000000, 0.00000000).x  // 137 
//         movr (r) r4109.y, (r) constant(-1304.57128906, 0.00000000, 0.00000000, 0.00000000).x  // 122 SHD
//         movr (r) r4109.z, (r) constant(-258.02313232, 0.00000000, 0.00000000, 0.00000000).x  // 122 SHD
//         movr (r) r4109.w, (r) constant(4098.58740234, 0.00000000, 0.00000000, 0.00000000).x  // 122 SHD
//         addr (r) r12.xyz, (r) r12.xyzx, (r) r4109  // 122 SHD
//         movr (r) r4109, (r) c[0][65].xyzx  // 122 SHD
//         movr (r) r4109.x, (r) constant(4098.54687500, 0.00000000, 0.00000000, 0.00000000).x  // 122 SHD
//         movr (r) r4109.y, (r) constant(-1304.55859375, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB0
//         movr (r) r4109.z, (r) constant(-258.02062988, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB0
//         movr (r) r4109.w, (r) constant(4098.54687500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r13.xyz, (r) -r12.xyzx, (r) r4109  //   0 SHD
//         dp3r (r) r10.w, (r) r13.xyzx, (r) r13.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r10.w  //   0 SHD
//         movr (r) r10.w, (r) r4105  //   0 SHD
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) r10.w  //   0 SHD
//         movr (r) r4109, (r) c[0][48].w  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][48].xyzx  // 134021064 SHDOPT
//         movr (r) r4110.x, (r) constant(5136.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134021064 SHDOPT
//         movr (r) r4110.y, (r) constant(192.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134021528 SHDOPT
//         movr (r) r4110.z, (r) constant(-1168.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134021528 SHDOPT
//         movr (r) r4110.w, (r) constant(5136.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134020776 SHDOPT
//         madr (r) r14.xyz, (r) -r12.xyzx, (r) r4109, (r) r4110  //   0 SHDOPT
//         dp3r (r) r10.w, (r) r14.xyzx, (r) r14.xyzx  //   0 SHDOPT
//         rsqr (r) r4105.w, (r) r10.w  // 134020328 SHDOPT
//         movr (r) r10.w, (r) r4105  // 134020328 SHDOPT
//         madr (r) r15.xyz, (r) r14.xyzx, (r) r10.w, (r) r13.xyzx  // 134019832 FPB0
//         mulr (r) r14.xyz, (r) r14.xyzx, (r) r10.w  // 134019832 FPB0
//         dp3r (r) r10.w, (r) r15.xyzx, (r) r15.xyzx  //   1 SHD
//         rsqr (r) r4105.w, (r) r10.w  //   1 SHD
//         movr (r) r10.w, (r) r4105  //   1 SHD
//         mulr (r) r15.xyz, (r) r15.xyzx, (r) r10.w  // 134019000 SHD
//         dp3r_sat (r) r10.w, (r) r11.xyzx, (r) r15.xyzx  // 134019000 SHD
//         lg2r (r) r4105.w, (r) r10.w  // 134017272 SHD
//         movr (r) r10.w, (r) r4105  //   0 SHD
//         movr (r) r4108, (r) c[0][23].z  //   0 SHD
//         movr (r) r4108.x, (r) constant(334.95458984, 0.00000000, 0.00000000, 0.00000000).x  // 134016648 SHD
//         movr (r) r4108.y, (r) constant(334.95458984, 0.00000000, 0.00000000, 0.00000000).x  // 134016648 SHD
//         movr (r) r4108.z, (r) constant(334.95458984, 0.00000000, 0.00000000, 0.00000000).x  // 134015864 SHD
//         movr (r) r4108.w, (r) constant(334.95458984, 0.00000000, 0.00000000, 0.00000000).x  // 134015864 SHD
//         addr (r) r11.w, (r) r4108, (r) constant(0.00000010, 0.00000000, 0.00000000, 0.00000000).x  //   8 SHD
//         mulr (r) r10.w, (r) r10.w, (r) r11.w  //   0 SHD
//         ex2r (r) r4105.w, (r) r10.w  //   0 SHD
//         movr (r) r10.w, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[0][51].w  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r15.xyz, (r) -r12.xyzx, (r) r4109, (r) c[0][51].xyzx  //   0 SHD
//         movr (r) r4109, (r) c[0][54].w  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12.xyz, (r) -r12.xyzx, (r) r4109, (r) c[0][54].xyzx  //   0 SHD
//         dp3r (r) r12.w, (r) r15.xyzx, (r) r15.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         madr (r) r16.xyz, (r) r15.xyzx, (r) r12.w, (r) r13.xyzx  //   0 SHD
//         mulr (r) r15.xyz, (r) r15.xyzx, (r) r12.w  //   0 SHD
//         dp3r (r) r12.w, (r) r16.xyzx, (r) r16.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         mulr (r) r16.xyz, (r) r16.xyzx, (r) r12.w  //   0 SHD
//         dp3r_sat (r) r12.w, (r) r11.xyzx, (r) r16.xyzx  //   0 SHD
//         lg2r (r) r4105.w, (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         mulr (r) r12.w, (r) r11.w, (r) r12.w  //   0 SHD
//         ex2r (r) r4105.w, (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         divr (r) r4105.x, (r) v12.x, (r) v12.w  //   0 SHD
//         divr (r) r4105.y, (r) v12.y, (r) v12.w  //   0 SHD
//         movr (r) r16.xy, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r16.xyxx, (r) r4106, #5, #7, 2D, AUTO  //   0 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[0][53]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r_sat (r) r13.w, (r) r16, (r) r4109  //   0 SHD
//         addr (r) r13.w, (r) -r13.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r13.w, (r) r13.w, (r) v16.w  //   0 SHD
//         mulr (r) r17.xyz, (r) r13.w, (r) c[0][52].xyzx  // 134017464 SHD
//         mulr (r) r18.xyz, (r) r12.w, (r) r17.xyzx  // 134017464 SHD
//         movr (r) r4109, (r) c[0][50]  // 134016920 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134016920 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134016488 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134016488 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134016488 SHD
//         dp4r_sat (r) r12.w, (r) r16, (r) r4109  // 134016488 SHD
//         movr (r) r4109, (r) c[0][56]  // 134016488 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134016488 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134016488 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134016488 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134016488 SHD
//         dp4r_sat (r) r13.w, (r) r16, (r) r4109  //   0 SHD
//         addr (r) r12.w, (r) -r12.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r12.w, (r) r12.w, (r) v15.w  //   0 SHD
//         movr (r) r4109, (r) c[0][49].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(2.91003489, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(5.31709385, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(4.28733635, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4109.w, (r) constant(2.91003489, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         mulr (r) r16.xyz, (r) r12.w, (r) r4109  //   0 SHD
//         madr (r) r18.xyz, (r) r10.w, (r) r16.xyzx, (r) r18.xyzx  //   0 SHD
//         dp3r (r) r10.w, (r) r12.xyzx, (r) r12.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r10.w  // 118 FPB0
//         movr (r) r10.w, (r) r4105  // 118 FPB0
//         madr (r) r13.xyz, (r) r12.xyzx, (r) r10.w, (r) r13.xyzx  // 118 FPB0
//         mulr (r) r12.xyz, (r) r12.xyzx, (r) r10.w  //   0 SHD
//         dp3r (r) r10.w, (r) r13.xyzx, (r) r13.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r10.w  //   0 SHD
//         movr (r) r10.w, (r) r4105  // 50462976 SHDOPT
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) r10.w  // 255 SHD
//         dp3r_sat (r) r10.w, (r) r11.xyzx, (r) r13.xyzx  //   0 SHD
//         lg2r (r) r4105.w, (r) r10.w  //   0 SHD
//         movr (r) r10.w, (r) r4105  //   8 SHDOPT
//         mulr (r) r10.w, (r) r11.w, (r) r10.w  //   0 SHD
//         ex2r (r) r4105.w, (r) r10.w  //   0 SHD
//         movr (r) r10.w, (r) r4105  //   0 SHD
//         addr (r) r11.x, (r) -r13.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r11.x, (r) r11.x, (r) v14.w  // 133176728 SHD
//         mulr (r) r11.xyz, (r) r11.x, (r) c[0][55].xyzx  //   0 SHD
//         madr (r) r13.xyz, (r) r10.w, (r) r11.xyzx, (r) r18.xyzx  // 147 SHD
//         txgr (r) r4105, (r) v11.zwzz, (r) r4106, #4, #2, 2D, AUTO  //   0 SHD
//         movr (r) r18, (r) r4105  // 151 
//         txgr (r) r4105, (r) v11.xyxx, (r) r4106, #4, #2, 2D, AUTO  // 50462976 
//         movr (r) r19, (r) r4105  // 50462976 
//         addr (r) r10.w, (r) r18.x, (r) -r19.x  //   0 SHD
//         madr (r) r10.w, (r) r10.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r19.x  //   0 SHD
//         movr (r) r4109, (r) c[0][24].xyzx  //  55 SHD
//         movr (r) r4109.x, (r) constant(16.72000313, 0.00000000, 0.00000000, 0.00000000).x  //  55 SHD
//         movr (r) r4109.y, (r) constant(16.72000313, 0.00000000, 0.00000000, 0.00000000).x  //  55 SHD
//         movr (r) r4109.z, (r) constant(16.72000313, 0.00000000, 0.00000000, 0.00000000).x  //  55 SHD
//         movr (r) r4109.w, (r) constant(16.72000313, 0.00000000, 0.00000000, 0.00000000).x  //  55 SHD
//         mulr (r) r18.xyz, (r) r10.w, (r) r4109  //   0 SHD
//         dp3r (r) r10.w, (r) v13.xyzx, (r) v13.xyzx  //   0 SHDOPT
//         rsqr (r) r4105.w, (r) r10.w  // 133974712 FPB1
//         movr (r) r10.w, (r) r4105  // 133974712 FPB1
//         mulr (r) r19.xyz, (r) r10.w, (r) v13.xyzx  // 133974712 FPB1
//         dp3r (r) r10.w, (r) r9.xyzx, (r) r19.xyzx  // 133974712 FPB1
//         addr (r) r19.xy, (r) -r10.w, (r) constant(1.00000000, 1.00000000, 0.00000000, 0.00000000)  // 50462976 
//         mulr (r) r10.w, (r) |r19.y|, (r) |r19.y|  // 255 SHD
//         mulr (r) r10.w, (r) r10.w, (r) r10.w  //   0 SHD
//         mulr (r) r10.w, (r) |r19.y|, (r) r10.w  //   0 SHD
//         movr_sat (r) r19.x, (r) r19.x  //   2 SHD
//         movr (r) r4108, (r) c[0][23].y  //   2 SHD
//         movr (r) r4108.x, (r) constant(0.26666668, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.26666668, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(0.26666668, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.26666668, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][23].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.73333335, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.73333335, 0.00000000, 0.00000000, 0.00000000).x  // 134077096 SHD
//         movr (r) r4110.z, (r) constant(0.73333335, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.73333335, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr_sat (r) r11.w, (r) r4108, (r) r10.w, (r) r4110  //   0 SHD
//         movr (r) r4108, (r) c[0][22].w  //   0 SHD
//         movr (r) r4108.x, (r) constant(1.56078446, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(1.56078446, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(1.56078446, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(1.56078446, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][22].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr_sat (r) r10.w, (r) r4108, (r) r10.w, (r) r4110  //   0 SHD
//         mulr (r) r18.xyz, (r) r18.xyzx, (r) r11.w  //   0 
//         mulr (r) r18.xyz, (r) r9.w, (r) r18.xyzx  //   0 SHD
//         dp3r_sat (r) r11.w, (r) r15.xyzx, (r) r10.xyzx  //   0 SHD
//         mulr (r) r15.xyz, (r) r17.xyzx, (r) r11.w  //   0 SHD
//         dp3r_sat (r) r11.w, (r) r14.xyzx, (r) r10.xyzx  //   0 SHD
//         dp3r_sat (r) r10.x, (r) r12.xyzx, (r) r10.xyzx  //   0 SHD
//         madr (r) r12.xyz, (r) r11.w, (r) r16.xyzx, (r) r15.xyzx  //   0 SHDOPT
//         madr (r) r10.xyz, (r) r10.x, (r) r11.xyzx, (r) r12.xyzx  // 50462976 
//         txgr (r) r4105, (r) v10.zwzz, (r) r4106, #4, #2, 2D, AUTO  // 50462976 
//         movr (r) r11, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) v10.xyxx, (r) r4106, #4, #2, 2D, AUTO  //   0 SHD
//         movr (r) r12, (r) r4105  //   0 SHD
//         addr (r) r11.xyz, (r) r11.xyzx, (r) -r12.xyzx  //   0 SHD
//         madr (r) r11.xyz, (r) r11.xyzx, (r) constant(0.50000000, 0.50000000, 0.50000000, 0.00000000), (r) r12.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[0][24].w  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.xyz, (r) r11.xyzx, (r) r4109  //   0 SHD
//         mulr (r) r11.xyz, (r) r9.w, (r) r11.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[0][19].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.xyz, (r) r11.xyzx, (r) r4109  //   0 SHD
//         mulr (r) r10.xyz, (r) r10.xyzx, (r) r11.xyzx  // 50462976 SHD
//         madr (r) r10.xyz, (r) r18.xyzx, (r) r13.xyzx, (r) r10.xyzx  //   0 SHD
//         movr (r) r4108, (r) -c[0][20]  //   0 SHD
//         movr (r) r4108.x, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[0][21]  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r12, (r) r4108, (r) r4109  //   0 SHD
//         movr (r) r4110, (r) c[0][20]  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12, (r) r19.x, (r) r12, (r) r4110  //   0 SHD
//         addr (r) r12, (r) r12, (r) constant(-1.00000000, -1.00000000, -1.00000000, -1.00000000)  //   1 SHDOPT
//         madr (r) r12, (r) r9.w, (r) r12, (r) constant(1.00000000, 1.00000000, 1.00000000, 1.00000000)  //   0 SHD
//         movr (r) r4108, (r) -c[0][22].y  //   0 SHD
//         movr (r) r4108.x, (r) -constant(5.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) -constant(5.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) -constant(5.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) -constant(5.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r13.xy, (r) r4108, (r) r9.xyxx, (r) v12.xyxx  //   0 SHD
//         dp3r (r) r9.x, (r) v16.xyzx, (r) r9.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[0][7].w  // 133207856 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r9.y, (r) v12.w, (r) r4109  //   0 SHD
//         minr (r) r9.yz, (r) r13.xxyx, (r) r9.y  //   0 SHD
//         divr (r) r4105.y, (r) r9.y, (r) v12.w  //   0 SHD
//         divr (r) r4105.z, (r) r9.z, (r) v12.w  //   0 SHD
//         movr (r) r9.yz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) r4106, #6, #0, 2D, AUTO  //   0 SHD
//         movr (r) r13, (r) r4105  // 50462976 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) r4106, #7, #1, 2D, AUTO  // 50462976 SHD
//         movr (r) r14, (r) r4105  // 134006856 SHD
//         madr (r) r13.xyz, (r) r13.xyzx, (r) r14.w, (r) r14.xyzx  // 134006856 SHD
//         movr (r) r4109, (r) c[0][7].x  //   0 SHD
//         movr (r) r4109.x, (r) constant(8.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(8.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(8.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(8.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.y, (r) constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).y, (r) r4109  // 134007288 SHD
//         movr (r) r9.y, (r) r4105  // 134007288 SHD
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) r9.y  // 134007784 SHD
//         madr (r) r13.xyz, (r) r12.xyzx, (r) r13.xyzx, (r) -r12.xyzx  // 134007784 SHD
//         madr (r) r12.xyz, (r) r12.w, (r) r13.xyzx, (r) r12.xyzx  // 134008232 SHD
//         movu32 (u32) r4105, (u32) constant(1056964608, 0, 0, 0).x  // 134008232 SHD
//         madr_sat (r) r9.x, (r) r9.x, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  // 134008568 SHD
//         mulr (r) r9.x, (r) r9.x, (r) r9.x  // 134008568 SHD
//         movr (r) r4108, (r) -c[0][46].w  //   0 SHD
//         movr (r) r4108.x, (r) -constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) -constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) -constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) -constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r9.y, (r) r4108, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134008360 SHD
//         movr (r) r4110, (r) c[0][46].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.x, (r) r9.x, (r) r9.y, (r) r4110  //   0 SHD
//         mulr (r) r9.xyz, (r) r11.xyzx, (r) r9.x  // 134009480 SHDOPT
//         movr (r) r4108, (r) c[0][46].xyzx  // 134009480 SHDOPT
//         movr (r) r4108.x, (r) constant(0.03114187, 0.00000000, 0.00000000, 0.00000000).x  // 134009480 SHDOPT
//         movr (r) r4108.y, (r) constant(0.07972319, 0.00000000, 0.00000000, 0.00000000).x  // 134009480 SHDOPT
//         movr (r) r4108.z, (r) constant(0.06903499, 0.00000000, 0.00000000, 0.00000000).x  // 134009480 SHDOPT
//         movr (r) r4108.w, (r) constant(0.03114187, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.xyz, (r) r4108, (r) r9.xyzx, (r) -r12.xyzx  //   0 SHD
//         mulr (r) r10.w, (r) r9.w, (r) r10.w  // 134009992 SHD
//         madr (r) r9.xyz, (r) r10.w, (r) r9.xyzx, (r) r12.xyzx  // 134009992 SHD
//         movr (r) r4109, (r) c[0][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r11.xyz, (r) -r9.xyzx, (r) r4109  //   0 SHD
//         movu32 (u32) r12.xyz, (u32) v12.xywx  //   0 SHD
//         movu32 (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  // 134010872 SHD
//         movr (r) r4108, (r) c[0][4]  //   0 SHD
//         movr (r) r4108.x, (r) constant(1.53465390, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(-0.76732695, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r13.x, (r) r4108, (r) r12  //   0 SHD
//         movr (r) r4108, (r) c[0][5]  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(-0.95915866, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(0.47957933, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r13.y, (r) r4108, (r) r12  // 134011496 SHD
//         movr (r) r4108, (r) c[0][6]  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r13.z, (r) r4108, (r) r12  //   0 SHD
//         dp3r (r) r10.w, (r) r13.xyzx, (r) r13.xyzx  // 134011848 SHD
//         rsqr (r) r4106.x, (r) r10.w  // 134011848 SHD
//         rsqr (r) r4106.y, (r) r10.w  // 134012424 FPB1
//         rsqr (r) r4106.z, (r) r10.w  // 134012424 FPB1
//         rsqr (r) r4106.w, (r) r10.w  // 134012808 SHD
//         movr (r) r4105, (r) r4106  // 134012808 SHD
//         rcpr (r) r4107.w, (r) r4105.w  // 134013352 SHD
//         movr (r) r10.w, (r) r4107  // 134013352 SHD
//         movr (r) r4109, (r) c[0][2].x  // 134013352 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 1126825984 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][2].y  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r10.w, (r) r4109, (r) r4110  // 134013736 SHDOPT
//         mulr (r) r10.w, (r) r10.w, (r) constant(1.44269502, 0.00000000, 0.00000000, 0.00000000).x  // 134013736 SHDOPT
//         ex2r (r) r4105.w, (r) r10.w  // 134013736 SHDOPT
//         movr_sat (r) r10.w, (r) r4105  // 134013736 SHDOPT
//         movr (r) r4108, (r) -c[0][1].w  // 134013736 SHDOPT
//         movr (r) r4108.x, (r) -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 134013736 SHDOPT
//         movr (r) r4108.y, (r) -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[0][1].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r4108, (r) r10.w, (r) r4110  // 134014616 SHD
//         movr (r) r4109, (r) c[0][2].z  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r10.w, (r) r10.w, (r) r4109  //   0 SHD
//         mulr (r) r9.w, (r) r9.w, (r) r10.w  //   0 SHD
//         madr (r) r9.xyz, (r) r9.w, (r) r11.xyzx, (r) r9.xyzx  //   0 SHD
//         addr (r) r9.xyz, (r) r10.xyzx, (r) r9.xyzx  // 134015624 SHD
//         movr (r) r4109, (r) c[0][7].x  // 134015624 SHD
//         movr (r) r4109.x, (r) constant(8.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(8.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(8.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(8.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r0.xyz, (r) r9.xyzx, (r) r4109  //   0 SHD
//         movu32 (u32) r0.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         ret   //   0 SHD
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][4] = 100.00%@0.00000000
//                 ~c[0][5] = 100.00%@0.00000000
//                 ~c[0][6] = 100.00%@0.00000000
//                 ~c[0][7] = 100.00%@0.00000000
//                 ~c[0][8] = 100.00%@0.00000000
//                 ~c[0][9] = 100.00%@1.00000000
//                 ~c[0][10] = 100.00%@1.00000000
//                 ~c[0][16] = 100.00%@1.53465390
//                 ~c[0][17] = 100.00%@0.00000000
//                 ~c[0][18] = 100.00%@-0.76732695
//                 ~c[0][19] = 100.00%@0.00000000
//                 ~c[0][20] = 100.00%@0.00000000
//                 ~c[0][21] = 100.00%@-0.95915866
//                 ~c[0][22] = 100.00%@0.47957933
//                 ~c[0][23] = 100.00%@0.00000000
//                 ~c[0][24] = 100.00%@0.00000000
//                 ~c[0][25] = 100.00%@0.00000000
//                 ~c[0][26] = 100.00%@1.00000000
//                 ~c[0][27] = 100.00%@0.00000000
//                 ~c[0][28] = 100.00%@8.00000000
//                 ~c[0][31] = 100.00%@1.00000000
//                 ~c[0][76] = 100.00%@1.00000000
//                 ~c[0][77] = 100.00%@1.00000000
//                 ~c[0][78] = 100.00%@1.00000000
//                 ~c[0][80] = 100.00%@1.00000000
//                 ~c[0][81] = 100.00%@1.00000000
//                 ~c[0][82] = 100.00%@1.00000000
//                 ~c[0][83] = 100.00%@1.00000000
//                 ~c[0][84] = 100.00%@1.00000000
//                 ~c[0][85] = 100.00%@1.00000000
//                 ~c[0][86] = 100.00%@1.00000000
//                 ~c[0][87] = 100.00%@1.00000000
//                 ~c[0][88] = 100.00%@0.47254905
//                 ~c[0][89] = 100.00%@5.00000000
//                 ~c[0][90] = 100.00%@0.00000000
//                 ~c[0][91] = 100.00%@1.56078446
//                 ~c[0][92] = 100.00%@0.73333335
//                 ~c[0][93] = 100.00%@0.26666668
//                 ~c[0][94] = 100.00%@334.95458984
//                 ~c[0][96] = 100.00%@16.72000313
//                 ~c[0][97] = 100.00%@16.72000313
//                 ~c[0][98] = 100.00%@16.72000313
//                 ~c[0][99] = 100.00%@1.00000000
//                 ~c[0][184] = 100.00%@0.03114187
//                 ~c[0][185] = 100.00%@0.07972319
//                 ~c[0][186] = 100.00%@0.06903499
//                 ~c[0][187] = 100.00%@0.02250000
//                 ~c[0][192] = 100.00%@5136.00000000
//                 ~c[0][193] = 100.00%@192.00000000
//                 ~c[0][194] = 100.00%@-1168.00000000
//                 ~c[0][195] = 100.00%@1.00000000
//                 ~c[0][196] = 100.00%@2.91003489
//                 ~c[0][197] = 100.00%@5.31709385
//                 ~c[0][198] = 100.00%@4.28733635
//                 ~c[0][200] = 100.00%@0.00000000
//                 ~c[0][201] = 100.00%@0.00000000
//                 ~c[0][202] = 100.00%@0.00000000
//                 ~c[0][203] = 100.00%@0.00000000
//                  c[0][204] = 50.00%@4076.00000000 50.00%@4051.99951172
//                  c[0][205] = 50.00%@-752.00000000 50.00%@-139.99938965
//                  c[0][206] = 50.00%@-104.00000000 50.00%@-164.00000000
//                 ~c[0][207] = 100.00%@1.00000000
//                  c[0][208] = 50.00%@1.93160319 50.00%@0.91558629
//                  c[0][209] = 50.00%@1.40728629 50.00%@3.28249145
//                  c[0][210] = 50.00%@0.31817469 50.00%@2.61044216
//                 ~c[0][212] = 100.00%@0.00000000
//                 ~c[0][213] = 100.00%@0.00000000
//                 ~c[0][214] = 100.00%@0.00000000
//                 ~c[0][215] = 100.00%@0.00000000
//                  c[0][216] = 50.00%@4051.99951172 50.00%@4366.00000000
//                  c[0][217] = 50.00%@-139.99938965 50.00%@-72.00000000
//                  c[0][218] = 50.00%@-164.00000000 50.00%@-292.00000000
//                 ~c[0][219] = 100.00%@1.00000000
//                  c[0][220] = 50.00%@0.91558629 50.00%@0.77164167
//                  c[0][221] = 50.00%@3.28249145 50.00%@0.44444448
//                  c[0][222] = 50.00%@2.61044216 50.00%@0.20693579
//                 ~c[0][224] = 100.00%@0.00000000
//                 ~c[0][225] = 100.00%@0.00000000
//                 ~c[0][226] = 100.00%@0.00000000
//                 ~c[0][227] = 100.00%@0.00000000
//                 ~c[0][244] = 100.00%@-1.53465402
//                 ~c[0][245] = 100.00%@-0.00000007
//                 ~c[0][246] = 100.00%@0.00000000
//                 ~c[0][248] = 100.00%@0.00000000
//                 ~c[0][249] = 100.00%@0.00000000
//                 ~c[0][250] = 100.00%@-0.95915866
//                 ~c[0][252] = 100.00%@0.76730347
//                 ~c[0][253] = 100.00%@0.99998474
//                 ~c[0][254] = 100.00%@0.47957993
//                 ~c[0][256] = 100.00%@4098.58740234
//                 ~c[0][257] = 100.00%@-1304.57128906
//                 ~c[0][258] = 100.00%@-258.02313232
//                 ~c[0][260] = 100.00%@4098.54687500
//                 ~c[0][261] = 100.00%@-1304.55859375
//                 ~c[0][262] = 100.00%@-258.02062988
//                  c[0][72] = 50.00%@0x3de00000 50.00%@0x3dd00000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x100, height=0x100, mips=0x7, DXGI_FORMAT_BC2_UNORM
//         TEXTURE_SLOT 0x1
//         100.00% width=0x20, height=0x80, mips=0x4, DXGI_FORMAT_BC1_UNORM_SRGB
//         TEXTURE_SLOT 0x2
//         100.00% width=0x80, height=0x80, mips=0x1, DXGI_FORMAT_R32_FLOAT
//         TEXTURE_SLOT 0x3
//         100.00% width=0x80, height=0x80, mips=0x1, DXGI_FORMAT_R32_FLOAT
//         TEXTURE_SLOT 0x4
//         100.00% width=0x100, height=0x100, mips=0x7, DXGI_FORMAT_BC3_UNORM_SRGB
//         TEXTURE_SLOT 0x5
//         100.00% width=0x1, height=0x1, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x6
//         100.00% width=0x780, height=0x4b0, mips=0x1, DXGI_FORMAT_R11G11B10_FLOAT
//         TEXTURE_SLOT 0x7
//         100.00% width=0x1, height=0x1, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//         SAMPLER_SLOT 0x1
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//         SAMPLER_SLOT 0x2
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=CLAMP
//         SAMPLER_SLOT 0x3
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=CLAMP
//         SAMPLER_SLOT 0x4
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=CLAMP
//         SAMPLER_SLOT 0x5
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//         SAMPLER_SLOT 0x6
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//         SAMPLER_SLOT 0x7
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R29, -0x40800000;         # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R23, R0;                # [  2][000010]
//     	MOV32I R22, 0x1;                 # [  3][000018]
//     	IPA R1, a[0x84], R23;            # [  4][000020] GENERIC_ATTRIBUTE_00_Y
//     	IPA R0, a[0x80], R23;            # [  5][000028] ATTR0
//     	IPA R3, a[0x8c], R23;            # [  6][000030] GENERIC_ATTRIBUTE_00_W
//     	IPA R2, a[0x88], R23;            # [  7][000038] GENERIC_ATTRIBUTE_00_Z
//     	TEX.T R8, R0, 0x0, 0x3, 2D, 0x7; # [  8][000040]
//     	MOV R1, c[0x0][0x120];           # [  9][000048]
//     	IPA R0, a[0x98], R23;            # [ 10][000050] GENERIC_ATTRIBUTE_01_Z
//     	TEX.T R4, R2, 0x0, 0x3, 2D, 0x7; # [ 11][000058]
//     	TEX.T R38, R0, 0x2, 0x5, 2D, 0x1; # [ 12][000060]
//     	MOV R1, c[0x0][0x120];           # [ 13][000068]
//     	IPA R14, a[0xc4], R23;           # [ 14][000070] GENERIC_ATTRIBUTE_04_Y
//     	TEX.T R11, R0, 0x3, 0x6, 2D, 0x1; # [ 15][000078]
//     	IPA R1, a[0x94], R23;            # [ 16][000080] GENERIC_ATTRIBUTE_01_Y
//     	IPA R0, a[0x90], R23;            # [ 17][000088] ATTR1
//     	FMUL32I.FTZ R7, R14, 0xbf758b6c; # [ 18][000090]
//     	TEX.P R24, R0, 0x1, 0x4, 2D, 0x1; # [ 19][000098]
//     	FMUL.FTZ R0, R14, RZ;            # [ 20][0000a0]
//     	IPA R36, a[0xc0], R23;           # [ 21][0000a8] ATTR4
//     	FFMA.FTZ R1, R36, c[0x10][0x8], R0; # [ 22][0000b0]
//     	IPA R2, a[0xcc], R23;            # [ 23][0000b8] GENERIC_ATTRIBUTE_04_W
//     	FFMA.FTZ R3, R36, c[0x10][0x4], R0; # [ 24][0000c0]
//     	FFMA.FTZ R7, R36, c[0x10][0x0], R7; # [ 25][0000c8]
//     	FFMA.FTZ R0, R2, c[0x10][0xc], R1; # [ 26][0000d0]
//     	IPA R37, a[0x9c], R23;           # [ 27][0000d8] GENERIC_ATTRIBUTE_01_W
//     	FFMA.FTZ R1, R2, c[0x10][0x10], R3; # [ 28][0000e0]
//     	FADD32I.FTZ R26, R0, 0x458014b3; # [ 29][0000e8]
//     	FFMA.FTZ R3, R2, c[0x10][0x14], R7; # [ 30][0000f0]
//     	FADD32I.FTZ R16, R1, 0xc4a31248; # [ 31][0000f8]
//     	FADD32I.FTZ R0, -R26, 0x45801460; # [ 32][000100]
//     	FADD.FTZ R33, -R26, 5136;        # [ 33][000108]
//     	FADD32I.FTZ R1, R3, 0xc38102f6;  # [ 34][000110]
//     	FADD32I.FTZ R27, -R16, 0xc4a311e0; # [ 35][000118]
//     	FMUL.FTZ R12, R0, R0;            # [ 36][000120]
//     	FADD.FTZ R7, -R26, c[0x0][0x330]; # [ 37][000128]
//     	FADD.FTZ R32, -R16, 192;         # [ 38][000130]
//     	FMUL.FTZ R19, R33, R33;          # [ 39][000138]
//     	FADD32I.FTZ R17, -R1, 0xc38102a4; # [ 40][000140]
//     	FFMA.FTZ R12, R27, R27, R12;     # [ 41][000148]
//     	FADD.FTZ R25, -R16, c[0x0][0x334]; # [ 42][000150]
//     	FMUL.FTZ R30, R7, R7;            # [ 43][000158]
//     	FADD.FTZ R3, -R1, -1168;         # [ 44][000160]
//     	FFMA.FTZ R19, R32, R32, R19;     # [ 45][000168]
//     	FFMA.FTZ R12, R17, R17, R12;     # [ 46][000170]
//     	FADD.FTZ R28, -R1, c[0x0][0x338]; # [ 47][000178]
//     	FFMA.FTZ R31, R25, R25, R30;     # [ 48][000180]
//     	MUFU.RSQ R34, R12;               # [ 49][000188]
//     	FFMA.FTZ R30, R3, R3, R19;       # [ 50][000190]
//     	FMUL.FTZ R17, R17, R34;          # [ 51][000198]
//     	FFMA.FTZ R19, R28, R28, R31;     # [ 52][0001a0]
//     	FMUL.FTZ R35, R0, R34;           # [ 53][0001a8]
//     	MUFU.RSQ R31, R30;               # [ 54][0001b0]
//     	FADD.FTZ R26, -R26, c[0x0][0x360]; # [ 55][0001b8]
//     	FMUL.FTZ R30, R27, R34;          # [ 56][0001c0]
//     	IPA R20, a[0xd0], R23;           # [ 57][0001c8] ATTR5
//     	MUFU.RSQ R34, R19;               # [ 58][0001d0]
//     	FMUL.FTZ R0, R33, R31;           # [ 59][0001d8]
//     	FADD.FTZ R19, -R16, c[0x0][0x364]; # [ 60][0001e0]
//     	FFMA.FTZ R33, R33, R31, R35;     # [ 61][0001e8]
//     	FMUL.FTZ R40, R32, R31;          # [ 62][0001f0]
//     	IPA R18, a[0xd4], R23;           # [ 63][0001f8] GENERIC_ATTRIBUTE_05_Y
//     	FFMA.FTZ R32, R32, R31, R30;     # [ 64][000200]
//     	FMUL.FTZ R27, R3, R31;           # [ 65][000208]
//     	FFMA.FTZ R31, R3, R31, R17;      # [ 66][000210]
//     	IPA R15, a[0xd8], R23;           # [ 67][000218] GENERIC_ATTRIBUTE_05_Z
//     	FFMA.FTZ R39, R9, 2, R29;        # [ 68][000220]
//     	IPA R13, a[0xf8], R23;           # [ 69][000228] GENERIC_ATTRIBUTE_07_Z
//     	FFMA.FTZ R16, R5, 2, R39;        # [ 70][000230]
//     	FADD.FTZ R9, -R1, c[0x0][0x368]; # [ 71][000238]
//     	FADD.FTZ R5, R38, -R37;          # [ 72][000240]
//     	FMUL.FTZ R1, R7, R34;            # [ 73][000248]
//     	FFMA.FTZ R38, R8, 2, R29;        # [ 74][000250]
//     	FMUL32I.FTZ.SAT R5, R5, 1e+007;  # [ 75][000258]
//     	FADD.FTZ R37, -R11, R37;         # [ 76][000260]
//     	FFMA.FTZ R4, R4, 2, R38;         # [ 77][000268]
//     	FMUL32I.FTZ.SAT R37, R37, 1e+007; # [ 78][000270]
//     	FMUL.FTZ R11, R25, R34;          # [ 79][000278]
//     	FADD.FTZ R37, R5, R37;           # [ 80][000280]
//     	FFMA.FTZ R7, R7, R34, R35;       # [ 81][000288]
//     	FFMA.FTZ R5, R28, R34, R17;      # [ 82][000290]
//     	FFMA.FTZ R25, R25, R34, R30;     # [ 83][000298]
//     	FMUL.FTZ R28, R28, R34;          # [ 84][0002a0]
//     	FMUL.FTZ R8, R26, R26;           # [ 85][0002a8]
//     	FMNMX.FTZ R34, R37, 1, PT;       # [ 86][0002b0]
//     	FADD.FTZ R4, R4, -1;             # [ 87][0002b8]
//     	FMUL.FTZ R38, R7, R7;            # [ 88][0002c0]
//     	FMUL.FTZ R37, R33, R33;          # [ 89][0002c8]
//     	FMUL.FTZ R24, R34, R24;          # [ 90][0002d0]
//     	FADD.FTZ R16, R16, -1;           # [ 91][0002d8]
//     	FFMA.FTZ R34, R19, R19, R8;      # [ 92][0002e0]
//     	FMUL32I.FTZ R4, R4, 0x3ef1f1f3;  # [ 93][0002e8]
//     	FFMA.FTZ R8, R25, R25, R38;      # [ 94][0002f0]
//     	FFMA.FTZ R37, R32, R32, R37;     # [ 95][0002f8]
//     	FFMA.FTZ R38, R10, 2, R29;       # [ 96][000300]
//     	FMUL.FTZ R4, R4, R24;            # [ 97][000308]
//     	FMUL32I.FTZ R10, R16, 0x3ef1f1f3; # [ 98][000310]
//     	FFMA.FTZ R37, R31, R31, R37;     # [ 99][000318]
//     	FFMA.FTZ R6, R6, 2, R38;         # [100][000320]
//     	FMUL.FTZ R16, R10, R24;          # [101][000328]
//     	FMUL.FTZ R38, R20, R4;           # [102][000330]
//     	MUFU.RSQ R37, R37;               # [103][000338]
//     	FADD.FTZ R10, R6, -1;            # [104][000340]
//     	FFMA.FTZ R39, R18, R16, R38;     # [105][000348]
//     	FFMA.FTZ R38, R5, R5, R8;        # [106][000350]
//     	FMUL.FTZ R6, R33, R37;           # [107][000358]
//     	FFMA.FTZ R8, R15, R10, R39;      # [108][000360]
//     	FMUL.FTZ R33, R32, R37;          # [109][000368]
//     	MUFU.RSQ R38, R38;               # [110][000370]
//     	FMUL.FTZ R31, R31, R37;          # [111][000378]
//     	LOP32I.AND R32, R8, -0x80000000; # [112][000380]
//     	FMUL.FTZ R7, R7, R38;            # [113][000388]
//     	ICMP.EQ R37, R22, 0xfffff, R32;  # [114][000390]
//     	LOP32I.AND R8, R8, 0x7fffffff;   # [115][000398]
//     	FMUL.FTZ R32, R25, R38;          # [116][0003a0]
//     	FFMA.FTZ R34, R9, R9, R34;       # [117][0003a8]
//     	FMUL.FTZ R25, R5, R38;           # [118][0003b0]
//     	MUFU.RSQ R34, R34;               # [119][0003b8]
//     	FMUL.FTZ R38, R4, R4;            # [120][0003c0]
//     	ICMP.EQ R5, RZ, R37, R8;         # [121][0003c8]
//     	FFMA.FTZ R37, R16, R16, R38;     # [122][0003d0]
//     	FFMA.FTZ R30, R19, R34, R30;     # [123][0003d8]
//     	FFMA.FTZ R37, R10, R10, R37;     # [124][0003e0]
//     	FMUL.FTZ R39, R19, R34;          # [125][0003e8]
//     	MUFU.RSQ R37, R37;               # [126][0003f0]
//     	FFMA.FTZ R19, R9, R34, R17;      # [127][0003f8]
//     	FMUL.FTZ R38, R9, R34;           # [128][000400]
//     	IPA R12, a[0xf4], R23;           # [129][000408] GENERIC_ATTRIBUTE_07_Y
//     	FMUL.FTZ R9, R16, R37;           # [130][000410]
//     	IPA R21, a[0xe8], R23;           # [131][000418] GENERIC_ATTRIBUTE_06_Z
//     	I2F R16, R5;                     # [132][000420]
//     	FMUL.FTZ R10, R10, R37;          # [133][000428]
//     	FMUL.FTZ R4, R4, R37;            # [134][000430]
//     	IPA R3, a[0xe4], R23;            # [135][000438] GENERIC_ATTRIBUTE_06_Y
//     	FMUL.FTZ R9, R9, R16;            # [136][000440]
//     	FMUL.FTZ R5, R20, R20;           # [137][000448]
//     	FMUL.FTZ R10, R10, R16;          # [138][000450]
//     	IPA R22, a[0xf0], R23;           # [139][000458] ATTR7
//     	FMUL.FTZ R4, R4, R16;            # [140][000460]
//     	FFMA.FTZ R35, R26, R34, R35;     # [141][000468]
//     	FMUL.FTZ R26, R26, R34;          # [142][000470]
//     	IPA R17, a[0xbc], R23;           # [143][000478] GENERIC_ATTRIBUTE_03_W
//     	FMUL.FTZ R13, R9, R13;           # [144][000480]
//     	IPA R16, a[0xb8], R23;           # [145][000488] GENERIC_ATTRIBUTE_03_Z
//     	FFMA.FTZ R34, R18, R18, R5;      # [146][000490]
//     	FMUL.FTZ R12, R9, R12;           # [147][000498]
//     	FFMA.FTZ R5, R4, R21, R13;       # [148][0004a0]
//     	IPA R8, a[0xe0], R23;            # [149][0004a8] ATTR6
//     	FFMA.FTZ R21, R15, R15, R34;     # [150][0004b0]
//     	FFMA.FTZ R3, R4, R3, R12;        # [151][0004b8]
//     	FMUL.FTZ R34, R9, R22;           # [152][0004c0]
//     	IPA R13, a[0xb4], R23;           # [153][0004c8] GENERIC_ATTRIBUTE_03_Y
//     	MUFU.RSQ R21, R21;               # [154][0004d0]
//     	IPA R12, a[0xb0], R23;           # [155][0004d8] ATTR3
//     	TEX.NODEP.T R22, R16, 0x4, 0x2, 2D, 0x1; # [156][0004e0]
//     	FFMA.FTZ R16, R4, R8, R34;       # [157][0004e8]
//     	IPA R37, a[0x100], R23;          # [158][0004f0] ATTR8
//     	FMUL.FTZ R20, R21, R20;          # [159][0004f8]
//     	FMUL.FTZ R17, R21, R18;          # [160][000500]
//     	FMUL.FTZ R15, R21, R15;          # [161][000508]
//     	FMUL.FTZ R18, R35, R35;          # [162][000510]
//     	IPA R8, a[0x104], R23;           # [163][000518] GENERIC_ATTRIBUTE_08_Y
//     	TEX.NODEP.P R21, R12, 0x4, 0x2, 2D, 0x1; # [164][000520]
//     	FFMA.FTZ R34, R10, R37, R16;     # [165][000528]
//     	IPA R12, a[0x108], R23;          # [166][000530] GENERIC_ATTRIBUTE_08_Z
//     	FMUL.FTZ R13, R4, R20;           # [167][000538]
//     	FFMA.FTZ R20, R30, R30, R18;     # [168][000540]
//     	FMUL.FTZ R16, R34, R34;          # [169][000548]
//     	FFMA.FTZ R3, R10, R8, R3;        # [170][000550]
//     	FFMA.FTZ R18, R9, R17, R13;      # [171][000558]
//     	FFMA.FTZ R41, R10, R12, R5;      # [172][000560]
//     	FFMA.FTZ R17, R19, R19, R20;     # [173][000568]
//     	FFMA.FTZ R5, R3, R3, R16;        # [174][000570]
//     	MUFU.RCP R13, R2;                # [175][000578]
//     	MUFU.RSQ R20, R17;               # [176][000580]
//     	FFMA.FTZ R5, R41, R41, R5;       # [177][000588]
//     	FMUL.FTZ R16, R36, R13;          # [178][000590]
//     	FMUL.FTZ R17, R14, R13;          # [179][000598]
//     	MUFU.RSQ R5, R5;                 # [180][0005a0]
//     	FFMA.FTZ R15, R10, R15, R18;     # [181][0005a8]
//     	FMUL.FTZ R35, R35, R20;          # [182][0005b0]
//     	FMUL.FTZ R30, R30, R20;          # [183][0005b8]
//     	FMUL.FTZ R20, R19, R20;          # [184][0005c0]
//     	FMUL.FTZ R37, R37, R4;           # [185][0005c8]
//     	FFMA.FTZ R14, R9, -5, R14;       # [186][0005d0]
//     	TEX.NODEP.P R16, R16, 0x5, 0x7, 2D; # [187][0005d8]
//     	FMUL.FTZ R34, R34, R5;           # [188][0005e0]
//     	FMUL.FTZ R3, R3, R5;             # [189][0005e8]
//     	FMUL.FTZ R1, R1, R34;            # [190][0005f0]
//     	FMUL.FTZ R26, R26, R34;          # [191][0005f8]
//     	FFMA.FTZ R11, R11, R3, R1;       # [192][000600]
//     	FMUL.FTZ R5, R41, R5;            # [193][000608]
//     	FMUL.FTZ R1, R34, R34;           # [194][000610]
//     	FFMA.FTZ R26, R39, R3, R26;      # [195][000618]
//     	FFMA.FTZ R1, R3, R3, R1;         # [196][000620]
//     	FMUL.FTZ R0, R0, R34;            # [197][000628]
//     	FFMA.FTZ.SAT R28, R28, R5, R11;  # [198][000630]
//     	FFMA.FTZ R39, R5, R5, R1;        # [199][000638]
//     	FFMA.FTZ.SAT R26, R38, R5, R26;  # [200][000640]
//     	FFMA.FTZ R0, R40, R3, R0;        # [201][000648]
//     	MUFU.RSQ R11, R39;               # [202][000650]
//     	IPA R38, a[0xc4], R23;           # [203][000658] GENERIC_ATTRIBUTE_04_Y
//     	FFMA.FTZ R39, R8, R9, R37;       # [204][000660]
//     	FFMA.FTZ.SAT R27, R27, R5, R0;   # [205][000668]
//     	FFMA.FTZ R37, R4, -5, R36;       # [206][000670]
//     	IPA R8, a[0xc0], R23;            # [207][000678] ATTR4
//     	FFMA.FTZ R12, R12, R10, R39;     # [208][000680]
//     	IPA R1, a[0xac], R23;            # [209][000688] GENERIC_ATTRIBUTE_02_W
//     	FMUL.FTZ R34, R34, R11;          # [210][000690]
//     	IPA R0, a[0xa8], R23;            # [211][000698] GENERIC_ATTRIBUTE_02_Z
//     	FMUL.FTZ R3, R3, R11;            # [212][0006a0]
//     	IPA R36, a[0xcc], R23;           # [213][0006a8] GENERIC_ATTRIBUTE_04_W
//     	FMUL.FTZ R10, RZ, R38;           # [214][0006b0]
//     	FMUL.FTZ R11, R5, R11;           # [215][0006b8]
//     	FMNMX.FTZ R14, R14, R2, PT;      # [216][0006c0]
//     	IPA R5, a[0xa4], R23;            # [217][0006c8] GENERIC_ATTRIBUTE_02_Y
//     	FMUL.FTZ R9, RZ, R8;             # [218][0006d0]
//     	IPA R4, a[0xa0], R23;            # [219][0006d8] ATTR2
//     	FFMA.FTZ R8, R8, c[0x10][0x2c], R10; # [220][0006e0]
//     	FMNMX.FTZ R37, R37, R2, PT;      # [221][0006e8]
//     	FADD.FTZ R39, R9, R10;           # [222][0006f0]
//     	TEX.NODEP.T R0, R0, 0x4, 0x2, 2D, 0x7; # [223][0006f8]
//     	FFMA.FTZ R38, R38, c[0x10][0x34], R9; # [224][000700]
//     	FFMA.FTZ R8, R36, c[0x10][0x30], R8; # [225][000708]
//     	FFMA.FTZ R38, R36, c[0x10][0x38], R38; # [226][000710]
//     	FMUL.FTZ R40, R8, R8;            # [227][000718]
//     	FADD.FTZ R36, R39, R36;          # [228][000720]
//     	TEX.NODEP.T R8, R4, 0x4, 0x2, 2D, 0x7; # [229][000728]
//     	MOV32I R39, 0x3f000000;          # [230][000730]
//     	FMUL.FTZ R4, R37, R13;           # [231][000738]
//     	FMUL.FTZ R5, R14, R13;           # [232][000740]
//     	FFMA.FTZ R38, R38, R38, R40;     # [233][000748]
//     	FFMA.FTZ.SAT R13, R12, 0.5, R39; # [234][000750]
//     	MOV32I R14, 0x3cb851ec;          # [235][000758]
//     	FFMA.FTZ R12, R36, R36, R38;     # [236][000760]
//     	FMUL.FTZ R13, R13, R13;          # [237][000768]
//     	MUFU.RSQ R37, R12;               # [238][000770]
//     	FFMA.FTZ R36, R13, c[0x10][0x1c], R14; # [239][000778]
//     	FMUL.FTZ R6, R34, R6;            # [240][000780]
//     	TEX.NODEP.T R12, R4, 0x6, 0x0, 2D, 0x7; # [241][000788]
//     	FMUL.FTZ R38, R34, R7;           # [242][000790]
//     	FFMA.FTZ R33, R3, R33, R6;       # [243][000798]
//     	MUFU.RCP R37, R37;               # [244][0007a0]
//     	FMUL.FTZ R34, R34, R35;          # [245][0007a8]
//     	FFMA.FTZ R32, R3, R32, R38;      # [246][0007b0]
//     	TEX.NODEP.P R4, R4, 0x7, 0x1, 2D; # [247][0007b8]
//     	FFMA.FTZ R35, R37, RZ, -R29;     # [248][0007c0]
//     	FFMA.FTZ R34, R3, R30, R34;      # [249][0007c8]
//     	FFMA.FTZ.SAT R30, R11, R31, R33; # [250][0007d0]
//     	FMUL32I.FTZ R3, R35, 0x3fb8aa3b; # [251][0007d8]
//     	FADD.FTZ R35, -R15, 1;           # [252][0007e0]
//     	FFMA.FTZ.SAT R32, R11, R25, R32; # [253][0007e8]
//     	RRO.EX2 R33, R3;                 # [254][0007f0]
//     	F2F R25, |R35|;                  # [255][0007f8]
//     	F2F.SAT R35, R35;                # [256][000800]
//     	MUFU.EX2 R15, R33;               # [257][000808]
//     	FFMA.FTZ.SAT R33, R11, R20, R34; # [258][000810]
//     	MOV32I R31, 0x3f3bbbbc;          # [259][000818]
//     	FMUL.FTZ R20, R25, R25;          # [260][000820]
//     	FFMA.FTZ R34, R35, RZ, -R29;     # [261][000828]
//     	FMUL.FTZ R20, R20, R20;          # [262][000830]
//     	FADD.FTZ R35, R34, -1;           # [263][000838]
//     	F2F.SAT R34, R15;                # [264][000840]
//     	IPA R11, a[0x10c], R23;          # [265][000848] GENERIC_ATTRIBUTE_08_W
//     	FMUL.FTZ R20, R25, R20;          # [266][000850]
//     	FFMA.FTZ R15, R24, R35, -R29;    # [267][000858]
//     	MUFU.LG2 R35, R32;               # [268][000860]
//     	IPA R25, a[0xfc], R23;           # [269][000868] GENERIC_ATTRIBUTE_07_W
//     	FFMA.FTZ.SAT R31, R20, c[0x10][0x18], R31; # [270][000870]
//     	IPA R29, a[0xec], R23;           # [271][000878] GENERIC_ATTRIBUTE_06_W
//     	FMUL.FTZ R23, R34, 0x80000;      # [272][000880]
//     	FMUL32I.FTZ.SAT R37, R20, 0x3fc7c7c9; # [273][000888]
//     	MUFU.LG2 R34, R30;               # [274][000890]
//     	FMUL.FTZ R20, R24, R23;          # [275][000898]
//     	FMUL32I.FTZ R32, R34, 0x43a77a30; # [276][0008a0]
//     	MUFU.LG2 R30, R33;               # [277][0008a8]
//     	FMUL32I.FTZ R33, R35, 0x43a77a30; # [278][0008b0]
//     	FADD.FTZ R22, R22, -R21;         # [279][0008b8]
//     	FFMA.FTZ R21, R22, 0.5, R21;     # [280][0008c0]
//     	FMUL32I.FTZ R30, R30, 0x43a77a30; # [281][0008c8]
//     	FMUL32I.FTZ R21, R21, 0x4185c291; # [282][0008d0]
//     	RRO.EX2 R32, R32;                # [283][0008d8]
//     	FMUL.FTZ R34, R16, RZ;           # [284][0008e0]
//     	RRO.EX2 R30, R30;                # [285][0008e8]
//     	FFMA.FTZ R17, R17, RZ, R34;      # [286][0008f0]
//     	RRO.EX2 R16, R33;                # [287][0008f8]
//     	FFMA.FTZ R18, R18, RZ, R17;      # [288][000900]
//     	FMUL.FTZ R23, R24, R37;          # [289][000908]
//     	FFMA.FTZ.SAT R18, R19, RZ, R18;  # [290][000910]
//     	MUFU.EX2 R17, R32;               # [291][000918]
//     	MUFU.EX2 R19, R16;               # [292][000920]
//     	MOV R3, RZ;                      # [293][000928]
//     	FMUL.FTZ R16, R21, R31;          # [294][000930]
//     	FADD.FTZ R21, -R18, 1;           # [295][000938]
//     	FMUL.FTZ.SAT R11, R21, R11;      # [296][000940]
//     	FMUL.FTZ.SAT R22, R21, R25;      # [297][000948]
//     	FMUL.FTZ.SAT R21, R21, R29;      # [298][000950]
//     	MUFU.EX2 R18, R30;               # [299][000958]
//     	FMUL.FTZ R29, R11, c[0x0][0x340]; # [300][000960]
//     	FMUL.FTZ R32, R11, c[0x0][0x344]; # [301][000968]
//     	FMUL.FTZ R35, R11, c[0x0][0x348]; # [302][000970]
//     	FMUL32I.FTZ R31, R22, 0x40aa25a2; # [303][000978]
//     	FMUL32I.FTZ R11, R22, 0x408931dc; # [304][000980]
//     	FMUL.FTZ R33, R19, R32;          # [305][000988]
//     	FMUL32I.FTZ R22, R22, 0x403a3e03; # [306][000990]
//     	FMUL.FTZ R25, R19, R35;          # [307][000998]
//     	FMUL.FTZ R30, R19, R29;          # [308][0009a0]
//     	FMUL.FTZ R34, R32, R28;          # [309][0009a8]
//     	FMUL.FTZ R19, R29, R28;          # [310][0009b0]
//     	FMUL.FTZ R35, R35, R28;          # [311][0009b8]
//     	FFMA.FTZ R30, R17, R22, R30;     # [312][0009c0]
//     	FFMA.FTZ R32, R17, R31, R33;     # [313][0009c8]
//     	FMUL.FTZ R28, R21, c[0x0][0x370]; # [314][0009d0]
//     	FFMA.FTZ R22, R27, R22, R19;     # [315][0009d8]
//     	FMUL.FTZ R29, R21, c[0x0][0x374]; # [316][0009e0]
//     	FFMA.FTZ R31, R27, R31, R34;     # [317][0009e8]
//     	FMUL.FTZ R21, R21, c[0x0][0x378]; # [318][0009f0]
//     	FFMA.FTZ R17, R17, R11, R25;     # [319][0009f8]
//     	FADD.FTZ R0, R0, -R8;            # [320][000a00]
//     	FADD.FTZ R1, R1, -R9;            # [321][000a08]
//     	FADD.FTZ R2, R2, -R10;           # [322][000a10]
//     	FFMA.FTZ R0, R0, 0.5, R8;        # [323][000a18]
//     	FFMA.FTZ R1, R1, 0.5, R9;        # [324][000a20]
//     	FFMA.FTZ R22, R26, R28, R22;     # [325][000a28]
//     	FFMA.FTZ R25, R27, R11, R35;     # [326][000a30]
//     	FFMA.FTZ R8, R2, 0.5, R10;       # [327][000a38]
//     	FMUL.FTZ R0, R24, R0;            # [328][000a40]
//     	FFMA.FTZ R19, R26, R29, R31;     # [329][000a48]
//     	FMUL.FTZ R2, R24, R1;            # [330][000a50]
//     	FFMA.FTZ R11, R18, R29, R32;     # [331][000a58]
//     	FFMA.FTZ R17, R18, R21, R17;     # [332][000a60]
//     	FMUL.FTZ R16, R24, R16;          # [333][000a68]
//     	FFMA.FTZ R18, R18, R28, R30;     # [334][000a70]
//     	FMUL.FTZ R1, R22, R0;            # [335][000a78]
//     	FFMA.FTZ R4, R12, R7, R4;        # [336][000a80]
//     	FFMA.FTZ R5, R13, R7, R5;        # [337][000a88]
//     	FFMA.FTZ R6, R14, R7, R6;        # [338][000a90]
//     	FMUL.FTZ R4, R4, 0.125;          # [339][000a98]
//     	FMUL.FTZ R5, R5, 0.125;          # [340][000aa0]
//     	FMUL.FTZ R24, R24, R8;           # [341][000aa8]
//     	FMUL.FTZ R6, R6, 0.125;          # [342][000ab0]
//     	FFMA.FTZ R4, R15, R4, -R15;      # [343][000ab8]
//     	FFMA.FTZ R21, R26, R21, R25;     # [344][000ac0]
//     	FMUL.FTZ R9, R19, R2;            # [345][000ac8]
//     	FFMA.FTZ R5, R15, R5, -R15;      # [346][000ad0]
//     	FMUL.FTZ R8, R0, R36;            # [347][000ad8]
//     	FFMA.FTZ R7, R15, R6, -R15;      # [348][000ae0]
//     	FFMA.FTZ R0, R16, R18, R1;       # [349][000ae8]
//     	FFMA.FTZ R4, R15, R4, R15;       # [350][000af0]
//     	FMUL.FTZ R19, R21, R24;          # [351][000af8]
//     	FMUL.FTZ R10, R2, R36;           # [352][000b00]
//     	FFMA.FTZ R1, R16, R11, R9;       # [353][000b08]
//     	FFMA.FTZ R6, R15, R5, R15;       # [354][000b10]
//     	FMUL.FTZ R21, R24, R36;          # [355][000b18]
//     	FFMA.FTZ R9, R15, R7, R15;       # [356][000b20]
//     	FFMA.FTZ R5, R8, c[0x10][0x28], -R4; # [357][000b28]
//     	FFMA.FTZ R7, R10, c[0x10][0x24], -R6; # [358][000b30]
//     	FFMA.FTZ R8, R21, c[0x10][0x20], -R9; # [359][000b38]
//     	FFMA.FTZ R4, R23, R5, R4;        # [360][000b40]
//     	FFMA.FTZ R6, R23, R7, R6;        # [361][000b48]
//     	FFMA.FTZ R8, R23, R8, R9;        # [362][000b50]
//     	F2F.FTZ R5, -R4;                 # [363][000b58]
//     	F2F.FTZ R7, -R6;                 # [364][000b60]
//     	F2F.FTZ R9, -R8;                 # [365][000b68]
//     	FFMA.FTZ R4, R20, R5, R4;        # [366][000b70]
//     	FFMA.FTZ R2, R16, R17, R19;      # [367][000b78]
//     	FFMA.FTZ R5, R20, R7, R6;        # [368][000b80]
//     	FADD.FTZ R0, R0, R4;             # [369][000b88]
//     	FFMA.FTZ R6, R20, R9, R8;        # [370][000b90]
//     	FADD.FTZ R1, R1, R5;             # [371][000b98]
//     	FADD.FTZ R2, R2, R6;             # [372][000ba0]
//     	FMUL.FTZ R0, R0, 8;              # [373][000ba8]
//     	FMUL.FTZ R1, R1, 8;              # [374][000bb0]
//     	FMUL.FTZ R2, R2, 8;              # [375][000bb8]
//     	EXIT;                            # [376][000bc0]
//     	END
//     END_SECTION
// END_SHADER
// 
