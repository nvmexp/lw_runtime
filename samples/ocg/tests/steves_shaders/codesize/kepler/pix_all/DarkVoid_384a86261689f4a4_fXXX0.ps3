// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x384a86261689f4a4
//         UCODE_HASH: 0x0f04ba420ce67211
//         POOL: APP
//         VERSION: 20
//         # USES: 105
//         // Time: 46.244ms [4.305 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 26
//         USED_TEXTURE_BITS: 0x3ff
//         TEXTURE_SLOTS: 10
//         SAMPLER_SLOTS: 10
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00800a0a
//         0x00000000      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c1, 2.00000000, -1.00000000, 1.00000000, 0.00000000 ; 0x40000000 0xbf800000 0x3f800000 0x000000
        def c3, 0.81649661, 0.57735026, 0.00000000, 0.00010000 ; 0x3f5105ec 0x3f13cd3a 0x000000 0x38d1b717
        def c10, 15.93750000, -8.00000000, 3.00000000, 0.60000002 ; 0x417f0000 0xc1000000 0x40400000 0x3f19999a
        def c11, 0.37647101, 0.35686299, 0.34902000, 0.00000000 ; 0x3ec0c0cf 0x3eb6b6bf 0x3eb2b2c0 0x000000
        def c12, -0.70710677, -0.40824831, 0.57735026, 0.70710677 ; 0xbf3504f3 0xbed105ec 0x3f13cd3a 0x3f3504f3
        dcl_texcoord0 v0.rg
        dcl_texcoord1 v1.rg
        dcl_texcoord5 v2.a
        dcl_2d s0
        dcl_2d s1
        dcl_2d s2
        dcl_2d s3
        dcl_2d s4
        dcl_2d s5
        dcl_2d s6
        dcl_2d s7
        dcl_2d s8
        dcl_2d s9
        mul r0.xy, c6.x, v1
        texld r0, r0, s9
        mul r1.xy, c5.x, v1
        add r1.xy, r1, r1
        texld r1, r1, s8
        mul r2.xy, c4.x, v1
        mul r2.zw, r2.xyxy, c10.z
        texld r3, r2.zwzw, s6
        texld r4, r2, s7
        texld r2, r2, s3
        mul r3.xyz, r3, r4.y
        mad r1.xyz, r3, -c11, r1
        mul r3.xyz, r3, c11
        texld r5, v1, s5
        mad r1.xyz, r5.y, r1, r3
        mul r0.w, r5.z, c8.x
        mul r0.w, r4.x, r0.w
        max r1.w, r5.z, c3.w
        mul r2.w, r5.x, r5.x
        pow r3.x, r1.w, c7.x
        mad_sat r0.w, r0.w, c10.w, r3.x
        lrp r3.xyz, r0.w, r0, r1
        mul r0.xyz, r2.w, r3
        mov r1.z, c1.z
        add r1.xyz, r1.z, -c0
        mul_pp r0.xyz, r0, r1
        mad r1.xyz, r2, c1.x, c1.y
        texld r2, v1, s4
        add r2.xyz, r2, r2
        mad r1.xyz, r1, c1.zzw, r2
        add_pp r1.xyz, r1, c1.y
        nrm_pp r2.xyz, r1
        dp2add_sat_pp r1.x, r2.yzzw, c3, c3.z
        dp3_sat_pp r1.y, r2, c12
        dp3_sat_pp r1.z, r2.yzxw, c12.yzw
        mul r1.xyz, r1, r1
        max_pp r2.xyz, r1, c3.w
        texld r1, v0, s1
        mad r0.w, r1.w, c10.x, c10.y
        exp r0.w, r0.w
        mul_pp r1.xyz, r1, r0.w
        mul_pp r1.xyz, r2.y, r1
        mul_pp r1.xyz, r0, r1
        texld r3, v0, s0
        mad r0.w, r3.w, c10.x, c10.y
        exp r0.w, r0.w
        mul_pp r3.xyz, r3, r0.w
        mul_pp r2.xyw, r2.x, r3.xyz
        mad_pp r1.xyz, r2.xyw, r0, r1
        texld r3, v0, s2
        mad r0.w, r3.w, c10.x, c10.y
        exp r0.w, r0.w
        mul_pp r2.xyw, r3.xyz, r0.w
        mul_pp r2.xyz, r2.z, r2.xyw
        mad_pp r1.xyz, r2, r0, r1
        add_pp r1.xyz, r1, c0
        mad_pp oC0.xyz, r0, c9, r1
        rcp r0.x, v2.w
        mad_pp oC0.w, c2.x, r0.x, c2.y
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0001 0x40000000 0xbf800000
//         0x3f800000 0x00000000 0x05000051 0xa00f0003
//         0x3f5105ec 0x3f13cd3a 0x00000000 0x38d1b717
//         0x05000051 0xa00f000a 0x417f0000 0xc1000000
//         0x40400000 0x3f19999a 0x05000051 0xa00f000b
//         0x3ec0c0cf 0x3eb6b6bf 0x3eb2b2c0 0x00000000
//         0x05000051 0xa00f000c 0xbf3504f3 0xbed105ec
//         0x3f13cd3a 0x3f3504f3 0x0200001f 0x80000005
//         0x90030000 0x0200001f 0x80010005 0x90030001
//         0x0200001f 0x80050005 0x90080002 0x0200001f
//         0x90000000 0xa00f0800 0x0200001f 0x90000000
//         0xa00f0801 0x0200001f 0x90000000 0xa00f0802
//         0x0200001f 0x90000000 0xa00f0803 0x0200001f
//         0x90000000 0xa00f0804 0x0200001f 0x90000000
//         0xa00f0805 0x0200001f 0x90000000 0xa00f0806
//         0x0200001f 0x90000000 0xa00f0807 0x0200001f
//         0x90000000 0xa00f0808 0x0200001f 0x90000000
//         0xa00f0809 0x03000005 0x80030000 0xa0000006
//         0x90e40001 0x03000042 0x800f0000 0x80e40000
//         0xa0e40809 0x03000005 0x80030001 0xa0000005
//         0x90e40001 0x03000002 0x80030001 0x80e40001
//         0x80e40001 0x03000042 0x800f0001 0x80e40001
//         0xa0e40808 0x03000005 0x80030002 0xa0000004
//         0x90e40001 0x03000005 0x800c0002 0x80440002
//         0xa0aa000a 0x03000042 0x800f0003 0x80ee0002
//         0xa0e40806 0x03000042 0x800f0004 0x80e40002
//         0xa0e40807 0x03000042 0x800f0002 0x80e40002
//         0xa0e40803 0x03000005 0x80070003 0x80e40003
//         0x80550004 0x04000004 0x80070001 0x80e40003
//         0xa1e4000b 0x80e40001 0x03000005 0x80070003
//         0x80e40003 0xa0e4000b 0x03000042 0x800f0005
//         0x90e40001 0xa0e40805 0x04000004 0x80070001
//         0x80550005 0x80e40001 0x80e40003 0x03000005
//         0x80080000 0x80aa0005 0xa0000008 0x03000005
//         0x80080000 0x80000004 0x80ff0000 0x0300000b
//         0x80080001 0x80aa0005 0xa0ff0003 0x03000005
//         0x80080002 0x80000005 0x80000005 0x03000020
//         0x80010003 0x80ff0001 0xa0000007 0x04000004
//         0x80180000 0x80ff0000 0xa0ff000a 0x80000003
//         0x04000012 0x80070003 0x80ff0000 0x80e40000
//         0x80e40001 0x03000005 0x80070000 0x80ff0002
//         0x80e40003 0x02000001 0x80040001 0xa0aa0001
//         0x03000002 0x80070001 0x80aa0001 0xa1e40000
//         0x03000005 0x80270000 0x80e40000 0x80e40001
//         0x04000004 0x80070001 0x80e40002 0xa0000001
//         0xa0550001 0x03000042 0x800f0002 0x90e40001
//         0xa0e40804 0x03000002 0x80070002 0x80e40002
//         0x80e40002 0x04000004 0x80070001 0x80e40001
//         0xa0fa0001 0x80e40002 0x03000002 0x80270001
//         0x80e40001 0xa0550001 0x02000024 0x80270002
//         0x80e40001 0x0400005a 0x80310001 0x80e90002
//         0xa0e40003 0xa0aa0003 0x03000008 0x80320001
//         0x80e40002 0xa0e4000c 0x03000008 0x80340001
//         0x80c90002 0xa0f9000c 0x03000005 0x80070001
//         0x80e40001 0x80e40001 0x0300000b 0x80270002
//         0x80e40001 0xa0ff0003 0x03000042 0x800f0001
//         0x90e40000 0xa0e40801 0x04000004 0x80080000
//         0x80ff0001 0xa000000a 0xa055000a 0x0200000e
//         0x80080000 0x80ff0000 0x03000005 0x80270001
//         0x80e40001 0x80ff0000 0x03000005 0x80270001
//         0x80550002 0x80e40001 0x03000005 0x80270001
//         0x80e40000 0x80e40001 0x03000042 0x800f0003
//         0x90e40000 0xa0e40800 0x04000004 0x80080000
//         0x80ff0003 0xa000000a 0xa055000a 0x0200000e
//         0x80080000 0x80ff0000 0x03000005 0x80270003
//         0x80e40003 0x80ff0000 0x03000005 0x802b0002
//         0x80000002 0x80a40003 0x04000004 0x80270001
//         0x80f40002 0x80e40000 0x80e40001 0x03000042
//         0x800f0003 0x90e40000 0xa0e40802 0x04000004
//         0x80080000 0x80ff0003 0xa000000a 0xa055000a
//         0x0200000e 0x80080000 0x80ff0000 0x03000005
//         0x802b0002 0x80a40003 0x80ff0000 0x03000005
//         0x80270002 0x80aa0002 0x80f40002 0x04000004
//         0x80270001 0x80e40002 0x80e40000 0x80e40001
//         0x03000002 0x80270001 0x80e40001 0xa0e40000
//         0x04000004 0x80270800 0x80e40000 0xa0e40009
//         0x80e40001 0x02000006 0x80010000 0x90ff0002
//         0x04000004 0x80280800 0xa0000002 0x80000000
//         0xa0550002 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3eb2b2c0 // 0.34902000
//         COP_CONST[1]: 0x3eb6b6bf // 0.35686299
//         COP_CONST[2]: 0x3ec0c0cf // 0.37647101
//         COP_CONST[3]: 0x38d1b717 // 0.00010000
//         COP_CONST[4]: 0x3f19999a // 0.60000002
//         COP_CONST[5]: 0x3f5105ec // 0.81649661
//         COP_CONST[6]: 0xbed105ec // -0.40824831
//         COP_CONST[7]: 0x3f3504f3 // 0.70710677
//         COP_CONST[8]: 0x421fd70a // 39.95999908
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][251] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][252] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][258] = 0x421fd70a // 39.95999908
//         # USER FLOAT CONST: c[6][259] = 0x3a831200 // 0.00099999
//         # USER FLOAT CONST: c[6][266] = 0x41700000 // 15.00000000
//         # USER FLOAT CONST: c[6][270] = 0x42200000 // 40.00000000
//         # USER FLOAT CONST: c[6][274] = 0x42a00000 // 80.00000000
//         # USER FLOAT CONST: c[6][278] = 0x41f00000 // 30.00000000
//         # USER FLOAT CONST: c[6][282] = 0x42480000 // 50.00000000
//         # USER FLOAT CONST: c[6][286] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][287] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][288] = 0x00000000 // 0.00000000
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@0.00000000
//         ##    ~c0.y -> c[6][251] = 100.00%@0.00000000
//         ##    ~c0.z -> c[6][252] = 100.00%@0.00000000
//         ##    ~c2.x -> c[6][258] = 100.00%@39.95999908
//         ##    ~c2.y -> c[6][259] = 100.00%@0.00099999
//         ##    ~c4.x -> c[6][266] = 100.00%@15.00000000
//         ##    ~c5.x -> c[6][270] = 100.00%@40.00000000
//         ##    ~c6.x -> c[6][274] = 100.00%@80.00000000
//         ##    ~c7.x -> c[6][278] = 100.00%@30.00000000
//         ##    ~c8.x -> c[6][282] = 100.00%@50.00000000
//         ##    ~c9.x -> c[6][286] = 100.00%@0.00000000
//         ##    ~c9.y -> c[6][287] = 100.00%@0.00000000
//         ##    ~c9.z -> c[6][288] = 100.00%@0.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,2560x1600,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0xa1e23f51,0x00000069
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0x7865c6ed,0x00000069
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0x1c61a3d6,0x00000069
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x90c330c4,0x00000069
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xdd3bd77b,0x00000069
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x803f616d,0x00000069
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x564f9fb2,0x00000069
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,1,0,0), 0xaa40c8fc,0x00000069
//         STAGEINFO:(0x8,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x8943f8be,0x00000069
//         STAGEINFO:(0x9,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,1,0,0), 0x834cb9cf,0x00000069
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 1 : 
//          (attr 1 3 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r45, c[6][256].x
//         movr r45.x, constant(80.00000000, 80.00000000, 80.00000000, 80.00000000).x
//         movr r45.y, constant(80.00000000, 80.00000000, 80.00000000, 80.00000000).x
//         movr r45.z, constant(80.00000000, 80.00000000, 80.00000000, 80.00000000).x
//         movr r45.w, constant(80.00000000, 80.00000000, 80.00000000, 80.00000000).x
//         mulr r5.xy, r45, v2
//         texr r5, r5.xyyy, #9, #9, 2D
//         movr r45, c[6][255].x
//         movr r45.x, constant(40.00000000, 40.00000000, 40.00000000, 40.00000000).x
//         movr r45.y, constant(40.00000000, 40.00000000, 40.00000000, 40.00000000).x
//         movr r45.z, constant(40.00000000, 40.00000000, 40.00000000, 40.00000000).x
//         movr r45.w, constant(40.00000000, 40.00000000, 40.00000000, 40.00000000).x
//         mulr r6.xy, r45, v2
//         addr r6.xy, r6, r6
//         texr r6, r6.xyyy, #8, #8, 2D
//         movr r45, c[6][254].x
//         movr r45.x, constant(15.00000000, 15.00000000, 15.00000000, 15.00000000).x
//         movr r45.y, constant(15.00000000, 15.00000000, 15.00000000, 15.00000000).x
//         movr r45.z, constant(15.00000000, 15.00000000, 15.00000000, 15.00000000).x
//         movr r45.w, constant(15.00000000, 15.00000000, 15.00000000, 15.00000000).x
//         mulr r7.xy, r45, v2
//         mulr r7.zw, r7.xyxy, constant(15.93750000, -8.00000000, 3.00000000, 0.60000002).z
//         texr r8, r7.zwzz, #6, #6, 2D
//         texr r9, r7.xyzz, #7, #7, 2D
//         texr r7, r7.xyzz, #3, #3, 2D
//         mulr r8.xyz, r8, r9.y
//         madr r6.xyz, r8, -constant(0.37647101, 0.35686299, 0.34902000, 0.00000000), r6
//         mulr r8.xyz, r8, constant(0.37647101, 0.35686299, 0.34902000, 0.00000000)
//         texr r10, v2.xyzz, #5, #5, 2D
//         madr r6.xyz, r10.y, r6, r8
//         movr r44, c[6][258].x
//         movr r44.x, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         movr r44.y, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         movr r44.z, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         movr r44.w, constant(50.00000000, 50.00000000, 50.00000000, 50.00000000).x
//         mulr r5.w, r10.z, r44
//         mulr r5.w, r9.x, r5.w
//         maxr r6.w, r10.z, constant(0.81649661, 0.57735026, 0.00000000, 0.00010000).w
//         mulr r7.w, r10.x, r10.x
//         lg2r r47, |r6.w|
//         movr r44, c[6][257].x
//         movr r44.x, constant(30.00000000, 30.00000000, 30.00000000, 30.00000000).x
//         movr r44.y, constant(30.00000000, 30.00000000, 30.00000000, 30.00000000).x
//         movr r44.z, constant(30.00000000, 30.00000000, 30.00000000, 30.00000000).x
//         movr r44.w, constant(30.00000000, 30.00000000, 30.00000000, 30.00000000).x
//         mulr r47, r47, r44
//         ex2r r8.x, r47
//         madr_sat r5.w, r5.w, constant(15.93750000, -8.00000000, 3.00000000, 0.60000002).w, r8.x
//         lrpr r8.xyz, r5.w, r5, r6
//         mulr r5.xyz, r7.w, r8
//         movr r6.z, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).z
//         movr r44, -c[6][250]
//         movr r44.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addr r6.xyz, r6.z, r44
//         mulh r5.xyz, r5, r6
//         madr r6.xyz, r7, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).x, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).y
//         texr r7, v2.xyzz, #4, #4, 2D
//         addr r7.xyz, r7, r7
//         madr r6.xyz, r6, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).zzww, r7
//         addh r6.xyz, r6, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).y
//         nrmh r7.xyz, r6
//         dp2ah_sat r6.x, r7.yzzw, constant(0.81649661, 0.57735026, 0.00000000, 0.00010000), constant(0.81649661, 0.57735026, 0.00000000, 0.00010000).z
//         dp3h_sat r6.y, r7, constant(-0.70710677, -0.40824831, 0.57735026, 0.70710677)
//         dp3h_sat r6.z, r7.yzxw, constant(-0.70710677, -0.40824831, 0.57735026, 0.70710677).yzww
//         mulr r6.xyz, r6, r6
//         maxh r7.xyz, r6, constant(0.81649661, 0.57735026, 0.00000000, 0.00010000).w
//         texr r6, v1.xyzz, #1, #1, 2D
//         madr r5.w, r6.w, constant(15.93750000, -8.00000000, 3.00000000, 0.60000002).x, constant(15.93750000, -8.00000000, 3.00000000, 0.60000002).y
//         ex2r r5.w, r5.w
//         mulh r6.xyz, r6, r5.w
//         mulh r6.xyz, r7.y, r6
//         mulh r6.xyz, r5, r6
//         texr r8, v1.xyzz, #0, #0, 2D
//         madr r5.w, r8.w, constant(15.93750000, -8.00000000, 3.00000000, 0.60000002).x, constant(15.93750000, -8.00000000, 3.00000000, 0.60000002).y
//         ex2r r5.w, r5.w
//         mulh r8.xyz, r8, r5.w
//         mulh r7.xyw, r7.x, r8.xyzz
//         madh r6.xyz, r7.xyww, r5, r6
//         texr r8, v1.xyzz, #2, #2, 2D
//         madr r5.w, r8.w, constant(15.93750000, -8.00000000, 3.00000000, 0.60000002).x, constant(15.93750000, -8.00000000, 3.00000000, 0.60000002).y
//         ex2r r5.w, r5.w
//         mulh r7.xyw, r8.xyzz, r5.w
//         mulh r7.xyz, r7.z, r7.xyww
//         madh r6.xyz, r7, r5, r6
//         movr r44, c[6][250]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addh r6.xyz, r6, r44
//         movr r44, c[6][259]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madh r0.xyz, r5, r44, r6
//         rcpr r5.x, v3.w
//         movr r45, c[6][252].x
//         movr r45.x, constant(39.95999908, 39.95999908, 39.95999908, 39.95999908).x
//         movr r45.y, constant(39.95999908, 39.95999908, 39.95999908, 39.95999908).x
//         movr r45.z, constant(39.95999908, 39.95999908, 39.95999908, 39.95999908).x
//         movr r45.w, constant(39.95999908, 39.95999908, 39.95999908, 39.95999908).x
//         movr r43, c[6][252].y
//         movr r43.x, constant(0.00099999, 0.00099999, 0.00099999, 0.00099999).x
//         movr r43.y, constant(0.00099999, 0.00099999, 0.00099999, 0.00099999).x
//         movr r43.z, constant(0.00099999, 0.00099999, 0.00099999, 0.00099999).x
//         movr r43.w, constant(0.00099999, 0.00099999, 0.00099999, 0.00099999).x
//         madh r0.w, r45, r5.x, r43
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R15, R0;                # [  1][000008]
//     	IPA.SC R13, a[0x314], R15;       # [  2][000010] FIXED_FNC_TEXTURE_1_T
//     	FMUL.FMZ R1, R13, 45;            # [  3][000018]
//     	IPA.SC R12, a[0x310], R15;       # [  4][000020] TEX1
//     	FMUL.FMZ R0, R12, 45;            # [  5][000028]
//     	FMUL.FMZ R8, R12, 15;            # [  6][000030]
//     	TEX.NODEP.T R0, R0, 0x6, 0x6, 2D, 0x7; # [  7][000038]
//     	FMUL.FMZ R9, R13, 15;            # [  8][000040]
//     	FMUL.FMZ R3, R12, 40;            # [  9][000048]
//     	FMUL.FMZ R5, R13, 40;            # [ 10][000050]
//     	TEX.NODEP.T R10, R8, 0x7, 0x7, 2D, 0x3; # [ 11][000058]
//     	FADD.FTZ R4, R3, R3;             # [ 12][000060]
//     	TEX.NODEP.T R20, R12, 0x5, 0x5, 2D, 0x7; # [ 13][000068]
//     	FADD.FTZ R5, R5, R5;             # [ 14][000070]
//     	FMUL.FMZ R17, R13, 80;           # [ 15][000078]
//     	FMUL.FMZ R16, R12, 80;           # [ 16][000080]
//     	TEX.NODEP.T R4, R4, 0x8, 0x8, 2D, 0x7; # [ 17][000088]
//     	TEX.NODEP.T R8, R8, 0x3, 0x3, 2D, 0x3; # [ 18][000090]
//     	TEX.NODEP.T R16, R16, 0x9, 0x9, 2D, 0x7; # [ 19][000098]
//     	TEX.NODEP.P R12, R12, 0x4, 0x4, 2D, 0x7; # [ 20][0000a0]
//     	IPA.SC R23, a[0x304], R15;       # [ 21][0000a8] FIXED_FNC_TEXTURE_0_T
//     	FMUL.FMZ R25, R1, R11;           # [ 22][0000b0]
//     	FMNMX.FTZ R3, R22, c[0x9][0xc], !PT; # [ 23][0000b8]
//     	MUFU.LG2 R19, |R3|;              # [ 24][0000c0]
//     	FMUL.FMZ R1, R2, R11;            # [ 25][0000c8]
//     	FMUL.FMZ R7, R0, R11;            # [ 26][0000d0]
//     	FMUL.FMZ R2, R19, 30;            # [ 27][0000d8]
//     	FMUL.FMZ R0, R22, 50;            # [ 28][0000e0]
//     	RRO.EX2 R11, R2;                 # [ 29][0000e8]
//     	FFMA.FMZ R2, R1, -c[0x9][0x0], R6; # [ 30][0000f0]
//     	IPA.SC R22, a[0x300], R15;       # [ 31][0000f8] TEX0
//     	FMUL.FMZ R0, R10, R0;            # [ 32][000100]
//     	MOV32I R3, -0x40800000;          # [ 33][000108]
//     	FMUL32I.FMZ R10, R1, 0.34902;    # [ 34][000110]
//     	FFMA.FMZ R6, R8, 2, R3;          # [ 35][000118]
//     	MUFU.EX2 R1, R11;                # [ 36][000120]
//     	FFMA.FMZ R24, R9, 2, R3;         # [ 37][000128]
//     	FFMA.FMZ R8, R21, R2, R10;       # [ 38][000130]
//     	FFMA.FMZ.SAT R19, R0, c[0x9][0x10], R1; # [ 39][000138]
//     	FMUL32I.FMZ R9, R25, 0.356863;   # [ 40][000140]
//     	TEX.NODEP.P R0, R22, 0x1, 0x1, 2D; # [ 41][000148]
//     	FFMA.FMZ R4, R7, -c[0x9][0x8], R4; # [ 42][000150]
//     	FFMA.FMZ R5, R25, -c[0x9][0x4], R5; # [ 43][000158]
//     	FMUL32I.FMZ R7, R7, 0.376471;    # [ 44][000160]
//     	FADD.FTZ R10, R18, -R8;          # [ 45][000168]
//     	FFMA.FMZ R18, R21, R5, R9;       # [ 46][000170]
//     	FFMA.FMZ R4, R21, R4, R7;        # [ 47][000178]
//     	FFMA.FTZ R21, R19, R10, R8;      # [ 48][000180]
//     	FADD.FTZ R7, R12, R12;           # [ 49][000188]
//     	FADD.FTZ R13, R13, R13;          # [ 50][000190]
//     	TEX.NODEP.T R8, R22, 0x0, 0x0, 2D; # [ 51][000198]
//     	FADD.FTZ R5, R16, -R4;           # [ 52][0001a0]
//     	FADD.FTZ R16, R6, R7;            # [ 53][0001a8]
//     	FFMA.FTZ R12, R19, R5, R4;       # [ 54][0001b0]
//     	TEX.NODEP.P R4, R22, 0x2, 0x2, 2D; # [ 55][0001b8]
//     	FADD.FTZ R22, R24, R13;          # [ 56][0001c0]
//     	FADD.FTZ R13, R16, -1;           # [ 57][0001c8]
//     	FADD.FTZ R16, R14, R14;          # [ 58][0001d0]
//     	FADD.FTZ R14, R22, -1;           # [ 59][0001d8]
//     	FADD.FTZ R16, R16, -1;           # [ 60][0001e0]
//     	FMUL.FTZ R22, R13, R13;          # [ 61][0001e8]
//     	FFMA.FTZ R23, R14, R14, R22;     # [ 62][0001f0]
//     	FADD.FTZ R22, R17, -R18;         # [ 63][0001f8]
//     	FFMA.FTZ R23, R16, R16, R23;     # [ 64][000200]
//     	FMUL.FMZ R17, R20, R20;          # [ 65][000208]
//     	FFMA.FTZ R19, R19, R22, R18;     # [ 66][000210]
//     	MUFU.RSQ R20, R23;               # [ 67][000218]
//     	FMUL.FMZ R18, R17, R12;          # [ 68][000220]
//     	FMUL.FTZ R16, R16, R20;          # [ 69][000228]
//     	FMUL.FMZ R12, R17, R19;          # [ 70][000230]
//     	FMUL.FTZ R14, R14, R20;          # [ 71][000238]
//     	FMUL.FTZ R19, R13, R20;          # [ 72][000240]
//     	FMUL.FMZ R17, R17, R21;          # [ 73][000248]
//     	MOV32I R13, -0x3f000000;         # [ 74][000250]
//     	IPA.SC R20, a[0x32c], R15;       # [ 75][000258] FIXED_FNC_TEXTURE_2_Q
//     	FMUL32I.FTZ R21, R19, 0xbf3504f3; # [ 76][000260]
//     	FMUL32I.FTZ R15, R16, 0x3f13cd3a; # [ 77][000268]
//     	FFMA.FTZ R16, R14, c[0x9][0x18], R21; # [ 78][000270]
//     	MUFU.RCP R20, R20;               # [ 79][000278]
//     	FFMA.FTZ R21, R14, c[0x9][0x18], R15; # [ 80][000280]
//     	FFMA.FMZ R22, R3, 15.9375, R13;  # [ 81][000288]
//     	FFMA.FTZ.SAT R3, R14, c[0x9][0x14], R15; # [ 82][000290]
//     	RRO.EX2 R22, R22;                # [ 83][000298]
//     	FADD.FTZ.SAT R14, R16, R15;      # [ 84][0002a0]
//     	MUFU.EX2 R16, R22;               # [ 85][0002a8]
//     	FFMA.FTZ.SAT R15, R19, c[0x9][0x1c], R21; # [ 86][0002b0]
//     	MOV32I R19, 0x3a831200;          # [ 87][0002b8]
//     	FMUL.FMZ R0, R0, R16;            # [ 88][0002c0]
//     	FMUL.FMZ R1, R1, R16;            # [ 89][0002c8]
//     	FMUL.FMZ R16, R2, R16;           # [ 90][0002d0]
//     	FFMA.FMZ R7, R7, 15.9375, R13;   # [ 91][0002d8]
//     	FMUL.FMZ R2, R3, R3;             # [ 92][0002e0]
//     	RRO.EX2 R7, R7;                  # [ 93][0002e8]
//     	FFMA.FMZ R3, R20, c[0x9][0x20], R19; # [ 94][0002f0]
//     	FMUL.FMZ R19, R14, R14;          # [ 95][0002f8]
//     	FMUL.FMZ R14, R15, R15;          # [ 96][000300]
//     	FMNMX.FTZ R19, R19, c[0x9][0xc], !PT; # [ 97][000308]
//     	FFMA.FMZ R15, R11, 15.9375, R13; # [ 98][000310]
//     	FMNMX.FTZ R2, R2, c[0x9][0xc], !PT; # [ 99][000318]
//     	RRO.EX2 R15, R15;                # [100][000320]
//     	FMUL.FMZ R1, R19, R1;            # [101][000328]
//     	MUFU.EX2 R15, R15;               # [102][000330]
//     	FMUL.FMZ R0, R19, R0;            # [103][000338]
//     	FMUL.FMZ R1, R12, R1;            # [104][000340]
//     	FMUL.FMZ R10, R10, R15;          # [105][000348]
//     	FMUL.FMZ R8, R8, R15;            # [106][000350]
//     	FMUL.FMZ R9, R9, R15;            # [107][000358]
//     	FMUL.FMZ R10, R2, R10;           # [108][000360]
//     	FMUL.FMZ R0, R18, R0;            # [109][000368]
//     	FMUL.FMZ R8, R2, R8;             # [110][000370]
//     	FMUL.FMZ R9, R2, R9;             # [111][000378]
//     	MUFU.EX2 R2, R7;                 # [112][000380]
//     	FMNMX.FTZ R11, R14, c[0x9][0xc], !PT; # [113][000388]
//     	FFMA.FMZ R7, R9, R12, R1;        # [114][000390]
//     	FMUL.FMZ R14, R19, R16;          # [115][000398]
//     	FFMA.FMZ R1, R8, R18, R0;        # [116][0003a0]
//     	FMUL.FMZ R14, R17, R14;          # [117][0003a8]
//     	FMUL.FMZ R0, R4, R2;             # [118][0003b0]
//     	FFMA.FMZ R10, R10, R17, R14;     # [119][0003b8]
//     	FMUL.FMZ R4, R5, R2;             # [120][0003c0]
//     	FMUL.FMZ R0, R11, R0;            # [121][0003c8]
//     	FMUL.FMZ R5, R6, R2;             # [122][0003d0]
//     	FFMA.FMZ R0, R0, R18, R1;        # [123][0003d8]
//     	FMUL.FMZ R2, R11, R4;            # [124][0003e0]
//     	FMUL.FMZ R4, R11, R5;            # [125][0003e8]
//     	FFMA.FMZ R1, R2, R12, R7;        # [126][0003f0]
//     	FFMA.FMZ R2, R4, R17, R10;       # [127][0003f8]
//     	EXIT;                            # [128][000400]
//     	END
//     END_SECTION
// END_SHADER
// 
