// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x1868d0f0f47419f5
//         FINGERPRINTER_HASH: 0x0000000000000000
//         UCODE_HASH: 0x9aca7e36ab82e10b
//         POOL: APP
//         VERSION: 20
//         # USES: 105
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 1
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 21
//         TEXTURE_SLOTS: 54
//         SAMPLER_SLOTS: 2
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_4_0
        dcl_immediateconstantbuffer { { 0, 0, 0, 0 } } 
        dcl_constantbuffer cb10[27].xyzw, immediateIndexed
        dcl_sampler s4, mode_default
        dcl_sampler s5, mode_default
        dcl_resource t50, texture2d, (float, float, float, float)
        dcl_resource t51, texture2d, (float, float, float, float)
        dcl_resource t53, texturelwbe, (float, float, float, float)
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_output o0.xyzw
        dcl_temps 6 
        ftoi r0.xy, v0.xyxx
        mov r0.zw, l(0, 0, 0, 0)
        ld r0.xyzw, r0.xyzw, t51.xyzw
        dp2 r0.w, r0.xyxx, r0.xyxx
        add r0.w, -r0.w, l(1.00000000)
        sqrt r0.w, |r0.w|
        lt r1.x, l(0.00000000), r0.z
        movc r1.z, r1.x, r0.w, -r0.w
        mul r2.xy, |r0.zzzz|, cb10[24].zwzz
        mad r2.zw, v0.xxxy, cb10[24].xxxy, l(0.00000000, 0.00000000, -1.00000000, -1.00000000)
        mul r2.xy, r2.zwzz, r2.xyxx
        mul r3.xyzw, r2.yyyy, cb10[13].xyzw
        mad r2.xyzw, r2.xxxx, cb10[12].xyzw, r3.xyzw
        mad r2.xyzw, |r0.zzzz|, cb10[14].xyzw, r2.xyzw
        add r2.xyzw, r2.xyzw, cb10[15].xyzw
        add r2.xyzw, -r2.xyzw, cb10[20].xyzw
        dp4 r0.z, r2.xyzw, r2.xyzw
        sqrt r0.z, r0.z
        div r2.xyz, r2.xyzx, r0.zzzz
        add r0.z, r0.z, -cb10[26].y
        mul r0.w, r0.z, cb10[26].z
        mov r1.xy, r0.xyxx
        dp3_sat r0.x, r2.xyzx, r1.xyzx
        add r0.y, -r0.x, l(1.00000000)
        mad r0.y, r0.y, cb10[22].x, cb10[22].y
        mad r0.y, r0.w, cb10[22].z, r0.y
        mad r1.w, r0.z, cb10[26].z, -r0.y
        add r0.x, r0.x, r0.x
        min r0.x, r0.x, l(1.00000000)
        mad_sat r0.y, r1.w, l(2.00000000), l(-1.00000000)
        mad r0.y, r0.y, l(2.00000000), cb10[25].z
        max r0.y, r0.y, l(0.20000000)
        mul r3.x, r0.y, cb10[25].y
        if_nz cb10[25].x
          mul r0.yz, r2.xxyx, l(0.00000000, -16.00000000, 16.00000000, 0.00000000)
          sample r4.xyzw, r0.yzyy, t50.xyzw, s4
          mad r0.yz, r4.yyzy, l(0.00000000, 2.00000000, 2.00000000, 0.00000000), l(0.00000000, -1.00000000, -1.00000000, 0.00000000)
          mul r0.yz, r3.xxxx, r0.yyzy
          mul r4.xy, r2.xyxx, l(-64.00000000, 64.00000000, 0.00000000, 0.00000000)
          sample r4.xyzw, r4.xyxx, t50.xyzw, s4
          mad r4.xy, r4.yzyy, l(2.00000000, 2.00000000, 0.00000000, 0.00000000), l(-1.00000000, -1.00000000, 0.00000000, 0.00000000)
          mul r4.xy, r3.xxxx, r4.xyxx
          mul r4.xy, r4.xyxx, l(0.33000001, 0.33000001, 0.00000000, 0.00000000)
          mad r3.xy, r0.yzyy, l(0.66000003, 0.66000003, 0.00000000, 0.00000000), r4.xyxx
        else 
          mov r3.y, l(0)
        endif 
        mov r3.z, -r3.x
        mul r1.xyz, r2.xyzx, l(-1.00000000, 1.00000000, -1.00000000, 0.00000000)
        mov r2.zw, l(0, 0, 0, 0)
        mov r0.yz, l(0, 0, 0, 0)
        loop 
          ige r0.w, r0.z, l(0xc)
          breakc_nz r0.w
          dp2 r2.x, icb[r0.z].xyxx, r3.xyxx
          dp2 r2.y, icb[r0.z].xyxx, r3.yzyy
          add r4.xyzw, r1.xyzw, r2.xyzw
          sample r5.xyzw, r4.xyzx, t53.xyzw, s5
          lt r0.w, r5.x, r4.w
          and r0.w, r0.w, l(0x3f800000)
          add r0.y, r0.w, r0.y
          iadd r0.z, r0.z, l(0x1)
        endloop 
        mul r0.y, r0.y, cb10[25].w
        add r0.z, -r1.w, l(1.00000000)
        mul r0.y, r0.y, l(0.08333334)
        mul_sat r0.z, r0.z, r0.y
        mul r0.x, r0.x, r0.z
        movc_sat o0.w, cb10[26].x, r0.y, r0.x
        mov o0.xyz, l(0, 0, 0, 0)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3aa3d70a // 0.001250
//         COP_CONST[1]: 0x3a4ccccd // 0.000781
//         COP_CONST[2]: 0xbe0a3cf5 // -0.134998
//         COP_CONST[3]: 0x362b0ff5 // 0.000003
//         COP_CONST[4]: 0xbf7da80b // -0.990845
//         COP_CONST[5]: 0x3e09faba // 0.134746
//         COP_CONST[6]: 0x3d7a8e43 // 0.061171
//         COP_CONST[7]: 0xbf7d2e6f // -0.988990
//         COP_CONST[8]: 0x3c23d70a // 0.010000
//         COP_CONST[9]: 0x3d80ce17 // 0.062893
//     END_SECTION
//     BEGIN_SECTION HLSL_CONSTANTS
//         HLSL_CONST[0]: 0xbea70542 // -0.326212
//         HLSL_CONST[1]: 0xbecfc5ac // -0.405805
//         HLSL_CONST[2]: 0x00000000 // 0.000000
//         HLSL_CONST[3]: 0x00000000 // 0.000000
//         HLSL_CONST[4]: 0xbf5713ad // -0.840144
//         HLSL_CONST[5]: 0xbd96b11c // -0.073580
//         HLSL_CONST[6]: 0x00000000 // 0.000000
//         HLSL_CONST[7]: 0x00000000 // 0.000000
//         HLSL_CONST[8]: 0xbf32276b // -0.695914
//         HLSL_CONST[9]: 0x3eea0ddc // 0.457137
//         HLSL_CONST[10]: 0x00000000 // 0.000000
//         HLSL_CONST[11]: 0x00000000 // 0.000000
//         HLSL_CONST[12]: 0xbe5039ac // -0.203345
//         HLSL_CONST[13]: 0x3f1ee73e // 0.620716
//         HLSL_CONST[14]: 0x00000000 // 0.000000
//         HLSL_CONST[15]: 0x00000000 // 0.000000
//         HLSL_CONST[16]: 0x3f765bea // 0.962340
//         HLSL_CONST[17]: 0xbe47a9a0 // -0.194983
//         HLSL_CONST[18]: 0x00000000 // 0.000000
//         HLSL_CONST[19]: 0x00000000 // 0.000000
//         HLSL_CONST[20]: 0x3ef265f1 // 0.473434
//         HLSL_CONST[21]: 0xbef5c5f8 // -0.480026
//         HLSL_CONST[22]: 0x00000000 // 0.000000
//         HLSL_CONST[23]: 0x00000000 // 0.000000
//         HLSL_CONST[24]: 0x3f04fb12 // 0.519456
//         HLSL_CONST[25]: 0x3f445b8e // 0.767022
//         HLSL_CONST[26]: 0x00000000 // 0.000000
//         HLSL_CONST[27]: 0x00000000 // 0.000000
//         HLSL_CONST[28]: 0x3e3de97d // 0.185461
//         HLSL_CONST[29]: 0xbf64a3c6 // -0.893124
//         HLSL_CONST[30]: 0x00000000 // 0.000000
//         HLSL_CONST[31]: 0x00000000 // 0.000000
//         HLSL_CONST[32]: 0x3f01e6ff // 0.507431
//         HLSL_CONST[33]: 0x3d83f141 // 0.064425
//         HLSL_CONST[34]: 0x00000000 // 0.000000
//         HLSL_CONST[35]: 0x00000000 // 0.000000
//         HLSL_CONST[36]: 0x3f657bc8 // 0.896420
//         HLSL_CONST[37]: 0x3ed32db2 // 0.412458
//         HLSL_CONST[38]: 0x00000000 // 0.000000
//         HLSL_CONST[39]: 0x00000000 // 0.000000
//         HLSL_CONST[40]: 0xbea4d552 // -0.321940
//         HLSL_CONST[41]: 0xbf6ebfdb // -0.932615
//         HLSL_CONST[42]: 0x00000000 // 0.000000
//         HLSL_CONST[43]: 0x00000000 // 0.000000
//         HLSL_CONST[44]: 0xbf4aa39c // -0.791559
//         HLSL_CONST[45]: 0xbf190332 // -0.597705
//         HLSL_CONST[46]: 0x00000000 // 0.000000
//         HLSL_CONST[47]: 0x00000000 // 0.000000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[10][48] = 0xbf7da80b // -0.990845
//         USER_CONST: c[10][49] = 0x362b0ff5 // 0.000003
//         USER_CONST: c[10][50] = 0xbe0a3cf5 // -0.134998
//         USER_CONST: c[10][51] = 0x80000000 // -0.000000
//         USER_CONST: c[10][52] = 0xbc0741cc // -0.008255
//         USER_CONST: c[10][53] = 0x3f7f8546 // 0.998127
//         USER_CONST: c[10][54] = 0x3d784375 // 0.060611
//         USER_CONST: c[10][55] = 0x80000000 // -0.000000
//         USER_CONST: c[10][56] = 0x3e09faba // 0.134746
//         USER_CONST: c[10][57] = 0x3d7a8e43 // 0.061171
//         USER_CONST: c[10][58] = 0xbf7d2e6f // -0.988990
//         USER_CONST: c[10][59] = 0x80000000 // -0.000000
//         USER_CONST: c[10][60] = 0xc233fc25 // -44.996235
//         USER_CONST: c[10][61] = 0xc0f6446b // -7.695852
//         USER_CONST: c[10][62] = 0x42cdb414 // 102.851715
//         USER_CONST: c[10][63] = 0x3f800000 // 1.000000
//         USER_CONST: c[10][80] = 0xc23e57d4 // -47.585770
//         USER_CONST: c[10][81] = 0xc0bdeadf // -5.934921
//         USER_CONST: c[10][82] = 0x42bee87d // 95.454079
//         USER_CONST: c[10][83] = 0x3f800000 // 1.000000
//         USER_CONST: c[10][88] = 0x3a83126f // 0.001000
//         USER_CONST: c[10][89] = 0x3a83126f // 0.001000
//         USER_CONST: c[10][90] = 0x3c23d70a // 0.010000
//         USER_CONST: c[10][96] = 0x3a4ccccd // 0.000781
//         USER_CONST: c[10][97] = 0x3aa3d70a // 0.001250
//         USER_CONST: c[10][98] = 0x3f52f537 // 0.824054
//         USER_CONST: c[10][99] = 0x3f03d942 // 0.515034
//         USER_CONST: c[10][101] = 0x3cb00000 // 0.021484
//         USER_CONST: c[10][102] = 0x3e4ccccd // 0.200000
//         USER_CONST: c[10][103] = 0x3f800000 // 1.000000
//         USER_CONST: c[10][105] = 0x3dcccccd // 0.100000
//         USER_CONST: c[10][106] = 0x3d80ce17 // 0.062893
//         USER_CONST: c[10][100] = 0x00000000 // 0.000000
//         USER_CONST: c[10][104] = 0x00000001 // 0.000000
//     END_SECTION
//     # Exelwtion Time: 167.361ms [3.632 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x3 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x4 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 0 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 4 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 0
//         bCanReorderHalf: 0
//         bCanReorderFloat: 0
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//                 indexableRanges: 3 :  (null 0 2037919280 120) (null 0 746008112 32) (null 0 774973548 48)
//         #numStaticConsts : 12
//         staticConsts : 0xbea70542 0xbecfc5ac 0x00000000 0x00000000 0xbf5713ad 0xbd96b11c 0x00000000 0x00000000 0xbf32276b 0x3eea0ddc 0x00000000 0x00000000 0xbe5039ac 0x3f1ee73e 0x00000000 0x00000000 0x3f765bea 0xbe47a9a0 0x00000000 0x00000000 0x3ef265f1 0xbef5c5f8 0x00000000 0x00000000 0x3f04fb12 0x3f445b8e 0x00000000 0x00000000 0x3e3de97d 0xbf64a3c6 0x00000000 0x00000000 0x3f01e6ff 0x3d83f141 0x00000000 0x00000000 0x3f657bc8 0x3ed32db2 0x00000000 0x00000000 0xbea4d552 0xbf6ebfdb 0x00000000 0x00000000 0xbf4aa39c 0xbf190332 0x00000000 0x00000000
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr (s32) r9.xy, (r) v0.xyxx  //   0 SHD
//         movu32 (u32) r9.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r9.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r9, (u32) r4106, #51, #0, 2D, LOAD  //   0 SHD
//         movr (r) r9, (r) r4105  //   0 SHD
//         dp2r (r) r9.w, (r) r9.xyxx, (r) r9.xyxx  //   0 SHD
//         addr (r) r9.w, (r) -r9.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         rsqr (r) r4106.x, (r) |r9.w|  //   0 SHD
//         rsqr (r) r4106.y, (r) |r9.w|  //   0 SHD
//         rsqr (r) r4106.z, (r) |r9.w|  //   0 SHD
//         rsqr (r) r4106.w, (r) |r9.w|  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 SHD
//         movr (r) r9.w, (r) r4107  //   0 SHD
//         set_ltr.c (s32) r10.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.x  //   0 SHD
//         movr (r) r4105, (r) r9.w  //   0 SHD
//         movr (r) r4105(EQ), (r) -r9.w  //   0 SHD
//         movr (r) r10.z, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[10][24].zwzz  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.xy, (r) |r9.z|, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[10][24].xxxy  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r11.zw, (r) v0.xxxy, (r) r4110, (r) constant(0.00000000, 0.00000000, -1.00000000, -1.00000000)  //   0 SHD
//         mulr (r) r11.xy, (r) r11.zwzz, (r) r11.xyxx  //   0 SHD
//         movr (r) r4110, (r) c[10][13]  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00825543, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.99812734, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.06061121, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12, (r) r11.y, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[10][12]  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.99084538, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00000255, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.13499816, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r11, (r) r11.x, (r) r4110, (r) r12  //   0 SHD
//         movr (r) r4110, (r) c[10][14]  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.13474551, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.06117083, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.98898977, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r11, (r) |r9.z|, (r) r4110, (r) r11  //   0 SHD
//         movr (r) r4110, (r) c[10][15]  //   0 SHD
//         movr (r) r4110.x, (r) constant(-44.99623489, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-7.69585180, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(102.85171509, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r11, (r) r11, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[10][20]  //   0 SHD
//         movr (r) r4110.x, (r) constant(-47.58576965, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-5.93492079, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(95.45407867, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r11, (r) -r11, (r) r4110  //   0 SHD
//         dp4r (r) r9.z, (r) r11, (r) r11  //   0 SHD
//         rsqr (r) r4106.x, (r) r9.z  //   0 SHD
//         rsqr (r) r4106.y, (r) r9.z  //   0 SHD
//         rsqr (r) r4106.z, (r) r9.z  //   0 SHD
//         rsqr (r) r4106.w, (r) r9.z  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.z, (r) r4105.z  //   0 SHD
//         movr (r) r9.z, (r) r4107  //   0 SHD
//         divr (r) r4108.x, (r) r11.x, (r) r9.z  //   0 SHD
//         divr (r) r4108.y, (r) r11.y, (r) r9.z  //   0 SHD
//         divr (r) r4108.z, (r) r11.z, (r) r9.z  //   0 SHD
//         movr (r) r11.xyz, (r) r4108  //   0 SHD
//         movr (r) r4110, (r) -c[10][26].y  //   0 SHD
//         movr (r) r4110.x, (r) -constant(0.10000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(0.10000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(0.10000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(0.10000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r9.z, (r) r9.z, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[10][26].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.06289309, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.06289309, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.06289309, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.06289309, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r9.w, (r) r9.z, (r) r4110  //   0 SHD
//         movu32 (u32) r10.xy, (u32) r9.xyxx  //   0 SHD
//         dp3r_sat (r) r9.x, (r) r11.xyzx, (r) r10.xyzx  //   0 SHD
//         addr (r) r9.y, (r) -r9.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[10][22].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111, (r) c[10][22].y  //   0 SHD
//         movr (r) r4111.x, (r) constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(0.00100000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.y, (r) r9.y, (r) r4110, (r) r4111  //   0 SHD
//         movr (r) r4110, (r) c[10][22].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.01000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.01000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.01000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.01000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.y, (r) r9.w, (r) r4110, (r) r9.y  //   0 SHD
//         movr (r) r4110, (r) c[10][26].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.06289309, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.06289309, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.06289309, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.06289309, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.w, (r) r9.z, (r) r4110, (r) -r9.y  //   0 SHD
//         addr (r) r9.x, (r) r9.x, (r) r9.x  //   0 SHD
//         minr (r) r9.x, (r) r9.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(3212836864, 0, 0, 0).x  //   0 SHD
//         madr_sat (r) r9.y, (r) r10.w, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         movr (r) r4111, (r) c[10][25].z  //   0 SHD
//         movr (r) r4111.x, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.y, (r) r9.y, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4111  //   0 SHD
//         maxr (r) r9.y, (r) r9.y, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[10][25].y  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02148438, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.02148438, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.02148438, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.02148438, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.x, (r) r9.y, (r) r4110  //   0 SHD
//         movs32 (s32) r4109, (s32) c[10][25].x  //   0 SHD
//         movs32 (s32) r4109.x, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4109.y, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4109.z, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4109.w, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r4109  //   0 SHD
//         ife NE.x , l0, l1  //   0 SHD
//         mulr (r) r9.yz, (r) r11.xxyx, (r) constant(0.00000000, -16.00000000, 16.00000000, 0.00000000)  //   0 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) r4106, #50, #4, 2D, AUTO  //   0 SHD
//         movr (r) r13, (r) r4105  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(0, 3212836864, 3212836864, 0)  //   0 SHD
//         madr (r) r9.yz, (r) r13.yyzy, (r) constant(0.00000000, 2.00000000, 2.00000000, 0.00000000), (r) r4105  //   0 SHD
//         mulr (r) r9.yz, (r) r12.x, (r) r9.yyzy  //   0 SHD
//         mulr (r) r13.xy, (r) r11.xyxx, (r) constant(-64.00000000, 64.00000000, 0.00000000, 0.00000000)  //   0 SHD
//         txgr (r) r4105, (r) r13.xyxx, (r) r4106, #50, #4, 2D, AUTO  //   0 SHD
//         movr (r) r13, (r) r4105  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(3212836864, 3212836864, 0, 0)  //   0 SHD
//         madr (r) r13.xy, (r) r13.yzyy, (r) constant(2.00000000, 2.00000000, 0.00000000, 0.00000000), (r) r4105  //   0 SHD
//         mulr (r) r13.xy, (r) r12.x, (r) r13.xyxx  //   0 SHD
//         mulr (r) r13.xy, (r) r13.xyxx, (r) constant(0.33000001, 0.33000001, 0.00000000, 0.00000000)  //   0 SHD
//         madr (r) r12.xy, (r) r9.yzyy, (r) constant(0.66000003, 0.66000003, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         l0:  //   0 SHD
//         movu32 (u32) r12.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         l1:  //   0 SHD
//         movr (r) r12.z, (r) -r12.x  //   0 SHD
//         mulr (r) r10.xyz, (r) r11.xyzx, (r) constant(-1.00000000, 1.00000000, -1.00000000, 0.00000000)  //   0 SHD
//         movu32 (u32) r11.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r9.yz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         rep l2  //   0 SHD
//         set_ges32.c (s32) r9.w, (s32) r9.z, (s32) constant(12, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r9.w  //   0 SHD
//         brk NE.x  //   0 SHD
//         dp2r (r) r11.x, (r) c[15][r9.z + 0].xyxx, (r) r12.xyxx  //   0 SHD
//         dp2r (r) r11.y, (r) c[15][r9.z + 0].xyxx, (r) r12.yzyy  //   0 SHD
//         addr (r) r13, (r) r10, (r) r11  //   0 SHD
//         txgr (r) r4105, (r) r13.xyzx, (r) r4106, #53, #5, LWBE, AUTO  //   0 SHD
//         movr (r) r14, (r) r4105  //   0 SHD
//         set_ltr.c (s32) r9.w, (r) r14.x, (r) r13.w  //   0 SHD
//         andu32 (u32) r9.w, (u32) r9.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r9.y, (r) r9.w, (r) r9.y  //   0 SHD
//         adds32 (s32) r9.z, (s32) r9.z, (s32) constant(1, 0, 0, 0).x  //   0 SHD
//         l2:  //   0 SHD
//         movr (r) r4110, (r) c[10][25].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r9.y, (r) r9.y, (r) r4110  //   0 SHD
//         addr (r) r9.z, (r) -r10.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r9.y, (r) r9.y, (r) constant(0.08333334, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r9.z, (r) r9.z, (r) r9.y  //   0 SHD
//         mulr (r) r9.x, (r) r9.x, (r) r9.z  //   0 SHD
//         movs32 (s32) r4109, (s32) c[10][26].x  //   0 SHD
//         movs32 (s32) r4109.x, (s32) constant(1, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4109.y, (s32) constant(1, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4109.z, (s32) constant(1, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4109.w, (s32) constant(1, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r4109  //   0 SHD
//         movr (r) r4105, (r) r9.y  //   0 SHD
//         movr (r) r4105(EQ), (r) r9.x  //   0 SHD
//         movr_sat (r) r0.w, (r) r4105  //   0 SHD
//         movu32 (u32) r0.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         ret   //   0 SHD
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[10][48] = 100.00%@-0.99084538
//                 ~c[10][49] = 100.00%@0.00000255
//                 ~c[10][50] = 100.00%@-0.13499816
//                 ~c[10][51] = 100.00%@0.00000000
//                 ~c[10][52] = 100.00%@-0.00825543
//                 ~c[10][53] = 100.00%@0.99812734
//                 ~c[10][54] = 100.00%@0.06061121
//                 ~c[10][55] = 100.00%@0.00000000
//                 ~c[10][56] = 100.00%@0.13474551
//                 ~c[10][57] = 100.00%@0.06117083
//                 ~c[10][58] = 100.00%@-0.98898977
//                 ~c[10][59] = 100.00%@0.00000000
//                 ~c[10][60] = 100.00%@-44.99623489
//                 ~c[10][61] = 100.00%@-7.69585180
//                 ~c[10][62] = 100.00%@102.85171509
//                 ~c[10][63] = 100.00%@1.00000000
//                 ~c[10][80] = 100.00%@-47.58576965
//                 ~c[10][81] = 100.00%@-5.93492079
//                 ~c[10][82] = 100.00%@95.45407867
//                 ~c[10][83] = 100.00%@1.00000000
//                 ~c[10][88] = 100.00%@0.00100000
//                 ~c[10][89] = 100.00%@0.00100000
//                 ~c[10][90] = 100.00%@0.01000000
//                 ~c[10][96] = 100.00%@0.00078125
//                 ~c[10][97] = 100.00%@0.00125000
//                 ~c[10][98] = 100.00%@0.82405418
//                 ~c[10][99] = 100.00%@0.51503384
//                 ~c[10][101] = 100.00%@0.02148438
//                 ~c[10][102] = 100.00%@0.20000000
//                 ~c[10][103] = 100.00%@1.00000000
//                 ~c[10][105] = 100.00%@0.10000000
//                 ~c[10][106] = 100.00%@0.06289309
//                 ~c[10][100] = 100.00%@0x0
//                 ~c[10][104] = 100.00%@0x1
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x100, height=0x400, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x1
//         100.00% width=0x800, height=0x200, mips=0x1, DXGI_FORMAT_BC3_UNORM_SRGB
//         TEXTURE_SLOT 0x2
//         100.00% width=0x800, height=0x200, mips=0x1, DXGI_FORMAT_BC3_UNORM_SRGB
//         TEXTURE_SLOT 0x3
//         100.00% width=0x40, height=0x40, mips=0x7, DXGI_FORMAT_B8G8R8A8_UNORM
//         TEXTURE_SLOT 0x4
//         100.00% width=0xa00, height=0x640, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x5
//         100.00% width=0x400, height=0x400, mips=0x1, DXGI_FORMAT_R16_UNORM
//         TEXTURE_SLOT 0x6
//         100.00% width=0x200, height=0x200, mips=0x1, DXGI_FORMAT_R16_UNORM
//         TEXTURE_SLOT 0x7
//         100.00% width=0xa00, height=0x640, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x8
//         100.00% width=0xa00, height=0x640, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x9
//         100.00% width=0x80, height=0x1, mips=0x1, DXGI_FORMAT_A8_UNORM
//         TEXTURE_SLOT 0xa
//         TEXTURE_SLOT 0xb
//         TEXTURE_SLOT 0xc
//         TEXTURE_SLOT 0xd
//         TEXTURE_SLOT 0xe
//         TEXTURE_SLOT 0xf
//         TEXTURE_SLOT 0x10
//         TEXTURE_SLOT 0x11
//         TEXTURE_SLOT 0x12
//         TEXTURE_SLOT 0x13
//         TEXTURE_SLOT 0x14
//         TEXTURE_SLOT 0x15
//         TEXTURE_SLOT 0x16
//         TEXTURE_SLOT 0x17
//         TEXTURE_SLOT 0x18
//         TEXTURE_SLOT 0x19
//         TEXTURE_SLOT 0x1a
//         TEXTURE_SLOT 0x1b
//         TEXTURE_SLOT 0x1c
//         TEXTURE_SLOT 0x1d
//         TEXTURE_SLOT 0x1e
//         TEXTURE_SLOT 0x1f
//         TEXTURE_SLOT 0x20
//         TEXTURE_SLOT 0x21
//         TEXTURE_SLOT 0x22
//         TEXTURE_SLOT 0x23
//         TEXTURE_SLOT 0x24
//         TEXTURE_SLOT 0x25
//         TEXTURE_SLOT 0x26
//         TEXTURE_SLOT 0x27
//         TEXTURE_SLOT 0x28
//         TEXTURE_SLOT 0x29
//         TEXTURE_SLOT 0x2a
//         TEXTURE_SLOT 0x2b
//         TEXTURE_SLOT 0x2c
//         TEXTURE_SLOT 0x2d
//         TEXTURE_SLOT 0x2e
//         TEXTURE_SLOT 0x2f
//         TEXTURE_SLOT 0x30
//         TEXTURE_SLOT 0x31
//         TEXTURE_SLOT 0x32
//         TEXTURE_SLOT 0x33
//         TEXTURE_SLOT 0x34
//         TEXTURE_SLOT 0x35
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=-340282346638528860000000000000000000000.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x1
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=-340282346638528860000000000000000000000.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE pixel
//     	IPA.PASS R6, a[0x74];            # [  0][000000] POSITION_Y
//     	IPA.PASS R5, a[0x70];            # [  1][000008] POSITION_X
//     	F2I.TRUNC R1, R6;                # [  2][000010]
//     	F2I.TRUNC R0, R5;                # [  3][000018]
//     	TLD.LZ.T R0, R0, 0x33, 2D, 0x7;  # [  4][000020]
//     	MOV32I R3, -0x40800000;          # [  5][000028]
//     	FFMA.FTZ R7, R6, c[0x10][0x0], R3; # [  6][000030]
//     	FFMA.FTZ R5, R5, c[0x10][0x4], R3; # [  7][000038]
//     	F2F R4, |R2|;                    # [  8][000040]
//     	FMUL32I.FTZ R8, R4, 0x3f03d942;  # [  9][000048]
//     	FMUL32I.FTZ R6, R4, 0x3f52f537;  # [ 10][000050]
//     	FMUL.FTZ R7, R7, R8;             # [ 11][000058]
//     	FMUL.FTZ R5, R5, R6;             # [ 12][000060]
//     	FMUL32I.FTZ R6, R7, 0xbc0741cc;  # [ 13][000068]
//     	FMUL32I.FTZ R8, R7, 0x3f7f8546;  # [ 14][000070]
//     	FMUL32I.FTZ R9, R7, 0x3d784375;  # [ 15][000078]
//     	FMUL.FTZ R10, R7, 0x80000;       # [ 16][000080]
//     	FFMA.FTZ R6, R5, c[0x10][0x10], R6; # [ 17][000088]
//     	FFMA.FTZ R7, R5, c[0x10][0xc], R8; # [ 18][000090]
//     	FFMA.FTZ R10, R5, 0x80000, R10;  # [ 19][000098]
//     	FFMA.FTZ R8, R5, c[0x10][0x8], R9; # [ 20][0000a0]
//     	FFMA.FTZ R5, R4, c[0x10][0x14], R6; # [ 21][0000a8]
//     	FFMA.FTZ R6, R4, c[0x10][0x18], R7; # [ 22][0000b0]
//     	FFMA.FTZ R7, R4, c[0x10][0x1c], R8; # [ 23][0000b8]
//     	FADD32I.FTZ R5, R5, 0xc233fc25;  # [ 24][0000c0]
//     	FFMA.FTZ R9, R4, 0x80000, R10;   # [ 25][0000c8]
//     	FADD32I.FTZ R6, R6, 0xc0f6446b;  # [ 26][0000d0]
//     	FADD32I.FTZ R4, -R5, 0xc23e57d4; # [ 27][0000d8]
//     	FADD32I.FTZ R8, R7, 0x42cdb414;  # [ 28][0000e0]
//     	FADD32I.FTZ R5, -R6, 0xc0bdeadf; # [ 29][0000e8]
//     	FMUL.FTZ R7, R4, R4;             # [ 30][0000f0]
//     	FADD.FTZ R9, R9, 1;              # [ 31][0000f8]
//     	FADD32I.FTZ R6, -R8, 0x42bee87d; # [ 32][000100]
//     	FFMA.FTZ R7, R5, R5, R7;         # [ 33][000108]
//     	FADD.FTZ R8, -R9, 1;             # [ 34][000110]
//     	FMUL.FTZ R9, R0, R0;             # [ 35][000118]
//     	FFMA.FTZ R7, R6, R6, R7;         # [ 36][000120]
//     	FFMA.FTZ R7, R8, R8, R7;         # [ 37][000128]
//     	FFMA.FTZ R8, R1, R1, R9;         # [ 38][000130]
//     	MUFU.RSQ R7, R7;                 # [ 39][000138]
//     	FADD.FTZ R9, -R8, 1;             # [ 40][000140]
//     	MUFU.RCP R8, R7;                 # [ 41][000148]
//     	MUFU.RSQ R7, |R9|;               # [ 42][000150]
//     	MUFU.RCP R9, R8;                 # [ 43][000158]
//     	MUFU.RCP R10, R7;                # [ 44][000160]
//     	FMUL.FTZ R7, R4, R9;             # [ 45][000168]
//     	FMUL.FTZ R4, R5, R9;             # [ 46][000170]
//     	F2F R11, -R10;                   # [ 47][000178]
//     	FMUL.FTZ R5, R7, R0;             # [ 48][000180]
//     	FMUL.FTZ R0, R6, R9;             # [ 49][000188]
//     	FCMP.LEU.FTZ R2, R11, R10, R2;   # [ 50][000190]
//     	FFMA.FTZ R1, R4, R1, R5;         # [ 51][000198]
//     	MOV32I R6, 0x3a83126f;           # [ 52][0001a0]
//     	F2F.FTZ R11, -R7;                # [ 53][0001a8]
//     	FFMA.FTZ.SAT R2, R0, R2, R1;     # [ 54][0001b0]
//     	FADD32I.FTZ R1, R8, -0.1;        # [ 55][0001b8]
//     	F2F.FTZ R7, -R0;                 # [ 56][0001c0]
//     	FADD.FTZ R5, -R2, 1;             # [ 57][0001c8]
//     	FMUL32I.FTZ R2, R1, 0x3d80ce17;  # [ 58][0001d0]
//     	FFMA.FTZ R5, R5, R6, R6;         # [ 59][0001d8]
//     	FFMA.FTZ R2, R2, c[0x10][0x20], R5; # [ 60][0001e0]
//     	FFMA.FTZ R5, R1, c[0x10][0x24], -R2; # [ 61][0001e8]
//     	MOV32I R2, 0x3e4ccccd;           # [ 62][0001f0]
//     	FFMA.FTZ.SAT R1, R5, 2, R3;      # [ 63][0001f8]
//     	FMUL.FTZ R3, RZ, c[0xf][0x10];   # [ 64][000200]
//     	FFMA.FTZ R1, R1, 2, R2;          # [ 65][000208]
//     	FMNMX.FTZ R1, R1, R2, !PT;       # [ 66][000210]
//     	FMUL.FTZ R2, RZ, c[0xf][0x0];    # [ 67][000218]
//     	FMUL.FTZ R6, R1, 0x3cb00;        # [ 68][000220]
//     	FMUL.FTZ R1, R6, c[0xf][0x0];    # [ 69][000228]
//     	FFMA.FTZ R2, R6, -c[0xf][0x4], R2; # [ 70][000230]
//     	FFMA.FTZ R3, R6, -c[0xf][0x14], R3; # [ 71][000238]
//     	FFMA.FTZ R1, RZ, c[0xf][0x4], R1; # [ 72][000240]
//     	FADD.FTZ R9, R4, R2;             # [ 73][000248]
//     	FADD.FTZ R8, R4, R3;             # [ 74][000250]
//     	FADD.FTZ R2, R11, R1;            # [ 75][000258]
//     	FMUL.FTZ R1, R6, c[0xf][0x10];   # [ 76][000260]
//     	FMNMX R0, |R2|, |R9|, !PT;       # [ 77][000268]
//     	FFMA.FTZ R1, RZ, c[0xf][0x14], R1; # [ 78][000270]
//     	FMNMX R0, |R7|, R0, !PT;         # [ 79][000278]
//     	FADD.FTZ R3, R11, R1;            # [ 80][000280]
//     	MUFU.RCP R10, R0;                # [ 81][000288]
//     	FMNMX R12, |R3|, |R8|, !PT;      # [ 82][000290]
//     	FMUL R0, R2, R10;                # [ 83][000298]
//     	FMUL R1, R9, R10;                # [ 84][0002a0]
//     	FMUL R2, R7, R10;                # [ 85][0002a8]
//     	FMNMX R9, |R7|, R12, !PT;        # [ 86][0002b0]
//     	TEX.NODEP.T R0, R0, 0x35, 0x5, LWBE, 0x1; # [ 87][0002b8]
//     	FMUL.FTZ R10, RZ, c[0xf][0x20];  # [ 88][0002c0]
//     	FMUL.FTZ R2, R6, c[0xf][0x20];   # [ 89][0002c8]
//     	MUFU.RCP R1, R9;                 # [ 90][0002d0]
//     	FFMA.FTZ R13, R6, -c[0xf][0x24], R10; # [ 91][0002d8]
//     	FFMA.FTZ R12, RZ, c[0xf][0x24], R2; # [ 92][0002e0]
//     	FMUL R9, R8, R1;                 # [ 93][0002e8]
//     	FMUL R8, R3, R1;                 # [ 94][0002f0]
//     	FMUL R10, R7, R1;                # [ 95][0002f8]
//     	FADD.FTZ R2, R4, R13;            # [ 96][000300]
//     	FADD.FTZ R3, R11, R12;           # [ 97][000308]
//     	TEX.NODEP.T R1, R8, 0x35, 0x5, LWBE, 0x1; # [ 98][000310]
//     	FMUL.FTZ R10, RZ, c[0xf][0x30];  # [ 99][000318]
//     	FMNMX R8, |R3|, |R2|, !PT;       # [100][000320]
//     	FMUL.FTZ R9, R6, c[0xf][0x30];   # [101][000328]
//     	FFMA.FTZ R10, R6, -c[0xf][0x34], R10; # [102][000330]
//     	FMNMX R8, |R7|, R8, !PT;         # [103][000338]
//     	FFMA.FTZ R9, RZ, c[0xf][0x34], R9; # [104][000340]
//     	FADD.FTZ R13, R4, R10;           # [105][000348]
//     	MUFU.RCP R10, R8;                # [106][000350]
//     	FADD.FTZ R12, R11, R9;           # [107][000358]
//     	FMUL R9, R2, R10;                # [108][000360]
//     	FMUL R8, R3, R10;                # [109][000368]
//     	FMNMX R14, |R12|, |R13|, !PT;    # [110][000370]
//     	FMUL R10, R7, R10;               # [111][000378]
//     	FMNMX R3, |R7|, R14, !PT;        # [112][000380]
//     	TEX.NODEP.T R2, R8, 0x35, 0x5, LWBE, 0x1; # [113][000388]
//     	FMUL.FTZ R15, RZ, c[0xf][0x40];  # [114][000390]
//     	MUFU.RCP R3, R3;                 # [115][000398]
//     	FMUL.FTZ R14, R6, c[0xf][0x40];  # [116][0003a0]
//     	FMUL R9, R13, R3;                # [117][0003a8]
//     	FMUL R8, R12, R3;                # [118][0003b0]
//     	FMUL R10, R7, R3;                # [119][0003b8]
//     	FFMA.FTZ R13, R6, -c[0xf][0x44], R15; # [120][0003c0]
//     	FFMA.FTZ R12, RZ, c[0xf][0x44], R14; # [121][0003c8]
//     	TEX.NODEP.T R3, R8, 0x35, 0x5, LWBE, 0x1; # [122][0003d0]
//     	FADD.FTZ R8, R4, R13;            # [123][0003d8]
//     	FADD.FTZ R10, R11, R12;          # [124][0003e0]
//     	FMUL.FTZ R12, R6, c[0xf][0x50];  # [125][0003e8]
//     	FMUL.FTZ R13, RZ, c[0xf][0x50];  # [126][0003f0]
//     	FMNMX R9, |R10|, |R8|, !PT;      # [127][0003f8]
//     	FFMA.FTZ R12, RZ, c[0xf][0x54], R12; # [128][000400]
//     	FFMA.FTZ R13, R6, -c[0xf][0x54], R13; # [129][000408]
//     	FMNMX R9, |R7|, R9, !PT;         # [130][000410]
//     	FADD.FTZ R14, R11, R12;          # [131][000418]
//     	FADD.FTZ R13, R4, R13;           # [132][000420]
//     	MUFU.RCP R12, R9;                # [133][000428]
//     	FMNMX R15, |R14|, |R13|, !PT;    # [134][000430]
//     	FMUL R9, R8, R12;                # [135][000438]
//     	FMUL R8, R10, R12;               # [136][000440]
//     	FMUL R10, R7, R12;               # [137][000448]
//     	FMNMX R15, |R7|, R15, !PT;       # [138][000450]
//     	TEX.NODEP.T R12, R8, 0x35, 0x5, LWBE, 0x1; # [139][000458]
//     	MUFU.RCP R10, R15;               # [140][000460]
//     	FMUL R9, R13, R10;               # [141][000468]
//     	FMUL R8, R14, R10;               # [142][000470]
//     	FMUL R10, R7, R10;               # [143][000478]
//     	TEX.NODEP.T R13, R8, 0x35, 0x5, LWBE, 0x1; # [144][000480]
//     	FMUL.FTZ R9, RZ, c[0xf][0x60];   # [145][000488]
//     	FMUL.FTZ R8, R6, c[0xf][0x60];   # [146][000490]
//     	FMUL.FTZ R15, RZ, c[0xf][0x70];  # [147][000498]
//     	FFMA.FTZ R10, R6, -c[0xf][0x64], R9; # [148][0004a0]
//     	FFMA.FTZ R9, RZ, c[0xf][0x64], R8; # [149][0004a8]
//     	FMUL.FTZ R14, R6, c[0xf][0x70];  # [150][0004b0]
//     	FADD.FTZ R8, R4, R10;            # [151][0004b8]
//     	FADD.FTZ R10, R11, R9;           # [152][0004c0]
//     	FFMA.FTZ R15, R6, -c[0xf][0x74], R15; # [153][0004c8]
//     	FFMA.FTZ R14, RZ, c[0xf][0x74], R14; # [154][0004d0]
//     	FMNMX R9, |R10|, |R8|, !PT;      # [155][0004d8]
//     	FADD.FTZ R16, R4, R15;           # [156][0004e0]
//     	FADD.FTZ R15, R11, R14;          # [157][0004e8]
//     	FMNMX R9, |R7|, R9, !PT;         # [158][0004f0]
//     	FMNMX R17, |R15|, |R16|, !PT;    # [159][0004f8]
//     	MUFU.RCP R14, R9;                # [160][000500]
//     	FMNMX R17, |R7|, R17, !PT;       # [161][000508]
//     	FMUL R9, R8, R14;                # [162][000510]
//     	FMUL R8, R10, R14;               # [163][000518]
//     	FMUL R10, R7, R14;               # [164][000520]
//     	TEX.NODEP.T R14, R8, 0x35, 0x5, LWBE, 0x1; # [165][000528]
//     	FMUL.FTZ R9, RZ, c[0xf][0x80];   # [166][000530]
//     	FMUL.FTZ R8, R6, c[0xf][0x80];   # [167][000538]
//     	MUFU.RCP R10, R17;               # [168][000540]
//     	FFMA.FTZ R18, R6, -c[0xf][0x84], R9; # [169][000548]
//     	FFMA.FTZ R17, RZ, c[0xf][0x84], R8; # [170][000550]
//     	FMUL R9, R16, R10;               # [171][000558]
//     	FMUL R8, R15, R10;               # [172][000560]
//     	FMUL R10, R7, R10;               # [173][000568]
//     	FADD.FTZ R19, R4, R18;           # [174][000570]
//     	FADD.FTZ R16, R11, R17;          # [175][000578]
//     	TEX.NODEP.T R15, R8, 0x35, 0x5, LWBE, 0x1; # [176][000580]
//     	FMUL.FTZ R10, RZ, c[0xf][0x90];  # [177][000588]
//     	FMNMX R8, |R16|, |R19|, !PT;     # [178][000590]
//     	FMUL.FTZ R9, R6, c[0xf][0x90];   # [179][000598]
//     	FFMA.FTZ R10, R6, -c[0xf][0x94], R10; # [180][0005a0]
//     	FMNMX R8, |R7|, R8, !PT;         # [181][0005a8]
//     	FFMA.FTZ R9, RZ, c[0xf][0x94], R9; # [182][0005b0]
//     	FADD.FTZ R18, R4, R10;           # [183][0005b8]
//     	MUFU.RCP R10, R8;                # [184][0005c0]
//     	FADD.FTZ R17, R11, R9;           # [185][0005c8]
//     	FMUL R9, R19, R10;               # [186][0005d0]
//     	FMUL R8, R16, R10;               # [187][0005d8]
//     	FMNMX R20, |R17|, |R18|, !PT;    # [188][0005e0]
//     	FMUL R10, R7, R10;               # [189][0005e8]
//     	FMNMX R19, |R7|, R20, !PT;       # [190][0005f0]
//     	TEX.NODEP.T R16, R8, 0x35, 0x5, LWBE, 0x1; # [191][0005f8]
//     	FMUL.FTZ R20, RZ, c[0xf][0xa0];  # [192][000600]
//     	MUFU.RCP R10, R19;               # [193][000608]
//     	FMUL.FTZ R19, R6, c[0xf][0xa0];  # [194][000610]
//     	FMUL R9, R18, R10;               # [195][000618]
//     	FMUL R8, R17, R10;               # [196][000620]
//     	FMUL R10, R7, R10;               # [197][000628]
//     	FFMA.FTZ R18, R6, -c[0xf][0xa4], R20; # [198][000630]
//     	FFMA.FTZ R19, RZ, c[0xf][0xa4], R19; # [199][000638]
//     	TEX.NODEP.T R17, R8, 0x35, 0x5, LWBE, 0x1; # [200][000640]
//     	FADD.FTZ R8, R4, R18;            # [201][000648]
//     	FADD.FTZ R10, R11, R19;          # [202][000650]
//     	FMUL.FTZ R18, RZ, c[0xf][0xb0];  # [203][000658]
//     	FMUL.FTZ R19, R6, c[0xf][0xb0];  # [204][000660]
//     	FMNMX R9, |R10|, |R8|, !PT;      # [205][000668]
//     	FFMA.FTZ R18, R6, -c[0xf][0xb4], R18; # [206][000670]
//     	FFMA.FTZ R6, RZ, c[0xf][0xb4], R19; # [207][000678]
//     	FMNMX R9, |R7|, R9, !PT;         # [208][000680]
//     	FADD.FTZ R4, R4, R18;            # [209][000688]
//     	FADD.FTZ R6, R11, R6;            # [210][000690]
//     	MUFU.RCP R18, R9;                # [211][000698]
//     	FMNMX R11, |R6|, |R4|, !PT;      # [212][0006a0]
//     	FMUL R9, R8, R18;                # [213][0006a8]
//     	FMUL R8, R10, R18;               # [214][0006b0]
//     	FMUL R10, R7, R18;               # [215][0006b8]
//     	FMNMX R18, |R7|, R11, !PT;       # [216][0006c0]
//     	TEX.NODEP.T R11, R8, 0x35, 0x5, LWBE, 0x1; # [217][0006c8]
//     	MUFU.RCP R8, R18;                # [218][0006d0]
//     	FMUL R10, R7, R8;                # [219][0006d8]
//     	FMUL R9, R4, R8;                 # [220][0006e0]
//     	FMUL R8, R6, R8;                 # [221][0006e8]
//     	TEX.NODEP.T R4, R8, 0x35, 0x5, LWBE, 0x1; # [222][0006f0]
//     	FSET.BF.LT.FTZ.AND R6, R0, R5, PT; # [223][0006f8]
//     	FSET.BF.LT.FTZ.AND R0, R1, R5, PT; # [224][000700]
//     	FADD.FTZ R1, R0, R6;             # [225][000708]
//     	FSET.BF.LT.FTZ.AND R0, R2, R5, PT; # [226][000710]
//     	MOV R2, RZ;                      # [227][000718]
//     	FADD.FTZ R1, R0, R1;             # [228][000720]
//     	FSET.BF.LT.FTZ.AND R0, R3, R5, PT; # [229][000728]
//     	FADD.FTZ R1, R0, R1;             # [230][000730]
//     	FSET.BF.LT.FTZ.AND R0, R12, R5, PT; # [231][000738]
//     	FADD.FTZ R1, R0, R1;             # [232][000740]
//     	FSET.BF.LT.FTZ.AND R0, R13, R5, PT; # [233][000748]
//     	FADD.FTZ R1, R0, R1;             # [234][000750]
//     	FSET.BF.LT.FTZ.AND R0, R14, R5, PT; # [235][000758]
//     	FADD.FTZ R1, R0, R1;             # [236][000760]
//     	FSET.BF.LT.FTZ.AND R0, R15, R5, PT; # [237][000768]
//     	FADD.FTZ R1, R0, R1;             # [238][000770]
//     	FSET.BF.LT.FTZ.AND R0, R16, R5, PT; # [239][000778]
//     	FADD.FTZ R1, R0, R1;             # [240][000780]
//     	FSET.BF.LT.FTZ.AND R0, R17, R5, PT; # [241][000788]
//     	FADD.FTZ R1, R0, R1;             # [242][000790]
//     	FSET.BF.LT.FTZ.AND R0, R11, R5, PT; # [243][000798]
//     	FADD.FTZ R1, R0, R1;             # [244][0007a0]
//     	FSET.BF.LT.FTZ.AND R0, R4, R5, PT; # [245][0007a8]
//     	FADD.FTZ R0, R0, R1;             # [246][0007b0]
//     	MOV R1, RZ;                      # [247][0007b8]
//     	FMUL32I.FTZ R3, R0, 0x3daaaaab;  # [248][0007c0]
//     	MOV R0, RZ;                      # [249][0007c8]
//     	F2F.SAT R3, R3;                  # [250][0007d0]
//     	EXIT;                            # [251][0007d8]
//     	END
//     END_SECTION
// END_SHADER
// 
