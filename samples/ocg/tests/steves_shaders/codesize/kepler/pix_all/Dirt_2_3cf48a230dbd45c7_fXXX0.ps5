// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x3cf48a230dbd45c7
//         FINGERPRINTER_HASH: 0xd2c502a8b63c9567
//         UCODE_HASH: 0x8fdd38ed2f708b48
//         POOL: APP
//         VERSION: 20
//         # USES: 317
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 1
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 21
//         TEXTURE_SLOTS: 5
//         SAMPLER_SLOTS: 5
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//             KILLS_PIXELS
//         IMAP:
//             POSITION_W
//             GENERIC01_X          PERSPECTIVE
//             GENERIC01_Y          PERSPECTIVE
//             GENERIC01_Z          PERSPECTIVE
//             GENERIC01_W          PERSPECTIVE
//             GENERIC02_X          PERSPECTIVE
//             GENERIC02_Y          PERSPECTIVE
//             GENERIC02_W          PERSPECTIVE
//             GENERIC03_X          PERSPECTIVE
//             GENERIC03_Y          PERSPECTIVE
//             GENERIC03_Z          PERSPECTIVE
//             GENERIC03_W          PERSPECTIVE
//             GENERIC04_X          PERSPECTIVE
//             GENERIC04_Y          PERSPECTIVE
//             GENERIC04_Z          PERSPECTIVE
//             GENERIC04_W          PERSPECTIVE
//             GENERIC05_X          PERSPECTIVE
//             GENERIC05_Y          PERSPECTIVE
//             GENERIC05_Z          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_5_0
        dcl_globalflags refactoringAllowed
        dcl_constantbuffer cb0[1].xyzw, immediateIndexed
        dcl_constantbuffer cb2[1].xyzw, immediateIndexed
        dcl_constantbuffer cb5[1].xyzw, immediateIndexed
        dcl_constantbuffer cb1[17].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s1, mode_default
        dcl_sampler s2, mode_default
        dcl_sampler s3, mode_default
        dcl_sampler s4, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_resource t3, texture2d, (float, float, float, float)
        dcl_resource t4, texture2d, (float, float, float, float)
        dcl_input_ps v1.xyzw, linear
        dcl_input_ps v2.xyw, linear centroid
        dcl_input_ps v3.xyzw, linear centroid
        dcl_input_ps v4.xyzw, linear centroid
        dcl_input_ps v5.xyz, linear centroid
        dcl_output o0.xyzw
        dcl_temps 6 
        sample (texture2d) (float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0
        add r1.x, r0.w, -cb5[0].x
        lt r1.x, r1.x, l(0.00000000)
        discard_sat r1.x
        dp3 r1.x, v5.xyzx, v5.xyzx
        rsq r1.y, r1.x
        mad_sat r1.x, r1.x, cb1[15].z, cb1[15].w
        mul r1.yzw, r1.yyyy, v5.xxyz
        dp3 r2.x, v3.xyzx, v3.xyzx
        rsq r2.x, r2.x
        mul r2.yzw, r2.xxxx, v3.xxyz
        mad r2.x, v3.y, r2.x, l(0.30000001)
        mul_sat r2.x, r2.x, l(0.76923078)
        mul r3.xyz, r2.xxxx, cb1[2].xyzx
        dp3 r2.x, r1.yzwy, r2.yzwy
        add r2.x, r2.x, r2.x
        mad r1.yzw, r2.yyzw, -r2.xxxx, r1.yyzw
        dp3 r2.x, r2.yzwy, cb1[0].xyzx
        dp3_sat r1.y, r1.yzwy, cb1[6].xyzx
        log r1.y, r1.y
        add r1.z, -cb1[5].x, cb1[5].y
        sample (texture2d) (float,float,float,float) r2.yz, v4.xyxx, t1.zxyw, s1
        mad r1.z, r2.z, r1.z, cb1[5].x
        mul r1.w, r2.y, cb1[5].z
        mul r1.y, r1.y, r1.z
        exp r1.y, r1.y
        mul r2.yzw, r1.yyyy, cb1[7].xxyz
        sample (texture2d) (float,float,float,float) r1.yz, v4.zwzz, t2.zxyw, s2
        add r1.z, r1.z, l(-1.00000000)
        mad r1.z, cb1[3].z, r1.z, l(1.00000000)
        mul r1.w, r1.z, r1.w
        mul r2.yzw, r1.wwww, r2.yyzw
        lt r1.w, l(0.50000000), cb0[0].z
        movc r1.y, r1.w, r1.y, v3.w
        mul r4.xy, cb2[0].zwzz, cb1[16].xxxx
        add r5.y, -v2.y, v2.w
        mov r5.x, v2.x
        mad r4.xy, v2.wwww, r4.xyxx, r5.xyxx
        div r4.zw, r5.xxxy, v2.wwww
        sample (texture2d) (float,float,float,float) r1.w, r4.zwzz, t4.yzwx, s4
        div r4.xy, r4.xyxx, v2.wwww
        sample (texture2d) (float,float,float,float) r4.xyzw, r4.xyxx, t3.xyzw, s3
        add r1.y, r1.y, -r4.x
        mad r1.x, r1.x, r1.y, r4.x
        mul r4.xyz, r4.yzwy, cb1[16].wwww
        mul r2.yzw, r1.xxxx, r2.yyzw
        add r1.x, r1.x, l(-1.00000000)
        mad r1.x, cb1[1].w, r1.x, l(1.00000000)
        mov_sat r1.y, r2.x
        add r2.x, -r2.x, l(0.30000001)
        mul_sat r2.x, r2.x, l(0.76923078)
        mad r3.xyz, cb1[4].xyzx, r2.xxxx, r3.xyzx
        add r3.xyz, r3.xyzx, cb1[14].xyzx
        mul r5.xyz, r1.yyyy, cb1[1].xyzx
        mad r4.xyz, r5.xyzx, r1.xxxx, r4.xyzx
        add r3.xyz, r3.xyzx, r4.xyzx
        mul r1.xyz, r1.zzzz, r3.xyzx
        mad r0.xyz, r0.xyzx, r1.xyzx, r2.yzwy
        mov_sat o0.w, r0.w
        mul r0.xyz, r1.wwww, r0.xyzx
        mad r0.xyz, r0.xyzx, v1.wwww, v1.xyzx
        max o0.xyz, r0.xyzx, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3a81f658 // 0.000992
//         COP_CONST[1]: 0x3e99999a // 0.300000
//         COP_CONST[2]: 0x3f2b4c25 // 0.669131
//         COP_CONST[3]: 0xbf2efdd4 // -0.683561
//         COP_CONST[4]: 0x3f4f1aa0 // 0.809000
//         COP_CONST[5]: 0x39da740e // 0.000417
//         COP_CONST[6]: 0x39888889 // 0.000260
//         COP_CONST[7]: 0x3f6e5604 // 0.931000
//         COP_CONST[8]: 0x3efafafc // 0.490196
//         COP_CONST[9]: 0x3ebebebf // 0.372549
//         COP_CONST[10]: 0x3e64e4e6 // 0.223529
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][2] = 0x00000000 // 0.000000
//         USER_CONST: c[1][0] = 0xbe9547cd // -0.291563
//         USER_CONST: c[1][1] = 0x3f2b4c25 // 0.669131
//         USER_CONST: c[1][2] = 0xbf2efdd4 // -0.683561
//         USER_CONST: c[1][4] = 0x402ba788 // 2.682100
//         USER_CONST: c[1][5] = 0x3fda1a22 // 1.703923
//         USER_CONST: c[1][6] = 0x3f2f052b // 0.683673
//         USER_CONST: c[1][7] = 0x3f6e5604 // 0.931000
//         USER_CONST: c[1][8] = 0x3f0d8d8e // 0.552941
//         USER_CONST: c[1][9] = 0x3f21a1a2 // 0.631373
//         USER_CONST: c[1][10] = 0x3f41c1c3 // 0.756863
//         USER_CONST: c[1][14] = 0x3f4f1aa0 // 0.809000
//         USER_CONST: c[1][16] = 0x3efafafc // 0.490196
//         USER_CONST: c[1][17] = 0x3ebebebf // 0.372549
//         USER_CONST: c[1][18] = 0x3e64e4e6 // 0.223529
//         USER_CONST: c[1][20] = 0x40000000 // 2.000000
//         USER_CONST: c[1][21] = 0x42c80000 // 100.000000
//         USER_CONST: c[1][22] = 0x3f853f7d // 1.041000
//         USER_CONST: c[1][24] = 0xbe9547cd // -0.291563
//         USER_CONST: c[1][25] = 0x3f2b4c25 // 0.669131
//         USER_CONST: c[1][26] = 0xbf2efdd4 // -0.683561
//         USER_CONST: c[1][28] = 0x40c683d0 // 6.203590
//         USER_CONST: c[1][29] = 0x407c3b0e // 3.941104
//         USER_CONST: c[1][30] = 0x3fca6847 // 1.581307
//         USER_CONST: c[1][56] = 0x3e989899 // 0.298039
//         USER_CONST: c[1][57] = 0x3ebababb // 0.364706
//         USER_CONST: c[1][58] = 0x3f0a8a8b // 0.541176
//         USER_CONST: c[1][62] = 0x3a81f658 // 0.000992
//         USER_CONST: c[1][63] = 0xbe91ef1c // -0.285027
//         USER_CONST: c[1][64] = 0x3f000000 // 0.500000
//         USER_CONST: c[1][67] = 0x00000000 // 0.000000
//         USER_CONST: c[2][2] = 0x3a088889 // 0.000521
//         USER_CONST: c[2][3] = 0x3a5a740e // 0.000833
//         USER_CONST: c[5][0] = 0x3f000000 // 0.500000
//     END_SECTION
//     # Exelwtion Time: 13.106ms [0.631 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x1 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x24 0 1 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 0 "ATTR00" 32)
//         (0x0 0 4 "ATTR01" 36)
//         (0x8 0 4 "ATTR02" 40)
//         (0x8 0 4 "ATTR03" 44)
//         (0x8 0 4 "ATTR04" 48)
//         (0x8 0 3 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 4 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//                 indexableRanges: 5 :  (null 0 1 0) (null 0 0 1) (null 0 0 0) (null 0 0 3) (null 0 1 0)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         txgr (r) r4105, (r) v12.xyxx, (r) r4106, #0, #0, 2D, AUTO  //   0 SHD
//         movr (r) r9, (r) r4105  //   0 SHD
//         movr (r) r4107, (r) -c[5][0].x  //   0 SHD
//         movr (r) r4107.x, (r) -constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         movr (r) r4107.y, (r) -constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.z, (r) -constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //  55 SHDOPT
//         movr (r) r4107.w, (r) -constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  // 255 SHD
//         addr (r) r10.x, (r) r9.w, (r) r4107  // 50462976 SHDOPT
//         set_ltr.c (s32) r10.x, (r) r10.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movs32.c (s32) hc, (s32) r10.x  //   0 SHD
//         kil NE.x  //   0 SHD
//         dp3r (r) r10.x, (r) v13.xyzx, (r) v13.xyzx  //   0 SHD
//         rsqr (r) r4105.y, (r) r10.x  //   0 SHD
//         movr (r) r10.y, (r) r4105  // 208 FPB0
//         movr (r) r4107, (r) c[1][15].z  // 208 FPB0
//         movr (r) r4107.x, (r) constant(0.00099153, 0.00000000, 0.00000000, 0.00000000).x  // 208 FPB0
//         movr (r) r4107.y, (r) constant(0.00099153, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.z, (r) constant(0.00099153, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(0.00099153, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         movr (r) r4108, (r) c[1][15].w  //   2 SHDOPT
//         movr (r) r4108.x, (r) constant(-0.28502738, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(-0.28502738, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(-0.28502738, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(-0.28502738, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHDOPT
//         madr_sat (r) r10.x, (r) r10.x, (r) r4107, (r) r4108  // 50462976 SHDOPT
//         mulr (r) r10.yzw, (r) r10.y, (r) v13.xxyz  //   0 SHD
//         dp3r (r) r11.x, (r) v11.xyzx, (r) v11.xyzx  //   0 SHD
//         rsqr (r) r4105.x, (r) r11.x  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         mulr (r) r11.yzw, (r) r11.x, (r) v11.xxyz  //   0 SHD
//         madr (r) r11.x, (r) v11.y, (r) r11.x, (r) constant(0.30000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r11.x, (r) r11.x, (r) constant(0.76923078, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107, (r) c[1][2].xyzx  //   0 SHD
//         movr (r) r4107.x, (r) constant(0.55294120, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.y, (r) constant(0.63137257, 0.00000000, 0.00000000, 0.00000000).x  // 141798064 SHD
//         movr (r) r4107.z, (r) constant(0.75686282, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(0.55294120, 0.00000000, 0.00000000, 0.00000000).x  //  39 
//         mulr (r) r12.xyz, (r) r11.x, (r) r4107  // 50462976 
//         dp3r (r) r11.x, (r) r10.yzwy, (r) r11.yzwy  //  36 SHD
//         addr (r) r11.x, (r) r11.x, (r) r11.x  //  36 SHD
//         madr (r) r10.yzw, (r) r11.yyzw, (r) -r11.x, (r) r10.yyzw  //  36 SHD
//         movr (r) r4107, (r) c[1][0].xyzx  //   0 SHD
//         movr (r) r4107.x, (r) constant(-0.29156342, 0.00000000, 0.00000000, 0.00000000).x  // 81838184 SHD
//         movr (r) r4107.y, (r) constant(0.66913062, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHD
//         movr (r) r4107.z, (r) constant(-0.68356061, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(-0.29156342, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r11.x, (r) r11.yzwy, (r) r4107  //   0 SHD
//         movr (r) r4107, (r) c[1][6].xyzx  //   0 SHD
//         movr (r) r4107.x, (r) constant(-0.29156342, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.y, (r) constant(0.66913062, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.z, (r) constant(-0.68356061, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(-0.29156342, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r_sat (r) r10.y, (r) r10.yzwy, (r) r4107  //  25 SHDOPT
//         lg2r (r) r4105.y, (r) r10.y  //   0 SHD
//         movr (r) r10.y, (r) r4105  //   0 SHD
//         movr (r) r4106, (r) -c[1][5].x  //   0 SHD
//         movr (r) r4106.x, (r) -constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106.y, (r) -constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106.z, (r) -constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  10 SHD
//         movr (r) r4106.w, (r) -constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107, (r) c[1][5].y  //   0 SHD
//         movr (r) r4107.x, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.y, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.z, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r10.z, (r) r4106, (r) r4107  //   0 SHD
//         txgr (r) r4105, (r) v12.xyxx, (r) r4106, #1, #1, 2D, AUTO  //   0 SHD
//         movr (r) r11.yz, (r) r4105.zxyw  //   0 SHDOPT
//         movr (r) r4108, (r) c[1][5].x  //   0 SHDOPT
//         movr (r) r4108.x, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 255 SHD
//         movr (r) r4108.y, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.z, (r) r11.z, (r) r10.z, (r) r4108  //   0 SHD
//         movr (r) r4107, (r) c[1][5].z  //   0 SHD
//         movr (r) r4107.x, (r) constant(1.04100001, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHDOPT
//         movr (r) r4107.y, (r) constant(1.04100001, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHDOPT
//         movr (r) r4107.z, (r) constant(1.04100001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(1.04100001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r10.w, (r) r11.y, (r) r4107  //   0 SHD
//         mulr (r) r10.y, (r) r10.y, (r) r10.z  //   3 SHD
//         ex2r (r) r4105.y, (r) r10.y  // 50462976 
//         movr (r) r10.y, (r) r4105  // 50462976 
//         movr (r) r4107, (r) c[1][7].xxyz  // 50462976 
//         movr (r) r4107.x, (r) constant(6.20359039, 0.00000000, 0.00000000, 0.00000000).x  // 141722752 SHD
//         movr (r) r4107.y, (r) constant(6.20359039, 0.00000000, 0.00000000, 0.00000000).x  // 141722752 SHD
//         movr (r) r4107.z, (r) constant(3.94110441, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(1.58130729, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.yzw, (r) r10.y, (r) r4107  //   0 SHD
//         txgr (r) r4105, (r) v12.zwzz, (r) r4106, #2, #2, 2D, AUTO  //   0 SHD
//         movr (r) r10.yz, (r) r4105.zxyw  //   0 SHD
//         addr (r) r10.z, (r) r10.z, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106, (r) c[1][3].z  // 50462976 
//         movr (r) r4106.x, (r) constant(0.80900002, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 
//         movr (r) r4106.y, (r) constant(0.80900002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106.z, (r) constant(0.80900002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106.w, (r) constant(0.80900002, 0.00000000, 0.00000000, 0.00000000).x  // 81835096 SHD
//         madr (r) r10.z, (r) r4106, (r) r10.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 81835096 SHD
//         mulr (r) r10.w, (r) r10.z, (r) r10.w  // 81835096 SHD
//         mulr (r) r11.yzw, (r) r10.w, (r) r11.yyzw  // 81835096 SHD
//         movr (r) r4107, (r) c[0][0].z  // 81835096 SHD
//         movr (r) r4107.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 81835096 SHD
//         movr (r) r4107.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         set_ltr.c (s32) r10.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4107  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.w  //   0 SHD
//         movr (r) r4105, (r) r10.y  //   0 SHD
//         movr (r) r4105(EQ), (r) v11.w  //   0 SHD
//         movr (r) r10.y, (r) r4105  //   0 SHD
//         movr (r) r4106, (r) c[2][0].zwzz  // 255 SHD
//         movr (r) r4106.x, (r) constant(0.00052083, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHDOPT
//         movr (r) r4106.y, (r) constant(0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHDOPT
//         movr (r) r4106.z, (r) constant(0.00052083, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHDOPT
//         movr (r) r4106.w, (r) constant(0.00052083, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHDOPT
//         movr (r) r4107, (r) c[1][16].x  // 50462976 SHDOPT
//         movr (r) r4107.x, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHDOPT
//         movr (r) r4107.y, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.z, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xy, (r) r4106, (r) r4107  //   0 SHD
//         addr (r) r14.y, (r) -v10.y, (r) v10.w  //   0 SHD
//         movu32 (u32) r14.x, (u32) v10.x  //  91 
//         madr (r) r13.xy, (r) v10.w, (r) r13.xyxx, (r) r14.xyxx  //  91 
//         divr (r) r4105.z, (r) r14.x, (r) v10.w  // 50462976 
//         divr (r) r4105.w, (r) r14.y, (r) v10.w  // 50462976 
//         movr (r) r13.zw, (r) r4105  // 50462976 
//         txgr (r) r4105, (r) r13.zwzz, (r) r4106, #4, #4, 2D, AUTO  // 50462976 
//         movr (r) r10.w, (r) r4105.yzwx  //   0 SHD
//         divr (r) r4105.x, (r) r13.x, (r) v10.w  //   0 SHD
//         divr (r) r4105.y, (r) r13.y, (r) v10.w  //   0 SHD
//         movr (r) r13.xy, (r) r4105  // 81829320 SHD
//         txgr (r) r4105, (r) r13.xyxx, (r) r4106, #3, #3, 2D, AUTO  // 81829320 SHD
//         movr (r) r13, (r) r4105  // 81829320 SHD
//         addr (r) r10.y, (r) r10.y, (r) -r13.x  //   0 SHD
//         madr (r) r10.x, (r) r10.x, (r) r10.y, (r) r13.x  //   0 SHD
//         movr (r) r4107, (r) c[1][16].w  //   0 SHD
//         movr (r) r4107.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         movr (r) r4107.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         movr (r) r4107.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xyz, (r) r13.yzwy, (r) r4107  //   0 SHD
//         mulr (r) r11.yzw, (r) r10.x, (r) r11.yyzw  //   0 SHD
//         addr (r) r10.x, (r) r10.x, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106, (r) c[1][1].w  //   0 SHD
//         movr (r) r4106.x, (r) constant(0.93099999, 0.00000000, 0.00000000, 0.00000000).x  // 255 SHD
//         movr (r) r4106.y, (r) constant(0.93099999, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHDOPT
//         movr (r) r4106.z, (r) constant(0.93099999, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106.w, (r) constant(0.93099999, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.x, (r) r4106, (r) r10.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr_sat (r) r10.y, (r) r11.x  //   0 SHD
//         addr (r) r11.x, (r) -r11.x, (r) constant(0.30000001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r11.x, (r) r11.x, (r) constant(0.76923078, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106, (r) c[1][4].xyzx  //   0 SHD
//         movr (r) r4106.x, (r) constant(0.49019611, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106.y, (r) constant(0.37254903, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106.z, (r) constant(0.22352943, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4106.w, (r) constant(0.49019611, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12.xyz, (r) r4106, (r) r11.x, (r) r12.xyzx  //   0 SHD
//         movr (r) r4107, (r) c[1][14].xyzx  //   0 SHD
//         movr (r) r4107.x, (r) constant(0.29803923, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.y, (r) constant(0.36470589, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.z, (r) constant(0.54117650, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(0.29803923, 0.00000000, 0.00000000, 0.00000000).x  //  74 
//         addr (r) r12.xyz, (r) r12.xyzx, (r) r4107  // 50462976 
//         movr (r) r4107, (r) c[1][1].xyzx  //  70 SHD
//         movr (r) r4107.x, (r) constant(2.68210030, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.y, (r) constant(1.70392251, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.z, (r) constant(0.68367261, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4107.w, (r) constant(2.68210030, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.xyz, (r) r10.y, (r) r4107  //   0 SHD
//         madr (r) r13.xyz, (r) r14.xyzx, (r) r10.x, (r) r13.xyzx  //   0 SHD
//         addr (r) r12.xyz, (r) r12.xyzx, (r) r13.xyzx  //   0 SHD
//         mulr (r) r10.xyz, (r) r10.z, (r) r12.xyzx  //   0 SHD
//         madr (r) r9.xyz, (r) r9.xyzx, (r) r10.xyzx, (r) r11.yzwy  //   0 SHD
//         movr_sat (r) r0.w, (r) r9.w  //   0 SHD
//         mulr (r) r9.xyz, (r) r10.w, (r) r9.xyzx  //   0 SHD
//         madr (r) r9.xyz, (r) r9.xyzx, (r) v9.w, (r) v9.xyzx  //   0 SHD
//         maxr (r) r0.xyz, (r) r9.xyzx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)  //   0 SHD
//         ret   //   0 SHD
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][2] = 100.00%@0.00000000
//                 ~c[1][0] = 100.00%@-0.29156342
//                 ~c[1][1] = 100.00%@0.66913062
//                 ~c[1][2] = 100.00%@-0.68356061
//                 ~c[1][4] = 100.00%@2.68210030
//                 ~c[1][5] = 100.00%@1.70392251
//                 ~c[1][6] = 100.00%@0.68367261
//                 ~c[1][7] = 100.00%@0.93099999
//                 ~c[1][8] = 100.00%@0.55294120
//                 ~c[1][9] = 100.00%@0.63137257
//                 ~c[1][10] = 100.00%@0.75686282
//                 ~c[1][14] = 100.00%@0.80900002
//                 ~c[1][16] = 100.00%@0.49019611
//                 ~c[1][17] = 100.00%@0.37254903
//                 ~c[1][18] = 100.00%@0.22352943
//                 ~c[1][20] = 100.00%@2.00000000
//                 ~c[1][21] = 100.00%@100.00000000
//                 ~c[1][22] = 100.00%@1.04100001
//                 ~c[1][24] = 100.00%@-0.29156342
//                 ~c[1][25] = 100.00%@0.66913062
//                 ~c[1][26] = 100.00%@-0.68356061
//                 ~c[1][28] = 100.00%@6.20359039
//                 ~c[1][29] = 100.00%@3.94110441
//                 ~c[1][30] = 100.00%@1.58130729
//                 ~c[1][56] = 100.00%@0.29803923
//                 ~c[1][57] = 100.00%@0.36470589
//                 ~c[1][58] = 100.00%@0.54117650
//                 ~c[1][62] = 100.00%@0.00099153
//                 ~c[1][63] = 100.00%@-0.28502738
//                 ~c[1][64] = 100.00%@0.50000000
//                 ~c[1][67] = 100.00%@0.00000000
//                 ~c[2][2] = 100.00%@0.00052083
//                 ~c[2][3] = 100.00%@0.00083333
//                 ~c[5][0] = 100.00%@0.50000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         66.56% width=0x100, height=0x100, mips=0x7, DXGI_FORMAT_BC1_UNORM
//         33.44% width=0x200, height=0x80, mips=0x6, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x1
//         100.00% width=0x100, height=0x100, mips=0x7, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x2
//         66.88% width=0x100, height=0x100, mips=0x7, DXGI_FORMAT_BC1_UNORM
//         33.12% width=0x80, height=0x80, mips=0x6, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x3
//         100.00% width=0x780, height=0x4b0, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x4
//         100.00% width=0x3c0, height=0x258, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         66.56%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=7.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         33.44%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=6.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x1
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=4, minLOD=0.000000, maxLOD=7.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x2
//         66.88%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=7.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         33.12%  min=Linear, mag=Linear, mip=Linear aniso=1, minLOD=0.000000, maxLOD=6.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x3
//         100.00%  min=Linear, mag=Linear, mip=Point aniso=1, minLOD=0.000000, maxLOD=1.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=WRAP
//         SAMPLER_SLOT 0x4
//         100.00%  min=Linear, mag=Linear, mip=Point aniso=1, minLOD=0.000000, maxLOD=1.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=WRAP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	IPA.PASS.CENTROID R0, a[0x7c];   # [  0][000000] POSITION_W
//     	MUFU.RCP R15, R0;                # [  1][000008]
//     	IPA.CENTROID R5, a[0xc4], R15;   # [  2][000010] GENERIC_ATTRIBUTE_04_Y
//     	IPA.CENTROID R4, a[0xc0], R15;   # [  3][000018] ATTR4
//     	TEX.NODEP.P R0, R4, 0x0, 0x0, 2D; # [  4][000020]
//     	FSETP.GT.FTZ.AND P0, PT, -R3, -0.5, PT; # [  5][000028]
//     	@P0 KIL;                         # [  6][000030]
//     	TEX.NODEP.P R10, R4, 0x1, 0x1, 2D, 0x3; # [  7][000038]
//     	F2F.SAT R3, R3;                  # [  8][000040]
//     	IPA.CENTROID R12, a[0xd0], R15;  # [  9][000048] ATTR5
//     	FMUL.FTZ R8, R12, R12;           # [ 10][000050]
//     	IPA.CENTROID R9, a[0xb0], R15;   # [ 11][000058] ATTR3
//     	FMUL.FTZ R6, R9, R9;             # [ 12][000060]
//     	IPA.CENTROID R7, a[0xd4], R15;   # [ 13][000068] GENERIC_ATTRIBUTE_05_Y
//     	FFMA.FTZ R14, R7, R7, R8;        # [ 14][000070]
//     	IPA.CENTROID R13, a[0xb4], R15;  # [ 15][000078] GENERIC_ATTRIBUTE_03_Y
//     	FFMA.FTZ R8, R13, R13, R6;       # [ 16][000080]
//     	IPA.CENTROID R5, a[0xd8], R15;   # [ 17][000088] GENERIC_ATTRIBUTE_05_Z
//     	FFMA.FTZ R6, R5, R5, R14;        # [ 18][000090]
//     	IPA.CENTROID R4, a[0xb8], R15;   # [ 19][000098] GENERIC_ATTRIBUTE_03_Z
//     	MUFU.RSQ R16, R6;                # [ 20][0000a0]
//     	FFMA.FTZ R8, R4, R4, R8;         # [ 21][0000a8]
//     	MUFU.RSQ R17, R8;                # [ 22][0000b0]
//     	FMUL.FTZ R7, R16, R7;            # [ 23][0000b8]
//     	FMUL.FTZ R8, R16, R12;           # [ 24][0000c0]
//     	FMUL.FTZ R14, R17, R9;           # [ 25][0000c8]
//     	FMUL.FTZ R12, R17, R13;          # [ 26][0000d0]
//     	FMUL.FTZ R9, R16, R5;            # [ 27][0000d8]
//     	FMUL.FTZ R18, R8, R14;           # [ 28][0000e0]
//     	FMUL.FTZ R16, R17, R4;           # [ 29][0000e8]
//     	FFMA.FTZ R4, R7, R12, R18;       # [ 30][0000f0]
//     	IPA.CENTROID R5, a[0xcc], R15;   # [ 31][0000f8] GENERIC_ATTRIBUTE_04_W
//     	FFMA.FTZ R4, R9, R16, R4;        # [ 32][000100]
//     	FADD.FTZ R4, R4, R4;             # [ 33][000108]
//     	FFMA.FTZ R18, R14, -R4, R8;      # [ 34][000110]
//     	FFMA.FTZ R19, R16, -R4, R9;      # [ 35][000118]
//     	FFMA.FTZ R8, R12, -R4, R7;       # [ 36][000120]
//     	FMUL32I.FTZ R20, R18, 0xbe9547cd; # [ 37][000128]
//     	FFMA.FTZ R20, R8, c[0x10][0x8], R20; # [ 38][000130]
//     	IPA.CENTROID R4, a[0xc8], R15;   # [ 39][000138] GENERIC_ATTRIBUTE_04_Z
//     	MOV32I R18, -0x416e10e4;         # [ 40][000140]
//     	IPA.CENTROID R7, a[0xac], R15;   # [ 41][000148] GENERIC_ATTRIBUTE_02_W
//     	FFMA.FTZ.SAT R19, R19, c[0x10][0xc], R20; # [ 42][000150]
//     	IPA.CENTROID R9, a[0xa4], R15;   # [ 43][000158] GENERIC_ATTRIBUTE_02_Y
//     	FFMA.FTZ.SAT R18, R6, c[0x10][0x0], R18; # [ 44][000160]
//     	IPA.CENTROID R8, a[0xa0], R15;   # [ 45][000168] ATTR2
//     	MOV32I R6, 0x40000000;           # [ 46][000170]
//     	TEX.NODEP.P R20, R4, 0x2, 0x2, 2D, 0x2; # [ 47][000178]
//     	MUFU.RCP R5, R7;                 # [ 48][000180]
//     	FADD.FTZ R9, -R9, R7;            # [ 49][000188]
//     	FFMA.FTZ R4, R7, c[0x10][0x18], R8; # [ 50][000190]
//     	FMUL32I.FTZ R14, R14, 0xbe9547cd; # [ 51][000198]
//     	FFMA.FTZ R7, R7, c[0x10][0x14], R9; # [ 52][0001a0]
//     	FMUL.FTZ R8, R8, R5;             # [ 53][0001a8]
//     	FMUL.FTZ R9, R9, R5;             # [ 54][0001b0]
//     	FMUL.FTZ R4, R4, R5;             # [ 55][0001b8]
//     	FMUL.FTZ R5, R7, R5;             # [ 56][0001c0]
//     	FFMA.FTZ R11, R11, 98, R6;       # [ 57][0001c8]
//     	MUFU.LG2 R19, R19;               # [ 58][0001d0]
//     	TEX.NODEP.T R4, R4, 0x3, 0x3, 2D; # [ 59][0001d8]
//     	TEX.NODEP.P R8, R8, 0x4, 0x4, 2D, 0x1; # [ 60][0001e0]
//     	FFMA.FTZ R9, R13, R17, c[0x10][0x4]; # [ 61][0001e8]
//     	FFMA.FTZ R12, R12, c[0x10][0x8], R14; # [ 62][0001f0]
//     	IPA.CENTROID R13, a[0xbc], R15;  # [ 63][0001f8] GENERIC_ATTRIBUTE_03_W
//     	FMUL.FTZ R14, R19, R11;          # [ 64][000200]
//     	MOV32I R15, 0x3f800000;          # [ 65][000208]
//     	FFMA.FTZ R11, R16, c[0x10][0xc], R12; # [ 66][000210]
//     	FMUL32I.FTZ R17, R10, 1.041;     # [ 67][000218]
//     	RRO.EX2 R12, R14;                # [ 68][000220]
//     	FMUL32I.FTZ.SAT R9, R9, 0x3f44ec4f; # [ 69][000228]
//     	MUFU.EX2 R12, R12;               # [ 70][000230]
//     	IPA.PASS R14, a[0x7c];           # [ 71][000238] POSITION_W
//     	MUFU.RCP R14, R14;               # [ 72][000240]
//     	FADD.FTZ R16, R20, -1;           # [ 73][000248]
//     	FFMA.FTZ R10, R16, c[0x10][0x10], R15; # [ 74][000250]
//     	FADD.FTZ R13, R13, -R4;          # [ 75][000258]
//     	FFMA.FTZ R16, R18, R13, R4;      # [ 76][000260]
//     	FMUL.FTZ R6, R6, RZ;             # [ 77][000268]
//     	FMUL32I.FTZ R18, R12, 0x3fca6847; # [ 78][000270]
//     	FMUL.FTZ R4, R10, R17;           # [ 79][000278]
//     	FMUL32I.FTZ R13, R12, 0x407c3b0e; # [ 80][000280]
//     	FMUL.FTZ R18, R4, R18;           # [ 81][000288]
//     	FMUL32I.FTZ R12, R12, 0x40c683d0; # [ 82][000290]
//     	FMUL.FTZ R17, R4, R13;           # [ 83][000298]
//     	FMUL.FTZ R4, R4, R12;            # [ 84][0002a0]
//     	FMUL.FTZ R13, R16, R18;          # [ 85][0002a8]
//     	FMUL.FTZ R12, R16, R17;          # [ 86][0002b0]
//     	FMUL.FTZ R4, R16, R4;            # [ 87][0002b8]
//     	FADD.FTZ R17, R16, -1;           # [ 88][0002c0]
//     	FMUL.FTZ R5, R5, RZ;             # [ 89][0002c8]
//     	F2F.SAT R16, R11;                # [ 90][0002d0]
//     	FFMA.FTZ R15, R17, c[0x10][0x1c], R15; # [ 91][0002d8]
//     	FMUL32I.FTZ R18, R16, 0x3fda1a22; # [ 92][0002e0]
//     	FADD32I.FTZ R17, -R11, 0.3;      # [ 93][0002e8]
//     	FMUL32I.FTZ R11, R16, 0x3f2f052b; # [ 94][0002f0]
//     	FFMA.FTZ R6, R18, R15, R6;       # [ 95][0002f8]
//     	FMUL.FTZ R18, R7, RZ;            # [ 96][000300]
//     	FMUL32I.FTZ R7, R16, 0x402ba788; # [ 97][000308]
//     	FFMA.FTZ R11, R11, R15, R18;     # [ 98][000310]
//     	FMUL32I.FTZ R18, R9, 0x3f41c1c3; # [ 99][000318]
//     	FMUL32I.FTZ.SAT R16, R17, 0x3f44ec4f; # [100][000320]
//     	FFMA.FTZ R5, R7, R15, R5;        # [101][000328]
//     	FFMA.FTZ R17, R16, c[0x10][0x28], R18; # [102][000330]
//     	FMUL32I.FTZ R15, R9, 0x3f0d8d8e; # [103][000338]
//     	FMUL32I.FTZ R9, R9, 0x3f21a1a2;  # [104][000340]
//     	FADD32I.FTZ R18, R17, 0x3f0a8a8b; # [105][000348]
//     	FFMA.FTZ R15, R16, c[0x10][0x20], R15; # [106][000350]
//     	FFMA.FTZ R17, R16, c[0x10][0x24], R9; # [107][000358]
//     	FADD32I.FTZ R17, R17, 0x3ebababb; # [108][000360]
//     	FADD32I.FTZ R15, R15, 0x3e989899; # [109][000368]
//     	FADD.FTZ R16, R18, R11;          # [110][000370]
//     	FADD.FTZ R6, R17, R6;            # [111][000378]
//     	FADD.FTZ R5, R15, R5;            # [112][000380]
//     	IPA R7, a[0x90], R14;            # [113][000388] ATTR1
//     	FMUL.FTZ R15, R10, R16;          # [114][000390]
//     	IPA R9, a[0x9c], R14;            # [115][000398] GENERIC_ATTRIBUTE_01_W
//     	FMUL.FTZ R6, R10, R6;            # [116][0003a0]
//     	FMUL.FTZ R5, R10, R5;            # [117][0003a8]
//     	FFMA.FTZ R2, R2, R15, R13;       # [118][0003b0]
//     	IPA R11, a[0x94], R14;           # [119][0003b8] GENERIC_ATTRIBUTE_01_Y
//     	FFMA.FTZ R1, R1, R6, R12;        # [120][0003c0]
//     	IPA R14, a[0x98], R14;           # [121][0003c8] GENERIC_ATTRIBUTE_01_Z
//     	FFMA.FTZ R0, R0, R5, R4;         # [122][0003d0]
//     	FMUL.FTZ R2, R8, R2;             # [123][0003d8]
//     	FMUL.FTZ R1, R8, R1;             # [124][0003e0]
//     	FMUL.FTZ R0, R8, R0;             # [125][0003e8]
//     	FFMA.FTZ R2, R2, R9, R14;        # [126][0003f0]
//     	FFMA.FTZ R1, R1, R9, R11;        # [127][0003f8]
//     	FFMA.FTZ R0, R0, R9, R7;         # [128][000400]
//     	FMNMX.FTZ R2, R2, RZ, !PT;       # [129][000408]
//     	FMNMX.FTZ R1, R1, RZ, !PT;       # [130][000410]
//     	FMNMX.FTZ R0, R0, RZ, !PT;       # [131][000418]
//     	EXIT;                            # [132][000420]
//     	END
//     END_SECTION
// END_SHADER
// 
