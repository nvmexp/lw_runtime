// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x3a5ab238455b9444
//         FINGERPRINTER_HASH: 0x0000000000000000
//         UCODE_HASH: 0x2b563330073861d2
//         POOL: APP
//         VERSION: 20
//         # USES: 20987
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 1
//         # Tex / Tld vectorized: 1
//         # Dual Src Blending Opt: 0
//         # Texture Filtering: 0
//         # Blend Opt: 0
//         # Lentilwlar Halo: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 59
//         TEXTURE_SLOTS: 8
//         SAMPLER_SLOTS: 2
//         THREAD_STACK_SIZE: 0x200
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             SHADER_LOCAL_MEMORY_CRS_SIZE 0x200
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET01_R
//             TARGET01_G
//             TARGET01_B
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_5_0
        dcl_globalflags refactoringAllowed
        dcl_constantbuffer cb0[7].xyzw, immediateIndexed
        dcl_constantbuffer cb1[17].xyzw, immediateIndexed
        dcl_constantbuffer cb2[9].xyzw, immediateIndexed
        dcl_constantbuffer cb3[6].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s1, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_resource t3, texture2d, (float, float, float, float)
        dcl_resource t4, texture2d, (float, float, float, float)
        dcl_resource t5, texture2d, (float, float, float, float)
        dcl_resource t6, texture2d, (float, float, float, float)
        dcl_resource t7, texture2d, (float, float, float, float)
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_temps 21 
        ftoi r0.xy, v0.xyxx
        mov r0.zw, l(0, 0, 0, 0)
        ld (texture2d) (float,float,float,float) r1.x, r0.xyww, t0.xyzw
        mov r2.xy, v0.xyxx
        mov r2.z, r1.x
        mov r2.w, l(0x3f800000)
        dp4 r1.x, cb0[0].xyzw, r2.xyzw
        dp4 r1.y, cb0[1].xyzw, r2.xyzw
        dp4 r1.z, cb0[2].xyzw, r2.xyzw
        dp4 r1.w, cb0[3].xyzw, r2.xyzw
        div r2.xyz, r1.xyzx, r1.wwww
        dp3 r3.x, r2.xyzx, r2.xyzx
        sqrt r3.x, r3.x
        div r4.xyz, r2.xyzx, r3.xxxx
        min r3.z, r3.x, l(100000.00000000)
        dp3 r3.w, cb1[11].xyzx, r4.xyzx
        lt r5.x, r3.w, l(0.00000000)
        div r5.y, -cb1[11].w, r3.w
        max r5.y, r5.y, l(0.10000000)
        min r3.y, r3.z, r5.y
        lt r3.w, l(0.00000000), r3.w
        movc r5.z, r3.w, r3.y, r3.z
        mov r5.y, l(0x3dcccccd)
        movc r5.yz, r5.xxxx, r3.yyzy, r5.yyzy
        dp3 r3.y, cb1[12].xyzx, r4.xyzx
        lt r3.z, r3.y, l(0.00000000)
        div r3.w, -cb1[12].w, r3.y
        max r3.w, r5.y, r3.w
        min r5.x, r5.z, r3.w
        lt r3.y, l(0.00000000), r3.y
        movc r5.w, r3.y, r5.x, r5.z
        movc r5.yz, r3.zzzz, r5.xxzx, r5.yywy
        dp3 r3.y, cb1[13].xyzx, r4.xyzx
        lt r3.z, r3.y, l(0.00000000)
        div r3.w, -cb1[13].w, r3.y
        max r3.w, r5.y, r3.w
        min r5.x, r5.z, r3.w
        lt r3.y, l(0.00000000), r3.y
        movc r5.w, r3.y, r5.x, r5.z
        movc r5.yz, r3.zzzz, r5.xxzx, r5.yywy
        dp3 r3.y, cb1[14].xyzx, r4.xyzx
        lt r3.z, r3.y, l(0.00000000)
        div r3.w, -cb1[14].w, r3.y
        max r3.w, r5.y, r3.w
        min r5.x, r5.z, r3.w
        lt r3.y, l(0.00000000), r3.y
        movc r5.w, r3.y, r5.x, r5.z
        movc r5.yz, r3.zzzz, r5.xxzx, r5.yywy
        dp3 r3.y, cb1[15].xyzx, r4.xyzx
        lt r3.z, r3.y, l(0.00000000)
        div r3.w, -cb1[15].w, r3.y
        max r3.w, r5.y, r3.w
        min r5.x, r5.z, r3.w
        lt r3.y, l(0.00000000), r3.y
        movc r5.w, r3.y, r5.x, r5.z
        movc r5.yz, r3.zzzz, r5.xxzx, r5.yywy
        dp3 r3.y, cb1[16].xyzx, r4.xyzx
        lt r3.z, r3.y, l(0.00000000)
        div r3.w, -cb1[16].w, r3.y
        max r3.w, r5.y, r3.w
        min r5.x, r5.z, r3.w
        lt r3.y, l(0.00000000), r3.y
        movc r5.w, r3.y, r5.x, r5.z
        movc r3.yz, r3.zzzz, r5.xxzx, r5.yywy
        lt r3.w, r3.y, r3.z
        if_nz r3.w
          ftou r5.xy, v0.xyxx
          and r5.xy, r5.xyxx, l(0x3, 0x3, 0, 0)
          mov r5.zw, l(0, 0, 0, 0)
          ld (texture2d) (float,float,float,float) r5.x, r5.xyzw, t5.xyzw
          max r3.w, r3.y, cb3[4].x
          min r5.y, r3.z, cb3[4].y
          dp3 r5.z, cb0[5].xyzx, r4.xyzx
          add r5.w, r3.w, -cb3[4].x
          max r5.w, r5.w, l(0.00000000)
          ne r6.x, r5.z, l(0.00000000)
          mad r6.y, r5.z, cb3[4].x, cb2[8].y
          mul r6.yzw, r6.yyyy, cb3[0].xxyz
          mul r6.yzw, r6.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
          exp r6.yzw, r6.yyzw
          mul r7.xyz, r5.zzzz, cb3[0].xyzx
          mul r7.xyz, r5.wwww, r7.xyzx
          mul r7.xyz, r7.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
          exp r7.xyz, r7.xyzx
          add r7.xyz, -r7.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
          mul r6.yzw, r6.yyzw, r7.xxyz
          mul r7.xyz, r5.zzzz, -cb3[0].xyzx
          div r6.yzw, r6.yyzw, r7.xxyz
          mul r7.xyz, cb2[8].yyyy, cb3[0].xyzx
          mul r7.xyz, r7.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
          exp r7.xyz, r7.xyzx
          mul r7.xyz, r5.wwww, r7.xyzx
          movc r6.xyz, r6.xxxx, r6.yzwy, r7.xyzx
          mad r5.w, r6.z, l(200.00000000), r6.y
          mul r6.yzw, r5.wwww, cb3[3].xxyz
          mad r6.xyz, cb3[1].xyzx, r6.xxxx, r6.yzwy
          mul r6.xyz, r6.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
          exp r6.xyz, r6.xyzx
          mov r4.w, l(0x3f800000)
          dp4 r7.x, cb1[4].xyzw, r4.xyzw
          dp4 r7.y, cb1[5].xyzw, r4.xyzw
          dp4 r7.z, cb1[6].xyzw, r4.xyzw
          dp4 r7.w, cb1[7].xyzw, r4.xyzw
          mov r8.x, cb1[4].w
          mov r8.y, cb1[5].w
          mov r8.z, cb1[6].w
          mov r8.w, cb1[7].w
          add r7.xyzw, r7.xyzw, -r8.xyzw
          mul r4.w, r3.w, cb3[4].z
          log r4.w, r4.w
          mul r4.w, r4.w, cb3[5].x
          round_ni r4.w, r4.w
          max r4.w, r4.w, l(0.00000000)
          log r5.w, cb3[4].w
          mul r4.w, r4.w, r5.w
          exp r4.w, r4.w
          mul r4.w, r4.w, cb3[4].x
          mul r5.w, r4.w, cb3[4].w
          mad r6.w, -cb3[3].w, cb3[3].w, l(1.00000000)
          mul r9.x, cb1[9].w, cb1[9].w
          mov r10.xyz, cb1[8].xyzx
          mov r10.w, l(0x3f800000)
          dp4 r11.x, cb0[4].xyzw, r10.xyzw
          dp4 r11.y, cb0[5].xyzw, r10.xyzw
          dp4 r11.z, cb0[6].xyzw, r10.xyzw
          mul r9.yzw, r11.yyyy, cb3[0].xxyz
          mul r9.yzw, r9.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
          exp r9.yzw, r9.yyzw
          mul r10.xyz, cb3[1].xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.00000000)
          mov r12.w, l(0x3f800000)
          mov r13.xyzw, r8.xyzw
          mov r14.xyzw, r7.xyzw
          mov r15.xyz, r6.xyzx
          mov r16.xyz, l(0, 0, 0, 0)
          mov r10.w, r4.w
          mov r11.w, r5.w
          loop 
            ge r15.w, r10.w, r5.y
            breakc_nz r15.w
            max r15.w, r3.w, r10.w
            min r16.w, r5.y, r11.w
            add r17.x, -r15.w, r16.w
            div r16.w, r16.w, r15.w
            log r16.w, r16.w
            mul r16.w, r5.x, r16.w
            exp r16.w, r16.w
            mul r15.w, r15.w, r16.w
            mad r16.w, r15.w, r5.z, cb2[8].y
            mul r17.yzw, r16.wwww, cb3[0].xxyz
            mul r17.yzw, r17.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
            exp r18.xyz, r17.yzwy
            mad r18.w, r18.z, l(200.00000000), r18.y
            mul r17.xy, r17.xxxx, r18.xwxx
            mul r18.xyz, r17.yyyy, cb3[3].xyzx
            mad r18.xyz, cb3[1].xyzx, r17.xxxx, r18.xyzx
            mul r18.xyz, r18.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
            exp r18.xyz, r18.xyzx
            mul r15.xyz, r15.xyzx, r18.xyzx
            mul r12.xyz, r4.xyzx, r15.wwww
            mad r18.xyzw, r15.wwww, r14.xyzw, r13.xyzw
            div r18.xyz, r18.xyzx, r18.wwww
            sample_l (texture2d) (float,float,float,float) r19.xyz, r18.xyxx, t6.xyzw, s0, l(0)
            sample_l (texture2d) (float,float,float,float) r16.w, r18.xyxx, t7.yzwx, s1, l(0)
            ge r16.w, r16.w, r18.z
            and r16.w, r16.w, l(0x3f800000)
            mul r18.xyz, r16.wwww, r19.xyzx
            mad r19.xyz, -r15.wwww, r4.xyzx, cb1[8].xyzx
            dp3 r15.w, r19.xyzx, r19.xyzx
            rsq r16.w, r15.w
            mul r19.xyz, r16.wwww, r19.xyzx
            dp3 r16.w, r4.xyzx, r19.xyzx
            mad r16.w, -cb3[3].w, r16.w, l(1.00000000)
            mul r16.w, r16.w, r16.w
            mul r16.w, r16.w, l(12.56637096)
            div r16.w, r6.w, r16.w
            div r17.z, r15.w, r9.x
            mad r17.z, -r17.z, r17.z, l(1.00000000)
            max r17.z, r17.z, l(0.00000000)
            add r15.w, r15.w, l(1.00000000)
            div r15.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r15.w
            mul r18.xyz, r17.zzzz, r18.xyzx
            mul r18.xyz, r15.wwww, r18.xyzx
            dp4 r19.x, cb0[4].xyzw, r12.xyzw
            dp4 r19.y, cb0[5].xyzw, r12.xyzw
            dp4 r19.z, cb0[6].xyzw, r12.xyzw
            add r12.xyz, -r11.xyzx, r19.xyzx
            dp3 r12.x, r12.xyzx, r12.xyzx
            sqrt r12.x, r12.x
            div r12.y, r12.y, r12.x
            ne r12.z, r12.y, l(0.00000000)
            mul r19.xyz, r12.yyyy, cb3[0].xyzx
            mul r19.xyz, r12.xxxx, r19.xyzx
            mul r19.xyz, r19.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r19.xyz, r19.xyzx
            add r19.xyz, -r19.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
            mul r19.xyz, r9.yzwy, r19.xyzx
            mul r20.xyz, r12.yyyy, -cb3[0].xyzx
            div r19.xyz, r19.xyzx, r20.xyzx
            mul r20.xyz, r9.yzwy, r12.xxxx
            movc r12.xyz, r12.zzzz, r19.xyzx, r20.xyzx
            mad r12.y, r12.z, l(200.00000000), r12.y
            mul r19.xyz, r12.yyyy, cb3[3].xyzx
            mad r12.xyz, cb3[1].xyzx, r12.xxxx, r19.xyzx
            mul r12.xyz, r12.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
            exp r12.xyz, r12.xyzx
            mul r12.xyz, r12.xyzx, r18.xyzx
            mul r18.xyz, r16.wwww, cb3[2].xyzx
            mul r17.yzw, r17.yyyy, r18.xxyz
            mad r17.xyz, r10.xyzx, r17.xxxx, r17.yzwy
            mul r12.xyz, r12.xyzx, r17.xyzx
            mad r16.xyz, r12.xyzx, r15.xyzx, r16.xyzx
            mul r12.x, r11.w, cb3[4].w
            mov r10.w, r11.w
            mov r11.w, r12.x
          endloop 
          mul r5.xyz, r16.xyzx, cb1[9].xyzx
          lt r3.y, r3.y, r3.x
          ge r3.x, r3.z, r3.x
          and r3.x, r3.x, r3.y
          if_nz r3.x
            ld (texture2d) (float,float,float,float) r3.xyz, r0.xyww, t1.xyzw
            mad r3.xyz, r3.xyzx, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), l(-1.00000000, -1.00000000, -1.00000000, 0.00000000)
            dp3 r3.w, r3.xyzx, r3.xyzx
            rsq r3.w, r3.w
            mul r3.xyz, r3.wwww, r3.xyzx
            ld (texture2d) (float,float,float,float) r6.xyzw, r0.xyww, t2.xyzw
            ld (texture2d) (float,float,float,float) r7.xyzw, r0.xyww, t3.xyzw
            ld (texture2d) (float,float,float,float) r0.x, r0.xyzw, t4.xyzw
            dp4 r8.x, cb1[4].xyzw, r1.xyzw
            dp4 r8.y, cb1[5].xyzw, r1.xyzw
            dp4 r8.z, cb1[6].xyzw, r1.xyzw
            dp4 r0.y, cb1[7].xyzw, r1.xyzw
            div r0.yzw, r8.xxyz, r0.yyyy
            sample_l (texture2d) (float,float,float,float) r1.xyz, r0.yzyy, t6.xyzw, s0, l(0)
            add r8.xy, r0.wwww, l(-0.00010000, -0.00100000, 0.00000000, 0.00000000)
            div r0.w, r8.y, cb1[9].w
            mul r0.w, r0.w, l(0.75000000)
            max r0.w, r0.w, l(0.00010000)
            mad r8.yz, r0.wwww, l(0.00000000, 0.66291302, 0.66291302, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r1.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, 0.00000000, 0.87500000, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r3.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, -0.57452399, 0.57452399, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r4.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, -0.75000000, 0.00000000, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r5.w, r8.yzyy, t7.yzwx, s1, l(0)
            ge r1.w, r1.w, r8.x
            and r1.w, r1.w, l(0x3f800000)
            ge r3.w, r3.w, r8.x
            and r3.w, r3.w, l(0x3f800000)
            add r1.w, r1.w, r3.w
            ge r3.w, r4.w, r8.x
            and r3.w, r3.w, l(0x3f800000)
            add r1.w, r1.w, r3.w
            ge r3.w, r5.w, r8.x
            and r3.w, r3.w, l(0x3f800000)
            add r1.w, r1.w, r3.w
            mad r8.yz, r0.wwww, l(0.00000000, 1.00000000, 0.00000000, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r3.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, -0.48613599, -0.48613599, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r4.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, 0.00000000, -0.62500000, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r5.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, 0.39774799, -0.39774799, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r8.y, r8.yzyy, t7.yxzw, s1, l(0)
            ge r3.w, r3.w, r8.x
            and r3.w, r3.w, l(0x3f800000)
            ge r4.w, r4.w, r8.x
            and r4.w, r4.w, l(0x3f800000)
            add r3.w, r3.w, r4.w
            ge r4.w, r5.w, r8.x
            and r4.w, r4.w, l(0x3f800000)
            add r3.w, r3.w, r4.w
            ge r4.w, r8.y, r8.x
            and r4.w, r4.w, l(0x3f800000)
            add r3.w, r3.w, r4.w
            add r1.w, r1.w, r3.w
            mad r8.yz, r0.wwww, l(0.00000000, 0.50000000, 0.00000000, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r3.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, 0.13519500, 0.41608700, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r4.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, -0.30338100, 0.22041900, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r5.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, -0.25281799, -0.18368299, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r8.y, r8.yzyy, t7.yxzw, s1, l(0)
            ge r3.w, r3.w, r8.x
            and r3.w, r3.w, l(0x3f800000)
            ge r4.w, r4.w, r8.x
            and r4.w, r4.w, l(0x3f800000)
            add r3.w, r3.w, r4.w
            ge r4.w, r5.w, r8.x
            and r4.w, r4.w, l(0x3f800000)
            add r3.w, r3.w, r4.w
            ge r4.w, r8.y, r8.x
            and r4.w, r4.w, l(0x3f800000)
            add r3.w, r3.w, r4.w
            add r1.w, r1.w, r3.w
            mad r8.yz, r0.wwww, l(0.00000000, 0.07725400, -0.23776400, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r3.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, 0.18750000, 0.00000000, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r4.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r8.yz, r0.wwww, l(0.00000000, -0.06250000, 0.10825300, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r5.w, r8.yzyy, t7.yzwx, s1, l(0)
            mad r0.yz, r0.wwww, l(0.00000000, -0.03125000, -0.05412700, 0.00000000), r0.yyzy
            sample_l (texture2d) (float,float,float,float) r0.y, r0.yzyy, t7.yxzw, s1, l(0)
            ge r0.z, r3.w, r8.x
            ge r0.w, r4.w, r8.x
            and r0.zw, r0.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
            add r0.z, r0.w, r0.z
            ge r0.w, r5.w, r8.x
            and r0.w, r0.w, l(0x3f800000)
            add r0.z, r0.w, r0.z
            ge r0.y, r0.y, r8.x
            and r0.y, r0.y, l(0x3f800000)
            add r0.y, r0.y, r0.z
            add r0.y, r0.y, r1.w
            mul r0.y, r0.y, l(0.06250000)
            mul r1.xyz, r1.xyzx, cb1[9].xyzx
            mul r0.yzw, r0.yyyy, r1.xxyz
            add r1.xyz, -cb1[10].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
            mad r1.xyz, r0.xxxx, r1.xyzx, cb1[10].xyzx
            mul r0.xyz, r0.yzwy, r1.xyzx
            add r1.xyz, -r2.xyzx, cb1[8].xyzx
            dp3 r0.w, r1.xyzx, r1.xyzx
            rsq r1.w, r0.w
            mul r8.xyz, r1.wwww, r1.xyzx
            div r3.w, r0.w, r9.x
            mad r3.w, -r3.w, r3.w, l(1.00000000)
            max r3.w, r3.w, l(0.00000000)
            mul r0.xyz, r0.xyzx, r3.wwww
            div r0.xyz, r0.xyzx, r0.wwww
            mov r2.w, l(0x3f800000)
            dp4 r10.x, cb0[4].xyzw, r2.xyzw
            dp4 r10.y, cb0[5].xyzw, r2.xyzw
            dp4 r10.z, cb0[6].xyzw, r2.xyzw
            add r2.xyz, -r11.xyzx, r10.xyzx
            dp3 r0.w, r2.xyzx, r2.xyzx
            sqrt r0.w, r0.w
            div r2.x, r2.y, r0.w
            ne r2.y, r2.x, l(0.00000000)
            mul r10.xyz, r2.xxxx, cb3[0].xyzx
            mul r10.xyz, r0.wwww, r10.xyzx
            mul r10.xyz, r10.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r10.xyz, r10.xyzx
            add r10.xyz, -r10.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
            mul r10.xyz, r9.yzwy, r10.xyzx
            mul r2.xzw, r2.xxxx, -cb3[0].xxyz
            div r2.xzw, r10.xxyz, r2.xxzw
            mul r9.xyz, r0.wwww, r9.yzwy
            movc r2.xyz, r2.yyyy, r2.xzwx, r9.xyzx
            mad r0.w, r2.z, l(200.00000000), r2.y
            mul r2.yzw, r0.wwww, cb3[3].xxyz
            mad r2.xyz, cb3[1].xyzx, r2.xxxx, r2.yzwy
            mul r2.xyz, r2.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
            exp r2.xyz, r2.xyzx
            mul r0.xyz, r0.xyzx, r2.xyzx
            mul r0.w, r6.w, l(1.57079637)
            dp3 r2.x, r3.xyzx, -r4.xyzx
            dp3 r2.z, r3.xyzx, r8.xyzx
            mov_sat r2.yw, r2.xxxz
            add r3.w, -r2.y, l(1.00000000)
            sqrt r3.w, r3.w
            mad r4.w, r2.y, l(-0.01872930), l(0.07426100)
            mad r4.w, r4.w, r2.y, l(-0.21211439)
            mad r4.w, r4.w, r2.y, l(1.57072878)
            mul r3.w, r3.w, r4.w
            add r4.w, -r2.w, l(1.00000000)
            sqrt r4.w, r4.w
            mad r5.w, r2.w, l(-0.01872930), l(0.07426100)
            mad r5.w, r5.w, r2.w, l(-0.21211439)
            mad r5.w, r5.w, r2.w, l(1.57072878)
            mul r4.w, r4.w, r5.w
            max r5.w, r3.w, r4.w
            min r3.w, r3.w, r4.w
            mad r9.xyz, -r3.xyzx, r2.yyyy, -r4.xyzx
            dp3 r2.y, r9.xyzx, r9.xyzx
            rsq r2.y, r2.y
            mul r9.xyz, r2.yyyy, r9.xyzx
            mad r8.xyz, -r3.xyzx, r2.wwww, r8.xyzx
            dp3 r2.y, r8.xyzx, r8.xyzx
            rsq r2.y, r2.y
            mul r8.xyz, r2.yyyy, r8.xyzx
            dp3 r2.y, r9.xyzx, r8.xyzx
            mul r4.w, r0.w, r0.w
            mad r8.xyz, r0.wwww, r0.wwww, l(0.33000001, 0.09000000, 0.09000000, 0.00000000)
            div r8.xyz, r4.wwww, r8.xyzx
            mul r8.yz, r8.yyzy, l(0.00000000, 0.44999999, 0.12500000, 0.00000000)
            mad r0.w, -r8.x, l(0.50000000), l(1.00000000)
            ge r4.w, r2.y, l(0.00000000)
            sincos r6.w, null, r5.w
            mul r8.x, r3.w, l(0.63661975)
            mul r8.w, r8.x, r8.x
            mad r8.x, -r8.x, r8.w, r6.w
            movc r4.w, r4.w, r6.w, r8.x
            mul r4.w, r4.w, r8.y
            mul r6.w, r5.w, r3.w
            mul r6.w, r6.w, l(0.40528473)
            mul r6.w, r6.w, r6.w
            mul r6.w, r6.w, r8.z
            mul r4.w, r2.y, r4.w
            sincos r8.x, r9.x, r3.w
            div r8.x, r8.x, r9.x
            add r2.y, -|r2.y|, l(1.00000000)
            mul r2.y, r6.w, r2.y
            add r3.w, r3.w, r5.w
            mul r3.w, r3.w, l(0.50000000)
            sincos r9.x, r10.x, r3.w
            div r3.w, r9.x, r10.x
            mad r0.w, r4.w, r8.x, r0.w
            mad r0.w, r2.y, r3.w, r0.w
            mul r0.w, r0.w, l(0.31830987)
            mul r2.y, r7.w, l(1.57079637)
            mad r1.xyz, r1.xyzx, r1.wwww, -r4.xyzx
            dp3 r1.w, r1.xyzx, r1.xyzx
            rsq r1.w, r1.w
            mul r1.xyz, r1.wwww, r1.xyzx
            max r1.w, r2.x, l(0.00010000)
            max r2.x, r2.z, l(0.00010000)
            dp3 r2.z, r3.xyzx, r1.xyzx
            max r2.z, r2.z, l(0.00010000)
            dp3 r1.x, -r4.xyzx, r1.xyzx
            mul r1.yz, r2.yyzy, r2.yyzy
            mad r2.y, r2.z, r2.z, l(-1.00000000)
            mul r3.x, r1.y, r1.z
            div r2.y, r2.y, r3.x
            mul r2.y, r2.y, l(1.44269502)
            exp r2.y, r2.y
            mul r1.y, r1.y, l(4.00000000)
            mul r1.z, r1.z, r1.z
            mul r1.y, r1.z, r1.y
            div r1.y, r2.y, r1.y
            min r1.z, r1.w, r2.x
            dp2 r1.z, r2.zzzz, r1.zzzz
            div r1.x, r1.z, r1.x
            min r1.x, r1.x, l(1.00000000)
            mul r1.x, r1.x, r1.y
            mul r1.y, r1.w, r2.x
            div r1.x, r1.x, r1.y
            mul r1.xyz, r1.xxxx, r7.xyzx
            mad r1.xyz, r6.xyzx, r0.wwww, r1.xyzx
            mul r0.xyz, r0.xyzx, r1.xyzx
            mul r0.xyz, r2.wwww, r0.xyzx
            mul r0.xyz, r15.xyzx, r0.xyzx
          else 
            mov r0.xyz, l(0, 0, 0, 0)
          endif 
        else 
          mov r0.xyz, l(0, 0, 0, 0)
          mov r5.xyz, l(0, 0, 0, 0)
        endif 
        max o0.xyz, r0.xyzx, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        max o1.xyz, r5.xyzx, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3a8f670b // 0.001094
//         COP_CONST[1]: 0xba8f6709 // -0.001094
//         COP_CONST[2]: 0xc11feb85 // -9.995000
//         COP_CONST[3]: 0x3dcccccd // 0.100000
//         COP_CONST[4]: 0x3f439c1c // 0.764101
//         COP_CONST[5]: 0xbf21ee26 // -0.632540
//         COP_CONST[6]: 0x3f3f3104 // 0.746842
//         COP_CONST[7]: 0x3eb142e0 // 0.346213
//         COP_CONST[8]: 0x3f115972 // 0.567771
//         COP_CONST[9]: 0x3e01b391 // 0.126662
//         COP_CONST[10]: 0xbf271fbe // -0.652828
//         COP_CONST[11]: 0x3f0b58b0 // 0.544322
//         COP_CONST[12]: 0x3f06dd0b // 0.526810
//         COP_CONST[13]: 0x434e2990 // 206.162354
//         COP_CONST[14]: 0xbf19999a // -0.600000
//         COP_CONST[15]: 0xb8d1b717 // -0.000100
//         COP_CONST[16]: 0xba83126f // -0.001000
//         COP_CONST[17]: 0x3f29b4ab // 0.662913
//         COP_CONST[18]: 0x3f131401 // 0.574524
//         COP_CONST[19]: 0xbef8e6d1 // -0.486136
//         COP_CONST[20]: 0xbecba5a0 // -0.397748
//         COP_CONST[21]: 0x3ed5095b // 0.416087
//         COP_CONST[22]: 0x3e0a708f // 0.135195
//         COP_CONST[23]: 0x3e61b585 // 0.220419
//         COP_CONST[24]: 0xbe9b54c1 // -0.303381
//         COP_CONST[25]: 0xbe3c1765 // -0.183683
//         COP_CONST[26]: 0xbe81715c // -0.252818
//         COP_CONST[27]: 0xbe737868 // -0.237764
//         COP_CONST[28]: 0x3d9e3758 // 0.077254
//         COP_CONST[29]: 0x3dddb3c0 // 0.108253
//         COP_CONST[30]: 0xbd5db446 // -0.054127
//         COP_CONST[31]: 0x3f1cac08 // 0.612000
//         COP_CONST[32]: 0x3f418937 // 0.756000
//         COP_CONST[33]: 0x3f7a2c56 // 0.977239
//         COP_CONST[34]: 0xbc996e30 // -0.018729
//         COP_CONST[35]: 0xbe593484 // -0.212114
//         COP_CONST[36]: 0x3fc90da4 // 1.570729
//         COP_CONST[37]: 0x3db851ec // 0.090000
//         COP_CONST[38]: 0x3ea8f5c3 // 0.330000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][0] = 0x3a8f670b // 0.001094
//         USER_CONST: c[0][1] = 0x00000000 // 0.000000
//         USER_CONST: c[0][2] = 0x00000000 // 0.000000
//         USER_CONST: c[0][3] = 0xbf3340cd // -0.700208
//         USER_CONST: c[0][4] = 0x00000000 // 0.000000
//         USER_CONST: c[0][5] = 0xba8f6709 // -0.001094
//         USER_CONST: c[0][6] = 0x00000000 // 0.000000
//         USER_CONST: c[0][7] = 0x3ec9a8e5 // 0.393867
//         USER_CONST: c[0][8] = 0x00000000 // 0.000000
//         USER_CONST: c[0][9] = 0x00000000 // 0.000000
//         USER_CONST: c[0][10] = 0x00000000 // 0.000000
//         USER_CONST: c[0][11] = 0xbf800000 // -1.000000
//         USER_CONST: c[0][12] = 0x00000000 // 0.000000
//         USER_CONST: c[0][13] = 0x00000000 // 0.000000
//         USER_CONST: c[0][14] = 0xc11feb85 // -9.995000
//         USER_CONST: c[0][15] = 0x41200001 // 10.000001
//         USER_CONST: c[0][16] = 0x3f3f3104 // 0.746842
//         USER_CONST: c[0][17] = 0x3eb142e0 // 0.346213
//         USER_CONST: c[0][18] = 0x3f115972 // 0.567771
//         USER_CONST: c[0][19] = 0xbf3b173b // -0.730823
//         USER_CONST: c[0][20] = 0x3e01b391 // 0.126662
//         USER_CONST: c[0][21] = 0x3f439c1c // 0.764101
//         USER_CONST: c[0][22] = 0xbf21ee26 // -0.632540
//         USER_CONST: c[0][23] = 0x434e2990 // 206.162354
//         USER_CONST: c[0][24] = 0xbf271fbe // -0.652828
//         USER_CONST: c[0][25] = 0x3f0b58b0 // 0.544322
//         USER_CONST: c[0][26] = 0x3f06dd0b // 0.526810
//         USER_CONST: c[0][27] = 0xc08e18cc // -4.440527
//         USER_CONST: c[1][40] = 0x3cba7547 // 0.022761
//         USER_CONST: c[1][41] = 0x3e79db23 // 0.244000
//         USER_CONST: c[1][42] = 0x3ec6a7f0 // 0.388000
//         USER_CONST: c[2][33] = 0x434e2990 // 206.162354
//         USER_CONST: c[3][0] = 0xb903126f // -0.000125
//         USER_CONST: c[3][1] = 0xba5a740e // -0.000833
//         USER_CONST: c[3][2] = 0xbd14f209 // -0.036364
//         USER_CONST: c[3][4] = 0x00000000 // 0.000000
//         USER_CONST: c[3][5] = 0x00000000 // 0.000000
//         USER_CONST: c[3][6] = 0x00000000 // 0.000000
//         USER_CONST: c[3][8] = 0x3bf5c28f // 0.007500
//         USER_CONST: c[3][9] = 0x3bf5c28f // 0.007500
//         USER_CONST: c[3][10] = 0x3bf5c28f // 0.007500
//         USER_CONST: c[3][12] = 0x3cb851eb // 0.022500
//         USER_CONST: c[3][13] = 0x3c44da90 // 0.012015
//         USER_CONST: c[3][14] = 0x3bf5c28f // 0.007500
//         USER_CONST: c[3][15] = 0x3f19999a // 0.600000
//         USER_CONST: c[3][16] = 0x3f800000 // 1.000000
//         USER_CONST: c[3][17] = 0x42c80000 // 100.000000
//         USER_CONST: c[3][18] = 0x3f800000 // 1.000000
//         USER_CONST: c[3][19] = 0x3fe39ea9 // 1.778279
//         USER_CONST: c[3][20] = 0x3f9a209b // 1.204120
//     END_SECTION
//     # Exelwtion Time: 631.696ms [5.960 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x3 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x4 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 0 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 3 "ATTR00" 32)
//         (0x0 0 3 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0x77
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//                 indexableRanges: 2 :  (null 0 172870152 168) (null 0 21 28)
//         samplerProperties:         (0 0)         (0 0)        
//         numTextures: 8
//         textureProperties:         (1 1 1)         (1 1 1)         (1 1 1)         (1 1 1)         (1 1 1)         (1 1 1)         (0 0 1)         (0 0 1)        
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr (s32) r9.xy, (r) v0.xyxx  //   0 SHD
//         movu32 (u32) r9.zw, (u32) constant(0, 0, 0, 0)  //   1 SHD
//         movu32 (u32) r4106, (u32) r9.w  // 174107868 
//         txgu32 (r) r4105, (u32) r9.xyww, (u32) r4106, #0, #0, 2D, LOAD  // 174107868 
//         movr (r) r10.x, (r) r4105  // 174107384 
//         movu32 (u32) r11.xy, (u32) v0.xyxx  //   1 SHD
//         movu32 (u32) r11.z, (u32) r10.x  //   0 SHD
//         movu32 (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         movr (r) r4109, (r) c[0][0]  //   2 SHD
//         movr (r) r4109.x, (r) constant(0.00109407, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.70020753, 0.00000000, 0.00000000, 0.00000000).x  // 174057224 FPB0
//         dp4r (r) r10.x, (r) r4109, (r) r11  //   0 SHD
//         movr (r) r4109, (r) c[0][1]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(-0.00109407, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.39386669, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r10.y, (r) r4109, (r) r11  //   2 SHD
//         movr (r) r4109, (r) c[0][2]  //   2 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 174039768 FPB0
//         movr (r) r4109.w, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 174039768 FPB0
//         dp4r (r) r10.z, (r) r4109, (r) r11  //   0 SHD
//         movr (r) r4109, (r) c[0][3]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-9.99499989, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(10.00000095, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r10.w, (r) r4109, (r) r11  //   0 SHD
//         divr (r) r4105.x, (r) r10.x, (r) r10.w  //   0 SHD
//         divr (r) r4105.y, (r) r10.y, (r) r10.w  //   0 SHD
//         divr (r) r4105.z, (r) r10.z, (r) r10.w  //   0 SHD
//         movr (r) r11.xyz, (r) r4105  //   8 
//         dp3r (r) r12.x, (r) r11.xyzx, (r) r11.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r12.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r12.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r12.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r12.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r12.x, (r) r4107  //   0 SHD
//         divr (r) r4108.x, (r) r11.x, (r) r12.x  //   0 SHD
//         divr (r) r4108.y, (r) r11.y, (r) r12.x  //   0 SHD
//         divr (r) r4108.z, (r) r11.z, (r) r12.x  //   0 SHD
//         movr (r) r13.xyz, (r) r4108  //   0 SHD
//         minr (r) r12.z, (r) r12.x, (r) constant(100000.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r12.w, (r) c[1][11].xyzx, (r) r13.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.x, (r) r12.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.y, (r) -c[1][11].w, (r) r12.w  //   0 SHD
//         movr (r) r14.y, (r) r4105  //   0 SHD
//         maxr (r) r14.y, (r) r14.y, (r) constant(0.10000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         minr (r) r12.y, (r) r12.z, (r) r14.y  //   0 SHD
//         set_ltr.c (s32) r12.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.w  // 148135376 SHD
//         movr (r) r4105, (r) r12.y  //   0 SHD
//         movr (r) r4105(EQ), (r) r12.z  //   0 SHD
//         movr (r) r14.z, (r) r4105  //   0 SHD
//         movu32 (u32) r14.y, (u32) constant(1036831949, 0, 0, 0).x  // 110 SHD
//         movs32.c (s32) hc, (s32) r14.x  // 110 SHD
//         movr (r) r4105, (r) r12.yyzy  // 110 SHD
//         movr (r) r4105(EQ), (r) r14.yyzy  // 110 SHD
//         movr (r) r14.yz, (r) r4105  // 110 SHD
//         dp3r (r) r12.y, (r) c[1][12].xyzx, (r) r13.xyzx  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[1][12].w, (r) r12.y  //   0 
//         movr (r) r12.w, (r) r4105  //   0 
//         maxr (r) r12.w, (r) r14.y, (r) r12.w  //   0 
//         minr (r) r14.x, (r) r14.z, (r) r12.w  //   0 
//         set_ltr.c (s32) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.y  //   0 
//         movs32.c (s32) hc, (s32) r12.y  //   0 
//         movr (r) r4105, (r) r14.x  //   0 
//         movr (r) r4105(EQ), (r) r14.z  //   0 SHDOPT
//         movr (r) r14.w, (r) r4105  //  53 SHD
//         movs32.c (s32) hc, (s32) r12.z  //  53 SHD
//         movr (r) r4105, (r) r14.xxzx  //  53 SHD
//         movr (r) r4105(EQ), (r) r14.yywy  //   0 SHD
//         movr (r) r14.yz, (r) r4105  //   0 SHD
//         dp3r (r) r12.y, (r) c[1][13].xyzx, (r) r13.xyzx  //   0 
//         set_ltr.c (s32) r12.z, (r) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         divr (r) r4105.w, (r) -c[1][13].w, (r) r12.y  //   0 
//         movr (r) r12.w, (r) r4105  //   0 
//         maxr (r) r12.w, (r) r14.y, (r) r12.w  //   0 
//         minr (r) r14.x, (r) r14.z, (r) r12.w  //   0 
//         set_ltr.c (s32) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.y  //   0 
//         movs32.c (s32) hc, (s32) r12.y  // 148403744 SHD
//         movr (r) r4105, (r) r14.x  // 256 SHDOPT
//         movr (r) r4105(EQ), (r) r14.z  // 256 SHDOPT
//         movr (r) r14.w, (r) r4105  // 256 SHDOPT
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         movr (r) r4105, (r) r14.xxzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r14.yywy  //   0 SHD
//         movr (r) r14.yz, (r) r4105  //   0 SHD
//         dp3r (r) r12.y, (r) c[1][14].xyzx, (r) r13.xyzx  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[1][14].w, (r) r12.y  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         maxr (r) r12.w, (r) r14.y, (r) r12.w  //   0 SHDOPT
//         minr (r) r14.x, (r) r14.z, (r) r12.w  //   0 SHD
//         set_ltr.c (s32) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.y  //   0 SHDOPT
//         movs32.c (s32) hc, (s32) r12.y  //   0 SHDOPT
//         movr (r) r4105, (r) r14.x  //   0 SHDOPT
//         movr (r) r4105(EQ), (r) r14.z  //   2 SHD
//         movr (r) r14.w, (r) r4105  //   2 SHD
//         movs32.c (s32) hc, (s32) r12.z  //  21 
//         movr (r) r4105, (r) r14.xxzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r14.yywy  //   0 SHD
//         movr (r) r14.yz, (r) r4105  //   0 SHD
//         dp3r (r) r12.y, (r) c[1][15].xyzx, (r) r13.xyzx  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[1][15].w, (r) r12.y  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHDOPT
//         maxr (r) r12.w, (r) r14.y, (r) r12.w  //   0 SHD
//         minr (r) r14.x, (r) r14.z, (r) r12.w  //   0 SHD
//         set_ltr.c (s32) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.y  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.y  //   0 SHD
//         movr (r) r4105, (r) r14.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r14.z  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHDOPT
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         movr (r) r4105, (r) r14.xxzx  //   0 SHDOPT
//         movr (r) r4105(EQ), (r) r14.yywy  //   0 SHD
//         movr (r) r14.yz, (r) r4105  //   0 SHDOPT
//         dp3r (r) r12.y, (r) c[1][16].xyzx, (r) r13.xyzx  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         divr (r) r4105.w, (r) -c[1][16].w, (r) r12.y  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHDOPT
//         maxr (r) r12.w, (r) r14.y, (r) r12.w  //   0 SHD
//         minr (r) r14.x, (r) r14.z, (r) r12.w  //   0 SHD
//         set_ltr.c (s32) r12.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.y  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.y  //   0 SHD
//         movr (r) r4105, (r) r14.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r14.z  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         movr (r) r4105, (r) r14.xxzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r14.yywy  //   0 SHD
//         movr (r) r12.yz, (r) r4105  //   0 SHD
//         set_ltr.c (s32) r12.w, (r) r12.y, (r) r12.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.w  //   0 SHD
//         ife NE.x , l0, l1  //   0 SHD
//         movr (u32) r14.xy, (r) v0.xyxx  //   0 SHD
//         andu32 (u32) r14.xy, (u32) r14.xyxx, (u32) constant(3, 3, 0, 0)  //   0 SHD
//         movu32 (u32) r14.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r14.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r14, (u32) r4106, #5, #0, 2D, LOAD  //   0 SHD
//         movr (r) r14.x, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[3][4].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r12.w, (r) r12.y, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[3][4].y  //   0 SHD
//         movr (r) r4110.x, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         minr (r) r14.y, (r) r12.z, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[0][5].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12666155, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76410079, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63254011, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.12666155, 0.00000000, 0.00000000, 0.00000000).x  // 148119784 SHD
//         dp3r (r) r14.z, (r) r4109, (r) r13.xyzx  // 148119784 SHD
//         movr (r) r4110, (r) -c[3][4].x  //   0 SHD
//         movr (r) r4110.x, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB0
//         movr (r) r4110.y, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r14.w, (r) r12.w, (r) r4110  //   0 SHD
//         maxr (r) r14.w, (r) r14.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 281 SHD
//         set_neur.c (s32) r15.x, (r) r14.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[3][4].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 378 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111, (r) c[2][8].y  //   0 SHD
//         movr (r) r4111.x, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r15.y, (r) r14.z, (r) r4110, (r) r4111  //   0 SHD
//         movr (r) r4110, (r) c[3][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 148124008 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 148124008 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 148124008 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 16400 
//         mulr (r) r15.yzw, (r) r15.y, (r) r4110  //   0 SHD
//         mulr (r) r15.yzw, (r) r15.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //  28 SHD
//         ex2r (r) r4105.y, (r) r15.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r15.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r15.w  //   0 SHD
//         movr (r) r15.yzw, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[3][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r16.xyz, (r) r14.z, (r) r4110  //   0 SHD
//         mulr (r) r16.xyz, (r) r14.w, (r) r16.xyzx  //   0 SHD
//         mulr (r) r16.xyz, (r) r16.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r16.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r16.y  //  96 SHD
//         ex2r (r) r4105.z, (r) r16.z  //   0 
//         movr (r) r16.xyz, (r) r4105  //   0 
//         addr (r) r16.xyz, (r) -r16.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 
//         mulr (r) r15.yzw, (r) r15.yyzw, (r) r16.xxyz  //   0 
//         movr (r) r4110, (r) -c[3][0].xyzx  // 174080960 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r16.xyz, (r) r14.z, (r) r4110  //   0 SHD
//         divr (r) r4105.y, (r) r15.y, (r) r16.x  // -2147483648 SHD
//         divr (r) r4105.z, (r) r15.z, (r) r16.y  //  11 SHDOPT
//         divr (r) r4105.w, (r) r15.w, (r) r16.z  //  11 SHDOPT
//         movr (r) r15.yzw, (r) r4105  //  11 SHDOPT
//         movr (r) r4109, (r) c[2][8].y  //  11 SHDOPT
//         movr (r) r4109.x, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[3][0].xyzx  //   6 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   3 
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r16.xyz, (r) r4109, (r) r4110  //   0 SHD
//         mulr (r) r16.xyz, (r) r16.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   8 
//         ex2r (r) r4105.x, (r) r16.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r16.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r16.z  //   0 SHD
//         movr (r) r16.xyz, (r) r4105  //   0 SHD
//         mulr (r) r16.xyz, (r) r14.w, (r) r16.xyzx  // 2949120 
//         movs32.c (s32) hc, (s32) r15.x  // -2138826752 SHD
//         movr (r) r4105, (r) r15.yzwy  //   0 SHD
//         movr (r) r4105(EQ), (r) r16.xyzx  //   0 SHD
//         movr (r) r15.xyz, (r) r4105  //   0 SHD
//         madr (r) r14.w, (r) r15.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r15.y  //   0 SHD
//         movr (r) r4110, (r) c[3][3].xxyz  // 148119032 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 148119032 SHD
//         movr (r) r4110.y, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 148119032 SHD
//         movr (r) r4110.z, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  // 1774151956 FPB0
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r15.yzw, (r) r14.w, (r) r4110  //  36 SHD
//         movr (r) r4109, (r) c[3][1].xyzx  //   2 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r15.xyz, (r) r4109, (r) r15.x, (r) r15.yzwy  //   0 SHD
//         mulr (r) r15.xyz, (r) r15.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r15.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r15.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r15.z  //   0 SHD
//         movr (r) r15.xyz, (r) r4105  //   0 SHD
//         movu32 (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         dp4r (r) r16.x, (r) c[1][4], (r) r13  //   0 SHD
//         dp4r (r) r16.y, (r) c[1][5], (r) r13  // 50462976 SHD
//         dp4r (r) r16.z, (r) c[1][6], (r) r13  //   0 SHD
//         dp4r (r) r16.w, (r) c[1][7], (r) r13  //   0 SHD
//         movu32 (u32) r17.x, (u32) c[1][4].w  //  17 SHD
//         movu32 (u32) r17.y, (u32) c[1][5].w  //   0 SHD
//         movu32 (u32) r17.z, (u32) c[1][6].w  //   0 SHD
//         movu32 (u32) r17.w, (u32) c[1][7].w  //   0 SHD
//         addr (r) r16, (r) r16, (r) -r17  //   0 SHD
//         movr (r) r4110, (r) c[3][4].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.w, (r) r12.w, (r) r4110  //   1 SHD
//         lg2r (r) r4105.w, (r) r13.w  //   0 SHD
//         movr (r) r13.w, (r) r4105  // 174076120 SHD
//         movr (r) r4110, (r) c[3][5].x  // 174076120 SHD
//         movr (r) r4110.x, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  // 174076120 SHD
//         movr (r) r4110.y, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  // 116 SHD
//         movr (r) r4110.z, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  // 116 SHD
//         movr (r) r4110.w, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  // 116 SHD
//         mulr (r) r13.w, (r) r13.w, (r) r4110  //   0 SHD
//         flrr (r) r13.w, (r) r13.w  //   0 SHD
//         maxr (r) r13.w, (r) r13.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[3][4].w  //   1 SHD
//         movr (r) r4109.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 174074960 SHD
//         movr (r) r4109.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 174074960 SHD
//         movr (r) r4109.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 174074960 SHD
//         movr (r) r4109.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         lg2r (r) r4105.w, (r) r4109  //   8 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         mulr (r) r13.w, (r) r13.w, (r) r14.w  //   0 SHD
//         ex2r (r) r4105.w, (r) r13.w  //   0 SHD
//         movr (r) r13.w, (r) r4105  //  17 SHD
//         movr (r) r4110, (r) c[3][4].x  // 130 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 130 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.w, (r) r13.w, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[3][4].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 130 SHD
//         mulr (r) r14.w, (r) r13.w, (r) r4110  // 130 SHD
//         movr (r) r4109, (r) -c[3][3].w  // 130 SHD
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 130 SHD
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 174071912 SHD
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 174071912 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 174071912 SHD
//         movr (r) r4110, (r) c[3][3].w  // 174071912 SHD
//         movr (r) r4110.x, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 174071912 SHD
//         movr (r) r4110.y, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 174071912 SHD
//         movr (r) r4110.z, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r15.w, (r) r4109, (r) r4110, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.x, (r) c[1][9].w, (r) c[1][9].w  //   0 SHD
//         movu32 (u32) r19.xyz, (u32) c[1][8].xyzx  //   0 SHD
//         movu32 (u32) r19.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         movr (r) r4109, (r) c[0][4]  //   0 SHDOPT
//         movr (r) r4109.x, (r) constant(0.74684167, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4109.y, (r) constant(0.34621334, 0.00000000, 0.00000000, 0.00000000).x  // 148282008 SHD
//         movr (r) r4109.z, (r) constant(0.56777108, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.73082322, 0.00000000, 0.00000000, 0.00000000).x  //   8 SHD
//         dp4r (r) r20.x, (r) r4109, (r) r19  //   0 SHD
//         movr (r) r4109, (r) c[0][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12666155, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76410079, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHDOPT
//         movr (r) r4109.z, (r) constant(-0.63254011, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHDOPT
//         movr (r) r4109.w, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHDOPT
//         dp4r (r) r20.y, (r) r4109, (r) r19  //   0 SHD
//         movr (r) r4109, (r) c[0][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65282810, 0.00000000, 0.00000000, 0.00000000).x  // 183 SHD
//         movr (r) r4109.y, (r) constant(0.54432201, 0.00000000, 0.00000000, 0.00000000).x  // 109 SHD
//         movr (r) r4109.z, (r) constant(0.52681035, 0.00000000, 0.00000000, 0.00000000).x  //  71 SHD
//         movr (r) r4109.w, (r) constant(-4.44052696, 0.00000000, 0.00000000, 0.00000000).x  //  71 SHD
//         dp4r (r) r20.z, (r) r4109, (r) r19  //   0 SHD
//         movr (r) r4110, (r) c[3][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.yzw, (r) r20.y, (r) r4110  //   0 SHD
//         mulr (r) r18.yzw, (r) r18.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.y, (r) r18.y  //   0 FPB0
//         ex2r (r) r4105.z, (r) r18.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r18.w  //   0 SHD
//         movr (r) r18.yzw, (r) r4105  //   0 SHDOPT
//         movr (r) r4109, (r) c[3][1].xyzx  //   1 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   8 SHDOPT
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 154 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  80 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  42 SHD
//         mulr (r) r19.xyz, (r) r4109, (r) constant(0.07957747, 0.07957747, 0.07957747, 0.00000000)  //  42 SHD
//         movu32 (u32) r21.w, (u32) constant(1065353216, 0, 0, 0).x  //  42 SHD
//         movu32 (u32) r22, (u32) r17  //   8 SHD
//         movu32 (u32) r23, (u32) r16  //   0 SHD
//         movu32 (u32) r24.xyz, (u32) r15.xyzx  //   0 SHD
//         movu32 (u32) r25.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r19.w, (u32) r13.w  //   0 SHD
//         movu32 (u32) r20.w, (u32) r14.w  //   0 SHD
//         rep l2  //   0 SHD
//         set_ger.c (s32) r24.w, (r) r19.w, (r) r14.y  //   2 SHDOPT
//         movs32.c (s32) hc, (s32) r24.w  //   2 SHDOPT
//         brk NE.x  //   0 SHD
//         maxr (r) r24.w, (r) r12.w, (r) r19.w  //   0 SHD
//         minr (r) r25.w, (r) r14.y, (r) r20.w  // 174064056 SHD
//         addr (r) r26.x, (r) -r24.w, (r) r25.w  // 174064056 SHD
//         divr (r) r4105.w, (r) r25.w, (r) r24.w  //   0 SHD
//         movr (r) r25.w, (r) r4105  //   0 SHD
//         lg2r (r) r4105.w, (r) r25.w  //   0 SHD
//         movr (r) r25.w, (r) r4105  // 148102984 SHD
//         mulr (r) r25.w, (r) r14.x, (r) r25.w  //   0 FPB0
//         ex2r (r) r4105.w, (r) r25.w  //   0 FPB0
//         movr (r) r25.w, (r) r4105  //   0 FPB0
//         mulr (r) r24.w, (r) r24.w, (r) r25.w  // 174063096 SHD
//         movr (r) r4111, (r) c[2][8].y  // 174063096 SHD
//         movr (r) r4111.x, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  // 174062632 SHD
//         movr (r) r4111.y, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4111.w, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  // 105 
//         madr (r) r25.w, (r) r24.w, (r) r14.z, (r) r4111  // 148102104 SHDOPT
//         movr (r) r4110, (r) c[3][0].xxyz  // 148102104 SHDOPT
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 148101640 SHDOPT
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 148101640 SHDOPT
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 148101640 SHDOPT
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 148101640 SHDOPT
//         mulr (r) r26.yzw, (r) r25.w, (r) r4110  // 148402448 
//         mulr (r) r26.yzw, (r) r26.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  // 148100712 SHD
//         ex2r (r) r4105.x, (r) r26.y  // 65535 
//         ex2r (r) r4105.y, (r) r26.z  // 65535 
//         ex2r (r) r4105.z, (r) r26.w  // 65535 
//         movr (r) r27.xyz, (r) r4105  // 65535 
//         madr (r) r27.w, (r) r27.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r27.y  //   2 SHDOPT
//         mulr (r) r26.xy, (r) r26.x, (r) r27.xwxx  // 148099320 SHD
//         movr (r) r4110, (r) c[3][3].xyzx  // 148099320 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 148099320 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  // 148099320 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 148098856 SHD
//         mulr (r) r27.xyz, (r) r26.y, (r) r4110  // 148098856 SHD
//         movr (r) r4109, (r) c[3][1].xyzx  // 148098392 SHDOPT
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 148450784 FPB0
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 148450784 FPB0
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 148097928 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 148097928 SHD
//         madr (r) r27.xyz, (r) r4109, (r) r26.x, (r) r27.xyzx  // 148097464 SHD
//         mulr (r) r27.xyz, (r) r27.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   1 
//         ex2r (r) r4105.x, (r) r27.x  //   1 
//         ex2r (r) r4105.y, (r) r27.y  //   1 
//         ex2r (r) r4105.z, (r) r27.z  //   1 
//         movr (r) r27.xyz, (r) r4105  // 148096536 SHD
//         mulr (r) r24.xyz, (r) r24.xyzx, (r) r27.xyzx  //   2 FPB1
//         mulr (r) r21.xyz, (r) r13.xyzx, (r) r24.w  // 148096072 
//         madr (r) r27, (r) r24.w, (r) r23, (r) r22  //   1 FPB0
//         divr (r) r4105.x, (r) r27.x, (r) r27.w  //   1 FPB0
//         divr (r) r4105.y, (r) r27.y, (r) r27.w  //   1 FPB0
//         divr (r) r4105.z, (r) r27.z, (r) r27.w  //   1 FPB0
//         movr (r) r27.xyz, (r) r4105  // 148095144 SHD
//         txgr (r) r4105, (r) r27.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #6, #0, 2D, LOD  // 148462816 
//         movr (r) r28.xyz, (r) r4105  // 148462816 
//         txgr (r) r4105, (r) r27.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 174060544 SHD
//         movr (r) r25.w, (r) r4105.yzwx  // 174060544 SHD
//         set_ger.c (s32) r25.w, (r) r25.w, (r) r27.z  // 174060544 SHD
//         andu32 (u32) r25.w, (u32) r25.w, (u32) constant(1065353216, 0, 0, 0).x  // 174060544 SHD
//         mulr (r) r27.xyz, (r) r25.w, (r) r28.xyzx  // 174060544 SHD
//         madr (r) r28.xyz, (r) -r24.w, (r) r13.xyzx, (r) c[1][8].xyzx  // 174060544 SHD
//         dp3r (r) r24.w, (r) r28.xyzx, (r) r28.xyzx  //  96 SHD
//         rsqr (r) r4105.w, (r) r24.w  //  96 SHD
//         movr (r) r25.w, (r) r4105  // 130 SHD
//         mulr (r) r28.xyz, (r) r25.w, (r) r28.xyzx  // 130 SHD
//         dp3r (r) r25.w, (r) r13.xyzx, (r) r28.xyzx  // 130 SHD
//         movr (r) r4109, (r) -c[3][3].w  // 174058040 SHD
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 174058040 SHD
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 174058040 SHD
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //  96 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 150 SHD
//         madr (r) r25.w, (r) r4109, (r) r25.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 150 SHD
//         mulr (r) r25.w, (r) r25.w, (r) r25.w  // 150 SHD
//         mulr (r) r25.w, (r) r25.w, (r) constant(12.56637096, 0.00000000, 0.00000000, 0.00000000).x  // 150 SHD
//         divr (r) r4105.w, (r) r15.w, (r) r25.w  // 150 SHD
//         movr (r) r25.w, (r) r4105  //   0 
//         divr (r) r4105.z, (r) r24.w, (r) r18.x  //   0 
//         movr (r) r26.z, (r) r4105  //   0 
//         madr (r) r26.z, (r) -r26.z, (r) r26.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         maxr (r) r26.z, (r) r26.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         addr (r) r24.w, (r) r24.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).w, (r) r24.w  // 174054512 SHD
//         movr (r) r24.w, (r) r4105  // 174054512 SHD
//         mulr (r) r27.xyz, (r) r26.z, (r) r27.xyzx  // 174054512 SHD
//         mulr (r) r27.xyz, (r) r24.w, (r) r27.xyzx  // 174054512 SHD
//         movr (r) r4109, (r) c[0][4]  // 174054512 SHD
//         movr (r) r4109.x, (r) constant(0.74684167, 0.00000000, 0.00000000, 0.00000000).x  // 174054512 SHD
//         movr (r) r4109.y, (r) constant(0.34621334, 0.00000000, 0.00000000, 0.00000000).x  //  16 SHD
//         movr (r) r4109.z, (r) constant(0.56777108, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.73082322, 0.00000000, 0.00000000, 0.00000000).x  // 174052656 SHD
//         dp4r (r) r28.x, (r) r4109, (r) r21  // 174052472 SHD
//         movr (r) r4109, (r) c[0][5]  // 174052472 SHD
//         movr (r) r4109.x, (r) constant(0.12666155, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76410079, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63254011, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r28.y, (r) r4109, (r) r21  //   0 SHD
//         movr (r) r4109, (r) c[0][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65282810, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54432201, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52681035, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.44052696, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r28.z, (r) r4109, (r) r21  //   0 SHD
//         addr (r) r21.xyz, (r) -r20.xyzx, (r) r28.xyzx  //   0 SHD
//         dp3r (r) r21.x, (r) r21.xyzx, (r) r21.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r21.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r21.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r21.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r21.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r21.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r21.y, (r) r21.x  //   0 SHD
//         movr (r) r21.y, (r) r4108  //   0 SHD
//         set_neur.c (s32) r21.z, (r) r21.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[3][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 174046160 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 174046160 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 174046160 SHD
//         mulr (r) r28.xyz, (r) r21.y, (r) r4110  // 174046160 SHD
//         mulr (r) r28.xyz, (r) r21.x, (r) r28.xyzx  // 174046160 SHD
//         mulr (r) r28.xyz, (r) r28.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 174046160 SHD
//         ex2r (r) r4105.x, (r) r28.x  // 174046160 SHD
//         ex2r (r) r4105.y, (r) r28.y  // 174046160 SHD
//         ex2r (r) r4105.z, (r) r28.z  // 174046160 SHD
//         movr (r) r28.xyz, (r) r4105  // 174046160 SHD
//         addr (r) r28.xyz, (r) -r28.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 
//         mulr (r) r28.xyz, (r) r18.yzwy, (r) r28.xyzx  //   0 
//         movr (r) r4110, (r) -c[3][0].xyzx  //   0 
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         mulr (r) r29.xyz, (r) r21.y, (r) r4110  //   0 
//         divr (r) r4105.x, (r) r28.x, (r) r29.x  //   0 
//         divr (r) r4105.y, (r) r28.y, (r) r29.y  //   0 
//         divr (r) r4105.z, (r) r28.z, (r) r29.z  // 174041520 SHD
//         movr (r) r28.xyz, (r) r4105  // 174041520 SHD
//         mulr (r) r29.xyz, (r) r18.yzwy, (r) r21.x  // 174041056 SHD
//         movs32.c (s32) hc, (s32) r21.z  // 174041056 SHD
//         movr (r) r4105, (r) r28.xyzx  // 174041056 SHD
//         movr (r) r4105(EQ), (r) r29.xyzx  // 130 FPB0
//         movr (r) r21.xyz, (r) r4105  //   0 SHD
//         madr (r) r21.y, (r) r21.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r21.y  //   0 SHD
//         movr (r) r4110, (r) c[3][3].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 174038736 SHD
//         mulr (r) r28.xyz, (r) r21.y, (r) r4110  // 174038736 SHD
//         movr (r) r4109, (r) c[3][1].xyzx  // 174038736 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 174038736 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 174038736 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 174038736 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 174038736 SHD
//         madr (r) r21.xyz, (r) r4109, (r) r21.x, (r) r28.xyzx  // 174038736 SHD
//         mulr (r) r21.xyz, (r) r21.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  // 174038736 SHD
//         ex2r (r) r4105.x, (r) r21.x  // 174038736 SHD
//         ex2r (r) r4105.y, (r) r21.y  // 174038736 SHD
//         ex2r (r) r4105.z, (r) r21.z  // 174038736 SHD
//         movr (r) r21.xyz, (r) r4105  // 174038736 SHD
//         mulr (r) r21.xyz, (r) r21.xyzx, (r) r27.xyzx  // 174038736 SHD
//         movr (r) r4110, (r) c[3][2].xyzx  // 174038736 SHD
//         movr (r) r4110.x, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //  22 SHD
//         movr (r) r4110.y, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //  22 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  // 130 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r27.xyz, (r) r25.w, (r) r4110  // 174034328 SHD
//         mulr (r) r26.yzw, (r) r26.y, (r) r27.xxyz  //   0 SHD
//         madr (r) r26.xyz, (r) r19.xyzx, (r) r26.x, (r) r26.yzwy  //   0 SHD
//         mulr (r) r21.xyz, (r) r21.xyzx, (r) r26.xyzx  //   0 SHD
//         madr (r) r25.xyz, (r) r21.xyzx, (r) r24.xyzx, (r) r25.xyzx  //   0 SHD
//         movr (r) r4110, (r) c[3][4].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 148093752 SHD
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 148093752 SHD
//         mulr (r) r21.x, (r) r20.w, (r) r4110  // 174033168 SHD
//         movu32 (u32) r19.w, (u32) r20.w  // 174033168 SHD
//         movu32 (u32) r20.w, (u32) r21.x  //   2 
//         l2:  //   2 
//         mulr (r) r14.xyz, (r) r25.xyzx, (r) c[1][9].xyzx  //   2 
//         set_ltr.c (s32) r12.y, (r) r12.y, (r) r12.x  // 148092360 SHD
//         set_ger.c (s32) r12.x, (r) r12.z, (r) r12.x  // 174032984 SHD
//         andu32 (u32) r12.x, (u32) r12.x, (u32) r12.y  // 65535 
//         movs32.c (s32) hc, (s32) r12.x  // 148091896 SHD
//         ife NE.x , l3, l4  // 148091896 SHD
//         movu32 (u32) r4106, (u32) r9.w  // 148091896 SHD
//         txgu32 (r) r4105, (u32) r9.xyww, (u32) r4106, #1, #0, 2D, LOAD  //   2 
//         movr (r) r12.xyz, (r) r4105  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(3212836864, 3212836864, 3212836864, 0)  // 148090968 SHD
//         madr (r) r12.xyz, (r) r12.xyzx, (r) constant(2.00000000, 2.00000000, 2.00000000, 0.00000000), (r) r4105  // 148090968 SHD
//         dp3r (r) r12.w, (r) r12.xyzx, (r) r12.xyzx  // 148090504 SHD
//         rsqr (r) r4105.w, (r) r12.w  // 148090504 SHD
//         movr (r) r12.w, (r) r4105  // 148090040 
//         mulr (r) r12.xyz, (r) r12.w, (r) r12.xyzx  // 148090040 
//         movu32 (u32) r4106, (u32) r9.w  // 148090040 
//         txgu32 (r) r4105, (u32) r9.xyww, (u32) r4106, #2, #0, 2D, LOAD  // 148090040 
//         movr (r) r15, (r) r4105  // 148090040 
//         movu32 (u32) r4106, (u32) r9.w  // 148090040 
//         txgu32 (r) r4105, (u32) r9.xyww, (u32) r4106, #3, #0, 2D, LOAD  // 173901848 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         movu32 (u32) r4106, (u32) r9.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r9, (u32) r4106, #4, #0, 2D, LOAD  //   1 SHD
//         movr (r) r9.x, (r) r4105  // 174108704 
//         dp4r (r) r17.x, (r) c[1][4], (r) r10  //   1 SHD
//         dp4r (r) r17.y, (r) c[1][5], (r) r10  // 174108660 
//         dp4r (r) r17.z, (r) c[1][6], (r) r10  //   1 SHD
//         dp4r (r) r9.y, (r) c[1][7], (r) r10  //   1 SHD
//         divr (r) r4105.y, (r) r17.x, (r) r9.y  //   1 SHD
//         divr (r) r4105.z, (r) r17.y, (r) r9.y  // 174109540 
//         divr (r) r4105.w, (r) r17.z, (r) r9.y  // 174109540 
//         movr (r) r9.yzw, (r) r4105  // 174109540 
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #6, #0, 2D, LOD  //   1 SHD
//         movr (r) r10.xyz, (r) r4105  // 174109760 
//         addr (r) r17.xy, (r) r9.w, (r) constant(-0.00010000, -0.00100000, 0.00000000, 0.00000000)  //   0 SHD
//         divr (r) r4105.w, (r) r17.y, (r) c[1][9].w  //   0 SHD
//         movr (r) r9.w, (r) r4105  //   0 SHD
//         mulr (r) r9.w, (r) r9.w, (r) constant(0.75000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r9.w, (r) r9.w, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, 0.66291302, 0.66291302, 0.00000000), (r) r9.yyzy  //   0 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  //   0 SHD
//         movr (r) r10.w, (r) r4105.yzwx  // 148021752 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, 0.00000000, 0.87500000, 0.00000000), (r) r9.yyzy  // 148021752 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148022120 SHD
//         movr (r) r12.w, (r) r4105.yzwx  // 148022120 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, -0.57452399, 0.57452399, 0.00000000), (r) r9.yyzy  // 148022616 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148022616 SHD
//         movr (r) r13.w, (r) r4105.yzwx  // 148022152 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, -0.75000000, 0.00000000, 0.00000000), (r) r9.yyzy  // 148022152 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148023048 
//         movr (r) r14.w, (r) r4105.yzwx  // 148023048 
//         set_ger.c (s32) r10.w, (r) r10.w, (r) r17.x  // 148023048 
//         andu32 (u32) r10.w, (u32) r10.w, (u32) constant(1065353216, 0, 0, 0).x  // 148023048 
//         set_ger.c (s32) r12.w, (r) r12.w, (r) r17.x  // 148023464 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  // 148023464 SHD
//         addr (r) r10.w, (r) r10.w, (r) r12.w  // 148023464 SHD
//         set_ger.c (s32) r12.w, (r) r13.w, (r) r17.x  // 148023464 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  // 148025320 SHD
//         addr (r) r10.w, (r) r10.w, (r) r12.w  // 148025320 SHD
//         set_ger.c (s32) r12.w, (r) r14.w, (r) r17.x  // 148039784 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  // 148039784 SHD
//         addr (r) r10.w, (r) r10.w, (r) r12.w  // 148039784 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, 1.00000000, 0.00000000, 0.00000000), (r) r9.yyzy  // 148039784 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148026664 SHDOPT
//         movr (r) r12.w, (r) r4105.yzwx  // 148026664 SHDOPT
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, -0.48613599, -0.48613599, 0.00000000), (r) r9.yyzy  // 148027144 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148027144 SHD
//         movr (r) r13.w, (r) r4105.yzwx  // 148027656 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, 0.00000000, -0.62500000, 0.00000000), (r) r9.yyzy  // 148027656 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148027656 SHD
//         movr (r) r14.w, (r) r4105.yzwx  // 148027656 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, 0.39774799, -0.39774799, 0.00000000), (r) r9.yyzy  // 148027656 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148027656 SHD
//         movr (r) r17.y, (r) r4105.yxzw  // 148027656 SHD
//         set_ger.c (s32) r12.w, (r) r12.w, (r) r17.x  // 148027656 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  // 148027656 SHD
//         set_ger.c (s32) r13.w, (r) r13.w, (r) r17.x  // 148027656 SHD
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  // 148029896 SHDOPT
//         addr (r) r12.w, (r) r12.w, (r) r13.w  // 148029896 SHDOPT
//         set_ger.c (s32) r13.w, (r) r14.w, (r) r17.x  // 148030408 SHDOPT
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  // 148030408 SHDOPT
//         addr (r) r12.w, (r) r12.w, (r) r13.w  // 148030408 SHDOPT
//         set_ger.c (s32) r13.w, (r) r17.y, (r) r17.x  // 148030408 SHDOPT
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  // 148030408 SHDOPT
//         addr (r) r12.w, (r) r12.w, (r) r13.w  // 148030408 SHDOPT
//         addr (r) r10.w, (r) r10.w, (r) r12.w  // 148030408 SHDOPT
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, 0.50000000, 0.00000000, 0.00000000), (r) r9.yyzy  // 148030408 SHDOPT
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148032232 SHDOPT
//         movr (r) r12.w, (r) r4105.yzwx  // 148032232 SHDOPT
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, 0.13519500, 0.41608700, 0.00000000), (r) r9.yyzy  // 148032232 SHDOPT
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148032232 SHDOPT
//         movr (r) r13.w, (r) r4105.yzwx  // 148033144 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, -0.30338100, 0.22041900, 0.00000000), (r) r9.yyzy  // 148033144 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148033608 SHD
//         movr (r) r14.w, (r) r4105.yzwx  // 148033608 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, -0.25281799, -0.18368299, 0.00000000), (r) r9.yyzy  // 148034088 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148034088 SHD
//         movr (r) r17.y, (r) r4105.yxzw  // 148034088 SHD
//         set_ger.c (s32) r12.w, (r) r12.w, (r) r17.x  // 148034088 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  // 148034088 SHD
//         set_ger.c (s32) r13.w, (r) r13.w, (r) r17.x  // 148034088 SHD
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  // 148035432 SHDOPT
//         addr (r) r12.w, (r) r12.w, (r) r13.w  // 148035432 SHDOPT
//         set_ger.c (s32) r13.w, (r) r14.w, (r) r17.x  // 148035880 SHDOPT
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  // 148035880 SHDOPT
//         addr (r) r12.w, (r) r12.w, (r) r13.w  // 148035880 SHDOPT
//         set_ger.c (s32) r13.w, (r) r17.y, (r) r17.x  // 148035880 SHDOPT
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  // 148036792 SHD
//         addr (r) r12.w, (r) r12.w, (r) r13.w  // 148036792 SHD
//         addr (r) r10.w, (r) r10.w, (r) r12.w  // 148036792 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, 0.07725400, -0.23776400, 0.00000000), (r) r9.yyzy  // 148036792 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148036792 SHD
//         movr (r) r12.w, (r) r4105.yzwx  // 148036792 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, 0.18750000, 0.00000000, 0.00000000), (r) r9.yyzy  // 148036792 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148036792 SHD
//         movr (r) r13.w, (r) r4105.yzwx  // 148039000 SHD
//         madr (r) r17.yz, (r) r9.w, (r) constant(0.00000000, -0.06250000, 0.10825300, 0.00000000), (r) r9.yyzy  // 148039000 SHD
//         txgr (r) r4105, (r) r17.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148039000 SHD
//         movr (r) r14.w, (r) r4105.yzwx  // 148039000 SHD
//         madr (r) r9.yz, (r) r9.w, (r) constant(0.00000000, -0.03125000, -0.05412700, 0.00000000), (r) r9.yyzy  // 148039000 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #1, 2D, LOD  // 148039000 SHD
//         movr (r) r9.y, (r) r4105.yxzw  // 148040392 SHDOPT
//         set_ger.c (s32) r9.z, (r) r12.w, (r) r17.x  // 148040392 SHDOPT
//         set_ger.c (s32) r9.w, (r) r13.w, (r) r17.x  // 148040648 FPB0
//         andu32 (u32) r9.zw, (u32) r9.zzzw, (u32) constant(0, 0, 1065353216, 1065353216)  // 148040648 FPB0
//         addr (r) r9.z, (r) r9.w, (r) r9.z  // 148041304 SHDOPT
//         set_ger.c (s32) r9.w, (r) r14.w, (r) r17.x  // 148041304 SHDOPT
//         andu32 (u32) r9.w, (u32) r9.w, (u32) constant(1065353216, 0, 0, 0).x  // 148041304 SHDOPT
//         addr (r) r9.z, (r) r9.w, (r) r9.z  // 148041304 SHDOPT
//         set_ger.c (s32) r9.y, (r) r9.y, (r) r17.x  // 148042040 SHD
//         andu32 (u32) r9.y, (u32) r9.y, (u32) constant(1065353216, 0, 0, 0).x  // 148042040 SHD
//         addr (r) r9.y, (r) r9.y, (r) r9.z  //   0 SHDOPT
//         addr (r) r9.y, (r) r9.y, (r) r10.w  //   0 SHDOPT
//         mulr (r) r9.y, (r) r9.y, (r) constant(0.06250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         mulr (r) r10.xyz, (r) r10.xyzx, (r) c[1][9].xyzx  //   0 SHDOPT
//         mulr (r) r9.yzw, (r) r9.y, (r) r10.xxyz  // 148043416 
//         movr (r) r4109, (r) -c[1][10].xyzx  // 148043416 
//         movr (r) r4109.x, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  // 148043416 
//         movr (r) r4109.y, (r) -constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  // 148043416 
//         movr (r) r4109.z, (r) -constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  // 148043416 
//         movr (r) r4109.w, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  // 148043416 
//         addr (r) r10.xyz, (r) r4109, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  // 148043416 
//         movr (r) r4111, (r) c[1][10].xyzx  // 148043416 
//         movr (r) r4111.x, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  // 148043416 
//         movr (r) r4111.y, (r) constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  // 148043416 
//         movr (r) r4111.z, (r) constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  // 148043416 
//         movr (r) r4111.w, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  // 148043416 
//         madr (r) r10.xyz, (r) r9.x, (r) r10.xyzx, (r) r4111  // 148043416 
//         mulr (r) r9.xyz, (r) r9.yzwy, (r) r10.xyzx  // 148043416 
//         addr (r) r10.xyz, (r) -r11.xyzx, (r) c[1][8].xyzx  // 148044344 SHD
//         dp3r (r) r9.w, (r) r10.xyzx, (r) r10.xyzx  // 148044344 SHD
//         rsqr (r) r4105.w, (r) r9.w  // 148044792 SHD
//         movr (r) r10.w, (r) r4105  // 148044792 SHD
//         mulr (r) r17.xyz, (r) r10.w, (r) r10.xyzx  // 148045496 SHD
//         divr (r) r4105.w, (r) r9.w, (r) r18.x  // 148045496 SHD
//         movr (r) r12.w, (r) r4105  // 148045960 SHDOPT
//         madr (r) r12.w, (r) -r12.w, (r) r12.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 148045960 SHDOPT
//         maxr (r) r12.w, (r) r12.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 148046408 SHD
//         mulr (r) r9.xyz, (r) r9.xyzx, (r) r12.w  // 148046408 SHD
//         divr (r) r4105.x, (r) r9.x, (r) r9.w  // 148046888 SHDOPT
//         divr (r) r4105.y, (r) r9.y, (r) r9.w  // 148046888 SHDOPT
//         divr (r) r4105.z, (r) r9.z, (r) r9.w  // 148047160 SHD
//         movr (r) r9.xyz, (r) r4105  // 148047160 SHD
//         movu32 (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHDOPT
//         movr (r) r4109, (r) c[0][4]  //   0 SHDOPT
//         movr (r) r4109.x, (r) constant(0.74684167, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4109.y, (r) constant(0.34621334, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4109.z, (r) constant(0.56777108, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4109.w, (r) constant(-0.73082322, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         dp4r (r) r19.x, (r) r4109, (r) r11  //   0 SHDOPT
//         movr (r) r4109, (r) c[0][5]  //   0 SHDOPT
//         movr (r) r4109.x, (r) constant(0.12666155, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4109.y, (r) constant(0.76410079, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4109.z, (r) constant(-0.63254011, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(206.16235352, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r19.y, (r) r4109, (r) r11  // 148048088 SHDOPT
//         movr (r) r4109, (r) c[0][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65282810, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54432201, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52681035, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.44052696, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r19.z, (r) r4109, (r) r11  //   0 SHD
//         addr (r) r11.xyz, (r) -r20.xyzx, (r) r19.xyzx  // 148048600 SHD
//         dp3r (r) r9.w, (r) r11.xyzx, (r) r11.xyzx  // 148048600 SHD
//         rsqr (r) r4106.x, (r) r9.w  // 148049128 
//         rsqr (r) r4106.y, (r) r9.w  // 148049128 
//         rsqr (r) r4106.z, (r) r9.w  // 148049128 
//         rsqr (r) r4106.w, (r) r9.w  // 148049128 
//         movr (r) r4105, (r) r4106  // 148049128 
//         rcpr (r) r4107.w, (r) r4105.w  //   0 
//         movr (r) r9.w, (r) r4107  // 148050536 SHD
//         divr (r) r4108.x, (r) r11.y, (r) r9.w  // 148050536 SHD
//         movr (r) r11.x, (r) r4108  // 148050936 SHD
//         set_neur.c (s32) r11.y, (r) r11.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 148050936 SHD
//         movr (r) r4110, (r) c[3][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r19.xyz, (r) r11.x, (r) r4110  // 148051512 SHDOPT
//         mulr (r) r19.xyz, (r) r9.w, (r) r19.xyzx  // 148051512 SHDOPT
//         mulr (r) r19.xyz, (r) r19.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 148051624 SHD
//         ex2r (r) r4105.x, (r) r19.x  // 148051624 SHD
//         ex2r (r) r4105.y, (r) r19.y  // 148048952 SHDOPT
//         ex2r (r) r4105.z, (r) r19.z  // 148048952 SHDOPT
//         movr (r) r19.xyz, (r) r4105  // 148052088 SHD
//         addr (r) r19.xyz, (r) -r19.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  // 148052088 SHD
//         mulr (r) r19.xyz, (r) r18.yzwy, (r) r19.xyzx  // 148052216 SHD
//         movr (r) r4110, (r) -c[3][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.xzw, (r) r11.x, (r) r4110  //   0 SHD
//         divr (r) r4105.x, (r) r19.x, (r) r11.x  //   0 SHD
//         divr (r) r4105.z, (r) r19.y, (r) r11.z  //   0 SHD
//         divr (r) r4105.w, (r) r19.z, (r) r11.w  // 148289496 SHD
//         movr (r) r11.xzw, (r) r4105  //   2 SHD
//         mulr (r) r18.xyz, (r) r9.w, (r) r18.yzwy  //   2 SHD
//         movs32.c (s32) hc, (s32) r11.y  //   2 
//         movr (r) r4105, (r) r11.xzwx  //   0 SHD
//         movr (r) r4105(EQ), (r) r18.xyzx  //   0 SHD
//         movr (r) r11.xyz, (r) r4105  //   0 SHD
//         madr (r) r9.w, (r) r11.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r11.y  //   2 SHD
//         movr (r) r4110, (r) c[3][3].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.yzw, (r) r9.w, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[3][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r11.xyz, (r) r4109, (r) r11.x, (r) r11.yzwy  //   2 
//         mulr (r) r11.xyz, (r) r11.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r11.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r11.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r11.z  //   2 SHD
//         movr (r) r11.xyz, (r) r4105  //   0 SHD
//         mulr (r) r9.xyz, (r) r9.xyzx, (r) r11.xyzx  //   2 
//         mulr (r) r9.w, (r) r15.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r11.x, (r) r12.xyzx, (r) -r13.xyzx  //   0 SHD
//         dp3r (r) r11.z, (r) r12.xyzx, (r) r17.xyzx  //   0 SHD
//         movr_sat (r) r11.yw, (r) r11.xxxz  //   2 SHD
//         addr (r) r12.w, (r) -r11.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB0
//         rsqr (r) r4106.x, (r) r12.w  //   2 
//         rsqr (r) r4106.y, (r) r12.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r12.w  //   0 SHD
//         rsqr (r) r4106.w, (r) r12.w  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 
//         movr (r) r12.w, (r) r4107  //   8 
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  // 548864 SHD
//         madr (r) r13.w, (r) r11.y, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  // 548864 SHD
//         madr (r) r13.w, (r) r13.w, (r) r11.y, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  // 148435840 SHD
//         madr (r) r13.w, (r) r13.w, (r) r11.y, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  //   8 SHD
//         mulr (r) r12.w, (r) r12.w, (r) r13.w  //   8 SHD
//         addr (r) r13.w, (r) -r11.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         rsqr (r) r4106.x, (r) r13.w  //   0 SHD
//         rsqr (r) r4106.y, (r) r13.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r13.w  // 148437696 SHD
//         rsqr (r) r4106.w, (r) r13.w  //   8 SHD
//         movr (r) r4105, (r) r4106  //   8 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   2 
//         movr (r) r13.w, (r) r4107  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  //   0 SHD
//         madr (r) r14.w, (r) r11.w, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  // 148439552 SHD
//         madr (r) r14.w, (r) r14.w, (r) r11.w, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  //  14 SHD
//         madr (r) r14.w, (r) r14.w, (r) r11.w, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  //  14 SHD
//         mulr (r) r13.w, (r) r13.w, (r) r14.w  //   0 SHD
//         maxr (r) r14.w, (r) r12.w, (r) r13.w  //   0 SHD
//         minr (r) r12.w, (r) r12.w, (r) r13.w  //   0 SHD
//         madr (r) r18.xyz, (r) -r12.xyzx, (r) r11.y, (r) -r13.xyzx  //   0 SHD
//         dp3r (r) r11.y, (r) r18.xyzx, (r) r18.xyzx  //   1 SHD
//         rsqr (r) r4105.y, (r) r11.y  //   1 SHD
//         movr (r) r11.y, (r) r4105  //   0 SHD
//         mulr (r) r18.xyz, (r) r11.y, (r) r18.xyzx  //   0 SHD
//         madr (r) r17.xyz, (r) -r12.xyzx, (r) r11.w, (r) r17.xyzx  //   0 SHD
//         dp3r (r) r11.y, (r) r17.xyzx, (r) r17.xyzx  //   0 SHD
//         rsqr (r) r4105.y, (r) r11.y  //   1 SHD
//         movr (r) r11.y, (r) r4105  //   1 SHD
//         mulr (r) r17.xyz, (r) r11.y, (r) r17.xyzx  //   0 SHD
//         dp3r (r) r11.y, (r) r18.xyzx, (r) r17.xyzx  //   0 SHD
//         mulr (r) r13.w, (r) r9.w, (r) r9.w  //   0 SHD
//         madr (r) r17.xyz, (r) r9.w, (r) r9.w, (r) constant(0.33000001, 0.09000000, 0.09000000, 0.00000000)  //   0 SHD
//         divr (r) r4105.x, (r) r13.w, (r) r17.x  //   1 SHD
//         divr (r) r4105.y, (r) r13.w, (r) r17.y  //   1 SHD
//         divr (r) r4105.z, (r) r13.w, (r) r17.z  //   0 SHD
//         movr (r) r17.xyz, (r) r4105  //   0 SHD
//         mulr (r) r17.yz, (r) r17.yyzy, (r) constant(0.00000000, 0.44999999, 0.12500000, 0.00000000)  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         madr (r) r9.w, (r) -r17.x, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   1 SHD
//         set_ger.c (s32) r13.w, (r) r11.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4105, (r) r14.w  //   0 SHD
//         sinr (r) r4106.w, (r) r4105.w  //   0 SHD
//         movr (r) r15.w, (r) r4106  //   0 SHD
//         mulr (r) r17.x, (r) r12.w, (r) constant(0.63661975, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r17.w, (r) r17.x, (r) r17.x  //   1 SHD
//         madr (r) r17.x, (r) -r17.x, (r) r17.w, (r) r15.w  //   1 SHD
//         movs32.c (s32) hc, (s32) r13.w  //   0 SHD
//         movr (r) r4105, (r) r15.w  //   0 SHD
//         movr (r) r4105(EQ), (r) r17.x  //   0 SHD
//         movr (r) r13.w, (r) r4105  //   0 SHD
//         mulr (r) r13.w, (r) r13.w, (r) r17.y  //   1 SHD
//         mulr (r) r15.w, (r) r14.w, (r) r12.w  //   1 SHD
//         mulr (r) r15.w, (r) r15.w, (r) constant(0.40528473, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r15.w, (r) r15.w, (r) r15.w  //   0 SHD
//         mulr (r) r15.w, (r) r15.w, (r) r17.z  //   0 SHD
//         mulr (r) r13.w, (r) r11.y, (r) r13.w  //   0 SHD
//         movr (r) r4105, (r) r12.w  //   1 SHD
//         sinr (r) r4106.x, (r) r4105.x  //   1 SHD
//         movr (r) r17.x, (r) r4106  //   0 SHD
//         cosr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r18.x, (r) r4107  //   0 SHD
//         divr (r) r4105.x, (r) r17.x, (r) r18.x  //   0 SHD
//         movr (r) r17.x, (r) r4105  //   0 SHD
//         addr (r) r11.y, (r) -|r11.y|, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.y, (r) r15.w, (r) r11.y  //   0 SHD
//         addr (r) r12.w, (r) r12.w, (r) r14.w  //   0 SHD
//         mulr (r) r12.w, (r) r12.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4105, (r) r12.w  //   0 SHD
//         sinr (r) r4106.x, (r) r4105.x  //   0 SHD
//         movr (r) r18.x, (r) r4106  // 50462976 
//         cosr (r) r4107.x, (r) r4105.x  // 50462976 
//         movr (r) r19.x, (r) r4107  //   0 SHD
//         divr (r) r4105.w, (r) r18.x, (r) r19.x  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         madr (r) r9.w, (r) r13.w, (r) r17.x, (r) r9.w  //   0 SHD
//         madr (r) r9.w, (r) r11.y, (r) r12.w, (r) r9.w  //   0 SHD
//         mulr (r) r9.w, (r) r9.w, (r) constant(0.31830987, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.y, (r) r16.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r10.xyz, (r) r10.xyzx, (r) r10.w, (r) -r13.xyzx  //   0 SHD
//         dp3r (r) r10.w, (r) r10.xyzx, (r) r10.xyzx  // 50462976 SHDOPT
//         rsqr (r) r4105.w, (r) r10.w  // 255 SHD
//         movr (r) r10.w, (r) r4105  // 255 SHD
//         mulr (r) r10.xyz, (r) r10.w, (r) r10.xyzx  //   0 SHD
//         maxr (r) r10.w, (r) r11.x, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         maxr (r) r11.x, (r) r11.z, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r11.z, (r) r12.xyzx, (r) r10.xyzx  //   0 SHD
//         maxr (r) r11.z, (r) r11.z, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r10.x, (r) -r13.xyzx, (r) r10.xyzx  //   0 SHD
//         mulr (r) r10.yz, (r) r11.yyzy, (r) r11.yyzy  //   0 SHD
//         madr (r) r11.y, (r) r11.z, (r) r11.z, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.x, (r) r10.y, (r) r10.z  //   0 SHD
//         divr (r) r4105.y, (r) r11.y, (r) r12.x  //   0 SHD
//         movr (r) r11.y, (r) r4105  //   0 SHD
//         mulr (r) r11.y, (r) r11.y, (r) constant(1.44269502, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 
//         ex2r (r) r4105.y, (r) r11.y  // 50462976 
//         movr (r) r11.y, (r) r4105  //   0 SHD
//         mulr (r) r10.y, (r) r10.y, (r) constant(4.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 16384 SHD
//         mulr (r) r10.z, (r) r10.z, (r) r10.z  // 148343176 SHD
//         mulr (r) r10.y, (r) r10.z, (r) r10.y  // 148343176 SHD
//         divr (r) r4105.y, (r) r11.y, (r) r10.y  //   0 SHD
//         movr (r) r10.y, (r) r4105  //   0 SHD
//         minr (r) r10.z, (r) r10.w, (r) r11.x  //   0 SHD
//         dp2r (r) r10.z, (r) r11.z, (r) r10.z  //   0 SHD
//         divr (r) r4105.x, (r) r10.z, (r) r10.x  // 50462976 
//         movr (r) r10.x, (r) r4105  // 255 SHD
//         minr (r) r10.x, (r) r10.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         mulr (r) r10.x, (r) r10.x, (r) r10.y  //   0 SHD
//         mulr (r) r10.y, (r) r10.w, (r) r11.x  //   2 SHD
//         divr (r) r4105.x, (r) r10.x, (r) r10.y  //   0 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         mulr (r) r10.xyz, (r) r10.x, (r) r16.xyzx  //   0 SHD
//         madr (r) r10.xyz, (r) r15.xyzx, (r) r9.w, (r) r10.xyzx  //   0 SHD
//         mulr (r) r9.xyz, (r) r9.xyzx, (r) r10.xyzx  //   0 
//         mulr (r) r9.xyz, (r) r11.w, (r) r9.xyzx  //   0 
//         mulr (r) r9.xyz, (r) r24.xyzx, (r) r9.xyzx  //   0 
//         l3:  // 148087720 
//         movu32 (u32) r9.xyz, (u32) constant(0, 0, 0, 0)  //   0 
//         l4:  // 148088184 SHD
//         l0:  // 148088184 SHD
//         movu32 (u32) r9.xyz, (u32) constant(0, 0, 0, 0)  // 148088184 SHD
//         movu32 (u32) r14.xyz, (u32) constant(0, 0, 0, 0)  // 148348136 
//         l1:  // 148348136 
//         maxr (r) r0.xyz, (r) r9.xyzx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)  // 187 SHDOPT
//         maxr (r) r2.xyz, (r) r14.xyzx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)  // 148089576 SHD
//         ret   // 148089576 SHD
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	IPA.PASS R0, a[0x70];            # [  0][000000] POSITION_X
//     	F2I.TRUNC R0, R0;                # [  1][000008]
//     	IPA.PASS R1, a[0x74];            # [  2][000010] POSITION_Y
//     	F2I.TRUNC R1, R1;                # [  3][000018]
//     	IPA.PASS R2, a[0x70];            # [  4][000020] POSITION_X
//     	TLD.LZ.P R5, R0, 0x0, 2D, 0x1;   # [  5][000028]
//     	FMUL.FTZ R8, RZ, R2;             # [  6][000030]
//     	IPA.PASS R3, a[0x74];            # [  7][000038] POSITION_Y
//     	FMUL.FTZ R7, RZ, R3;             # [  8][000040]
//     	SSY L1970;                       # [  9][000048]
//     	FADD.FTZ R4, R8, R7;             # [ 10][000050]
//     	FFMA.FTZ R2, R2, c[0x10][0x0], R7; # [ 11][000058]
//     	FFMA.FTZ R3, R3, c[0x10][0x4], R8; # [ 12][000060]
//     	FFMA.FTZ R6, R5, c[0x10][0x8], R4; # [ 13][000068]
//     	FFMA.FTZ R2, RZ, R5, R2;         # [ 14][000070]
//     	FADD32I.FTZ R7, R6, 0x41200001;  # [ 15][000078]
//     	FFMA.FTZ R6, RZ, R5, R3;         # [ 16][000080]
//     	FADD32I.FTZ R12, R2, 0xbf3340cd; # [ 17][000088]
//     	MUFU.RCP R3, R7;                 # [ 18][000090]
//     	FFMA.FTZ R2, RZ, R5, R4;         # [ 19][000098]
//     	FADD32I.FTZ R10, R6, 0x3ec9a8e5; # [ 20][0000a0]
//     	FMUL.FTZ R15, R12, R3;           # [ 21][0000a8]
//     	FADD.FTZ R8, R2, -1;             # [ 22][0000b0]
//     	FMUL.FTZ R16, R10, R3;           # [ 23][0000b8]
//     	FMUL.FTZ R2, R15, R15;           # [ 24][0000c0]
//     	FMUL.FTZ R14, R8, R3;            # [ 25][0000c8]
//     	FFMA.FTZ R2, R16, R16, R2;       # [ 26][0000d0]
//     	FFMA.FTZ R2, R14, R14, R2;       # [ 27][0000d8]
//     	MUFU.RSQ R2, R2;                 # [ 28][0000e0]
//     	MUFU.RCP R21, R2;                # [ 29][0000e8]
//     	MUFU.RCP R2, R21;                # [ 30][0000f0]
//     	FMNMX.FTZ R6, R21, 100000, PT;   # [ 31][0000f8]
//     	FMUL.FTZ R37, R15, R2;           # [ 32][000100]
//     	FMUL.FTZ R36, R16, R2;           # [ 33][000108]
//     	FMUL.FTZ R35, R14, R2;           # [ 34][000110]
//     	FMUL.FTZ R3, R37, c[0x1][0xb0];  # [ 35][000118]
//     	FFMA.FTZ R2, R36, c[0x1][0xb4], R3; # [ 36][000120]
//     	FFMA.FTZ R4, R35, c[0x1][0xb8], R2; # [ 37][000128]
//     	FMUL.FTZ R2, R37, c[0x1][0xc0];  # [ 38][000130]
//     	MUFU.RCP R3, R4;                 # [ 39][000138]
//     	FFMA.FTZ R2, R36, c[0x1][0xc4], R2; # [ 40][000140]
//     	FSETP.LT.FTZ.AND P0, PT, R4, RZ, PT; # [ 41][000148]
//     	FMUL.FTZ R5, R3, -c[0x1][0xbc];  # [ 42][000150]
//     	FFMA.FTZ R3, R35, c[0x1][0xc8], R2; # [ 43][000158]
//     	FMNMX.FTZ R5, R5, c[0x10][0xc], !PT; # [ 44][000160]
//     	MUFU.RCP R11, R3;                # [ 45][000168]
//     	FMUL.FTZ R2, R37, c[0x1][0xd0];  # [ 46][000170]
//     	FMNMX.FTZ R9, R6, R5, PT;        # [ 47][000178]
//     	FMUL.FTZ R13, R11, -c[0x1][0xcc]; # [ 48][000180]
//     	FSETP.LT.FTZ.AND P1, PT, R3, RZ, PT; # [ 49][000188]
//     	FCMP.LEU.FTZ R11, R6, R9, R4;    # [ 50][000190]
//     	FFMA.FTZ R2, R36, c[0x1][0xd4], R2; # [ 51][000198]
//     	@!P0 MOV32I R9, 0x3dcccccd;      # [ 52][0001a0]
//     	FCMP.GEU.FTZ R11, R11, R6, R4;   # [ 53][0001a8]
//     	FFMA.FTZ R5, R35, c[0x1][0xd8], R2; # [ 54][0001b0]
//     	FMNMX.FTZ R4, R9, R13, !PT;      # [ 55][0001b8]
//     	FMUL.FTZ R2, R37, c[0x1][0xe0];  # [ 56][0001c0]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R3, PT; # [ 57][0001c8]
//     	MUFU.RCP R13, R5;                # [ 58][0001d0]
//     	FMNMX.FTZ R6, R11, R4, PT;       # [ 59][0001d8]
//     	FFMA.FTZ R2, R36, c[0x1][0xe4], R2; # [ 60][0001e0]
//     	FCMP.GEU.FTZ R3, R9, R6, R3;     # [ 61][0001e8]
//     	FMUL.FTZ R9, R13, -c[0x1][0xdc]; # [ 62][0001f0]
//     	@!P1 SEL R11, R11, R6, !P0;      # [ 63][0001f8]
//     	FFMA.FTZ R4, R35, c[0x1][0xe8], R2; # [ 64][000200]
//     	FMNMX.FTZ R6, R3, R9, !PT;       # [ 65][000208]
//     	FMUL.FTZ R2, R37, c[0x1][0xf0];  # [ 66][000210]
//     	FMNMX.FTZ R6, R11, R6, PT;       # [ 67][000218]
//     	MUFU.RCP R13, R4;                # [ 68][000220]
//     	FCMP.LEU.FTZ R9, R11, R6, R5;    # [ 69][000228]
//     	FFMA.FTZ R2, R36, c[0x1][0xf4], R2; # [ 70][000230]
//     	FCMP.GEU.FTZ R6, R3, R6, R5;     # [ 71][000238]
//     	FMUL.FTZ R13, R13, -c[0x1][0xec]; # [ 72][000240]
//     	FCMP.GEU.FTZ R9, R9, R11, R5;    # [ 73][000248]
//     	FFMA.FTZ R3, R35, c[0x1][0xf8], R2; # [ 74][000250]
//     	FSETP.LT.FTZ.AND P1, PT, R4, RZ, PT; # [ 75][000258]
//     	FMNMX.FTZ R2, R6, R13, !PT;      # [ 76][000260]
//     	MUFU.RCP R11, R3;                # [ 77][000268]
//     	FMNMX.FTZ R5, R9, R2, PT;        # [ 78][000270]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R4, PT; # [ 79][000278]
//     	FMUL.FTZ R2, R37, c[0x1][0x100]; # [ 80][000280]
//     	FCMP.GEU.FTZ R4, R6, R5, R4;     # [ 81][000288]
//     	FMUL.FTZ R11, R11, -c[0x1][0xfc]; # [ 82][000290]
//     	@!P1 SEL R9, R9, R5, !P0;        # [ 83][000298]
//     	FFMA.FTZ R2, R36, c[0x1][0x104], R2; # [ 84][0002a0]
//     	FMNMX.FTZ R5, R4, R11, !PT;      # [ 85][0002a8]
//     	FFMA.FTZ R2, R35, c[0x1][0x108], R2; # [ 86][0002b0]
//     	FMNMX.FTZ R5, R9, R5, PT;        # [ 87][0002b8]
//     	MUFU.RCP R11, R2;                # [ 88][0002c0]
//     	FCMP.LEU.FTZ R6, R9, R5, R3;     # [ 89][0002c8]
//     	FCMP.GEU.FTZ R4, R4, R5, R3;     # [ 90][0002d0]
//     	FCMP.GEU.FTZ R22, R6, R9, R3;    # [ 91][0002d8]
//     	FMUL.FTZ R5, R11, -c[0x1][0x10c]; # [ 92][0002e0]
//     	FSETP.LT.FTZ.AND P1, PT, R2, RZ, PT; # [ 93][0002e8]
//     	FMNMX.FTZ R3, R4, R5, !PT;       # [ 94][0002f0]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R2, PT; # [ 95][0002f8]
//     	FMNMX.FTZ R3, R22, R3, PT;       # [ 96][000300]
//     	@!P1 SEL R22, R22, R3, !P0;      # [ 97][000308]
//     	FCMP.GEU.FTZ R23, R4, R3, R2;    # [ 98][000310]
//     	FSETP.LT.FTZ.AND P0, PT, R23, R22, PT; # [ 99][000318]
//     	@!P0 BRA L1940;                  # [100][000320]
//     	MOV R13, c[0x1][0x80];           # [101][000328]
//     	IPA.PASS R2, a[0x70];            # [102][000330] POSITION_X
//     	IPA.PASS R3, a[0x74];            # [103][000338] POSITION_Y
//     	F2I.U32.TRUNC R2, R2;            # [104][000340]
//     	F2I.U32.TRUNC R3, R3;            # [105][000348]
//     	LOP.AND R2, R2, 0x3;             # [106][000350]
//     	LOP.AND R3, R3, 0x3;             # [107][000358]
//     	FMNMX.FTZ R25, R23, 1, !PT;      # [108][000360]
//     	TLD.LZ.P R30, R2, 0x5, 2D, 0x1;  # [109][000368]
//     	FMUL32I.FTZ R2, R37, 0x3e01b391; # [110][000370]
//     	MOV R31, c[0x1][0x84];           # [111][000378]
//     	FMUL.FTZ R29, R13, c[0x10][0x18]; # [112][000380]
//     	FFMA.FTZ R3, R36, c[0x10][0x10], R2; # [113][000388]
//     	FMUL.FTZ R9, R37, c[0x1][0x50];  # [114][000390]
//     	FMNMX.FTZ R20, R22, 100, PT;     # [115][000398]
//     	FMUL.FTZ R2, R13, c[0x10][0x24]; # [116][0003a0]
//     	FMUL.FTZ R28, R13, c[0x10][0x28]; # [117][0003a8]
//     	FMUL.FTZ R11, R37, c[0x1][0x40]; # [118][0003b0]
//     	SSY L0d30;                       # [119][0003b8]
//     	FMUL.FTZ R6, R37, c[0x1][0x60];  # [120][0003c0]
//     	MOV R19, RZ;                     # [121][0003c8]
//     	FFMA.FTZ R33, R31, c[0x10][0x1c], R29; # [122][0003d0]
//     	FFMA.FTZ R24, R35, c[0x10][0x14], R3; # [123][0003d8]
//     	FMUL.FTZ R4, R37, c[0x1][0x70];  # [124][0003e0]
//     	FMUL32I.FTZ R38, R24, 0xba5a740e; # [125][0003e8]
//     	FFMA.FTZ R26, R36, c[0x1][0x54], R9; # [126][0003f0]
//     	FMUL32I.FTZ R42, R24, 0x3a5a740e; # [127][0003f8]
//     	FFMA.FTZ R29, R31, c[0x10][0x10], R2; # [128][000400]
//     	FSETP.NEU.FTZ.AND P0, PT, R24, RZ, PT; # [129][000408]
//     	FFMA.FTZ R27, R36, c[0x1][0x44], R11; # [130][000410]
//     	FADD.FTZ R2, R25, -1;            # [131][000418]
//     	FFMA.FTZ R9, R31, c[0x10][0x2c], R28; # [132][000420]
//     	FMNMX.FTZ R3, R2, RZ, !PT;       # [133][000428]
//     	FFMA.FTZ R13, R36, c[0x1][0x64], R6; # [134][000430]
//     	MUFU.LG2 R28, R25;               # [135][000438]
//     	FFMA.FTZ R11, R36, c[0x1][0x74], R4; # [136][000440]
//     	FADD32I.FTZ R31, R24, 0x434e2990; # [137][000448]
//     	FFMA.FTZ R4, R35, c[0x1][0x68], R13; # [138][000450]
//     	FMUL.FTZ R41, R3, R38;           # [139][000458]
//     	FFMA.FTZ R2, R35, c[0x1][0x78], R11; # [140][000460]
//     	FMUL32I.FTZ R13, R24, 0xbd14f209; # [141][000468]
//     	FMUL32I.FTZ R11, R28, 1.20412;   # [142][000470]
//     	MOV R5, c[0x1][0x88];            # [143][000478]
//     	FFMA.FTZ R6, R35, c[0x1][0x58], R26; # [144][000480]
//     	FMUL32I.FTZ R28, R31, 0xba5a740e; # [145][000488]
//     	FMUL.FTZ R26, R3, R13;           # [146][000490]
//     	FFMA.FTZ R32, R35, c[0x1][0x48], R27; # [147][000498]
//     	FFMA.FTZ R27, R5, c[0x10][0x20], R33; # [148][0004a0]
//     	FMUL32I.FTZ R38, R31, 0xbd14f209; # [149][0004a8]
//     	FMUL32I.FTZ R40, R28, 0x3fb8aa3b; # [150][0004b0]
//     	FMUL32I.FTZ R33, R24, 0x3d14f209; # [151][0004b8]
//     	FMUL32I.FTZ R39, R26, 0x3fb8aa3b; # [152][0004c0]
//     	FMUL32I.FTZ R28, R24, -0.000125; # [153][0004c8]
//     	FMUL32I.FTZ R38, R38, 0x3fb8aa3b; # [154][0004d0]
//     	FMUL32I.FTZ R41, R41, 0x3fb8aa3b; # [155][0004d8]
//     	RRO.EX2 R40, R40;                # [156][0004e0]
//     	MUFU.RCP R13, R33;               # [157][0004e8]
//     	RRO.EX2 R39, R39;                # [158][0004f0]
//     	FMUL.FTZ R33, R3, R28;           # [159][0004f8]
//     	RRO.EX2 R38, R38;                # [160][000500]
//     	RRO.EX2 R41, R41;                # [161][000508]
//     	MUFU.EX2 R28, R40;               # [162][000510]
//     	FMUL32I.FTZ R31, R31, -0.000125; # [163][000518]
//     	MUFU.EX2 R40, R39;               # [164][000520]
//     	FMUL32I.FTZ R33, R33, 0x3fb8aa3b; # [165][000528]
//     	FFMA.FTZ R29, R5, c[0x10][0x14], R29; # [166][000530]
//     	MUFU.EX2 R39, R38;               # [167][000538]
//     	FFMA.FTZ R9, R5, c[0x10][0x30], R9; # [168][000540]
//     	FMUL32I.FTZ R38, R24, 0.000125;  # [169][000548]
//     	MUFU.EX2 R41, R41;               # [170][000550]
//     	FADD.FTZ R5, R32, c[0x1][0x4c];  # [171][000558]
//     	FADD.FTZ R40, -R40, 1;           # [172][000560]
//     	RRO.EX2 R33, R33;                # [173][000568]
//     	FMUL32I.FTZ R32, R31, 0x3fb8aa3b; # [174][000570]
//     	MUFU.RCP R26, R42;               # [175][000578]
//     	MUFU.RCP R31, R38;               # [176][000580]
//     	FADD.FTZ R41, -R41, 1;           # [177][000588]
//     	FMUL.FTZ R38, R39, R40;          # [178][000590]
//     	RRO.EX2 R32, R32;                # [179][000598]
//     	MUFU.EX2 R33, R33;               # [180][0005a0]
//     	F2F.FTZ.FLOOR R39, R11;          # [181][0005a8]
//     	FADD32I.FTZ R11, R29, 0x434e2990; # [182][0005b0]
//     	FMUL.FTZ R28, R28, R41;          # [183][0005b8]
//     	MUFU.EX2 R29, R32;               # [184][0005c0]
//     	FMUL.FTZ R26, R28, R26;          # [185][0005c8]
//     	FADD.FTZ R32, -R33, 1;           # [186][0005d0]
//     	@!P0 FMUL32I.FTZ R26, R3, 0.842146; # [187][0005d8]
//     	FMUL.FTZ R33, R38, R13;          # [188][0005e0]
//     	FMUL32I.FTZ R28, R11, -0.000125; # [189][0005e8]
//     	@!P0 FMUL32I.FTZ R33, R3, 0.00055485; # [190][0005f0]
//     	FMNMX.FTZ R38, R39, RZ, !PT;     # [191][0005f8]
//     	FMUL.FTZ R29, R29, R32;          # [192][000600]
//     	FADD32I.FTZ R13, R27, 0xbf3b173b; # [193][000608]
//     	FFMA.FTZ R32, R33, 200, R26;     # [194][000610]
//     	FMUL32I.FTZ R28, R28, 0x3fb8aa3b; # [195][000618]
//     	FMUL32I.FTZ R33, R38, 0.830482;  # [196][000620]
//     	FMUL.FTZ R29, R29, R31;          # [197][000628]
//     	FMUL32I.FTZ R26, R11, 0xbd14f209; # [198][000630]
//     	@!P0 FMUL32I.FTZ R29, R3, 0x3f797cb2; # [199][000638]
//     	FMUL32I.FTZ R27, R11, 0xba5a740e; # [200][000640]
//     	FMUL32I.FTZ R3, R32, 0x3cb851eb; # [201][000648]
//     	RRO.EX2 R38, R33;                # [202][000650]
//     	RRO.EX2 R28, R28;                # [203][000658]
//     	FMUL32I.FTZ R26, R26, 0x3fb8aa3b; # [204][000660]
//     	FMUL32I.FTZ R33, R32, 0.012015;  # [205][000668]
//     	FMUL32I.FTZ R32, R32, 0.0075;    # [206][000670]
//     	FMUL32I.FTZ R27, R27, 0x3fb8aa3b; # [207][000678]
//     	FFMA.FTZ R31, RZ, R29, R3;       # [208][000680]
//     	MUFU.EX2 R39, R28;               # [209][000688]
//     	FFMA.FTZ R33, RZ, R29, R33;      # [210][000690]
//     	RRO.EX2 R26, R26;                # [211][000698]
//     	FFMA.FTZ R29, RZ, R29, R32;      # [212][0006a0]
//     	RRO.EX2 R27, R27;                # [213][0006a8]
//     	FMUL32I.FTZ R28, R31, 0xbfb8aa3b; # [214][0006b0]
//     	MUFU.EX2 R3, R38;                # [215][0006b8]
//     	FMUL32I.FTZ R31, R33, 0xbfb8aa3b; # [216][0006c0]
//     	MUFU.EX2 R43, R26;               # [217][0006c8]
//     	FMUL32I.FTZ R26, R29, 0xbfb8aa3b; # [218][0006d0]
//     	MUFU.EX2 R38, R27;               # [219][0006d8]
//     	MOV R17, c[0x1][0x9c];           # [220][0006e0]
//     	RRO.EX2 R27, R28;                # [221][0006e8]
//     	FADD.FTZ R29, R5, -c[0x1][0x4c]; # [222][0006f0]
//     	RRO.EX2 R31, R31;                # [223][0006f8]
//     	FADD.FTZ R6, R6, c[0x1][0x5c];   # [224][000700]
//     	FSETP.GE.FTZ.AND P0, PT, R3, R20, PT; # [225][000708]
//     	FADD.FTZ R4, R4, c[0x1][0x6c];   # [226][000710]
//     	RRO.EX2 R5, R26;                 # [227][000718]
//     	FADD.FTZ R2, R2, c[0x1][0x7c];   # [228][000720]
//     	MUFU.EX2 R33, R27;               # [229][000728]
//     	FMUL.FTZ R34, R17, c[0x1][0x9c]; # [230][000730]
//     	MUFU.EX2 R32, R31;               # [231][000738]
//     	MOV R18, RZ;                     # [232][000740]
//     	MOV R17, RZ;                     # [233][000748]
//     	FADD32I.FTZ R9, R9, 0xc08e18cc;  # [234][000750]
//     	FADD.FTZ R28, R6, -c[0x1][0x5c]; # [235][000758]
//     	FADD.FTZ R27, R4, -c[0x1][0x6c]; # [236][000760]
//     	FMUL32I.FTZ R40, R3, 0x3fe39ea9; # [237][000768]
//     	FADD.FTZ R26, R2, -c[0x1][0x7c]; # [238][000770]
//     	MUFU.EX2 R31, R5;                # [239][000778]
//     	@P0 BRA L0d28;                   # [240][000780]
//     	MUFU.RCP R45, R34;               # [241][000788]
//     	NOP;                             # [242][000790]
//     L0798:
//     	FMNMX.FTZ R2, R25, R3, !PT;      # [243][000798]
//     	FMNMX.FTZ R5, R20, R40, PT;      # [244][0007a0]
//     	MUFU.RCP R3, R2;                 # [245][0007a8]
//     	FADD.FTZ R47, -R2, R5;           # [246][0007b0]
//     	FMUL.FTZ R3, R5, R3;             # [247][0007b8]
//     	MUFU.LG2 R3, R3;                 # [248][0007c0]
//     	FMUL.FTZ R3, R30, R3;            # [249][0007c8]
//     	RRO.EX2 R3, R3;                  # [250][0007d0]
//     	MUFU.EX2 R3, R3;                 # [251][0007d8]
//     	FMUL.FTZ R46, R2, R3;            # [252][0007e0]
//     	FFMA.FTZ R4, R46, -R37, c[0x1][0x80]; # [253][0007e8]
//     	FFMA.FTZ R51, R46, -R36, c[0x1][0x84]; # [254][0007f0]
//     	FFMA.FTZ R6, R46, R26, c[0x1][0x7c]; # [255][0007f8]
//     	FMUL.FTZ R41, R4, R4;            # [256][000800]
//     	FFMA.FTZ R48, R46, -R35, c[0x1][0x88]; # [257][000808]
//     	MUFU.RCP R6, R6;                 # [258][000810]
//     	FFMA.FTZ R42, R46, R29, c[0x1][0x4c]; # [259][000818]
//     	FFMA.FTZ R41, R51, R51, R41;     # [260][000820]
//     	FFMA.FTZ R44, R46, R24, c[0x10][0x34]; # [261][000828]
//     	FFMA.FTZ R3, R46, R28, c[0x1][0x5c]; # [262][000830]
//     	FFMA.FTZ R41, R48, R48, R41;     # [263][000838]
//     	FMUL32I.FTZ R49, R44, 0xba5a740e; # [264][000840]
//     	FFMA.FTZ R5, R46, R27, c[0x1][0x6c]; # [265][000848]
//     	FMUL.FTZ R2, R42, R6;            # [266][000850]
//     	FMUL.FTZ R3, R3, R6;             # [267][000858]
//     	FMUL32I.FTZ R52, R44, -0.000125; # [268][000860]
//     	FMUL32I.FTZ R54, R44, 0xbd14f209; # [269][000868]
//     	MUFU.RSQ R50, R41;               # [270][000870]
//     	FMUL32I.FTZ R53, R49, 0x3fb8aa3b; # [271][000878]
//     	FMUL.FTZ R44, R5, R6;            # [272][000880]
//     	TEX.LZ.NODEP.P R42, R2, 0x7, 0x1, 2D, 0x1; # [273][000888]
//     	FMUL.FTZ R49, R50, R4;           # [274][000890]
//     	FMUL.FTZ R51, R50, R51;          # [275][000898]
//     	FMUL32I.FTZ R52, R52, 0x3fb8aa3b; # [276][0008a0]
//     	TEX.LZ.NODEP.P R4, R2, 0x6, 0x0, 2D, 0x7; # [277][0008a8]
//     	FMUL32I.FTZ R2, R54, 0x3fb8aa3b; # [278][0008b0]
//     	RRO.EX2 R3, R53;                 # [279][0008b8]
//     	FMUL.FTZ R49, R37, R49;          # [280][0008c0]
//     	RRO.EX2 R2, R2;                  # [281][0008c8]
//     	FMUL.FTZ R50, R50, R48;          # [282][0008d0]
//     	MUFU.EX2 R3, R3;                 # [283][0008d8]
//     	FFMA.FTZ R49, R36, R51, R49;     # [284][0008e0]
//     	MUFU.EX2 R53, R2;                # [285][0008e8]
//     	RRO.EX2 R54, R52;                # [286][0008f0]
//     	MOV32I R48, 0x3f800000;          # [287][0008f8]
//     	FMUL.FTZ R51, R41, R45;          # [288][000900]
//     	FFMA.FTZ R52, R35, R50, R49;     # [289][000908]
//     	MUFU.EX2 R2, R54;                # [290][000910]
//     	FFMA.FTZ R49, R53, 200, R3;      # [291][000918]
//     	FMUL.FTZ R50, R37, R46;          # [292][000920]
//     	FFMA.FTZ R3, R51, -R51, R48;     # [293][000928]
//     	FFMA.FTZ R48, R52, c[0x10][0x38], R48; # [294][000930]
//     	FMUL.FTZ R51, R36, R46;          # [295][000938]
//     	FMUL.FTZ R2, R47, R2;            # [296][000940]
//     	FMUL.FTZ R49, R47, R49;          # [297][000948]
//     	FMUL32I.FTZ R52, R50, 0x3f3f3104; # [298][000950]
//     	FMUL32I.FTZ R47, R50, 0x3e01b391; # [299][000958]
//     	FMUL.FTZ R46, R35, R46;          # [300][000960]
//     	FMUL32I.FTZ R53, R50, 0xbf271fbe; # [301][000968]
//     	FFMA.FTZ R52, R51, c[0x10][0x1c], R52; # [302][000970]
//     	FFMA.FTZ R47, R51, c[0x10][0x10], R47; # [303][000978]
//     	FFMA.FTZ R51, R51, c[0x10][0x2c], R53; # [304][000980]
//     	FFMA.FTZ R50, R46, c[0x10][0x20], R52; # [305][000988]
//     	FFMA.FTZ R47, R46, c[0x10][0x14], R47; # [306][000990]
//     	FADD32I.FTZ R50, R50, 0xbf3b173b; # [307][000998]
//     	FFMA.FTZ R51, R46, c[0x10][0x30], R51; # [308][0009a0]
//     	FMNMX.FTZ R3, R3, RZ, !PT;       # [309][0009a8]
//     	FADD32I.FTZ R46, R47, 0x434e2990; # [310][0009b0]
//     	FADD.FTZ R47, -R13, R50;         # [311][0009b8]
//     	FADD32I.FTZ R50, R51, 0xc08e18cc; # [312][0009c0]
//     	FADD.FTZ R46, -R11, R46;         # [313][0009c8]
//     	FMUL.FTZ R47, R47, R47;          # [314][0009d0]
//     	FADD.FTZ R50, -R9, R50;          # [315][0009d8]
//     	FFMA.FTZ R47, R46, R46, R47;     # [316][0009e0]
//     	FFMA.FTZ R47, R50, R50, R47;     # [317][0009e8]
//     	MUFU.RSQ R50, R47;               # [318][0009f0]
//     	FMUL.FTZ R47, R46, R50;          # [319][0009f8]
//     	MUFU.RCP R46, R50;               # [320][000a00]
//     	FMUL32I.FTZ R51, R47, 0xba5a740e; # [321][000a08]
//     	FMUL32I.FTZ R50, R47, 0xbd14f209; # [322][000a10]
//     	FMUL.FTZ R51, R46, R51;          # [323][000a18]
//     	FMUL.FTZ R50, R46, R50;          # [324][000a20]
//     	FMUL32I.FTZ R52, R51, 0x3fb8aa3b; # [325][000a28]
//     	FMUL32I.FTZ R50, R50, 0x3fb8aa3b; # [326][000a30]
//     	FMUL32I.FTZ R51, R47, 0x3d14f209; # [327][000a38]
//     	RRO.EX2 R50, R50;                # [328][000a40]
//     	RRO.EX2 R52, R52;                # [329][000a48]
//     	MUFU.EX2 R50, R50;               # [330][000a50]
//     	MUFU.RCP R51, R51;               # [331][000a58]
//     	FADD.FTZ R50, -R50, 1;           # [332][000a60]
//     	MUFU.EX2 R52, R52;               # [333][000a68]
//     	FMUL.FTZ R50, R43, R50;          # [334][000a70]
//     	FMUL32I.FTZ R53, R47, 0x3a5a740e; # [335][000a78]
//     	FMUL.FTZ R50, R50, R51;          # [336][000a80]
//     	FSETP.NEU.FTZ.AND P0, PT, R47, RZ, PT; # [337][000a88]
//     	FADD.FTZ R51, -R52, 1;           # [338][000a90]
//     	@!P0 FMUL.FTZ R50, R43, R46;     # [339][000a98]
//     	MUFU.RCP R52, R53;               # [340][000aa0]
//     	FMUL.FTZ R51, R38, R51;          # [341][000aa8]
//     	FMUL.FTZ R51, R51, R52;          # [342][000ab0]
//     	FMUL32I.FTZ R53, R47, 0.000125;  # [343][000ab8]
//     	FMUL32I.FTZ R52, R47, -0.000125; # [344][000ac0]
//     	@!P0 FMUL.FTZ R51, R38, R46;     # [345][000ac8]
//     	FMUL.FTZ R52, R46, R52;          # [346][000ad0]
//     	FFMA.FTZ R50, R50, 200, R51;     # [347][000ad8]
//     	FMUL32I.FTZ R52, R52, 0x3fb8aa3b; # [348][000ae0]
//     	FMUL32I.FTZ R51, R50, 0.0075;    # [349][000ae8]
//     	RRO.EX2 R52, R52;                # [350][000af0]
//     	MUFU.EX2 R52, R52;               # [351][000af8]
//     	FADD.FTZ R47, -R52, 1;           # [352][000b00]
//     	MUFU.RCP R52, R53;               # [353][000b08]
//     	FMUL.FTZ R47, R39, R47;          # [354][000b10]
//     	FMUL.FTZ R53, R48, R48;          # [355][000b18]
//     	FMUL.FTZ R48, R47, R52;          # [356][000b20]
//     	FMUL32I.FTZ R53, R53, 0x41490fdb; # [357][000b28]
//     	@!P0 FMUL.FTZ R48, R39, R46;     # [358][000b30]
//     	FMUL32I.FTZ R47, R50, 0x3cb851eb; # [359][000b38]
//     	FMUL32I.FTZ R46, R50, 0.012015;  # [360][000b40]
//     	FMUL32I.FTZ R52, R49, 0.0075;    # [361][000b48]
//     	MUFU.RCP R50, R53;               # [362][000b50]
//     	FFMA.FTZ R47, RZ, R48, R47;      # [363][000b58]
//     	FFMA.FTZ R46, RZ, R48, R46;      # [364][000b60]
//     	FFMA.FTZ R53, RZ, R2, R52;       # [365][000b68]
//     	FFMA.FTZ R48, RZ, R48, R51;      # [366][000b70]
//     	FMUL32I.FTZ R52, R50, 0x3b9d4951; # [367][000b78]
//     	FMUL32I.FTZ R51, R49, 0.012015;  # [368][000b80]
//     	FSET.BF.GE.FTZ.AND R50, R42, R44, PT; # [369][000b88]
//     	FADD.FTZ R44, R41, 1;            # [370][000b90]
//     	FFMA.FTZ R51, RZ, R2, R51;       # [371][000b98]
//     	FMUL.FTZ R41, R49, R52;          # [372][000ba0]
//     	FMUL.FTZ R4, R50, R4;            # [373][000ba8]
//     	FMUL32I.FTZ R49, R49, 0x3cb851eb; # [374][000bb0]
//     	FMUL.FTZ R5, R50, R5;            # [375][000bb8]
//     	FMUL32I.FTZ R51, R51, 0xbfb8aa3b; # [376][000bc0]
//     	FMUL.FTZ R6, R50, R6;            # [377][000bc8]
//     	FMUL32I.FTZ R42, R53, 0xbfb8aa3b; # [378][000bd0]
//     	FMUL32I.FTZ R50, R48, 0xbfb8aa3b; # [379][000bd8]
//     	FFMA.FTZ R48, RZ, R2, R49;       # [380][000be0]
//     	RRO.EX2 R53, R51;                # [381][000be8]
//     	FMUL32I.FTZ R49, R46, 0xbfb8aa3b; # [382][000bf0]
//     	RRO.EX2 R52, R42;                # [383][000bf8]
//     	FMUL32I.FTZ R51, R47, 0xbfb8aa3b; # [384][000c00]
//     	MUFU.RCP R42, R44;               # [385][000c08]
//     	RRO.EX2 R47, R50;                # [386][000c10]
//     	FMUL32I.FTZ R48, R48, 0xbfb8aa3b; # [387][000c18]
//     	RRO.EX2 R50, R49;                # [388][000c20]
//     	MUFU.EX2 R44, R52;               # [389][000c28]
//     	RRO.EX2 R49, R51;                # [390][000c30]
//     	FMUL.FTZ R52, R3, R4;            # [391][000c38]
//     	FMUL.FTZ R51, R3, R5;            # [392][000c40]
//     	FMUL.FTZ R6, R3, R6;             # [393][000c48]
//     	MUFU.EX2 R4, R50;                # [394][000c50]
//     	MUFU.EX2 R5, R49;                # [395][000c58]
//     	RRO.EX2 R50, R48;                # [396][000c60]
//     	FMUL.FTZ R49, R42, R51;          # [397][000c68]
//     	MUFU.EX2 R47, R47;               # [398][000c70]
//     	FMUL.FTZ R48, R42, R52;          # [399][000c78]
//     	FMUL.FTZ R42, R42, R6;           # [400][000c80]
//     	MOV R3, R40;                     # [401][000c88]
//     	FMUL32I.FTZ R6, R40, 0x3fe39ea9; # [402][000c90]
//     	FFMA.FTZ R2, RZ, R2, R41;        # [403][000c98]
//     	FMUL.FTZ R4, R4, R49;            # [404][000ca0]
//     	MUFU.EX2 R46, R53;               # [405][000ca8]
//     	FMUL.FTZ R40, R47, R42;          # [406][000cb0]
//     	MUFU.EX2 R50, R50;               # [407][000cb8]
//     	FMUL.FTZ R41, R5, R48;           # [408][000cc0]
//     	FSETP.GE.FTZ.AND P0, PT, R3, R20, PT; # [409][000cc8]
//     	FMUL.FTZ R5, R4, R2;             # [410][000cd0]
//     	FMUL.FTZ R31, R31, R44;          # [411][000cd8]
//     	FMUL.FTZ R4, R40, R2;            # [412][000ce0]
//     	FMUL.FTZ R32, R32, R46;          # [413][000ce8]
//     	FMUL.FTZ R33, R33, R50;          # [414][000cf0]
//     	FMUL.FTZ R2, R41, R2;            # [415][000cf8]
//     	MOV R40, R6;                     # [416][000d00]
//     	FFMA.FTZ R19, R4, R31, R19;      # [417][000d08]
//     	FFMA.FTZ R18, R5, R32, R18;      # [418][000d10]
//     	FFMA.FTZ R17, R2, R33, R17;      # [419][000d18]
//     	@!P0 BRA L0798;                  # [420][000d20]
//     L0d28:
//     	FSETP.GE.FTZ.AND.S P0, PT, R22, R21, PT; # [421][000d28]
//     L0d30:
//     	FSETP.LT.FTZ.AND P0, PT, R23, R21, P0; # [422][000d30]
//     	FMUL.FTZ R41, R19, c[0x1][0x98]; # [423][000d38]
//     	FMUL.FTZ R40, R18, c[0x1][0x94]; # [424][000d40]
//     	FMUL.FTZ R20, R17, c[0x1][0x90]; # [425][000d48]
//     	@!P0 BRA L1928;                  # [426][000d50]
//     	FMUL32I.FTZ R4, R15, 0x3f3f3104; # [427][000d58]
//     	FMUL.FTZ R5, R12, c[0x1][0x60];  # [428][000d60]
//     	FMUL32I.FTZ R3, R15, 0x3e01b391; # [429][000d68]
//     	FMUL.FTZ R2, R12, c[0x1][0x40];  # [430][000d70]
//     	FMUL.FTZ R21, R12, c[0x1][0x50]; # [431][000d78]
//     	FMUL.FTZ R6, R12, c[0x1][0x70];  # [432][000d80]
//     	MUFU.RCP R34, R34;               # [433][000d88]
//     	FFMA.FTZ R4, R16, c[0x10][0x1c], R4; # [434][000d90]
//     	FFMA.FTZ R3, R16, c[0x10][0x10], R3; # [435][000d98]
//     	FFMA.FTZ R17, R10, c[0x1][0x64], R5; # [436][000da0]
//     	FADD.FTZ R12, -R15, c[0x1][0x80]; # [437][000da8]
//     	FMUL32I.FTZ R5, R15, 0xbf271fbe; # [438][000db0]
//     	FFMA.FTZ R15, R10, c[0x1][0x74], R6; # [439][000db8]
//     	FFMA.FTZ R4, R14, c[0x10][0x20], R4; # [440][000dc0]
//     	FMUL.FTZ R6, R12, R12;           # [441][000dc8]
//     	FADD.FTZ R48, -R16, c[0x1][0x84]; # [442][000dd0]
//     	FADD32I.FTZ R4, R4, 0xbf3b173b;  # [443][000dd8]
//     	FFMA.FTZ R5, R16, c[0x10][0x2c], R5; # [444][000de0]
//     	FFMA.FTZ R3, R14, c[0x10][0x14], R3; # [445][000de8]
//     	FFMA.FTZ R18, R8, c[0x1][0x78], R15; # [446][000df0]
//     	FADD32I.FTZ R3, R3, 0x434e2990;  # [447][000df8]
//     	FFMA.FTZ R15, R48, R48, R6;      # [448][000e00]
//     	FADD.FTZ R50, -R14, c[0x1][0x88]; # [449][000e08]
//     	FFMA.FTZ R6, R14, c[0x10][0x30], R5; # [450][000e10]
//     	FFMA.FTZ R30, R50, R50, R15;     # [451][000e18]
//     	FADD.FTZ R5, -R13, R4;           # [452][000e20]
//     	FFMA.FTZ R16, R7, c[0x1][0x7c], R18; # [453][000e28]
//     	FADD.FTZ R4, -R11, R3;           # [454][000e30]
//     	FFMA.FTZ R15, R10, c[0x1][0x54], R21; # [455][000e38]
//     	FADD32I.FTZ R6, R6, 0xc08e18cc;  # [456][000e40]
//     	FMUL.FTZ R3, R5, R5;             # [457][000e48]
//     	FFMA.FTZ R14, R8, c[0x1][0x68], R17; # [458][000e50]
//     	MUFU.RCP R24, R16;               # [459][000e58]
//     	FFMA.FTZ R10, R10, c[0x1][0x44], R2; # [460][000e60]
//     	FADD.FTZ R5, -R9, R6;            # [461][000e68]
//     	FFMA.FTZ R2, R4, R4, R3;         # [462][000e70]
//     	MOV R19, c[0x1][0x9c];           # [463][000e78]
//     	FFMA.FTZ R52, R7, c[0x1][0x6c], R14; # [464][000e80]
//     	FFMA.FTZ R2, R5, R5, R2;         # [465][000e88]
//     	MUFU.RCP R19, R19;               # [466][000e90]
//     	FFMA.FTZ R11, R52, R24, c[0x10][0x40]; # [467][000e98]
//     	MUFU.RSQ R5, R2;                 # [468][000ea0]
//     	MUFU.RSQ R46, R30;               # [469][000ea8]
//     	FMUL.FTZ R6, R11, R19;           # [470][000eb0]
//     	FFMA.FTZ R13, R8, c[0x1][0x58], R15; # [471][000eb8]
//     	FFMA.FTZ R9, R8, c[0x1][0x48], R10; # [472][000ec0]
//     	FMUL.FTZ R42, R4, R5;            # [473][000ec8]
//     	FMUL.FTZ R8, R6, 0.75;           # [474][000ed0]
//     	FFMA.FTZ R47, R12, R46, -R37;    # [475][000ed8]
//     	MUFU.RCP R21, R5;                # [476][000ee0]
//     	FMUL32I.FTZ R4, R42, 0xbd14f209; # [477][000ee8]
//     	FMNMX.FTZ R44, R8, -c[0x10][0x3c], !PT; # [478][000ef0]
//     	FFMA.FTZ R49, R48, R46, -R36;    # [479][000ef8]
//     	FMUL.FTZ R3, R47, R47;           # [480][000f00]
//     	FFMA.FTZ R10, R7, c[0x1][0x5c], R13; # [481][000f08]
//     	FMUL32I.FTZ R8, R42, -0.000125;  # [482][000f10]
//     	FFMA.FTZ R7, R7, c[0x1][0x4c], R9; # [483][000f18]
//     	FMUL.FTZ R4, R21, R4;            # [484][000f20]
//     	FFMA.FTZ R45, R50, R46, -R35;    # [485][000f28]
//     	FFMA.FTZ R6, R49, R49, R3;       # [486][000f30]
//     	FMUL.FTZ R18, R21, R8;           # [487][000f38]
//     	FMUL.FTZ R3, R10, R24;           # [488][000f40]
//     	FMUL.FTZ R2, R7, R24;            # [489][000f48]
//     	FMUL32I.FTZ R14, R4, 0x3fb8aa3b; # [490][000f50]
//     	FFMA.FTZ R6, R45, R45, R6;       # [491][000f58]
//     	FMUL32I.FTZ R54, R18, 0x3fb8aa3b; # [492][000f60]
//     	FFMA.FTZ R19, R44, c[0x10][0x44], R3; # [493][000f68]
//     	FFMA.FTZ R22, R44, RZ, R2;       # [494][000f70]
//     	FMUL32I.FTZ R16, R42, 0xba5a740e; # [495][000f78]
//     	RRO.EX2 R14, R14;                # [496][000f80]
//     	FFMA.FTZ R18, R44, c[0x10][0x44], R2; # [497][000f88]
//     	MUFU.RSQ R51, R6;                # [498][000f90]
//     	FFMA.FTZ R17, R44, c[0x10][0x48], R3; # [499][000f98]
//     	FFMA.FTZ R15, R44, c[0x10][0x4c], R3; # [500][000fa0]
//     	FFMA.FTZ R11, R44, RZ, R3;       # [501][000fa8]
//     	FADD.FTZ R10, R44, R2;           # [502][000fb0]
//     	TEX.LZ.NODEP.P R19, R18, 0x7, 0x1, 2D, 0x1; # [503][000fb8]
//     	FFMA.FTZ R9, R44, -0.625, R3;    # [504][000fc0]
//     	FFMA.FTZ R7, R44, c[0x10][0x50], R3; # [505][000fc8]
//     	FFMA.FTZ R6, R44, -c[0x10][0x50], R2; # [506][000fd0]
//     	FFMA.FTZ R28, R44, 0.5, R2;      # [507][000fd8]
//     	FFMA.FTZ R27, R44, c[0x10][0x54], R3; # [508][000fe0]
//     	FFMA.FTZ R25, R44, c[0x10][0x5c], R3; # [509][000fe8]
//     	FFMA.FTZ R5, R44, c[0x10][0x64], R3; # [510][000ff0]
//     	FFMA.FTZ R4, R44, c[0x10][0x68], R2; # [511][000ff8]
//     	FFMA.FTZ R13, R44, c[0x10][0x6c], R3; # [512][001000]
//     	MOV R8, R22;                     # [513][001008]
//     	FMUL32I.FTZ R55, R42, 0x3d14f209; # [514][001010]
//     	FMUL.FTZ R29, R21, R16;          # [515][001018]
//     	MUFU.EX2 R26, R14;               # [516][001020]
//     	FFMA.FTZ R23, R44, 0.875, R3;    # [517][001028]
//     	MUFU.RCP R57, R55;               # [518][001030]
//     	TEX.LZ.NODEP.P R23, R22, 0x7, 0x1, 2D, 0x1; # [519][001038]
//     	FFMA.FTZ R16, R44, -c[0x10][0x48], R2; # [520][001040]
//     	FFMA.FTZ R14, R44, c[0x10][0x4c], R2; # [521][001048]
//     	FMUL32I.FTZ R22, R29, 0x3fb8aa3b; # [522][001050]
//     	TEX.LZ.NODEP R17, R16, 0x7, 0x1, 2D, 0x1; # [523][001058]
//     	FMUL.FTZ R16, R46, R12;          # [524][001060]
//     	TEX.LZ.NODEP R14, R14, 0x7, 0x1, 2D, 0x1; # [525][001068]
//     	RRO.EX2 R56, R22;                # [526][001070]
//     	TEX.LZ.NODEP R53, R10, 0x7, 0x1, 2D, 0x1; # [527][001078]
//     	FFMA.FTZ R15, R52, R24, c[0x10][0x3c]; # [528][001080]
//     	FADD.FTZ R10, -R26, 1;           # [529][001088]
//     	RRO.EX2 R24, R54;                # [530][001090]
//     	TEX.LZ.NODEP.P R18, R8, 0x7, 0x1, 2D, 0x1; # [531][001098]
//     	FMUL.FTZ R58, R43, R10;          # [532][0010a0]
//     	FFMA.FTZ R12, R44, c[0x10][0x70], R2; # [533][0010a8]
//     	FFMA.FTZ R8, R44, 0.1875, R2;    # [534][0010b0]
//     	MOV R9, R11;                     # [535][0010b8]
//     	FMUL32I.FTZ R55, R42, 0x3a5a740e; # [536][0010c0]
//     	MUFU.EX2 R54, R24;               # [537][0010c8]
//     	FFMA.FTZ R10, R44, -0.75, R2;    # [538][0010d0]
//     	TEX.LZ.NODEP R22, R6, 0x7, 0x1, 2D, 0x1; # [539][0010d8]
//     	MOV R29, R11;                    # [540][0010e0]
//     	TEX.LZ.NODEP.P R52, R10, 0x7, 0x1, 2D, 0x1; # [541][0010e8]
//     	FMUL.FTZ R11, R46, R48;          # [542][0010f0]
//     	TEX.LZ.NODEP.P R28, R28, 0x7, 0x1, 2D, 0x1; # [543][0010f8]
//     	FFMA.FTZ R26, R44, c[0x10][0x58], R2; # [544][001100]
//     	FMUL.FTZ R29, R58, R57;          # [545][001108]
//     	FSETP.NEU.FTZ.AND P0, PT, R42, RZ, PT; # [546][001110]
//     	TEX.LZ.NODEP.P R26, R26, 0x7, 0x1, 2D, 0x1; # [547][001118]
//     	FFMA.FTZ R24, R44, c[0x10][0x60], R2; # [548][001120]
//     	FMUL.FTZ R27, R51, R47;          # [549][001128]
//     	FMUL.FTZ R45, R51, R45;          # [550][001130]
//     	TEX.LZ.NODEP R25, R24, 0x7, 0x1, 2D, 0x1; # [551][001138]
//     	FMUL.FTZ R24, R46, R50;          # [552][001140]
//     	TEX.LZ.NODEP R48, R4, 0x7, 0x1, 2D, 0x1; # [553][001148]
//     	FFMA.FTZ R5, R44, c[0x10][0x74], R3; # [554][001150]
//     	FFMA.FTZ R4, R44, -0.0625, R2;   # [555][001158]
//     	FMUL.FTZ R46, R51, R49;          # [556][001160]
//     	TEX.LZ.NODEP R50, R12, 0x7, 0x1, 2D, 0x1; # [557][001168]
//     	MUFU.EX2 R6, R56;                # [558][001170]
//     	TEX.LZ.NODEP.P R47, R8, 0x7, 0x1, 2D, 0x1; # [559][001178]
//     	FMUL32I.FTZ R42, R42, 0.000125;  # [560][001180]
//     	TLD.LZ.NODEP.P R8, R0, 0x1, 2D, 0x7; # [561][001188]
//     	FADD.FTZ R49, -R54, 1;           # [562][001190]
//     	FADD.FTZ R12, -R6, 1;            # [563][001198]
//     	MUFU.RCP R42, R42;               # [564][0011a0]
//     	FMUL.FTZ R49, R39, R49;          # [565][0011a8]
//     	MUFU.RCP R13, R55;               # [566][0011b0]
//     	FMUL.FTZ R51, R38, R12;          # [567][0011b8]
//     	FFMA.FTZ R7, R44, c[0x10][0x78], R3; # [568][0011c0]
//     	FFMA.FTZ R6, R44, -0.03125, R2;  # [569][0011c8]
//     	FSET.BF.GE.FTZ.AND R12, R19, R15, PT; # [570][0011d0]
//     	FSET.BF.GE.FTZ.AND R44, R23, R15, PT; # [571][0011d8]
//     	FMUL.FTZ R19, R49, R42;          # [572][0011e0]
//     	FSET.BF.GE.FTZ.AND R14, R14, R15, PT; # [573][0011e8]
//     	FSET.BF.GE.FTZ.AND R53, R53, R15, PT; # [574][0011f0]
//     	TEX.LZ.NODEP.P R42, R4, 0x7, 0x1, 2D, 0x1; # [575][0011f8]
//     	FMUL.FTZ R23, R51, R13;          # [576][001200]
//     	@!P0 FMUL.FTZ R29, R21, R43;     # [577][001208]
//     	FADD.FTZ R43, R12, R44;          # [578][001210]
//     	FSET.BF.GE.FTZ.AND R17, R17, R15, PT; # [579][001218]
//     	FADD.FTZ R44, R53, R14;          # [580][001220]
//     	TEX.LZ.NODEP.P R49, R6, 0x7, 0x1, 2D, 0x1; # [581][001228]
//     	FSET.BF.GE.FTZ.AND R18, R18, R15, PT; # [582][001230]
//     	TEX.LZ.NODEP.P R12, R2, 0x6, 0x0, 2D, 0x7; # [583][001238]
//     	@!P0 FMUL.FTZ R23, R21, R38;     # [584][001240]
//     	TLD.LZ.NODEP.T R51, R0, 0x4, 2D, 0x1; # [585][001248]
//     	@!P0 FMUL.FTZ R19, R21, R39;     # [586][001250]
//     	TLD.LZ.NODEP.T R4, R0, 0x3, 2D;  # [587][001258]
//     	FADD.FTZ R21, R43, R17;          # [588][001260]
//     	TLD.LZ.NODEP.P R0, R0, 0x2, 2D;  # [589][001268]
//     	FADD.FTZ R38, R44, R18;          # [590][001270]
//     	FSET.BF.GE.FTZ.AND R22, R22, R15, PT; # [591][001278]
//     	FSET.BF.GE.FTZ.AND R39, R52, R15, PT; # [592][001280]
//     	MOV32I R18, -0x40800000;         # [593][001288]
//     	FMUL.FTZ R43, R30, R34;          # [594][001290]
//     	FADD.FTZ R38, R38, R22;          # [595][001298]
//     	FADD.FTZ R39, R21, R39;          # [596][0012a0]
//     	FFMA.FTZ R34, R29, 200, R23;     # [597][0012a8]
//     	FFMA.FTZ R52, R43, -R43, -R18;   # [598][0012b0]
//     	FSET.BF.GE.FTZ.AND R44, R26, R15, PT; # [599][0012b8]
//     	FSET.BF.GE.FTZ.AND R43, R28, R15, PT; # [600][0012c0]
//     	MUFU.RCP R23, R30;               # [601][0012c8]
//     	FADD.FTZ R30, R39, R38;          # [602][0012d0]
//     	FFMA.FTZ R28, R8, 2, R18;        # [603][0012d8]
//     	FMNMX.FTZ R26, R52, RZ, !PT;     # [604][0012e0]
//     	FMUL.FTZ R38, R37, -R27;         # [605][0012e8]
//     	FADD.FTZ R44, R43, R44;          # [606][0012f0]
//     	FSET.BF.GE.FTZ.AND R52, R25, R15, PT; # [607][0012f8]
//     	FSET.BF.GE.FTZ.AND R50, R50, R15, PT; # [608][001300]
//     	FSET.BF.GE.FTZ.AND R39, R47, R15, PT; # [609][001308]
//     	FFMA.FTZ R25, R9, 2, R18;        # [610][001310]
//     	FMUL.FTZ R43, R28, R28;          # [611][001318]
//     	FFMA.FTZ R8, R36, -R46, R38;     # [612][001320]
//     	FADD.FTZ R9, R44, R52;           # [613][001328]
//     	FFMA.FTZ R38, R10, 2, R18;       # [614][001330]
//     	FMUL32I.FTZ R44, R34, 0x3cb851eb; # [615][001338]
//     	FADD.FTZ R39, R39, R50;          # [616][001340]
//     	FFMA.FTZ R10, R25, R25, R43;     # [617][001348]
//     	FSET.BF.GE.FTZ.AND R48, R48, R15, PT; # [618][001350]
//     	FMUL32I.FTZ R50, R34, 0.012015;  # [619][001358]
//     	FMUL32I.FTZ R43, R34, 0.0075;    # [620][001360]
//     	FSET.BF.GE.FTZ.AND R47, R42, R15, PT; # [621][001368]
//     	FFMA.FTZ R34, RZ, R19, R44;      # [622][001370]
//     	FFMA.FTZ R42, R38, R38, R10;     # [623][001378]
//     	FADD.FTZ R44, R9, R48;           # [624][001380]
//     	FFMA.FTZ R10, RZ, R19, R50;      # [625][001388]
//     	FADD.FTZ R39, R47, R39;          # [626][001390]
//     	MOV32I R29, 0x3e79db23;          # [627][001398]
//     	MOV32I R21, 0x3d981627;          # [628][0013a0]
//     	FFMA.FTZ R8, R35, -R45, R8;      # [629][0013a8]
//     	MUFU.RCP R8, R8;                 # [630][0013b0]
//     	MOV32I R22, 0x3ec6a7f0;          # [631][0013b8]
//     	FSET.BF.GE.FTZ.AND R9, R49, R15, PT; # [632][0013c0]
//     	FMUL32I.FTZ R10, R10, 0xbfb8aa3b; # [633][0013c8]
//     	FFMA.FTZ R15, RZ, R19, R43;      # [634][0013d0]
//     	FADD.FTZ R9, R9, R39;            # [635][0013d8]
//     	MUFU.RSQ R19, R42;               # [636][0013e0]
//     	FMUL32I.FTZ R39, R15, 0xbfb8aa3b; # [637][0013e8]
//     	FMUL32I.FTZ R42, R34, 0xbfb8aa3b; # [638][0013f0]
//     	FMUL.FTZ R43, R14, c[0x1][0x98]; # [639][0013f8]
//     	FADD.FTZ R34, R30, R44;          # [640][001400]
//     	RRO.EX2 R15, R42;                # [641][001408]
//     	FMUL.FTZ R30, R19, R28;          # [642][001410]
//     	FADD.FTZ R34, R9, R34;           # [643][001418]
//     	RRO.EX2 R9, R39;                 # [644][001420]
//     	FMUL.FTZ R28, R19, R25;          # [645][001428]
//     	FMUL.FTZ R42, R30, -R37;         # [646][001430]
//     	FMUL.FTZ R39, R30, R16;          # [647][001438]
//     	FMUL.FTZ R25, R34, 0.0625;       # [648][001440]
//     	FMUL.FTZ R27, R30, R27;          # [649][001448]
//     	FMUL.FTZ R34, R19, R38;          # [650][001450]
//     	FFMA.FTZ R14, R28, R11, R39;     # [651][001458]
//     	FFMA.FTZ R19, R28, -R36, R42;    # [652][001460]
//     	FFMA.FTZ R39, R28, R46, R27;     # [653][001468]
//     	FMUL.FTZ R42, R12, c[0x1][0x90]; # [654][001470]
//     	FMUL.FTZ R13, R13, c[0x1][0x94]; # [655][001478]
//     	FFMA.FTZ R27, R34, R24, R14;     # [656][001480]
//     	FMUL.FTZ R12, R25, R43;          # [657][001488]
//     	FMUL.FTZ R14, R25, R42;          # [658][001490]
//     	FFMA.FTZ R38, R34, -R35, R19;    # [659][001498]
//     	FFMA.FTZ R42, R34, R45, R39;     # [660][0014a0]
//     	FMUL.FTZ R13, R25, R13;          # [661][0014a8]
//     	FFMA.FTZ R25, R51, c[0x10][0x80], R29; # [662][0014b0]
//     	F2F.SAT R19, R27;                # [663][0014b8]
//     	F2F.SAT R39, R38;                # [664][0014c0]
//     	FMNMX.FTZ R29, R42, -c[0x10][0x3c], !PT; # [665][0014c8]
//     	FMNMX.FTZ R42, R27, -c[0x10][0x3c], !PT; # [666][0014d0]
//     	FADD.FTZ R43, -R39, 1;           # [667][0014d8]
//     	FFMA.FTZ R27, R30, -R19, R16;    # [668][0014e0]
//     	FFMA.FTZ R44, R39, c[0x10][0x88], R21; # [669][0014e8]
//     	FFMA.FTZ R16, R30, -R39, -R37;   # [670][0014f0]
//     	FMNMX.FTZ R38, R38, -c[0x10][0x3c], !PT; # [671][0014f8]
//     	FFMA.FTZ R30, R28, -R19, R11;    # [672][001500]
//     	FADD.FTZ R37, -R19, 1;           # [673][001508]
//     	FFMA.FTZ R11, R28, -R39, -R36;   # [674][001510]
//     	MUFU.RSQ R43, R43;               # [675][001518]
//     	FFMA.FTZ R36, R19, c[0x10][0x88], R21; # [676][001520]
//     	MUFU.RSQ R28, R37;               # [677][001528]
//     	FFMA.FTZ R21, R34, -R39, -R35;   # [678][001530]
//     	FFMA.FTZ R36, R36, R19, c[0x10][0x8c]; # [679][001538]
//     	FFMA.FTZ R35, R44, R39, c[0x10][0x8c]; # [680][001540]
//     	MUFU.RCP R28, R28;               # [681][001548]
//     	FMUL.FTZ R44, R27, R27;          # [682][001550]
//     	FMNMX.FTZ R37, R38, R42, PT;     # [683][001558]
//     	FFMA.FTZ R35, R35, R39, c[0x10][0x90]; # [684][001560]
//     	FFMA.FTZ R24, R34, -R19, R24;    # [685][001568]
//     	FMUL.FTZ R39, R16, R16;          # [686][001570]
//     	FFMA.FTZ R36, R36, R19, c[0x10][0x90]; # [687][001578]
//     	FFMA.FTZ R45, R30, R30, R44;     # [688][001580]
//     	MUFU.RCP R34, R43;               # [689][001588]
//     	FMUL.FTZ R43, R29, R37;          # [690][001590]
//     	FFMA.FTZ R44, R11, R11, R39;     # [691][001598]
//     	FMUL.FTZ R39, R28, R36;          # [692][0015a0]
//     	FFMA.FTZ R45, R24, R24, R45;     # [693][0015a8]
//     	FMUL.FTZ R28, R38, R42;          # [694][0015b0]
//     	FMUL.FTZ R37, R34, R35;          # [695][0015b8]
//     	FADD.FTZ R38, R43, R43;          # [696][0015c0]
//     	FMNMX.FTZ R35, R37, R39, !PT;    # [697][0015c8]
//     	FFMA.FTZ R43, R21, R21, R44;     # [698][0015d0]
//     	FMUL.FTZ R42, R38, R8;           # [699][0015d8]
//     	MUFU.RSQ R44, R45;               # [700][0015e0]
//     	FMNMX.FTZ R37, R37, R39, PT;     # [701][0015e8]
//     	MUFU.RSQ R38, R43;               # [702][0015f0]
//     	RRO.SINCOS R8, R35;              # [703][0015f8]
//     	FMUL32I.FTZ R39, R7, 0x3fc90fdb; # [704][001600]
//     	FMUL.FTZ R36, R29, R29;          # [705][001608]
//     	FMUL.FTZ R46, R44, R27;          # [706][001610]
//     	RRO.SINCOS R43, R37;             # [707][001618]
//     	FMUL.FTZ R27, R44, R24;          # [708][001620]
//     	MUFU.SIN R7, R8;                 # [709][001628]
//     	FMUL.FTZ R45, R38, R16;          # [710][001630]
//     	FMUL.FTZ R24, R39, R39;          # [711][001638]
//     	FMNMX.FTZ R8, R42, 1, PT;        # [712][001640]
//     	FMUL.FTZ R34, R36, R36;          # [713][001648]
//     	FMUL.FTZ R30, R44, R30;          # [714][001650]
//     	FADD.FTZ R16, R37, R35;          # [715][001658]
//     	FMUL.FTZ R42, R38, R11;          # [716][001660]
//     	FMUL.FTZ R45, R45, R46;          # [717][001668]
//     	MUFU.COS R44, R43;               # [718][001670]
//     	FMUL.FTZ R36, R24, R36;          # [719][001678]
//     	MUFU.SIN R11, R43;               # [720][001680]
//     	FMUL.FTZ R39, R16, 0.5;          # [721][001688]
//     	FMUL32I.FTZ R43, R3, 0x3fc90fdb; # [722][001690]
//     	FFMA.FTZ R42, R42, R30, R45;     # [723][001698]
//     	FMUL.FTZ R38, R38, R21;          # [724][0016a0]
//     	MUFU.RCP R30, R36;               # [725][0016a8]
//     	RRO.SINCOS R21, R39;             # [726][0016b0]
//     	FFMA.FTZ R36, R43, R43, c[0x10][0x94]; # [727][0016b8]
//     	FFMA.FTZ R29, R29, R29, R18;     # [728][0016c0]
//     	FMUL.FTZ R39, R35, R37;          # [729][0016c8]
//     	FFMA.FTZ R27, R38, R27, R42;     # [730][0016d0]
//     	FMUL32I.FTZ R35, R37, 0x3f22f983; # [731][0016d8]
//     	MUFU.RCP R38, R36;               # [732][0016e0]
//     	FMUL.FTZ R37, R43, R43;          # [733][0016e8]
//     	FMUL.FTZ R29, R29, R30;          # [734][0016f0]
//     	FFMA.FTZ R42, R43, R43, c[0x10][0x98]; # [735][0016f8]
//     	FMUL.FTZ R30, R24, 4;            # [736][001700]
//     	FMUL.FTZ R36, R35, R35;          # [737][001708]
//     	FSETP.GE.FTZ.AND P0, PT, R27, RZ, PT; # [738][001710]
//     	FMUL32I.FTZ R24, R29, 0x3fb8aa3b; # [739][001718]
//     	FMUL.FTZ R38, R37, R38;          # [740][001720]
//     	FMUL.FTZ R29, R34, R30;          # [741][001728]
//     	MUFU.RCP R42, R42;               # [742][001730]
//     	FMUL32I.FTZ R30, R39, 0x3ecf817b; # [743][001738]
//     	@!P0 FFMA.FTZ R7, R35, -R36, R7; # [744][001740]
//     	RRO.EX2 R24, R24;                # [745][001748]
//     	MUFU.SIN R3, R21;                # [746][001750]
//     	FMUL32I.FTZ R34, R38, 0.45;      # [747][001758]
//     	MUFU.COS R21, R21;               # [748][001760]
//     	FMUL.FTZ R35, R30, R30;          # [749][001768]
//     	FMUL.FTZ R37, R37, R42;          # [750][001770]
//     	MUFU.RCP R29, R29;               # [751][001778]
//     	FMUL.FTZ R7, R7, R34;            # [752][001780]
//     	MUFU.EX2 R24, R24;               # [753][001788]
//     	MUFU.RCP R16, R44;               # [754][001790]
//     	FMUL.FTZ R30, R38, 0.125;        # [755][001798]
//     	MUFU.RCP R34, R21;               # [756][0017a0]
//     	FFMA.FTZ R37, R37, -0.5, -R18;   # [757][0017a8]
//     	FMUL.FTZ R21, R27, R7;           # [758][0017b0]
//     	MOV32I R17, 0x3cba7547;          # [759][0017b8]
//     	FMUL.FTZ R7, R24, R29;           # [760][0017c0]
//     	FADD.FTZ R36, -|R27|, 1;         # [761][0017c8]
//     	FMUL.FTZ R16, R11, R16;          # [762][0017d0]
//     	FMUL.FTZ R18, R35, R30;          # [763][0017d8]
//     	FMUL.FTZ R24, R13, R25;          # [764][0017e0]
//     	FFMA.FTZ R22, R51, c[0x10][0x7c], R22; # [765][0017e8]
//     	RRO.EX2 R10, R10;                # [766][0017f0]
//     	MUFU.RCP R11, R28;               # [767][0017f8]
//     	FMUL.FTZ R13, R3, R34;           # [768][001800]
//     	FFMA.FTZ R17, R51, c[0x10][0x84], R17; # [769][001808]
//     	FMUL.FTZ R18, R18, R36;          # [770][001810]
//     	FFMA.FTZ R16, R21, R16, R37;     # [771][001818]
//     	FMUL.FTZ R3, R8, R7;             # [772][001820]
//     	MUFU.EX2 R21, R10;               # [773][001828]
//     	FMUL.FTZ R8, R12, R22;           # [774][001830]
//     	FMUL.FTZ R14, R14, R17;          # [775][001838]
//     	FFMA.FTZ R7, R18, R13, R16;      # [776][001840]
//     	MUFU.EX2 R10, R9;                # [777][001848]
//     	FMUL.FTZ R3, R3, R11;            # [778][001850]
//     	FMUL.FTZ R12, R24, R26;          # [779][001858]
//     	FMUL.FTZ R9, R8, R26;            # [780][001860]
//     	FMUL.FTZ R13, R14, R26;          # [781][001868]
//     	FMUL32I.FTZ R7, R7, 0x3ea2f983;  # [782][001870]
//     	FMUL.FTZ R8, R3, R5;             # [783][001878]
//     	MUFU.EX2 R15, R15;               # [784][001880]
//     	FMUL.FTZ R11, R12, R23;          # [785][001888]
//     	FMUL.FTZ R9, R9, R23;            # [786][001890]
//     	FMUL.FTZ R5, R3, R6;             # [787][001898]
//     	FMUL.FTZ R4, R3, R4;             # [788][0018a0]
//     	FMUL.FTZ R12, R13, R23;          # [789][0018a8]
//     	FFMA.FTZ R3, R1, R7, R8;         # [790][0018b0]
//     	FMUL.FTZ R11, R11, R21;          # [791][0018b8]
//     	FMUL.FTZ R6, R9, R10;            # [792][0018c0]
//     	FFMA.FTZ R1, R2, R7, R5;         # [793][0018c8]
//     	FMUL.FTZ R5, R12, R15;           # [794][0018d0]
//     	FFMA.FTZ R0, R0, R7, R4;         # [795][0018d8]
//     	FMUL.FTZ R2, R11, R3;            # [796][0018e0]
//     	FMUL.FTZ R1, R6, R1;             # [797][0018e8]
//     	FMUL.FTZ R3, R5, R0;             # [798][0018f0]
//     	FMUL.FTZ R2, R19, R2;            # [799][0018f8]
//     	FMUL.FTZ R0, R19, R1;            # [800][001900]
//     	FMUL.FTZ R4, R32, R2;            # [801][001908]
//     	FMUL.FTZ R1, R19, R3;            # [802][001910]
//     	FMUL.FTZ R0, R31, R0;            # [803][001918]
//     	FMUL.FTZ.S R3, R33, R1;          # [804][001920]
//     L1928:
//     	MOV R0, RZ;                      # [805][001928]
//     	MOV R4, RZ;                      # [806][001930]
//     	MOV.S R3, RZ;                    # [807][001938]
//     L1940:
//     	MOV R0, RZ;                      # [808][001940]
//     	MOV R4, RZ;                      # [809][001948]
//     	MOV R3, RZ;                      # [810][001950]
//     	MOV R41, RZ;                     # [811][001958]
//     	MOV R40, RZ;                     # [812][001960]
//     	MOV.S R20, RZ;                   # [813][001968]
//     L1970:
//     	FMNMX.FTZ R2, R0, RZ, !PT;       # [814][001970]
//     	FMNMX.FTZ R1, R4, RZ, !PT;       # [815][001978]
//     	FMNMX.FTZ R0, R3, RZ, !PT;       # [816][001980]
//     	FMNMX.FTZ R5, R41, RZ, !PT;      # [817][001988]
//     	FMNMX.FTZ R4, R40, RZ, !PT;      # [818][001990]
//     	FMNMX.FTZ R3, R20, RZ, !PT;      # [819][001998]
//     	EXIT;                            # [820][0019a0]
//     	END
//     END_SECTION
// END_SHADER
// 
