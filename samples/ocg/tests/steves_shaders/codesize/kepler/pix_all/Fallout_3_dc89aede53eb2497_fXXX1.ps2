// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0xdc89aede53eb2497
//         UCODE_HASH: 0x12db7f3b53e29aab
//         POOL: APP
//         VERSION: 20
//         # USES: 36401
//         // Time: 252.685ms [14.016 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 17
//         USED_TEXTURE_BITS: 0x3
//         TEXTURE_SLOTS: 2
//         SAMPLER_SLOTS: 2
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             COLOR_DIFFUSE_RED    PERSPECTIVE
//             COLOR_DIFFUSE_GREEN  PERSPECTIVE
//             COLOR_DIFFUSE_BLUE   PERSPECTIVE
//             COLOR_SPELWLAR_RED   PERSPECTIVE
//             COLOR_SPELWLAR_GREEN PERSPECTIVE
//             COLOR_SPELWLAR_BLUE  PERSPECTIVE
//             COLOR_SPELWLAR_ALPHA PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX01_Q              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00025462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x0000aa2a      0x2a00aa0a
//         0x00000000      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_0
        def c0, -1.00000000, 0.00000000, 1.00000000, 0.00000000 ; 0xbf800000 0x000000 0x3f800000 0x000000
        def c2, -0.50000000, 0.20000000, 0.50000000, 0.00000000 ; 0xbf000000 0x3e4ccccd 0x3f000000 0x000000
        dcl_pp t0.rg
        dcl v0.rgb
        dcl v1
        dcl_pp t1
        dcl_pp t3.rgb
        dcl_2d s0
        dcl_2d s1
        mov r0, c1
        add r0.w, r0.w, c0.x
        cmp r1.w, r0.w, c0.y, c0.z
        texld_pp r2, t0, s0
        add r1.x, r2.w, -c27.w
        mul r1, r1.w, r1.x
        texld_pp r3, t0, s1
        texkill r1
        mul_pp r1.xyz, r2, v0
        cmp_pp r1.xyz, -c27.x, r2, r1
        mul_pp r1.w, r2.w, c1.w
        cmp_pp r2.w, r0.w, r1.w, c1.w
        nrm_pp r4.xyz, t3
        add r3.xyz, r3, c2.x
        add_pp r3.xyz, r3, r3
        nrm_pp r5.xyz, r3
        dp3_sat_pp r0.w, r5, r4
        dp3_pp r1.w, r5, t1
        pow_pp r3.x, r0.w, c27.z
        mul_pp r0.w, r3.w, r3.x
        add_sat_pp r3.x, r1.w, c2.z
        mul_pp r3.x, r0.w, r3.x
        add r3.y, -r1.w, c2.y
        mov_sat_pp r1.w, r1.w
        mad_pp r0.xyz, c3, r1.w, r0
        max_pp r4.xyz, r0, c2.w
        cmp_pp r1.w, r3.y, r3.x, r0.w
        mul_pp r0.xyz, r1.w, c3
        mul_sat_pp r0.xyz, r0, t1.w
        mad_pp r0.xyz, r4, r1, r0
        lrp_pp r1.xyz, v1.w, v1, r0
        cmp_pp r2.xyz, -c27.y, r0, r1
        mov_pp oC0, r2
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0xbf800000 0x00000000
//         0x3f800000 0x00000000 0x05000051 0xa00f0002
//         0xbf000000 0x3e4ccccd 0x3f000000 0x00000000
//         0x0200001f 0x80000000 0xb0230000 0x0200001f
//         0x80000000 0x90070000 0x0200001f 0x80000000
//         0x900f0001 0x0200001f 0x80000000 0xb06f0001
//         0x0200001f 0x80000000 0xb0670003 0x0200001f
//         0x90000000 0xa00f0800 0x0200001f 0x90000000
//         0xa00f0801 0x02000001 0x800f0000 0xa0e40001
//         0x03000002 0x80080000 0x80ff0000 0xa0000000
//         0x04000058 0x80080001 0x80ff0000 0xa0550000
//         0xa0aa0000 0x03000042 0x802f0002 0xb0e40000
//         0xa0e40800 0x03000002 0x80010001 0x80ff0002
//         0xa1ff001b 0x03000005 0x800f0001 0x80ff0001
//         0x80000001 0x03000042 0x802f0003 0xb0e40000
//         0xa0e40801 0x01000041 0x800f0001 0x03000005
//         0x80270001 0x80e40002 0x90e40000 0x04000058
//         0x80270001 0xa100001b 0x80e40002 0x80e40001
//         0x03000005 0x80280001 0x80ff0002 0xa0ff0001
//         0x04000058 0x80280002 0x80ff0000 0x80ff0001
//         0xa0ff0001 0x02000024 0x80270004 0xb0e40003
//         0x03000002 0x80070003 0x80e40003 0xa0000002
//         0x03000002 0x80270003 0x80e40003 0x80e40003
//         0x02000024 0x80270005 0x80e40003 0x03000008
//         0x80380000 0x80e40005 0x80e40004 0x03000008
//         0x80280001 0x80e40005 0xb0e40001 0x03000020
//         0x80210003 0x80ff0000 0xa0aa001b 0x03000005
//         0x80280000 0x80ff0003 0x80000003 0x03000002
//         0x80310003 0x80ff0001 0xa0aa0002 0x03000005
//         0x80210003 0x80ff0000 0x80000003 0x03000002
//         0x80020003 0x81ff0001 0xa0550002 0x02000001
//         0x80380001 0x80ff0001 0x04000004 0x80270000
//         0xa0e40003 0x80ff0001 0x80e40000 0x0300000b
//         0x80270004 0x80e40000 0xa0ff0002 0x04000058
//         0x80280001 0x80550003 0x80000003 0x80ff0000
//         0x03000005 0x80270000 0x80ff0001 0xa0e40003
//         0x03000005 0x80370000 0x80e40000 0xb0ff0001
//         0x04000004 0x80270000 0x80e40004 0x80e40001
//         0x80e40000 0x04000012 0x80270001 0x90ff0001
//         0x90e40001 0x80e40000 0x04000058 0x80270002
//         0xa155001b 0x80e40000 0x80e40001 0x02000001
//         0x802f0800 0x80e40002 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3fc6e8fb // 1.55398500
//         COP_CONST[1]: 0x3f8cdec7 // 1.10054862
//         COP_CONST[2]: 0x3f292778 // 0.66075848
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][542] = 0x3e8ce118 // 0.27515482
//         # USER FLOAT CONST: c[6][543] = 0x3edd982f // 0.43280168
//         # USER FLOAT CONST: c[6][544] = 0x3ec96af7 // 0.39339420
//         # USER FLOAT CONST: c[6][545] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][550] = 0x3fc6e8fb // 1.55398500
//         # USER FLOAT CONST: c[6][551] = 0x3f8cdec7 // 1.10054862
//         # USER FLOAT CONST: c[6][552] = 0x3f292778 // 0.66075848
//         ## USER CONST histogram
//         ##    ~c1.x -> c[6][542] = 100.00%@0.27515482
//         ##    ~c1.y -> c[6][543] = 100.00%@0.43280168
//         ##    ~c1.z -> c[6][544] = 100.00%@0.39339420
//         ##    ~c1.w -> c[6][545] = 100.00%@1.00000000
//         ##    ~c3.x -> c[6][550] = 100.00%@1.55398500
//         ##    ~c3.y -> c[6][551] = 100.00%@1.10054862
//         ##    ~c3.z -> c[6][552] = 100.00%@0.66075848
//         ##     c27.x -> c[6][646] = 72.28%@1.00000000 27.72%@0.00000000
//         ##     c27.y -> c[6][647] = 99.71%@1.00000000 0.29%@0.00000000
//         ##     c27.z -> c[6][648] = 41.14%@60.00000000 23.43%@70.00000000 12.57%@10.00000000 5.43%@25.00000000 2.57%@80.00000000 2.29%@40.00000000 1.15%@65.00000000
//         ##     c27.w -> c[6][649] = 31.43%@0.00000000 11.14%@0.23529412 7.71%@0.47058824 6.86%@0.49803920 1.71%@0.70588240 1.43%@0.00392157 1.14%@0.59215688
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x121bf0ec,0x000001a1
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x9a13f6ee,0x000001a1
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xcb62ea87,0x00000270
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x7ac6e981,0x00000270
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x6af55bcb,0x00000270
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x0e4154a2,0x00000270
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0xbea0e3ca,0x000007b8
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x833912da,0x000007b8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xa01b7b92,0x00000270
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xe1caa84c,0x00000270
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x542b35d0,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xcfae0491,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xe16a3584,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x48036176,0x000001a0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x40f10390,0x00000270
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x82a1a36f,0x00000270
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x2cc93dac,0x00000208
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x903248b5,0x00000208
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x3429f56c,0x00000a28
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x46506180,0x00000a28
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x1045bc93,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x128x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x27ff154b,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x7b8c25c0,0x00000340
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x178ef604,0x00000340
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x39f5c51a,0x00000340
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x16cbd351,0x00000340
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x9afb413f,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0xe61de2d7,0x000001a0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x813b2e94,0x000003a8
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xbe4da7ff,0x000003a8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x116628f1,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x1d11738d,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x956e2ccb,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x6c642970,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x707cc907,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x64afb17e,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x7135aa2e,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x27660b8a,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xf8ffd462,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4da76f3c,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xa1bb3bb0,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xf3f63a37,0x000001a0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x9dfa77b2,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x703945e0,0x000001a0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0x2da17441,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x6a187748,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xc50cb114,0x00000680
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x6c642970,0x00000680
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0x6bfa6e36,0x000007b8
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x23059681,0x000007b8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xc9b519eb,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x128x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x5319d328,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x9166e299,0x00000340
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x47e1a5b7,0x00000340
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x4bace612,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xe10f5b20,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x1a2096a1,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0e1bd6cc,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xf400c3eb,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x10587a2b,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x9f24e63f,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x402667e8,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x8c11fbaf,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xa5b7f622,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xd69cec38,0x00000750
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xabeddac0,0x00000750
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x95a064bb,0x00000340
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x99755041,0x00000340
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0xa69cc4af,0x00000c98
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xfae2de6a,0x00000c98
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xef069abb,0x00000340
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xb26cdb5c,0x00000340
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xea942cfc,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x47e1a5b7,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xd7cea662,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x47e1a5b7,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd5a1abcc,0x00000208
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x5f1e6c8b,0x00000208
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT23_A8R8G8B8,0,0,0), 0x5ca02711,0x000000d0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x128x0,9/0,DXT23_A8R8G8B8,0,0,0), 0x6fce86bd,0x000000d0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd809f2e0,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x5b67a3b5,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xc3ded24b,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x0a12f98f,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xae992682,0x000002d8
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x335c3899,0x000002d8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x00497a5d,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x95d3a3ca,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x5fbd43a3,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xe612f15e,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xa391ba97,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0d991bd9,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0xb6d6957e,0x00001790
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x60a028f9,0x00001790
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xc9002266,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xc08fa01c,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x2f07d73b,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT23_A8R8G8B8,0,0,0), 0xa96843f7,0x00000138
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0x0de2c130,0x00000410
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xc3be084c,0x00000410
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x18 0 4 "COL1")
//         (0x10 0 4 "ATTR00")
//         (0x18 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r45, c[6][539]
//         movr r45.x, constant(0.27515482, 0.27515482, 0.27515482, 0.27515482).x
//         movr r45.y, constant(0.43280168, 0.43280168, 0.43280168, 0.43280168).x
//         movr r45.z, constant(0.39339420, 0.39339420, 0.39339420, 0.39339420).x
//         movr r45.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r5, r45
//         addr r5.w, r5.w, constant(-1.00000000, 0.00000000, 1.00000000, 0.00000000).x
//         cmpr r6.w, r5.w, constant(-1.00000000, 0.00000000, 1.00000000, 0.00000000).y, constant(-1.00000000, 0.00000000, 1.00000000, 0.00000000).z
//         texh r7, v4.xyzz, #0, #0, 2D
//         addr r6.x, r7.w, -c[6][565].w
//         mulr r6, r6.w, r6.x
//         texh r8, v4.xyzz, #1, #1, 2D
//         movr.c rc, r6
//         kil LT
//         mulh r6.xyz, r7, v1
//         cmph r6.xyz, -c[6][565].x, r7, r6
//         movr r44, c[6][539].w
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulh r6.w, r7.w, r44
//         movr r43, c[6][539].w
//         movr r43.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmph r7.w, r5.w, r6.w, r43
//         nrmh r9.xyz, v7
//         addr r8.xyz, r8, constant(-0.50000000, 0.20000000, 0.50000000, 0.00000000).x
//         addh r8.xyz, r8, r8
//         nrmh r10.xyz, r8
//         dp3h_sat r5.w, r10, r9
//         dp3h r6.w, r10, v5
//         lg2r r47, |r5.w|
//         mulr r47, r47, c[6][565].z
//         ex2r r47, r47
//         movh r8.x, r47
//         mulh r5.w, r8.w, r8.x
//         addh_sat r8.x, r6.w, constant(-0.50000000, 0.20000000, 0.50000000, 0.00000000).z
//         mulh r8.x, r5.w, r8.x
//         addr r8.y, -r6.w, constant(-0.50000000, 0.20000000, 0.50000000, 0.00000000).y
//         movh_sat r6.w, r6.w
//         movr r45, c[6][541]
//         movr r45.x, constant(1.55398500, 1.55398500, 1.55398500, 1.55398500).x
//         movr r45.y, constant(1.10054862, 1.10054862, 1.10054862, 1.10054862).x
//         movr r45.z, constant(0.66075848, 0.66075848, 0.66075848, 0.66075848).x
//         madh r5.xyz, r45, r6.w, r5
//         maxh r9.xyz, r5, constant(-0.50000000, 0.20000000, 0.50000000, 0.00000000).w
//         cmph r6.w, r8.y, r8.x, r5.w
//         movr r44, c[6][541]
//         movr r44.x, constant(1.55398500, 1.55398500, 1.55398500, 1.55398500).x
//         movr r44.y, constant(1.10054862, 1.10054862, 1.10054862, 1.10054862).x
//         movr r44.z, constant(0.66075848, 0.66075848, 0.66075848, 0.66075848).x
//         mulh r5.xyz, r6.w, r44
//         mulh_sat r5.xyz, r5, v5.w
//         madh r5.xyz, r9, r6, r5
//         lrph r6.xyz, v2.w, v2, r5
//         cmph r7.xyz, -c[6][565].y, r5, r6
//         movh r0, r7
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS.CENTROID R0, a[0x7c];   # [  0][000000] POSITION_W
//     	MUFU.RCP R8, R0;                 # [  1][000008]
//     	IPA.SC.CENTROID R1, a[0x304], R8; # [  2][000010] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC.CENTROID R0, a[0x300], R8; # [  3][000018] TEX0
//     	TEX.NODEP.T R4, R0, 0x1, 0x1, 2D; # [  4][000020]
//     	TEX.NODEP.T R0, R0, 0x0, 0x0, 2D; # [  5][000028]
//     	IPA.PASS R9, a[0x7c];            # [  6][000030] POSITION_W
//     	MUFU.RCP R9, R9;                 # [  7][000038]
//     	IPA.SC R13, a[0x330], R9;        # [  8][000040] TEX3
//     	IPA.SC R12, a[0x334], R9;        # [  9][000048] FIXED_FNC_TEXTURE_3_T
//     	IPA.SC R11, a[0x338], R9;        # [ 10][000050] FIXED_FNC_TEXTURE_3_R
//     	FMUL.FTZ R14, R13, R13;          # [ 11][000058]
//     	FFMA.FTZ R14, R12, R12, R14;     # [ 12][000060]
//     	FFMA.FTZ R14, R11, R11, R14;     # [ 13][000068]
//     	MUFU.RSQ R14, R14;               # [ 14][000070]
//     	FMUL.FTZ R13, R13, R14;          # [ 15][000078]
//     	FMUL.FTZ R16, R12, R14;          # [ 16][000080]
//     	FMUL.FTZ R14, R11, R14;          # [ 17][000088]
//     	MOV32I R11, 0x3edd982f;          # [ 18][000090]
//     	FADD.FTZ R4, R4, -0.5;           # [ 19][000098]
//     	FADD.FTZ R5, R5, -0.5;           # [ 20][0000a0]
//     	FADD.FTZ R6, R6, -0.5;           # [ 21][0000a8]
//     	FADD.FTZ R4, R4, R4;             # [ 22][0000b0]
//     	FADD.FTZ R5, R5, R5;             # [ 23][0000b8]
//     	FADD.FTZ R6, R6, R6;             # [ 24][0000c0]
//     	FMUL.FTZ R10, R4, R4;            # [ 25][0000c8]
//     	FFMA.FTZ R10, R5, R5, R10;       # [ 26][0000d0]
//     	F2F.FTZ R3, R3;                  # [ 27][0000d8]
//     	FFMA.FTZ R10, R6, R6, R10;       # [ 28][0000e0]
//     	MUFU.RSQ R15, R10;               # [ 29][0000e8]
//     	MOV32I R10, 0x3e8ce118;          # [ 30][0000f0]
//     	FMUL.FTZ R4, R4, R15;            # [ 31][0000f8]
//     	FMUL.FTZ R5, R5, R15;            # [ 32][000100]
//     	FMUL.FTZ R12, R4, R13;           # [ 33][000108]
//     	FMUL.FTZ R13, R6, R15;           # [ 34][000110]
//     	IPA.SC R6, a[0x310], R9;         # [ 35][000118] TEX1
//     	FFMA.FTZ R12, R5, R16, R12;      # [ 36][000120]
//     	IPA.SC R15, a[0x314], R9;        # [ 37][000128] FIXED_FNC_TEXTURE_1_T
//     	FFMA.FTZ.SAT R14, R13, R14, R12; # [ 38][000130]
//     	MOV32I R12, 0x3ec96af7;          # [ 39][000138]
//     	FMUL.FTZ R4, R4, R6;             # [ 40][000140]
//     	MUFU.LG2 R16, |R14|;             # [ 41][000148]
//     	IPA.SC R14, a[0x318], R9;        # [ 42][000150] FIXED_FNC_TEXTURE_1_R
//     	FFMA.FTZ R4, R5, R15, R4;        # [ 43][000158]
//     	FMUL.FMZ R16, R16, c[0x6][0x2358]; # [ 44][000160]
//     	IPA.SC R6, a[0x280], R9;         # [ 45][000168] COLOR_FRONT_DIFFUSE_RED
//     	IPA.SC R5, a[0x284], R9;         # [ 46][000170] COLOR_FRONT_DIFFUSE_GREEN
//     	RRO.EX2 R15, R16;                # [ 47][000178]
//     	FFMA.FTZ R13, R13, R14, R4;      # [ 48][000180]
//     	IPA.SC R4, a[0x288], R9;         # [ 49][000188] COLOR_FRONT_DIFFUSE_BLUE
//     	MUFU.EX2 R14, R15;               # [ 50][000190]
//     	FADD.FTZ.SAT R16, R13, 0.5;      # [ 51][000198]
//     	FMUL.FMZ R6, R0, R6;             # [ 52][0001a0]
//     	FMUL.FMZ R15, R7, R14;           # [ 53][0001a8]
//     	FADD32I.FTZ R7, -R13, 0.2;       # [ 54][0001b0]
//     	F2F.SAT R13, R13;                # [ 55][0001b8]
//     	FMUL.FMZ R16, R15, R16;          # [ 56][0001c0]
//     	IPA.SC R14, a[0x31c], R9;        # [ 57][0001c8] FIXED_FNC_TEXTURE_1_Q
//     	FFMA.FMZ R10, R13, c[0x9][0x0], R10; # [ 58][0001d0]
//     	FCMP.GE R15, R16, R15, R7;       # [ 59][0001d8]
//     	FFMA.FMZ R11, R13, c[0x9][0x4], R11; # [ 60][0001e0]
//     	FFMA.FMZ R16, R13, c[0x9][0x8], R12; # [ 61][0001e8]
//     	FMUL32I.FMZ R13, R15, 0x3f292778; # [ 62][0001f0]
//     	FMUL32I.FMZ R12, R15, 0x3f8cdec7; # [ 63][0001f8]
//     	FMUL32I.FMZ R15, R15, 0x3fc6e8fb; # [ 64][000200]
//     	FMUL.FMZ.SAT R13, R13, R14;      # [ 65][000208]
//     	FMUL.FMZ.SAT R12, R12, R14;      # [ 66][000210]
//     	FMUL.FMZ R5, R1, R5;             # [ 67][000218]
//     	FMUL.FMZ.SAT R14, R15, R14;      # [ 68][000220]
//     	FMUL.FMZ R4, R2, R4;             # [ 69][000228]
//     	IPA.SC.CENTROID R9, a[0x298], R8; # [ 70][000230] COLOR_FRONT_SPELWLAR_BLUE
//     	IPA.SC.CENTROID R7, a[0x29c], R8; # [ 71][000238] COLOR_FRONT_SPELWLAR_ALPHA
//     	IPA.SC.CENTROID R15, a[0x294], R8; # [ 72][000240] COLOR_FRONT_SPELWLAR_GREEN
//     	FMNMX.FTZ R10, R10, RZ, !PT;     # [ 73][000248]
//     	FCMP.LE R0, R0, R6, c[0x6][0x2350]; # [ 74][000250]
//     	IPA.SC.CENTROID R8, a[0x290], R8; # [ 75][000258] COLOR_FRONT_SPELWLAR_RED
//     	FMNMX.FTZ R11, R11, RZ, !PT;     # [ 76][000260]
//     	FCMP.LE R1, R1, R5, c[0x6][0x2350]; # [ 77][000268]
//     	FMNMX.FTZ R16, R16, RZ, !PT;     # [ 78][000270]
//     	FCMP.LE R4, R2, R4, c[0x6][0x2350]; # [ 79][000278]
//     	FFMA.FMZ R0, R10, R0, R14;       # [ 80][000280]
//     	FFMA.FMZ R2, R11, R1, R12;       # [ 81][000288]
//     	FFMA.FMZ R5, R16, R4, R13;       # [ 82][000290]
//     	FADD.FTZ R1, R8, -R0;            # [ 83][000298]
//     	FADD.FTZ R4, R15, -R2;           # [ 84][0002a0]
//     	FADD.FTZ R6, R9, -R5;            # [ 85][0002a8]
//     	FFMA.FTZ R1, R7, R1, R0;         # [ 86][0002b0]
//     	FFMA.FTZ R4, R7, R4, R2;         # [ 87][0002b8]
//     	FFMA.FTZ R6, R7, R6, R5;         # [ 88][0002c0]
//     	FCMP.LE R0, R0, R1, c[0x6][0x2354]; # [ 89][0002c8]
//     	FCMP.LE R1, R2, R4, c[0x6][0x2354]; # [ 90][0002d0]
//     	FCMP.LE R2, R5, R6, c[0x6][0x2354]; # [ 91][0002d8]
//     	EXIT;                            # [ 92][0002e0]
//     	END
//     END_SECTION
// END_SHADER
// 
