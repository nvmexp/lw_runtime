// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0xdbd6bd687c0888bb
//         FINGERPRINTER_HASH: 0x0000000000000000
//         UCODE_HASH: 0xbf18b93184afcf23
//         POOL: APP
//         VERSION: 20
//         # USES: 1039
//         # Constant Folding: 1
//         # Disable 595261: 1
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 0
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 26
//         TEXTURE_SLOTS: 16
//         SAMPLER_SLOTS: 8
//         THREAD_LOCAL_MEMORY_SIZE: 0x10
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             DOES_LOAD_OR_STORE
//             SHADER_LOCAL_MEMORY_LOW_SIZE 0x10
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//             GENERIC01_X          PERSPECTIVE
//             GENERIC01_Y          PERSPECTIVE
//             GENERIC02_X          PERSPECTIVE
//             GENERIC02_Y          PERSPECTIVE
//             GENERIC02_Z          PERSPECTIVE
//             GENERIC02_W          PERSPECTIVE
//             GENERIC03_X          PERSPECTIVE
//             GENERIC03_Y          PERSPECTIVE
//             GENERIC03_Z          PERSPECTIVE
//             GENERIC04_X          PERSPECTIVE
//             GENERIC04_Y          PERSPECTIVE
//             GENERIC04_Z          PERSPECTIVE
//             GENERIC05_X          PERSPECTIVE
//             GENERIC05_Y          PERSPECTIVE
//             GENERIC05_Z          PERSPECTIVE
//             GENERIC05_W          PERSPECTIVE
//             GENERIC06_X          PERSPECTIVE
//             GENERIC06_Y          PERSPECTIVE
//             GENERIC06_Z          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_5_0
        dcl_globalflags refactoringAllowed
        dcl_constantbuffer cb0[14].xyzw, immediateIndexed
        dcl_constantbuffer cb1[3].xyzw, immediateIndexed
        dcl_constantbuffer cb2[2].xyzw, immediateIndexed
        dcl_constantbuffer cb3[1].xyzw, immediateIndexed
        dcl_sampler s1, mode_default
        dcl_sampler s2, mode_default
        dcl_sampler s3, mode_default
        dcl_sampler s11, mode_default
        dcl_sampler s12, mode_default
        dcl_sampler s13, mode_comparison
        dcl_sampler s14, mode_default
        dcl_sampler s15, mode_default
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_resource t3, texture2d, (float, float, float, float)
        dcl_resource t11, texturelwbe, (float, float, float, float)
        dcl_resource t12, texturelwbe, (float, float, float, float)
        dcl_resource t13, texture2darray, (float, float, float, float)
        dcl_resource t14, texture3d, (float, float, float, float)
        dcl_resource t15, texturelwbe, (float, float, float, float)
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_input_ps v1.xy, linear
        dcl_input_ps v2.xyzw, linear
        dcl_input_ps v3.xyz, linear
        dcl_input_ps v4.xyz, linear
        dcl_input_ps v5.xyzw, linear
        dcl_input_ps v6.xyz, linear
        dcl_output o0.xyzw
        dcl_temps 7 
        sample (texture2d) (float,float,float,float) r0.xyzw, v1.xyxx, t1.xyzw, s1
        sample (texture2d) (float,float,float,float) r1.xy, v1.xyxx, t2.xyzw, s2
        sample (texture2d) (float,float,float,float) r2.xyzw, v1.xyxx, t3.xyzw, s3
        dp2 r1.w, r1.xyxx, r1.xyxx
        add r1.w, -r1.w, l(1.00000000)
        max r1.w, r1.w, l(0.00000000)
        sqrt r1.z, r1.w
        dp3 r1.w, v2.xyzx, v2.xyzx
        rsq r3.x, r1.w
        dp3 r3.y, v3.xyzx, v3.xyzx
        rsq r3.y, r3.y
        dp3 r3.z, v2.xyzx, r1.xyzx
        dp3 r3.w, v3.xyzx, r1.xyzx
        mul r3.zw, r3.xxxy, r3.zzzw
        add r3.w, -|r3.w|, l(1.00000000)
        max r3.w, r3.w, l(0.00000000)
        log r3.w, r3.w
        mul r3.w, r3.w, cb1[2].z
        exp r3.w, r3.w
        mad_sat r3.w, r3.w, cb1[2].y, cb1[2].x
        add_sat r1.w, -r1.w, v2.w
        mov_sat r4.x, r3.z
        add r3.z, -|r3.z|, l(1.00000000)
        add r4.y, -cb2[1].x, l(1.00000000)
        add r3.z, r3.z, -cb2[1].x
        div r4.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r4.y
        mul_sat r3.z, r3.z, r4.y
        mad r4.y, r3.z, l(-2.00000000), l(3.00000000)
        mul r3.z, r3.z, r3.z
        mul r3.z, r3.z, r4.y
        mad_sat r3.z, r3.z, cb2[1].y, r4.x
        mul r3.z, r1.w, r3.z
        mul r3.z, r3.z, cb2[0].x
        dp3 r4.x, -v2.xyzx, r1.xyzx
        add r4.x, r4.x, r4.x
        mad r1.xyz, r1.xyzx, -r4.xxxx, -v2.xyzx
        dp3 r1.x, r1.xyzx, v3.xyzx
        mul r1.x, r3.x, r1.x
        mul_sat r1.x, r3.y, r1.x
        mul r1.y, r2.w, cb2[0].z
        log r1.x, r1.x
        mul r1.x, r1.x, r1.y
        exp r1.x, r1.x
        mul r1.x, r1.w, r1.x
        mul r1.x, r1.x, cb2[0].y
        mul r1.x, r3.w, r1.x
        mul r1.xyz, r1.xxxx, r2.xyzx
        mad r1.xyz, r0.xyzx, r3.zzzz, r1.xyzx
        max r1.w, |v5.y|, |v5.x|
        max r1.w, r1.w, |v5.z|
        eq r2.xyz, |v5.xyzx|, r1.wwww
        movc r3.xyz, r2.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0), l(0x3f7e0000, 0x3f7e0000, 0x3f7e0000, 0)
        div r4.xyz, v5.xyzx, r1.wwww
        movc r2.xyz, r2.xyzx, l(0xbf800000, 0xbf800000, 0xbf800000, 0), l(0xbf7e0000, 0xbf7e0000, 0xbf7e0000, 0)
        max r2.xyz, r2.xyzx, r4.xyzx
        min r2.xyz, r3.xyzx, r2.xyzx
        sample (texturelwbe) (float,float,float,float) r2.xyz, r2.xyzx, t15.xyzw, s15
        div r1.w, l(-1.00000000), r1.w
        add r1.w, r1.w, v5.w
        mul r3.z, r2.z, l(65535.00000000)
        mov r4.xy, v0.xyxx
        mov r4.zw, l(0, 0, 0, 0x3d800000)
        mul r4.xyz, r4.xyzx, l(0.06250000, 0.06250000, 0.06250000, 0.00000000)
        add r3.xy, r2.xyxx, -cb0[13].zzzz
        sample_l (texture3d) (float,float,float,float) r2.xyzw, r4.xyzx, t14.xyzw, s14, l(0)
        mul r2.xyzw, r2.zwxy, cb0[13].wwww
        mov r5.xy, r2.zwzz
        mov r5.z, l(0)
        add r5.xyz, r3.xyzx, r5.xyzx
        sample_c_lz (texture2darray) (float,float,float,float) r2.w, r5.xyzx, t13.xxxx, s13, r1.w
        mov r2.z, l(0)
        add r2.xyz, r2.xyzx, r3.xyzx
        sample_c_lz (texture2darray) (float,float,float,float) r2.x, r2.xyzx, t13.xxxx, s13, r1.w
        add r2.x, r2.x, r2.w
        sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xywx, t14.xyzw, s14, l(0)
        mul r5.xyzw, r5.zwxy, cb0[13].wwww
        mov r6.xy, r5.zwzz
        mov r6.z, l(0)
        add r2.yzw, r3.xxyz, r6.xxyz
        sample_c_lz (texture2darray) (float,float,float,float) r2.y, r2.yzwy, t13.xxxx, s13, r1.w
        add r2.x, r2.y, r2.x
        mov r5.z, l(0)
        add r2.yzw, r3.xxyz, r5.xxyz
        sample_c_lz (texture2darray) (float,float,float,float) r2.y, r2.yzwy, t13.xxxx, s13, r1.w
        add r2.x, r2.y, r2.x
        mov r4.zw, l(0, 0, 0x3e000000, 0x3e400000)
        sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xyzx, t14.xyzw, s14, l(0)
        mul r5.xyzw, r5.zwxy, cb0[13].wwww
        mov r6.xy, r5.zwzz
        mov r6.z, l(0)
        add r2.yzw, r3.xxyz, r6.xxyz
        sample_c_lz (texture2darray) (float,float,float,float) r2.y, r2.yzwy, t13.xxxx, s13, r1.w
        add r2.x, r2.y, r2.x
        mov r5.z, l(0)
        add r2.yzw, r3.xxyz, r5.xxyz
        sample_c_lz (texture2darray) (float,float,float,float) r2.y, r2.yzwy, t13.xxxx, s13, r1.w
        add r2.x, r2.y, r2.x
        sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xywx, t14.xyzw, s14, l(0)
        mul r5.xyzw, r5.zwxy, cb0[13].wwww
        mov r6.xy, r5.zwzz
        mov r6.z, l(0)
        add r2.yzw, r3.xxyz, r6.xxyz
        sample_c_lz (texture2darray) (float,float,float,float) r2.y, r2.yzwy, t13.xxxx, s13, r1.w
        add r2.x, r2.y, r2.x
        mov r5.z, l(0)
        add r2.yzw, r3.xxyz, r5.xxyz
        sample_c_lz (texture2darray) (float,float,float,float) r2.y, r2.yzwy, t13.xxxx, s13, r1.w
        add r2.x, r2.y, r2.x
        mul r2.y, r2.x, l(0.12500000)
        mad r2.z, -r2.x, l(0.12500000), l(1.00000000)
        mul r2.z, r2.z, r2.y
        ne r2.z, r2.z, l(0.00000000)
        if_nz r2.z
          mov r4.zw, l(0, 0, 0x3e800000, 0x3ea00000)
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xyzx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xywx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r4.zw, l(0, 0, 0x3ec00000, 0x3ee00000)
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xyzx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xywx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r4.zw, l(0, 0, 0x3f000000, 0x3f100000)
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xyzx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xywx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r4.zw, l(0, 0, 0x3f200000, 0x3f300000)
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xyzx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xywx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r4.zw, l(0, 0, 0x3f400000, 0x3f500000)
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xyzx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xywx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r4.zw, l(0, 0, 0x3f600000, 0x3f700000)
          sample_l (texture3d) (float,float,float,float) r5.xyzw, r4.xyzx, t14.xyzw, s14, l(0)
          mul r5.xyzw, r5.zwxy, cb0[13].wwww
          mov r6.xy, r5.zwzz
          mov r6.z, l(0)
          add r6.xyz, r3.xyzx, r6.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r6.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          sample_l (texture3d) (float,float,float,float) r4.xyzw, r4.xywx, t14.xyzw, s14, l(0)
          mul r4.xyzw, r4.zwxy, cb0[13].wwww
          mov r5.xy, r4.zwzz
          mov r5.z, l(0)
          add r5.xyz, r3.xyzx, r5.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r2.z, r5.xyzx, t13.xxxx, s13, r1.w
          add r2.x, r2.z, r2.x
          mov r4.z, l(0)
          add r3.xyz, r3.xyzx, r4.xyzx
          sample_c_lz (texture2darray) (float,float,float,float) r1.w, r3.xyzx, t13.xxxx, s13, r1.w
          add r1.w, r1.w, r2.x
          mul r2.y, r1.w, l(0.03125000)
        endif 
        add_sat r1.w, r2.y, cb0[13].y
        mul r1.xyz, r1.wwww, r1.xyzx
        dp3 r1.w, v6.xyzx, v6.xyzx
        sqrt r1.w, r1.w
        min r1.w, r1.w, l(1.00000000)
        sample (texturelwbe) (float,float,float,float) r3.xyzw, v6.xyzx, t12.xyzw, s12
        lt r2.x, l(0.00000000), r2.y
        lt r1.w, r3.w, r1.w
        and r1.w, r1.w, r2.x
        add_sat r2.xyz, r3.xyzx, cb0[13].yyyy
        mul r2.xyz, r1.xyzx, r2.xyzx
        movc r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
        sample (texturelwbe) (float,float,float,float) r2.xyz, v4.xyzx, t11.xyzw, s11
        mul r1.xyz, r1.xyzx, r2.xyzx
        mul r0.xyz, r1.xyzx, cb0[2].xyzx
        mul o0.xyzw, r0.xyzw, cb3[0].xyzw
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f800000 // 1.000000
//         COP_CONST[1]: 0xbf800000 // -1.000000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][53] = 0x00000000 // 0.000000
//         USER_CONST: c[2][0] = 0x3f800000 // 1.000000
//         USER_CONST: c[3][3] = 0x3f800000 // 1.000000
//     END_SECTION
//     # Exelwtion Time: 16.242ms [0.757 percent]
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                  c[0][8] = 59.92%@1.04700100 40.08%@1.25885034
//                  c[0][9] = 59.92%@0.70863897 40.08%@0.85602087
//                  c[0][10] = 59.92%@0.33197886 40.08%@0.40282780
//                 ~c[0][53] = 100.00%@0.00000000
//                  c[0][54] = 59.92%@0.00390625 40.08%@0.00585938
//                  c[0][55] = 59.92%@0.00781250 40.08%@0.01171875
//                  c[1][8] = 90.08%@0.25000000 9.92%@0.10000000
//                  c[1][9] = 90.08%@0.75000000 9.92%@0.89999998
//                  c[1][10] = 90.08%@1.79999995 9.92%@2.29999995
//                 ~c[2][0] = 100.00%@1.00000000
//                  c[2][1] = 90.08%@6.00000000 9.92%@18.00000000
//                  c[2][2] = 90.08%@60.00000000 9.92%@3.50000000
//                  c[2][4] = 100.00%@0.69999999
//                  c[2][5] = 100.00%@0.15000001
//                  c[3][0] = 100.00%@1.00000000
//                  c[3][1] = 100.00%@1.00000000
//                  c[3][2] = 100.00%@1.00000000
//                 ~c[3][3] = 100.00%@1.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x780, height=0x4b0, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x1
//         100.00% width=0x200, height=0x200, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x2
//         100.00% width=0x200, height=0x200, mips=0xa, DXGI_FORMAT_BC5_SNORM
//         TEXTURE_SLOT 0x3
//         100.00% width=0x200, height=0x200, mips=0xa, DXGI_FORMAT_BC1_UNORM
//         TEXTURE_SLOT 0x4
//         100.00% width=0x20, height=0x20, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x5
//         100.00% width=0x400, height=0x400, mips=0xb, DXGI_FORMAT_BC4_UNORM
//         TEXTURE_SLOT 0x6
//         100.00% width=0x4, height=0x4, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x7
//         100.00% width=0x2, height=0x2, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x8
//         100.00% width=0x200, height=0x200, mips=0x1, DXGI_FORMAT_R32_FLOAT
//         TEXTURE_SLOT 0x9
//         100.00% width=0x10, height=0x10, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0xa
//         100.00% width=0x80, height=0x80, mips=0x1, DXGI_FORMAT_R16G16B16A16_UNORM
//         TEXTURE_SLOT 0xb
//         TEXTURE_SLOT 0xc
//         TEXTURE_SLOT 0xd
//         TEXTURE_SLOT 0xe
//         TEXTURE_SLOT 0xf
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Linear, mag=Linear, mip=Point aniso=1, minLOD=0.000000, maxLOD=0.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//         SAMPLER_SLOT 0x1
//         100.00%  min=Linear, mag=Linear, mip=Point aniso=1, minLOD=0.000000, maxLOD=0.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x2
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=16, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x3
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=16, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x4
//         100.00%  min=Linear, mag=Linear, mip=Point aniso=1, minLOD=0.000000, maxLOD=0.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//         SAMPLER_SLOT 0x5
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=16, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x6
//         100.00%  min=Linear, mag=Linear, mip=Point aniso=1, minLOD=0.000000, maxLOD=0.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//         SAMPLER_SLOT 0x7
//         100.00%  min=Anisotropic, mag=Linear, mip=Linear aniso=16, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R22, R0;                # [  1][000008]
//     	IPA R15, a[0x94], R22;           # [  2][000010] GENERIC_ATTRIBUTE_01_Y
//     	IPA R14, a[0x90], R22;           # [  3][000018] ATTR1
//     	TEX.NODEP.T R0, R14, 0x2, 0x2, 2D, 0x3; # [  4][000020]
//     	IPA R11, a[0xa0], R22;           # [  5][000028] ATTR2
//     	IPA R16, a[0xa4], R22;           # [  6][000030] GENERIC_ATTRIBUTE_02_Y
//     	IPA R9, a[0xa8], R22;            # [  7][000038] GENERIC_ATTRIBUTE_02_Z
//     	IPA R12, a[0xd4], R22;           # [  8][000040] GENERIC_ATTRIBUTE_05_Y
//     	IPA R10, a[0xb0], R22;           # [  9][000048] ATTR3
//     	IPA R8, a[0xb4], R22;            # [ 10][000050] GENERIC_ATTRIBUTE_03_Y
//     	IPA R20, a[0xd8], R22;           # [ 11][000058] GENERIC_ATTRIBUTE_05_Z
//     	FMUL.FTZ R18, R11, R11;          # [ 12][000060]
//     	FMUL.FTZ R2, R0, R0;             # [ 13][000068]
//     	FMUL.FTZ R4, R11, -R0;           # [ 14][000070]
//     	FFMA.FTZ R2, R1, R1, R2;         # [ 15][000078]
//     	FFMA.FTZ R4, R16, -R1, R4;       # [ 16][000080]
//     	FADD.FTZ R2, -R2, 1;             # [ 17][000088]
//     	FMNMX.FTZ R3, R2, RZ, !PT;       # [ 18][000090]
//     	IPA R2, a[0xd0], R22;            # [ 19][000098] ATTR5
//     	MUFU.RSQ R3, R3;                 # [ 20][0000a0]
//     	MUFU.RCP R3, R3;                 # [ 21][0000a8]
//     	FMNMX.FTZ R17, |R12|, |R2|, !PT; # [ 22][0000b0]
//     	FFMA.FTZ R4, R9, -R3, R4;        # [ 23][0000b8]
//     	FADD.FTZ R13, R4, R4;            # [ 24][0000c0]
//     	TEX.NODEP.T R4, R14, 0x3, 0x3, 2D; # [ 25][0000c8]
//     	FMUL.FTZ R19, R11, R0;           # [ 26][0000d0]
//     	FFMA.FTZ R21, R0, -R13, -R11;    # [ 27][0000d8]
//     	FMUL.FTZ R11, R10, R0;           # [ 28][0000e0]
//     	FMNMX.FTZ R0, R17, |R20|, !PT;   # [ 29][0000e8]
//     	FFMA.FTZ R18, R16, R16, R18;     # [ 30][0000f0]
//     	FFMA.FTZ R19, R16, R1, R19;      # [ 31][0000f8]
//     	FSETP.EQ.FTZ.AND P2, PT, |R20|, R0, PT; # [ 32][000100]
//     	FSETP.EQ.FTZ.AND P1, PT, |R12|, R0, PT; # [ 33][000108]
//     	FSETP.EQ.FTZ.AND P0, PT, |R2|, R0, PT; # [ 34][000110]
//     	MUFU.RCP R17, R0;                # [ 35][000118]
//     	MOV32I R0, -0x40820000;          # [ 36][000120]
//     	FFMA.FTZ R11, R8, R1, R11;       # [ 37][000128]
//     	FFMA.FTZ R16, R1, -R13, -R16;    # [ 38][000130]
//     	FMUL.FTZ R1, R20, R17;           # [ 39][000138]
//     	SEL R0, R0, c[0x10][0x4], !P2;   # [ 40][000140]
//     	FMUL.FTZ R12, R12, R17;          # [ 41][000148]
//     	FMUL.FTZ R20, R21, R10;          # [ 42][000150]
//     	FMNMX.FTZ R0, R0, R1, !PT;       # [ 43][000158]
//     	MOV32I R1, -0x40820000;          # [ 44][000160]
//     	FMUL.FTZ R10, R10, R10;          # [ 45][000168]
//     	MOV32I R21, -0x40820000;         # [ 46][000170]
//     	SEL R1, R1, c[0x10][0x4], !P1;   # [ 47][000178]
//     	FMNMX.FTZ R1, R1, R12, !PT;      # [ 48][000180]
//     	FFMA.FTZ R12, R8, R8, R10;       # [ 49][000188]
//     	FFMA.FTZ R8, R16, R8, R20;       # [ 50][000190]
//     	MOV32I R16, 0x3f800000;          # [ 51][000198]
//     	MOV32I R20, 0x3f7e0000;          # [ 52][0001a0]
//     	FMUL.FTZ R10, R2, R17;           # [ 53][0001a8]
//     	SEL R2, R21, c[0x10][0x4], !P0;  # [ 54][0001b0]
//     	SEL R20, R20, R16, !P2;          # [ 55][0001b8]
//     	MOV32I R21, 0x3f7e0000;          # [ 56][0001c0]
//     	FMNMX.FTZ R10, R2, R10, !PT;     # [ 57][0001c8]
//     	FMNMX.FTZ R2, R20, R0, PT;       # [ 58][0001d0]
//     	MOV32I R0, 0x3f7e0000;           # [ 59][0001d8]
//     	SEL R20, R0, R16, !P1;           # [ 60][0001e0]
//     	SEL R0, R21, R16, !P0;           # [ 61][0001e8]
//     	IPA R21, a[0xdc], R22;           # [ 62][0001f0] GENERIC_ATTRIBUTE_05_W
//     	FMNMX.FTZ R1, R20, R1, PT;       # [ 63][0001f8]
//     	FMNMX.FTZ R0, R0, R10, PT;       # [ 64][000200]
//     	IPA R10, a[0xb8], R22;           # [ 65][000208] GENERIC_ATTRIBUTE_03_Z
//     	FFMA.FTZ R20, R9, R9, R18;       # [ 66][000210]
//     	FFMA.FTZ R18, R9, R3, R19;       # [ 67][000218]
//     	FFMA.FTZ R19, R3, -R13, -R9;     # [ 68][000220]
//     	FADD.FTZ R13, -R17, R21;         # [ 69][000228]
//     	FMNMX R17, |R0|, |R1|, !PT;      # [ 70][000230]
//     	FFMA.FTZ R9, R10, R3, R11;       # [ 71][000238]
//     	FFMA.FTZ R3, R10, R10, R12;      # [ 72][000240]
//     	FMNMX R12, |R2|, R17, !PT;       # [ 73][000248]
//     	MUFU.RSQ R17, R20;               # [ 74][000250]
//     	FFMA.FTZ R19, R19, R10, R8;      # [ 75][000258]
//     	MUFU.RCP R8, R12;                # [ 76][000260]
//     	FMUL.FTZ R18, R17, R18;          # [ 77][000268]
//     	IPA R22, a[0xac], R22;           # [ 78][000270] GENERIC_ATTRIBUTE_02_W
//     	FADD.FTZ R12, R16, -c[0x2][0x10]; # [ 79][000278]
//     	FADD.FTZ R10, -|R18|, 1;         # [ 80][000280]
//     	FMUL R2, R2, R8;                 # [ 81][000288]
//     	FMUL R1, R1, R8;                 # [ 82][000290]
//     	FMUL R0, R0, R8;                 # [ 83][000298]
//     	MUFU.RCP R12, R12;               # [ 84][0002a0]
//     	FADD.FTZ R8, R10, -c[0x2][0x10]; # [ 85][0002a8]
//     	MUFU.RSQ R3, R3;                 # [ 86][0002b0]
//     	FADD.FTZ.SAT R11, -R20, R22;     # [ 87][0002b8]
//     	FMUL.FTZ.SAT R22, R8, R12;       # [ 88][0002c0]
//     	F2F R10, -|R3|;                  # [ 89][0002c8]
//     	F2F R9, |R9|;                    # [ 90][0002d0]
//     	MOV32I R8, 0x40400000;           # [ 91][0002d8]
//     	IPA.PASS R20, a[0x74];           # [ 92][0002e0] POSITION_Y
//     	FFMA.FTZ R12, R10, R9, c[0x10][0x0]; # [ 93][0002e8]
//     	FFMA.FTZ R21, R22, -2, R8;       # [ 94][0002f0]
//     	TEX.T R8, R0, 0xf, 0xf, LWBE, 0x7; # [ 95][0002f8]
//     	IPA.PASS R0, a[0x70];            # [ 96][000300] POSITION_X
//     	FMUL.FTZ R2, R22, R22;           # [ 97][000308]
//     	FMUL.FTZ R1, R17, R19;           # [ 98][000310]
//     	F2F.SAT R17, R18;                # [ 99][000318]
//     	FMUL.FTZ R2, R2, R21;            # [100][000320]
//     	FMUL.FTZ R21, R20, 0.0625;       # [101][000328]
//     	MOV R22, RZ;                     # [102][000330]
//     	FMUL.FTZ R20, R0, 0.0625;        # [103][000338]
//     	FFMA.FTZ.SAT R17, R2, c[0x2][0x14], R17; # [104][000340]
//     	FMUL.FTZ.SAT R18, R3, R1;        # [105][000348]
//     	TEX.LZ.T R0, R20, 0xe, 0xe, 3D;  # [106][000350]
//     	FMNMX.FTZ R12, R12, RZ, !PT;     # [107][000358]
//     	MUFU.LG2 R18, R18;               # [108][000360]
//     	MUFU.LG2 R12, R12;               # [109][000368]
//     	FMUL.FTZ R19, R7, c[0x2][0x8];   # [110][000370]
//     	FMUL.FTZ R7, R12, c[0x1][0x28];  # [111][000378]
//     	FMUL.FTZ R12, R18, R19;          # [112][000380]
//     	RRO.EX2 R7, R7;                  # [113][000388]
//     	MOV R18, c[0x1][0x20];           # [114][000390]
//     	RRO.EX2 R12, R12;                # [115][000398]
//     	MUFU.EX2 R7, R7;                 # [116][0003a0]
//     	MUFU.EX2 R12, R12;               # [117][0003a8]
//     	FFMA.FTZ.SAT R18, R7, c[0x1][0x24], R18; # [118][0003b0]
//     	FMUL.FTZ R7, R11, R17;           # [119][0003b8]
//     	MOV R17, R20;                    # [120][0003c0]
//     	FMUL.FTZ R11, R11, R12;          # [121][0003c8]
//     	TEX.NODEP.T R20, R14, 0x1, 0x1, 2D; # [122][0003d0]
//     	FMUL.FTZ R11, R11, c[0x2][0x4];  # [123][0003d8]
//     	FMUL.FTZ R14, R18, R11;          # [124][0003e0]
//     	FMUL32I.FTZ R12, R10, 65535;     # [125][0003e8]
//     	FADD.FTZ R24, R9, -c[0x0][0xd8]; # [126][0003f0]
//     	FADD.FTZ R25, R8, -c[0x0][0xd8]; # [127][0003f8]
//     	F2I.FTZ.U32 R10, R12;            # [128][000400]
//     	I2I.U16.U32.SAT R8, R10;         # [129][000408]
//     	FFMA.FTZ R10, R1, c[0x0][0xdc], R24; # [130][000410]
//     	FFMA.FTZ R9, R0, c[0x0][0xdc], R25; # [131][000418]
//     	TEX.LZ.DC.T R11, R8, R13, 0xd, 0xd, ARRAY_2D, 0x1; # [132][000420]
//     	FFMA.FTZ R10, R3, c[0x0][0xdc], R24; # [133][000428]
//     	FFMA.FTZ R9, R2, c[0x0][0xdc], R25; # [134][000430]
//     	TEX.LZ.DC.T R15, R8, R13, 0xd, 0xd, ARRAY_2D, 0x1; # [135][000438]
//     	IPA.PASS R18, a[0x74];           # [136][000440] POSITION_Y
//     	FMUL.FTZ R3, R14, R4;            # [137][000448]
//     	MOV32I R2, 0x3d800000;           # [138][000450]
//     	MOV R0, R17;                     # [139][000458]
//     	FMUL.FTZ R10, R14, R6;           # [140][000460]
//     	FMUL.FTZ R9, R14, R5;            # [141][000468]
//     	FMUL.FTZ R18, R18, 0.0625;       # [142][000470]
//     	MOV R1, R18;                     # [143][000478]
//     	FFMA.FTZ R3, R20, R7, R3;        # [144][000480]
//     	STL [0x0], R3;                   # [145][000488]
//     	TEX.LZ.T R0, R0, 0xe, 0xe, 3D;   # [146][000490]
//     	MOV R4, R8;                      # [147][000498]
//     	FADD.FTZ R11, R15, R11;          # [148][0004a0]
//     	FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [149][0004a8]
//     	FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [150][0004b0]
//     	TEX.LZ.DC.T R14, R4, R13, 0xd, 0xd, ARRAY_2D, 0x1; # [151][0004b8]
//     	FFMA.FTZ R6, R3, c[0x0][0xdc], R24; # [152][0004c0]
//     	FFMA.FTZ R5, R2, c[0x0][0xdc], R25; # [153][0004c8]
//     	TEX.LZ.DC.T R4, R4, R13, 0xd, 0xd, ARRAY_2D, 0x1; # [154][0004d0]
//     	MOV32I R2, 0x3e000000;           # [155][0004d8]
//     	MOV R1, R18;                     # [156][0004e0]
//     	MOV R0, R17;                     # [157][0004e8]
//     	TEX.LZ.T R0, R0, 0xe, 0xe, 3D;   # [158][0004f0]
//     	FADD.FTZ R5, R14, R11;           # [159][0004f8]
//     	FADD.FTZ R11, R4, R5;            # [160][000500]
//     	MOV R4, R8;                      # [161][000508]
//     	FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [162][000510]
//     	FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [163][000518]
//     	TEX.LZ.DC.T R14, R4, R13, 0xd, 0xd, ARRAY_2D, 0x1; # [164][000520]
//     	FFMA.FTZ R6, R3, c[0x0][0xdc], R24; # [165][000528]
//     	FFMA.FTZ R5, R2, c[0x0][0xdc], R25; # [166][000530]
//     	TEX.LZ.DC.T R4, R4, R13, 0xd, 0xd, ARRAY_2D, 0x1; # [167][000538]
//     	MOV32I R2, 0x3e400000;           # [168][000540]
//     	MOV R1, R18;                     # [169][000548]
//     	MOV R0, R17;                     # [170][000550]
//     	TEX.LZ.T R0, R0, 0xe, 0xe, 3D;   # [171][000558]
//     	FADD.FTZ R5, R14, R11;           # [172][000560]
//     	FADD.FTZ R11, R4, R5;            # [173][000568]
//     	MOV R4, R8;                      # [174][000570]
//     	FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [175][000578]
//     	FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [176][000580]
//     	TEX.LZ.DC.T R1, R4, R13, 0xd, 0xd, ARRAY_2D, 0x1; # [177][000588]
//     	FFMA.FTZ R6, R3, c[0x0][0xdc], R24; # [178][000590]
//     	FFMA.FTZ R5, R2, c[0x0][0xdc], R25; # [179][000598]
//     	TEX.LZ.DC.T R0, R4, R13, 0xd, 0xd, ARRAY_2D, 0x1; # [180][0005a0]
//     	FFMA.FTZ R21, R21, R7, R9;       # [181][0005a8]
//     	FFMA.FTZ R20, R22, R7, R10;      # [182][0005b0]
//     	FADD.FTZ R1, R1, R11;            # [183][0005b8]
//     	FADD.FTZ R17, R0, R1;            # [184][0005c0]
//     	FFMA.FTZ R0, R17, -0.125, R16;   # [185][0005c8]
//     	FMUL.FTZ R3, R17, 0.125;         # [186][0005d0]
//     	FMUL.FTZ R0, R0, R3;             # [187][0005d8]
//     	FSETP.NEU.FTZ.AND P0, PT, R0, RZ, PT; # [188][0005e0]
//     	@!P0 BRA.U L0b00;                # [189][0005e8]
//     	@P0 IPA.PASS R0, a[0x74];        # [190][0005f0] POSITION_Y
//     	@P0 IPA.PASS R22, a[0x70];       # [191][0005f8] POSITION_X
//     	@P0 MOV32I R2, 0x3e800000;       # [192][000600]
//     	@P0 FMUL.FTZ R18, R0, 0.0625;    # [193][000608]
//     	@P0 FMUL.FTZ R22, R22, 0.0625;   # [194][000610]
//     	@P0 MOV R1, R18;                 # [195][000618]
//     	@P0 MOV R0, R22;                 # [196][000620]
//     	@P0 TEX.LZ.T R8, R0, 0xe, 0xe, 3D; # [197][000628]
//     	@P0 MOV32I R2, 0x3ea00000;       # [198][000630]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [199][000638]
//     	@P0 F2I.FTZ.U32 R4, R12;         # [200][000640]
//     	@P0 MOV R15, R13;                # [201][000648]
//     	@P0 I2I.U16.U32.SAT R12, R4;     # [202][000650]
//     	@P0 MOV R4, R12;                 # [203][000658]
//     	@P0 FFMA.FTZ R6, R11, c[0x0][0xdc], R24; # [204][000660]
//     	@P0 FFMA.FTZ R5, R10, c[0x0][0xdc], R25; # [205][000668]
//     	@P0 TEX.LZ.DC.NODEP.T R11, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [206][000670]
//     	@P0 FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [207][000678]
//     	@P0 FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [208][000680]
//     	@P0 TEX.LZ.DC.NODEP.T R16, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [209][000688]
//     	@P0 MOV32I R6, 0x3ec00000;       # [210][000690]
//     	@P0 MOV R5, R18;                 # [211][000698]
//     	@P0 MOV R4, R22;                 # [212][0006a0]
//     	@P0 TEX.LZ.T R4, R4, 0xe, 0xe, 3D; # [213][0006a8]
//     	@P0 FFMA.FTZ R14, R9, c[0x0][0xdc], R24; # [214][0006b0]
//     	@P0 FFMA.FTZ R13, R8, c[0x0][0xdc], R25; # [215][0006b8]
//     	@P0 TEX.LZ.DC.NODEP.T R13, R12, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [216][0006c0]
//     	@P0 MOV R8, R12;                 # [217][0006c8]
//     	@P0 FFMA.FTZ R10, R3, c[0x0][0xdc], R24; # [218][0006d0]
//     	@P0 FFMA.FTZ R9, R2, c[0x0][0xdc], R25; # [219][0006d8]
//     	@P0 TEX.LZ.DC.NODEP.T R8, R8, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [220][0006e0]
//     	@P0 MOV R0, R12;                 # [221][0006e8]
//     	@P0 FFMA.FTZ R2, R5, c[0x0][0xdc], R24; # [222][0006f0]
//     	@P0 FFMA.FTZ R1, R4, c[0x0][0xdc], R25; # [223][0006f8]
//     	@P0 TEX.LZ.DC.NODEP.T R9, R0, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [224][000700]
//     	@P0 FFMA.FTZ R2, R7, c[0x0][0xdc], R24; # [225][000708]
//     	@P0 FFMA.FTZ R1, R6, c[0x0][0xdc], R25; # [226][000710]
//     	@P0 TEX.LZ.DC.NODEP.T R7, R0, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [227][000718]
//     	@P0 MOV32I R2, 0x3ee00000;       # [228][000720]
//     	@P0 MOV R1, R18;                 # [229][000728]
//     	@P0 MOV R0, R22;                 # [230][000730]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [231][000738]
//     	@P0 MOV R4, R12;                 # [232][000740]
//     	@P0 FADD.FTZ R14, R13, R17;      # [233][000748]
//     	@P0 FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [234][000750]
//     	@P0 FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [235][000758]
//     	@P0 TEX.LZ.DC.NODEP.T R10, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [236][000760]
//     	@P0 FFMA.FTZ R6, R3, c[0x0][0xdc], R24; # [237][000768]
//     	@P0 FFMA.FTZ R5, R2, c[0x0][0xdc], R25; # [238][000770]
//     	@P0 TEX.LZ.DC.NODEP.T R13, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [239][000778]
//     	@P0 MOV32I R2, 0x3f000000;       # [240][000780]
//     	@P0 MOV R1, R18;                 # [241][000788]
//     	@P0 MOV R0, R22;                 # [242][000790]
//     	@P0 FADD.FTZ R4, R11, R14;       # [243][000798]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [244][0007a0]
//     	@P0 FADD.FTZ R16, R16, R4;       # [245][0007a8]
//     	@P0 MOV R4, R12;                 # [246][0007b0]
//     	@P0 FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [247][0007b8]
//     	@P0 FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [248][0007c0]
//     	@P0 TEX.LZ.DC.NODEP.T R11, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [249][0007c8]
//     	@P0 FFMA.FTZ R6, R3, c[0x0][0xdc], R24; # [250][0007d0]
//     	@P0 FFMA.FTZ R5, R2, c[0x0][0xdc], R25; # [251][0007d8]
//     	@P0 TEX.LZ.DC.NODEP.T R14, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [252][0007e0]
//     	@P0 MOV32I R2, 0x3f100000;       # [253][0007e8]
//     	@P0 MOV R1, R18;                 # [254][0007f0]
//     	@P0 MOV R0, R22;                 # [255][0007f8]
//     	@P0 FADD.FTZ R4, R8, R16;        # [256][000800]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [257][000808]
//     	@P0 FADD.FTZ R16, R9, R4;        # [258][000810]
//     	@P0 MOV R4, R12;                 # [259][000818]
//     	@P0 FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [260][000820]
//     	@P0 FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [261][000828]
//     	@P0 TEX.LZ.DC.NODEP.T R8, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [262][000830]
//     	@P0 FFMA.FTZ R6, R3, c[0x0][0xdc], R24; # [263][000838]
//     	@P0 FFMA.FTZ R5, R2, c[0x0][0xdc], R25; # [264][000840]
//     	@P0 TEX.LZ.DC.NODEP.T R9, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [265][000848]
//     	@P0 MOV32I R2, 0x3f200000;       # [266][000850]
//     	@P0 MOV R1, R18;                 # [267][000858]
//     	@P0 MOV R0, R22;                 # [268][000860]
//     	@P0 FADD.FTZ R4, R7, R16;        # [269][000868]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [270][000870]
//     	@P0 FADD.FTZ R16, R10, R4;       # [271][000878]
//     	@P0 MOV R4, R12;                 # [272][000880]
//     	@P0 FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [273][000888]
//     	@P0 FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [274][000890]
//     	@P0 TEX.LZ.DC.NODEP.T R7, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [275][000898]
//     	@P0 FFMA.FTZ R6, R3, c[0x0][0xdc], R24; # [276][0008a0]
//     	@P0 FFMA.FTZ R5, R2, c[0x0][0xdc], R25; # [277][0008a8]
//     	@P0 TEX.LZ.DC.NODEP.T R10, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [278][0008b0]
//     	@P0 MOV32I R2, 0x3f300000;       # [279][0008b8]
//     	@P0 MOV R1, R18;                 # [280][0008c0]
//     	@P0 MOV R0, R22;                 # [281][0008c8]
//     	@P0 FADD.FTZ R4, R13, R16;       # [282][0008d0]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [283][0008d8]
//     	@P0 FADD.FTZ R13, R11, R4;       # [284][0008e0]
//     	@P0 MOV R4, R12;                 # [285][0008e8]
//     	@P0 FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [286][0008f0]
//     	@P0 FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [287][0008f8]
//     	@P0 TEX.LZ.DC.NODEP.T R11, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [288][000900]
//     	@P0 FFMA.FTZ R6, R3, c[0x0][0xdc], R24; # [289][000908]
//     	@P0 FFMA.FTZ R5, R2, c[0x0][0xdc], R25; # [290][000910]
//     	@P0 TEX.LZ.DC.NODEP.T R19, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [291][000918]
//     	@P0 MOV32I R2, 0x3f400000;       # [292][000920]
//     	@P0 MOV R1, R18;                 # [293][000928]
//     	@P0 MOV R0, R22;                 # [294][000930]
//     	@P0 FADD.FTZ R4, R14, R13;       # [295][000938]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [296][000940]
//     	@P0 FADD.FTZ R14, R8, R4;        # [297][000948]
//     	@P0 MOV R4, R12;                 # [298][000950]
//     	@P0 FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [299][000958]
//     	@P0 FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [300][000960]
//     	@P0 TEX.LZ.DC.NODEP.T R8, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [301][000968]
//     	@P0 FFMA.FTZ R6, R3, c[0x0][0xdc], R24; # [302][000970]
//     	@P0 FFMA.FTZ R5, R2, c[0x0][0xdc], R25; # [303][000978]
//     	@P0 TEX.LZ.DC.NODEP.T R13, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [304][000980]
//     	@P0 MOV32I R2, 0x3f500000;       # [305][000988]
//     	@P0 MOV R1, R18;                 # [306][000990]
//     	@P0 MOV R0, R22;                 # [307][000998]
//     	@P0 FADD.FTZ R4, R9, R14;        # [308][0009a0]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [309][0009a8]
//     	@P0 FADD.FTZ R7, R7, R4;         # [310][0009b0]
//     	@P0 MOV R4, R12;                 # [311][0009b8]
//     	@P0 FFMA.FTZ R6, R1, c[0x0][0xdc], R24; # [312][0009c0]
//     	@P0 FFMA.FTZ R5, R0, c[0x0][0xdc], R25; # [313][0009c8]
//     	@P0 TEX.LZ.DC.NODEP.T R4, R4, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [314][0009d0]
//     	@P0 MOV R14, R18;                # [315][0009d8]
//     	@P0 MOV R16, R12;                # [316][0009e0]
//     	@P0 FFMA.FTZ R18, R3, c[0x0][0xdc], R24; # [317][0009e8]
//     	@P0 FFMA.FTZ R17, R2, c[0x0][0xdc], R25; # [318][0009f0]
//     	@P0 TEX.LZ.DC.NODEP.T R5, R16, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [319][0009f8]
//     	@P0 MOV32I R2, 0x3f600000;       # [320][000a00]
//     	@P0 MOV R1, R14;                 # [321][000a08]
//     	@P0 MOV R0, R22;                 # [322][000a10]
//     	@P0 FADD.FTZ R6, R10, R7;        # [323][000a18]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [324][000a20]
//     	@P0 FADD.FTZ R7, R11, R6;        # [325][000a28]
//     	@P0 FFMA.FTZ R18, R1, c[0x0][0xdc], R24; # [326][000a30]
//     	@P0 FFMA.FTZ R17, R0, c[0x0][0xdc], R25; # [327][000a38]
//     	@P0 TEX.LZ.DC.NODEP.T R6, R16, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [328][000a40]
//     	@P0 FFMA.FTZ R18, R3, c[0x0][0xdc], R24; # [329][000a48]
//     	@P0 FFMA.FTZ R17, R2, c[0x0][0xdc], R25; # [330][000a50]
//     	@P0 TEX.LZ.DC.NODEP.T R9, R16, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [331][000a58]
//     	@P0 MOV R1, R14;                 # [332][000a60]
//     	@P0 MOV R0, R22;                 # [333][000a68]
//     	@P0 MOV32I R2, 0x3f700000;       # [334][000a70]
//     	@P0 TEX.LZ.T R0, R0, 0xe, 0xe, 3D; # [335][000a78]
//     	@P0 FFMA.FTZ R18, R1, c[0x0][0xdc], R24; # [336][000a80]
//     	@P0 FFMA.FTZ R17, R0, c[0x0][0xdc], R25; # [337][000a88]
//     	@P0 TEX.LZ.DC.NODEP.T R0, R16, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [338][000a90]
//     	@P0 FFMA.FTZ R18, R3, c[0x0][0xdc], R24; # [339][000a98]
//     	@P0 FFMA.FTZ R17, R2, c[0x0][0xdc], R25; # [340][000aa0]
//     	@P0 TEX.LZ.DC.NODEP.T R1, R16, R15, 0xd, 0xd, ARRAY_2D, 0x1; # [341][000aa8]
//     	@P0 FADD.FTZ R2, R19, R7;        # [342][000ab0]
//     	@P0 FADD.FTZ R2, R8, R2;         # [343][000ab8]
//     	@P0 FADD.FTZ R2, R13, R2;        # [344][000ac0]
//     	@P0 FADD.FTZ R2, R4, R2;         # [345][000ac8]
//     	@P0 FADD.FTZ R2, R5, R2;         # [346][000ad0]
//     	@P0 FADD.FTZ R2, R6, R2;         # [347][000ad8]
//     	@P0 FADD.FTZ R2, R9, R2;         # [348][000ae0]
//     	@P0 FADD.FTZ R0, R0, R2;         # [349][000ae8]
//     	@P0 FADD.FTZ R0, R1, R0;         # [350][000af0]
//     	@P0 FMUL.FTZ R3, R0, 0.03125;    # [351][000af8]
//     L0b00:
//     	IPA.PASS R1, a[0x7c];            # [352][000b00] POSITION_W
//     	MUFU.RCP R1, R1;                 # [353][000b08]
//     	IPA R8, a[0xe4], R1;             # [354][000b10] GENERIC_ATTRIBUTE_06_Y
//     	IPA R10, a[0xe0], R1;            # [355][000b18] ATTR6
//     	IPA R9, a[0xe8], R1;             # [356][000b20] GENERIC_ATTRIBUTE_06_Z
//     	IPA R13, a[0xc4], R1;            # [357][000b28] GENERIC_ATTRIBUTE_04_Y
//     	IPA R11, a[0xc0], R1;            # [358][000b30] ATTR4
//     	IPA R12, a[0xc8], R1;            # [359][000b38] GENERIC_ATTRIBUTE_04_Z
//     	FMNMX R0, |R10|, |R8|, !PT;      # [360][000b40]
//     	FMNMX R0, |R9|, R0, !PT;         # [361][000b48]
//     	FMNMX R4, |R11|, |R13|, !PT;     # [362][000b50]
//     	MUFU.RCP R0, R0;                 # [363][000b58]
//     	FMNMX R14, |R12|, R4, !PT;       # [364][000b60]
//     	FMUL R2, R9, R0;                 # [365][000b68]
//     	FMUL R1, R8, R0;                 # [366][000b70]
//     	FMUL R0, R10, R0;                # [367][000b78]
//     	TEX.NODEP.T R4, R0, 0xc, 0xc, LWBE; # [368][000b80]
//     	MUFU.RCP R0, R14;                # [369][000b88]
//     	FMUL R2, R12, R0;                # [370][000b90]
//     	FMUL R1, R13, R0;                # [371][000b98]
//     	FMUL R0, R11, R0;                # [372][000ba0]
//     	TEX.NODEP.T R0, R0, 0xb, 0xb, LWBE, 0x7; # [373][000ba8]
//     	FMUL.FTZ R10, R10, R10;          # [374][000bb0]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R3, PT; # [375][000bb8]
//     	FFMA.FTZ R8, R8, R8, R10;        # [376][000bc0]
//     	LDL.LU R10, [0x0];               # [377][000bc8]
//     	FFMA.FTZ R8, R9, R9, R8;         # [378][000bd0]
//     	F2F.FTZ.SAT R9, R3;              # [379][000bd8]
//     	F2F.FTZ R3, R23;                 # [380][000be0]
//     	MUFU.RSQ R8, R8;                 # [381][000be8]
//     	FMUL.FTZ R10, R9, R10;           # [382][000bf0]
//     	FMUL.FTZ R11, R9, R21;           # [383][000bf8]
//     	MUFU.RCP R8, R8;                 # [384][000c00]
//     	FMUL.FTZ R9, R9, R20;            # [385][000c08]
//     	FMNMX.FTZ R8, R8, 1, PT;         # [386][000c10]
//     	FSETP.LT.FTZ.AND P0, PT, R7, R8, P0; # [387][000c18]
//     	F2F.FTZ.SAT R6, R6;              # [388][000c20]
//     	F2F.FTZ.SAT R5, R5;              # [389][000c28]
//     	F2F.FTZ.SAT R4, R4;              # [390][000c30]
//     	@P0 FMUL.FTZ R9, R9, R6;         # [391][000c38]
//     	@P0 FMUL.FTZ R11, R11, R5;       # [392][000c40]
//     	@P0 FMUL.FTZ R10, R10, R4;       # [393][000c48]
//     	FMUL.FTZ R2, R9, R2;             # [394][000c50]
//     	FMUL.FTZ R1, R11, R1;            # [395][000c58]
//     	FMUL.FTZ R0, R10, R0;            # [396][000c60]
//     	FMUL.FTZ R2, R2, c[0x0][0x28];   # [397][000c68]
//     	FMUL.FTZ R1, R1, c[0x0][0x24];   # [398][000c70]
//     	FMUL.FTZ R0, R0, c[0x0][0x20];   # [399][000c78]
//     	FMUL.FTZ R2, R2, c[0x3][0x8];    # [400][000c80]
//     	FMUL.FTZ R1, R1, c[0x3][0x4];    # [401][000c88]
//     	FMUL.FTZ R0, R0, c[0x3][0x0];    # [402][000c90]
//     	EXIT;                            # [403][000c98]
//     	END
//     END_SECTION
// END_SHADER
// 
