// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x95e5a7d9d908ae1c
//         FINGERPRINTER_HASH: 0x0000000000000000
//         UCODE_HASH: 0x1c1b66b15fc9cba7
//         POOL: APP
//         VERSION: 20
//         # USES: 105
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 1
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 32
//         TEXTURE_SLOTS: 53
//         SAMPLER_SLOTS: 2
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//             KILLS_PIXELS
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_5_0
        dcl_globalflags refactoringAllowed
        dcl_immediateconstantbuffer { { 0, 0, 0, 0 } } 
        dcl_constantbuffer cb10[27].xyzw, immediateIndexed
        dcl_sampler s4, mode_default
        dcl_sampler s6, mode_comparison
        dcl_resource t50, texture2d, (float, float, float, float)
        dcl_resource t51, texture2d, (float, float, float, float)
        dcl_resource t52, texture2d, (float, float, float, float)
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_output o0.xyzw
        dcl_temps 10 
        ftoi r0.xy, v0.xyxx
        mov r0.zw, l(0, 0, 0, 0)
        ld (texture2d) (float,float,float,float) r0.xyz, r0.xyzw, t51.xyzw
        dp2 r0.w, r0.xyxx, r0.xyxx
        add r0.w, -r0.w, l(1.00000000)
        sqrt r0.w, |r0.w|
        lt r1.x, l(0.00000000), r0.z
        movc r1.z, r1.x, r0.w, -r0.w
        mul r2.xy, |r0.zzzz|, cb10[24].zwzz
        mad r2.zw, v0.xxxy, cb10[24].xxxy, l(0.00000000, 0.00000000, -1.00000000, -1.00000000)
        mul r2.xy, r2.zwzz, r2.xyxx
        mul r3.xyzw, r2.yyyy, cb10[5].xyzw
        mad r3.xyzw, r2.xxxx, cb10[4].xyzw, r3.xyzw
        mad r3.xyzw, |r0.zzzz|, cb10[6].xyzw, r3.xyzw
        add r3.xyzw, r3.xyzw, cb10[7].xyzw
        dp4 r4.x, cb10[16].xyzw, r3.xyzw
        dp4 r4.y, cb10[17].xyzw, r3.xyzw
        dp4 r4.z, cb10[18].xyzw, r3.xyzw
        dp4 r0.w, cb10[19].xyzw, r3.xyzw
        div r3.xyz, r4.xyzx, r0.wwww
        lt r4.xyz, r3.xyzx, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        or r0.w, r4.y, r4.x
        or r0.w, r4.z, r0.w
        discard_sat r0.w
        add r4.xyz, -r3.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
        lt r4.xyz, r4.xyzx, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        or r0.w, r4.y, r4.x
        or r0.w, r4.z, r0.w
        discard_sat r0.w
        mul r0.w, r2.y, cb10[9].z
        mad r0.w, r2.x, cb10[8].z, r0.w
        mad r0.z, |r0.z|, cb10[10].z, r0.w
        add r0.z, r0.z, cb10[11].z
        add r0.z, r0.z, -cb10[26].y
        mul r0.w, r0.z, cb10[26].z
        mov r1.xy, r0.xyxx
        dp3_sat r0.x, cb10[21].xyzx, r1.xyzx
        add r0.y, -r0.x, l(1.00000000)
        mad r0.y, r0.y, cb10[22].x, cb10[22].y
        mad r0.y, r3.z, cb10[22].z, r0.y
        add r1.z, -r0.y, r3.z
        add r0.x, r0.x, r0.x
        min r0.x, r0.x, l(1.00000000)
        mad_sat r0.y, r0.w, l(2.00000000), l(-1.00000000)
        mad r0.y, r0.y, l(2.00000000), cb10[25].z
        max r0.y, r0.y, l(0.20000000)
        mul r2.x, r0.y, cb10[25].y
        if_nz cb10[25].x
          add r3.w, -r3.y, l(1.00000000)
          mul r0.yw, r3.xxxw, l(0.00000000, 16.00000000, 0.00000000, 16.00000000)
          sample (texture2d) (float,float,float,float) r0.yw, r0.ywyy, t50.xywz, s4
          mad r0.yw, r0.yyyw, l(0.00000000, 2.00000000, 0.00000000, 2.00000000), l(0.00000000, -1.00000000, 0.00000000, -1.00000000)
          mul r0.yw, r2.xxxx, r0.yyyw
          mul r3.zw, r3.xxxw, l(0.00000000, 0.00000000, 64.00000000, 64.00000000)
          sample (texture2d) (float,float,float,float) r3.zw, r3.zwzz, t50.xwyz, s4
          mad r3.zw, r3.zzzw, l(0.00000000, 0.00000000, 2.00000000, 2.00000000), l(0.00000000, 0.00000000, -1.00000000, -1.00000000)
          mul r3.zw, r2.xxxx, r3.zzzw
          mul r3.zw, r3.zzzw, l(0.00000000, 0.00000000, 0.33000001, 0.33000001)
          mad r2.xy, r0.ywyy, l(0.66000003, 0.66000003, 0.00000000, 0.00000000), r3.zwzz
        else 
          mov r2.y, l(0)
        endif 
        mov r2.z, -r2.x
        mad r1.xy, r3.xyxx, l(1.00000000, -1.00000000, 0.00000000, 0.00000000), l(denormal  , 1.00000000, 0.00000000, 0.00000000)
        mov r3.z, l(0)
        mov r0.yw, l(0, 0, 0, 0)
        loop 
          ige r1.w, r0.w, l(0xc)
          breakc_nz r1.w
          dp2 r3.x, icb[r0.w].xyxx, r2.xyxx
          dp2 r3.y, icb[r0.w].xyxx, r2.yzyy
          add r3.xyw, r1.xyxz, r3.xyxz
          mad r4.xyzw, cb10[23].yxxx, r3.yxxx, l(0.50000000, 0.50000000, 0.50000000, 0.50000000)
          round_ni r3.xy, r4.wxww
          add r4.xyzw, -r3.yxxx, r4.xyzw
          mul r3.xy, r3.xyxx, cb10[23].zwzz
          gather4_c aoffimmi(-1, -1, 0) (texture2d) (float,float,float,float) r5.xyzw, r3.xyxx, t52.xyzw, s6.x, r3.w
          add r6.xyzw, -r4.xyzw, l(1.00000000, 1.00000000, 2.00000000, 3.00000000)
          mul r7.xyzw, r5.wzxy, r6.yzyz
          add r4.yz, r7.yywy, r7.xxzx
          gather4_c aoffimmi(1, -1, 0) (texture2d) (float,float,float,float) r7.xyzw, r3.xyxx, t52.xyzw, s6.x, r3.w
          add r8.xyz, r4.wwww, l(1.00000000, 1.00000000, 2.00000000, 0.00000000)
          mul r1.w, r7.x, r8.z
          mul r5.zw, r4.wwww, r7.zzzy
          mad r7.xy, r7.wxww, r8.yyyy, r5.zwzz
          mul r2.w, r6.x, r7.x
          mad r2.w, r6.x, r4.y, r2.w
          mul r4.y, r4.x, r7.y
          mad r4.y, r4.x, r4.z, r4.y
          gather4_c aoffimmi(-1, 1, 0) (texture2d) (float,float,float,float) r7.xyzw, r3.xyxx, t52.xyzw, s6.x, r3.w
          mul r9.xyzw, r6.yzyz, r7.wzxy
          add r6.yz, r9.yywy, r9.xxzx
          mad r2.w, r6.x, r6.y, r2.w
          mad r4.y, r4.x, r6.z, r4.y
          mad r4.z, -r4.w, l(2.00000000), l(2.00000000)
          mul r5.y, r5.y, r6.w
          mad r5.x, r5.x, r4.z, r5.y
          mul r5.y, r6.w, r7.z
          mad r4.z, r7.w, r4.z, r5.y
          gather4_c aoffimmi(1, 1, 0) (texture2d) (float,float,float,float) r7.xyzw, r3.xyxx, t52.xyzw, s6.x, r3.w
          mul r3.x, r8.z, r7.w
          mul r3.yw, r4.wwww, r7.zzzy
          mad r5.yz, r7.wwxw, r8.xxyx, r3.yywy
          mad r7.x, r6.x, r5.y, r2.w
          mad r7.y, r4.x, r5.z, r4.y
          mad r1.w, r5.w, l(2.00000000), r1.w
          mul r1.w, r1.w, r6.x
          mad r7.z, r6.x, r5.x, r1.w
          mad r1.w, r3.y, l(2.00000000), r3.x
          mul r1.w, r1.w, r4.x
          mad r7.w, r4.x, r4.z, r1.w
          dp4 r1.w, r7.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
          mad r0.y, r1.w, l(0.06666667), r0.y
          iadd r0.w, r0.w, l(0x1)
        endloop 
        mul r0.y, r0.y, cb10[25].w
        mad r0.z, -r0.z, cb10[26].z, l(1.00000000)
        mul r0.y, r0.y, l(0.08333334)
        mul_sat r0.z, r0.z, r0.y
        mul r0.x, r0.x, r0.z
        movc_sat o0.w, cb10[26].x, r0.y, r0.x
        mov o0.xyz, l(0, 0, 0, 0)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3aa3d70a // 0.001250
//         COP_CONST[1]: 0x3a4ccccd // 0.000781
//         COP_CONST[2]: 0x3d888889 // 0.066667
//     END_SECTION
//     BEGIN_SECTION HLSL_CONSTANTS
//         HLSL_CONST[0]: 0xbea70542 // -0.326212
//         HLSL_CONST[1]: 0xbecfc5ac // -0.405805
//         HLSL_CONST[2]: 0x00000000 // 0.000000
//         HLSL_CONST[3]: 0x00000000 // 0.000000
//         HLSL_CONST[4]: 0xbf5713ad // -0.840144
//         HLSL_CONST[5]: 0xbd96b11c // -0.073580
//         HLSL_CONST[6]: 0x00000000 // 0.000000
//         HLSL_CONST[7]: 0x00000000 // 0.000000
//         HLSL_CONST[8]: 0xbf32276b // -0.695914
//         HLSL_CONST[9]: 0x3eea0ddc // 0.457137
//         HLSL_CONST[10]: 0x00000000 // 0.000000
//         HLSL_CONST[11]: 0x00000000 // 0.000000
//         HLSL_CONST[12]: 0xbe5039ac // -0.203345
//         HLSL_CONST[13]: 0x3f1ee73e // 0.620716
//         HLSL_CONST[14]: 0x00000000 // 0.000000
//         HLSL_CONST[15]: 0x00000000 // 0.000000
//         HLSL_CONST[16]: 0x3f765bea // 0.962340
//         HLSL_CONST[17]: 0xbe47a9a0 // -0.194983
//         HLSL_CONST[18]: 0x00000000 // 0.000000
//         HLSL_CONST[19]: 0x00000000 // 0.000000
//         HLSL_CONST[20]: 0x3ef265f1 // 0.473434
//         HLSL_CONST[21]: 0xbef5c5f8 // -0.480026
//         HLSL_CONST[22]: 0x00000000 // 0.000000
//         HLSL_CONST[23]: 0x00000000 // 0.000000
//         HLSL_CONST[24]: 0x3f04fb12 // 0.519456
//         HLSL_CONST[25]: 0x3f445b8e // 0.767022
//         HLSL_CONST[26]: 0x00000000 // 0.000000
//         HLSL_CONST[27]: 0x00000000 // 0.000000
//         HLSL_CONST[28]: 0x3e3de97d // 0.185461
//         HLSL_CONST[29]: 0xbf64a3c6 // -0.893124
//         HLSL_CONST[30]: 0x00000000 // 0.000000
//         HLSL_CONST[31]: 0x00000000 // 0.000000
//         HLSL_CONST[32]: 0x3f01e6ff // 0.507431
//         HLSL_CONST[33]: 0x3d83f141 // 0.064425
//         HLSL_CONST[34]: 0x00000000 // 0.000000
//         HLSL_CONST[35]: 0x00000000 // 0.000000
//         HLSL_CONST[36]: 0x3f657bc8 // 0.896420
//         HLSL_CONST[37]: 0x3ed32db2 // 0.412458
//         HLSL_CONST[38]: 0x00000000 // 0.000000
//         HLSL_CONST[39]: 0x00000000 // 0.000000
//         HLSL_CONST[40]: 0xbea4d552 // -0.321940
//         HLSL_CONST[41]: 0xbf6ebfdb // -0.932615
//         HLSL_CONST[42]: 0x00000000 // 0.000000
//         HLSL_CONST[43]: 0x00000000 // 0.000000
//         HLSL_CONST[44]: 0xbf4aa39c // -0.791559
//         HLSL_CONST[45]: 0xbf190332 // -0.597705
//         HLSL_CONST[46]: 0x00000000 // 0.000000
//         HLSL_CONST[47]: 0x00000000 // 0.000000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[10][64] = 0x3f000000 // 0.500000
//         USER_CONST: c[10][65] = 0x00000000 // 0.000000
//         USER_CONST: c[10][66] = 0x00000000 // 0.000000
//         USER_CONST: c[10][67] = 0x3f002000 // 0.500488
//         USER_CONST: c[10][68] = 0x00000000 // 0.000000
//         USER_CONST: c[10][69] = 0x3f000000 // 0.500000
//         USER_CONST: c[10][70] = 0x00000000 // 0.000000
//         USER_CONST: c[10][71] = 0x3f002000 // 0.500488
//         USER_CONST: c[10][72] = 0x00000000 // 0.000000
//         USER_CONST: c[10][73] = 0x00000000 // 0.000000
//         USER_CONST: c[10][74] = 0x3f800000 // 1.000000
//         USER_CONST: c[10][75] = 0x00000000 // 0.000000
//         USER_CONST: c[10][76] = 0x00000000 // 0.000000
//         USER_CONST: c[10][77] = 0x00000000 // 0.000000
//         USER_CONST: c[10][78] = 0x00000000 // 0.000000
//         USER_CONST: c[10][79] = 0x3f800000 // 1.000000
//         USER_CONST: c[10][92] = 0x44800000 // 1024.000000
//         USER_CONST: c[10][93] = 0x44800000 // 1024.000000
//         USER_CONST: c[10][94] = 0x3a800000 // 0.000977
//         USER_CONST: c[10][95] = 0x3a800000 // 0.000977
//         USER_CONST: c[10][96] = 0x3a4ccccd // 0.000781
//         USER_CONST: c[10][97] = 0x3aa3d70a // 0.001250
//         USER_CONST: c[10][98] = 0x3f52f537 // 0.824054
//         USER_CONST: c[10][99] = 0x3f03d942 // 0.515034
//         USER_CONST: c[10][101] = 0x3c300000 // 0.010742
//         USER_CONST: c[10][102] = 0x3e4ccccd // 0.200000
//         USER_CONST: c[10][100] = 0x00000000 // 0.000000
//     END_SECTION
//     # Exelwtion Time: 116.550ms [2.529 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x3 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x4 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 0 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 4 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//                 indexableRanges: 3 :  (null 0 775057952 120) (null 0 746224247 32) (null 0 1819634954 32)
//         #numStaticConsts : 12
//         staticConsts : 0xbea70542 0xbecfc5ac 0x00000000 0x00000000 0xbf5713ad 0xbd96b11c 0x00000000 0x00000000 0xbf32276b 0x3eea0ddc 0x00000000 0x00000000 0xbe5039ac 0x3f1ee73e 0x00000000 0x00000000 0x3f765bea 0xbe47a9a0 0x00000000 0x00000000 0x3ef265f1 0xbef5c5f8 0x00000000 0x00000000 0x3f04fb12 0x3f445b8e 0x00000000 0x00000000 0x3e3de97d 0xbf64a3c6 0x00000000 0x00000000 0x3f01e6ff 0x3d83f141 0x00000000 0x00000000 0x3f657bc8 0x3ed32db2 0x00000000 0x00000000 0xbea4d552 0xbf6ebfdb 0x00000000 0x00000000 0xbf4aa39c 0xbf190332 0x00000000 0x00000000
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr (s32) r9.xy, (r) v0.xyxx  //   0 SHD
//         movu32 (u32) r9.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r9.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r9, (u32) r4106, #51, #0, 2D, LOAD  //   0 SHD
//         movr (r) r9.xyz, (r) r4105  //   0 SHD
//         dp2r (r) r9.w, (r) r9.xyxx, (r) r9.xyxx  //   0 SHD
//         addr (r) r9.w, (r) -r9.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         rsqr (r) r4106.x, (r) |r9.w|  //   0 SHD
//         rsqr (r) r4106.y, (r) |r9.w|  //   0 SHD
//         rsqr (r) r4106.z, (r) |r9.w|  //   0 SHD
//         rsqr (r) r4106.w, (r) |r9.w|  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 SHD
//         movr (r) r9.w, (r) r4107  //   0 SHD
//         set_ltr.c (s32) r10.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.x  //   0 SHD
//         movr (r) r4105, (r) r9.w  //   0 SHD
//         movr (r) r4105(EQ), (r) -r9.w  //   0 SHD
//         movr (r) r10.z, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[10][24].zwzz  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.xy, (r) |r9.z|, (r) r4109  //   0 SHD
//         movr (r) r4109, (r) c[10][24].xxxy  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r11.zw, (r) v0.xxxy, (r) r4109, (r) constant(0.00000000, 0.00000000, -1.00000000, -1.00000000)  //   0 SHD
//         mulr (r) r11.xy, (r) r11.zwzz, (r) r11.xyxx  //   0 SHD
//         mulr (r) r12, (r) r11.y, (r) c[10][5]  //   0 SHD
//         madr (r) r12, (r) r11.x, (r) c[10][4], (r) r12  //   0 SHD
//         madr (r) r12, (r) |r9.z|, (r) c[10][6], (r) r12  //   0 SHD
//         addr (r) r12, (r) r12, (r) c[10][7]  //   0 SHD
//         movr (r) r4108, (r) c[10][16]  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.50048828, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r13.x, (r) r4108, (r) r12  //   0 SHD
//         movr (r) r4108, (r) c[10][17]  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.50048828, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r13.y, (r) r4108, (r) r12  //   0 SHD
//         movr (r) r4108, (r) c[10][18]  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r13.z, (r) r4108, (r) r12  //   0 SHD
//         movr (r) r4108, (r) c[10][19]  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r9.w, (r) r4108, (r) r12  //   0 SHD
//         divr (r) r4105.x, (r) r13.x, (r) r9.w  //   0 SHD
//         divr (r) r4105.y, (r) r13.y, (r) r9.w  //   0 SHD
//         divr (r) r4105.z, (r) r13.z, (r) r9.w  //   0 SHD
//         movr (r) r12.xyz, (r) r4105  //   0 SHD
//         set_ltr.c (s32) r13.xyz, (r) r12.xyzx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)  //   0 SHD
//         oru32 (u32) r9.w, (u32) r13.y, (u32) r13.x  //   0 SHD
//         oru32 (u32) r9.w, (u32) r13.z, (u32) r9.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r9.w  //   0 SHD
//         kil NE.x  //   0 SHD
//         addr (r) r13.xyz, (r) -r12.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         set_ltr.c (s32) r13.xyz, (r) r13.xyzx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)  //   0 SHD
//         oru32 (u32) r9.w, (u32) r13.y, (u32) r13.x  //   0 SHD
//         oru32 (u32) r9.w, (u32) r13.z, (u32) r9.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r9.w  //   0 SHD
//         kil NE.x  //   0 SHD
//         mulr (r) r9.w, (r) r11.y, (r) c[10][9].z  //   0 SHD
//         madr (r) r9.w, (r) r11.x, (r) c[10][8].z, (r) r9.w  //   0 SHD
//         madr (r) r9.z, (r) |r9.z|, (r) c[10][10].z, (r) r9.w  //   0 SHD
//         addr (r) r9.z, (r) r9.z, (r) c[10][11].z  //   0 SHD
//         addr (r) r9.z, (r) r9.z, (r) -c[10][26].y  //   0 SHD
//         mulr (r) r9.w, (r) r9.z, (r) c[10][26].z  //   0 SHD
//         movu32 (u32) r10.xy, (u32) r9.xyxx  //   0 SHD
//         dp3r_sat (r) r9.x, (r) c[10][21].xyzx, (r) r10.xyzx  //   0 SHD
//         addr (r) r9.y, (r) -r9.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.y, (r) r9.y, (r) c[10][22].x, (r) c[10][22].y  //   0 SHD
//         madr (r) r9.y, (r) r12.z, (r) c[10][22].z, (r) r9.y  //   0 SHD
//         addr (r) r10.z, (r) -r9.y, (r) r12.z  //   0 SHD
//         addr (r) r9.x, (r) r9.x, (r) r9.x  //   0 SHD
//         minr (r) r9.x, (r) r9.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(3212836864, 0, 0, 0).x  //   0 SHD
//         madr_sat (r) r9.y, (r) r9.w, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[10][25].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.y, (r) r9.y, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4110  //   0 SHD
//         maxr (r) r9.y, (r) r9.y, (r) constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[10][25].y  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.01074219, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.01074219, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.01074219, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.01074219, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.x, (r) r9.y, (r) r4109  //   0 SHD
//         movs32 (s32) r4108, (s32) c[10][25].x  //   0 SHD
//         movs32 (s32) r4108.x, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.y, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.z, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.w, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r4108  //   0 SHD
//         ife NE.x , l0, l1  //   0 SHD
//         addr (r) r12.w, (r) -r12.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r9.yw, (r) r12.xxxw, (r) constant(0.00000000, 16.00000000, 0.00000000, 16.00000000)  //   0 SHD
//         txgr (r) r4105, (r) r9.ywyy, (r) r4106, #50, #4, 2D, AUTO  //   0 SHD
//         movr (r) r9.yw, (r) r4105.xywz  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(0, 3212836864, 0, 3212836864)  //   0 SHD
//         madr (r) r9.yw, (r) r9.yyyw, (r) constant(0.00000000, 2.00000000, 0.00000000, 2.00000000), (r) r4105  //   0 SHD
//         mulr (r) r9.yw, (r) r11.x, (r) r9.yyyw  //   0 SHD
//         mulr (r) r12.zw, (r) r12.xxxw, (r) constant(0.00000000, 0.00000000, 64.00000000, 64.00000000)  //   0 SHD
//         txgr (r) r4105, (r) r12.zwzz, (r) r4106, #50, #4, 2D, AUTO  //   0 SHD
//         movr (r) r12.zw, (r) r4105.xwyz  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(0, 0, 3212836864, 3212836864)  //   0 SHD
//         madr (r) r12.zw, (r) r12.zzzw, (r) constant(0.00000000, 0.00000000, 2.00000000, 2.00000000), (r) r4105  //   0 SHD
//         mulr (r) r12.zw, (r) r11.x, (r) r12.zzzw  //   0 SHD
//         mulr (r) r12.zw, (r) r12.zzzw, (r) constant(0.00000000, 0.00000000, 0.33000001, 0.33000001)  //   0 SHD
//         madr (r) r11.xy, (r) r9.ywyy, (r) constant(0.66000003, 0.66000003, 0.00000000, 0.00000000), (r) r12.zwzz  //   0 SHD
//         l0:  //   0 SHD
//         movu32 (u32) r11.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         l1:  //   0 SHD
//         movr (r) r11.z, (r) -r11.x  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1, 1065353216, 0, 0)  //   0 SHD
//         madr (r) r10.xy, (r) r12.xyxx, (r) constant(1.00000000, -1.00000000, 0.00000000, 0.00000000), (r) r4105  //   0 SHD
//         movu32 (u32) r12.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r9.yw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         rep l2  //   0 SHD
//         set_ges32.c (s32) r10.w, (s32) r9.w, (s32) constant(12, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.w  //   0 SHD
//         brk NE.x  //   0 SHD
//         dp2r (r) r12.x, (r) c[15][r9.w + 0].xyxx, (r) r11.xyxx  //   0 SHD
//         dp2r (r) r12.y, (r) c[15][r9.w + 0].xyxx, (r) r11.yzyy  //   0 SHD
//         addr (r) r12.xyw, (r) r10.xyxz, (r) r12.xyxz  //   0 SHD
//         movr (r) r4108, (r) c[10][23].yxxx  //   0 SHD
//         movr (r) r4108.x, (r) constant(1024.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(1024.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(1024.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(1024.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r13, (r) r4108, (r) r12.yxxx, (r) constant(0.50000000, 0.50000000, 0.50000000, 0.50000000)  //   0 SHD
//         flrr (r) r12.xy, (r) r13.wxww  //   0 SHD
//         addr (r) r13, (r) -r12.yxxx, (r) r13  //   0 SHD
//         movr (r) r4109, (r) c[10][23].zwzz  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00097656, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00097656, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00097656, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00097656, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xy, (r) r12.xyxx, (r) r4109  //   0 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) r12.w, #52, #6, SHADOW2D, (-1,-1,0), LOAD4X  //   0 SHD
//         movr (r) r14, (r) r4105  //   0 SHD
//         addr (r) r15, (r) -r13, (r) constant(1.00000000, 1.00000000, 2.00000000, 3.00000000)  //   0 SHD
//         mulr (r) r16, (r) r14.wzxy, (r) r15.yzyz  //   0 SHD
//         addr (r) r13.yz, (r) r16.yywy, (r) r16.xxzx  //   0 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) r12.w, #52, #6, SHADOW2D, (1,-1,0), LOAD4X  //   0 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         addr (r) r17.xyz, (r) r13.w, (r) constant(1.00000000, 1.00000000, 2.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r10.w, (r) r16.x, (r) r17.z  //   0 SHD
//         mulr (r) r14.zw, (r) r13.w, (r) r16.zzzy  //   0 SHD
//         madr (r) r16.xy, (r) r16.wxww, (r) r17.y, (r) r14.zwzz  //   0 SHD
//         mulr (r) r11.w, (r) r15.x, (r) r16.x  //   0 SHD
//         madr (r) r11.w, (r) r15.x, (r) r13.y, (r) r11.w  //   0 SHD
//         mulr (r) r13.y, (r) r13.x, (r) r16.y  //   0 SHD
//         madr (r) r13.y, (r) r13.x, (r) r13.z, (r) r13.y  //   0 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) r12.w, #52, #6, SHADOW2D, (-1,1,0), LOAD4X  //   0 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         mulr (r) r18, (r) r15.yzyz, (r) r16.wzxy  //   0 SHD
//         addr (r) r15.yz, (r) r18.yywy, (r) r18.xxzx  //   0 SHD
//         madr (r) r11.w, (r) r15.x, (r) r15.y, (r) r11.w  //   0 SHD
//         madr (r) r13.y, (r) r13.x, (r) r15.z, (r) r13.y  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1073741824, 0, 0, 0).x  //   0 SHD
//         madr (r) r13.z, (r) -r13.w, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         mulr (r) r14.y, (r) r14.y, (r) r15.w  //   0 SHD
//         madr (r) r14.x, (r) r14.x, (r) r13.z, (r) r14.y  //   0 SHD
//         mulr (r) r14.y, (r) r15.w, (r) r16.z  //   0 SHD
//         madr (r) r13.z, (r) r16.w, (r) r13.z, (r) r14.y  //   0 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) r12.w, #52, #6, SHADOW2D, (1,1,0), LOAD4X  //   0 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         mulr (r) r12.x, (r) r17.z, (r) r16.w  //   0 SHD
//         mulr (r) r12.yw, (r) r13.w, (r) r16.zzzy  //   0 SHD
//         madr (r) r14.yz, (r) r16.wwxw, (r) r17.xxyx, (r) r12.yywy  //   0 SHD
//         madr (r) r16.x, (r) r15.x, (r) r14.y, (r) r11.w  //   0 SHD
//         madr (r) r16.y, (r) r13.x, (r) r14.z, (r) r13.y  //   0 SHD
//         madr (r) r10.w, (r) r14.w, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r10.w  //   0 SHD
//         mulr (r) r10.w, (r) r10.w, (r) r15.x  //   0 SHD
//         madr (r) r16.z, (r) r15.x, (r) r14.x, (r) r10.w  //   0 SHD
//         madr (r) r10.w, (r) r12.y, (r) constant(2.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.x  //   0 SHD
//         mulr (r) r10.w, (r) r10.w, (r) r13.x  //   0 SHD
//         madr (r) r16.w, (r) r13.x, (r) r13.z, (r) r10.w  //   0 SHD
//         dp4r (r) r10.w, (r) r16, (r) constant(1.00000000, 1.00000000, 1.00000000, 1.00000000)  //   0 SHD
//         madr (r) r9.y, (r) r10.w, (r) constant(0.06666667, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.y  //   0 SHD
//         adds32 (s32) r9.w, (s32) r9.w, (s32) constant(1, 0, 0, 0).x  //   0 SHD
//         l2:  //   0 SHD
//         mulr (r) r9.y, (r) r9.y, (r) c[10][25].w  //   0 SHD
//         madr (r) r9.z, (r) -r9.z, (r) c[10][26].z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r9.y, (r) r9.y, (r) constant(0.08333334, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r9.z, (r) r9.z, (r) r9.y  //   0 SHD
//         mulr (r) r9.x, (r) r9.x, (r) r9.z  //   0 SHD
//         movs32.c (s32) hc, (s32) c[10][26].x  //   0 SHD
//         movr (r) r4105, (r) r9.y  //   0 SHD
//         movr (r) r4105(EQ), (r) r9.x  //   0 SHD
//         movr_sat (r) r0.w, (r) r4105  //   0 SHD
//         movu32 (u32) r0.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         ret   //   0 SHD
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                  c[10][16] = 100.00%@-0.74488437
//                  c[10][17] = 100.00%@0.57374251
//                  c[10][18] = 100.00%@0.24904165
//                  c[10][19] = 100.00%@0.24425237
//                  c[10][20] = 100.00%@0.03797059
//                  c[10][21] = 100.00%@-0.32713550
//                  c[10][22] = 100.00%@0.95899123
//                  c[10][23] = 100.00%@0.94054902
//                  c[10][24] = 100.00%@-0.61953658
//                  c[10][25] = 100.00%@-0.70987475
//                  c[10][26] = 100.00%@-0.24065374
//                  c[10][27] = 100.00%@-0.23602577
//                  c[10][28] = 100.00%@-0.07122079
//                  c[10][29] = 100.00%@0.21619159
//                  c[10][30] = 100.00%@0.54786748
//                  c[10][31] = 100.00%@1.03733158
//                  c[10][34] = 100.00%@0.24425237
//                  c[10][38] = 100.00%@0.94054902
//                  c[10][42] = 100.00%@-0.23602577
//                  c[10][46] = 100.00%@1.03733158
//                 ~c[10][64] = 100.00%@0.50000000
//                 ~c[10][65] = 100.00%@0.00000000
//                 ~c[10][66] = 100.00%@0.00000000
//                 ~c[10][67] = 100.00%@0.50048828
//                 ~c[10][68] = 100.00%@0.00000000
//                 ~c[10][69] = 100.00%@0.50000000
//                 ~c[10][70] = 100.00%@0.00000000
//                 ~c[10][71] = 100.00%@0.50048828
//                 ~c[10][72] = 100.00%@0.00000000
//                 ~c[10][73] = 100.00%@0.00000000
//                 ~c[10][74] = 100.00%@1.00000000
//                 ~c[10][75] = 100.00%@0.00000000
//                 ~c[10][76] = 100.00%@0.00000000
//                 ~c[10][77] = 100.00%@0.00000000
//                 ~c[10][78] = 100.00%@0.00000000
//                 ~c[10][79] = 100.00%@1.00000000
//                  c[10][84] = 100.00%@0.12733255
//                  c[10][85] = 100.00%@-0.98384482
//                  c[10][86] = 100.00%@-0.12584069
//                  c[10][88] = 100.00%@0.00300000
//                  c[10][89] = 100.00%@0.00300000
//                  c[10][90] = 100.00%@0.00300000
//                 ~c[10][92] = 100.00%@1024.00000000
//                 ~c[10][93] = 100.00%@1024.00000000
//                 ~c[10][94] = 100.00%@0.00097656
//                 ~c[10][95] = 100.00%@0.00097656
//                 ~c[10][96] = 100.00%@0.00078125
//                 ~c[10][97] = 100.00%@0.00125000
//                 ~c[10][98] = 100.00%@0.82405418
//                 ~c[10][99] = 100.00%@0.51503384
//                 ~c[10][101] = 100.00%@0.01074219
//                 ~c[10][102] = 100.00%@0.20000000
//                  c[10][103] = 100.00%@1.00000000
//                  c[10][105] = 100.00%@0.50000000
//                  c[10][106] = 100.00%@0.03921569
//                 ~c[10][100] = 100.00%@0x0
//                  c[10][104] = 100.00%@0x1
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x100, height=0x400, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x1
//         100.00% width=0x100, height=0x100, mips=0x9, DXGI_FORMAT_B8G8R8A8_UNORM_SRGB
//         TEXTURE_SLOT 0x2
//         100.00% width=0x100, height=0x100, mips=0x9, DXGI_FORMAT_B8G8R8A8_UNORM_SRGB
//         TEXTURE_SLOT 0x3
//         100.00% width=0x800, height=0x200, mips=0x1, DXGI_FORMAT_BC3_UNORM_SRGB
//         TEXTURE_SLOT 0x4
//         100.00% width=0x800, height=0x200, mips=0x1, DXGI_FORMAT_BC3_UNORM_SRGB
//         TEXTURE_SLOT 0x5
//         100.00% width=0x40, height=0x40, mips=0x7, DXGI_FORMAT_B8G8R8A8_UNORM
//         TEXTURE_SLOT 0x6
//         100.00% width=0xa00, height=0x640, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x7
//         100.00% width=0x400, height=0x400, mips=0x1, DXGI_FORMAT_R16_UNORM
//         TEXTURE_SLOT 0x8
//         100.00% width=0x80, height=0x1, mips=0x1, DXGI_FORMAT_A8_UNORM
//         TEXTURE_SLOT 0x9
//         TEXTURE_SLOT 0xa
//         TEXTURE_SLOT 0xb
//         TEXTURE_SLOT 0xc
//         TEXTURE_SLOT 0xd
//         TEXTURE_SLOT 0xe
//         TEXTURE_SLOT 0xf
//         TEXTURE_SLOT 0x10
//         TEXTURE_SLOT 0x11
//         TEXTURE_SLOT 0x12
//         TEXTURE_SLOT 0x13
//         TEXTURE_SLOT 0x14
//         TEXTURE_SLOT 0x15
//         TEXTURE_SLOT 0x16
//         TEXTURE_SLOT 0x17
//         TEXTURE_SLOT 0x18
//         TEXTURE_SLOT 0x19
//         TEXTURE_SLOT 0x1a
//         TEXTURE_SLOT 0x1b
//         TEXTURE_SLOT 0x1c
//         TEXTURE_SLOT 0x1d
//         TEXTURE_SLOT 0x1e
//         TEXTURE_SLOT 0x1f
//         TEXTURE_SLOT 0x20
//         TEXTURE_SLOT 0x21
//         TEXTURE_SLOT 0x22
//         TEXTURE_SLOT 0x23
//         TEXTURE_SLOT 0x24
//         TEXTURE_SLOT 0x25
//         TEXTURE_SLOT 0x26
//         TEXTURE_SLOT 0x27
//         TEXTURE_SLOT 0x28
//         TEXTURE_SLOT 0x29
//         TEXTURE_SLOT 0x2a
//         TEXTURE_SLOT 0x2b
//         TEXTURE_SLOT 0x2c
//         TEXTURE_SLOT 0x2d
//         TEXTURE_SLOT 0x2e
//         TEXTURE_SLOT 0x2f
//         TEXTURE_SLOT 0x30
//         TEXTURE_SLOT 0x31
//         TEXTURE_SLOT 0x32
//         TEXTURE_SLOT 0x33
//         TEXTURE_SLOT 0x34
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=-340282346638528860000000000000000000000.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x1
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=-340282346638528860000000000000000000000.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE pixel
//     	IPA.PASS R6, a[0x74];            # [  0][000000] POSITION_Y
//     	IPA.PASS R5, a[0x70];            # [  1][000008] POSITION_X
//     	F2I.TRUNC R1, R6;                # [  2][000010]
//     	F2I.TRUNC R0, R5;                # [  3][000018]
//     	TLD.LZ.T R0, R0, 0x33, 2D, 0x7;  # [  4][000020]
//     	MOV32I R3, -0x40800000;          # [  5][000028]
//     	MOV R25, RZ;                     # [  6][000030]
//     	MOV R22, RZ;                     # [  7][000038]
//     	FFMA.FTZ R8, R6, c[0x10][0x0], R3; # [  8][000040]
//     	FFMA.FTZ R6, R5, c[0x10][0x4], R3; # [  9][000048]
//     	F2F R4, |R2|;                    # [ 10][000050]
//     	FMUL32I.FTZ R9, R4, 0x3f03d942;  # [ 11][000058]
//     	FMUL32I.FTZ R7, R4, 0x3f52f537;  # [ 12][000060]
//     	FMUL.FTZ R5, R8, R9;             # [ 13][000068]
//     	FMUL.FTZ R6, R6, R7;             # [ 14][000070]
//     	FMUL.FTZ R9, R5, c[0xa][0x54];   # [ 15][000078]
//     	FMUL.FTZ R8, R5, c[0xa][0x50];   # [ 16][000080]
//     	FMUL.FTZ R10, R5, c[0xa][0x58];  # [ 17][000088]
//     	FFMA.FTZ R9, R6, c[0xa][0x44], R9; # [ 18][000090]
//     	FFMA.FTZ R8, R6, c[0xa][0x40], R8; # [ 19][000098]
//     	FFMA.FTZ R10, R6, c[0xa][0x48], R10; # [ 20][0000a0]
//     	FFMA.FTZ R9, R4, c[0xa][0x64], R9; # [ 21][0000a8]
//     	FFMA.FTZ R8, R4, c[0xa][0x60], R8; # [ 22][0000b0]
//     	FMUL.FTZ R7, R5, c[0xa][0x5c];   # [ 23][0000b8]
//     	FADD.FTZ R9, R9, c[0xa][0x74];   # [ 24][0000c0]
//     	FADD.FTZ R8, R8, c[0xa][0x70];   # [ 25][0000c8]
//     	FFMA.FTZ R10, R4, c[0xa][0x68], R10; # [ 26][0000d0]
//     	FFMA.FTZ R7, R6, c[0xa][0x4c], R7; # [ 27][0000d8]
//     	FMUL.FTZ R13, RZ, R9;            # [ 28][0000e0]
//     	FMUL.FTZ R12, RZ, R8;            # [ 29][0000e8]
//     	FADD.FTZ R11, R10, c[0xa][0x78]; # [ 30][0000f0]
//     	FFMA.FTZ R7, R4, c[0xa][0x6c], R7; # [ 31][0000f8]
//     	FADD.FTZ R10, R12, R13;          # [ 32][000100]
//     	FFMA.FTZ R13, R8, 0.5, R13;      # [ 33][000108]
//     	FFMA.FTZ R9, R9, 0.5, R12;       # [ 34][000110]
//     	FADD.FTZ R7, R7, c[0xa][0x7c];   # [ 35][000118]
//     	FFMA.FTZ R8, RZ, R11, R10;       # [ 36][000120]
//     	FFMA.FTZ R13, RZ, R11, R13;      # [ 37][000128]
//     	FFMA.FTZ R12, RZ, R11, R9;       # [ 38][000130]
//     	FADD.FTZ R9, R8, R7;             # [ 39][000138]
//     	FADD.FTZ R8, R10, R11;           # [ 40][000140]
//     	FFMA.FTZ R11, R7, 0x3f002, R13;  # [ 41][000148]
//     	MUFU.RCP R13, R9;                # [ 42][000150]
//     	FFMA.FTZ R9, RZ, R7, R8;         # [ 43][000158]
//     	FFMA.FTZ R10, R7, 0x3f002, R12;  # [ 44][000160]
//     	FMUL.FTZ R8, R11, R13;           # [ 45][000168]
//     	FMUL.FTZ R7, R9, R13;            # [ 46][000170]
//     	FMUL.FTZ R9, R10, R13;           # [ 47][000178]
//     	FSETP.LT.FTZ.AND P1, PT, R8, RZ, PT; # [ 48][000180]
//     	FMUL.FTZ R10, R5, c[0xa][0x98];  # [ 49][000188]
//     	FADD.FTZ R24, -R9, 1;            # [ 50][000190]
//     	FSETP.LT.FTZ.OR P1, PT, R9, RZ, P1; # [ 51][000198]
//     	FMUL.FTZ R9, R0, R0;             # [ 52][0001a0]
//     	FFMA.FTZ R6, R6, c[0xa][0x88], R10; # [ 53][0001a8]
//     	FMUL.FTZ R0, R0, c[0xa][0x150];  # [ 54][0001b0]
//     	FFMA.FTZ R9, R1, R1, R9;         # [ 55][0001b8]
//     	FFMA.FTZ R4, R4, c[0xa][0xa8], R6; # [ 56][0001c0]
//     	FFMA.FTZ R1, R1, c[0xa][0x154], R0; # [ 57][0001c8]
//     	FADD.FTZ R5, -R9, 1;             # [ 58][0001d0]
//     	FADD.FTZ R4, R4, c[0xa][0xb8];   # [ 59][0001d8]
//     	FSETP.LT.FTZ.AND P0, PT, R7, RZ, PT; # [ 60][0001e0]
//     	MUFU.RSQ R5, |R5|;               # [ 61][0001e8]
//     	FADD.FTZ R23, R4, -c[0xa][0x1a4]; # [ 62][0001f0]
//     	FSETP.GT.FTZ.AND P3, PT, R8, 1, PT; # [ 63][0001f8]
//     	MUFU.RCP R5, R5;                 # [ 64][000200]
//     	FMUL.FTZ R0, R23, c[0xa][0x1a8]; # [ 65][000208]
//     	MOV R10, c[0xa][0x164];          # [ 66][000210]
//     	F2F R9, -R5;                     # [ 67][000218]
//     	MOV32I R6, 0x3e4ccccd;           # [ 68][000220]
//     	FFMA.FTZ.SAT R0, R0, 2, R3;      # [ 69][000228]
//     	FCMP.LEU.FTZ R2, R9, R5, R2;     # [ 70][000230]
//     	PSETP.OR.AND P0, PT, P0, P1, PT; # [ 71][000238]
//     	FSETP.GT.FTZ.AND P2, PT, R7, 1, PT; # [ 72][000240]
//     	FFMA.FTZ.SAT R1, R2, c[0xa][0x158], R1; # [ 73][000248]
//     	FSETP.LT.FTZ.OR P1, PT, R24, RZ, P3; # [ 74][000250]
//     	FFMA.FTZ R0, R0, 2, R6;          # [ 75][000258]
//     	FADD.FTZ R2, -R1, 1;             # [ 76][000260]
//     	FADD.FTZ R3, R1, R1;             # [ 77][000268]
//     	@P0 KIL;                         # [ 78][000270]
//     	FFMA.FTZ R1, R2, c[0xa][0x160], R10; # [ 79][000278]
//     	PSETP.OR.AND P0, PT, P2, P1, PT; # [ 80][000280]
//     	FMNMX.FTZ R0, R0, R6, !PT;       # [ 81][000288]
//     	FFMA.FTZ R1, R7, c[0xa][0x168], R1; # [ 82][000290]
//     	@P0 KIL;                         # [ 83][000298]
//     	FMNMX.FTZ R18, R3, 1, PT;        # [ 84][0002a0]
//     	FMUL.FTZ R19, R0, 0x3c300;       # [ 85][0002a8]
//     	FADD32I.FTZ R20, R8, 0x1;        # [ 86][0002b0]
//     	FADD.FTZ R17, -R1, R7;           # [ 87][0002b8]
//     L02c0:
//     	SHL.W R0, R25, 0x4;              # [ 88][0002c0]
//     	LDC.64 R2, c[0xf][R0];           # [ 89][0002c8]
//     	FMUL.FTZ R1, R2, RZ;             # [ 90][0002d0]
//     	FMUL.FTZ R0, R2, R19;            # [ 91][0002d8]
//     	MOV32I R2, 0x3f000000;           # [ 92][0002e0]
//     	FFMA.FTZ R1, R3, -R19, R1;       # [ 93][0002e8]
//     	FFMA.FTZ R0, R3, RZ, R0;         # [ 94][0002f0]
//     	MOV R3, R17;                     # [ 95][0002f8]
//     	FADD.FTZ R1, R24, R1;            # [ 96][000300]
//     	FADD.FTZ R0, R20, R0;            # [ 97][000308]
//     	FFMA.FTZ R27, R1, 1024, R2;      # [ 98][000310]
//     	FFMA.FTZ R28, R0, 1024, R2;      # [ 99][000318]
//     	MOV32I R2, 0x3f3f;               # [100][000320]
//     	F2F.FTZ.FLOOR R26, R27;          # [101][000328]
//     	F2F.FTZ.FLOOR R21, R28;          # [102][000330]
//     	FMUL.FTZ R1, R26, 0x3a800;       # [103][000338]
//     	FMUL.FTZ R0, R21, 0x3a800;       # [104][000340]
//     	TLD4.R.AOFFI.DC.NODEP.T R8, R0, R2, 0x34, 0x6, 2D; # [105][000348]
//     	MOV32I R2, 0x3f01;               # [106][000350]
//     	TLD4.R.AOFFI.DC.NODEP.T R12, R0, R2, 0x34, 0x6, 2D; # [107][000358]
//     	MOV32I R2, 0x13f;                # [108][000360]
//     	TLD4.R.AOFFI.DC.NODEP.T R4, R0, R2, 0x34, 0x6, 2D; # [109][000368]
//     	MOV32I R16, 0x101;               # [110][000370]
//     	TLD4.R.AOFFI.DC.NODEP.T R0, R0, R16, 0x34, 0x6, 2D; # [111][000378]
//     	FADD.FTZ R16, -R21, R28;         # [112][000380]
//     	FADD.FTZ R21, -R26, R27;         # [113][000388]
//     	MOV32I R30, 0x40000000;          # [114][000390]
//     	FADD.FTZ R27, -R16, 2;           # [115][000398]
//     	FADD.FTZ R26, R16, 1;            # [116][0003a0]
//     	FADD.FTZ R28, -R16, 1;           # [117][0003a8]
//     	IADD R25, R25, 0x1;              # [118][0003b0]
//     	ISETP.GE.AND P0, PT, R25, 0xc, PT; # [119][0003b8]
//     	FMUL.FTZ R10, R10, R27;          # [120][0003c0]
//     	FMUL.FTZ R31, R9, R27;           # [121][0003c8]
//     	FFMA.FTZ R10, R11, R28, R10;     # [122][0003d0]
//     	FADD.FTZ R11, -R21, 1;           # [123][0003d8]
//     	FMUL.FTZ R14, R16, R14;          # [124][0003e0]
//     	FFMA.FTZ R29, R15, R26, R14;     # [125][0003e8]
//     	FADD.FTZ R15, -R16, 3;           # [126][0003f0]
//     	FFMA.FTZ R14, R16, -2, R30;      # [127][0003f8]
//     	FMUL.FTZ R29, R11, R29;          # [128][000400]
//     	FMUL.FTZ R30, R9, R15;           # [129][000408]
//     	FFMA.FTZ R9, R8, R28, R31;       # [130][000410]
//     	FFMA.FTZ R10, R11, R10, R29;     # [131][000418]
//     	FFMA.FTZ R8, R8, R14, R30;       # [132][000420]
//     	FMUL.FTZ R30, R16, R13;          # [133][000428]
//     	FADD.FTZ R13, R16, 2;            # [134][000430]
//     	FFMA.FTZ R29, R12, R26, R30;     # [135][000438]
//     	FMUL.FTZ R12, R12, R13;          # [136][000440]
//     	FMUL.FTZ R29, R21, R29;          # [137][000448]
//     	FFMA.FTZ R12, R30, 2, R12;       # [138][000450]
//     	FFMA.FTZ R9, R21, R9, R29;       # [139][000458]
//     	FMUL.FTZ R29, R27, R5;           # [140][000460]
//     	FMUL.FTZ R5, R27, R6;            # [141][000468]
//     	FMUL.FTZ R30, R12, R11;          # [142][000470]
//     	FFMA.FTZ R27, R28, R4, R29;      # [143][000478]
//     	FFMA.FTZ R12, R28, R7, R5;       # [144][000480]
//     	FMUL.FTZ R2, R16, R2;            # [145][000488]
//     	FMUL.FTZ R1, R16, R1;            # [146][000490]
//     	FMUL.FTZ R5, R15, R6;            # [147][000498]
//     	FFMA.FTZ R4, R11, R8, R30;       # [148][0004a0]
//     	FMUL.FTZ R6, R13, R3;            # [149][0004a8]
//     	FFMA.FTZ R8, R11, R12, R10;      # [150][0004b0]
//     	FFMA.FTZ R9, R21, R27, R9;       # [151][0004b8]
//     	FFMA.FTZ R3, R3, R26, R2;        # [152][0004c0]
//     	FFMA.FTZ R1, R0, R26, R1;        # [153][0004c8]
//     	FFMA.FTZ R6, R2, 2, R6;          # [154][0004d0]
//     	FFMA.FTZ R0, R11, R3, R8;        # [155][0004d8]
//     	FFMA.FTZ R1, R21, R1, R9;        # [156][0004e0]
//     	FFMA.FTZ R2, R7, R14, R5;        # [157][0004e8]
//     	FMUL.FTZ R3, R6, R21;            # [158][0004f0]
//     	FADD.FTZ R0, R0, R1;             # [159][0004f8]
//     	FFMA.FTZ R1, R21, R2, R3;        # [160][000500]
//     	FADD.FTZ R0, R0, R4;             # [161][000508]
//     	FADD.FTZ R0, R0, R1;             # [162][000510]
//     	FFMA.FTZ R22, R0, c[0x10][0x8], R22; # [163][000518]
//     	@!P0 BRA L02c0;                  # [164][000520]
//     	MOV32I R0, 0x3f800000;           # [165][000528]
//     	FMUL.FTZ R1, R22, c[0xa][0x19c]; # [166][000530]
//     	I2I.S32.S32 RZ.CC, c[0xa][0x1a0]; # [167][000538]
//     	FFMA.FTZ R0, R23, -c[0xa][0x1a8], R0; # [168][000540]
//     	FMUL32I.FTZ R3, R1, 0x3daaaaab;  # [169][000548]
//     	CSETP.EQ.AND P0, PT, CC, PT;     # [170][000550]
//     	MOV R2, RZ;                      # [171][000558]
//     	FMUL.FTZ.SAT R0, R0, R3;         # [172][000560]
//     	MOV R1, RZ;                      # [173][000568]
//     	@P0 FMUL.FTZ R3, R18, R0;        # [174][000570]
//     	MOV R0, RZ;                      # [175][000578]
//     	F2F.SAT R3, R3;                  # [176][000580]
//     	EXIT;                            # [177][000588]
//     	END
//     END_SECTION
// END_SHADER
// 
