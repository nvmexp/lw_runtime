// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0xe041aef2b91b85ee
//         UCODE_HASH: 0xb28d86ea45aa8659
//         POOL: APP
//         VERSION: 20
//         # USES: 25793
//         // Time: 337.711ms [37.641 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//         TEXINFO: SHADOWMAP:0x80
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 36
//         USED_TEXTURE_BITS: 0xc3
//         TEXTURE_SLOTS: 8
//         SAMPLER_SLOTS: 8
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             COLOR_DIFFUSE_RED    PERSPECTIVE
//             COLOR_DIFFUSE_GREEN  PERSPECTIVE
//             COLOR_DIFFUSE_BLUE   PERSPECTIVE
//             COLOR_SPELWLAR_RED   PERSPECTIVE
//             COLOR_SPELWLAR_GREEN PERSPECTIVE
//             COLOR_SPELWLAR_BLUE  PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX00_R              PERSPECTIVE
//             TEX00_Q              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX03_Q              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_Q              PERSPECTIVE
//             TEX07_S              PERSPECTIVE
//             TEX07_T              PERSPECTIVE
//             TEX07_R              PERSPECTIVE
//             TEX07_Q              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//             TARGET01_R
//             TARGET01_G
//             TARGET01_B
//             TARGET01_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00002a2a      0xaa2a2aaa
//         0xaa8a002a      0x00000000      0x000000ff      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c0, 2.00000000, -1.00000000, 1.00000000, 0.00195313 ; 0x40000000 0xbf800000 0x3f800000 0x3b000000
        def c1, -0.01200000, 0.00097656, 0.25000000, 0.00000000 ; 0xbc449ba6 0x3a800000 0x3e800000 0x80000000
        def c2, -0.00097656, 0.00097656, 0.50000000, 0.66670001 ; 0xba800000 0x3a800000 0x3f000000 0x3f2aacda
        def c3, -0.00195313, 0.00195313, 0.00000000, 1.00000000 ; 0xbb000000 0x3b000000 0x80000000 0x3f800000
        dcl_color0_pp v0.rgb
        dcl_color1_pp v1.rgb
        dcl_texcoord0_pp v2
        dcl_texcoord1_pp v3.rgb
        dcl_texcoord2_pp v4.rgb
        dcl_texcoord3_pp v5
        dcl_texcoord4_pp v6.rgb
        dcl_texcoord5_pp v7.ba
        dcl_texcoord6_pp v8
        dcl_texcoord7_pp v9
        dcl_2d s0
        dcl_2d s1
        dcl_2d s6
        dcl_2d s7
        texld_pp r0, v2.zwzw, s1
        mad_pp r0.xyz, c0.x, r0, c0.y
        nrm_pp r14.xyz, r0
        nrm_pp r0.xyz, v6
        dp3_pp r0.z, r14, r0
        mul_pp r0.w, r0.z, r0.z
        mul_pp r0.xyz, r0.z, c62
        mad_pp r0.xyz, r0.w, c61, r0
        add_pp r2.xyz, r0, c63
        rcp_pp r0.w, v7.w
        mad_pp r14.w, v7.z, r0.w, c1.x
        mul_pp r12.x, v9.w, c0.w
        texldp_pp r0, v8, s6
        mad_pp r1.x, v9.w, c1.y, v9.x
        mov_pp r1.yzw, v9
        texldp_pp r7, r1, s7
        mad_pp r1.y, v9.w, c1.y, v9.y
        mov_pp r1.xzw, v9
        texldp_pp r3, r1, s7
        nrm_pp r1.xyz, v4
        dp3_sat_pp r0.w, r14, r1
        mad_pp r1.xyz, c68, r0.w, v0
        mad_pp r15.xyz, r2, v1, r1
        mad_pp r1.x, v9.w, -c1.y, v9.x
        mov_pp r1.yzw, v9
        texldp_pp r2, r1, s7
        mad_pp r1.y, v9.w, -c1.y, v9.y
        mov_pp r1.xzw, v9
        texldp_pp r1, r1, s7
        if b9
        mov_pp r7.y, r3.x
        mov_pp r7.z, r2.x
        mov_pp r7.w, r1.x
        mov_pp r2, c1.z
        else
        mov_pp r2, c1.w
        mov_pp r7, r2.x
        endif
        mad_pp r1.xy, v9.w, c1.y, v9
        mov_pp r1.zw, v9
        texldp_pp r6, r1, s7
        mad_pp r1.xy, v9.w, c2, v9
        mov_pp r1.zw, v9
        texldp_pp r4, r1, s7
        mad_pp r1.xy, v9.w, c2.yxzw, v9
        mov_pp r1.zw, v9
        texldp_pp r3, r1, s7
        mad_pp r1.xy, v9.w, -c1.y, v9
        mov_pp r1.zw, v9
        texldp_pp r1, r1, s7
        if b10
        mov_pp r6.y, r4.x
        mov_pp r6.z, r3.x
        mov_pp r6.w, r1.x
        mul_pp r2, r2, c2.z
        else
        mov_pp r6, c1.w
        endif
        mad_pp r1.x, v9.w, c0.w, v9.x
        mov_pp r1.yzw, v9
        texldp_pp r5, r1, s7
        mad_pp r1.y, v9.w, c0.w, v9.y
        mov_pp r1.xzw, v9
        texldp_pp r11, r1, s7
        mad_pp r1.x, v9.w, -c0.w, v9.x
        mov_pp r1.yzw, v9
        texldp_pp r10, r1, s7
        mad_pp r1.y, v9.w, -c0.w, v9.y
        mov_pp r1.xzw, v9
        texldp_pp r9, r1, s7
        mad_pp r1.xy, v9.w, c0.w, v9
        mov_pp r1.zw, v9
        texldp_pp r4, r1, s7
        mad_pp r1.xy, v9.w, c3, v9
        mov_pp r1.zw, v9
        texldp_pp r8, r1, s7
        mul_pp r0.w, v9.w, -c1.y
        mad_pp r1.xy, v9.w, c3.yxzw, v9
        mov_pp r1.zw, v9
        texldp_pp r3, r1, s7
        mad_pp r1.xy, v9.w, -c0.w, v9
        mov_pp r1.zw, v9
        texldp_pp r1, r1, s7
        if b11
        mov_pp r5.y, r11.x
        mov_pp r5.z, r10.x
        mov_pp r5.w, r9.x
        mov_pp r4.y, r8.x
        mov_pp r4.z, r3.x
        mov_pp r4.w, r1.x
        mov_pp r1.x, r12.x
        mul_pp r2, r2, c2.z
        else
        mov_pp r1.x, c1.w
        mov_pp r5, r1.x
        mov_pp r4, r1.x
        endif
        mov_pp r0.z, r1.x
        mul_pp r1.y, v9.w, c1.y
        add_pp r3.xy, r1, v9
        mov_pp r3.zw, v9
        texldp_pp r3, r3, s7
        add_pp r8.xy, r1.yxzw, v9
        mov_pp r8.zw, v9
        texldp_pp r13, r8, s7
        mov_pp r8.x, -r1.x
        mov_pp r1.zw, -r1.x
        add_pp r9.xy, r1.zyzw, v9
        mov_pp r9.zw, v9
        texldp_pp r12, r9, s7
        add_pp r1.xy, r1.ywzw, v9
        mov_pp r1.zw, v9
        texldp_pp r11, r1, s7
        add_pp r1.xy, r0.wzzw, v9
        mov_pp r1.zw, v9
        texldp_pp r1, r1, s7
        add_pp r9.xy, r0.zwzw, v9
        mov_pp r9.zw, v9
        texldp_pp r10, r9, s7
        mul_pp r8.y, v9.w, -c1.y
        add_pp r9.xy, r8.yxzw, v9
        mov_pp r9.zw, v9
        texldp_pp r9, r9, s7
        add_pp r8.xy, r8, v9
        mov_pp r8.zw, v9
        texldp_pp r8, r8, s7
        if b12
        mov_pp r3.y, r13.x
        mov_pp r3.z, r12.x
        mov_pp r3.w, r11.x
        mov_pp r1.y, r10.x
        mov_pp r1.z, r9.x
        mov_pp r1.w, r8.x
        mul_pp r2, r2, c2.w
        else
        mov_pp r1, c1.w
        mov_pp r3, r1.x
        endif
        if b8
        texldp_pp r8, v9, s7
        if b7
        mov_pp r0.w, r8.x
        else
        add_pp r0.w, r14.w, -r8.x
        cmp_pp r0.w, r0.w, c3.z, c3.w
        endif
        else
        mov_pp r0.w, c0.z
        endif
        if b9
        if b7
        else
        add_pp r7, r14.w, -r7
        cmp_pp r7, r7, c3.z, c3.w
        endif
        dp4_pp r0.w, r7, r2
        endif
        if b10
        if b7
        else
        add_pp r6, r14.w, -r6
        cmp_pp r6, r6, c3.z, c3.w
        endif
        dp4_pp r0.z, r6, r2
        add_pp r0.w, r0.w, r0.z
        endif
        if b11
        if b7
        else
        add_pp r4, r14.w, -r4
        add_pp r5, r14.w, -r5
        cmp_pp r4, r4, c3.z, c3.w
        cmp_pp r5, r5, c3.z, c3.w
        endif
        dp4_pp r0.y, r5, r2
        dp4_pp r0.z, r4, r2
        add_pp r0.w, r0.w, r0.y
        add_pp r0.w, r0.z, r0.w
        endif
        if b12
        if b7
        else
        add_pp r1, r14.w, -r1
        add_pp r3, r14.w, -r3
        cmp_pp r1, r1, c3.z, c3.w
        cmp_pp r3, r3, c3.z, c3.w
        endif
        dp4_pp r0.y, r3, r2
        dp4_pp r0.z, r1, r2
        add_pp r0.w, r0.w, r0.y
        add_pp r2.w, r0.z, r0.w
        else
        mov_pp r2.w, r0.w
        endif
        mul_pp r0.w, r0.x, c135.w
        mov_pp r0.yz, c0
        add_pp r2.xyz, r0.y, c135
        nrm_pp r1.xyz, v5
        mad_pp r2.xyz, r0.w, r2, c0.z
        dp3_pp r0.y, r14, r1
        mul_pp r2.xyz, r15, r2
        add_pp r0.w, r0.y, r0.y
        mad_pp r3.xyz, r0.w, r14, -r1
        nrm_pp r1.xyz, v3
        add_pp r0.w, -r0.x, c0.z
        dp3_sat_pp r1.w, r1, r3
        mul_pp r2.w, r2.w, r0.w
        pow_pp r0.w, r1.w, c77.y
        mul_pp r3.z, r0.w, c77.x
        dp3_pp r0.w, r14, r1
        mov_sat_pp r3.y, r0.w
        mov_sat_pp r1.w, r0.y
        add_pp r0.xyz, r0.z, -c135
        add_pp r3.w, -r1.w, c0.z
        mad_pp r1.xyz, r2.w, r0, c135
        mad_pp r1.w, c98.z, r3.w, -c98.w
        mul_pp r0.xyz, r3.y, c65
        add_sat_pp r1.w, -r0.w, r1.w
        mad_pp r2.xyz, r0, r1, r2
        mul_pp r4.w, r1.w, c60.w
        texld_pp r1, v2, s1
        mad_sat_pp r4.z, c98.x, r0.w, -c98.y
        texld_pp r0, v2, s0
        mad_pp r1.xyz, r0, -r0, r0
        mul_pp r3.xyz, r3.z, c66
        mul_pp r1.xyz, r4.z, r1
        mul_pp r3.xyz, r1.w, r3
        mad_pp r0.xyz, r0, r0, r1
        lrp_pp r1.xyz, r4.w, c60, r0
        mul_pp r0.xyz, r3.w, c52
        mul_pp r3.xyz, r2.w, r3
        mad_pp r0.xyz, r1, c51, r0
        mad_pp r2.xyz, r1, r2, r3
        add_pp r1.xyz, r0, c53
        lrp_pp r0.xyz, c51.w, r1, r2
        if b3
        add_pp r1.w, r0.y, r0.x
        add_pp r1.w, r0.z, r1.w
        add_pp r1.w, r1.w, -c48.w
        mul_pp r1.xyz, r0, r1.w
        mul_pp oC1.xyz, r1, c48
        else
        mov_pp oC1.xyz, c1.w
        endif
        if b4
        mov_pp oC1.w, v5.w
        else
        mov_pp oC1.w, r0.w
        endif
        mov_pp oC0.xyz, r0
        mov_pp oC0.w, r0.w
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0x40000000 0xbf800000
//         0x3f800000 0x3b000000 0x05000051 0xa00f0001
//         0xbc449ba6 0x3a800000 0x3e800000 0x80000000
//         0x05000051 0xa00f0002 0xba800000 0x3a800000
//         0x3f000000 0x3f2aacda 0x05000051 0xa00f0003
//         0xbb000000 0x3b000000 0x80000000 0x3f800000
//         0x0200001f 0x8000000a 0x90270000 0x0200001f
//         0x8001000a 0x90270001 0x0200001f 0x80000005
//         0x902f0002 0x0200001f 0x80010005 0x90270003
//         0x0200001f 0x80020005 0x90270004 0x0200001f
//         0x80030005 0x902f0005 0x0200001f 0x80040005
//         0x90270006 0x0200001f 0x80050005 0x902c0007
//         0x0200001f 0x80060005 0x902f0008 0x0200001f
//         0x80070005 0x902f0009 0x0200001f 0x90000000
//         0xa00f0800 0x0200001f 0x90000000 0xa00f0801
//         0x0200001f 0x90000000 0xa00f0806 0x0200001f
//         0x90000000 0xa00f0807 0x03000042 0x802f0000
//         0x90ee0002 0xa0e40801 0x04000004 0x80270000
//         0xa0000000 0x80e40000 0xa0550000 0x02000024
//         0x8027000e 0x80e40000 0x02000024 0x80270000
//         0x90e40006 0x03000008 0x80240000 0x80e4000e
//         0x80e40000 0x03000005 0x80280000 0x80aa0000
//         0x80aa0000 0x03000005 0x80270000 0x80aa0000
//         0xa0e4003e 0x04000004 0x80270000 0x80ff0000
//         0xa0e4003d 0x80e40000 0x03000002 0x80270002
//         0x80e40000 0xa0e4003f 0x02000006 0x80280000
//         0x90ff0007 0x04000004 0x8028000e 0x90aa0007
//         0x80ff0000 0xa0000001 0x03000005 0x8021000c
//         0x90ff0009 0xa0ff0000 0x03010042 0x802f0000
//         0x90e40008 0xa0e40806 0x04000004 0x80210001
//         0x90ff0009 0xa0550001 0x90000009 0x02000001
//         0x802e0001 0x90e40009 0x03010042 0x802f0007
//         0x80e40001 0xa0e40807 0x04000004 0x80220001
//         0x90ff0009 0xa0550001 0x90550009 0x02000001
//         0x802d0001 0x90e40009 0x03010042 0x802f0003
//         0x80e40001 0xa0e40807 0x02000024 0x80270001
//         0x90e40004 0x03000008 0x80380000 0x80e4000e
//         0x80e40001 0x04000004 0x80270001 0xa0e40044
//         0x80ff0000 0x90e40000 0x04000004 0x8027000f
//         0x80e40002 0x90e40001 0x80e40001 0x04000004
//         0x80210001 0x90ff0009 0xa1550001 0x90000009
//         0x02000001 0x802e0001 0x90e40009 0x03010042
//         0x802f0002 0x80e40001 0xa0e40807 0x04000004
//         0x80220001 0x90ff0009 0xa1550001 0x90550009
//         0x02000001 0x802d0001 0x90e40009 0x03010042
//         0x802f0001 0x80e40001 0xa0e40807 0x01000028
//         0xe0e40809 0x02000001 0x80220007 0x80000003
//         0x02000001 0x80240007 0x80000002 0x02000001
//         0x80280007 0x80000001 0x02000001 0x802f0002
//         0xa0aa0001 0x0000002a 0x02000001 0x802f0002
//         0xa0ff0001 0x02000001 0x802f0007 0x80000002
//         0x0000002b 0x04000004 0x80230001 0x90ff0009
//         0xa0550001 0x90e40009 0x02000001 0x802c0001
//         0x90e40009 0x03010042 0x802f0006 0x80e40001
//         0xa0e40807 0x04000004 0x80230001 0x90ff0009
//         0xa0e40002 0x90e40009 0x02000001 0x802c0001
//         0x90e40009 0x03010042 0x802f0004 0x80e40001
//         0xa0e40807 0x04000004 0x80230001 0x90ff0009
//         0xa0e10002 0x90e40009 0x02000001 0x802c0001
//         0x90e40009 0x03010042 0x802f0003 0x80e40001
//         0xa0e40807 0x04000004 0x80230001 0x90ff0009
//         0xa1550001 0x90e40009 0x02000001 0x802c0001
//         0x90e40009 0x03010042 0x802f0001 0x80e40001
//         0xa0e40807 0x01000028 0xe0e4080a 0x02000001
//         0x80220006 0x80000004 0x02000001 0x80240006
//         0x80000003 0x02000001 0x80280006 0x80000001
//         0x03000005 0x802f0002 0x80e40002 0xa0aa0002
//         0x0000002a 0x02000001 0x802f0006 0xa0ff0001
//         0x0000002b 0x04000004 0x80210001 0x90ff0009
//         0xa0ff0000 0x90000009 0x02000001 0x802e0001
//         0x90e40009 0x03010042 0x802f0005 0x80e40001
//         0xa0e40807 0x04000004 0x80220001 0x90ff0009
//         0xa0ff0000 0x90550009 0x02000001 0x802d0001
//         0x90e40009 0x03010042 0x802f000b 0x80e40001
//         0xa0e40807 0x04000004 0x80210001 0x90ff0009
//         0xa1ff0000 0x90000009 0x02000001 0x802e0001
//         0x90e40009 0x03010042 0x802f000a 0x80e40001
//         0xa0e40807 0x04000004 0x80220001 0x90ff0009
//         0xa1ff0000 0x90550009 0x02000001 0x802d0001
//         0x90e40009 0x03010042 0x802f0009 0x80e40001
//         0xa0e40807 0x04000004 0x80230001 0x90ff0009
//         0xa0ff0000 0x90e40009 0x02000001 0x802c0001
//         0x90e40009 0x03010042 0x802f0004 0x80e40001
//         0xa0e40807 0x04000004 0x80230001 0x90ff0009
//         0xa0e40003 0x90e40009 0x02000001 0x802c0001
//         0x90e40009 0x03010042 0x802f0008 0x80e40001
//         0xa0e40807 0x03000005 0x80280000 0x90ff0009
//         0xa1550001 0x04000004 0x80230001 0x90ff0009
//         0xa0e10003 0x90e40009 0x02000001 0x802c0001
//         0x90e40009 0x03010042 0x802f0003 0x80e40001
//         0xa0e40807 0x04000004 0x80230001 0x90ff0009
//         0xa1ff0000 0x90e40009 0x02000001 0x802c0001
//         0x90e40009 0x03010042 0x802f0001 0x80e40001
//         0xa0e40807 0x01000028 0xe0e4080b 0x02000001
//         0x80220005 0x8000000b 0x02000001 0x80240005
//         0x8000000a 0x02000001 0x80280005 0x80000009
//         0x02000001 0x80220004 0x80000008 0x02000001
//         0x80240004 0x80000003 0x02000001 0x80280004
//         0x80000001 0x02000001 0x80210001 0x8000000c
//         0x03000005 0x802f0002 0x80e40002 0xa0aa0002
//         0x0000002a 0x02000001 0x80210001 0xa0ff0001
//         0x02000001 0x802f0005 0x80000001 0x02000001
//         0x802f0004 0x80000001 0x0000002b 0x02000001
//         0x80240000 0x80000001 0x03000005 0x80220001
//         0x90ff0009 0xa0550001 0x03000002 0x80230003
//         0x80e40001 0x90e40009 0x02000001 0x802c0003
//         0x90e40009 0x03010042 0x802f0003 0x80e40003
//         0xa0e40807 0x03000002 0x80230008 0x80e10001
//         0x90e40009 0x02000001 0x802c0008 0x90e40009
//         0x03010042 0x802f000d 0x80e40008 0xa0e40807
//         0x02000001 0x80210008 0x81000001 0x02000001
//         0x802c0001 0x81000001 0x03000002 0x80230009
//         0x80e60001 0x90e40009 0x02000001 0x802c0009
//         0x90e40009 0x03010042 0x802f000c 0x80e40009
//         0xa0e40807 0x03000002 0x80230001 0x80ed0001
//         0x90e40009 0x02000001 0x802c0001 0x90e40009
//         0x03010042 0x802f000b 0x80e40001 0xa0e40807
//         0x03000002 0x80230001 0x80eb0000 0x90e40009
//         0x02000001 0x802c0001 0x90e40009 0x03010042
//         0x802f0001 0x80e40001 0xa0e40807 0x03000002
//         0x80230009 0x80ee0000 0x90e40009 0x02000001
//         0x802c0009 0x90e40009 0x03010042 0x802f000a
//         0x80e40009 0xa0e40807 0x03000005 0x80220008
//         0x90ff0009 0xa1550001 0x03000002 0x80230009
//         0x80e10008 0x90e40009 0x02000001 0x802c0009
//         0x90e40009 0x03010042 0x802f0009 0x80e40009
//         0xa0e40807 0x03000002 0x80230008 0x80e40008
//         0x90e40009 0x02000001 0x802c0008 0x90e40009
//         0x03010042 0x802f0008 0x80e40008 0xa0e40807
//         0x01000028 0xe0e4080c 0x02000001 0x80220003
//         0x8000000d 0x02000001 0x80240003 0x8000000c
//         0x02000001 0x80280003 0x8000000b 0x02000001
//         0x80220001 0x8000000a 0x02000001 0x80240001
//         0x80000009 0x02000001 0x80280001 0x80000008
//         0x03000005 0x802f0002 0x80e40002 0xa0ff0002
//         0x0000002a 0x02000001 0x802f0001 0xa0ff0001
//         0x02000001 0x802f0003 0x80000001 0x0000002b
//         0x01000028 0xe0e40808 0x03010042 0x802f0008
//         0x90e40009 0xa0e40807 0x01000028 0xe0e40807
//         0x02000001 0x80280000 0x80000008 0x0000002a
//         0x03000002 0x80280000 0x80ff000e 0x81000008
//         0x04000058 0x80280000 0x80ff0000 0xa0aa0003
//         0xa0ff0003 0x0000002b 0x0000002a 0x02000001
//         0x80280000 0xa0aa0000 0x0000002b 0x01000028
//         0xe0e40809 0x01000028 0xe0e40807 0x0000002a
//         0x03000002 0x802f0007 0x80ff000e 0x81e40007
//         0x04000058 0x802f0007 0x80e40007 0xa0aa0003
//         0xa0ff0003 0x0000002b 0x03000009 0x80280000
//         0x80e40007 0x80e40002 0x0000002b 0x01000028
//         0xe0e4080a 0x01000028 0xe0e40807 0x0000002a
//         0x03000002 0x802f0006 0x80ff000e 0x81e40006
//         0x04000058 0x802f0006 0x80e40006 0xa0aa0003
//         0xa0ff0003 0x0000002b 0x03000009 0x80240000
//         0x80e40006 0x80e40002 0x03000002 0x80280000
//         0x80ff0000 0x80aa0000 0x0000002b 0x01000028
//         0xe0e4080b 0x01000028 0xe0e40807 0x0000002a
//         0x03000002 0x802f0004 0x80ff000e 0x81e40004
//         0x03000002 0x802f0005 0x80ff000e 0x81e40005
//         0x04000058 0x802f0004 0x80e40004 0xa0aa0003
//         0xa0ff0003 0x04000058 0x802f0005 0x80e40005
//         0xa0aa0003 0xa0ff0003 0x0000002b 0x03000009
//         0x80220000 0x80e40005 0x80e40002 0x03000009
//         0x80240000 0x80e40004 0x80e40002 0x03000002
//         0x80280000 0x80ff0000 0x80550000 0x03000002
//         0x80280000 0x80aa0000 0x80ff0000 0x0000002b
//         0x01000028 0xe0e4080c 0x01000028 0xe0e40807
//         0x0000002a 0x03000002 0x802f0001 0x80ff000e
//         0x81e40001 0x03000002 0x802f0003 0x80ff000e
//         0x81e40003 0x04000058 0x802f0001 0x80e40001
//         0xa0aa0003 0xa0ff0003 0x04000058 0x802f0003
//         0x80e40003 0xa0aa0003 0xa0ff0003 0x0000002b
//         0x03000009 0x80220000 0x80e40003 0x80e40002
//         0x03000009 0x80240000 0x80e40001 0x80e40002
//         0x03000002 0x80280000 0x80ff0000 0x80550000
//         0x03000002 0x80280002 0x80aa0000 0x80ff0000
//         0x0000002a 0x02000001 0x80280002 0x80ff0000
//         0x0000002b 0x03000005 0x80280000 0x80000000
//         0xa0ff0087 0x02000001 0x80260000 0xa0e40000
//         0x03000002 0x80270002 0x80550000 0xa0e40087
//         0x02000024 0x80270001 0x90e40005 0x04000004
//         0x80270002 0x80ff0000 0x80e40002 0xa0aa0000
//         0x03000008 0x80220000 0x80e4000e 0x80e40001
//         0x03000005 0x80270002 0x80e4000f 0x80e40002
//         0x03000002 0x80280000 0x80550000 0x80550000
//         0x04000004 0x80270003 0x80ff0000 0x80e4000e
//         0x81e40001 0x02000024 0x80270001 0x90e40003
//         0x03000002 0x80280000 0x81000000 0xa0aa0000
//         0x03000008 0x80380001 0x80e40001 0x80e40003
//         0x03000005 0x80280002 0x80ff0002 0x80ff0000
//         0x03000020 0x80280000 0x80ff0001 0xa055004d
//         0x03000005 0x80240003 0x80ff0000 0xa000004d
//         0x03000008 0x80280000 0x80e4000e 0x80e40001
//         0x02000001 0x80320003 0x80ff0000 0x02000001
//         0x80380001 0x80550000 0x03000002 0x80270000
//         0x80aa0000 0xa1e40087 0x03000002 0x80280003
//         0x81ff0001 0xa0aa0000 0x04000004 0x80270001
//         0x80ff0002 0x80e40000 0xa0e40087 0x04000004
//         0x80280001 0xa0aa0062 0x80ff0003 0xa1ff0062
//         0x03000005 0x80270000 0x80550003 0xa0e40041
//         0x03000002 0x80380001 0x81ff0000 0x80ff0001
//         0x04000004 0x80270002 0x80e40000 0x80e40001
//         0x80e40002 0x03000005 0x80280004 0x80ff0001
//         0xa0ff003c 0x03000042 0x802f0001 0x90e40002
//         0xa0e40801 0x04000004 0x80340004 0xa0000062
//         0x80ff0000 0xa1550062 0x03000042 0x802f0000
//         0x90e40002 0xa0e40800 0x04000004 0x80270001
//         0x80e40000 0x81e40000 0x80e40000 0x03000005
//         0x80270003 0x80aa0003 0xa0e40042 0x03000005
//         0x80270001 0x80aa0004 0x80e40001 0x03000005
//         0x80270003 0x80ff0001 0x80e40003 0x04000004
//         0x80270000 0x80e40000 0x80e40000 0x80e40001
//         0x04000012 0x80270001 0x80ff0004 0xa0e4003c
//         0x80e40000 0x03000005 0x80270000 0x80ff0003
//         0xa0e40034 0x03000005 0x80270003 0x80ff0002
//         0x80e40003 0x04000004 0x80270000 0x80e40001
//         0xa0e40033 0x80e40000 0x04000004 0x80270002
//         0x80e40001 0x80e40002 0x80e40003 0x03000002
//         0x80270001 0x80e40000 0xa0e40035 0x04000012
//         0x80270000 0xa0ff0033 0x80e40001 0x80e40002
//         0x01000028 0xe0e40803 0x03000002 0x80280001
//         0x80550000 0x80000000 0x03000002 0x80280001
//         0x80aa0000 0x80ff0001 0x03000002 0x80280001
//         0x80ff0001 0xa1ff0030 0x03000005 0x80270001
//         0x80e40000 0x80ff0001 0x03000005 0x80270801
//         0x80e40001 0xa0e40030 0x0000002a 0x02000001
//         0x80270801 0xa0ff0001 0x0000002b 0x01000028
//         0xe0e40804 0x02000001 0x80280801 0x90ff0005
//         0x0000002a 0x02000001 0x80280801 0x80ff0000
//         0x0000002b 0x02000001 0x80270800 0x80e40000
//         0x02000001 0x80280800 0x80ff0000 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3edc28f6 // 0.43000000
//         COP_CONST[1]: 0x3d2aacda // 0.04166875
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][442] = 0x3c9e1b09 // 0.01930000
//         # USER FLOAT CONST: c[6][443] = 0x3dcccccd // 0.10000000
//         # USER FLOAT CONST: c[6][444] = 0x3dcccccd // 0.10000000
//         # USER FLOAT CONST: c[6][445] = 0x40400000 // 3.00000000
//         # USER FLOAT CONST: c[6][454] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][455] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][456] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][457] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][458] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][459] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][460] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][462] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][463] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][464] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][490] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][491] = 0x3e800000 // 0.25000000
//         # USER FLOAT CONST: c[6][492] = 0x3f000000 // 0.50000000
//         # USER FLOAT CONST: c[6][493] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][522] = 0x3edc28f6 // 0.43000000
//         # USER FLOAT CONST: c[6][523] = 0x3edc28f6 // 0.43000000
//         # USER FLOAT CONST: c[6][524] = 0x3edc28f6 // 0.43000000
//         # USER FLOAT CONST: c[6][642] = 0x41c00000 // 24.00000000
//         # USER FLOAT CONST: c[6][643] = 0x41400000 // 12.00000000
//         # USER FLOAT CONST: c[6][644] = 0x40000000 // 2.00000000
//         # USER FLOAT CONST: c[6][645] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][790] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][791] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][792] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][793] = 0x00000000 // 0.00000000
//         # USER BOOL CONST: c[6][493] = false
//         # USER BOOL CONST: c[6][494] = true
//         # USER BOOL CONST: c[6][497] = true
//         # USER BOOL CONST: c[6][498] = false
//         # USER BOOL CONST: c[6][499] = true
//         # USER BOOL CONST: c[6][500] = true
//         # USER BOOL CONST: c[6][501] = true
//         # USER BOOL CONST: c[6][502] = true
//         ## USER CONST histogram
//         ##    ~c48.x -> c[6][442] = 100.00%@0.01930000
//         ##    ~c48.y -> c[6][443] = 100.00%@0.10000000
//         ##    ~c48.z -> c[6][444] = 100.00%@0.10000000
//         ##    ~c48.w -> c[6][445] = 100.00%@3.00000000
//         ##    ~c51.x -> c[6][454] = 100.00%@0.00000000
//         ##    ~c51.y -> c[6][455] = 100.00%@0.00000000
//         ##    ~c51.z -> c[6][456] = 100.00%@0.00000000
//         ##    ~c51.w -> c[6][457] = 100.00%@0.00000000
//         ##    ~c52.x -> c[6][458] = 100.00%@0.00000000
//         ##    ~c52.y -> c[6][459] = 100.00%@0.00000000
//         ##    ~c52.z -> c[6][460] = 100.00%@0.00000000
//         ##    ~c53.x -> c[6][462] = 100.00%@0.00000000
//         ##    ~c53.y -> c[6][463] = 100.00%@0.00000000
//         ##    ~c53.z -> c[6][464] = 100.00%@0.00000000
//         ##    ~c60.x -> c[6][490] = 100.00%@0.00000000
//         ##    ~c60.y -> c[6][491] = 100.00%@0.25000000
//         ##    ~c60.z -> c[6][492] = 100.00%@0.50000000
//         ##    ~c60.w -> c[6][493] = 100.00%@1.00000000
//         ##     c61.x -> c[6][494] = 29.03%@-0.14000000 9.68%@-0.13160000 7.26%@-0.13524000 4.03%@-0.10164000 2.42%@-0.12669998 0.81%@-0.12236000 0.81%@-0.13328000
//         ##     c61.y -> c[6][495] = 17.74%@-0.19559998 9.68%@-0.19152500 8.87%@-0.20375000 4.03%@-0.16503750 2.42%@-0.18785750 0.81%@-0.18500500 0.81%@-0.18887624
//         ##     c61.z -> c[6][496] = 10.48%@-0.42749996 9.68%@-0.38218496 4.03%@-0.36764996 2.42%@-0.40697996 2.42%@-0.39287244 0.81%@-0.39543744 0.81%@-0.37748248
//         ##     c62.x -> c[6][498] = 29.03%@-0.17500002 9.68%@-0.16450002 7.26%@-0.16905000 4.03%@-0.12705002 2.42%@-0.15837502 0.81%@-0.15295002 0.81%@-0.16660002
//         ##     c62.y -> c[6][499] = 17.74%@-0.13200002 9.68%@-0.12925002 8.87%@-0.13750002 4.03%@-0.11137502 2.42%@-0.12677502 0.81%@-0.12485002 0.81%@-0.12746252
//         ##     c62.z -> c[6][500] = 10.48%@-0.12000000 9.68%@-0.10728000 4.03%@-0.10320000 2.42%@-0.11424002 2.42%@-0.11028002 0.81%@-0.11100002 0.81%@-0.10596000
//         ##     c63.x -> c[6][502] = 29.03%@0.56500000 9.68%@0.53109996 7.26%@0.54579000 4.03%@0.41019000 2.42%@0.51132500 0.81%@0.49381000 0.81%@0.53788000
//         ##     c63.y -> c[6][503] = 17.74%@0.63959996 9.68%@0.62627500 8.87%@0.66625000 4.03%@0.53966248 2.42%@0.61428248 0.81%@0.60495496 0.81%@0.61761372
//         ##     c63.z -> c[6][504] = 10.48%@0.92249992 9.68%@0.82471496 4.03%@0.79335000 2.42%@0.87822000 2.42%@0.84777752 0.81%@0.85331248 0.81%@0.81456744
//         ##     c65.x -> c[6][510] = 33.87%@0.70520000 9.68%@0.61705000 4.03%@0.66570880 1.61%@0.68898040 0.81%@0.49011400 0.81%@0.64878404 0.81%@0.70026360
//         ##     c65.y -> c[6][511] = 24.00%@0.70520000 9.68%@0.61705000 8.06%@0.68474920 4.03%@0.62480716 1.61%@0.68898040 0.81%@0.31592962 0.81%@0.61634480
//         ##     c65.z -> c[6][512] = 24.19%@0.70520000 9.68%@0.65513080 4.03%@0.62480716 1.61%@0.66852964 0.81%@0.56768604 0.81%@0.27996442 0.81%@0.65583604
//         ##     c66.x -> c[6][514] = 37.91%@0.12600000 12.10%@0.00000000 9.68%@0.08038800 4.03%@0.00680400 2.42%@0.11617200 0.81%@0.00138600 0.81%@0.12524402
//         ##     c66.y -> c[6][515] = 37.91%@0.09000000 12.90%@0.00000000 9.68%@0.06876000 4.03%@0.00486000 3.23%@0.08217000 2.42%@0.07794000 0.81%@0.08073001
//         ##     c66.z -> c[6][516] = 36.29%@0.09000000 12.90%@0.00000000 9.68%@0.07875000 4.03%@0.00486000 3.23%@0.07128001 3.23%@0.06777001 2.42%@0.08748000
//         ##    ~c68.x -> c[6][522] = 100.00%@0.43000000
//         ##    ~c68.y -> c[6][523] = 100.00%@0.43000000
//         ##    ~c68.z -> c[6][524] = 100.00%@0.43000000
//         ##     c77.x -> c[6][558] = 41.13%@1.00000000 22.58%@0.10000000 15.32%@4.00000000 9.68%@3.00000000 3.23%@0.00000000 1.61%@0.40000000 0.81%@1.50000000
//         ##     c77.y -> c[6][559] = 45.16%@15.00000000 25.81%@2.00000000 12.91%@5.00000000 4.84%@8.00000000 3.23%@20.00000000 2.42%@30.00000000 0.81%@0.10000000
//         ##    ~c98.x -> c[6][642] = 100.00%@24.00000000
//         ##    ~c98.y -> c[6][643] = 100.00%@12.00000000
//         ##    ~c98.z -> c[6][644] = 100.00%@2.00000000
//         ##    ~c98.w -> c[6][645] = 100.00%@1.00000000
//         ##    ~c135.x -> c[6][790] = 100.00%@0.00000000
//         ##    ~c135.y -> c[6][791] = 100.00%@0.00000000
//         ##    ~c135.z -> c[6][792] = 100.00%@0.00000000
//         ##    ~c135.w -> c[6][793] = 100.00%@0.00000000
//         ##    ~b3 -> c[6][493] = 100.00%@0
//         ##    ~b4 -> c[6][494] = 100.00%@1
//         ##    ~b7 -> c[6][497] = 100.00%@1
//         ##    ~b8 -> c[6][498] = 100.00%@0
//         ##    ~b9 -> c[6][499] = 100.00%@1
//         ##    ~b10 -> c[6][500] = 100.00%@1
//         ##    ~b11 -> c[6][501] = 100.00%@1
//         ##    ~b12 -> c[6][502] = 100.00%@1
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7de45f29,0x00000411
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x8dc83d18,0x00000411
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000411
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000411
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x69966d02,0x00000208
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xbbeaf67b,0x00000208
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000208
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xabd9df90,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x654e861e,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xd501dd8f,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x5905263d,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x4bba53db,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x7b3dd6a5,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xe4a7ecdf,0x00000270
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x60e7794a,0x00000270
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000270
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x75974c58,0x00000750
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT45_A8R8G8B8,0,0,0), 0x8dc4ce2d,0x00000750
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000750
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000750
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x6f2e2b19,0x00000270
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x5df9e2cf,0x00000270
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000270
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0ad9b7c7,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x643b23d7,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xb796517f,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x90c6a6dc,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000001a0
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x3c93c548,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x216fec23,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x05a1154a,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xd1408b29,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x70f7412d,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x0b3de76f,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000001a0
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x253d6d13,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x9f5f82a1,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x41d3f58b,0x00000208
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xc25a2f33,0x00000208
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000208
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x4c63b6cc,0x00000478
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xf797b731,0x00000478
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000478
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000478
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0a5257b5,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x2df281b6,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x89bac2a1,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xebab4260,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7ff69377,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x28ccf278,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xa2d20e41,0x000002d8
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x202f6ebf,0x000002d8
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000002d8
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xa7b874b7,0x00000820
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x7d715b33,0x00000820
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000820
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000820
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7777b6ab,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x96cba341,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,7680x2160,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xeb1075ba,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x533b8878,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x69966d02,0x00000208
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xbbeaf67b,0x00000208
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000208
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7de45f29,0x00000410
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x8dc83d18,0x00000410
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000410
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000410
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xabd9df90,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x654e861e,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xd501dd8f,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x5905263d,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x4bba53db,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x7b3dd6a5,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xe4a7ecdf,0x00000270
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x60e7794a,0x00000270
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000270
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x75974c58,0x00000750
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT45_A8R8G8B8,0,0,0), 0x8dc4ce2d,0x00000750
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000750
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000750
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x6f2e2b19,0x00000270
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x5df9e2cf,0x00000270
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000270
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0ad9b7c7,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x643b23d7,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xb796517f,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x90c6a6dc,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000001a0
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x3c93c548,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x216fec23,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x05a1154a,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xd1408b29,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x70f7412d,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x0b3de76f,0x000001a0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000001a0
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x253d6d13,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x9f5f82a1,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x41d3f58b,0x00000208
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xc25a2f33,0x00000208
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000208
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x4c63b6cc,0x00000478
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xf797b731,0x00000478
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000478
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000478
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0a5257b5,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x2df281b6,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x89bac2a1,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xebab4260,0x00000138
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7ff69377,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x28ccf278,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xa2d20e41,0x000002d8
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x202f6ebf,0x000002d8
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000002d8
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xa7b874b7,0x00000820
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x7d715b33,0x00000820
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000820
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000820
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7777b6ab,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x96cba341,0x00000068
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 2,1920x1080,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xeb1075ba,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x533b8878,0x000000d0
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x7,2D,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1024x1024x0,1/0,Z24S8,0,0,0), 0x00000000,0x000000d0
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x18 0 4 "TEX0")
//         (0x18 0 4 "ATTR02")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xff
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 2 : 
//          (attr 1 2 4) (attr 3 8 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texh r5, v3.zwzz, #1, #1, 2D
//         madh r5.xyz, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).x, r5, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).y
//         nrmh r19.xyz, r5
//         nrmh r5.xyz, v7
//         dp3h r5.z, r19, r5
//         mulh r5.w, r5.z, r5.z
//         mulh r5.xyz, r5.z, c[6][312]
//         madh r5.xyz, r5.w, c[6][311], r5
//         addh r7.xyz, r5, c[6][313]
//         rcph r5.w, v8.w
//         madh r19.w, v8.z, r5.w, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).x
//         mulh r17.x, v10.w, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).w
//         txph r5, v9, #6, #6, 2D
//         madh r6.x, v10.w, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).y, v10.x
//         movh r6.yzw, v10
//         txph r12, r6, #7, #7, SHADOW2D
//         madh r6.y, v10.w, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).y, v10.y
//         movh r6.xzw, v10
//         txph r8, r6, #7, #7, SHADOW2D
//         nrmh r6.xyz, v5
//         dp3h_sat r5.w, r19, r6
//         movr r45, c[6][318]
//         movr r45.x, constant(0.43000000, 0.43000000, 0.43000000, 0.43000000).x
//         movr r45.y, constant(0.43000000, 0.43000000, 0.43000000, 0.43000000).x
//         movr r45.z, constant(0.43000000, 0.43000000, 0.43000000, 0.43000000).x
//         madh r6.xyz, r45, r5.w, v1
//         madh r20.xyz, r7, v2, r6
//         madh r6.x, v10.w, -constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).y, v10.x
//         movh r6.yzw, v10
//         txph r7, r6, #7, #7, SHADOW2D
//         madh r6.y, v10.w, -constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).y, v10.y
//         movh r6.xzw, v10
//         txph r6, r6, #7, #7, SHADOW2D
//         ife , c[6][499], l0, l1
//         movh r12.y, r8.x
//         movh r12.z, r7.x
//         movh r12.w, r6.x
//         movh r7, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).z
//         l0:
//         movh r7, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).w
//         movh r12, r7.x
//         l1:
//         madh r6.xy, v10.w, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).y, v10
//         movh r6.zw, v10
//         txph r11, r6, #7, #7, SHADOW2D
//         madh r6.xy, v10.w, constant(-0.00097656, 0.00097656, 0.50000000, 0.66670000), v10
//         movh r6.zw, v10
//         txph r9, r6, #7, #7, SHADOW2D
//         madh r6.xy, v10.w, constant(-0.00097656, 0.00097656, 0.50000000, 0.66670000).yxzw, v10
//         movh r6.zw, v10
//         txph r8, r6, #7, #7, SHADOW2D
//         madh r6.xy, v10.w, -constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).y, v10
//         movh r6.zw, v10
//         txph r6, r6, #7, #7, SHADOW2D
//         ife , c[6][500], l2, l3
//         movh r11.y, r9.x
//         movh r11.z, r8.x
//         movh r11.w, r6.x
//         mulh r7, r7, constant(-0.00097656, 0.00097656, 0.50000000, 0.66670000).z
//         l2:
//         movh r11, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).w
//         l3:
//         madh r6.x, v10.w, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).w, v10.x
//         movh r6.yzw, v10
//         txph r10, r6, #7, #7, SHADOW2D
//         madh r6.y, v10.w, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).w, v10.y
//         movh r6.xzw, v10
//         txph r16, r6, #7, #7, SHADOW2D
//         madh r6.x, v10.w, -constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).w, v10.x
//         movh r6.yzw, v10
//         txph r15, r6, #7, #7, SHADOW2D
//         madh r6.y, v10.w, -constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).w, v10.y
//         movh r6.xzw, v10
//         txph r14, r6, #7, #7, SHADOW2D
//         madh r6.xy, v10.w, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).w, v10
//         movh r6.zw, v10
//         txph r9, r6, #7, #7, SHADOW2D
//         madh r6.xy, v10.w, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000), v10
//         movh r6.zw, v10
//         txph r13, r6, #7, #7, SHADOW2D
//         mulh r5.w, v10.w, -constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).y
//         madh r6.xy, v10.w, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).yxzw, v10
//         movh r6.zw, v10
//         txph r8, r6, #7, #7, SHADOW2D
//         madh r6.xy, v10.w, -constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).w, v10
//         movh r6.zw, v10
//         txph r6, r6, #7, #7, SHADOW2D
//         ife , c[6][501], l4, l5
//         movh r10.y, r16.x
//         movh r10.z, r15.x
//         movh r10.w, r14.x
//         movh r9.y, r13.x
//         movh r9.z, r8.x
//         movh r9.w, r6.x
//         movh r6.x, r17.x
//         mulh r7, r7, constant(-0.00097656, 0.00097656, 0.50000000, 0.66670000).z
//         l4:
//         movh r6.x, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).w
//         movh r10, r6.x
//         movh r9, r6.x
//         l5:
//         movh r5.z, r6.x
//         mulh r6.y, v10.w, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).y
//         addh r8.xy, r6, v10
//         movh r8.zw, v10
//         txph r8, r8, #7, #7, SHADOW2D
//         addh r13.xy, r6.yxzw, v10
//         movh r13.zw, v10
//         txph r18, r13, #7, #7, SHADOW2D
//         movh r13.x, -r6.x
//         movh r6.zw, -r6.x
//         addh r14.xy, r6.zyzw, v10
//         movh r14.zw, v10
//         txph r17, r14, #7, #7, SHADOW2D
//         addh r6.xy, r6.ywzw, v10
//         movh r6.zw, v10
//         txph r16, r6, #7, #7, SHADOW2D
//         addh r6.xy, r5.wzzw, v10
//         movh r6.zw, v10
//         txph r6, r6, #7, #7, SHADOW2D
//         addh r14.xy, r5.zwzw, v10
//         movh r14.zw, v10
//         txph r15, r14, #7, #7, SHADOW2D
//         mulh r13.y, v10.w, -constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).y
//         addh r14.xy, r13.yxzw, v10
//         movh r14.zw, v10
//         txph r14, r14, #7, #7, SHADOW2D
//         addh r13.xy, r13, v10
//         movh r13.zw, v10
//         txph r13, r13, #7, #7, SHADOW2D
//         ife , c[6][502], l6, l7
//         movh r8.y, r18.x
//         movh r8.z, r17.x
//         movh r8.w, r16.x
//         movh r6.y, r15.x
//         movh r6.z, r14.x
//         movh r6.w, r13.x
//         mulh r7, r7, constant(-0.00097656, 0.00097656, 0.50000000, 0.66670000).w
//         l6:
//         movh r6, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).w
//         movh r8, r6.x
//         l7:
//         ife FL, c[6][498], l8, l9
//         txph r13, v10, #7, #7, SHADOW2D
//         ife , c[6][497], l10, l11
//         movh r5.w, r13.x
//         l10:
//         addh r5.w, r19.w, -r13.x
//         cmph r5.w, r5.w, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).z, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).w
//         l11:
//         l8:
//         movh r5.w, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).z
//         l9:
//         ife , c[6][499], l12, l13
//         ife , c[6][497], l14, l15
//         l14:
//         addh r12, r19.w, -r12
//         cmph r12, r12, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).z, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).w
//         l15:
//         dp4h r5.w, r12, r7
//         l12:
//         l13:
//         ife , c[6][500], l16, l17
//         ife , c[6][497], l18, l19
//         l18:
//         addh r11, r19.w, -r11
//         cmph r11, r11, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).z, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).w
//         l19:
//         dp4h r5.z, r11, r7
//         addh r5.w, r5.w, r5.z
//         l16:
//         l17:
//         ife , c[6][501], l20, l21
//         ife , c[6][497], l22, l23
//         l22:
//         addh r9, r19.w, -r9
//         addh r10, r19.w, -r10
//         cmph r9, r9, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).z, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).w
//         cmph r10, r10, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).z, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).w
//         l23:
//         dp4h r5.y, r10, r7
//         dp4h r5.z, r9, r7
//         addh r5.w, r5.w, r5.y
//         addh r5.w, r5.z, r5.w
//         l20:
//         l21:
//         ife , c[6][502], l24, l25
//         ife , c[6][497], l26, l27
//         l26:
//         addh r6, r19.w, -r6
//         addh r8, r19.w, -r8
//         cmph r6, r6, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).z, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).w
//         cmph r8, r8, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).z, constant(-0.00195313, 0.00195313, 0.00000000, 1.00000000).w
//         l27:
//         dp4h r5.y, r8, r7
//         dp4h r5.z, r6, r7
//         addh r5.w, r5.w, r5.y
//         addh r7.w, r5.z, r5.w
//         l24:
//         movh r7.w, r5.w
//         l25:
//         movr r44, c[6][385].w
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulh r5.w, r5.x, r44
//         movh r5.yz, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313)
//         movr r44, c[6][385]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addh r7.xyz, r5.y, r44
//         nrmh r6.xyz, v6
//         madh r7.xyz, r5.w, r7, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).z
//         dp3h r5.y, r19, r6
//         mulh r7.xyz, r20, r7
//         addh r5.w, r5.y, r5.y
//         madh r8.xyz, r5.w, r19, -r6
//         nrmh r6.xyz, v4
//         addh r5.w, -r5.x, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).z
//         dp3h_sat r6.w, r6, r8
//         mulh r7.w, r7.w, r5.w
//         lg2r r47, |r6.w|
//         mulr r47, r47, c[6][327].y
//         ex2r r47, r47
//         movh r5.w, r47
//         mulh r8.z, r5.w, c[6][327].x
//         dp3h r5.w, r19, r6
//         movh_sat r8.y, r5.w
//         movh_sat r6.w, r5.y
//         movr r44, -c[6][385]
//         movr r44.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addh r5.xyz, r5.z, r44
//         addh r8.w, -r6.w, constant(2.00000000, -1.00000000, 1.00000000, 0.00195313).z
//         movr r43, c[6][385]
//         movr r43.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madh r6.xyz, r7.w, r5, r43
//         movr r45, c[6][348].z
//         movr r45.x, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r45.y, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r45.z, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r45.w, constant(2.00000000, 2.00000000, 2.00000000, 2.00000000).x
//         movr r43, -c[6][348].w
//         movr r43.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madh r6.w, r45, r8.w, r43
//         mulh r5.xyz, r8.y, c[6][315]
//         addh_sat r6.w, -r5.w, r6.w
//         madh r7.xyz, r5, r6, r7
//         movr r44, c[6][310].w
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulh r9.w, r6.w, r44
//         texh r6, v3.xyzz, #1, #1, 2D
//         movr r45, c[6][348].x
//         movr r45.x, constant(24.00000000, 24.00000000, 24.00000000, 24.00000000).x
//         movr r45.y, constant(24.00000000, 24.00000000, 24.00000000, 24.00000000).x
//         movr r45.z, constant(24.00000000, 24.00000000, 24.00000000, 24.00000000).x
//         movr r45.w, constant(24.00000000, 24.00000000, 24.00000000, 24.00000000).x
//         movr r43, -c[6][348].y
//         movr r43.x, -constant(12.00000000, 12.00000000, 12.00000000, 12.00000000).x
//         movr r43.y, -constant(12.00000000, 12.00000000, 12.00000000, 12.00000000).x
//         movr r43.z, -constant(12.00000000, 12.00000000, 12.00000000, 12.00000000).x
//         movr r43.w, -constant(12.00000000, 12.00000000, 12.00000000, 12.00000000).x
//         madh_sat r9.z, r45, r5.w, r43
//         texh r5, v3.xyzz, #0, #0, 2D
//         madh r6.xyz, r5, -r5, r5
//         mulh r8.xyz, r8.z, c[6][316]
//         mulh r6.xyz, r9.z, r6
//         mulh r8.xyz, r6.w, r8
//         madh r5.xyz, r5, r5, r6
//         movr r44, c[6][310]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r44.z, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         lrph r6.xyz, r9.w, r44, r5
//         movr r44, c[6][302]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulh r5.xyz, r8.w, r44
//         mulh r8.xyz, r7.w, r8
//         movr r44, c[6][301]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madh r5.xyz, r6, r44, r5
//         madh r7.xyz, r6, r7, r8
//         movr r44, c[6][303]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         addh r6.xyz, r5, r44
//         movr r45, c[6][301].w
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         lrph r5.xyz, r45, r6, r7
//         ife FL, c[6][493], l28, l29
//         addh r6.w, r5.y, r5.x
//         addh r6.w, r5.z, r6.w
//         movr r44, -c[6][298].w
//         movr r44.x, -constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r44.y, -constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r44.z, -constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r44.w, -constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         addh r6.w, r6.w, r44
//         mulh r6.xyz, r5, r6.w
//         movr r44, c[6][298]
//         movr r44.x, constant(0.01930000, 0.01930000, 0.01930000, 0.01930000).x
//         movr r44.y, constant(0.10000000, 0.10000000, 0.10000000, 0.10000000).x
//         movr r44.z, constant(0.10000000, 0.10000000, 0.10000000, 0.10000000).x
//         movr r44.w, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         mulh r2.xyz, r6, r44
//         l28:
//         movh r2.xyz, constant(-0.01200000, 0.00097656, 0.25000000, 0.00000000).w
//         l29:
//         ife , c[6][494], l30, l31
//         movh r2.w, v6.w
//         l30:
//         movh r2.w, r5.w
//         l31:
//         movh r0.xyz, r5
//         movh r0.w, r5.w
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R26, -0x40800000;         # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R18, R0;                # [  2][000010]
//     	IPA.SC R1, a[0x30c], R18;        # [  3][000018] FIXED_FNC_TEXTURE_0_Q
//     	IPA.SC R0, a[0x308], R18;        # [  4][000020] FIXED_FNC_TEXTURE_0_R
//     	TEX.NODEP.P R4, R0, 0x1, 0x1, 2D, 0x7; # [  5][000028]
//     	IPA.SC R1, a[0x37c], R18;        # [  6][000030] FIXED_FNC_TEXTURE_7_Q
//     	IPA.SC R2, a[0x374], R18;        # [  7][000038] FIXED_FNC_TEXTURE_7_T
//     	MUFU.RCP R12, R1;                # [  8][000040]
//     	IPA.SC R10, a[0x370], R18;       # [  9][000048] TEX7
//     	FFMA.FTZ R3, R1, 0x3b000, R2;    # [ 10][000050]
//     	IPA.SC R0, a[0x378], R18;        # [ 11][000058] FIXED_FNC_TEXTURE_7_R
//     	FMUL R3, R3, R12;                # [ 12][000060]
//     	FFMA.FTZ R7, R1, 0xba800, R10;   # [ 13][000068]
//     	FFMA.FTZ R11, R1, 0x3b000, R10;  # [ 14][000070]
//     	FMUL R32, R0, R12;               # [ 15][000078]
//     	FMUL R8, R7, R12;                # [ 16][000080]
//     	MOV R9, R3;                      # [ 17][000088]
//     	FFMA.FTZ R7, R1, 0xba800, R2;    # [ 18][000090]
//     	FMUL R0, R11, R12;               # [ 19][000098]
//     	TEX.DC.NODEP.T R14, R8, R32, 0x7, 0x7, 2D, 0x1; # [ 20][0000a0]
//     	FMUL R17, R7, R12;               # [ 21][0000a8]
//     	MOV R16, R0;                     # [ 22][0000b0]
//     	TEX.DC.NODEP.T R13, R16, R32, 0x7, 0x7, 2D, 0x1; # [ 23][0000b8]
//     	FFMA.FTZ R7, R1, -0x3b000, R2;   # [ 24][0000c0]
//     	IPA.SC R19, a[0x340], R18;       # [ 25][0000c8] TEX4
//     	FMUL R25, R7, R12;               # [ 26][0000d0]
//     	IPA.SC R20, a[0x344], R18;       # [ 27][0000d8] FIXED_FNC_TEXTURE_4_T
//     	FFMA.FTZ R7, R1, -0x3b000, R10;  # [ 28][0000e0]
//     	MOV R9, R25;                     # [ 29][0000e8]
//     	FMUL R22, R7, R12;               # [ 30][0000f0]
//     	IPA.SC R21, a[0x348], R18;       # [ 31][0000f8] FIXED_FNC_TEXTURE_4_R
//     	FMUL.FTZ R16, R19, R19;          # [ 32][000100]
//     	TEX.DC.NODEP.T R7, R8, R32, 0x7, 0x7, 2D, 0x1; # [ 33][000108]
//     	MOV R9, R17;                     # [ 34][000110]
//     	MOV R8, R22;                     # [ 35][000118]
//     	FFMA.FTZ R16, R20, R20, R16;     # [ 36][000120]
//     	TEX.DC.NODEP.P R8, R8, R32, 0x7, 0x7, 2D, 0x1; # [ 37][000128]
//     	FFMA.FTZ R23, R21, R21, R16;     # [ 38][000130]
//     	IPA.SC R11, a[0x320], R18;       # [ 39][000138] TEX2
//     	MUFU.RSQ R23, R23;               # [ 40][000140]
//     	IPA.SC R15, a[0x324], R18;       # [ 41][000148] FIXED_FNC_TEXTURE_2_T
//     	FMUL.FTZ R24, R11, R11;          # [ 42][000150]
//     	FMUL.FTZ R19, R19, R23;          # [ 43][000158]
//     	FMUL.FTZ R21, R21, R23;          # [ 44][000160]
//     	FFMA.FTZ R24, R15, R15, R24;     # [ 45][000168]
//     	IPA.PASS.CENTROID R9, a[0x7c];   # [ 46][000170] POSITION_W
//     	MUFU.RCP R9, R9;                 # [ 47][000178]
//     	FFMA.FMZ R17, R4, 2, R26;        # [ 48][000180]
//     	FFMA.FMZ R16, R5, 2, R26;        # [ 49][000188]
//     	FMUL.FTZ R4, R17, R17;           # [ 50][000190]
//     	FFMA.FMZ R6, R6, 2, R26;         # [ 51][000198]
//     	FFMA.FTZ R5, R16, R16, R4;       # [ 52][0001a0]
//     	FFMA.FTZ R27, R6, R6, R5;        # [ 53][0001a8]
//     	IPA.SC R4, a[0x328], R18;        # [ 54][0001b0] FIXED_FNC_TEXTURE_2_R
//     	FMUL.FTZ R5, R20, R23;           # [ 55][0001b8]
//     	MUFU.RSQ R20, R27;               # [ 56][0001c0]
//     	FFMA.FTZ R23, R4, R4, R24;       # [ 57][0001c8]
//     	FMUL.FTZ R33, R17, R20;          # [ 58][0001d0]
//     	FMUL.FTZ R34, R16, R20;          # [ 59][0001d8]
//     	MUFU.RSQ R17, R23;               # [ 60][0001e0]
//     	FMUL.FTZ R27, R6, R20;           # [ 61][0001e8]
//     	FMUL.FTZ R16, R33, R19;          # [ 62][0001f0]
//     	FMUL.FTZ R6, R11, R17;           # [ 63][0001f8]
//     	FFMA.FTZ R5, R34, R5, R16;       # [ 64][000200]
//     	FMUL.FTZ R19, R15, R17;          # [ 65][000208]
//     	FMUL.FTZ R16, R33, R6;           # [ 66][000210]
//     	IPA.SC.CENTROID R11, a[0x284], R9; # [ 67][000218] COLOR_FRONT_DIFFUSE_GREEN
//     	FFMA.FTZ R6, R27, R21, R5;       # [ 68][000220]
//     	IPA.SC.CENTROID R15, a[0x294], R9; # [ 69][000228] COLOR_FRONT_SPELWLAR_GREEN
//     	FMUL.FTZ R5, R4, R17;            # [ 70][000230]
//     	FMUL.FMZ R21, R6, R6;            # [ 71][000238]
//     	FFMA.FTZ R4, R34, R19, R16;      # [ 72][000240]
//     	IPA.SC.CENTROID R17, a[0x280], R9; # [ 73][000248] COLOR_FRONT_DIFFUSE_RED
//     	FMUL.FMZ R16, R6, c[0x6][0x1384]; # [ 74][000250]
//     	FFMA.FTZ.SAT R5, R27, R5, R4;    # [ 75][000258]
//     	FFMA.FMZ R16, R21, c[0x6][0x1374], R16; # [ 76][000260]
//     	IPA.SC.CENTROID R4, a[0x288], R9; # [ 77][000268] COLOR_FRONT_DIFFUSE_BLUE
//     	FFMA.FMZ R19, R5, c[0x9][0x0], R11; # [ 78][000270]
//     	FFMA.FMZ R23, R1, 0x3b000, R10;  # [ 79][000278]
//     	FADD.FTZ R16, R16, c[0x6][0x1394]; # [ 80][000280]
//     	FFMA.FMZ R11, R1, 0x3b000, R2;   # [ 81][000288]
//     	FFMA.FMZ R20, R16, R15, R19;     # [ 82][000290]
//     	FMUL R31, R11, R12;              # [ 83][000298]
//     	FMUL R16, R23, R12;              # [ 84][0002a0]
//     	FFMA.FMZ R11, R5, c[0x9][0x0], R17; # [ 85][0002a8]
//     	FFMA.FMZ R23, R5, c[0x9][0x0], R4; # [ 86][0002b0]
//     	IPA.SC.CENTROID R19, a[0x298], R9; # [ 87][0002b8] COLOR_FRONT_SPELWLAR_BLUE
//     	FMUL.FMZ R15, R6, c[0x6][0x1388]; # [ 88][0002c0]
//     	MOV R5, R31;                     # [ 89][0002c8]
//     	MOV R4, R16;                     # [ 90][0002d0]
//     	FFMA.FMZ R15, R21, c[0x6][0x1378], R15; # [ 91][0002d8]
//     	TEX.DC.NODEP.T R17, R4, R32, 0x7, 0x7, 2D, 0x1; # [ 92][0002e0]
//     	FFMA.FMZ R5, R1, 0xbb000, R2;    # [ 93][0002e8]
//     	FADD.FTZ R4, R15, c[0x6][0x1398]; # [ 94][0002f0]
//     	FMUL R15, R5, R12;               # [ 95][0002f8]
//     	FFMA.FMZ R19, R4, R19, R23;      # [ 96][000300]
//     	MOV R5, R15;                     # [ 97][000308]
//     	MOV R4, R16;                     # [ 98][000310]
//     	FMUL.FMZ R6, R6, c[0x6][0x1380]; # [ 99][000318]
//     	TEX.DC.NODEP.P R23, R4, R32, 0x7, 0x7, 2D, 0x1; # [100][000320]
//     	FFMA.FMZ R4, R1, 0xbb000, R10;   # [101][000328]
//     	FMUL32I.FTZ R5, R14, 0x3d2aacda; # [102][000330]
//     	FFMA.FMZ R21, R21, c[0x6][0x1370], R6; # [103][000338]
//     	FMUL R28, R4, R12;               # [104][000340]
//     	FFMA.FTZ R6, R13, c[0x9][0x4], R5; # [105][000348]
//     	MOV R5, R15;                     # [106][000350]
//     	MOV R4, R28;                     # [107][000358]
//     	TEX.DC.NODEP.P R13, R4, R32, 0x7, 0x7, 2D, 0x1; # [108][000360]
//     	FFMA.FMZ R4, R1, 0x3a800, R10;   # [109][000368]
//     	FFMA.FTZ R5, R7, c[0x9][0x4], R6; # [110][000370]
//     	FMUL R7, R2, R12;                # [111][000378]
//     	FMUL R6, R4, R12;                # [112][000380]
//     	FFMA.FTZ R4, R8, c[0x9][0x4], R5; # [113][000388]
//     	MOV R29, R7;                     # [114][000390]
//     	TEX.DC.NODEP.P R14, R6, R32, 0x7, 0x7, 2D, 0x1; # [115][000398]
//     	FADD.FTZ R8, R21, c[0x6][0x1390]; # [116][0003a0]
//     	IPA.SC.CENTROID R5, a[0x290], R9; # [117][0003a8] COLOR_FRONT_SPELWLAR_RED
//     	FFMA.FTZ R9, R1, 0x3a800, R2;    # [118][0003b0]
//     	FFMA.FMZ R21, R8, R5, R11;       # [119][0003b8]
//     	FFMA.FMZ R5, R1, 0x3a800, R2;    # [120][0003c0]
//     	FFMA.FMZ R8, R1, 0xba800, R10;   # [121][0003c8]
//     	FMUL R8, R8, R12;                # [122][0003d0]
//     	FMUL R5, R5, R12;                # [123][0003d8]
//     	FFMA.FTZ R4, R17, c[0x9][0x4], R4; # [124][0003e0]
//     	FFMA.FTZ R17, R23, c[0x9][0x4], R4; # [125][0003e8]
//     	FFMA.FMZ R4, R1, 0xba800, R2;    # [126][0003f0]
//     	FFMA.FTZ R2, R1, 0x3a800, R10;   # [127][0003f8]
//     	FMUL R1, R9, R12;                # [128][000400]
//     	FMUL R11, R4, R12;               # [129][000408]
//     	MOV R9, R7;                      # [130][000410]
//     	FMUL R2, R2, R12;                # [131][000418]
//     	FMUL R4, R10, R12;               # [132][000420]
//     	TEX.DC.NODEP.P R30, R8, R32, 0x7, 0x7, 2D, 0x1; # [133][000428]
//     	FFMA.FTZ R9, R13, c[0x9][0x4], R17; # [134][000430]
//     	MOV R12, R6;                     # [135][000438]
//     	MOV R13, R5;                     # [136][000440]
//     	MOV R10, R6;                     # [137][000448]
//     	MOV R17, R7;                     # [138][000450]
//     	TEX.DC.NODEP.T R12, R12, R32, 0x7, 0x7, 2D, 0x1; # [139][000458]
//     	MOV R23, R1;                     # [140][000460]
//     	TEX.DC.NODEP.P R6, R10, R32, 0x7, 0x7, 2D, 0x1; # [141][000468]
//     	MOV R10, R4;                     # [142][000470]
//     	FFMA.FTZ R13, R14, c[0x9][0x4], R9; # [143][000478]
//     	MOV R9, R11;                     # [144][000480]
//     	TEX.DC.NODEP.T R10, R10, R32, 0x7, 0x7, 2D, 0x1; # [145][000488]
//     	MOV R14, R4;                     # [146][000490]
//     	TEX.DC.NODEP.T R11, R8, R32, 0x7, 0x7, 2D, 0x1; # [147][000498]
//     	MOV R9, R5;                      # [148][0004a0]
//     	MOV R24, R2;                     # [149][0004a8]
//     	TEX.DC.NODEP.T R35, R8, R32, 0x7, 0x7, 2D, 0x1; # [150][0004b0]
//     	TEX.DC.NODEP.T R8, R16, R32, 0x7, 0x7, 2D, 0x1; # [151][0004b8]
//     	TEX.DC.NODEP.T R9, R14, R32, 0x7, 0x7, 2D, 0x1; # [152][0004c0]
//     	TEX.DC.NODEP.T R14, R0, R32, 0x7, 0x7, 2D, 0x1; # [153][0004c8]
//     	MOV R1, R31;                     # [154][0004d0]
//     	TEX.DC.NODEP.T R15, R22, R32, 0x7, 0x7, 2D, 0x1; # [155][0004d8]
//     	TEX.DC.NODEP.P R16, R24, R32, 0x7, 0x7, 2D, 0x1; # [156][0004e0]
//     	TEX.DC.NODEP.P R17, R2, R32, 0x7, 0x7, 2D, 0x1; # [157][0004e8]
//     	IPA.SC R2, a[0x330], R18;        # [158][0004f0] TEX3
//     	TEX.DC.NODEP.P R22, R28, R32, 0x7, 0x7, 2D, 0x1; # [159][0004f8]
//     	FFMA.FTZ R24, R30, c[0x9][0x4], R13; # [160][000500]
//     	IPA.SC R3, a[0x334], R18;        # [161][000508] FIXED_FNC_TEXTURE_3_T
//     	FMUL.FTZ R0, R2, R2;             # [162][000510]
//     	IPA.SC R25, a[0x338], R18;       # [163][000518] FIXED_FNC_TEXTURE_3_R
//     	MOV R30, R4;                     # [164][000520]
//     	TEX.DC.NODEP.T R7, R4, R32, 0x7, 0x7, 2D, 0x1; # [165][000528]
//     	FFMA.FTZ R0, R3, R3, R0;         # [166][000530]
//     	TEX.DC.NODEP.T R13, R30, R32, 0x7, 0x7, 2D, 0x1; # [167][000538]
//     	FFMA.FTZ R4, R25, R25, R0;       # [168][000540]
//     	IPA.SC R29, a[0x310], R18;       # [169][000548] TEX1
//     	MOV R0, R28;                     # [170][000550]
//     	MUFU.RSQ R4, R4;                 # [171][000558]
//     	TEX.DC.NODEP.P R23, R0, R32, 0x7, 0x7, 2D, 0x1; # [172][000560]
//     	FMUL.FTZ R28, R3, R4;            # [173][000568]
//     	IPA.SC R5, a[0x314], R18;        # [174][000570] FIXED_FNC_TEXTURE_1_T
//     	IPA.SC R3, a[0x318], R18;        # [175][000578] FIXED_FNC_TEXTURE_1_R
//     	FMUL.FTZ R1, R2, R4;             # [176][000580]
//     	FMUL.FTZ R0, R25, R4;            # [177][000588]
//     	FMUL.FTZ R2, R29, R29;           # [178][000590]
//     	FFMA.FTZ R24, R10, c[0x9][0x4], R24; # [179][000598]
//     	FFMA.FTZ R2, R5, R5, R2;         # [180][0005a0]
//     	FFMA.FTZ R2, R3, R3, R2;         # [181][0005a8]
//     	MUFU.RSQ R4, R2;                 # [182][0005b0]
//     	FMUL.FTZ R2, R29, R4;            # [183][0005b8]
//     	FMUL.FTZ R5, R5, R4;             # [184][0005c0]
//     	FFMA.FTZ R29, R12, c[0x9][0x4], R24; # [185][0005c8]
//     	FMUL.FTZ R4, R3, R4;             # [186][0005d0]
//     	FMUL.FTZ R3, R33, R1;            # [187][0005d8]
//     	FFMA.FTZ R3, R34, R28, R3;       # [188][0005e0]
//     	FFMA.FTZ R6, R6, c[0x9][0x4], R29; # [189][0005e8]
//     	FFMA.FTZ R10, R27, R0, R3;       # [190][0005f0]
//     	FFMA.FTZ R29, R11, c[0x9][0x4], R6; # [191][0005f8]
//     	FADD.FTZ R12, R10, R10;          # [192][000600]
//     	FFMA.FTZ R29, R35, c[0x9][0x4], R29; # [193][000608]
//     	FFMA.FMZ R3, R12, R33, -R1;      # [194][000610]
//     	FFMA.FMZ R24, R12, R34, -R28;    # [195][000618]
//     	FMUL.FTZ R1, R33, R2;            # [196][000620]
//     	FFMA.FMZ R25, R12, R27, -R0;     # [197][000628]
//     	FFMA.FTZ R28, R34, R5, R1;       # [198][000630]
//     	FMUL.FTZ R6, R2, R3;             # [199][000638]
//     	F2F.SAT R10, R10;                # [200][000640]
//     	IPA.PASS R1, a[0x36c];           # [201][000648] FIXED_FNC_TEXTURE_6_Q
//     	MUFU.RCP R30, R1;                # [202][000650]
//     	FFMA.FTZ R5, R5, R24, R6;        # [203][000658]
//     	FFMA.FTZ R6, R8, c[0x9][0x4], R29; # [204][000660]
//     	IPA R1, a[0x364], R30;           # [205][000668] FIXED_FNC_TEXTURE_6_T
//     	FFMA.FTZ R8, R27, R4, R28;       # [206][000670]
//     	IPA R0, a[0x360], R30;           # [207][000678] TEX6
//     	MOV32I R24, -0x3ec00000;         # [208][000680]
//     	TEX.NODEP.T R12, R0, 0x6, 0x6, 2D, 0x1; # [209][000688]
//     	IPA.SC R1, a[0x304], R18;        # [210][000690] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R0, a[0x300], R18;        # [211][000698] TEX0
//     	TEX.NODEP.T R11, R0, 0x1, 0x1, 2D, 0x8; # [212][0006a0]
//     	TEX.NODEP.P R0, R0, 0x0, 0x0, 2D; # [213][0006a8]
//     	FFMA.FTZ R27, R22, c[0x9][0x4], R6; # [214][0006b0]
//     	FFMA.FTZ R9, R9, c[0x9][0x4], R27; # [215][0006b8]
//     	FFMA.FTZ.SAT R22, R4, R25, R5;   # [216][0006c0]
//     	MOV32I R6, -0x80000000;          # [217][0006c8]
//     	FFMA.FTZ R13, R13, c[0x9][0x4], R9; # [218][0006d0]
//     	MOV32I R5, -0x80000000;          # [219][0006d8]
//     	FFMA.FMZ.SAT R9, R8, 24, R24;    # [220][0006e0]
//     	FFMA.FTZ R13, R7, c[0x9][0x4], R13; # [221][0006e8]
//     	FADD.FTZ R7, -R10, 1;            # [222][0006f0]
//     	MUFU.LG2 R24, |R22|;             # [223][0006f8]
//     	FFMA.FTZ R10, R14, c[0x9][0x4], R13; # [224][000700]
//     	F2F.SAT R22, R8;                 # [225][000708]
//     	FFMA.FTZ R14, R15, c[0x9][0x4], R10; # [226][000710]
//     	MOV32I R4, -0x80000000;          # [227][000718]
//     	FMUL.FMZ R24, R24, c[0x6][0x1474]; # [228][000720]
//     	FFMA.FTZ R15, R16, c[0x9][0x4], R14; # [229][000728]
//     	RRO.EX2 R24, R24;                # [230][000730]
//     	FFMA.FMZ R16, R7, 2, R26;        # [231][000738]
//     	FFMA.FTZ R15, R17, c[0x9][0x4], R15; # [232][000740]
//     	MUFU.EX2 R24, R24;               # [233][000748]
//     	FFMA.FTZ R7, R23, c[0x9][0x4], R15; # [234][000750]
//     	FADD.FTZ.SAT R8, -R8, R16;       # [235][000758]
//     	FMUL.FMZ R17, R24, c[0x6][0x1470]; # [236][000760]
//     	FMUL.FMZ R13, R22, c[0x6][0x13b0]; # [237][000768]
//     	FMUL.FMZ R14, R22, c[0x6][0x13b8]; # [238][000770]
//     	FMUL.FMZ R10, R22, c[0x6][0x13b4]; # [239][000778]
//     	FMUL.FMZ R16, R17, c[0x6][0x13c8]; # [240][000780]
//     	FMUL.FMZ R22, R17, c[0x6][0x13c4]; # [241][000788]
//     	FMUL.FMZ R17, R17, c[0x6][0x13c0]; # [242][000790]
//     	FADD.FTZ R12, -R12, 1;           # [243][000798]
//     	FMUL.FMZ R12, R7, R12;           # [244][0007a0]
//     	FMUL.FMZ R17, R11, R17;          # [245][0007a8]
//     	FFMA.FMZ R15, R13, R12, R21;     # [246][0007b0]
//     	FFMA.FMZ R10, R10, R12, R20;     # [247][0007b8]
//     	FFMA.FMZ R13, R14, R12, R19;     # [248][0007c0]
//     	IPA.SC R7, a[0x33c], R18;        # [249][0007c8] FIXED_FNC_TEXTURE_3_Q
//     	FMUL.FMZ R14, R11, R16;          # [250][0007d0]
//     	FFMA.FMZ R18, R0, -R0, R0;       # [251][0007d8]
//     	FMUL.FMZ R16, R11, R22;          # [252][0007e0]
//     	FMUL.FMZ R18, R9, R18;           # [253][0007e8]
//     	FMUL.FMZ R11, R12, R14;          # [254][0007f0]
//     	FMUL.FMZ R14, R12, R16;          # [255][0007f8]
//     	FMUL.FMZ R12, R12, R17;          # [256][000800]
//     	FFMA.FMZ R16, R2, -R2, R2;       # [257][000808]
//     	FFMA.FMZ R17, R1, -R1, R1;       # [258][000810]
//     	FMUL.FMZ R16, R9, R16;           # [259][000818]
//     	FMUL.FMZ R17, R9, R17;           # [260][000820]
//     	FFMA.FMZ R9, R1, R1, R17;        # [261][000828]
//     	FFMA.FMZ R1, R2, R2, R16;        # [262][000830]
//     	FFMA.FMZ R16, R0, R0, R18;       # [263][000838]
//     	FADD.FTZ R2, -R9, 0.25;          # [264][000840]
//     	FADD.FTZ R0, -R1, 0.5;           # [265][000848]
//     	FFMA.FTZ R16, R8, -R16, R16;     # [266][000850]
//     	FFMA.FTZ R9, R8, R2, R9;         # [267][000858]
//     	FFMA.FTZ R2, R8, R0, R1;         # [268][000860]
//     	FFMA.FMZ R0, R16, R15, R12;      # [269][000868]
//     	FFMA.FMZ R1, R9, R10, R14;       # [270][000870]
//     	FFMA.FMZ R2, R2, R13, R11;       # [271][000878]
//     	EXIT;                            # [272][000880]
//     	END
//     END_SECTION
// END_SHADER
// 
