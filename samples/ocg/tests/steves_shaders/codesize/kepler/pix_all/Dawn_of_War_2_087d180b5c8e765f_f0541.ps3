// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x087d180b5c8e765f
//         UCODE_HASH: 0xae40ad57717f006b
//         POOL: APP
//         VERSION: 20
//         # USES: 1145
//         // Time: 81.778ms [4.692 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//         TEXINFO: SHADOWMAP:0x30
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 21
//         USED_TEXTURE_BITS: 0xff
//         TEXTURE_SLOTS: 8
//         SAMPLER_SLOTS: 8
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//             KILLS_PIXELS
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x0006d462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x2aaa2a0a
//         0x00002a02      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c0, 0.25000000, 0.29899999, 0.58700001, 0.14399999 ; 0x3e800000 0x3e991687 0x3f1645a2 0x3e1374bc
        def c1, 0.66000003, -0.01000000, 0.01000000, 0.50000000 ; 0x3f28f5c3 0xbc23d70a 0x3c23d70a 0x3f000000
        def c2, 0.12500000, 2.88539004, 65504.00000000, 0.00000000 ; 0x3e000000 0x4038aa3b 0x477fe000 0x000000
        def c3, 2.00000000, -1.00000000, 1.00000000, 0.00000000 ; 0x40000000 0xbf800000 0x3f800000 0x000000
        dcl_texcoord0_pp v0.rg
        dcl_texcoord1_pp v1.rgb
        dcl_texcoord2_pp v2
        dcl_texcoord4_pp v3.rgb
        dcl_texcoord5_pp v4.r
        dcl_texcoord6_pp v5.rgb
        dcl_2d s0
        dcl_2d s1
        dcl_2d s2
        dcl_2d s3
        dcl_2d s4
        dcl_2d s5
        dcl_2d s6
        dcl_2d s7
        texld_pp r0, v0, s7
        mad_pp r1.x, r0.w, c3.x, c3.y
        add r1, r1.x, -v4.x
        texkill r1
        if b0
        if b1
        texld r1, v2, s5
        add r1, r1, -v2.z
        cmp r1, r1, c3.z, c3.w
        dp4_pp r1.x, r1, c0.x
        else
        mul r2, c3.zzzw, v2.xyzx
        texldl r2, r2, s5
        add r1.y, r2.x, -v2.z
        cmp r1.y, r1.y, c3.z, c3.w
        cmp r1.x, -c174.x, r1.y, r2.x
        endif
        if b2
        mov r2.xyz, c181
        mad_pp r2.xyz, v2, r2, c180
        texld r3, r2, s4
        add r3, -r2.z, r3
        cmp r3, r3, c3.z, c3.w
        dp4_pp r1.y, r3, c0.x
        mov r2.w, c3.w
        texldl r3, r2, s4
        add r1.z, -r2.z, r3.x
        cmp_pp r1.z, r1.z, c3.z, c3.w
        cmp_pp r1.z, -c174.x, r1.z, r3.x
        cmp_pp r1.y, -c173.x, r1.z, r1.y
        mov_sat r1.z, v2.w
        lrp_pp r2.x, r1.z, r1.x, r1.y
        mov_pp r1.x, r2.x
        endif
        if b3
        mov r1.yz, c3
        mad r2.x, v1.x, r1.z, -c182.x
        mad r2.y, v1.y, r1.y, c182.y
        texld_pp r2, r2, s6
        add_pp r1.y, -r2.w, c3.z
        min_pp r2.x, r1.y, r1.x
        mov_pp r1.x, r2.x
        mov_sat_pp r1.x, r1.x
        else
        mov_sat_pp r1.x, r1.x
        endif
        else
        mov r1.x, c3.z
        endif
        mad_pp r1.yzw, v5.xxzx, c3.xzzw, c3.xwwz
        dp3_pp r2.x, r1.yzw, c176
        dp3_pp r2.y, r1.yzw, c177
        texld_pp r3, r2, s3
        texld_pp r2, r2, s2
        dp3_sat_pp r1.y, r3, -c175
        mul_pp r1.yzw, r1.y, c179.xxyz
        mad_pp r1.yzw, r1, r1.x, r2.xxyz
        if b4
        add_pp r2.xyz, c165, -v5
        dp3_pp r2.w, r2, r2
        rcp_pp r3.w, r2.w
        rsq_pp r2.w, r2.w
        mul_pp r2.xyz, r2, r2.w
        mul_pp r4.xyz, r3.w, c169
        dp3_sat_pp r2.x, r3, r2
        mad_pp r1.yzw, r4.xxyz, r2.x, r1
        endif
        if b5
        add_pp r2.xyz, c166, -v5
        dp3_pp r2.w, r2, r2
        rcp_pp r3.w, r2.w
        rsq_pp r2.w, r2.w
        mul_pp r2.xyz, r2, r2.w
        mul_pp r4.xyz, r3.w, c170
        dp3_sat_pp r2.x, r3, r2
        mad_pp r1.yzw, r4.xxyz, r2.x, r1
        endif
        if b6
        add_pp r2.xyz, c167, -v5
        dp3_pp r2.w, r2, r2
        rcp_pp r3.w, r2.w
        rsq_pp r2.w, r2.w
        mul_pp r2.xyz, r2, r2.w
        mul_pp r4.xyz, r3.w, c171
        dp3_sat_pp r2.x, r3, r2
        mad_pp r1.yzw, r4.xxyz, r2.x, r1
        endif
        if b7
        add_pp r2.xyz, c168, -v5
        dp3_pp r2.w, r2, r2
        rcp_pp r3.w, r2.w
        rsq_pp r2.w, r2.w
        mul_pp r2.xyz, r2, r2.w
        mul_pp r4.xyz, r3.w, c172
        dp3_sat_pp r2.x, r3, r2
        mad_pp r1.yzw, r4.xxyz, r2.x, r1
        endif
        dp3_sat_pp r2.x, c175, v3
        dp3_pp r2.y, v3, r3
        add_pp r2.y, -r2_abs.y, c3.z
        mul r2.y, r2.y, r2.y
        mul r2.x, r2.x, r2.y
        mul r1.x, r1.x, r2.x
        mul_sat r2.xyz, r1.x, c179
        add_pp r1.xyz, r1.yzw, r2
        dp3_pp r1.w, r0, c0.yzw
        cmp_pp r0.xyz, -c188.x, r0, r1.w
        mov r2.x, c188.x
        cmp_pp r1.xyz, -r2.x, r1, c187
        mul_pp r0.xyz, r0, r1
        mul r1.xy, c3.wzzw, v1.z
        texld r1, r1, s1
        dp3_sat r2.x, r0, c1.x
        if b8
        add r2.yz, c1.y, v1.xxyw
        texld_pp r3, r2.yzzw, s0
        add r2.yz, c1.xzyw, v1.xxyw
        texld_pp r4, r2.yzzw, s0
        add r2.yz, c1.z, v1.xxyw
        texld_pp r5, r2.yzzw, s0
        add r2.yz, c1, v1.xxyw
        texld_pp r6, r2.yzzw, s0
        texld_pp r7, v1, s0
        add_pp r2.y, r3.w, r4.w
        add_pp r2.y, r5.w, r2.y
        add_pp r2.y, r6.w, r2.y
        mul_pp r2.z, r7.w, c1.w
        mad_pp r2.y, r2.y, c2.x, r2.z
        else
        mov r2.y, c3.w
        endif
        mad r2.xzw, r1.xyyz, r2.x, -r0.xyyz
        mad r2.xyz, r2.y, r2.xzw, r0
        dp3 r0.x, r0, c0.yzw
        dp3 r0.y, r1, c0.yzw
        add r0.x, -r0.x, r0.y
        mul r0.x, r0.x, c178.x
        mul r0.x, r0.x, c2.y
        exp r0.x, r0.x
        mul_sat r0.x, r1.w, r0.x
        lrp r3.xyz, r0.x, r1, r2
        dp3 r0.x, r3, c185
        mad r0.xyz, r3, c185.w, r0.x
        mad_sat r1.xyz, r0, c184, c184.w
        cmp r0.xyz, -c186.x, r0, r1
        cmp r0.xyz, -c183.x, r0, r3
        min_pp oC0.xyz, r0, c2.z
        mov_pp oC0.w, r0.w
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0x3e800000 0x3e991687
//         0x3f1645a2 0x3e1374bc 0x05000051 0xa00f0001
//         0x3f28f5c3 0xbc23d70a 0x3c23d70a 0x3f000000
//         0x05000051 0xa00f0002 0x3e000000 0x4038aa3b
//         0x477fe000 0x00000000 0x05000051 0xa00f0003
//         0x40000000 0xbf800000 0x3f800000 0x00000000
//         0x0200001f 0x80000005 0x90230000 0x0200001f
//         0x80010005 0x90270001 0x0200001f 0x80020005
//         0x902f0002 0x0200001f 0x80040005 0x90270003
//         0x0200001f 0x80050005 0x90210004 0x0200001f
//         0x80060005 0x90270005 0x0200001f 0x90000000
//         0xa00f0800 0x0200001f 0x90000000 0xa00f0801
//         0x0200001f 0x90000000 0xa00f0802 0x0200001f
//         0x90000000 0xa00f0803 0x0200001f 0x90000000
//         0xa00f0804 0x0200001f 0x90000000 0xa00f0805
//         0x0200001f 0x90000000 0xa00f0806 0x0200001f
//         0x90000000 0xa00f0807 0x03000042 0x802f0000
//         0x90e40000 0xa0e40807 0x04000004 0x80210001
//         0x80ff0000 0xa0000003 0xa0550003 0x03000002
//         0x800f0001 0x80000001 0x91000004 0x01000041
//         0x800f0001 0x01000028 0xe0e40800 0x01000028
//         0xe0e40801 0x03000042 0x800f0001 0x90e40002
//         0xa0e40805 0x03000002 0x800f0001 0x80e40001
//         0x91aa0002 0x04000058 0x800f0001 0x80e40001
//         0xa0aa0003 0xa0ff0003 0x03000009 0x80210001
//         0x80e40001 0xa0000000 0x0000002a 0x03000005
//         0x800f0002 0xa0ea0003 0x90240002 0x0300005f
//         0x800f0002 0x80e40002 0xa0e40805 0x03000002
//         0x80020001 0x80000002 0x91aa0002 0x04000058
//         0x80020001 0x80550001 0xa0aa0003 0xa0ff0003
//         0x04000058 0x80010001 0xa10000ae 0x80550001
//         0x80000002 0x0000002b 0x01000028 0xe0e40802
//         0x02000001 0x80070002 0xa0e400b5 0x04000004
//         0x80270002 0x90e40002 0x80e40002 0xa0e400b4
//         0x03000042 0x800f0003 0x80e40002 0xa0e40804
//         0x03000002 0x800f0003 0x81aa0002 0x80e40003
//         0x04000058 0x800f0003 0x80e40003 0xa0aa0003
//         0xa0ff0003 0x03000009 0x80220001 0x80e40003
//         0xa0000000 0x02000001 0x80080002 0xa0ff0003
//         0x0300005f 0x800f0003 0x80e40002 0xa0e40804
//         0x03000002 0x80040001 0x81aa0002 0x80000003
//         0x04000058 0x80240001 0x80aa0001 0xa0aa0003
//         0xa0ff0003 0x04000058 0x80240001 0xa10000ae
//         0x80aa0001 0x80000003 0x04000058 0x80220001
//         0xa10000ad 0x80aa0001 0x80550001 0x02000001
//         0x80140001 0x90ff0002 0x04000012 0x80210002
//         0x80aa0001 0x80000001 0x80550001 0x02000001
//         0x80210001 0x80000002 0x0000002b 0x01000028
//         0xe0e40803 0x02000001 0x80060001 0xa0e40003
//         0x04000004 0x80010002 0x90000001 0x80aa0001
//         0xa10000b6 0x04000004 0x80020002 0x90550001
//         0x80550001 0xa05500b6 0x03000042 0x802f0002
//         0x80e40002 0xa0e40806 0x03000002 0x80220001
//         0x81ff0002 0xa0aa0003 0x0300000a 0x80210002
//         0x80550001 0x80000001 0x02000001 0x80210001
//         0x80000002 0x02000001 0x80310001 0x80000001
//         0x0000002a 0x02000001 0x80310001 0x80000001
//         0x0000002b 0x0000002a 0x02000001 0x80010001
//         0xa0aa0003 0x0000002b 0x04000004 0x802e0001
//         0x90200005 0xa0e80003 0xa0bc0003 0x03000008
//         0x80210002 0x80f90001 0xa0e400b0 0x03000008
//         0x80220002 0x80f90001 0xa0e400b1 0x03000042
//         0x802f0003 0x80e40002 0xa0e40803 0x03000042
//         0x802f0002 0x80e40002 0xa0e40802 0x03000008
//         0x80320001 0x80e40003 0xa1e400af 0x03000005
//         0x802e0001 0x80550001 0xa09000b3 0x04000004
//         0x802e0001 0x80e40001 0x80000001 0x80900002
//         0x01000028 0xe0e40804 0x03000002 0x80270002
//         0xa0e400a5 0x91e40005 0x03000008 0x80280002
//         0x80e40002 0x80e40002 0x02000006 0x80280003
//         0x80ff0002 0x02000007 0x80280002 0x80ff0002
//         0x03000005 0x80270002 0x80e40002 0x80ff0002
//         0x03000005 0x80270004 0x80ff0003 0xa0e400a9
//         0x03000008 0x80310002 0x80e40003 0x80e40002
//         0x04000004 0x802e0001 0x80900004 0x80000002
//         0x80e40001 0x0000002b 0x01000028 0xe0e40805
//         0x03000002 0x80270002 0xa0e400a6 0x91e40005
//         0x03000008 0x80280002 0x80e40002 0x80e40002
//         0x02000006 0x80280003 0x80ff0002 0x02000007
//         0x80280002 0x80ff0002 0x03000005 0x80270002
//         0x80e40002 0x80ff0002 0x03000005 0x80270004
//         0x80ff0003 0xa0e400aa 0x03000008 0x80310002
//         0x80e40003 0x80e40002 0x04000004 0x802e0001
//         0x80900004 0x80000002 0x80e40001 0x0000002b
//         0x01000028 0xe0e40806 0x03000002 0x80270002
//         0xa0e400a7 0x91e40005 0x03000008 0x80280002
//         0x80e40002 0x80e40002 0x02000006 0x80280003
//         0x80ff0002 0x02000007 0x80280002 0x80ff0002
//         0x03000005 0x80270002 0x80e40002 0x80ff0002
//         0x03000005 0x80270004 0x80ff0003 0xa0e400ab
//         0x03000008 0x80310002 0x80e40003 0x80e40002
//         0x04000004 0x802e0001 0x80900004 0x80000002
//         0x80e40001 0x0000002b 0x01000028 0xe0e40807
//         0x03000002 0x80270002 0xa0e400a8 0x91e40005
//         0x03000008 0x80280002 0x80e40002 0x80e40002
//         0x02000006 0x80280003 0x80ff0002 0x02000007
//         0x80280002 0x80ff0002 0x03000005 0x80270002
//         0x80e40002 0x80ff0002 0x03000005 0x80270004
//         0x80ff0003 0xa0e400ac 0x03000008 0x80310002
//         0x80e40003 0x80e40002 0x04000004 0x802e0001
//         0x80900004 0x80000002 0x80e40001 0x0000002b
//         0x03000008 0x80310002 0xa0e400af 0x90e40003
//         0x03000008 0x80220002 0x90e40003 0x80e40003
//         0x03000002 0x80220002 0x8c550002 0xa0aa0003
//         0x03000005 0x80020002 0x80550002 0x80550002
//         0x03000005 0x80010002 0x80000002 0x80550002
//         0x03000005 0x80010001 0x80000001 0x80000002
//         0x03000005 0x80170002 0x80000001 0xa0e400b3
//         0x03000002 0x80270001 0x80f90001 0x80e40002
//         0x03000008 0x80280001 0x80e40000 0xa0f90000
//         0x04000058 0x80270000 0xa10000bc 0x80e40000
//         0x80ff0001 0x02000001 0x80010002 0xa00000bc
//         0x04000058 0x80270001 0x81000002 0x80e40001
//         0xa0e400bb 0x03000005 0x80270000 0x80e40000
//         0x80e40001 0x03000005 0x80030001 0xa0eb0003
//         0x90aa0001 0x03000042 0x800f0001 0x80e40001
//         0xa0e40801 0x03000008 0x80110002 0x80e40000
//         0xa0000001 0x01000028 0xe0e40808 0x03000002
//         0x80060002 0xa0550001 0x90d00001 0x03000042
//         0x802f0003 0x80e90002 0xa0e40800 0x03000002
//         0x80060002 0xa0d80001 0x90d00001 0x03000042
//         0x802f0004 0x80e90002 0xa0e40800 0x03000002
//         0x80060002 0xa0aa0001 0x90d00001 0x03000042
//         0x802f0005 0x80e90002 0xa0e40800 0x03000002
//         0x80060002 0xa0e40001 0x90d00001 0x03000042
//         0x802f0006 0x80e90002 0xa0e40800 0x03000042
//         0x802f0007 0x90e40001 0xa0e40800 0x03000002
//         0x80220002 0x80ff0003 0x80ff0004 0x03000002
//         0x80220002 0x80ff0005 0x80550002 0x03000002
//         0x80220002 0x80ff0006 0x80550002 0x03000005
//         0x80240002 0x80ff0007 0xa0ff0001 0x04000004
//         0x80220002 0x80550002 0xa0000002 0x80aa0002
//         0x0000002a 0x02000001 0x80020002 0xa0ff0003
//         0x0000002b 0x04000004 0x800d0002 0x80940001
//         0x80000002 0x81940000 0x04000004 0x80070002
//         0x80550002 0x80f80002 0x80e40000 0x03000008
//         0x80010000 0x80e40000 0xa0f90000 0x03000008
//         0x80020000 0x80e40001 0xa0f90000 0x03000002
//         0x80010000 0x81000000 0x80550000 0x03000005
//         0x80010000 0x80000000 0xa00000b2 0x03000005
//         0x80010000 0x80000000 0xa0550002 0x0200000e
//         0x80010000 0x80000000 0x03000005 0x80110000
//         0x80ff0001 0x80000000 0x04000012 0x80070003
//         0x80000000 0x80e40001 0x80e40002 0x03000008
//         0x80010000 0x80e40003 0xa0e400b9 0x04000004
//         0x80070000 0x80e40003 0xa0ff00b9 0x80000000
//         0x04000004 0x80170001 0x80e40000 0xa0e400b8
//         0xa0ff00b8 0x04000058 0x80070000 0xa10000ba
//         0x80e40000 0x80e40001 0x04000058 0x80070000
//         0xa10000b7 0x80e40000 0x80e40003 0x0300000a
//         0x80270800 0x80e40000 0xa0aa0002 0x02000001
//         0x80280800 0x80ff0000 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x40051cf5 // 2.07989240
//         COP_CONST[1]: 0x3fc3083f // 1.52368915
//         COP_CONST[2]: 0x3aaaaaab // 0.00130208
//         COP_CONST[3]: 0x3aa3d70a // 0.00125000
//         COP_CONST[4]: 0x3f49bb12 // 0.78801072
//         COP_CONST[5]: 0x3efbbeae // 0.49168915
//         COP_CONST[6]: 0xbf49bb12 // -0.78801072
//         COP_CONST[7]: 0xbefbbeae // -0.49168915
//         COP_CONST[8]: 0x3f28f5c3 // 0.66000003
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][942] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][946] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][950] = 0x3ebdb40f // 0.37051436
//         # USER FLOAT CONST: c[6][951] = 0xbf49bb12 // -0.78801072
//         # USER FLOAT CONST: c[6][952] = 0xbefbbeae // -0.49168915
//         # USER FLOAT CONST: c[6][954] = 0x3aaaaaab // 0.00130208
//         # USER FLOAT CONST: c[6][955] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][956] = 0x3f000000 // 0.50000000
//         # USER FLOAT CONST: c[6][958] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][959] = 0x3aa3d70a // 0.00125000
//         # USER FLOAT CONST: c[6][960] = 0x3f000000 // 0.50000000
//         # USER FLOAT CONST: c[6][962] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][966] = 0x3f878788 // 1.05882359
//         # USER FLOAT CONST: c[6][967] = 0x3fb03031 // 1.37647069
//         # USER FLOAT CONST: c[6][968] = 0x3fe66668 // 1.80000019
//         # USER FLOAT CONST: c[6][970] = 0xbe5031d0 // -0.20331502
//         # USER FLOAT CONST: c[6][971] = 0xbfbff400 // -1.49963379
//         # USER FLOAT CONST: c[6][972] = 0xb4800000 // -0.00000024
//         # USER FLOAT CONST: c[6][974] = 0x40051cf5 // 2.07989240
//         # USER FLOAT CONST: c[6][975] = 0x40200000 // 2.50000000
//         # USER FLOAT CONST: c[6][976] = 0x3fc3083f // 1.52368915
//         # USER FLOAT CONST: c[6][978] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][979] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][982] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][986] = 0x3f925e22 // 1.14349771
//         # USER FLOAT CONST: c[6][987] = 0x3f925e22 // 1.14349771
//         # USER FLOAT CONST: c[6][988] = 0x3f925e22 // 1.14349771
//         # USER FLOAT CONST: c[6][989] = 0x80000000 // 0.00000000
//         # USER FLOAT CONST: c[6][990] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][991] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][992] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][993] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][994] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][998] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][999] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][1000] = 0x3f800000 // 1.00000000
//         # USER FLOAT CONST: c[6][1002] = 0x00000000 // 0.00000000
//         # USER BOOL CONST: c[6][490] = true
//         # USER BOOL CONST: c[6][491] = false
//         # USER BOOL CONST: c[6][492] = true
//         # USER BOOL CONST: c[6][493] = true
//         # USER BOOL CONST: c[6][498] = true
//         ## USER CONST histogram
//         ##     c165.x -> c[6][910] = 9.17%@76.99362946 9.08%@39.70930481 9.08%@41.26871109 9.08%@71.43697357 9.08%@40.17601776 9.08%@62.65275955 9.08%@40.77796555
//         ##     c165.y -> c[6][911] = 9.17%@321.04757690 9.08%@320.34936523 9.08%@319.53146362 9.08%@321.68966675 9.08%@321.70913696 9.08%@319.75939941 9.08%@320.12896729
//         ##     c165.z -> c[6][912] = 9.17%@-28.85923576 9.08%@-14.77218723 9.08%@-21.43142319 9.08%@-51.06083298 9.08%@-43.34924316 9.08%@-58.69501877 9.08%@-13.88369560
//         ##     c166.x -> c[6][914] = 18.17%@64.01760864 9.17%@79.36240387 9.08%@42.28942108 9.08%@40.77796555 9.08%@41.26871109 9.08%@-0.10818202 9.08%@39.70930481
//         ##     c166.y -> c[6][915] = 18.17%@319.53506470 9.17%@319.32803345 9.08%@319.82781982 9.08%@320.12896729 9.08%@319.53146362 9.08%@-0.09291772 9.08%@320.34936523
//         ##     c166.z -> c[6][916] = 18.17%@-58.95459366 9.17%@-27.22995949 9.08%@-20.50955200 9.08%@-13.88369560 9.08%@-21.43142319 9.08%@0.05439802 9.08%@-14.77218723
//         ##     c167.x -> c[6][918] = 18.17%@40.44128036 9.17%@80.48997498 9.08%@59.69074249 9.08%@62.65275955 9.08%@41.26871109 9.08%@-0.04410042 9.08%@42.28942108
//         ##     c167.y -> c[6][919] = 18.17%@321.92953491 9.17%@320.16186523 9.08%@319.47970581 9.08%@319.75939941 9.08%@319.53146362 9.08%@-0.18233928 9.08%@319.82781982
//         ##     c167.z -> c[6][920] = 18.17%@-44.71345901 9.17%@-27.11354065 9.08%@-25.17326736 9.08%@-58.69501877 9.08%@-21.43142319 9.08%@0.15311791 9.08%@-20.50955200
//         ##     c168.x -> c[6][922] = 18.17%@40.17601776 18.17%@42.28942108 9.17%@76.25620270 9.08%@69.52093506 9.08%@0.31767514 9.08%@0.31780651 9.08%@41.26871109
//         ##     c168.y -> c[6][923] = 18.17%@321.70913696 18.17%@319.82781982 9.17%@321.96337891 9.08%@320.24234009 9.08%@-0.25140074 9.08%@-0.24223937 9.08%@319.53146362
//         ##     c168.z -> c[6][924] = 18.17%@-43.34924316 18.17%@-20.50955200 9.17%@-29.63318634 9.08%@-33.82015610 9.08%@-0.11471037 9.08%@0.01883004 9.08%@-21.43142319
//         ##     c169.x -> c[6][926] = 27.25%@0.79188031 9.17%@0.96252006 9.08%@0.00000000 9.08%@0.63001561 9.08%@0.43175426 9.08%@0.42089629 9.08%@0.79464388
//         ##     c169.y -> c[6][927] = 27.25%@0.61306864 9.17%@0.68400359 9.08%@0.00000000 9.08%@0.49171951 9.08%@-0.33408415 9.08%@-0.34557089 9.08%@0.53500777
//         ##     c169.z -> c[6][928] = 27.25%@0.38955402 9.17%@0.51607460 9.08%@0.00000000 9.08%@0.31244677 9.08%@-0.00119663 9.08%@0.03769323 9.08%@0.40912360
//         ##     c170.x -> c[6][930] = 27.25%@0.79188031 18.17%@0.79464388 18.17%@0.63001561 9.17%@0.44865599 9.08%@0.46774027 9.08%@0.47354418 9.08%@0.47678283
//         ##     c170.y -> c[6][931] = 27.25%@0.61306864 18.17%@0.53500777 18.17%@0.49171951 9.17%@0.32046854 9.08%@-0.27050820 9.08%@-0.26945040 9.08%@-0.26050696
//         ##     c170.z -> c[6][932] = 27.25%@0.38955402 18.17%@0.40912360 18.17%@0.31244677 9.17%@0.19914831 9.08%@-0.04970969 9.08%@-0.05108186 9.08%@-0.05366575
//         ##     c171.x -> c[6][934] = 27.25%@0.79188031 18.17%@0.79464388 9.17%@0.65718782 9.08%@0.63001561 9.08%@-0.07498231 9.08%@0.00344683 9.08%@0.61190069
//         ##     c171.y -> c[6][935] = 27.25%@0.61306864 18.17%@0.53500777 9.17%@0.43812522 9.08%@0.49171951 9.08%@-0.02511395 9.08%@-0.00554409 9.08%@0.46552449
//         ##     c171.z -> c[6][936] = 27.25%@0.38955402 18.17%@0.40912360 9.17%@0.30981714 9.08%@0.31244677 9.08%@0.01507025 9.08%@0.01432635 9.08%@0.37193966
//         ##     c172.x -> c[6][938] = 36.33%@0.00000000 27.25%@0.79464388 18.17%@0.79188031 9.17%@0.96252006 9.08%@0.63001561
//         ##     c172.y -> c[6][939] = 27.25%@0.53500777 18.17%@0.61306864 9.17%@0.68400359 9.08%@985404.00000000 9.08%@985246.50000000 9.08%@985323.50000000 9.08%@0.49171951
//         ##     c172.z -> c[6][940] = 36.33%@4827.08203125 27.25%@0.40912360 18.17%@0.38955402 9.17%@0.51607460 9.08%@0.31244677
//         ##    ~c173.x -> c[6][942] = 100.00%@0.00000000
//         ##    ~c174.x -> c[6][946] = 100.00%@1.00000000
//         ##    ~c175.x -> c[6][950] = 100.00%@0.37051436
//         ##    ~c175.y -> c[6][951] = 100.00%@-0.78801072
//         ##    ~c175.z -> c[6][952] = 100.00%@-0.49168915
//         ##    ~c176.x -> c[6][954] = 100.00%@0.00130208
//         ##    ~c176.y -> c[6][955] = 100.00%@0.00000000
//         ##    ~c176.z -> c[6][956] = 100.00%@0.50000000
//         ##    ~c177.x -> c[6][958] = 100.00%@0.00000000
//         ##    ~c177.y -> c[6][959] = 100.00%@0.00125000
//         ##    ~c177.z -> c[6][960] = 100.00%@0.50000000
//         ##    ~c178.x -> c[6][962] = 100.00%@0.00000000
//         ##    ~c179.x -> c[6][966] = 100.00%@1.05882359
//         ##    ~c179.y -> c[6][967] = 100.00%@1.37647069
//         ##    ~c179.z -> c[6][968] = 100.00%@1.80000019
//         ##    ~c180.x -> c[6][970] = 100.00%@-0.20331502
//         ##    ~c180.y -> c[6][971] = 100.00%@-1.49963379
//         ##    ~c180.z -> c[6][972] = 100.00%@-0.00000024
//         ##    ~c181.x -> c[6][974] = 100.00%@2.07989240
//         ##    ~c181.y -> c[6][975] = 100.00%@2.50000000
//         ##    ~c181.z -> c[6][976] = 100.00%@1.52368915
//         ##    ~c182.x -> c[6][978] = 100.00%@0.00000000
//         ##    ~c182.y -> c[6][979] = 100.00%@0.00000000
//         ##    ~c183.x -> c[6][982] = 100.00%@1.00000000
//         ##    ~c184.x -> c[6][986] = 100.00%@1.14349771
//         ##    ~c184.y -> c[6][987] = 100.00%@1.14349771
//         ##    ~c184.z -> c[6][988] = 100.00%@1.14349771
//         ##    ~c184.w -> c[6][989] = 100.00%@0.00000000
//         ##    ~c185.x -> c[6][990] = 100.00%@0.00000000
//         ##    ~c185.y -> c[6][991] = 100.00%@0.00000000
//         ##    ~c185.z -> c[6][992] = 100.00%@0.00000000
//         ##    ~c185.w -> c[6][993] = 100.00%@1.00000000
//         ##    ~c186.x -> c[6][994] = 100.00%@1.00000000
//         ##    ~c187.x -> c[6][998] = 100.00%@1.00000000
//         ##    ~c187.y -> c[6][999] = 100.00%@1.00000000
//         ##    ~c187.z -> c[6][1000] = 100.00%@1.00000000
//         ##    ~c188.x -> c[6][1002] = 100.00%@0.00000000
//         ##    ~b0 -> c[6][490] = 100.00%@1
//         ##    ~b1 -> c[6][491] = 100.00%@0
//         ##    ~b2 -> c[6][492] = 100.00%@1
//         ##    ~b3 -> c[6][493] = 100.00%@1
//         ##     b4 -> c[6][494] = 81.83%@1 18.17%@0
//         ##     b5 -> c[6][495] = 72.75%@1 27.25%@0
//         ##     b6 -> c[6][496] = 72.75%@1 27.25%@0
//         ##     b7 -> c[6][497] = 63.67%@1 36.33%@0
//         ##    ~b8 -> c[6][498] = 100.00%@1
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,3360x1050,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,208x224x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000479
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,32x32x0,1/0,A8R8G8B8,1,0,0), 0x8dcd8a20,0x00000479
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,768x800x0,1/0,A16B16G16R16,0,0,0), 0xd488f6c6,0x00000479
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,768x800x0,1/0,A8R8G8B8,0,0,0), 0xd7e9b144,0x00000479
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Linear,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000479
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/Linear,Border/Border/Border,0.00000000,2048x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000479
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,1,0,0), 0x7b5a6199,0x00000479
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,0.00000000,1024x512x0,11/0,DXT23_A8R8G8B8,1,0,0), 0x8d4e07e7,0x00000479
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 7 when no alpha is required.
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "ATTR02")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 1 : 
//          (attr 1 6 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texh r5, v1.xyzz, #7, #7, 2D
//         madh r6.x, r5.w, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).x, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).y
//         addr r6, r6.x, -v5.x
//         movr.c rc, r6
//         kil LT
//         ife , c[6][490], l0, l1
//         ife FL, c[6][491], l2, l3
//         texr r6, v3.xyzz, #5, #5, SHADOW2D
//         addr r6, r6, -v3.z
//         cmpr r6, r6, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).z, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).w
//         dp4h r6.x, r6, constant(0.25000000, 0.29899999, 0.58700001, 0.14399999).x
//         l2:
//         mulr r7, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).zzzw, v3.xyzx
//         txlr r7, r7.xyzz, r7.w, #5, #5, SHADOW2D
//         addr r6.y, r7.x, -v3.z
//         cmpr r6.y, r6.y, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).z, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).w
//         movr r45, -c[6][424].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r6.x, r45, r6.y, r7.x
//         l3:
//         ife , c[6][492], l4, l5
//         movr r45, c[6][431]
//         movr r45.x, constant(2.07989240, 2.07989240, 2.07989240, 2.07989240).x
//         movr r45.y, constant(2.50000000, 2.50000000, 2.50000000, 2.50000000).x
//         movr r45.z, constant(1.52368915, 1.52368915, 1.52368915, 1.52368915).x
//         movr r7.xyz, r45
//         movr r43, c[6][430]
//         movr r43.x, constant(-0.20331502, -0.20331502, -0.20331502, -0.20331502).x
//         movr r43.y, constant(-1.49963379, -1.49963379, -1.49963379, -1.49963379).x
//         movr r43.z, constant(-0.00000024, -0.00000024, -0.00000024, -0.00000024).x
//         madh r7.xyz, v3, r7, r43
//         texr r8, r7.xyzz, #4, #4, SHADOW2D
//         addr r8, -r7.z, r8
//         cmpr r8, r8, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).z, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).w
//         dp4h r6.y, r8, constant(0.25000000, 0.29899999, 0.58700001, 0.14399999).x
//         movr r7.w, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).w
//         txlr r8, r7.xyzz, r7.w, #4, #4, SHADOW2D
//         addr r6.z, -r7.z, r8.x
//         cmph r6.z, r6.z, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).z, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).w
//         movr r45, -c[6][424].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmph r6.z, r45, r6.z, r8.x
//         movr r45, -c[6][423].x
//         movr r45.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         cmph r6.y, r45, r6.z, r6.y
//         movr_sat r6.z, v3.w
//         lrph r7.x, r6.z, r6.x, r6.y
//         movh r6.x, r7.x
//         l4:
//         l5:
//         ife , c[6][493], l6, l7
//         movr r6.yz, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000)
//         movr r43, -c[6][432].x
//         movr r43.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r7.x, v2.x, r6.z, r43
//         movr r43, c[6][432].y
//         movr r43.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r7.y, v2.y, r6.y, r43
//         texh r7, r7.xyzz, #6, #6, 2D
//         addh r6.y, -r7.w, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).z
//         minh r7.x, r6.y, r6.x
//         movh r6.x, r7.x
//         movh_sat r6.x, r6.x
//         l6:
//         movh_sat r6.x, r6.x
//         l7:
//         l0:
//         movr r6.x, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).z
//         l1:
//         madh r6.yzw, v6.xxzx, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).xzzw, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).xwwz
//         movr r44, c[6][426]
//         movr r44.x, constant(0.00130208, 0.00130208, 0.00130208, 0.00130208).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         dp3h r7.x, r6.yzww, r44
//         movr r44, c[6][427]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00125000, 0.00125000, 0.00125000, 0.00125000).x
//         movr r44.z, constant(0.50000000, 0.50000000, 0.50000000, 0.50000000).x
//         dp3h r7.y, r6.yzww, r44
//         texh r8, r7.xyzz, #3, #3, 2D
//         texh r7, r7.xyzz, #2, #2, 2D
//         movr r44, -c[6][425]
//         movr r44.x, -constant(0.37051436, 0.37051436, 0.37051436, 0.37051436).x
//         movr r44.y, -constant(-0.78801072, -0.78801072, -0.78801072, -0.78801072).x
//         movr r44.z, -constant(-0.49168915, -0.49168915, -0.49168915, -0.49168915).x
//         dp3h_sat r6.y, r8, r44
//         movr r44, c[6][429].xxyz
//         movr r44.x, constant(1.05882359, 1.05882359, 1.05882359, 1.05882359).x
//         movr r44.y, constant(1.05882359, 1.05882359, 1.05882359, 1.05882359).x
//         movr r44.z, constant(1.37647069, 1.37647069, 1.37647069, 1.37647069).x
//         movr r44.w, constant(1.80000019, 1.80000019, 1.80000019, 1.80000019).x
//         mulh r6.yzw, r6.y, r44
//         madh r6.yzw, r6, r6.x, r7.xxyz
//         ife GT, c[6][494], l8, l9
//         addh r7.xyz, c[6][415], -v6
//         dp3h r7.w, r7, r7
//         rcph r8.w, r7.w
//         rsqh r7.w, |r7.w|
//         mulh r7.xyz, r7, r7.w
//         mulh r9.xyz, r8.w, c[6][419]
//         dp3h_sat r7.x, r8, r7
//         madh r6.yzw, r9.xxyz, r7.x, r6
//         l8:
//         l9:
//         ife GT, c[6][495], l10, l11
//         addh r7.xyz, c[6][416], -v6
//         dp3h r7.w, r7, r7
//         rcph r8.w, r7.w
//         rsqh r7.w, |r7.w|
//         mulh r7.xyz, r7, r7.w
//         mulh r9.xyz, r8.w, c[6][420]
//         dp3h_sat r7.x, r8, r7
//         madh r6.yzw, r9.xxyz, r7.x, r6
//         l10:
//         l11:
//         ife GT, c[6][496], l12, l13
//         addh r7.xyz, c[6][417], -v6
//         dp3h r7.w, r7, r7
//         rcph r8.w, r7.w
//         rsqh r7.w, |r7.w|
//         mulh r7.xyz, r7, r7.w
//         mulh r9.xyz, r8.w, c[6][421]
//         dp3h_sat r7.x, r8, r7
//         madh r6.yzw, r9.xxyz, r7.x, r6
//         l12:
//         l13:
//         ife GT, c[6][497], l14, l15
//         addh r7.xyz, c[6][418], -v6
//         dp3h r7.w, r7, r7
//         rcph r8.w, r7.w
//         rsqh r7.w, |r7.w|
//         mulh r7.xyz, r7, r7.w
//         mulh r9.xyz, r8.w, c[6][422]
//         dp3h_sat r7.x, r8, r7
//         madh r6.yzw, r9.xxyz, r7.x, r6
//         l14:
//         l15:
//         movr r45, c[6][425]
//         movr r45.x, constant(0.37051436, 0.37051436, 0.37051436, 0.37051436).x
//         movr r45.y, constant(-0.78801072, -0.78801072, -0.78801072, -0.78801072).x
//         movr r45.z, constant(-0.49168915, -0.49168915, -0.49168915, -0.49168915).x
//         dp3h_sat r7.x, r45, v4
//         dp3h r7.y, v4, r8
//         addh r7.y, -|r7.y|, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).z
//         mulr r7.y, r7.y, r7.y
//         mulr r7.x, r7.x, r7.y
//         mulr r6.x, r6.x, r7.x
//         movr r44, c[6][429]
//         movr r44.x, constant(1.05882359, 1.05882359, 1.05882359, 1.05882359).x
//         movr r44.y, constant(1.37647069, 1.37647069, 1.37647069, 1.37647069).x
//         movr r44.z, constant(1.80000019, 1.80000019, 1.80000019, 1.80000019).x
//         mulr_sat r7.xyz, r6.x, r44
//         addh r6.xyz, r6.yzww, r7
//         dp3h r6.w, r5, constant(0.25000000, 0.29899999, 0.58700001, 0.14399999).yzww
//         movr r45, -c[6][438].x
//         movr r45.x, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, -constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         cmph r5.xyz, r45, r5, r6.w
//         movr r45, c[6][438].x
//         movr r45.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r7.x, r45
//         movr r43, c[6][437]
//         movr r43.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r43.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmph r6.xyz, -r7.x, r6, r43
//         mulh r5.xyz, r5, r6
//         mulr r6.xy, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).wzzw, v2.z
//         texr r6, r6.xyzz, #1, #1, 2D
//         dp3r_sat r7.x, r5, constant(0.66000003, -0.01000000, 0.01000000, 0.50000000).x
//         ife , c[6][498], l16, l17
//         addr r7.yz, constant(0.66000003, -0.01000000, 0.01000000, 0.50000000).y, v2.xxyw
//         texh r8, r7.yzzz, #0, #0, 2D
//         addr r7.yz, constant(0.66000003, -0.01000000, 0.01000000, 0.50000000).xzyw, v2.xxyw
//         texh r9, r7.yzzz, #0, #0, 2D
//         addr r7.yz, constant(0.66000003, -0.01000000, 0.01000000, 0.50000000).z, v2.xxyw
//         texh r10, r7.yzzz, #0, #0, 2D
//         addr r7.yz, constant(0.66000003, -0.01000000, 0.01000000, 0.50000000), v2.xxyw
//         texh r11, r7.yzzz, #0, #0, 2D
//         texh r12, v2.xyzz, #0, #0, 2D
//         addh r7.y, r8.w, r9.w
//         addh r7.y, r10.w, r7.y
//         addh r7.y, r11.w, r7.y
//         mulh r7.z, r12.w, constant(0.66000003, -0.01000000, 0.01000000, 0.50000000).w
//         madh r7.y, r7.y, constant(0.12500000, 2.88539004, 65504.00000000, 0.00000000).x, r7.z
//         l16:
//         movr r7.y, constant(2.00000000, -1.00000000, 1.00000000, 0.00000000).w
//         l17:
//         madr r7.xzw, r6.xyyz, r7.x, -r5.xyyz
//         madr r7.xyz, r7.y, r7.xzww, r5
//         dp3r r5.x, r5, constant(0.25000000, 0.29899999, 0.58700001, 0.14399999).yzww
//         dp3r r5.y, r6, constant(0.25000000, 0.29899999, 0.58700001, 0.14399999).yzww
//         addr r5.x, -r5.x, r5.y
//         movr r44, c[6][428].x
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulr r5.x, r5.x, r44
//         mulr r5.x, r5.x, constant(0.12500000, 2.88539004, 65504.00000000, 0.00000000).y
//         ex2r r5.x, r5.x
//         mulr_sat r5.x, r6.w, r5.x
//         lrpr r8.xyz, r5.x, r6, r7
//         movr r44, c[6][435]
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         dp3r r5.x, r8, r44
//         movr r44, c[6][435].w
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madr r5.xyz, r8, r44, r5.x
//         movr r44, c[6][434]
//         movr r44.x, constant(1.14349771, 1.14349771, 1.14349771, 1.14349771).x
//         movr r44.y, constant(1.14349771, 1.14349771, 1.14349771, 1.14349771).x
//         movr r44.z, constant(1.14349771, 1.14349771, 1.14349771, 1.14349771).x
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43, c[6][434].w
//         movr r43.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r43.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr_sat r6.xyz, r5, r44, r43
//         movr r45, -c[6][436].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r5.xyz, r45, r5, r6
//         movr r45, -c[6][433].x
//         movr r45.x, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, -constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         cmpr r5.xyz, r45, r5, r8
//         minh r0.xyz, r5, constant(0.12500000, 2.88539004, 65504.00000000, 0.00000000).z
//         movh r0.w, r5.w
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R4, -0x40800000;          # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R7, R0;                 # [  2][000010]
//     	IPA.SC R1, a[0x304], R7;         # [  3][000018] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R0, a[0x300], R7;         # [  4][000020] TEX0
//     	TEX.NODEP.P R0, R0, 0x7, 0x7, 2D; # [  5][000028]
//     	IPA.SC R5, a[0x340], R7;         # [  6][000030] TEX4
//     	FFMA.FMZ R4, R3, 2, R4;          # [  7][000038]
//     	FSETP.LT.FTZ.AND P0, PT, -R5, -R4, PT; # [  8][000040]
//     	IPA.SC R11, a[0x328], R7;        # [  9][000048] FIXED_FNC_TEXTURE_2_R
//     	@P0 KIL;                         # [ 10][000050]
//     	MOV32I R5, -0x40400c00;          # [ 11][000058]
//     	IPA.SC R9, a[0x324], R7;         # [ 12][000060] FIXED_FNC_TEXTURE_2_T
//     	MOV32I R14, -0x41afce30;         # [ 13][000068]
//     	IPA.SC R8, a[0x320], R7;         # [ 14][000070] TEX2
//     	F2F.FTZ R4, R11;                 # [ 15][000078]
//     	MOV32I R13, -0x4b800000;         # [ 16][000080]
//     	IPA.SC R10, a[0x350], R7;        # [ 17][000088] TEX5
//     	FFMA.FMZ R5, R9, 2.5, R5;        # [ 18][000090]
//     	IPA.SC R6, a[0x358], R7;         # [ 19][000098] FIXED_FNC_TEXTURE_5_R
//     	TEX.LZ.DC.NODEP.T R12, R8, R4, 0x5, 0x5, 2D, 0x1; # [ 20][0000a0]
//     	FFMA.FMZ R4, R8, c[0x9][0x0], R14; # [ 21][0000a8]
//     	MOV32I R9, 0x3f000000;           # [ 22][0000b0]
//     	FFMA.FMZ R8, R11, c[0x9][0x4], R13; # [ 23][0000b8]
//     	I2I.U32.U32 RZ.CC, c[0x6][0x1ee0]; # [ 24][0000c0]
//     	IPA.SC R11, a[0x314], R7;        # [ 25][0000c8] FIXED_FNC_TEXTURE_1_T
//     	TEX.LZ.DC.NODEP.T R13, R4, R8, 0x4, 0x4, 2D, 0x1; # [ 26][0000d0]
//     	FFMA.FTZ R8, R10, c[0x9][0x8], R9; # [ 27][0000d8]
//     	F2F.FTZ R11, -R11;               # [ 28][0000e0]
//     	FFMA.FTZ R9, R6, c[0x9][0xc], R9; # [ 29][0000e8]
//     	IPA.SC R10, a[0x310], R7;        # [ 30][0000f0] TEX1
//     	TEX.NODEP.T R4, R8, 0x3, 0x3, 2D, 0x7; # [ 31][0000f8]
//     	TEX.NODEP.T R11, R10, 0x6, 0x6, 2D, 0x8; # [ 32][000100]
//     	TEX.NODEP.P R8, R8, 0x2, 0x2, 2D, 0x7; # [ 33][000108]
//     	IPA.SC R14, a[0x32c], R7;        # [ 34][000110] FIXED_FNC_TEXTURE_2_Q
//     	F2F.SAT R14, R14;                # [ 35][000118]
//     	FADD.FTZ R12, R12, -R13;         # [ 36][000120]
//     	FFMA.FTZ R13, R14, R12, R13;     # [ 37][000128]
//     	FMUL32I.FTZ R15, R4, 0xbebdb40f; # [ 38][000130]
//     	FFMA.FTZ R12, R5, c[0x9][0x10], R15; # [ 39][000138]
//     	FADD.FTZ R11, -R11, 1;           # [ 40][000140]
//     	FFMA.FTZ.SAT R12, R6, c[0x9][0x14], R12; # [ 41][000148]
//     	FMNMX.FTZ R11, R11, R13, PT;     # [ 42][000150]
//     	FMUL32I.FMZ R13, R12, 0x3fb03031; # [ 43][000158]
//     	F2F.SAT R14, R11;                # [ 44][000160]
//     	FMUL32I.FMZ R11, R12, 0x3fe66668; # [ 45][000168]
//     	FFMA.FMZ R16, R13, R14, R9;      # [ 46][000170]
//     	FMUL32I.FMZ R12, R12, 0x3f878788; # [ 47][000178]
//     	FFMA.FMZ R15, R11, R14, R10;     # [ 48][000180]
//     	FFMA.FMZ R17, R12, R14, R8;      # [ 49][000188]
//     	BRA CC.LEU, L0250;               # [ 50][000190]
//     	IPA.SC R8, a[0x350], R7;         # [ 51][000198] TEX5
//     	FADD.FTZ R8, -R8, c[0x6][0x19f0]; # [ 52][0001a0]
//     	IPA.SC R9, a[0x354], R7;         # [ 53][0001a8] FIXED_FNC_TEXTURE_5_T
//     	FMUL.FTZ R11, R8, R8;            # [ 54][0001b0]
//     	IPA.SC R12, a[0x358], R7;        # [ 55][0001b8] FIXED_FNC_TEXTURE_5_R
//     	FADD.FTZ R10, -R9, c[0x6][0x19f4]; # [ 56][0001c0]
//     	FADD.FTZ R9, -R12, c[0x6][0x19f8]; # [ 57][0001c8]
//     	FFMA.FTZ R11, R10, R10, R11;     # [ 58][0001d0]
//     	FFMA.FTZ R12, R9, R9, R11;       # [ 59][0001d8]
//     	MUFU.RSQ R11, |R12|;             # [ 60][0001e0]
//     	FMUL.FMZ R8, R8, R11;            # [ 61][0001e8]
//     	FMUL.FMZ R10, R10, R11;          # [ 62][0001f0]
//     	FMUL.FMZ R9, R9, R11;            # [ 63][0001f8]
//     	FMUL.FTZ R13, R4, R8;            # [ 64][000200]
//     	MUFU.RCP R8, R12;                # [ 65][000208]
//     	FFMA.FTZ R11, R5, R10, R13;      # [ 66][000210]
//     	FFMA.FTZ.SAT R11, R6, R9, R11;   # [ 67][000218]
//     	FMUL.FMZ R10, R8, c[0x6][0x1a34]; # [ 68][000220]
//     	FMUL.FMZ R9, R8, c[0x6][0x1a38]; # [ 69][000228]
//     	FFMA.FMZ R16, R10, R11, R16;     # [ 70][000230]
//     	FMUL.FMZ R8, R8, c[0x6][0x1a30]; # [ 71][000238]
//     	FFMA.FMZ R15, R9, R11, R15;      # [ 72][000240]
//     	FFMA.FMZ R17, R8, R11, R17;      # [ 73][000248]
//     L0250:
//     	I2I.U32.U32 RZ.CC, c[0x6][0x1ef0]; # [ 74][000250]
//     	BRA CC.LEU, L0318;               # [ 75][000258]
//     	IPA.SC R8, a[0x350], R7;         # [ 76][000260] TEX5
//     	FADD.FTZ R8, -R8, c[0x6][0x1a00]; # [ 77][000268]
//     	IPA.SC R9, a[0x354], R7;         # [ 78][000270] FIXED_FNC_TEXTURE_5_T
//     	IPA.SC R12, a[0x358], R7;        # [ 79][000278] FIXED_FNC_TEXTURE_5_R
//     	FMUL.FTZ R11, R8, R8;            # [ 80][000280]
//     	FADD.FTZ R10, -R9, c[0x6][0x1a04]; # [ 81][000288]
//     	FADD.FTZ R9, -R12, c[0x6][0x1a08]; # [ 82][000290]
//     	FFMA.FTZ R11, R10, R10, R11;     # [ 83][000298]
//     	FFMA.FTZ R12, R9, R9, R11;       # [ 84][0002a0]
//     	MUFU.RSQ R11, |R12|;             # [ 85][0002a8]
//     	FMUL.FMZ R8, R8, R11;            # [ 86][0002b0]
//     	FMUL.FMZ R10, R10, R11;          # [ 87][0002b8]
//     	FMUL.FMZ R9, R9, R11;            # [ 88][0002c0]
//     	FMUL.FTZ R13, R4, R8;            # [ 89][0002c8]
//     	MUFU.RCP R8, R12;                # [ 90][0002d0]
//     	FFMA.FTZ R11, R5, R10, R13;      # [ 91][0002d8]
//     	FFMA.FTZ.SAT R11, R6, R9, R11;   # [ 92][0002e0]
//     	FMUL.FMZ R10, R8, c[0x6][0x1a44]; # [ 93][0002e8]
//     	FMUL.FMZ R9, R8, c[0x6][0x1a48]; # [ 94][0002f0]
//     	FFMA.FMZ R16, R10, R11, R16;     # [ 95][0002f8]
//     	FMUL.FMZ R8, R8, c[0x6][0x1a40]; # [ 96][000300]
//     	FFMA.FMZ R15, R9, R11, R15;      # [ 97][000308]
//     	FFMA.FMZ R17, R8, R11, R17;      # [ 98][000310]
//     L0318:
//     	I2I.U32.U32 RZ.CC, c[0x6][0x1f00]; # [ 99][000318]
//     	BRA CC.LEU, L03e0;               # [100][000320]
//     	IPA.SC R8, a[0x350], R7;         # [101][000328] TEX5
//     	FADD.FTZ R8, -R8, c[0x6][0x1a10]; # [102][000330]
//     	IPA.SC R9, a[0x354], R7;         # [103][000338] FIXED_FNC_TEXTURE_5_T
//     	FMUL.FTZ R11, R8, R8;            # [104][000340]
//     	IPA.SC R12, a[0x358], R7;        # [105][000348] FIXED_FNC_TEXTURE_5_R
//     	FADD.FTZ R10, -R9, c[0x6][0x1a14]; # [106][000350]
//     	FADD.FTZ R9, -R12, c[0x6][0x1a18]; # [107][000358]
//     	FFMA.FTZ R11, R10, R10, R11;     # [108][000360]
//     	FFMA.FTZ R12, R9, R9, R11;       # [109][000368]
//     	MUFU.RSQ R11, |R12|;             # [110][000370]
//     	FMUL.FMZ R8, R8, R11;            # [111][000378]
//     	FMUL.FMZ R10, R10, R11;          # [112][000380]
//     	FMUL.FMZ R9, R9, R11;            # [113][000388]
//     	FMUL.FTZ R13, R4, R8;            # [114][000390]
//     	MUFU.RCP R8, R12;                # [115][000398]
//     	FFMA.FTZ R11, R5, R10, R13;      # [116][0003a0]
//     	FFMA.FTZ.SAT R11, R6, R9, R11;   # [117][0003a8]
//     	FMUL.FMZ R10, R8, c[0x6][0x1a54]; # [118][0003b0]
//     	FMUL.FMZ R9, R8, c[0x6][0x1a58]; # [119][0003b8]
//     	FMUL.FMZ R8, R8, c[0x6][0x1a50]; # [120][0003c0]
//     	FFMA.FMZ R16, R10, R11, R16;     # [121][0003c8]
//     	FFMA.FMZ R15, R9, R11, R15;      # [122][0003d0]
//     	FFMA.FMZ R17, R8, R11, R17;      # [123][0003d8]
//     L03e0:
//     	I2I.U32.U32 RZ.CC, c[0x6][0x1f10]; # [124][0003e0]
//     	BRA CC.LEU, L04a8;               # [125][0003e8]
//     	IPA.SC R8, a[0x350], R7;         # [126][0003f0] TEX5
//     	IPA.SC R9, a[0x354], R7;         # [127][0003f8] FIXED_FNC_TEXTURE_5_T
//     	FADD.FTZ R8, -R8, c[0x6][0x1a20]; # [128][000400]
//     	IPA.SC R12, a[0x358], R7;        # [129][000408] FIXED_FNC_TEXTURE_5_R
//     	FADD.FTZ R10, -R9, c[0x6][0x1a24]; # [130][000410]
//     	FMUL.FTZ R11, R8, R8;            # [131][000418]
//     	FFMA.FTZ R11, R10, R10, R11;     # [132][000420]
//     	FADD.FTZ R9, -R12, c[0x6][0x1a28]; # [133][000428]
//     	FFMA.FTZ R12, R9, R9, R11;       # [134][000430]
//     	MUFU.RSQ R11, |R12|;             # [135][000438]
//     	FMUL.FMZ R8, R8, R11;            # [136][000440]
//     	FMUL.FMZ R10, R10, R11;          # [137][000448]
//     	FMUL.FMZ R9, R9, R11;            # [138][000450]
//     	FMUL.FTZ R13, R4, R8;            # [139][000458]
//     	MUFU.RCP R8, R12;                # [140][000460]
//     	FFMA.FTZ R11, R5, R10, R13;      # [141][000468]
//     	FFMA.FTZ.SAT R11, R6, R9, R11;   # [142][000470]
//     	FMUL.FMZ R10, R8, c[0x6][0x1a64]; # [143][000478]
//     	FMUL.FMZ R9, R8, c[0x6][0x1a68]; # [144][000480]
//     	FFMA.FMZ R16, R10, R11, R16;     # [145][000488]
//     	FMUL.FMZ R8, R8, c[0x6][0x1a60]; # [146][000490]
//     	FFMA.FMZ R15, R9, R11, R15;      # [147][000498]
//     	FFMA.FMZ R17, R8, R11, R17;      # [148][0004a0]
//     L04a8:
//     	IPA.SC R9, a[0x314], R7;         # [149][0004a8] FIXED_FNC_TEXTURE_1_T
//     	FADD32I.FTZ R11, R9, -0.01;      # [150][0004b0]
//     	IPA.SC R8, a[0x310], R7;         # [151][0004b8] TEX1
//     	FADD32I.FTZ R10, R8, -0.01;      # [152][0004c0]
//     	IPA.SC R19, a[0x330], R7;        # [153][0004c8] TEX3
//     	FADD32I.FTZ R12, R8, 0.01;       # [154][0004d0]
//     	IPA.SC R20, a[0x334], R7;        # [155][0004d8] FIXED_FNC_TEXTURE_3_T
//     	MOV R13, R11;                    # [156][0004e0]
//     	TEX.NODEP.T R18, R10, 0x0, 0x0, 2D, 0x8; # [157][0004e8]
//     	FMUL.FTZ R4, R19, R4;            # [158][0004f0]
//     	TEX.NODEP.T R11, R12, 0x0, 0x0, 2D, 0x8; # [159][0004f8]
//     	FFMA.FTZ R13, R20, R5, R4;       # [160][000500]
//     	FMUL32I.FTZ R19, R19, 0x3ebdb40f; # [161][000508]
//     	FADD32I.FTZ R5, R9, 0.01;        # [162][000510]
//     	MOV R4, R12;                     # [163][000518]
//     	TEX.NODEP.T R12, R4, 0x0, 0x0, 2D, 0x8; # [164][000520]
//     	MOV R4, R10;                     # [165][000528]
//     	FFMA.FTZ R19, R20, c[0x9][0x18], R19; # [166][000530]
//     	TEX.NODEP.T R10, R4, 0x0, 0x0, 2D, 0x8; # [167][000538]
//     	MOV R4, RZ;                      # [168][000540]
//     	IPA.SC R20, a[0x338], R7;        # [169][000548] FIXED_FNC_TEXTURE_3_R
//     	IPA.SC R5, a[0x318], R7;         # [170][000550] FIXED_FNC_TEXTURE_1_R
//     	TEX.NODEP.T R8, R8, 0x0, 0x0, 2D, 0x8; # [171][000558]
//     	FFMA.FTZ R9, R20, R6, R13;       # [172][000560]
//     	FADD.FTZ R9, -|R9|, 1;           # [173][000568]
//     	TEX.NODEP.P R4, R4, 0x1, 0x1, 2D; # [174][000570]
//     	FFMA.FTZ.SAT R13, R20, c[0x9][0x1c], R19; # [175][000578]
//     	FMUL.FMZ R9, R9, R9;             # [176][000580]
//     	FMUL.FMZ R9, R13, R9;            # [177][000588]
//     	FMUL.FMZ R13, R14, R9;           # [178][000590]
//     	FMUL32I.FMZ.SAT R14, R13, 0x3f878788; # [179][000598]
//     	FMUL32I.FMZ.SAT R9, R13, 0x3fb03031; # [180][0005a0]
//     	FMUL32I.FMZ.SAT R13, R13, 0x3fe66668; # [181][0005a8]
//     	FADD.FTZ R14, R17, R14;          # [182][0005b0]
//     	FADD.FTZ R16, R16, R9;           # [183][0005b8]
//     	FMUL.FMZ R0, R0, R14;            # [184][0005c0]
//     	FADD.FTZ R9, R15, R13;           # [185][0005c8]
//     	FMUL.FMZ R1, R1, R16;            # [186][0005d0]
//     	FMUL.FMZ R2, R2, R9;             # [187][0005d8]
//     	FADD.FTZ R13, R18, R11;          # [188][0005e0]
//     	FMUL32I.FTZ R11, R0, 0.66;       # [189][0005e8]
//     	FADD.FTZ R12, R12, R13;          # [190][0005f0]
//     	FFMA.FTZ R9, R1, c[0x9][0x20], R11; # [191][0005f8]
//     	FADD.FTZ R10, R10, R12;          # [192][000600]
//     	FFMA.FTZ.SAT R11, R2, c[0x9][0x20], R9; # [193][000608]
//     	FMUL.FMZ R8, R8, 0.5;            # [194][000610]
//     	FFMA.FMZ R9, R5, R11, -R1;       # [195][000618]
//     	FFMA.FMZ R12, R10, 0.125, R8;    # [196][000620]
//     	F2F.FTZ.SAT R7, R7;              # [197][000628]
//     	FFMA.FMZ R8, R4, R11, -R0;       # [198][000630]
//     	FFMA.FMZ R10, R6, R11, -R2;      # [199][000638]
//     	FFMA.FMZ R0, R12, R8, R0;        # [200][000640]
//     	FFMA.FMZ R8, R12, R9, R1;        # [201][000648]
//     	FFMA.FMZ R9, R12, R10, R2;       # [202][000650]
//     	FADD.FTZ R1, R4, -R0;            # [203][000658]
//     	FADD.FTZ R2, R5, -R8;            # [204][000660]
//     	FADD.FTZ R4, R6, -R9;            # [205][000668]
//     	FFMA.FTZ R0, R7, R1, R0;         # [206][000670]
//     	FFMA.FTZ R1, R7, R2, R8;         # [207][000678]
//     	FFMA.FTZ R2, R7, R4, R9;         # [208][000680]
//     	FMNMX.FTZ R0, R0, 65504, PT;     # [209][000688]
//     	FMNMX.FTZ R1, R1, 65504, PT;     # [210][000690]
//     	FMNMX.FTZ R2, R2, 65504, PT;     # [211][000698]
//     	EXIT;                            # [212][0006a0]
//     	END
//     END_SECTION
// END_SHADER
// 
