// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x572476fbeb014856
//         UCODE_HASH: 0x1cf1f6a876046cf3
//         POOL: APP
//         VERSION: 20
//         # USES: 9257
//         // Time: 89.122ms [7.773 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 20
//         USED_TEXTURE_BITS: 0x1
//         TEXTURE_SLOTS: 1
//         SAMPLER_SLOTS: 1
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX01_Q              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX05_Q              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00025462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x2aaaaa0a
//         0x002aaa2a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_0
        def c0, -0.50000000, 1.00000000, 0.20000000, 0.50000000 ; 0xbf000000 0x3f800000 0x3e4ccccd 0x3f000000
        dcl_pp t0.rg
        dcl_pp t1
        dcl_pp t3.rgb
        dcl_pp t2
        dcl_pp t4.rgb
        dcl_pp t5
        dcl_pp t6.rgb
        dcl_2d s0
        rcp r0.w, t1.w
        mul_pp r0.xyz, r0.w, t1
        dp3_sat_pp r0.x, r0, r0
        rcp r0.w, t2.w
        mul_pp r1.xyz, r0.w, t2
        dp3_sat_pp r0.y, r1, r1
        rcp r0.w, t5.w
        mul_pp r1.xyz, r0.w, t5
        dp3_sat_pp r0.z, r1, r1
        add_pp r0.xyz, -r0, c0.y
        nrm_pp r1.xyz, t3
        texld_pp r2, t0, s0
        add r2.xyz, r2, c0.x
        add_pp r2.xyz, r2, r2
        nrm_pp r3.xyz, r2
        dp3_sat_pp r0.w, r3, r1
        log r1.x, r0.w
        nrm_pp r2.xyz, t4
        dp3_sat_pp r0.w, r3, r2
        log r1.y, r0.w
        nrm_pp r2.xyz, t6
        dp3_sat_pp r0.w, r3, r2
        log r1.z, r0.w
        mul r1.xyz, r1, c27.z
        exp r2.x, r1.x
        exp r2.y, r1.y
        exp r2.z, r1.z
        mul r1.xyz, r2.w, r2
        mul_pp r0.xyz, r0, r1
        nrm_pp r1.xyz, t1
        dp3_pp r1.x, r3, r1
        nrm_pp r2.xyz, t2
        dp3_pp r1.y, r3, r2
        nrm_pp r2.xyz, t5
        dp3_pp r1.z, r3, r2
        add_sat_pp r2.xyz, r1, c0.w
        add r1.xyz, -r1, c0.z
        mul_pp r2.xyz, r0, r2
        cmp_pp r0.xyz, r1, r2, r0
        mul r1, r0.y, c4
        mad r1, r0.x, c3, r1
        mad_sat_pp r0, r0.z, c5, r1
        mov_pp oC0, r0
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0xbf000000 0x3f800000
//         0x3e4ccccd 0x3f000000 0x0200001f 0x80000000
//         0xb0230000 0x0200001f 0x80000000 0xb06f0001
//         0x0200001f 0x80000000 0xb0670003 0x0200001f
//         0x80000000 0xb06f0002 0x0200001f 0x80000000
//         0xb0670004 0x0200001f 0x80000000 0xb06f0005
//         0x0200001f 0x80000000 0xb0670006 0x0200001f
//         0x90000000 0xa00f0800 0x02000006 0x80080000
//         0xb0ff0001 0x03000005 0x80270000 0x80ff0000
//         0xb0e40001 0x03000008 0x80310000 0x80e40000
//         0x80e40000 0x02000006 0x80080000 0xb0ff0002
//         0x03000005 0x80270001 0x80ff0000 0xb0e40002
//         0x03000008 0x80320000 0x80e40001 0x80e40001
//         0x02000006 0x80080000 0xb0ff0005 0x03000005
//         0x80270001 0x80ff0000 0xb0e40005 0x03000008
//         0x80340000 0x80e40001 0x80e40001 0x03000002
//         0x80270000 0x81e40000 0xa0550000 0x02000024
//         0x80270001 0xb0e40003 0x03000042 0x802f0002
//         0xb0e40000 0xa0e40800 0x03000002 0x80070002
//         0x80e40002 0xa0000000 0x03000002 0x80270002
//         0x80e40002 0x80e40002 0x02000024 0x80270003
//         0x80e40002 0x03000008 0x80380000 0x80e40003
//         0x80e40001 0x0200000f 0x80010001 0x80ff0000
//         0x02000024 0x80270002 0xb0e40004 0x03000008
//         0x80380000 0x80e40003 0x80e40002 0x0200000f
//         0x80020001 0x80ff0000 0x02000024 0x80270002
//         0xb0e40006 0x03000008 0x80380000 0x80e40003
//         0x80e40002 0x0200000f 0x80040001 0x80ff0000
//         0x03000005 0x80070001 0x80e40001 0xa0aa001b
//         0x0200000e 0x80010002 0x80000001 0x0200000e
//         0x80020002 0x80550001 0x0200000e 0x80040002
//         0x80aa0001 0x03000005 0x80070001 0x80ff0002
//         0x80e40002 0x03000005 0x80270000 0x80e40000
//         0x80e40001 0x02000024 0x80270001 0xb0e40001
//         0x03000008 0x80210001 0x80e40003 0x80e40001
//         0x02000024 0x80270002 0xb0e40002 0x03000008
//         0x80220001 0x80e40003 0x80e40002 0x02000024
//         0x80270002 0xb0e40005 0x03000008 0x80240001
//         0x80e40003 0x80e40002 0x03000002 0x80370002
//         0x80e40001 0xa0ff0000 0x03000002 0x80070001
//         0x81e40001 0xa0aa0000 0x03000005 0x80270002
//         0x80e40000 0x80e40002 0x04000058 0x80270000
//         0x80e40001 0x80e40002 0x80e40000 0x03000005
//         0x800f0001 0x80550000 0xa0e40004 0x04000004
//         0x800f0001 0x80000000 0xa0e40003 0x80e40001
//         0x04000004 0x803f0000 0x80aa0000 0xa0e40005
//         0x80e40001 0x02000001 0x802f0800 0x80e40000
//         0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][553] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][557] = 0x00000000 // 0.00000000
//         # USER FLOAT CONST: c[6][561] = 0x00000000 // 0.00000000
//         ## USER CONST histogram
//         ##     c3.x -> c[6][550] = 67.42%@1.07411766 26.96%@1.10000002 1.12%@0.99912104 1.12%@1.09488846 1.12%@1.09210896 1.12%@1.06641233 1.12%@0.75615768
//         ##     c3.y -> c[6][551] = 67.42%@1.08274508 26.96%@0.24588236 1.12%@0.22333294 1.12%@0.24473978 1.12%@0.24411848 1.12%@1.07497788 1.12%@0.76223120
//         ##     c3.z -> c[6][552] = 67.42%@0.78941176 26.96%@0.20274510 1.12%@0.18415172 1.12%@0.20180298 1.12%@0.20129068 1.12%@0.78374880 1.12%@0.55573036
//         ##    ~c3.w -> c[6][553] = 100.00%@0.00000000
//         ##     c4.x -> c[6][554] = 75.27%@1.07411766 19.11%@1.10000002 1.12%@0.99912104 1.12%@1.09488846 1.12%@1.09210896 1.12%@1.06641233 1.12%@0.75615768
//         ##     c4.y -> c[6][555] = 75.27%@1.08274508 19.11%@0.24588236 1.12%@0.22333294 1.12%@0.24473978 1.12%@0.24411848 1.12%@1.07497788 1.12%@0.76223120
//         ##     c4.z -> c[6][556] = 75.27%@0.78941176 19.11%@0.20274510 1.12%@0.18415172 1.12%@0.20180298 1.12%@0.20129068 1.12%@0.78374880 1.12%@0.55573036
//         ##    ~c4.w -> c[6][557] = 100.00%@0.00000000
//         ##     c5.x -> c[6][558] = 92.14%@1.07411766 2.25%@1.10000002 1.12%@0.97561232 1.12%@1.06912637 1.12%@1.09210896 1.12%@1.06641233 1.12%@0.77437832
//         ##     c5.y -> c[6][559] = 92.14%@1.08274508 2.25%@0.24588236 1.12%@0.98344848 1.12%@1.07771373 1.12%@0.24411848 1.12%@1.07497788 1.12%@0.17309634
//         ##     c5.z -> c[6][560] = 92.14%@0.78941176 2.25%@0.20274510 1.12%@0.71701624 1.12%@0.78574352 1.12%@0.20129068 1.12%@0.78374880 1.12%@0.14272858
//         ##    ~c5.w -> c[6][561] = 100.00%@0.00000000
//         ##     c27.z -> c[6][648] = 38.20%@100.00000000 19.10%@70.00000000 14.61%@50.00000000 7.86%@40.00000000 2.26%@90.00000000 1.12%@30.00000000 1.12%@10.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,64x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0xe1520b26,0x000000d1
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3b8f4fe8,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xcad0c8cc,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x7d3331b9,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7573d455,0x00000958
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x96657a9a,0x00000478
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x93db7359,0x00000548
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x0dad5648,0x00000618
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x8862a74d,0x000002d8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x562e4c0d,0x00000340
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xab847fb5,0x00000270
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x18 0 4 "COL1")
//         (0x18 0 4 "ATTR00")
//         (0x18 0 4 "TEX0")
//         (0x18 0 4 "TEX1")
//         (0x18 0 4 "TEX2")
//         (0x18 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         rcpr r5.w, v5.w
//         mulh r5.xyz, r5.w, v5
//         dp3h_sat r5.x, r5, r5
//         rcpr r5.w, v6.w
//         mulh r6.xyz, r5.w, v6
//         dp3h_sat r5.y, r6, r6
//         rcpr r5.w, v9.w
//         mulh r6.xyz, r5.w, v9
//         dp3h_sat r5.z, r6, r6
//         addh r5.xyz, -r5, constant(-0.50000000, 1.00000000, 0.20000000, 0.50000000).y
//         nrmh r6.xyz, v7
//         texh r7, v4.xyzz, #0, #0, 2D
//         addr r7.xyz, r7, constant(-0.50000000, 1.00000000, 0.20000000, 0.50000000).x
//         addh r7.xyz, r7, r7
//         nrmh r8.xyz, r7
//         dp3h_sat r5.w, r8, r6
//         lg2r r6.x, |r5.w|
//         nrmh r7.xyz, v8
//         dp3h_sat r5.w, r8, r7
//         lg2r r6.y, |r5.w|
//         nrmh r7.xyz, v10
//         dp3h_sat r5.w, r8, r7
//         lg2r r6.z, |r5.w|
//         mulr r6.xyz, r6, c[6][565].z
//         ex2r r7.x, r6.x
//         ex2r r7.y, r6.y
//         ex2r r7.z, r6.z
//         mulr r6.xyz, r7.w, r7
//         mulh r5.xyz, r5, r6
//         nrmh r6.xyz, v5
//         dp3h r6.x, r8, r6
//         nrmh r7.xyz, v6
//         dp3h r6.y, r8, r7
//         nrmh r7.xyz, v9
//         dp3h r6.z, r8, r7
//         addh_sat r7.xyz, r6, constant(-0.50000000, 1.00000000, 0.20000000, 0.50000000).w
//         addr r6.xyz, -r6, constant(-0.50000000, 1.00000000, 0.20000000, 0.50000000).z
//         mulh r7.xyz, r5, r7
//         cmph r5.xyz, r6, r7, r5
//         movr r44, c[6][542]
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulr r6, r5.y, r44
//         movr r44, c[6][541]
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madr r6, r5.x, r44, r6
//         movr r44, c[6][543]
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         madh_sat r5, r5.z, r44, r6
//         movh r0, r5
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS.CENTROID R0, a[0x7c];   # [  0][000000] POSITION_W
//     	MUFU.RCP R1, R0;                 # [  1][000008]
//     	IPA.SC.CENTROID R3, a[0x304], R1; # [  2][000010] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC.CENTROID R2, a[0x300], R1; # [  3][000018] TEX0
//     	TEX.NODEP.T R4, R2, 0x0, 0x0, 2D; # [  4][000020]
//     	IPA.SC.CENTROID R0, a[0x31c], R1; # [  5][000028] FIXED_FNC_TEXTURE_1_Q
//     	IPA.SC.CENTROID R11, a[0x32c], R1; # [  6][000030] FIXED_FNC_TEXTURE_2_Q
//     	IPA.SC.CENTROID R2, a[0x310], R1; # [  7][000038] TEX1
//     	IPA.SC.CENTROID R12, a[0x320], R1; # [  8][000040] TEX2
//     	IPA.SC.CENTROID R3, a[0x314], R1; # [  9][000048] FIXED_FNC_TEXTURE_1_T
//     	IPA.SC.CENTROID R9, a[0x330], R1; # [ 10][000050] TEX3
//     	MUFU.RCP R0, R0;                 # [ 11][000058]
//     	IPA.SC.CENTROID R13, a[0x324], R1; # [ 12][000060] FIXED_FNC_TEXTURE_2_T
//     	MUFU.RCP R16, R11;               # [ 13][000068]
//     	FMUL.FMZ R11, R0, R2;            # [ 14][000070]
//     	IPA.SC.CENTROID R17, a[0x318], R1; # [ 15][000078] FIXED_FNC_TEXTURE_1_R
//     	IPA.SC.CENTROID R10, a[0x334], R1; # [ 16][000080] FIXED_FNC_TEXTURE_3_T
//     	FMUL.FMZ R15, R16, R12;          # [ 17][000088]
//     	FMUL.FTZ R19, R11, R11;          # [ 18][000090]
//     	FMUL.FMZ R14, R0, R3;            # [ 19][000098]
//     	FMUL.FTZ R11, R9, R9;            # [ 20][0000a0]
//     	IPA.SC.CENTROID R8, a[0x338], R1; # [ 21][0000a8] FIXED_FNC_TEXTURE_3_R
//     	FMUL.FMZ R18, R16, R13;          # [ 22][0000b0]
//     	FMUL.FTZ R15, R15, R15;          # [ 23][0000b8]
//     	FFMA.FTZ R14, R14, R14, R19;     # [ 24][0000c0]
//     	FMUL.FMZ R0, R0, R17;            # [ 25][0000c8]
//     	FFMA.FTZ R11, R10, R10, R11;     # [ 26][0000d0]
//     	FFMA.FTZ R15, R18, R18, R15;     # [ 27][0000d8]
//     	FMUL.FTZ R18, R2, R2;            # [ 28][0000e0]
//     	FFMA.FTZ.SAT R0, R0, R0, R14;    # [ 29][0000e8]
//     	FFMA.FTZ R11, R8, R8, R11;       # [ 30][0000f0]
//     	IPA.SC.CENTROID R14, a[0x328], R1; # [ 31][0000f8] FIXED_FNC_TEXTURE_2_R
//     	FFMA.FTZ R18, R3, R3, R18;       # [ 32][000100]
//     	MUFU.RSQ R11, R11;               # [ 33][000108]
//     	FADD.FTZ R0, -R0, 1;             # [ 34][000110]
//     	FFMA.FTZ R1, R17, R17, R18;      # [ 35][000118]
//     	FMUL.FTZ R9, R9, R11;            # [ 36][000120]
//     	FMUL.FTZ R10, R10, R11;          # [ 37][000128]
//     	FMUL.FMZ R16, R16, R14;          # [ 38][000130]
//     	FMUL.FTZ R11, R8, R11;           # [ 39][000138]
//     	MUFU.RSQ R8, R1;                 # [ 40][000140]
//     	FFMA.FTZ.SAT R15, R16, R16, R15; # [ 41][000148]
//     	FMUL.FTZ R16, R12, R12;          # [ 42][000150]
//     	FMUL.FTZ R2, R2, R8;             # [ 43][000158]
//     	FMUL.FTZ R3, R3, R8;             # [ 44][000160]
//     	FMUL.FTZ R8, R17, R8;            # [ 45][000168]
//     	FFMA.FTZ R17, R13, R13, R16;     # [ 46][000170]
//     	IPA.PASS R1, a[0x7c];            # [ 47][000178] POSITION_W
//     	FFMA.FTZ R19, R14, R14, R17;     # [ 48][000180]
//     	MUFU.RCP R1, R1;                 # [ 49][000188]
//     	FADD.FTZ R4, R4, -0.5;           # [ 50][000190]
//     	FADD.FTZ R5, R5, -0.5;           # [ 51][000198]
//     	FADD.FTZ R18, R6, -0.5;          # [ 52][0001a0]
//     	FADD.FTZ R4, R4, R4;             # [ 53][0001a8]
//     	FADD.FTZ R16, R5, R5;            # [ 54][0001b0]
//     	FADD.FTZ R5, R18, R18;           # [ 55][0001b8]
//     	FMUL.FTZ R6, R4, R4;             # [ 56][0001c0]
//     	IPA.SC R18, a[0x340], R1;        # [ 57][0001c8] TEX4
//     	FFMA.FTZ R17, R16, R16, R6;      # [ 58][0001d0]
//     	MUFU.RSQ R6, R19;                # [ 59][0001d8]
//     	IPA.SC R19, a[0x348], R1;        # [ 60][0001e0] FIXED_FNC_TEXTURE_4_R
//     	FFMA.FTZ R17, R5, R5, R17;       # [ 61][0001e8]
//     	FMUL.FTZ R12, R12, R6;           # [ 62][0001f0]
//     	FMUL.FTZ R13, R13, R6;           # [ 63][0001f8]
//     	MUFU.RSQ R17, R17;               # [ 64][000200]
//     	FMUL.FTZ R6, R14, R6;            # [ 65][000208]
//     	IPA.SC R14, a[0x344], R1;        # [ 66][000210] FIXED_FNC_TEXTURE_4_T
//     	FMUL.FTZ R4, R4, R17;            # [ 67][000218]
//     	FMUL.FTZ R16, R16, R17;          # [ 68][000220]
//     	FMUL.FTZ R5, R5, R17;            # [ 69][000228]
//     	FMUL.FTZ R17, R18, R18;          # [ 70][000230]
//     	FMUL.FTZ R9, R4, R9;             # [ 71][000238]
//     	FMUL.FTZ R12, R4, R12;           # [ 72][000240]
//     	FFMA.FTZ R17, R14, R14, R17;     # [ 73][000248]
//     	FFMA.FTZ R9, R16, R10, R9;       # [ 74][000250]
//     	FMUL.FTZ R10, R4, R2;            # [ 75][000258]
//     	FFMA.FTZ R17, R19, R19, R17;     # [ 76][000260]
//     	IPA.SC R2, a[0x360], R1;         # [ 77][000268] TEX6
//     	FFMA.FTZ R10, R16, R3, R10;      # [ 78][000270]
//     	MUFU.RSQ R17, R17;               # [ 79][000278]
//     	IPA.SC R3, a[0x364], R1;         # [ 80][000280] FIXED_FNC_TEXTURE_6_T
//     	FFMA.FTZ R13, R16, R13, R12;     # [ 81][000288]
//     	FMUL.FTZ R18, R18, R17;          # [ 82][000290]
//     	FMUL.FTZ R14, R14, R17;          # [ 83][000298]
//     	FMUL.FTZ R17, R19, R17;          # [ 84][0002a0]
//     	FMUL.FTZ R19, R2, R2;            # [ 85][0002a8]
//     	IPA.SC R12, a[0x368], R1;        # [ 86][0002b0] FIXED_FNC_TEXTURE_6_R
//     	FMUL.FTZ R18, R4, R18;           # [ 87][0002b8]
//     	FFMA.FTZ R19, R3, R3, R19;       # [ 88][0002c0]
//     	FFMA.FTZ.SAT R9, R5, R11, R9;    # [ 89][0002c8]
//     	FFMA.FTZ R14, R16, R14, R18;     # [ 90][0002d0]
//     	IPA.SC R11, a[0x35c], R1;        # [ 91][0002d8] FIXED_FNC_TEXTURE_5_Q
//     	FFMA.FTZ R18, R12, R12, R19;     # [ 92][0002e0]
//     	FFMA.FTZ.SAT R19, R5, R17, R14;  # [ 93][0002e8]
//     	IPA.SC R17, a[0x350], R1;        # [ 94][0002f0] TEX5
//     	MUFU.RSQ R18, R18;               # [ 95][0002f8]
//     	IPA.SC R14, a[0x354], R1;        # [ 96][000300] FIXED_FNC_TEXTURE_5_T
//     	MUFU.RCP R11, R11;               # [ 97][000308]
//     	FMUL.FTZ R2, R2, R18;            # [ 98][000310]
//     	FMUL.FTZ R3, R3, R18;            # [ 99][000318]
//     	FMUL.FTZ R12, R12, R18;          # [100][000320]
//     	FMUL.FTZ R2, R4, R2;             # [101][000328]
//     	FMUL.FMZ R18, R11, R17;          # [102][000330]
//     	MUFU.LG2 R19, |R19|;             # [103][000338]
//     	FFMA.FTZ R2, R16, R3, R2;        # [104][000340]
//     	FMUL.FMZ R3, R11, R14;           # [105][000348]
//     	FMUL.FTZ R18, R18, R18;          # [106][000350]
//     	FFMA.FTZ R8, R5, R8, R10;        # [107][000358]
//     	FMUL.FTZ R10, R17, R17;          # [108][000360]
//     	FFMA.FTZ R3, R3, R3, R18;        # [109][000368]
//     	FMUL.FMZ R18, R19, c[0x6][0x2358]; # [110][000370]
//     	IPA.SC R1, a[0x358], R1;         # [111][000378] FIXED_FNC_TEXTURE_5_R
//     	FFMA.FTZ R6, R5, R6, R13;        # [112][000380]
//     	RRO.EX2 R18, R18;                # [113][000388]
//     	FFMA.FTZ R13, R14, R14, R10;     # [114][000390]
//     	FADD.FTZ R10, -R15, 1;           # [115][000398]
//     	MUFU.EX2 R18, R18;               # [116][0003a0]
//     	FFMA.FTZ R13, R1, R1, R13;       # [117][0003a8]
//     	FFMA.FTZ.SAT R2, R5, R12, R2;    # [118][0003b0]
//     	FMUL.FMZ R15, R7, R18;           # [119][0003b8]
//     	MUFU.LG2 R9, |R9|;               # [120][0003c0]
//     	FMUL.FMZ R11, R11, R1;           # [121][0003c8]
//     	FMUL.FMZ R10, R10, R15;          # [122][0003d0]
//     	MUFU.RSQ R15, R13;               # [123][0003d8]
//     	FMUL.FMZ R9, R9, c[0x6][0x2358]; # [124][0003e0]
//     	FFMA.FTZ.SAT R11, R11, R11, R3;  # [125][0003e8]
//     	FMUL.FTZ R17, R17, R15;          # [126][0003f0]
//     	FMUL.FTZ R13, R14, R15;          # [127][0003f8]
//     	FMUL.FTZ R14, R1, R15;           # [128][000400]
//     	FMUL.FTZ R4, R4, R17;            # [129][000408]
//     	RRO.EX2 R9, R9;                  # [130][000410]
//     	FADD.FTZ R1, -R11, 1;            # [131][000418]
//     	FFMA.FTZ R4, R16, R13, R4;       # [132][000420]
//     	MUFU.EX2 R12, R9;                # [133][000428]
//     	FADD.FTZ.SAT R9, R8, 0.5;        # [134][000430]
//     	FFMA.FTZ R4, R5, R14, R4;        # [135][000438]
//     	MUFU.LG2 R5, |R2|;               # [136][000440]
//     	MOV R3, RZ;                      # [137][000448]
//     	FADD.FTZ.SAT R2, R4, 0.5;        # [138][000450]
//     	FMUL.FMZ R5, R5, c[0x6][0x2358]; # [139][000458]
//     	FADD32I.FTZ R4, -R4, 0.2;        # [140][000460]
//     	RRO.EX2 R5, R5;                  # [141][000468]
//     	MUFU.EX2 R11, R5;                # [142][000470]
//     	FADD32I.FTZ R5, -R8, 0.2;        # [143][000478]
//     	FMUL.FMZ R8, R7, R12;            # [144][000480]
//     	FMUL.FMZ R7, R7, R11;            # [145][000488]
//     	FADD.FTZ.SAT R12, R6, 0.5;       # [146][000490]
//     	FADD32I.FTZ R11, -R6, 0.2;       # [147][000498]
//     	FMUL.FMZ R1, R1, R7;             # [148][0004a0]
//     	FMUL.FMZ R6, R0, R8;             # [149][0004a8]
//     	FMUL.FMZ R8, R10, R12;           # [150][0004b0]
//     	FMUL.FMZ R0, R1, R2;             # [151][0004b8]
//     	FMUL.FMZ R7, R6, R9;             # [152][0004c0]
//     	FCMP.GE R8, R8, R10, R11;        # [153][0004c8]
//     	FCMP.GE R2, R0, R1, R4;          # [154][0004d0]
//     	FCMP.GE R0, R7, R6, R5;          # [155][0004d8]
//     	FMUL.FMZ R1, R8, c[0x6][0x21e0]; # [156][0004e0]
//     	FMUL.FMZ R4, R8, c[0x6][0x21e4]; # [157][0004e8]
//     	FMUL.FMZ R5, R8, c[0x6][0x21e8]; # [158][0004f0]
//     	FFMA.FMZ R1, R0, c[0x6][0x21d0], R1; # [159][0004f8]
//     	FFMA.FMZ R4, R0, c[0x6][0x21d4], R4; # [160][000500]
//     	FFMA.FMZ R5, R0, c[0x6][0x21d8], R5; # [161][000508]
//     	FFMA.FMZ.SAT R0, R2, c[0x6][0x21f0], R1; # [162][000510]
//     	FFMA.FMZ.SAT R1, R2, c[0x6][0x21f4], R4; # [163][000518]
//     	FFMA.FMZ.SAT R2, R2, c[0x6][0x21f8], R5; # [164][000520]
//     	EXIT;                            # [165][000528]
//     	END
//     END_SECTION
// END_SHADER
// 
