// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0xac80df7ea40f1849
//         UCODE_HASH: 0x04bc556158765c48
//         POOL: APP
//         VERSION: 20
//         # USES: 3225
//         // Time: 71.137ms [5.069 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 20
//         USED_TEXTURE_BITS: 0x5
//         TEXTURE_SLOTS: 3
//         SAMPLER_SLOTS: 3
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX01_Q              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX02_Q              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX05_Q              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//             TEX07_S              PERSPECTIVE
//             TEX07_T              PERSPECTIVE
//             TEX07_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x2aaaaa0a
//         0x2a2aaa2a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_x
        def c0, 0.04000000, -0.02000000, -0.50000000, 1.00000000 ; 0x3d23d70a 0xbca3d70a 0xbf000000 0x3f800000
        def c1, 0.20000000, 0.00000000, 0.00000000, 0.00000000 ; 0x3e4ccccd 0x000000 0x000000 0x000000
        dcl t0.rg
        dcl_pp t1
        dcl_pp t3.rgb
        dcl_pp t2
        dcl_pp t4.rgb
        dcl_pp t5
        dcl_pp t6.rgb
        dcl_pp t7.rgb
        dcl_2d s0
        dcl_2d s2
        rcp r0.w, t1.w
        mul_pp r0.xyz, r0.w, t1
        dp3_sat_pp r0.x, r0, r0
        add_pp r0.x, -r0.x, c0.w
        rcp r0.y, t2.w
        mul_pp r0.yzw, r0.y, t2.xxyz
        dp3_sat_pp r0.y, r0.yzw, r0.yzw
        add_pp r0.y, -r0.y, c0.w
        dp3_pp r0.z, t7, t7
        rsq_pp r0.z, r0.z
        mul_pp r0.zw, r0.z, t7.xyxy
        texld_pp r1, t0, s2
        mad_pp r1.x, r1.x, c0.x, c0.y
        mad_pp r1.xy, r0.zwzw, r1.x, t0
        texld_pp r1, r1, s0
        nrm_pp r2.xyz, t4
        add r1.xyz, r1, c0.z
        add_pp r1.xyz, r1, r1
        nrm_pp r3.xyz, r1
        dp3_sat_pp r3.w, r3, r2
        pow_pp r0.z, r3.w, c27.z
        mul_pp r3.w, r1.w, r0.z
        nrm_pp r1.xyz, t2
        dp3_pp r0.z, r3, r1
        add_sat_pp r0.w, r0.z, -c0.z
        add r0.z, -r0.z, c1.x
        mul_pp r0.w, r3.w, r0.w
        cmp_pp r3.w, r0.z, r0.w, r3.w
        mul_pp r1.xyz, r3.w, c4
        mul_pp r0.yzw, r0.y, r1.xxyz
        nrm_pp r1.xyz, t3
        dp3_sat_pp r3.w, r3, r1
        pow_pp r1.x, r3.w, c27.z
        mul_pp r3.w, r1.w, r1.x
        nrm_pp r1.xyz, t1
        dp3_pp r1.x, r3, r1
        add_sat_pp r1.y, r1.x, -c0.z
        add r1.x, -r1.x, c1.x
        mul_pp r1.y, r3.w, r1.y
        cmp_pp r3.w, r1.x, r1.y, r3.w
        mul_pp r1.xyz, r3.w, c3
        mad_pp r0.xyz, r1, r0.x, r0.yzw
        rcp r0.w, t5.w
        mul_pp r1.xyz, r0.w, t5
        dp3_sat_pp r0.w, r1, r1
        add_pp r0.w, -r0.w, c0.w
        nrm_pp r1.xyz, t6
        dp3_sat_pp r3.w, r3, r1
        pow_pp r1.x, r3.w, c27.z
        mul_pp r3.w, r1.w, r1.x
        nrm_pp r1.xyz, t5
        dp3_pp r1.x, r3, r1
        add_sat_pp r1.y, r1.x, -c0.z
        add r1.x, -r1.x, c1.x
        mul_pp r1.y, r3.w, r1.y
        cmp_pp r1.x, r1.x, r1.y, r3.w
        mul_pp r1.xyz, r1.x, c5
        mad_pp r0.xyz, r1, r0.w, r0
        mov_sat_pp r1.xyz, r0
        dp3_pp r1.w, r0, c0.w
        mov_pp oC0, r1
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0x3d23d70a 0xbca3d70a
//         0xbf000000 0x3f800000 0x05000051 0xa00f0001
//         0x3e4ccccd 0x00000000 0x00000000 0x00000000
//         0x0200001f 0x80000000 0xb0030000 0x0200001f
//         0x80000000 0xb06f0001 0x0200001f 0x80000000
//         0xb0670003 0x0200001f 0x80000000 0xb06f0002
//         0x0200001f 0x80000000 0xb0670004 0x0200001f
//         0x80000000 0xb06f0005 0x0200001f 0x80000000
//         0xb0670006 0x0200001f 0x80000000 0xb0670007
//         0x0200001f 0x90000000 0xa00f0800 0x0200001f
//         0x90000000 0xa00f0802 0x02000006 0x80080000
//         0xb0ff0001 0x03000005 0x80270000 0x80ff0000
//         0xb0e40001 0x03000008 0x80310000 0x80e40000
//         0x80e40000 0x03000002 0x80210000 0x81000000
//         0xa0ff0000 0x02000006 0x80020000 0xb0ff0002
//         0x03000005 0x802e0000 0x80550000 0xb0900002
//         0x03000008 0x80320000 0x80f90000 0x80f90000
//         0x03000002 0x80220000 0x81550000 0xa0ff0000
//         0x03000008 0x80240000 0xb0e40007 0xb0e40007
//         0x02000007 0x80240000 0x80aa0000 0x03000005
//         0x802c0000 0x80aa0000 0xb0440007 0x03000042
//         0x802f0001 0xb0e40000 0xa0e40802 0x04000004
//         0x80210001 0x80000001 0xa0000000 0xa0550000
//         0x04000004 0x80230001 0x80ee0000 0x80000001
//         0xb0e40000 0x03000042 0x802f0001 0x80e40001
//         0xa0e40800 0x02000024 0x80270002 0xb0e40004
//         0x03000002 0x80070001 0x80e40001 0xa0aa0000
//         0x03000002 0x80270001 0x80e40001 0x80e40001
//         0x02000024 0x80270003 0x80e40001 0x03000008
//         0x80380003 0x80e40003 0x80e40002 0x03000020
//         0x80240000 0x80ff0003 0xa0aa001b 0x03000005
//         0x80280003 0x80ff0001 0x80aa0000 0x02000024
//         0x80270001 0xb0e40002 0x03000008 0x80240000
//         0x80e40003 0x80e40001 0x03000002 0x80380000
//         0x80aa0000 0xa1aa0000 0x03000002 0x80040000
//         0x81aa0000 0xa0000001 0x03000005 0x80280000
//         0x80ff0003 0x80ff0000 0x04000058 0x80280003
//         0x80aa0000 0x80ff0000 0x80ff0003 0x03000005
//         0x80270001 0x80ff0003 0xa0e40004 0x03000005
//         0x802e0000 0x80550000 0x80900001 0x02000024
//         0x80270001 0xb0e40003 0x03000008 0x80380003
//         0x80e40003 0x80e40001 0x03000020 0x80210001
//         0x80ff0003 0xa0aa001b 0x03000005 0x80280003
//         0x80ff0001 0x80000001 0x02000024 0x80270001
//         0xb0e40001 0x03000008 0x80210001 0x80e40003
//         0x80e40001 0x03000002 0x80320001 0x80000001
//         0xa1aa0000 0x03000002 0x80010001 0x81000001
//         0xa0000001 0x03000005 0x80220001 0x80ff0003
//         0x80550001 0x04000058 0x80280003 0x80000001
//         0x80550001 0x80ff0003 0x03000005 0x80270001
//         0x80ff0003 0xa0e40003 0x04000004 0x80270000
//         0x80e40001 0x80000000 0x80f90000 0x02000006
//         0x80080000 0xb0ff0005 0x03000005 0x80270001
//         0x80ff0000 0xb0e40005 0x03000008 0x80380000
//         0x80e40001 0x80e40001 0x03000002 0x80280000
//         0x81ff0000 0xa0ff0000 0x02000024 0x80270001
//         0xb0e40006 0x03000008 0x80380003 0x80e40003
//         0x80e40001 0x03000020 0x80210001 0x80ff0003
//         0xa0aa001b 0x03000005 0x80280003 0x80ff0001
//         0x80000001 0x02000024 0x80270001 0xb0e40005
//         0x03000008 0x80210001 0x80e40003 0x80e40001
//         0x03000002 0x80320001 0x80000001 0xa1aa0000
//         0x03000002 0x80010001 0x81000001 0xa0000001
//         0x03000005 0x80220001 0x80ff0003 0x80550001
//         0x04000058 0x80210001 0x80000001 0x80550001
//         0x80ff0003 0x03000005 0x80270001 0x80000001
//         0xa0e40005 0x04000004 0x80270000 0x80e40001
//         0x80ff0000 0x80e40000 0x02000001 0x80370001
//         0x80e40000 0x03000008 0x80280001 0x80e40000
//         0xa0ff0000 0x02000001 0x802f0800 0x80e40001
//         0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3d23d70a // 0.04000000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][270] = 0x3f897cb0 // 1.07411766
//         # USER FLOAT CONST: c[6][271] = 0x3f8a9764 // 1.08274508
//         # USER FLOAT CONST: c[6][272] = 0x3f4a16e4 // 0.78941176
//         ## USER CONST histogram
//         ##     c3.x -> c[6][262] = 64.50%@1.07411766 35.50%@1.10000002
//         ##     c3.y -> c[6][263] = 64.50%@1.08274508 35.50%@0.24588236
//         ##     c3.z -> c[6][264] = 64.50%@0.78941176 35.50%@0.20274510
//         ##     c4.x -> c[6][266] = 83.88%@1.07411766 16.12%@1.10000002
//         ##     c4.y -> c[6][267] = 83.88%@1.08274508 16.12%@0.24588236
//         ##     c4.z -> c[6][268] = 83.88%@0.78941176 16.12%@0.20274510
//         ##    ~c5.x -> c[6][270] = 100.00%@1.07411766
//         ##    ~c5.y -> c[6][271] = 100.00%@1.08274508
//         ##    ~c5.z -> c[6][272] = 100.00%@0.78941176
//         ##     c27.z -> c[6][360] = 54.82%@30.00000000 45.18%@40.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x2,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x2,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x2,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7573d455,0x00000411
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x37a0a740,0x00000411
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xf02b8320,0x000001a0
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xcdf4a561,0x000001a0
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x96657a9a,0x000006e8
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x171613ad,0x000006e8
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x18 0 4 "COL1")
//         (0x18 0 4 "ATTR00")
//         (0x18 0 4 "TEX0")
//         (0x18 0 4 "TEX1")
//         (0x18 0 4 "TEX2")
//         (0x18 0 4 "TEX3")
//         (0x18 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         rcpr r5.w, v5.w
//         mulh r5.xyz, r5.w, v5
//         dp3h_sat r5.x, r5, r5
//         addh r5.x, -r5.x, constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).w
//         rcpr r5.y, v6.w
//         mulh r5.yzw, r5.y, v6.xxyz
//         dp3h_sat r5.y, r5.yzww, r5.yzww
//         addh r5.y, -r5.y, constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).w
//         dp3h r5.z, v11, v11
//         rsqh r5.z, |r5.z|
//         mulh r5.zw, r5.z, v11.xyxy
//         texh r6, v4.xyzz, #2, #2, 2D
//         madh r6.x, r6.x, constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).x, constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).y
//         madh r6.xy, r5.zwzw, r6.x, v4
//         texh r6, r6.xyzz, #0, #0, 2D
//         nrmh r7.xyz, v8
//         addr r6.xyz, r6, constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).z
//         addh r6.xyz, r6, r6
//         nrmh r8.xyz, r6
//         dp3h_sat r8.w, r8, r7
//         lg2r r47, |r8.w|
//         mulr r47, r47, c[6][277].z
//         ex2r r47, r47
//         movh r5.z, r47
//         mulh r8.w, r6.w, r5.z
//         nrmh r6.xyz, v6
//         dp3h r5.z, r8, r6
//         addh_sat r5.w, r5.z, -constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).z
//         addr r5.z, -r5.z, constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulh r5.w, r8.w, r5.w
//         cmph r8.w, r5.z, r5.w, r8.w
//         mulh r6.xyz, r8.w, c[6][254]
//         mulh r5.yzw, r5.y, r6.xxyz
//         nrmh r6.xyz, v7
//         dp3h_sat r8.w, r8, r6
//         lg2r r47, |r8.w|
//         mulr r47, r47, c[6][277].z
//         ex2r r47, r47
//         movh r6.x, r47
//         mulh r8.w, r6.w, r6.x
//         nrmh r6.xyz, v5
//         dp3h r6.x, r8, r6
//         addh_sat r6.y, r6.x, -constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).z
//         addr r6.x, -r6.x, constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulh r6.y, r8.w, r6.y
//         cmph r8.w, r6.x, r6.y, r8.w
//         mulh r6.xyz, r8.w, c[6][253]
//         madh r5.xyz, r6, r5.x, r5.yzww
//         rcpr r5.w, v9.w
//         mulh r6.xyz, r5.w, v9
//         dp3h_sat r5.w, r6, r6
//         addh r5.w, -r5.w, constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).w
//         nrmh r6.xyz, v10
//         dp3h_sat r8.w, r8, r6
//         lg2r r47, |r8.w|
//         mulr r47, r47, c[6][277].z
//         ex2r r47, r47
//         movh r6.x, r47
//         mulh r8.w, r6.w, r6.x
//         nrmh r6.xyz, v9
//         dp3h r6.x, r8, r6
//         addh_sat r6.y, r6.x, -constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).z
//         addr r6.x, -r6.x, constant(0.20000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulh r6.y, r8.w, r6.y
//         cmph r6.x, r6.x, r6.y, r8.w
//         movr r44, c[6][255]
//         movr r44.x, constant(1.07411766, 1.07411766, 1.07411766, 1.07411766).x
//         movr r44.y, constant(1.08274508, 1.08274508, 1.08274508, 1.08274508).x
//         movr r44.z, constant(0.78941176, 0.78941176, 0.78941176, 0.78941176).x
//         mulh r6.xyz, r6.x, r44
//         madh r5.xyz, r6, r5.w, r5
//         movh_sat r6.xyz, r5
//         dp3h r6.w, r5, constant(0.04000000, -0.02000000, -0.50000000, 1.00000000).w
//         movh r0, r6
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R9, -0x435c28f6;          # [  0][000000]
//     	IPA.PASS.CENTROID R0, a[0x7c];   # [  1][000008] POSITION_W
//     	MUFU.RCP R4, R0;                 # [  2][000010]
//     	IPA.PASS R2, a[0x7c];            # [  3][000018] POSITION_W
//     	IPA.SC.CENTROID R1, a[0x304], R4; # [  4][000020] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC.CENTROID R0, a[0x300], R4; # [  5][000028] TEX0
//     	MUFU.RCP R5, R2;                 # [  6][000030]
//     	TEX.P R8, R0, 0x2, 0x2, 2D, 0x1; # [  7][000038]
//     	IPA.SC R2, a[0x370], R5;         # [  8][000040] TEX7
//     	FMUL.FTZ R3, R2, R2;             # [  9][000048]
//     	IPA.SC R6, a[0x374], R5;         # [ 10][000050] FIXED_FNC_TEXTURE_7_T
//     	FFMA.FTZ R3, R6, R6, R3;         # [ 11][000058]
//     	IPA.SC R7, a[0x378], R5;         # [ 12][000060] FIXED_FNC_TEXTURE_7_R
//     	FFMA.FTZ R3, R7, R7, R3;         # [ 13][000068]
//     	IPA.SC.CENTROID R15, a[0x340], R4; # [ 14][000070] TEX4
//     	MUFU.RSQ R3, |R3|;               # [ 15][000078]
//     	FMUL.FMZ R7, R3, R6;             # [ 16][000080]
//     	FMUL.FMZ R2, R3, R2;             # [ 17][000088]
//     	FFMA.FMZ R6, R8, c[0x9][0x0], R9; # [ 18][000090]
//     	IPA.SC.CENTROID R16, a[0x344], R4; # [ 19][000098] FIXED_FNC_TEXTURE_4_T
//     	FFMA.FMZ R1, R7, R6, R1;         # [ 20][0000a0]
//     	FFMA.FMZ R0, R2, R6, R0;         # [ 21][0000a8]
//     	FMUL.FTZ R7, R15, R15;           # [ 22][0000b0]
//     	TEX.NODEP.P R0, R0, 0x0, 0x0, 2D; # [ 23][0000b8]
//     	FFMA.FTZ R8, R16, R16, R7;       # [ 24][0000c0]
//     	IPA.SC.CENTROID R6, a[0x32c], R4; # [ 25][0000c8] FIXED_FNC_TEXTURE_2_Q
//     	MUFU.RCP R18, R6;                # [ 26][0000d0]
//     	IPA.SC.CENTROID R11, a[0x320], R4; # [ 27][0000d8] TEX2
//     	FMUL.FMZ R7, R18, R11;           # [ 28][0000e0]
//     	IPA.SC.CENTROID R9, a[0x348], R4; # [ 29][0000e8] FIXED_FNC_TEXTURE_4_R
//     	FFMA.FTZ R10, R9, R9, R8;        # [ 30][0000f0]
//     	IPA.SC.CENTROID R12, a[0x324], R4; # [ 31][0000f8] FIXED_FNC_TEXTURE_2_T
//     	FMUL.FTZ R8, R7, R7;             # [ 32][000100]
//     	IPA.SC.CENTROID R6, a[0x31c], R4; # [ 33][000108] FIXED_FNC_TEXTURE_1_Q
//     	MUFU.RSQ R10, R10;               # [ 34][000110]
//     	IPA.SC.CENTROID R7, a[0x310], R4; # [ 35][000118] TEX1
//     	FMUL.FMZ R13, R18, R12;          # [ 36][000120]
//     	MUFU.RCP R6, R6;                 # [ 37][000128]
//     	FFMA.FTZ R14, R13, R13, R8;      # [ 38][000130]
//     	FMUL.FTZ R15, R15, R10;          # [ 39][000138]
//     	FMUL.FTZ R16, R16, R10;          # [ 40][000140]
//     	IPA.SC.CENTROID R13, a[0x328], R4; # [ 41][000148] FIXED_FNC_TEXTURE_2_R
//     	FMUL.FTZ R17, R9, R10;           # [ 42][000150]
//     	IPA.SC.CENTROID R8, a[0x314], R4; # [ 43][000158] FIXED_FNC_TEXTURE_1_T
//     	FMUL.FTZ R10, R11, R11;          # [ 44][000160]
//     	FMUL.FMZ R9, R6, R7;             # [ 45][000168]
//     	FFMA.FTZ R10, R12, R12, R10;     # [ 46][000170]
//     	FMUL.FTZ R9, R9, R9;             # [ 47][000178]
//     	FMUL.FMZ R18, R18, R13;          # [ 48][000180]
//     	FMUL.FMZ R19, R6, R8;            # [ 49][000188]
//     	FFMA.FTZ.SAT R14, R18, R18, R14; # [ 50][000190]
//     	FFMA.FTZ R9, R19, R19, R9;       # [ 51][000198]
//     	FFMA.FTZ R18, R13, R13, R10;     # [ 52][0001a0]
//     	IPA.SC.CENTROID R10, a[0x318], R4; # [ 53][0001a8] FIXED_FNC_TEXTURE_1_R
//     	FADD.FTZ R19, R0, -0.5;          # [ 54][0001b0]
//     	MUFU.RSQ R0, R18;                # [ 55][0001b8]
//     	FADD.FTZ R18, R1, -0.5;          # [ 56][0001c0]
//     	FMUL.FTZ R11, R11, R0;           # [ 57][0001c8]
//     	FADD.FTZ R1, R19, R19;           # [ 58][0001d0]
//     	FADD.FTZ R18, R18, R18;          # [ 59][0001d8]
//     	FADD.FTZ R19, R2, -0.5;          # [ 60][0001e0]
//     	FMUL.FTZ R12, R12, R0;           # [ 61][0001e8]
//     	FMUL.FTZ R2, R1, R1;             # [ 62][0001f0]
//     	FMUL.FTZ R0, R13, R0;            # [ 63][0001f8]
//     	FADD.FTZ R19, R19, R19;          # [ 64][000200]
//     	FMUL.FMZ R13, R6, R10;           # [ 65][000208]
//     	FFMA.FTZ R2, R18, R18, R2;       # [ 66][000210]
//     	IPA.SC.CENTROID R6, a[0x330], R4; # [ 67][000218] TEX3
//     	FFMA.FTZ.SAT R13, R13, R13, R9;  # [ 68][000220]
//     	FFMA.FTZ R2, R19, R19, R2;       # [ 69][000228]
//     	MUFU.RSQ R2, R2;                 # [ 70][000230]
//     	IPA.SC.CENTROID R9, a[0x338], R4; # [ 71][000238] FIXED_FNC_TEXTURE_3_R
//     	FMUL.FTZ R1, R1, R2;             # [ 72][000240]
//     	IPA.SC.CENTROID R4, a[0x334], R4; # [ 73][000248] FIXED_FNC_TEXTURE_3_T
//     	FMUL.FTZ R18, R18, R2;           # [ 74][000250]
//     	FMUL.FTZ R19, R19, R2;           # [ 75][000258]
//     	FMUL.FTZ R2, R6, R6;             # [ 76][000260]
//     	FMUL.FTZ R15, R1, R15;           # [ 77][000268]
//     	FFMA.FTZ R2, R4, R4, R2;         # [ 78][000270]
//     	FMUL.FTZ R11, R1, R11;           # [ 79][000278]
//     	FFMA.FTZ R2, R9, R9, R2;         # [ 80][000280]
//     	FFMA.FTZ R15, R18, R16, R15;     # [ 81][000288]
//     	MUFU.RSQ R2, R2;                 # [ 82][000290]
//     	FFMA.FTZ R16, R18, R12, R11;     # [ 83][000298]
//     	FMUL.FTZ R6, R6, R2;             # [ 84][0002a0]
//     	FMUL.FTZ R4, R4, R2;             # [ 85][0002a8]
//     	FMUL.FTZ R9, R9, R2;             # [ 86][0002b0]
//     	IPA.SC R11, a[0x350], R5;        # [ 87][0002b8] TEX5
//     	FMUL.FTZ R2, R7, R7;             # [ 88][0002c0]
//     	IPA.SC R12, a[0x354], R5;        # [ 89][0002c8] FIXED_FNC_TEXTURE_5_T
//     	FFMA.FTZ R2, R8, R8, R2;         # [ 90][0002d0]
//     	FMUL.FTZ R6, R1, R6;             # [ 91][0002d8]
//     	FFMA.FTZ R2, R10, R10, R2;       # [ 92][0002e0]
//     	FFMA.FTZ R6, R18, R4, R6;        # [ 93][0002e8]
//     	MUFU.RSQ R2, R2;                 # [ 94][0002f0]
//     	FFMA.FTZ.SAT R17, R19, R17, R15; # [ 95][0002f8]
//     	FMUL.FTZ R7, R7, R2;             # [ 96][000300]
//     	FMUL.FTZ R8, R8, R2;             # [ 97][000308]
//     	FMUL.FTZ R10, R10, R2;           # [ 98][000310]
//     	FMUL.FTZ R7, R1, R7;             # [ 99][000318]
//     	FFMA.FTZ R7, R18, R8, R7;        # [100][000320]
//     	IPA.SC R2, a[0x35c], R5;         # [101][000328] FIXED_FNC_TEXTURE_5_Q
//     	MUFU.RCP R2, R2;                 # [102][000330]
//     	IPA.SC R15, a[0x364], R5;        # [103][000338] FIXED_FNC_TEXTURE_6_T
//     	FMUL.FMZ R4, R2, R11;            # [104][000340]
//     	FMUL.FMZ R8, R2, R12;            # [105][000348]
//     	FMUL.FTZ R4, R4, R4;             # [106][000350]
//     	FFMA.FTZ R16, R19, R0, R16;      # [107][000358]
//     	FFMA.FTZ R8, R8, R8, R4;         # [108][000360]
//     	IPA.SC R0, a[0x368], R5;         # [109][000368] FIXED_FNC_TEXTURE_6_R
//     	FFMA.FTZ.SAT R9, R19, R9, R6;    # [110][000370]
//     	IPA.SC R4, a[0x360], R5;         # [111][000378] TEX6
//     	FMUL.FTZ R6, R4, R4;             # [112][000380]
//     	MUFU.LG2 R17, |R17|;             # [113][000388]
//     	FFMA.FTZ R6, R15, R15, R6;       # [114][000390]
//     	FMUL.FMZ R17, R17, c[0x6][0x1158]; # [115][000398]
//     	FFMA.FTZ R6, R0, R0, R6;         # [116][0003a0]
//     	FFMA.FTZ R7, R19, R10, R7;       # [117][0003a8]
//     	MUFU.RSQ R6, R6;                 # [118][0003b0]
//     	IPA.SC R5, a[0x358], R5;         # [119][0003b8] FIXED_FNC_TEXTURE_5_R
//     	FMUL.FTZ R4, R4, R6;             # [120][0003c0]
//     	FMUL.FTZ R15, R15, R6;           # [121][0003c8]
//     	FMUL.FTZ R4, R1, R4;             # [122][0003d0]
//     	FMUL.FTZ R0, R0, R6;             # [123][0003d8]
//     	FFMA.FTZ R4, R18, R15, R4;       # [124][0003e0]
//     	MUFU.LG2 R6, |R9|;               # [125][0003e8]
//     	RRO.EX2 R15, R17;                # [126][0003f0]
//     	FADD.FTZ.SAT R9, R16, 0.5;       # [127][0003f8]
//     	MUFU.EX2 R10, R15;               # [128][000400]
//     	FFMA.FTZ.SAT R4, R19, R0, R4;    # [129][000408]
//     	FMUL.FMZ R15, R6, c[0x6][0x1158]; # [130][000410]
//     	FMUL.FMZ R6, R3, R10;            # [131][000418]
//     	FADD32I.FTZ R10, -R16, 0.2;      # [132][000420]
//     	FMUL.FMZ R17, R6, R9;            # [133][000428]
//     	RRO.EX2 R16, R15;                # [134][000430]
//     	FCMP.GE R6, R17, R6, R10;        # [135][000438]
//     	FMUL.FTZ R15, R11, R11;          # [136][000440]
//     	MUFU.EX2 R9, R16;                # [137][000448]
//     	FADD.FTZ.SAT R10, R7, 0.5;       # [138][000450]
//     	FFMA.FTZ R15, R12, R12, R15;     # [139][000458]
//     	FMUL.FMZ R9, R3, R9;             # [140][000460]
//     	FADD32I.FTZ R16, -R7, 0.2;       # [141][000468]
//     	FFMA.FTZ R15, R5, R5, R15;       # [142][000470]
//     	FMUL.FMZ R17, R9, R10;           # [143][000478]
//     	FMUL.FMZ R10, R2, R5;            # [144][000480]
//     	MUFU.RSQ R7, R15;                # [145][000488]
//     	FFMA.FTZ.SAT R0, R10, R10, R8;   # [146][000490]
//     	FCMP.GE R2, R17, R9, R16;        # [147][000498]
//     	MUFU.LG2 R10, |R4|;              # [148][0004a0]
//     	FMUL.FTZ R8, R11, R7;            # [149][0004a8]
//     	FMUL.FTZ R4, R5, R7;             # [150][0004b0]
//     	FMUL.FTZ R9, R12, R7;            # [151][0004b8]
//     	FMUL.FTZ R1, R1, R8;             # [152][0004c0]
//     	FMUL.FMZ R5, R10, c[0x6][0x1158]; # [153][0004c8]
//     	RRO.EX2 R8, R5;                  # [154][0004d0]
//     	FFMA.FTZ R7, R18, R9, R1;        # [155][0004d8]
//     	MUFU.EX2 R8, R8;                 # [156][0004e0]
//     	FFMA.FTZ R7, R19, R4, R7;        # [157][0004e8]
//     	FADD.FTZ R10, -R14, 1;           # [158][0004f0]
//     	FMUL.FMZ R1, R6, c[0x6][0xfe8];  # [159][0004f8]
//     	FADD.FTZ.SAT R9, R7, 0.5;        # [160][000500]
//     	FMUL.FMZ R5, R6, c[0x6][0xfe4];  # [161][000508]
//     	FMUL.FMZ R3, R3, R8;             # [162][000510]
//     	FMUL.FMZ R6, R6, c[0x6][0xfe0];  # [163][000518]
//     	FADD32I.FTZ R7, -R7, 0.2;        # [164][000520]
//     	FADD.FTZ R4, -R13, 1;            # [165][000528]
//     	FMUL.FMZ R8, R3, R9;             # [166][000530]
//     	FMUL.FMZ R5, R10, R5;            # [167][000538]
//     	FMUL.FMZ R11, R2, c[0x6][0xfd4]; # [168][000540]
//     	FMUL.FMZ R1, R10, R1;            # [169][000548]
//     	FMUL.FMZ R6, R10, R6;            # [170][000550]
//     	FCMP.GE R3, R8, R3, R7;          # [171][000558]
//     	FMUL.FMZ R10, R2, c[0x6][0xfd0]; # [172][000560]
//     	FFMA.FMZ R9, R11, R4, R5;        # [173][000568]
//     	FADD.FTZ R5, -R0, 1;             # [174][000570]
//     	FMUL.FMZ R7, R2, c[0x6][0xfd8];  # [175][000578]
//     	FMUL32I.FMZ R2, R3, 0x3f8a9764;  # [176][000580]
//     	FMUL32I.FMZ R0, R3, 0x3f897cb0;  # [177][000588]
//     	FFMA.FMZ R6, R10, R4, R6;        # [178][000590]
//     	FMUL32I.FMZ R3, R3, 0x3f4a16e4;  # [179][000598]
//     	FFMA.FMZ R4, R7, R4, R1;         # [180][0005a0]
//     	FFMA.FMZ R2, R2, R5, R9;         # [181][0005a8]
//     	FFMA.FMZ R1, R0, R5, R6;         # [182][0005b0]
//     	FFMA.FMZ R3, R3, R5, R4;         # [183][0005b8]
//     	F2F.SAT R0, R1;                  # [184][0005c0]
//     	FADD.FTZ R4, R1, R2;             # [185][0005c8]
//     	F2F.SAT R1, R2;                  # [186][0005d0]
//     	F2F.SAT R2, R3;                  # [187][0005d8]
//     	FADD.FTZ R3, R4, R3;             # [188][0005e0]
//     	EXIT;                            # [189][0005e8]
//     	END
//     END_SECTION
// END_SHADER
// 
