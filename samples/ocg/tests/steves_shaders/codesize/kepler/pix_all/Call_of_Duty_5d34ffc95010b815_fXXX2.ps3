// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x5d34ffc95010b815
//         UCODE_HASH: 0x919a9ab39f89685d
//         POOL: APP
//         VERSION: 20
//         # USES: 8738
//         // Time: 58.443ms [3.633 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//         TEXINFO: SHADOWMAP:0x10
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 33
//         USED_TEXTURE_BITS: 0x7f
//         TEXTURE_SLOTS: 7
//         SAMPLER_SLOTS: 7
//         THREAD_STACK_SIZE: 0x18
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             COLOR_DIFFUSE_RED    PERSPECTIVE
//             COLOR_DIFFUSE_GREEN  PERSPECTIVE
//             COLOR_DIFFUSE_BLUE   PERSPECTIVE
//             COLOR_DIFFUSE_ALPHA  PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX00_R              PERSPECTIVE
//             TEX00_Q              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX01_Q              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x000000aa      0x2a2aaaaa
//         0x00002a2a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c1, 4.07999992, 4.06451607, -2.07999992, -2.06451607 ; 0x40828f5c 0x40821084 0xc0051eb8 0xc0042108
        def c6, 1.00000000, 10.00000000, 0.00000000, 9.37751770 ; 0x3f800000 0x41200000 0x000000 0x41160a50
        def c7, 8.00000000, 6.00000000, 1.00000000, 0.50000000 ; 0x41000000 0x40c00000 0x3f800000 0x3f000000
        def c8, 1.00000000, 0.50000000, 0.00000000, 7.00000000 ; 0x3f800000 0x3f000000 0x000000 0x40e00000
        def c9, -0.99924999, 1.44269502, 0.25000000, 0.00000000 ; 0xbf7fced9 0x3fb8aa3b 0x3e800000 0x000000
        dcl_color0 v0
        dcl_texcoord0 v1
        dcl_texcoord1 v2
        dcl_texcoord2 v3.rgb
        dcl_texcoord3 v4.rgb
        dcl_texcoord4 v5.rgb
        dcl_texcoord5 v6.rgb
        dcl_2d s0
        dcl_lwbe s1
        dcl_2d s2
        dcl_2d s3
        dcl_2d s4
        dcl_2d s5
        dcl_2d s6
        texld_pp r0, v1, s6
        mul_pp r0.xyz, r0, r0
        dp3_sat r1.x, r0, c6.y
        mul r1.x, r1.x, v0.w
        mad_pp r2.w, r0.w, -c7.x, c7.y
        mul_pp r0.w, r0.w, c6.w
        exp_pp r0.w, r0.w
        add_pp r0.w, r0.w, c8.w
        texld_pp r3, v1, s0
        mad_pp r1.y, r3.w, -v0.w, c6.x
        add_pp r4.w, -r1.y, c6.x
        mul_pp r3, r3, v0
        mul_pp r1.yzw, r3.xxyz, r3.xxyz
        mul_pp r4.xyz, r3.w, r1.yzw
        texld_pp r5, v1, s5
        mad_pp r1.yz, r5.xwyw, c1.xxyw, c1.xzw
        mul_pp r1.yz, r3.w, r1
        texld_pp r3, v1.zwzw, s2
        cmp r1.w, -r3_abs.x, c6.z, c6.x
        mov r5.xz, c6
        mul_pp r3.yzw, r5.xzzx, c5.z
        mad_pp r5.xyz, c5.z, -r5.zzxw, c5
        mad_pp r3.yzw, r1.x, r5.xxyz, r3
        mov r5.xyz, v2
        mad_pp r5.xyz, r1.y, v4, r5
        mad_pp r5.xyz, r1.z, v3, r5
        nrm_pp r6.xyz, r5
        dp3_sat_pp r1.x, c17, r6
        nrm_pp r5.xyz, v6
        dp3_pp r5.w, r5, r6
        add_pp r6.w, -r5_abs.w, c6.x
        pow_pp r7.x, r6.w, r3.w
        lrp_pp r6.w, r7.x, r3.z, r3.y
        add_pp r3.y, r5.w, r5.w
        mad_pp r2.xyz, r6, -r3.y, r5
        dp3_pp r3.y, r2, c17
        add_pp r3.y, r3.y, c9.x
        mul_pp r0.w, r0.w, r3.y
        mul_pp r0.w, r0.w, c9.y
        exp_sat_pp r0.w, r0.w
        mul r3.yz, c7.xzw, v1.xzw
        texld_pp r5, r3.yzzw, s3
        mov_pp r3.y, r5.w
        mad r6.xy, v1.zwzw, c8, c8.zyzw
        texld_pp r7, r6, s3
        mov_pp r3.z, r7.w
        mad_pp r3.yz, r3, c1.xxyw, c1.xzw
        dp2add r3.w, r3.yzzw, r1.yzzw, c6.z
        dp2add r1.y, r1.yzzw, r1.yzzw, c6.x
        rsq r1.y, r1.y
        dp2add r1.z, r3.yzzw, r3.yzzw, c6.x
        rsq r1.z, r1.z
        mul r1.z, r1.y, r1.z
        mad_sat r1.z, r3.w, r1.z, r1.z
        mul r3.yzw, r7.xxyz, r1.z
        mad_pp r3.yzw, r5.xxyz, r1.y, r3
        mul_pp r3.yzw, r3, r3
        mul_pp r1.xyz, r1.x, c18
        if_ne r1.w, -r1.w
        add r5.xy, c3, v5
        mul r5.zw, c6.xyxz, v5.z
        texldl r5, r5, s4
        add r7.xy, -c3, v5
        mul r7.zw, c6.xyxz, v5.z
        texldl r7, r7, s4
        mov r5.y, r7.x
        add r7.xy, c3.zwzw, v5
        mul r7.zw, c6.xyxz, v5.z
        texldl r7, r7, s4
        mov r5.z, r7.x
        add r7.xy, -c3.zwzw, v5
        mul r7.zw, c6.xyxz, v5.z
        texldl r7, r7, s4
        mov r5.w, r7.x
        dp4_pp r1.w, r5, c9.z
        mad_pp r5.zw, v5.xyxy, c2.w, c2.xyxy
        add r7.xy, r5.zwzw, c3
        mul r7.zw, c6.xyxz, v5.z
        texldl r7, r7, s4
        add r8.xy, r5.zwzw, -c3
        mul r8.zw, c6.xyxz, v5.z
        texldl r8, r8, s4
        mov r7.y, r8.x
        add r8.xy, r5.zwzw, c3.zwzw
        mul r8.zw, c6.xyxz, v5.z
        texldl r8, r8, s4
        mov r7.z, r8.x
        add r8.xy, r5.zwzw, -c3.zwzw
        mul r8.zw, c6.xyxz, v5.z
        texldl r8, r8, s4
        mov r7.w, r8.x
        dp4_pp r6.x, r7, c9.z
        mov r5.xy, v5
        mad_pp r5, r5, c4.xyxy, c4.zzzw
        max_pp r6.yz, r5_abs.xxzw, r5_abs.xyw
        add_sat_pp r5.xy, -r6.yzzw, c7.x
        lrp_pp r7.x, r5.y, r6.x, r3.x
        mad r3.x, r5.x, -r5.y, r5.x
        cmp_pp r3.x, -r3_abs.x, r5.x, c6.x
        lrp_pp r5.x, r3.x, r1.w, r7.x
        else
        mov r5.x, c6.z
        endif
        mad_pp r1.xyz, r5.x, r1, r3.yzw
        texldl_pp r2, r2, s1
        mul_pp r2.xyz, r2, r2
        mul_pp r3.xyz, r0.w, c19
        mad_pp r2.xyz, r5.x, r3, r2
        mul_pp r0.xyz, r0, v0.w
        mul_pp r0.xyz, r6.w, r0
        mul_pp r0.xyz, r2, r0
        mad_pp r0.xyz, r4, r1, r0
        mad_pp r0.xyz, c0, -r4.w, r0
        mul_pp r1.xyz, r4.w, c0
        mad_pp r0.xyz, v2.w, r0, r1
        mov_pp r0.w, r4.w
        cmp_pp oC0, -r4_abs.w, r4, r0
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0001 0x40828f5c 0x40821084
//         0xc0051eb8 0xc0042108 0x05000051 0xa00f0006
//         0x3f800000 0x41200000 0x00000000 0x41160a50
//         0x05000051 0xa00f0007 0x41000000 0x40c00000
//         0x3f800000 0x3f000000 0x05000051 0xa00f0008
//         0x3f800000 0x3f000000 0x00000000 0x40e00000
//         0x05000051 0xa00f0009 0xbf7fced9 0x3fb8aa3b
//         0x3e800000 0x00000000 0x0200001f 0x8000000a
//         0x900f0000 0x0200001f 0x80000005 0x900f0001
//         0x0200001f 0x80010005 0x900f0002 0x0200001f
//         0x80020005 0x90070003 0x0200001f 0x80030005
//         0x90070004 0x0200001f 0x80040005 0x90070005
//         0x0200001f 0x80050005 0x90070006 0x0200001f
//         0x90000000 0xa00f0800 0x0200001f 0x98000000
//         0xa00f0801 0x0200001f 0x90000000 0xa00f0802
//         0x0200001f 0x90000000 0xa00f0803 0x0200001f
//         0x90000000 0xa00f0804 0x0200001f 0x90000000
//         0xa00f0805 0x0200001f 0x90000000 0xa00f0806
//         0x03000042 0x802f0000 0x90e40001 0xa0e40806
//         0x03000005 0x80270000 0x80e40000 0x80e40000
//         0x03000008 0x80110001 0x80e40000 0xa0550006
//         0x03000005 0x80010001 0x80000001 0x90ff0000
//         0x04000004 0x80280002 0x80ff0000 0xa1000007
//         0xa0550007 0x03000005 0x80280000 0x80ff0000
//         0xa0ff0006 0x0200000e 0x80280000 0x80ff0000
//         0x03000002 0x80280000 0x80ff0000 0xa0ff0008
//         0x03000042 0x802f0003 0x90e40001 0xa0e40800
//         0x04000004 0x80220001 0x80ff0003 0x91ff0000
//         0xa0000006 0x03000002 0x80280004 0x81550001
//         0xa0000006 0x03000005 0x802f0003 0x80e40003
//         0x90e40000 0x03000005 0x802e0001 0x80900003
//         0x80900003 0x03000005 0x80270004 0x80ff0003
//         0x80f90001 0x03000042 0x802f0005 0x90e40001
//         0xa0e40805 0x04000004 0x80260001 0x80dc0005
//         0xa0d00001 0xa0f80001 0x03000005 0x80260001
//         0x80ff0003 0x80e40001 0x03000042 0x802f0003
//         0x90ee0001 0xa0e40802 0x04000058 0x80080001
//         0x8c000003 0xa0aa0006 0xa0000006 0x02000001
//         0x80050005 0xa0e40006 0x03000005 0x802e0003
//         0x80280005 0xa0aa0005 0x04000004 0x80270005
//         0xa0aa0005 0x81ca0005 0xa0e40005 0x04000004
//         0x802e0003 0x80000001 0x80900005 0x80e40003
//         0x02000001 0x80070005 0x90e40002 0x04000004
//         0x80270005 0x80550001 0x90e40004 0x80e40005
//         0x04000004 0x80270005 0x80aa0001 0x90e40003
//         0x80e40005 0x02000024 0x80270006 0x80e40005
//         0x03000008 0x80310001 0xa0e40011 0x80e40006
//         0x02000024 0x80270005 0x90e40006 0x03000008
//         0x80280005 0x80e40005 0x80e40006 0x03000002
//         0x80280006 0x8cff0005 0xa0000006 0x03000020
//         0x80210007 0x80ff0006 0x80ff0003 0x04000012
//         0x80280006 0x80000007 0x80aa0003 0x80550003
//         0x03000002 0x80220003 0x80ff0005 0x80ff0005
//         0x04000004 0x80270002 0x80e40006 0x81550003
//         0x80e40005 0x03000008 0x80220003 0x80e40002
//         0xa0e40011 0x03000002 0x80220003 0x80550003
//         0xa0000009 0x03000005 0x80280000 0x80ff0000
//         0x80550003 0x03000005 0x80280000 0x80ff0000
//         0xa0550009 0x0200000e 0x80380000 0x80ff0000
//         0x03000005 0x80060003 0xa0f80007 0x90f80001
//         0x03000042 0x802f0005 0x80e90003 0xa0e40803
//         0x02000001 0x80220003 0x80ff0005 0x04000004
//         0x80030006 0x90ee0001 0xa0e40008 0xa0e60008
//         0x03000042 0x802f0007 0x80e40006 0xa0e40803
//         0x02000001 0x80240003 0x80ff0007 0x04000004
//         0x80260003 0x80e40003 0xa0d00001 0xa0f80001
//         0x0400005a 0x80080003 0x80e90003 0x80e90001
//         0xa0aa0006 0x0400005a 0x80020001 0x80e90001
//         0x80e90001 0xa0000006 0x02000007 0x80020001
//         0x80550001 0x0400005a 0x80040001 0x80e90003
//         0x80e90003 0xa0000006 0x02000007 0x80040001
//         0x80aa0001 0x03000005 0x80040001 0x80550001
//         0x80aa0001 0x04000004 0x80140001 0x80ff0003
//         0x80aa0001 0x80aa0001 0x03000005 0x800e0003
//         0x80900007 0x80aa0001 0x04000004 0x802e0003
//         0x80900005 0x80550001 0x80e40003 0x03000005
//         0x802e0003 0x80e40003 0x80e40003 0x03000005
//         0x80270001 0x80000001 0xa0e40012 0x02050029
//         0x80ff0001 0x81ff0001 0x03000002 0x80030005
//         0xa0e40003 0x90e40005 0x03000005 0x800c0005
//         0xa0840006 0x90aa0005 0x0300005f 0x800f0005
//         0x80e40005 0xa0e40804 0x03000002 0x80030007
//         0xa1e40003 0x90e40005 0x03000005 0x800c0007
//         0xa0840006 0x90aa0005 0x0300005f 0x800f0007
//         0x80e40007 0xa0e40804 0x02000001 0x80020005
//         0x80000007 0x03000002 0x80030007 0xa0ee0003
//         0x90e40005 0x03000005 0x800c0007 0xa0840006
//         0x90aa0005 0x0300005f 0x800f0007 0x80e40007
//         0xa0e40804 0x02000001 0x80040005 0x80000007
//         0x03000002 0x80030007 0xa1ee0003 0x90e40005
//         0x03000005 0x800c0007 0xa0840006 0x90aa0005
//         0x0300005f 0x800f0007 0x80e40007 0xa0e40804
//         0x02000001 0x80080005 0x80000007 0x03000009
//         0x80280001 0x80e40005 0xa0aa0009 0x04000004
//         0x802c0005 0x90440005 0xa0ff0002 0xa0440002
//         0x03000002 0x80030007 0x80ee0005 0xa0e40003
//         0x03000005 0x800c0007 0xa0840006 0x90aa0005
//         0x0300005f 0x800f0007 0x80e40007 0xa0e40804
//         0x03000002 0x80030008 0x80ee0005 0xa1e40003
//         0x03000005 0x800c0008 0xa0840006 0x90aa0005
//         0x0300005f 0x800f0008 0x80e40008 0xa0e40804
//         0x02000001 0x80020007 0x80000008 0x03000002
//         0x80030008 0x80ee0005 0xa0ee0003 0x03000005
//         0x800c0008 0xa0840006 0x90aa0005 0x0300005f
//         0x800f0008 0x80e40008 0xa0e40804 0x02000001
//         0x80040007 0x80000008 0x03000002 0x80030008
//         0x80ee0005 0xa1ee0003 0x03000005 0x800c0008
//         0xa0840006 0x90aa0005 0x0300005f 0x800f0008
//         0x80e40008 0xa0e40804 0x02000001 0x80080007
//         0x80000008 0x03000009 0x80210006 0x80e40007
//         0xa0aa0009 0x02000001 0x80030005 0x90e40005
//         0x04000004 0x802f0005 0x80e40005 0xa0440004
//         0xa0ea0004 0x0300000b 0x80260006 0x8be00005
//         0x8bf40005 0x03000002 0x80330005 0x81e90006
//         0xa0000007 0x04000012 0x80210007 0x80550005
//         0x80000006 0x80000003 0x04000004 0x80010003
//         0x80000005 0x81550005 0x80000005 0x04000058
//         0x80210003 0x8c000003 0x80000005 0xa0000006
//         0x04000012 0x80210005 0x80000003 0x80ff0001
//         0x80000007 0x0000002a 0x02000001 0x80010005
//         0xa0aa0006 0x0000002b 0x04000004 0x80270001
//         0x80000005 0x80e40001 0x80f90003 0x0300005f
//         0x802f0002 0x80e40002 0xa0e40801 0x03000005
//         0x80270002 0x80e40002 0x80e40002 0x03000005
//         0x80270003 0x80ff0000 0xa0e40013 0x04000004
//         0x80270002 0x80000005 0x80e40003 0x80e40002
//         0x03000005 0x80270000 0x80e40000 0x90ff0000
//         0x03000005 0x80270000 0x80ff0006 0x80e40000
//         0x03000005 0x80270000 0x80e40002 0x80e40000
//         0x04000004 0x80270000 0x80e40004 0x80e40001
//         0x80e40000 0x04000004 0x80270000 0xa0e40000
//         0x81ff0004 0x80e40000 0x03000005 0x80270001
//         0x80ff0004 0xa0e40000 0x04000004 0x80270000
//         0x90ff0002 0x80e40000 0x80e40001 0x02000001
//         0x80280000 0x80ff0004 0x04000058 0x802f0800
//         0x8cff0004 0x80e40004 0x80e40000 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f800000 // 1.00000000
//         COP_CONST[1]: 0x40828f5c // 4.07999992
//         COP_CONST[2]: 0x40821084 // 4.06451607
//         COP_CONST[3]: 0x3e862535 // 0.26200262
//         COP_CONST[4]: 0x3f248dba // 0.64278758
//         COP_CONST[5]: 0x3a9ffebd // 0.00122067
//         COP_CONST[6]: 0x3f398000 // 0.72460938
//         COP_CONST[7]: 0xc1c00000 // -24.00000000
//         COP_CONST[8]: 0x3e60cb7c // 0.21952623
//         COP_CONST[9]: 0x3e198f11 // 0.14995982
//         COP_CONST[10]: 0x3dd6412c // 0.10461649
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x3dd6412c // 0.10461649
//         # USER FLOAT CONST: c[6][251] = 0x3e198f11 // 0.14995982
//         # USER FLOAT CONST: c[6][252] = 0x3e60cb7c // 0.21952623
//         # USER FLOAT CONST: c[6][258] = 0x3a9ffebd // 0.00122067
//         # USER FLOAT CONST: c[6][259] = 0x3f398000 // 0.72460938
//         # USER FLOAT CONST: c[6][261] = 0x3e800000 // 0.25000000
//         # USER FLOAT CONST: c[6][262] = 0x39800000 // 0.00024414
//         # USER FLOAT CONST: c[6][263] = 0x39800000 // 0.00024414
//         # USER FLOAT CONST: c[6][264] = 0x3a000000 // 0.00048828
//         # USER FLOAT CONST: c[6][265] = 0xb9000000 // -0.00012207
//         # USER FLOAT CONST: c[6][266] = 0x41800000 // 16.00000000
//         # USER FLOAT CONST: c[6][267] = 0x42000000 // 32.00000000
//         # USER FLOAT CONST: c[6][268] = 0xc1000000 // -8.00000000
//         # USER FLOAT CONST: c[6][269] = 0xc1c00000 // -24.00000000
//         # USER FLOAT CONST: c[6][318] = 0x3f3847d9 // 0.71984631
//         # USER FLOAT CONST: c[6][319] = 0x3e862535 // 0.26200262
//         # USER FLOAT CONST: c[6][320] = 0x3f248dba // 0.64278758
//         # USER FLOAT CONST: c[6][322] = 0x3fb01b04 // 1.37582445
//         # USER FLOAT CONST: c[6][323] = 0x3fb01b04 // 1.37582445
//         # USER FLOAT CONST: c[6][324] = 0x3fb01b04 // 1.37582445
//         # USER FLOAT CONST: c[6][326] = 0x4139b182 // 11.60583687
//         # USER FLOAT CONST: c[6][327] = 0x4139b182 // 11.60583687
//         # USER FLOAT CONST: c[6][328] = 0x4139b182 // 11.60583687
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@0.10461649
//         ##    ~c0.y -> c[6][251] = 100.00%@0.14995982
//         ##    ~c0.z -> c[6][252] = 100.00%@0.21952623
//         ##    ~c2.x -> c[6][258] = 100.00%@0.00122067
//         ##    ~c2.y -> c[6][259] = 100.00%@0.72460938
//         ##    ~c2.w -> c[6][261] = 100.00%@0.25000000
//         ##    ~c3.x -> c[6][262] = 100.00%@0.00024414
//         ##    ~c3.y -> c[6][263] = 100.00%@0.00024414
//         ##    ~c3.z -> c[6][264] = 100.00%@0.00048828
//         ##    ~c3.w -> c[6][265] = 100.00%@-0.00012207
//         ##    ~c4.x -> c[6][266] = 100.00%@16.00000000
//         ##    ~c4.y -> c[6][267] = 100.00%@32.00000000
//         ##    ~c4.z -> c[6][268] = 100.00%@-8.00000000
//         ##    ~c4.w -> c[6][269] = 100.00%@-24.00000000
//         ##     c5.x -> c[6][270] = 67.84%@0.02600000 29.78%@0.07000000 2.38%@0.20000000
//         ##     c5.y -> c[6][271] = 67.84%@0.07000000 17.85%@0.33000001 7.14%@1.29999995 4.78%@1.00000000 2.38%@5.69999981
//         ##     c5.z -> c[6][272] = 67.84%@0.06100000 20.26%@1.39999998 5.95%@4.00000000 2.38%@4.69999981 2.38%@2.50000000 1.19%@5.50000000
//         ##    ~c17.x -> c[6][318] = 100.00%@0.71984631
//         ##    ~c17.y -> c[6][319] = 100.00%@0.26200262
//         ##    ~c17.z -> c[6][320] = 100.00%@0.64278758
//         ##    ~c18.x -> c[6][322] = 100.00%@1.37582445
//         ##    ~c18.y -> c[6][323] = 100.00%@1.37582445
//         ##    ~c18.z -> c[6][324] = 100.00%@1.37582445
//         ##    ~c19.x -> c[6][326] = 100.00%@11.60583687
//         ##    ~c19.y -> c[6][327] = 100.00%@11.60583687
//         ##    ~c19.z -> c[6][328] = 100.00%@11.60583687
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,CM,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xdb7cb112,0x00000069
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000069
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000069
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000069
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000069
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x313ef083,0x00000069
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x5c7ed577,0x00000069
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xdb7cb112,0x00000069
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000069
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Y8,0,0,0), 0x088dd07f,0x00000069
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,512x2048x0,1/0,A8R8G8B8,0,0,0), 0x022c99eb,0x00000069
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000069
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x313ef083,0x00000069
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x5c7ed577,0x00000069
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x854d53af,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x46e1620e,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7a68f631,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd47792fd,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xfd77879a,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x184b9963,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x35fbf818,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x07e9c1a2,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x55ad9fba,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0241c497,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x6d16aab4,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xfc8d2e4f,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x28fdcf9c,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xf4191384,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xa10a18b9,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xc58c0e37,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x83d00fff,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x82271f80,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xcb1fb1ec,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x9a6d5d84,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x268072f0,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xcb1fb1ec,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Y8,0,0,0), 0x088dd07f,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,512x2048x0,1/0,A8R8G8B8,0,0,0), 0x022c99eb,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x9a6d5d84,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x268072f0,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x9687683e,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xce65c0ba,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xeb8277f3,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3d227605,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x0f875db1,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbfa3eaec,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x5daec14b,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x53178279,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x53d93330,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xc7fa774d,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xa109e519,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7c95fdb1,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xc7fa774d,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Y8,0,0,0), 0x088dd07f,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,512x2048x0,1/0,A8R8G8B8,0,0,0), 0x022c99eb,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xa109e519,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7c95fdb1,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x5f4b0280,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Y8,0,0,0), 0x088dd07f,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,512x2048x0,1/0,A8R8G8B8,0,0,0), 0x022c99eb,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xf8b3a045,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x517e118c,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x30f24880,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x66c85f4f,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x25be8727,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xbd1b07d7,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x700ddd49,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x3cf8c38c,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xbd1b07d7,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Y8,0,0,0), 0x088dd07f,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,512x2048x0,1/0,A8R8G8B8,0,0,0), 0x022c99eb,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x700ddd49,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x3cf8c38c,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x7ae97928,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0d349112,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xf7b26d91,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x36c21a0d,0x000006e8
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x000006e8
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x000006e8
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x000006e8
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x000006e8
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x1cda309d,0x000006e8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x8e28ac69,0x000006e8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x5228b38c,0x00000820
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000820
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000820
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000820
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000820
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x1d98b2a7,0x00000820
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x5320b530,0x00000820
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x0c29faba,0x00000820
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000820
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000820
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000820
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000820
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x8dc70090,0x00000820
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x80f28093,0x00000820
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x0ad415fe,0x00000068
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000068
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,Y8,0,0,0), 0xf6ec8605,0x00000068
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,A8R8G8B8,0,0,0), 0xb5be1b60,0x00000068
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0xd0955dc4,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x7561f370,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x0ad415fe,0x00000138
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000138
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Y8,0,0,0), 0x088dd07f,0x00000138
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,512x2048x0,1/0,A8R8G8B8,0,0,0), 0x022c99eb,0x00000138
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0xd0955dc4,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x7561f370,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         RENDERTARGETINFO: 1,1280x1024,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x8f9ad0a4,0x00000138
//         STAGEINFO:(0x1,CM,1X,Linear/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,64x64x0,7/0,A8R8G8B8,0,0,0), 0x4f9dec7f,0x00000138
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Y8,0,0,0), 0x088dd07f,0x00000138
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,512x2048x0,1/0,A8R8G8B8,0,0,0), 0x022c99eb,0x00000138
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Wrap,0.00000000,1024x2048x0,1/0,Z24S8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x5,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0xfe82bc9a,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 5 when no alpha is required.
//         STAGEINFO:(0x6,2D,1X,Aniso/Linear/Point,Wrap/Wrap/Wrap,0.00000000,64x64x0,7/0,DXT45_A8R8G8B8,0,0,0), 0x42477742,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x18 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 2 : 
//          (attr 1 1 4) (attr 2 6 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texh r5, v2.xyzz, #6, #6, 2D
//         mulh r5.xyz, r5, r5
//         dp3r_sat r6.x, r5, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).y
//         mulr r6.x, r6.x, v1.w
//         madh r7.w, r5.w, -constant(8.00000000, 6.00000000, 1.00000000, 0.50000000).x, constant(8.00000000, 6.00000000, 1.00000000, 0.50000000).y
//         mulh r5.w, r5.w, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).w
//         ex2h r5.w, r5.w
//         addh r5.w, r5.w, constant(1.00000000, 0.50000000, 0.00000000, 7.00000000).w
//         texh r8, v2.xyzz, #0, #0, 2D
//         madh r6.y, r8.w, -v1.w, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).x
//         addh r9.w, -r6.y, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).x
//         mulh r8, r8, v1
//         mulh r6.yzw, r8.xxyz, r8.xxyz
//         mulh r9.xyz, r8.w, r6.yzww
//         texh r10, v2.xyzz, #5, #5, 2D
//         madh r6.yz, r10.xwyw, constant(4.07999992, 4.06451607, -2.07999992, -2.06451607).xxyw, constant(4.07999992, 4.06451607, -2.07999992, -2.06451607).xzww
//         mulh r6.yz, r8.w, r6
//         texh r8, v2.zwzz, #2, #2, 2D
//         cmpr r6.w, -|r8.x|, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).z, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).x
//         movr r10.xz, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770)
//         mulh r8.yzw, r10.xzzx, c[6][255].z
//         madh r10.xyz, c[6][255].z, -r10.zzxw, c[6][255]
//         madh r8.yzw, r6.x, r10.xxyz, r8
//         movr r10.xyz, v3
//         madh r10.xyz, r6.y, v5, r10
//         madh r10.xyz, r6.z, v4, r10
//         nrmh r11.xyz, r10
//         movr r45, c[6][267]
//         movr r45.x, constant(0.71984631, 0.71984631, 0.71984631, 0.71984631).x
//         movr r45.y, constant(0.26200262, 0.26200262, 0.26200262, 0.26200262).x
//         movr r45.z, constant(0.64278758, 0.64278758, 0.64278758, 0.64278758).x
//         dp3h_sat r6.x, r45, r11
//         nrmh r10.xyz, v7
//         dp3h r10.w, r10, r11
//         addh r11.w, -|r10.w|, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).x
//         lg2r r47, |r11.w|
//         mulr r47, r47, r8.w
//         ex2r r47, r47
//         movh r12.x, r47
//         lrph r11.w, r12.x, r8.z, r8.y
//         addh r8.y, r10.w, r10.w
//         madh r7.xyz, r11, -r8.y, r10
//         movr r44, c[6][267]
//         movr r44.x, constant(0.71984631, 0.71984631, 0.71984631, 0.71984631).x
//         movr r44.y, constant(0.26200262, 0.26200262, 0.26200262, 0.26200262).x
//         movr r44.z, constant(0.64278758, 0.64278758, 0.64278758, 0.64278758).x
//         dp3h r8.y, r7, r44
//         addh r8.y, r8.y, constant(-0.99924999, 1.44269502, 0.25000000, 0.00000000).x
//         mulh r5.w, r5.w, r8.y
//         mulh r5.w, r5.w, constant(-0.99924999, 1.44269502, 0.25000000, 0.00000000).y
//         ex2h_sat r5.w, r5.w
//         mulr r8.yz, constant(8.00000000, 6.00000000, 1.00000000, 0.50000000).xzww, v2.xzww
//         texh r10, r8.yzzz, #3, #3, 2D
//         movh r8.y, r10.w
//         madr r11.xy, v2.zwzw, constant(1.00000000, 0.50000000, 0.00000000, 7.00000000), constant(1.00000000, 0.50000000, 0.00000000, 7.00000000).zyzw
//         texh r12, r11.xyzz, #3, #3, 2D
//         movh r8.z, r12.w
//         madh r8.yz, r8, constant(4.07999992, 4.06451607, -2.07999992, -2.06451607).xxyw, constant(4.07999992, 4.06451607, -2.07999992, -2.06451607).xzww
//         dp2ar r8.w, r8.yzzw, r6.yzzw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).z
//         dp2ar r6.y, r6.yzzw, r6.yzzw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).x
//         rsqr r6.y, |r6.y|
//         dp2ar r6.z, r8.yzzw, r8.yzzw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).x
//         rsqr r6.z, |r6.z|
//         mulr r6.z, r6.y, r6.z
//         madr_sat r6.z, r8.w, r6.z, r6.z
//         mulr r8.yzw, r12.xxyz, r6.z
//         madh r8.yzw, r10.xxyz, r6.y, r8
//         mulh r8.yzw, r8, r8
//         movr r44, c[6][268]
//         movr r44.x, constant(1.37582445, 1.37582445, 1.37582445, 1.37582445).x
//         movr r44.y, constant(1.37582445, 1.37582445, 1.37582445, 1.37582445).x
//         movr r44.z, constant(1.37582445, 1.37582445, 1.37582445, 1.37582445).x
//         mulh r6.xyz, r6.x, r44
//         sner.c1 rc.x, r6.w, -r6.w
//         ife GT1.x , l0, l1
//         movr r45, c[6][253]
//         movr r45.x, constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r45.y, constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r45.z, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.w, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r10.xy, r45, v6
//         mulr r10.zw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).xyxz, v6.z
//         txlr r10, r10.xyzz, r10.w, #4, #4, SHADOW2D
//         movr r45, -c[6][253]
//         movr r45.x, -constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r45.y, -constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r45.z, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.w, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r12.xy, r45, v6
//         mulr r12.zw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).xyxz, v6.z
//         txlr r12, r12.xyzz, r12.w, #4, #4, SHADOW2D
//         movr r10.y, r12.x
//         movr r45, c[6][253].zwzw
//         movr r45.x, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.y, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         movr r45.z, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.w, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r12.xy, r45, v6
//         mulr r12.zw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).xyxz, v6.z
//         txlr r12, r12.xyzz, r12.w, #4, #4, SHADOW2D
//         movr r10.z, r12.x
//         movr r45, -c[6][253].zwzw
//         movr r45.x, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.y, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         movr r45.z, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r45.w, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r12.xy, r45, v6
//         mulr r12.zw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).xyxz, v6.z
//         txlr r12, r12.xyzz, r12.w, #4, #4, SHADOW2D
//         movr r10.w, r12.x
//         dp4h r6.w, r10, constant(-0.99924999, 1.44269502, 0.25000000, 0.00000000).z
//         movr r44, c[6][252].w
//         movr r44.x, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r44.y, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r44.z, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r44.w, constant(0.25000000, 0.25000000, 0.25000000, 0.25000000).x
//         movr r43, c[6][252].xyxy
//         movr r43.x, constant(0.00122067, 0.00122067, 0.00122067, 0.00122067).x
//         movr r43.y, constant(0.72460938, 0.72460938, 0.72460938, 0.72460938).x
//         movr r43.z, constant(0.00122067, 0.00122067, 0.00122067, 0.00122067).x
//         movr r43.w, constant(0.72460938, 0.72460938, 0.72460938, 0.72460938).x
//         madh r10.zw, v6.xyxy, r44, r43
//         movr r44, c[6][253]
//         movr r44.x, constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r44.y, constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r44.z, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.w, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r12.xy, r10.zwzw, r44
//         mulr r12.zw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).xyxz, v6.z
//         txlr r12, r12.xyzz, r12.w, #4, #4, SHADOW2D
//         movr r44, -c[6][253]
//         movr r44.x, -constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r44.y, -constant(0.00024414, 0.00024414, 0.00024414, 0.00024414).x
//         movr r44.z, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.w, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r13.xy, r10.zwzw, r44
//         mulr r13.zw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).xyxz, v6.z
//         txlr r13, r13.xyzz, r13.w, #4, #4, SHADOW2D
//         movr r12.y, r13.x
//         movr r44, c[6][253].zwzw
//         movr r44.x, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.y, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         movr r44.z, constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.w, constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r13.xy, r10.zwzw, r44
//         mulr r13.zw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).xyxz, v6.z
//         txlr r13, r13.xyzz, r13.w, #4, #4, SHADOW2D
//         movr r12.z, r13.x
//         movr r44, -c[6][253].zwzw
//         movr r44.x, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.y, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         movr r44.z, -constant(0.00048828, 0.00048828, 0.00048828, 0.00048828).x
//         movr r44.w, -constant(-0.00012207, -0.00012207, -0.00012207, -0.00012207).x
//         addr r13.xy, r10.zwzw, r44
//         mulr r13.zw, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).xyxz, v6.z
//         txlr r13, r13.xyzz, r13.w, #4, #4, SHADOW2D
//         movr r12.w, r13.x
//         dp4h r11.x, r12, constant(-0.99924999, 1.44269502, 0.25000000, 0.00000000).z
//         movr r10.xy, v6
//         movr r44, c[6][254].xyxy
//         movr r44.x, constant(16.00000000, 16.00000000, 16.00000000, 16.00000000).x
//         movr r44.y, constant(32.00000000, 32.00000000, 32.00000000, 32.00000000).x
//         movr r44.z, constant(16.00000000, 16.00000000, 16.00000000, 16.00000000).x
//         movr r44.w, constant(32.00000000, 32.00000000, 32.00000000, 32.00000000).x
//         movr r43, c[6][254].zzzw
//         movr r43.x, constant(-8.00000000, -8.00000000, -8.00000000, -8.00000000).x
//         movr r43.y, constant(-8.00000000, -8.00000000, -8.00000000, -8.00000000).x
//         movr r43.z, constant(-8.00000000, -8.00000000, -8.00000000, -8.00000000).x
//         movr r43.w, constant(-24.00000000, -24.00000000, -24.00000000, -24.00000000).x
//         madh r10, r10, r44, r43
//         maxh r11.yz, |r10.xxzw|, |r10.xyww|
//         addh_sat r10.xy, -r11.yzzw, constant(8.00000000, 6.00000000, 1.00000000, 0.50000000).x
//         lrph r12.x, r10.y, r11.x, r8.x
//         madr r8.x, r10.x, -r10.y, r10.x
//         cmph r8.x, -|r8.x|, r10.x, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).x
//         lrph r10.x, r8.x, r6.w, r12.x
//         l0:
//         movr r10.x, constant(1.00000000, 10.00000000, 0.00000000, 9.37751770).z
//         l1:
//         madh r6.xyz, r10.x, r6, r8.yzww
//         txlh r7, r7.xyzz, r7.w, #1, #1, LWBE
//         mulh r7.xyz, r7, r7
//         movr r44, c[6][269]
//         movr r44.x, constant(11.60583687, 11.60583687, 11.60583687, 11.60583687).x
//         movr r44.y, constant(11.60583687, 11.60583687, 11.60583687, 11.60583687).x
//         movr r44.z, constant(11.60583687, 11.60583687, 11.60583687, 11.60583687).x
//         mulh r8.xyz, r5.w, r44
//         madh r7.xyz, r10.x, r8, r7
//         mulh r5.xyz, r5, v1.w
//         mulh r5.xyz, r11.w, r5
//         mulh r5.xyz, r7, r5
//         madh r5.xyz, r9, r6, r5
//         movr r45, c[6][250]
//         movr r45.x, constant(0.10461649, 0.10461649, 0.10461649, 0.10461649).x
//         movr r45.y, constant(0.14995982, 0.14995982, 0.14995982, 0.14995982).x
//         movr r45.z, constant(0.21952623, 0.21952623, 0.21952623, 0.21952623).x
//         madh r5.xyz, r45, -r9.w, r5
//         movr r44, c[6][250]
//         movr r44.x, constant(0.10461649, 0.10461649, 0.10461649, 0.10461649).x
//         movr r44.y, constant(0.14995982, 0.14995982, 0.14995982, 0.14995982).x
//         movr r44.z, constant(0.21952623, 0.21952623, 0.21952623, 0.21952623).x
//         mulh r6.xyz, r9.w, r44
//         madh r5.xyz, v3.w, r5, r6
//         movh r5.w, r9.w
//         cmph r0, -|r9.w|, r9, r5
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R25, -0x3ffae148;         # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R17, R0;                # [  2][000010]
//     	IPA.PASS.CENTROID R2, a[0x7c];   # [  3][000018] POSITION_W
//     	MOV32I R26, -0x3ffbdef8;         # [  4][000020]
//     	IPA.SC R1, a[0x304], R17;        # [  5][000028] FIXED_FNC_TEXTURE_0_T
//     	MOV R3, c[0x6][0xff8];           # [  6][000030]
//     	IPA.SC R0, a[0x300], R17;        # [  7][000038] TEX0
//     	MUFU.RCP R16, R2;                # [  8][000040]
//     	TEX.T R12, R0, 0x0, 0x0, 2D;     # [  9][000048]
//     	MOV32I R6, 0x3f000000;           # [ 10][000050]
//     	TEX.T R4, R0, 0x5, 0x5, 2D, 0xa; # [ 11][000058]
//     	TEX.P R8, R0, 0x6, 0x6, 2D;      # [ 12][000060]
//     	FADD.FTZ R3, -R3, c[0x6][0xff8]; # [ 13][000068]
//     	IPA.SC R1, a[0x350], R17;        # [ 14][000070] TEX5
//     	IPA.SC R0, a[0x354], R17;        # [ 15][000078] FIXED_FNC_TEXTURE_5_T
//     	FMUL.FTZ R2, R1, R1;             # [ 16][000080]
//     	IPA.SC R27, a[0x358], R17;       # [ 17][000088] FIXED_FNC_TEXTURE_5_R
//     	FFMA.FTZ R2, R0, R0, R2;         # [ 18][000090]
//     	IPA.SC.CENTROID R7, a[0x288], R16; # [ 19][000098] COLOR_FRONT_DIFFUSE_BLUE
//     	FFMA.FTZ R2, R27, R27, R2;       # [ 20][0000a0]
//     	IPA.SC.CENTROID R24, a[0x28c], R16; # [ 21][0000a8] COLOR_FRONT_DIFFUSE_ALPHA
//     	MUFU.RSQ R28, R2;                # [ 22][0000b0]
//     	IPA.SC.CENTROID R23, a[0x284], R16; # [ 23][0000b8] COLOR_FRONT_DIFFUSE_GREEN
//     	FMUL.FTZ R2, R1, R28;            # [ 24][0000c0]
//     	IPA.SC R22, a[0x310], R17;       # [ 25][0000c8] TEX1
//     	FMUL.FTZ R1, R0, R28;            # [ 26][0000d0]
//     	IPA.SC R21, a[0x330], R17;       # [ 27][0000d8] TEX3
//     	FMUL.FTZ R0, R27, R28;           # [ 28][0000e0]
//     	IPA.SC R20, a[0x314], R17;       # [ 29][0000e8] FIXED_FNC_TEXTURE_1_T
//     	IPA.SC R29, a[0x334], R17;       # [ 30][0000f0] FIXED_FNC_TEXTURE_3_T
//     	IPA.SC R19, a[0x318], R17;       # [ 31][0000f8] FIXED_FNC_TEXTURE_1_R
//     	IPA.SC R18, a[0x338], R17;       # [ 32][000100] FIXED_FNC_TEXTURE_3_R
//     	FMUL.FMZ R14, R14, R7;           # [ 33][000108]
//     	FFMA.FMZ R27, R5, c[0x9][0x4], R25; # [ 34][000110]
//     	FMUL.FMZ R7, R15, R24;           # [ 35][000118]
//     	FMUL.FMZ R5, R13, R23;           # [ 36][000120]
//     	FFMA.FMZ R4, R4, c[0x9][0x8], R26; # [ 37][000128]
//     	IPA.SC R13, a[0x320], R17;       # [ 38][000130] TEX2
//     	FMUL.FMZ R28, R7, R27;           # [ 39][000138]
//     	FMUL.FMZ R27, R7, R4;            # [ 40][000140]
//     	FFMA.FMZ R22, R28, R21, R22;     # [ 41][000148]
//     	FFMA.FMZ R23, R28, R29, R20;     # [ 42][000150]
//     	IPA.SC R21, a[0x324], R17;       # [ 43][000158] FIXED_FNC_TEXTURE_2_T
//     	FFMA.FMZ R4, R27, R13, R22;      # [ 44][000160]
//     	IPA.SC R20, a[0x328], R17;       # [ 45][000168] FIXED_FNC_TEXTURE_2_R
//     	FFMA.FMZ R19, R28, R18, R19;     # [ 46][000170]
//     	IPA.SC.CENTROID R22, a[0x280], R16; # [ 47][000178] COLOR_FRONT_DIFFUSE_RED
//     	FMUL.FTZ R18, R4, R4;            # [ 48][000180]
//     	FFMA.FMZ R21, R27, R21, R23;     # [ 49][000188]
//     	FFMA.FMZ R20, R27, R20, R19;     # [ 50][000190]
//     	FFMA.FTZ R18, R21, R21, R18;     # [ 51][000198]
//     	FMUL.FMZ R19, R12, R22;          # [ 52][0001a0]
//     	FMUL.FMZ R14, R14, R14;          # [ 53][0001a8]
//     	FFMA.FTZ R12, R20, R20, R18;     # [ 54][0001b0]
//     	FMUL.FMZ R22, R19, R19;          # [ 55][0001b8]
//     	FMUL.FMZ R18, R5, R5;            # [ 56][0001c0]
//     	FMUL.FMZ R19, R7, R14;           # [ 57][0001c8]
//     	MUFU.RSQ R5, R12;                # [ 58][0001d0]
//     	FMUL.FMZ R14, R7, R22;           # [ 59][0001d8]
//     	FMUL.FMZ R18, R7, R18;           # [ 60][0001e0]
//     	FMUL.FTZ R4, R4, R5;             # [ 61][0001e8]
//     	FMUL.FTZ R7, R21, R5;            # [ 62][0001f0]
//     	FMUL.FTZ R29, R20, R5;           # [ 63][0001f8]
//     	FMUL.FTZ R12, R2, R4;            # [ 64][000200]
//     	FMUL.FMZ R8, R8, R8;             # [ 65][000208]
//     	FMUL.FMZ R20, R10, R10;          # [ 66][000210]
//     	FFMA.FTZ R5, R1, R7, R12;        # [ 67][000218]
//     	FMUL.FMZ R9, R9, R9;             # [ 68][000220]
//     	FMUL.FTZ R12, R8, 10;            # [ 69][000228]
//     	FFMA.FTZ R10, R0, R29, R5;       # [ 70][000230]
//     	IPA.SC R13, a[0x30c], R17;       # [ 71][000238] FIXED_FNC_TEXTURE_0_Q
//     	FMUL32I.FTZ R22, R4, 0x3f3847d9; # [ 72][000240]
//     	FFMA.FTZ R12, R9, 10, R12;       # [ 73][000248]
//     	FADD.FTZ R5, R10, R10;           # [ 74][000250]
//     	FFMA.FTZ R30, R7, c[0x9][0xc], R22; # [ 75][000258]
//     	FFMA.FTZ.SAT R21, R20, 10, R12;  # [ 76][000260]
//     	FFMA.FMZ R22, R7, -R5, R1;       # [ 77][000268]
//     	FADD.FTZ R7, -|R10|, 1;          # [ 78][000270]
//     	IPA.SC R12, a[0x308], R17;       # [ 79][000278] FIXED_FNC_TEXTURE_0_R
//     	FFMA.FMZ R10, R13, 0.5, R6;      # [ 80][000280]
//     	FMUL.FMZ R1, R21, R24;           # [ 81][000288]
//     	MUFU.LG2 R6, |R7|;               # [ 82][000290]
//     	FFMA.FMZ R21, R4, -R5, R2;       # [ 83][000298]
//     	FFMA.FMZ R7, R1, R3, c[0x6][0xff8]; # [ 84][0002a0]
//     	FFMA.FMZ R23, R29, -R5, R0;      # [ 85][0002a8]
//     	FMUL.FMZ R3, R13, 0.5;           # [ 86][0002b0]
//     	FMUL.FMZ R4, R6, R7;             # [ 87][0002b8]
//     	MOV R2, R12;                     # [ 88][0002c0]
//     	FMUL.FMZ R31, R1, c[0x6][0xff0]; # [ 89][0002c8]
//     	RRO.EX2 R32, R4;                 # [ 90][0002d0]
//     	MOV R0, R12;                     # [ 91][0002d8]
//     	TEX.NODEP.T R4, R2, 0x3, 0x3, 2D; # [ 92][0002e0]
//     	MUFU.EX2 R2, R32;                # [ 93][0002e8]
//     	FFMA.FTZ R3, R1, c[0x6][0xff4], -R31; # [ 94][0002f0]
//     	MOV R1, R10;                     # [ 95][0002f8]
//     	FFMA.FTZ R10, R2, R3, R31;       # [ 96][000300]
//     	TEX.T R12, R12, 0x2, 0x2, 2D, 0x1; # [ 97][000308]
//     	FMUL32I.FMZ R13, R11, 0x41160a50; # [ 98][000310]
//     	TEX.NODEP.P R0, R0, 0x3, 0x3, 2D; # [ 99][000318]
//     	FFMA.FTZ.SAT R29, R29, c[0x9][0x10], R30; # [100][000320]
//     	FFMA.FMZ R7, R7, c[0x9][0x4], R25; # [101][000328]
//     	RRO.EX2 R25, R13;                # [102][000330]
//     	FFMA.FMZ R13, R15, -R24, c[0x9][0x0]; # [103][000338]
//     	MUFU.EX2 R24, R25;               # [104][000340]
//     	FFMA.FTZ R15, R28, R28, c[0x9][0x0]; # [105][000348]
//     	FMUL32I.FTZ R25, R21, 0x3f3847d9; # [106][000350]
//     	FFMA.FMZ R3, R3, c[0x9][0x8], R26; # [107][000358]
//     	FMUL.FTZ R26, R7, R28;           # [108][000360]
//     	FFMA.FTZ R7, R7, R7, c[0x9][0x0]; # [109][000368]
//     	FFMA.FTZ R28, R22, c[0x9][0xc], R25; # [110][000370]
//     	FFMA.FTZ R25, R27, R27, R15;     # [111][000378]
//     	FFMA.FTZ R15, R3, R27, R26;      # [112][000380]
//     	FFMA.FTZ R3, R3, R3, R7;         # [113][000388]
//     	FADD.FTZ R26, R24, 7;            # [114][000390]
//     	FFMA.FTZ R27, R23, c[0x9][0x10], R28; # [115][000398]
//     	MUFU.RSQ R24, |R25|;             # [116][0003a0]
//     	MUFU.RSQ R7, |R3|;               # [117][0003a8]
//     	FADD32I.FTZ R27, R27, -0.99925;  # [118][0003b0]
//     	FMUL.FMZ R25, R26, R27;          # [119][0003b8]
//     	FMUL.FMZ R7, R24, R7;            # [120][0003c0]
//     	MOV32I R26, 0x40c00000;          # [121][0003c8]
//     	FADD.FTZ R3, -R13, 1;            # [122][0003d0]
//     	FMUL32I.FMZ R25, R25, 0x3fb8aa3b; # [123][0003d8]
//     	FFMA.FMZ.SAT R15, R15, R7, R7;   # [124][0003e0]
//     	FFMA.FMZ R13, R11, -8, R26;      # [125][0003e8]
//     	RRO.EX2 R11, R25;                # [126][0003f0]
//     	FMUL.FMZ R0, R0, R15;            # [127][0003f8]
//     	FMUL.FMZ R2, R2, R15;            # [128][000400]
//     	FMUL.FMZ R1, R1, R15;            # [129][000408]
//     	F2F R25, -|R12|;                 # [130][000410]
//     	FFMA.FMZ R15, R4, R24, R0;       # [131][000418]
//     	FFMA.FMZ R0, R6, R24, R2;        # [132][000420]
//     	FFMA.FMZ R1, R5, R24, R1;        # [133][000428]
//     	FCMP.GE R2, RZ, 0x3f800, R25;    # [134][000430]
//     	FMUL32I.FMZ R7, R29, 0x3fb01b04; # [135][000438]
//     	FSETP.NEU.FTZ.AND P0, PT, R2, -R2, PT; # [136][000440]
//     	MUFU.EX2.SAT R11, R11;           # [137][000448]
//     	FMUL.FMZ R4, R0, R0;             # [138][000450]
//     	FMUL.FMZ R5, R1, R1;             # [139][000458]
//     	FMUL.FMZ R6, R15, R15;           # [140][000460]
//     	@!P0 BRA.U L0638;                # [141][000468]
//     	@P0 MOV32I R26, 0x3e800000;      # [142][000470]
//     	@P0 IPA.SC R0, a[0x348], R17;    # [143][000478] FIXED_FNC_TEXTURE_4_R
//     	@P0 F2F.FTZ R24, R0;             # [144][000480]
//     	@P0 IPA.SC R15, a[0x344], R17;   # [145][000488] FIXED_FNC_TEXTURE_4_T
//     	@P0 FADD.FTZ R1, R15, 0x39800;   # [146][000490]
//     	@P0 IPA.SC R2, a[0x340], R17;    # [147][000498] TEX4
//     	@P0 FADD.FTZ R0, R2, 0x39800;    # [148][0004a0]
//     	@P0 FFMA.FMZ R27, R15, R26, c[0x9][0x18]; # [149][0004a8]
//     	@P0 TEX.LZ.DC.NODEP.T R28, R0, R24, 0x4, 0x4, 2D, 0x1; # [150][0004b0]
//     	@P0 FADD.FTZ R1, R15, 0xb9800;   # [151][0004b8]
//     	@P0 FADD.FTZ R0, R2, 0xb9800;    # [152][0004c0]
//     	@P0 FFMA.FMZ R26, R2, R26, c[0x9][0x14]; # [153][0004c8]
//     	@P0 TEX.LZ.DC.NODEP.T R30, R0, R24, 0x4, 0x4, 2D, 0x1; # [154][0004d0]
//     	@P0 FADD.FTZ R1, R15, 0xb9000;   # [155][0004d8]
//     	@P0 FADD.FTZ R0, R2, 0x3a000;    # [156][0004e0]
//     	@P0 TEX.LZ.DC.NODEP.T R25, R0, R24, 0x4, 0x4, 2D, 0x1; # [157][0004e8]
//     	@P0 FADD.FTZ R1, R15, 0x39000;   # [158][0004f0]
//     	@P0 FADD.FTZ R0, R2, 0xba000;    # [159][0004f8]
//     	@P0 TEX.LZ.DC.NODEP.T R29, R0, R24, 0x4, 0x4, 2D, 0x1; # [160][000500]
//     	@P0 FADD.FTZ R1, R27, 0x39800;   # [161][000508]
//     	@P0 FADD.FTZ R0, R26, 0x39800;   # [162][000510]
//     	@P0 TEX.LZ.DC.NODEP.P R31, R0, R24, 0x4, 0x4, 2D, 0x1; # [163][000518]
//     	@P0 FMUL.FTZ R28, R28, 0.25;     # [164][000520]
//     	@P0 FADD.FTZ R1, R27, 0xb9800;   # [165][000528]
//     	@P0 FADD.FTZ R0, R26, 0xb9800;   # [166][000530]
//     	@P0 FFMA.FTZ R28, R30, 0.25, R28; # [167][000538]
//     	@P0 TEX.LZ.DC.NODEP.P R0, R0, R24, 0x4, 0x4, 2D, 0x1; # [168][000540]
//     	@P0 FMUL.FTZ R1, R31, 0.25;      # [169][000548]
//     	@P0 FFMA.FTZ R30, R0, 0.25, R1;  # [170][000550]
//     	@P0 FADD.FTZ R1, R27, 0xb9000;   # [171][000558]
//     	@P0 FADD.FTZ R0, R26, 0x3a000;   # [172][000560]
//     	@P0 TEX.LZ.DC.NODEP.P R0, R0, R24, 0x4, 0x4, 2D, 0x1; # [173][000568]
//     	@P0 FADD.FTZ R1, R27, 0x39000;   # [174][000570]
//     	@P0 FFMA.FTZ R30, R0, 0.25, R30; # [175][000578]
//     	@P0 FADD.FTZ R0, R26, 0xba000;   # [176][000580]
//     	@P0 TEX.LZ.DC.NODEP.P R0, R0, R24, 0x4, 0x4, 2D, 0x1; # [177][000588]
//     	@P0 MOV32I R1, -0x3f000000;      # [178][000590]
//     	@P0 MOV32I R24, 0x42000000;      # [179][000598]
//     	@P0 FFMA.FMZ R15, R15, 32, R1;   # [180][0005a0]
//     	@P0 FFMA.FMZ R2, R2, 16, R1;     # [181][0005a8]
//     	@P0 FFMA.FMZ R1, R26, 16, R1;    # [182][0005b0]
//     	@P0 FFMA.FMZ R24, R27, R24, c[0x9][0x1c]; # [183][0005b8]
//     	@P0 FMNMX.FTZ R15, |R2|, |R15|, !PT; # [184][0005c0]
//     	@P0 FMNMX.FTZ R2, |R1|, |R24|, !PT; # [185][0005c8]
//     	@P0 FADD.FTZ.SAT R1, -R15, 8;    # [186][0005d0]
//     	@P0 FADD.FTZ.SAT R2, -R2, 8;     # [187][0005d8]
//     	@P0 FFMA.FTZ R24, R25, 0.25, R28; # [188][0005e0]
//     	@P0 FFMA.FMZ R15, R1, -R2, R1;   # [189][0005e8]
//     	@P0 F2F R15, -|R15|;             # [190][0005f0]
//     	@P0 FFMA.FTZ R24, R29, 0.25, R24; # [191][0005f8]
//     	@P0 FCMP.GE R1, R1, 0x3f800, R15; # [192][000600]
//     	@P0 FFMA.FTZ R0, R0, 0.25, R30;  # [193][000608]
//     	@P0 FADD.FTZ R0, R0, -R12;       # [194][000610]
//     	@P0 FFMA.FTZ R0, R2, R0, R12;    # [195][000618]
//     	@P0 FADD.FTZ R2, R24, -R0;       # [196][000620]
//     	@P0 FFMA.FTZ R12, R1, R2, R0;    # [197][000628]
//     	NOP;                             # [198][000630]
//     L0638:
//     	FMNMX R0, |R21|, |R22|, !PT;     # [199][000638]
//     	FMNMX R0, |R23|, R0, !PT;        # [200][000640]
//     	@!P0 MOV R12, RZ;                # [201][000648]
//     	MUFU.RCP R0, R0;                 # [202][000650]
//     	FFMA.FMZ R4, R12, R7, R4;        # [203][000658]
//     	FMUL R2, R23, R0;                # [204][000660]
//     	FMUL R1, R22, R0;                # [205][000668]
//     	FMUL R0, R21, R0;                # [206][000670]
//     	IPA.SC.CENTROID R22, a[0x28c], R16; # [207][000678] COLOR_FRONT_DIFFUSE_ALPHA
//     	FMUL32I.FMZ R21, R11, 0x4139b182; # [208][000680]
//     	TEX.LL.NODEP.P R0, R0, R13, 0x1, 0x1, LWBE, 0x7; # [209][000688]
//     	FMUL.FMZ R8, R8, R22;            # [210][000690]
//     	IPA.SC R13, a[0x31c], R17;       # [211][000698] FIXED_FNC_TEXTURE_1_Q
//     	FMUL.FMZ R9, R9, R22;            # [212][0006a0]
//     	FMUL.FMZ R17, R20, R22;          # [213][0006a8]
//     	FMUL.FMZ R8, R10, R8;            # [214][0006b0]
//     	FMUL.FMZ R9, R10, R9;            # [215][0006b8]
//     	FMUL.FMZ R10, R10, R17;          # [216][0006c0]
//     	FFMA.FMZ R5, R12, R7, R5;        # [217][0006c8]
//     	FFMA.FMZ R7, R12, R7, R6;        # [218][0006d0]
//     	FMUL32I.FMZ R15, R3, 0x3e198f11; # [219][0006d8]
//     	FMUL32I.FMZ R11, R3, 0x3dd6412c; # [220][0006e0]
//     	FMUL32I.FMZ R16, R3, 0x3e60cb7c; # [221][0006e8]
//     	F2F R6, -|R3|;                   # [222][0006f0]
//     	FMUL.FMZ R2, R2, R2;             # [223][0006f8]
//     	FMUL.FMZ R1, R1, R1;             # [224][000700]
//     	FMUL.FMZ R0, R0, R0;             # [225][000708]
//     	FFMA.FMZ R2, R12, R21, R2;       # [226][000710]
//     	FFMA.FMZ R1, R12, R21, R1;       # [227][000718]
//     	FFMA.FMZ R0, R12, R21, R0;       # [228][000720]
//     	FMUL.FMZ R2, R2, R10;            # [229][000728]
//     	FMUL.FMZ R1, R1, R9;             # [230][000730]
//     	FMUL.FMZ R0, R0, R8;             # [231][000738]
//     	FFMA.FMZ R2, R19, R4, R2;        # [232][000740]
//     	FFMA.FMZ R1, R18, R5, R1;        # [233][000748]
//     	FFMA.FMZ R0, R14, R7, R0;        # [234][000750]
//     	FFMA.FMZ R2, R3, -c[0x9][0x20], R2; # [235][000758]
//     	FFMA.FMZ R1, R3, -c[0x9][0x24], R1; # [236][000760]
//     	FFMA.FMZ R0, R3, -c[0x9][0x28], R0; # [237][000768]
//     	FFMA.FMZ R2, R13, R2, R16;       # [238][000770]
//     	FFMA.FMZ R1, R13, R1, R15;       # [239][000778]
//     	FFMA.FMZ R0, R13, R0, R11;       # [240][000780]
//     	FCMP.GE R2, R19, R2, R6;         # [241][000788]
//     	FCMP.GE R1, R18, R1, R6;         # [242][000790]
//     	FCMP.GE R0, R14, R0, R6;         # [243][000798]
//     	EXIT;                            # [244][0007a0]
//     	END
//     END_SECTION
// END_SHADER
// 
