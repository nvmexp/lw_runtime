// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x2dc041aa4894bd38
//         UCODE_HASH: 0xbb9bdaa12bd7627f
//         POOL: APP
//         VERSION: 20
//         # USES: 16017
//         // Time: 194.943ms [16.839 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 32
//         USED_TEXTURE_BITS: 0x1ff
//         TEXTURE_SLOTS: 9
//         SAMPLER_SLOTS: 9
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//             TEX07_S              PERSPECTIVE
//             TEX07_T              PERSPECTIVE
//             TEX07_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0xb0000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x2a2a0a0a
//         0x2a2a2a2a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c9, 8.00000000, -0.01872930, 0.07426100, -0.21211439 ; 0x41000000 0xbc996e30 0x3d981627 0xbe593484
        def c10, 1.57072878, 0.63661975, -1.00999999, -1.12000000 ; 0x3fc90da4 0x3f22f983 0xbf8147ae 0xbf8f5c29
        def c11, 10000.00000000, 0.00010001, 1.00000000, 1.00100005 ; 0x461c4000 0x38d1bc5b 0x3f800000 0x3f8020c5
        def c12, 1.00000000, 0.00000000, 0.06250000, -0.57452399 ; 0x3f800000 0x000000 0x3d800000 0xbf131401
        def c13, -0.79719388, 0.01456723, 1.00000000, 0.03125000 ; 0xbf4c14e6 0x3c6eab60 0x3f800000 0x3d000000
        def c14, 0.41608700, -0.30338100, 0.13519500, 0.22041900 ; 0x3ed5095b 0xbe9b54c1 0x3e0a708f 0x3e61b585
        def c15, -0.18368299, 0.07725400, -0.25281799, -0.23776400 ; 0xbe3c1765 0x3d9e3758 0xbe81715c 0xbe737868
        def c16, -0.05412700, 0.66291302, -0.03125000, 0.00000001 ; 0xbd5db446 0x3f29b4ab 0xbd000000 0x322bd517
        def c17, -0.48613599, 0.39774799, -0.39774799, 0.15915494 ; 0xbef8e6d1 0x3ecba5a0 0xbecba5a0 0x3e22f983
        def c18, -0.57452399, 0.10825300, -0.62500000, -0.75000000 ; 0xbf131401 0x3dddb3c0 0xbf200000 0xbf400000
        def c19, 0.87500000, 0.18750000, 0.50000000, 1.00000000 ; 0x3f600000 0x3e400000 0x3f000000 0x3f800000
        def c20, 0.31830987, 16.00000000, 0.00000000, 0.00000000 ; 0x3ea2f983 0x41800000 0x000000 0x000000
        def c21, 2.00000000, -1.00000000, 1.00000000, 3.00000000 ; 0x40000000 0xbf800000 0x3f800000 0x40400000
        dcl_texcoord0 v0.rg
        dcl_texcoord1 v1.rg
        dcl_texcoord2 v2.rgb
        dcl_texcoord3 v3.rgb
        dcl_texcoord4 v4.rgb
        dcl_texcoord5 v5.rgb
        dcl_texcoord6 v6.rgb
        dcl_texcoord7 v7.rgb
        dcl vPos.rg
        dcl_2d s0
        dcl_2d s1
        dcl_2d s2
        dcl_2d s3
        dcl_2d s4
        dcl_lwbe s5
        dcl_lwbe s6
        dcl_lwbe s7
        dcl_lwbe s8
        dsx r0, v7.xyxy
        dsy r1, v7.xyxy
        add r0, r0_abs, r1_abs
        mov r1.w, c3.x
        mad_pp r1, r0, r1.w, c2.xyxy
        mul r0.xy, vPos, c13.w
        texld_pp r0, r0, s1
        mul_pp r0, r1, r0.zwxy
        mul_pp r1, r0, c14.xxy
        mad_pp r1, r0.zwxy, c14.zzw, r1
        add r2, r1, v7.xyxy
        texldl r1, r2.xyxy, s0
        texldl r3, r2.zwzw, s0
        mul_pp r2, r0, c15.xxy
        mad_pp r2, r0.zwxy, c15.zzw, r2
        mov r1.y, r3.x
        add r2, r2, v7.xyxy
        texldl r3, r2.xyxy, s0
        texldl r2, r2.zwzw, s0
        mov r1.z, r3.x
        mov r1.w, r2.x
        add r2, r1, -v7.z
        mul_pp r1, r0, c16.xxy
        cmp_pp r2, r2, c12.x, c12.y
        mad_pp r1, r0.zwxy, c16.zzy, r1
        dp4_pp r4.w, r2, c12.z
        add r2, r1, v7.xyxy
        texldl r1, r2.xyxy, s0
        texldl r3, r2.zwzw, s0
        mul_pp r2, r0, c17.xxy
        mad_pp r2, r0.zwxy, c17.xxz, r2
        mov r1.y, r3.x
        add r2, r2, v7.xyxy
        texldl r3, r2.xyxy, s0
        texldl r2, r2.zwzw, s0
        mov r1.z, r3.x
        mov r1.w, r2.x
        add r2, r1, -v7.z
        mul_pp r1, r0, -c12.wwz
        cmp_pp r2, r2, c12.x, c12.y
        mad_pp r1, r0.zwxy, c18.xxy, r1
        dp4 r4.z, r2, c12.z
        add r2, r1, v7.xyxy
        texldl r1, r2.xyxy, s0
        texldl r2, r2.zwzw, s0
        mov r1.y, r2.x
        mad r2, r0, c18.zzw, v7.xyxy
        texldl r3, r2.xyxy, s0
        texldl r2, r2.zwzw, s0
        mov r1.z, r3.x
        mov r1.w, r2.x
        add_pp r4.w, r4.w, r4.z
        add r1, r1, -v7.z
        mad r3, r0, c19.xxy, v7.xyxy
        mad r2, r0.zwzw, c19.zzw, v7.xyxy
        texldl r0, r3.xyxy, s0
        texldl r3, r3.zwzw, s0
        mov r0.y, r3.x
        texldl r3, r2.xyxy, s0
        texldl r2, r2.zwzw, s0
        mov r0.z, r3.x
        mov r0.w, r2.x
        cmp_pp r1, r1, c12.x, c12.y
        add r0, r0, -v7.z
        dp4 r1.w, r1, c12.z
        cmp_pp r0, r0, c12.x, c12.y
        add_pp r1.w, r4.w, r1.w
        dp4 r0.w, r0, c12.z
        add_pp r1.w, r1.w, r0.w
        mov r0.xyz, c0
        mul r0, r0.xyz, c1.x
        mul_pp r0, r1.w, r0
        mov r1.w, c5.x
        add r2.w, -r1.w, c6.x
        texld r1, v0.xyx, s2
        mad_pp r5.w, r1.w, r2.w, c5.x
        nrm_pp r4.xyz, v6
        nrm_pp r7.xyz, v2
        add_pp r1.w, -r5.w, c21.z
        add_pp r2.xyz, r4, r7
        rcp_pp r1.w, r1.w
        nrm_pp r5.xyz, r2
        texld r2, v0.xyx, s3
        mad_pp r3.xyz, c21.x, r2.wyzw, c21.y
        mul_pp r2.w, r1.w, c21.w
        dp3_sat_pp r2.z, r3, r5
        add r1.w, r2.w, c21.z
        pow r3.w, r2.z, r2.w
        mul_pp r6, r1.xyz, c4.xyz
        mul r1.w, r1.w, r3.w
        log_pp r3.w, r2.w
        mul_sat r1.w, r1.w, c17.w
        mul r1, r0, r1.w
        dp3_sat_pp r7.w, r3, r4
        mad_pp r2.w, r7.w, c9.y, c9.z
        add_pp r2.z, -r7.w, c21.z
        mad_pp r2.w, r2.w, r7.w, c9.w
        rsq_pp r2.z, r2.z
        mad_pp r2.w, r2.w, r7.w, c10.x
        rcp_pp r2.z, r2.z
        mul_pp r0, r0, r6
        mul_pp r2.w, r2.w, r2.z
        mul_sat_pp r9.w, r4.z, c20.y
        mad r2.xy, r2.w, c10.y, c10.wzzw
        mul r2.xy, r2, r2
        dp3_sat_pp r4.w, r3, r7
        mad_pp r2.w, r4.w, c9.y, c9.z
        add_pp r2.z, -r4.w, c21.z
        mad_pp r2.w, r2.w, r4.w, c9.w
        rsq_pp r2.z, r2.z
        mad_pp r2.w, r2.w, r4.w, c10.x
        rcp_pp r2.z, r2.z
        rcp r4.x, r2.x
        rcp r4.y, r2.y
        mul_pp r2.w, r2.w, r2.z
        add r2.z, r4.x, c13.x
        mad r2.xy, r2.w, c10.y, c10.zwzw
        add r2.w, -r4.y, c11.x
        mul r2.xy, r2, r2
        mul r2.z, r2.z, c13.y
        rcp r2.x, r2.x
        rcp r2.y, r2.y
        mul r2.z, r2.w, r2.z
        add r2.x, -r2.x, c11.x
        add r2.w, r2.y, c13.x
        mul_pp r2.y, r5.w, r5.w
        mul r2.z, r2.z, r2.x
        mad_pp r10.w, r5.w, -r2.y, c21.z
        mul r4.w, r2.x, c11.y
        add_pp r4.xy, -r10.w, c11.zwzw
        mov r2.y, c21.z
        mad_pp r10.z, c7.x, -r5.w, r2.y
        mul r2.z, r2.z, r4.y
        mad_sat r5.w, r2.z, c16.w, r4.x
        mad r4.z, r2.w, -c13.y, c13.z
        add_pp r2, r6, c21.y
        mul r4.z, r4.z, c7.x
        mul r1, r1, r5.w
        mad r5, r4.z, r2, c21.z
        mad_sat_pp r10.y, r4.y, r4.w, r4.x
        mul r1, r1, r5
        texld r2, v1.xyx, s4
        mul_pp r0, r0, r10.z
        mul r4, r1, r2.w
        mul_pp r0, r10.w, r0
        dp3_pp r1.x, r7, v3
        dp3_pp r1.y, r7, v4
        dp3_pp r1.z, r7, v5
        dp3_pp r9.x, r3, v3
        dp3_pp r9.y, r3, v4
        dp3_pp r9.z, r3, v5
        mul_pp r0, r2.x, r0
        dp3_pp r1.w, -r1, r9
        mul_pp r0, r7.w, r0
        add_pp r2.z, r1.w, r1.w
        add_pp r1.w, -r3.w, c9.x
        mad_pp r1.xyz, r9, -r2.z, -r1
        texldl_pp r7, r1, s6
        texldl_pp r1, r1, s8
        lrp_pp r3, c8.x, r1.xyz, r7.xyz
        texld_pp r8, r9, s5
        texld_pp r7, r9, s7
        lrp_pp r1, c8.x, r7.xyz, r8.xyz
        mul_pp r3, r10.y, r3
        mul_pp r1, r6, r1
        mul r3, r5, r3
        mul_pp r1, r10.z, r1
        mul r3, r2.w, r3
        mul_pp r1, r10.w, r1
        mad_pp r0, r0, c20.x, r4
        mad_pp r1, r1, r2.x, r3
        mad oC0, r0, r9.w, r1
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0009 0x41000000 0xbc996e30
//         0x3d981627 0xbe593484 0x05000051 0xa00f000a
//         0x3fc90da4 0x3f22f983 0xbf8147ae 0xbf8f5c29
//         0x05000051 0xa00f000b 0x461c4000 0x38d1bc5b
//         0x3f800000 0x3f8020c5 0x05000051 0xa00f000c
//         0x3f800000 0x00000000 0x3d800000 0xbf131401
//         0x05000051 0xa00f000d 0xbf4c14e6 0x3c6eab60
//         0x3f800000 0x3d000000 0x05000051 0xa00f000e
//         0x3ed5095b 0xbe9b54c1 0x3e0a708f 0x3e61b585
//         0x05000051 0xa00f000f 0xbe3c1765 0x3d9e3758
//         0xbe81715c 0xbe737868 0x05000051 0xa00f0010
//         0xbd5db446 0x3f29b4ab 0xbd000000 0x322bd517
//         0x05000051 0xa00f0011 0xbef8e6d1 0x3ecba5a0
//         0xbecba5a0 0x3e22f983 0x05000051 0xa00f0012
//         0xbf131401 0x3dddb3c0 0xbf200000 0xbf400000
//         0x05000051 0xa00f0013 0x3f600000 0x3e400000
//         0x3f000000 0x3f800000 0x05000051 0xa00f0014
//         0x3ea2f983 0x41800000 0x00000000 0x00000000
//         0x05000051 0xa00f0015 0x40000000 0xbf800000
//         0x3f800000 0x40400000 0x0200001f 0x80000005
//         0x90030000 0x0200001f 0x80010005 0x90030001
//         0x0200001f 0x80020005 0x90070002 0x0200001f
//         0x80030005 0x90070003 0x0200001f 0x80040005
//         0x90070004 0x0200001f 0x80050005 0x90070005
//         0x0200001f 0x80060005 0x90070006 0x0200001f
//         0x80070005 0x90070007 0x0200001f 0x80000000
//         0x90031000 0x0200001f 0x90000000 0xa00f0800
//         0x0200001f 0x90000000 0xa00f0801 0x0200001f
//         0x90000000 0xa00f0802 0x0200001f 0x90000000
//         0xa00f0803 0x0200001f 0x90000000 0xa00f0804
//         0x0200001f 0x98000000 0xa00f0805 0x0200001f
//         0x98000000 0xa00f0806 0x0200001f 0x98000000
//         0xa00f0807 0x0200001f 0x98000000 0xa00f0808
//         0x0200005b 0x800f0000 0x90440007 0x0200005c
//         0x800f0001 0x90440007 0x03000002 0x800f0000
//         0x8be40000 0x8be40001 0x02000001 0x80080001
//         0xa0000003 0x04000004 0x802f0001 0x80e40000
//         0x80ff0001 0xa0440002 0x03000005 0x80030000
//         0x90e41000 0xa0ff000d 0x03000042 0x802f0000
//         0x80e40000 0xa0e40801 0x03000005 0x802f0000
//         0x80e40001 0x804e0000 0x03000005 0x802f0001
//         0x80e40000 0xa050000e 0x04000004 0x802f0001
//         0x804e0000 0xa0fa000e 0x80e40001 0x03000002
//         0x800f0002 0x80e40001 0x90440007 0x0300005f
//         0x800f0001 0x80440002 0xa0e40800 0x0300005f
//         0x800f0003 0x80ee0002 0xa0e40800 0x03000005
//         0x802f0002 0x80e40000 0xa050000f 0x04000004
//         0x802f0002 0x804e0000 0xa0fa000f 0x80e40002
//         0x02000001 0x80020001 0x80000003 0x03000002
//         0x800f0002 0x80e40002 0x90440007 0x0300005f
//         0x800f0003 0x80440002 0xa0e40800 0x0300005f
//         0x800f0002 0x80ee0002 0xa0e40800 0x02000001
//         0x80040001 0x80000003 0x02000001 0x80080001
//         0x80000002 0x03000002 0x800f0002 0x80e40001
//         0x91aa0007 0x03000005 0x802f0001 0x80e40000
//         0xa0500010 0x04000058 0x802f0002 0x80e40002
//         0xa000000c 0xa055000c 0x04000004 0x802f0001
//         0x804e0000 0xa05a0010 0x80e40001 0x03000009
//         0x80280004 0x80e40002 0xa0aa000c 0x03000002
//         0x800f0002 0x80e40001 0x90440007 0x0300005f
//         0x800f0001 0x80440002 0xa0e40800 0x0300005f
//         0x800f0003 0x80ee0002 0xa0e40800 0x03000005
//         0x802f0002 0x80e40000 0xa0500011 0x04000004
//         0x802f0002 0x804e0000 0xa0a00011 0x80e40002
//         0x02000001 0x80020001 0x80000003 0x03000002
//         0x800f0002 0x80e40002 0x90440007 0x0300005f
//         0x800f0003 0x80440002 0xa0e40800 0x0300005f
//         0x800f0002 0x80ee0002 0xa0e40800 0x02000001
//         0x80040001 0x80000003 0x02000001 0x80080001
//         0x80000002 0x03000002 0x800f0002 0x80e40001
//         0x91aa0007 0x03000005 0x802f0001 0x80e40000
//         0xa1af000c 0x04000058 0x802f0002 0x80e40002
//         0xa000000c 0xa055000c 0x04000004 0x802f0001
//         0x804e0000 0xa0500012 0x80e40001 0x03000009
//         0x80040004 0x80e40002 0xa0aa000c 0x03000002
//         0x800f0002 0x80e40001 0x90440007 0x0300005f
//         0x800f0001 0x80440002 0xa0e40800 0x0300005f
//         0x800f0002 0x80ee0002 0xa0e40800 0x02000001
//         0x80020001 0x80000002 0x04000004 0x800f0002
//         0x80e40000 0xa0fa0012 0x90440007 0x0300005f
//         0x800f0003 0x80440002 0xa0e40800 0x0300005f
//         0x800f0002 0x80ee0002 0xa0e40800 0x02000001
//         0x80040001 0x80000003 0x02000001 0x80080001
//         0x80000002 0x03000002 0x80280004 0x80ff0004
//         0x80aa0004 0x03000002 0x800f0001 0x80e40001
//         0x91aa0007 0x04000004 0x800f0003 0x80e40000
//         0xa0500013 0x90440007 0x04000004 0x800f0002
//         0x80ee0000 0xa0fa0013 0x90440007 0x0300005f
//         0x800f0000 0x80440003 0xa0e40800 0x0300005f
//         0x800f0003 0x80ee0003 0xa0e40800 0x02000001
//         0x80020000 0x80000003 0x0300005f 0x800f0003
//         0x80440002 0xa0e40800 0x0300005f 0x800f0002
//         0x80ee0002 0xa0e40800 0x02000001 0x80040000
//         0x80000003 0x02000001 0x80080000 0x80000002
//         0x04000058 0x802f0001 0x80e40001 0xa000000c
//         0xa055000c 0x03000002 0x800f0000 0x80e40000
//         0x91aa0007 0x03000009 0x80080001 0x80e40001
//         0xa0aa000c 0x04000058 0x802f0000 0x80e40000
//         0xa000000c 0xa055000c 0x03000002 0x80280001
//         0x80ff0004 0x80ff0001 0x03000009 0x80080000
//         0x80e40000 0xa0aa000c 0x03000002 0x80280001
//         0x80ff0001 0x80ff0000 0x02000001 0x80070000
//         0xa0e40000 0x03000005 0x800f0000 0x80a40000
//         0xa0000001 0x03000005 0x802f0000 0x80ff0001
//         0x80e40000 0x02000001 0x80080001 0xa0000005
//         0x03000002 0x80080002 0x81ff0001 0xa0000006
//         0x03000042 0x800f0001 0x90040000 0xa0e40802
//         0x04000004 0x80280005 0x80ff0001 0x80ff0002
//         0xa0000005 0x02000024 0x80270004 0x90e40006
//         0x02000024 0x80270007 0x90e40002 0x03000002
//         0x80280001 0x81ff0005 0xa0aa0015 0x03000002
//         0x80270002 0x80e40004 0x80e40007 0x02000006
//         0x80280001 0x80ff0001 0x02000024 0x80270005
//         0x80e40002 0x03000042 0x800f0002 0x90040000
//         0xa0e40803 0x04000004 0x80270003 0xa0000015
//         0x80e70002 0xa0550015 0x03000005 0x80280002
//         0x80ff0001 0xa0ff0015 0x03000008 0x80340002
//         0x80e40003 0x80e40005 0x03000002 0x80080001
//         0x80ff0002 0xa0aa0015 0x03000020 0x80080003
//         0x80aa0002 0x80ff0002 0x03000005 0x802f0006
//         0x80a40001 0xa0a40004 0x03000005 0x80080001
//         0x80ff0001 0x80ff0003 0x0200000f 0x80280003
//         0x80ff0002 0x03000005 0x80180001 0x80ff0001
//         0xa0ff0011 0x03000005 0x800f0001 0x80e40000
//         0x80ff0001 0x03000008 0x80380007 0x80e40003
//         0x80e40004 0x04000004 0x80280002 0x80ff0007
//         0xa0550009 0xa0aa0009 0x03000002 0x80240002
//         0x81ff0007 0xa0aa0015 0x04000004 0x80280002
//         0x80ff0002 0x80ff0007 0xa0ff0009 0x02000007
//         0x80240002 0x80aa0002 0x04000004 0x80280002
//         0x80ff0002 0x80ff0007 0xa000000a 0x02000006
//         0x80240002 0x80aa0002 0x03000005 0x802f0000
//         0x80e40000 0x80e40006 0x03000005 0x80280002
//         0x80ff0002 0x80aa0002 0x03000005 0x80380009
//         0x80aa0004 0xa0550014 0x04000004 0x80030002
//         0x80ff0002 0xa055000a 0xa0eb000a 0x03000005
//         0x80030002 0x80e40002 0x80e40002 0x03000008
//         0x80380004 0x80e40003 0x80e40007 0x04000004
//         0x80280002 0x80ff0004 0xa0550009 0xa0aa0009
//         0x03000002 0x80240002 0x81ff0004 0xa0aa0015
//         0x04000004 0x80280002 0x80ff0002 0x80ff0004
//         0xa0ff0009 0x02000007 0x80240002 0x80aa0002
//         0x04000004 0x80280002 0x80ff0002 0x80ff0004
//         0xa000000a 0x02000006 0x80240002 0x80aa0002
//         0x02000006 0x80010004 0x80000002 0x02000006
//         0x80020004 0x80550002 0x03000005 0x80280002
//         0x80ff0002 0x80aa0002 0x03000002 0x80040002
//         0x80000004 0xa000000d 0x04000004 0x80030002
//         0x80ff0002 0xa055000a 0xa0ee000a 0x03000002
//         0x80080002 0x81550004 0xa000000b 0x03000005
//         0x80030002 0x80e40002 0x80e40002 0x03000005
//         0x80040002 0x80aa0002 0xa055000d 0x02000006
//         0x80010002 0x80000002 0x02000006 0x80020002
//         0x80550002 0x03000005 0x80040002 0x80ff0002
//         0x80aa0002 0x03000002 0x80010002 0x81000002
//         0xa000000b 0x03000002 0x80080002 0x80550002
//         0xa000000d 0x03000005 0x80220002 0x80ff0005
//         0x80ff0005 0x03000005 0x80040002 0x80aa0002
//         0x80000002 0x04000004 0x8028000a 0x80ff0005
//         0x81550002 0xa0aa0015 0x03000005 0x80080004
//         0x80000002 0xa055000b 0x03000002 0x80230004
//         0x81ff000a 0xa0ee000b 0x02000001 0x80020002
//         0xa0aa0015 0x04000004 0x8024000a 0xa0000007
//         0x81ff0005 0x80550002 0x03000005 0x80040002
//         0x80aa0002 0x80550004 0x04000004 0x80180005
//         0x80aa0002 0xa0ff0010 0x80000004 0x04000004
//         0x80040004 0x80ff0002 0xa155000d 0xa0aa000d
//         0x03000002 0x802f0002 0x80e40006 0xa0550015
//         0x03000005 0x80040004 0x80aa0004 0xa0000007
//         0x03000005 0x800f0001 0x80e40001 0x80ff0005
//         0x04000004 0x800f0005 0x80aa0004 0x80e40002
//         0xa0aa0015 0x04000004 0x8032000a 0x80550004
//         0x80ff0004 0x80000004 0x03000005 0x800f0001
//         0x80e40001 0x80e40005 0x03000042 0x800f0002
//         0x90040001 0xa0e40804 0x03000005 0x802f0000
//         0x80e40000 0x80aa000a 0x03000005 0x800f0004
//         0x80e40001 0x80ff0002 0x03000005 0x802f0000
//         0x80ff000a 0x80e40000 0x03000008 0x80210001
//         0x80e40007 0x90e40003 0x03000008 0x80220001
//         0x80e40007 0x90e40004 0x03000008 0x80240001
//         0x80e40007 0x90e40005 0x03000008 0x80210009
//         0x80e40003 0x90e40003 0x03000008 0x80220009
//         0x80e40003 0x90e40004 0x03000008 0x80240009
//         0x80e40003 0x90e40005 0x03000005 0x802f0000
//         0x80000002 0x80e40000 0x03000008 0x80280001
//         0x81e40001 0x80e40009 0x03000005 0x802f0000
//         0x80ff0007 0x80e40000 0x03000002 0x80240002
//         0x80ff0001 0x80ff0001 0x03000002 0x80280001
//         0x81ff0003 0xa0000009 0x04000004 0x80270001
//         0x80e40009 0x81aa0002 0x81e40001 0x0300005f
//         0x802f0007 0x80e40001 0xa0e40806 0x0300005f
//         0x802f0001 0x80e40001 0xa0e40808 0x04000012
//         0x802f0003 0xa0000008 0x80a40001 0x80a40007
//         0x03000042 0x802f0008 0x80e40009 0xa0e40805
//         0x03000042 0x802f0007 0x80e40009 0xa0e40807
//         0x04000012 0x802f0001 0xa0000008 0x80a40007
//         0x80a40008 0x03000005 0x802f0003 0x8055000a
//         0x80e40003 0x03000005 0x802f0001 0x80e40006
//         0x80e40001 0x03000005 0x800f0003 0x80e40005
//         0x80e40003 0x03000005 0x802f0001 0x80aa000a
//         0x80e40001 0x03000005 0x800f0003 0x80ff0002
//         0x80e40003 0x03000005 0x802f0001 0x80ff000a
//         0x80e40001 0x04000004 0x802f0000 0x80e40000
//         0xa0000014 0x80e40004 0x04000004 0x802f0001
//         0x80e40001 0x80000002 0x80e40003 0x04000004
//         0x800f0800 0x80e40000 0x80ff0009 0x80e40001
//         0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3e0a708f // 0.13519500
//         COP_CONST[1]: 0x3e61b585 // 0.22041900
//         COP_CONST[2]: 0xbe81715c // -0.25281798
//         COP_CONST[3]: 0xbe737868 // -0.23776400
//         COP_CONST[4]: 0x3f29b4ab // 0.66291304
//         COP_CONST[5]: 0xbef8e6d1 // -0.48613600
//         COP_CONST[6]: 0xbecba5a0 // -0.39774800
//         COP_CONST[7]: 0xbf131401 // -0.57452400
//         COP_CONST[8]: 0x3dddb3c0 // 0.10825300
//         COP_CONST[9]: 0xbc996e30 // -0.01872930
//         COP_CONST[10]: 0xbe593484 // -0.21211440
//         COP_CONST[11]: 0x3fc90da4 // 1.57072876
//         COP_CONST[12]: 0xbf8f5c29 // -1.12000000
//         COP_CONST[13]: 0xbf8147ae // -1.00999999
//         COP_CONST[14]: 0x322bd517 // 0.00000001
//         COP_CONST[15]: 0x3c6eab60 // 0.01456723
//         COP_CONST[16]: 0x3ea2f983 // 0.31830988
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x3f7fff07 // 0.99998512
//         # USER FLOAT CONST: c[6][251] = 0x3f5c7352 // 0.86113464
//         # USER FLOAT CONST: c[6][252] = 0x3f29585d // 0.66150456
//         # USER FLOAT CONST: c[6][254] = 0x403fffff // 2.99999976
//         # USER FLOAT CONST: c[6][262] = 0x40400000 // 3.00000000
//         # USER FLOAT CONST: c[6][278] = 0x3f800000 // 1.00000000
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@0.99998512
//         ##    ~c0.y -> c[6][251] = 100.00%@0.86113464
//         ##    ~c0.z -> c[6][252] = 100.00%@0.66150456
//         ##    ~c1.x -> c[6][254] = 100.00%@2.99999976
//         ##     c2.x -> c[6][258] = 57.14%@0.00133512 29.22%@0.00037978 13.64%@0.00469365
//         ##     c2.y -> c[6][259] = 57.14%@0.00174908 29.22%@0.00049753 13.64%@0.00614895
//         ##    ~c3.x -> c[6][262] = 100.00%@3.00000000
//         ##     c4.x -> c[6][266] = 56.50%@1.00000000 29.87%@0.85490200 4.55%@0.00000000 1.95%@0.56862748 0.65%@0.52156864 0.65%@0.74901960 0.65%@0.60784316
//         ##     c4.y -> c[6][267] = 56.50%@1.00000000 29.87%@0.85490200 4.55%@0.00000000 1.95%@0.56862748 0.65%@0.52156864 0.65%@0.74901960 0.65%@0.60784316
//         ##     c4.z -> c[6][268] = 56.50%@1.00000000 29.87%@0.85490200 4.55%@0.00000000 1.95%@0.56862748 0.65%@0.52156864 0.65%@0.74901960 0.65%@0.60784316
//         ##     c5.x -> c[6][270] = 61.04%@0.00000000 29.87%@0.08000000 3.90%@0.36000000 1.95%@0.21500000 0.65%@0.05000000 0.65%@0.40000000 0.65%@0.01000000
//         ##     c6.x -> c[6][274] = 31.82%@0.05000000 29.87%@0.54999996 18.18%@0.10000000 7.14%@0.06500001 4.55%@0.80000000 1.95%@0.78000000 1.30%@0.00000000
//         ##    ~c7.x -> c[6][278] = 100.00%@1.00000000
//         ##     c8.x -> c[6][282] = 98.70%@0.24147772 1.30%@0.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,CM,1X)        , (0x6,CM,1X)        , (0x7,CM,1X)        , (0x8,CM,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000821
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000821
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xa43e1775,0x00000821
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT45_A8R8G8B8,0,0,0), 0xe594c644,0x00000821
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000821
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000821
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000821
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000821
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000821
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x000012b0
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x000012b0
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0x0ffe7da6,0x000012b0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x4a96bff0,0x000012b0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,Y8,0,0,0), 0x9b3ea1d3,0x000012b0
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x000012b0
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x000012b0
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x000012b0
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x000012b0
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000478
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000478
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x11ee10fb,0x00000478
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x00000478
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000478
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000478
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x00000478
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000478
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x00000478
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000138
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xf47dbf74,0x00000138
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x7aa3b469,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000138
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000138
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000138
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000138
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT23_A8R8G8B8,0,0,0), 0x127706f0,0x00000138
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT45_A8R8G8B8,0,0,0), 0xee24ff04,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,Y8,0,0,0), 0xc127e7b3,0x00000138
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000138
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x00000138
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000138
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0x558e6de1,0x00000138
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x000001a0
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT1_A1R5G5B5,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x000001a0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000001a0
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000001a0
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000410
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000410
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x68c7f611,0x00000410
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xa0b965ed,0x00000410
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000410
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000410
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000410
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000410
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000410
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000138
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0x3379a3b0,0x00000138
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000138
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x00000138
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000138
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000138
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x000002d8
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xc235d699,0x000002d8
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x000002d8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x000002d8
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x000002d8
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000002d8
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x000003a8
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x000003a8
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x7abd3a37,0x000003a8
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x000003a8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000003a8
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x000003a8
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000003a8
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x000003a8
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000003a8
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x000000d0
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xf47dbf74,0x000000d0
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x000000d0
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x000000d0
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000000d0
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x000000d0
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0xd7f717e3,0x000000d0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x361f9b48,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,Y8,0,0,0), 0x65a295a8,0x000000d0
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x000000d0
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x000000d0
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x000000d0
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x000000d0
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000270
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x3ac04bc6,0x00000270
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x00000270
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000270
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000270
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000270
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000270
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000068
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT23_A8R8G8B8,0,0,0), 0xe7185993,0x00000068
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT45_A8R8G8B8,0,0,0), 0xee24ff04,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,Y8,0,0,0), 0xc127e7b3,0x00000068
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x00000068
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000068
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0x558e6de1,0x00000068
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000138
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000138
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000138
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000138
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000138
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000208
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT23_A8R8G8B8,0,0,0), 0x127706f0,0x00000208
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x00000208
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000208
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000208
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000208
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000208
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000068
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT23_A8R8G8B8,0,0,0), 0xb5a8992d,0x00000068
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT45_A8R8G8B8,0,0,0), 0xbdff0a88,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,Y8,0,0,0), 0xdbf8ce3c,0x00000068
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000068
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000068
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x000002d8
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x000002d8
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x58a9cbbd,0x000002d8
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x000002d8
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,Y8,0,0,0), 0xba011674,0x000002d8
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x000002d8
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x000002d8
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x000002d8
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x000002d8
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x000000d0
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT23_A8R8G8B8,0,0,0), 0x969c2e89,0x000000d0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,DXT45_A8R8G8B8,0,0,0), 0xee24ff04,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,2048x2048x0,12/0,Y8,0,0,0), 0xc127e7b3,0x000000d0
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x000000d0
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x000000d0
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x000000d0
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0x558e6de1,0x000000d0
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000068
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0x7ee5d261,0x00000068
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x6a3e7261,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,Y8,0,0,0), 0x8c0b0160,0x00000068
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000068
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000068
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0x7ee5d261,0x00000068
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x6a3e7261,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,Y8,0,0,0), 0x8c0b0160,0x00000068
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000068
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000068
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000138
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000138
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0x0bb1a61a,0x00000138
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,Y8,0,0,0), 0x5f89ce15,0x00000138
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000138
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x00000138
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000138
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x00000138
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000068
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xbf3e83e1,0x00000068
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000068
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x00000068
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x00000068
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x00000068
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,A8Y8,0,0,0), 0x4d0cc49f,0x00000068
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,A8Y8,0,0,0), 0x4d0cc49f,0x00000068
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x00000068
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000068
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x00000068
//         RENDERTARGETINFO: 1,2560x2048,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,2048x2048x0,1/0,G16R16F,0,0,0), 0x00000000,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Point/Point/None,Wrap/Wrap/Wrap,0.00000000,32x32x0,1/0,Q8W8V8U8,0,0,0), 0xc4bb32c0,0x000000d0
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT23_A8R8G8B8,0,0,0), 0xf14c6e64,0x000000d0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,4x4x0,3/0,DXT45_A8R8G8B8,0,0,0), 0x041f849f,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,A8Y8,0,0,0), 0xa4c3d14b,0x000000d0
//         STAGEINFO:(0x5,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x9b409d9b,0x000000d0
//         STAGEINFO:(0x6,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,256x256x0,9/0,X8R8G8B8,0,0,0), 0xa370ad0a,0x000000d0
//         STAGEINFO:(0x7,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,128x128x0,8/0,X8R8G8B8,0,0,0), 0x510bd521,0x000000d0
//         STAGEINFO:(0x8,CM,1X,Aniso/Linear/Linear,Clamp/Clamp/Wrap,0.00000000,1x1x0,1/0,Y8,0,0,0), 0x00000000,0x000000d0
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "ATTR02")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 1 : 
//          (attr 1 8 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         ddx_finer r47.xy, v8.xyxy
//         ddx_finer r46.xy, v8.xyxy
//         movr r5.xy, r47.xyxy
//         movr r5.zw, r46.xyxy
//         ddy_finer r47.xy, v8.xyxy
//         ddy_finer r46.xy, v8.xyxy
//         movr r6.xy, r47.xyxy
//         movr r6.zw, r46.xyxy
//         addr r5, |r5|, |r6|
//         movr r45, c[6][253].x
//         movr r45.x, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r45.y, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r45.z, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r45.w, constant(3.00000000, 3.00000000, 3.00000000, 3.00000000).x
//         movr r6.w, r45
//         madh r6, r5, r6.w, c[6][252].xyxy
//         mulr r5.xy, v0, constant(-0.79719392, 0.01456723, 1.00000000, 0.03125000).w
//         texh r5, r5.xyzz, #1, #1, 2D
//         mulh r5, r6, r5.zwxy
//         mulh r6, r5, constant(0.41608700, -0.30338100, 0.13519500, 0.22041900).xxyy
//         madh r6, r5.zwxy, constant(0.41608700, -0.30338100, 0.13519500, 0.22041900).zzww, r6
//         addr r7, r6, v8.xyxy
//         txlr r6, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r8, r7.zwww, r7.w, #0, #0, 2D
//         mulh r7, r5, constant(-0.18368300, 0.07725400, -0.25281798, -0.23776400).xxyy
//         madh r7, r5.zwxy, constant(-0.18368300, 0.07725400, -0.25281798, -0.23776400).zzww, r7
//         movr r6.y, r8.x
//         addr r7, r7, v8.xyxy
//         txlr r8, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r7, r7.zwww, r7.w, #0, #0, 2D
//         movr r6.z, r8.x
//         movr r6.w, r7.x
//         addr r7, r6, -v8.z
//         mulh r6, r5, constant(-0.05412700, 0.66291304, -0.03125000, 0.00000001).xxyy
//         cmph r7, r7, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).x, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).y
//         madh r6, r5.zwxy, constant(-0.05412700, 0.66291304, -0.03125000, 0.00000001).zzyy, r6
//         dp4h r9.w, r7, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).z
//         addr r7, r6, v8.xyxy
//         txlr r6, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r8, r7.zwww, r7.w, #0, #0, 2D
//         mulh r7, r5, constant(-0.48613600, 0.39774800, -0.39774800, 0.15915494).xxyy
//         madh r7, r5.zwxy, constant(-0.48613600, 0.39774800, -0.39774800, 0.15915494).xxzz, r7
//         movr r6.y, r8.x
//         addr r7, r7, v8.xyxy
//         txlr r8, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r7, r7.zwww, r7.w, #0, #0, 2D
//         movr r6.z, r8.x
//         movr r6.w, r7.x
//         addr r7, r6, -v8.z
//         mulh r6, r5, -constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).wwzz
//         cmph r7, r7, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).x, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).y
//         madh r6, r5.zwxy, constant(-0.57452400, 0.10825300, -0.62500000, -0.75000000).xxyy, r6
//         dp4r r9.z, r7, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).z
//         addr r7, r6, v8.xyxy
//         txlr r6, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r7, r7.zwww, r7.w, #0, #0, 2D
//         movr r6.y, r7.x
//         madr r7, r5, constant(-0.57452400, 0.10825300, -0.62500000, -0.75000000).zzww, v8.xyxy
//         txlr r8, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r7, r7.zwww, r7.w, #0, #0, 2D
//         movr r6.z, r8.x
//         movr r6.w, r7.x
//         addh r9.w, r9.w, r9.z
//         addr r6, r6, -v8.z
//         madr r8, r5, constant(0.87500000, 0.18750000, 0.50000000, 1.00000000).xxyy, v8.xyxy
//         madr r7, r5.zwzw, constant(0.87500000, 0.18750000, 0.50000000, 1.00000000).zzww, v8.xyxy
//         txlr r5, r8.xyyy, r8.y, #0, #0, 2D
//         txlr r8, r8.zwww, r8.w, #0, #0, 2D
//         movr r5.y, r8.x
//         txlr r8, r7.xyyy, r7.y, #0, #0, 2D
//         txlr r7, r7.zwww, r7.w, #0, #0, 2D
//         movr r5.z, r8.x
//         movr r5.w, r7.x
//         cmph r6, r6, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).x, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).y
//         addr r5, r5, -v8.z
//         dp4r r6.w, r6, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).z
//         cmph r5, r5, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).x, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).y
//         addh r6.w, r9.w, r6.w
//         dp4r r5.w, r5, constant(1.00000000, 0.00000000, 0.06250000, -0.57452400).z
//         addh r6.w, r6.w, r5.w
//         movr r45, c[6][250]
//         movr r45.x, constant(0.99998512, 0.99998512, 0.99998512, 0.99998512).x
//         movr r45.y, constant(0.86113464, 0.86113464, 0.86113464, 0.86113464).x
//         movr r45.z, constant(0.66150456, 0.66150456, 0.66150456, 0.66150456).x
//         movr r5.xyz, r45
//         movr r44, c[6][251].x
//         movr r44.x, constant(2.99999976, 2.99999976, 2.99999976, 2.99999976).x
//         movr r44.y, constant(2.99999976, 2.99999976, 2.99999976, 2.99999976).x
//         movr r44.z, constant(2.99999976, 2.99999976, 2.99999976, 2.99999976).x
//         movr r44.w, constant(2.99999976, 2.99999976, 2.99999976, 2.99999976).x
//         mulr r5, r5.xyzz, r44
//         mulh r5, r6.w, r5
//         movr r6.w, c[6][255].x
//         addr r7.w, -r6.w, c[6][256].x
//         texr r6, v1.xyxx, #2, #2, 2D
//         madh r10.w, r6.w, r7.w, c[6][255].x
//         nrmh r9.xyz, v7
//         nrmh r12.xyz, v3
//         addh r6.w, -r10.w, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).z
//         addh r7.xyz, r9, r12
//         rcph r6.w, r6.w
//         nrmh r10.xyz, r7
//         texr r7, v1.xyxx, #3, #3, 2D
//         madh r8.xyz, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).x, r7.wyzw, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).y
//         mulh r7.w, r6.w, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).w
//         dp3h_sat r7.z, r8, r10
//         addr r6.w, r7.w, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).z
//         lg2r r47, |r7.z|
//         mulr r47, r47, r7.w
//         ex2r r8.w, r47
//         mulh r11, r6.xyzz, c[6][254].xyzz
//         mulr r6.w, r6.w, r8.w
//         lg2h r8.w, |r7.w|
//         mulr_sat r6.w, r6.w, constant(-0.48613600, 0.39774800, -0.39774800, 0.15915494).w
//         mulr r6, r5, r6.w
//         dp3h_sat r12.w, r8, r9
//         madh r7.w, r12.w, constant(8.00000000, -0.01872930, 0.07426100, -0.21211440).y, constant(8.00000000, -0.01872930, 0.07426100, -0.21211440).z
//         addh r7.z, -r12.w, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).z
//         madh r7.w, r7.w, r12.w, constant(8.00000000, -0.01872930, 0.07426100, -0.21211440).w
//         rsqh r7.z, |r7.z|
//         madh r7.w, r7.w, r12.w, constant(1.57072876, 0.63661976, -1.00999999, -1.12000000).x
//         rcph r7.z, r7.z
//         mulh r5, r5, r11
//         mulh r7.w, r7.w, r7.z
//         mulh_sat r14.w, r9.z, constant(0.31830988, 16.00000000, 0.00000000, 0.00000000).y
//         madr r7.xy, r7.w, constant(1.57072876, 0.63661976, -1.00999999, -1.12000000).y, constant(1.57072876, 0.63661976, -1.00999999, -1.12000000).wzzw
//         mulr r7.xy, r7, r7
//         dp3h_sat r9.w, r8, r12
//         madh r7.w, r9.w, constant(8.00000000, -0.01872930, 0.07426100, -0.21211440).y, constant(8.00000000, -0.01872930, 0.07426100, -0.21211440).z
//         addh r7.z, -r9.w, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).z
//         madh r7.w, r7.w, r9.w, constant(8.00000000, -0.01872930, 0.07426100, -0.21211440).w
//         rsqh r7.z, |r7.z|
//         madh r7.w, r7.w, r9.w, constant(1.57072876, 0.63661976, -1.00999999, -1.12000000).x
//         rcph r7.z, r7.z
//         rcpr r9.x, r7.x
//         rcpr r9.y, r7.y
//         mulh r7.w, r7.w, r7.z
//         addr r7.z, r9.x, constant(-0.79719392, 0.01456723, 1.00000000, 0.03125000).x
//         madr r7.xy, r7.w, constant(1.57072876, 0.63661976, -1.00999999, -1.12000000).y, constant(1.57072876, 0.63661976, -1.00999999, -1.12000000).zwzw
//         addr r7.w, -r9.y, constant(10000.00000000, 0.00010001, 1.00000000, 1.00100005).x
//         mulr r7.xy, r7, r7
//         mulr r7.z, r7.z, constant(-0.79719392, 0.01456723, 1.00000000, 0.03125000).y
//         rcpr r7.x, r7.x
//         rcpr r7.y, r7.y
//         mulr r7.z, r7.w, r7.z
//         addr r7.x, -r7.x, constant(10000.00000000, 0.00010001, 1.00000000, 1.00100005).x
//         addr r7.w, r7.y, constant(-0.79719392, 0.01456723, 1.00000000, 0.03125000).x
//         mulh r7.y, r10.w, r10.w
//         mulr r7.z, r7.z, r7.x
//         madh r15.w, r10.w, -r7.y, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).z
//         mulr r9.w, r7.x, constant(10000.00000000, 0.00010001, 1.00000000, 1.00100005).y
//         addh r9.xy, -r15.w, constant(10000.00000000, 0.00010001, 1.00000000, 1.00100005).zwzw
//         movr r7.y, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).z
//         movr r45, c[6][257].x
//         movr r45.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r45.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         madh r15.z, r45, -r10.w, r7.y
//         mulr r7.z, r7.z, r9.y
//         madr_sat r10.w, r7.z, constant(-0.05412700, 0.66291304, -0.03125000, 0.00000001).w, r9.x
//         madr r9.z, r7.w, -constant(-0.79719392, 0.01456723, 1.00000000, 0.03125000).y, constant(-0.79719392, 0.01456723, 1.00000000, 0.03125000).z
//         addh r7, r11, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).y
//         movr r44, c[6][257].x
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulr r9.z, r9.z, r44
//         mulr r6, r6, r10.w
//         madr r10, r9.z, r7, constant(2.00000000, -1.00000000, 1.00000000, 3.00000000).z
//         madh_sat r15.y, r9.y, r9.w, r9.x
//         mulr r6, r6, r10
//         texr r7, v2.xyxx, #4, #4, 2D
//         mulh r5, r5, r15.z
//         mulr r9, r6, r7.w
//         mulh r5, r15.w, r5
//         dp3h r6.x, r12, v4
//         dp3h r6.y, r12, v5
//         dp3h r6.z, r12, v6
//         dp3h r14.x, r8, v4
//         dp3h r14.y, r8, v5
//         dp3h r14.z, r8, v6
//         mulh r5, r7.x, r5
//         dp3h r6.w, -r6, r14
//         mulh r5, r12.w, r5
//         addh r7.z, r6.w, r6.w
//         addh r6.w, -r8.w, constant(8.00000000, -0.01872930, 0.07426100, -0.21211440).x
//         madh r6.xyz, r14, -r7.z, -r6
//         txlh r12, r6.xyzz, r6.w, #6, #6, LWBE
//         txlh r6, r6.xyzz, r6.w, #8, #8, LWBE
//         lrph r8, c[6][258].x, r6.xyzz, r12.xyzz
//         texh r13, r14.xyzz, #5, #5, LWBE
//         texh r12, r14.xyzz, #7, #7, LWBE
//         lrph r6, c[6][258].x, r12.xyzz, r13.xyzz
//         mulh r8, r15.y, r8
//         mulh r6, r11, r6
//         mulr r8, r10, r8
//         mulh r6, r15.z, r6
//         mulr r8, r7.w, r8
//         mulh r6, r15.w, r6
//         madh r5, r5, constant(0.31830988, 16.00000000, 0.00000000, 0.00000000).x, r9
//         madh r6, r6, r7.x, r8
//         madr r0, r5, r14.w, r6
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R5, 0x40400000;           # [  0][000000]
//     	IPA.PASS R1, a[0x74];            # [  1][000008] POSITION_Y
//     	FMUL.FMZ R1, R1, 0.03125;        # [  2][000010]
//     	IPA.PASS R0, a[0x70];            # [  3][000018] POSITION_X
//     	FMUL.FMZ R0, R0, 0.03125;        # [  4][000020]
//     	TEX.P R16, R0, 0x1, 0x1, 2D;     # [  5][000028]
//     	IPA.PASS R0, a[0x7c];            # [  6][000030] POSITION_W
//     	MUFU.RCP R20, R0;                # [  7][000038]
//     	IPA.SC R2, a[0x374], R20;        # [  8][000040] FIXED_FNC_TEXTURE_7_T
//     	FSWZ.0000 R1, R2, R2, ZPNPNPZP;  # [  9][000048]
//     	IPA.SC R11, a[0x370], R20;       # [ 10][000050] TEX7
//     	FSWZ.1111 R3, R1, RZ, PPPPPPPP;  # [ 11][000058]
//     	FSWZ.2222 R4, R1, RZ, PPPPPPPP;  # [ 12][000060]
//     	FSWZ.0000 R0, R11, R11, ZPNPNPZP; # [ 13][000068]
//     	FADD.FTZ R3, |R3|, |R4|;         # [ 14][000070]
//     	FSWZ.1111 R1, R0, RZ, PPPPPPPP;  # [ 15][000078]
//     	FSWZ.2222 R0, R0, RZ, PPPPPPPP;  # [ 16][000080]
//     	IPA.SC R22, a[0x378], R20;       # [ 17][000088] FIXED_FNC_TEXTURE_7_R
//     	FADD.FTZ R0, |R1|, |R0|;         # [ 18][000090]
//     	IPA.SC R31, a[0x328], R20;       # [ 19][000098] FIXED_FNC_TEXTURE_2_R
//     	FFMA.FMZ R1, R3, R5, c[0x6][0xfc4]; # [ 20][0000a0]
//     	FFMA.FMZ R0, R0, R5, c[0x6][0xfc0]; # [ 21][0000a8]
//     	FMUL.FMZ R13, R0, R16;           # [ 22][0000b0]
//     	FMUL.FMZ R12, R1, R17;           # [ 23][0000b8]
//     	FMUL.FMZ R4, R1, R19;            # [ 24][0000c0]
//     	FMUL.FMZ R5, R0, R18;            # [ 25][0000c8]
//     	FMUL32I.FMZ R3, R13, -0.303381;  # [ 26][0000d0]
//     	FMUL32I.FMZ R6, R12, -0.303381;  # [ 27][0000d8]
//     	FFMA.FMZ R3, R5, c[0x9][0x4], R3; # [ 28][0000e0]
//     	FFMA.FMZ R6, R4, c[0x9][0x4], R6; # [ 29][0000e8]
//     	FMUL32I.FMZ R0, R5, 0.416087;    # [ 30][0000f0]
//     	FMUL32I.FMZ R1, R4, 0.416087;    # [ 31][0000f8]
//     	FADD.FTZ R14, R3, R11;           # [ 32][000100]
//     	FADD.FTZ R15, R6, R2;            # [ 33][000108]
//     	FMUL32I.FMZ R7, R13, 0.077254;   # [ 34][000110]
//     	FMUL32I.FMZ R8, R12, 0.077254;   # [ 35][000118]
//     	FFMA.FMZ R0, R13, c[0x9][0x0], R0; # [ 36][000120]
//     	FFMA.FMZ R1, R12, c[0x9][0x0], R1; # [ 37][000128]
//     	FMUL32I.FMZ R3, R5, -0.183683;   # [ 38][000130]
//     	TEX.LL.NODEP.T R9, R14, R15, 0x0, 0x0, 2D, 0x1; # [ 39][000138]
//     	FADD.FTZ R14, R0, R11;           # [ 40][000140]
//     	FADD.FTZ R15, R1, R2;            # [ 41][000148]
//     	FFMA.FMZ R6, R4, c[0x9][0xc], R8; # [ 42][000150]
//     	FFMA.FMZ R0, R5, c[0x9][0xc], R7; # [ 43][000158]
//     	FMUL32I.FMZ R1, R4, -0.183683;   # [ 44][000160]
//     	TEX.LL.NODEP.T R8, R14, R15, 0x0, 0x0, 2D, 0x1; # [ 45][000168]
//     	FADD.FTZ R14, R0, R11;           # [ 46][000170]
//     	FADD.FTZ R15, R6, R2;            # [ 47][000178]
//     	FFMA.FMZ R0, R13, c[0x9][0x8], R3; # [ 48][000180]
//     	FFMA.FMZ R1, R12, c[0x9][0x8], R1; # [ 49][000188]
//     	FADD.FTZ R0, R0, R11;            # [ 50][000190]
//     	TEX.LL.NODEP.T R26, R14, R15, 0x0, 0x0, 2D, 0x1; # [ 51][000198]
//     	FADD.FTZ R1, R1, R2;             # [ 52][0001a0]
//     	FMUL32I.FMZ R15, R13, 0.397748;  # [ 53][0001a8]
//     	FMUL32I.FMZ R16, R12, 0.397748;  # [ 54][0001b0]
//     	TEX.LL.NODEP.T R7, R0, R1, 0x0, 0x0, 2D, 0x1; # [ 55][0001b8]
//     	FMUL32I.FMZ R0, R13, 0.662913;   # [ 56][0001c0]
//     	FMUL32I.FMZ R1, R12, 0.662913;   # [ 57][0001c8]
//     	FFMA.FMZ R0, R5, c[0x9][0x10], R0; # [ 58][0001d0]
//     	FFMA.FMZ R1, R4, c[0x9][0x10], R1; # [ 59][0001d8]
//     	FADD.FTZ R0, R0, R11;            # [ 60][0001e0]
//     	FADD.FTZ R1, R1, R2;             # [ 61][0001e8]
//     	FMUL32I.FMZ R10, R5, -0.486136;  # [ 62][0001f0]
//     	TEX.LL.NODEP.T R6, R0, R1, 0x0, 0x0, 2D, 0x1; # [ 63][0001f8]
//     	FMUL32I.FMZ R0, R5, -0.054127;   # [ 64][000200]
//     	FMUL32I.FMZ R1, R4, -0.054127;   # [ 65][000208]
//     	FFMA.FMZ R0, R13, -0.03125, R0;  # [ 66][000210]
//     	FFMA.FMZ R1, R12, -0.03125, R1;  # [ 67][000218]
//     	FADD.FTZ R0, R0, R11;            # [ 68][000220]
//     	FADD.FTZ R1, R1, R2;             # [ 69][000228]
//     	FMUL32I.FMZ R14, R4, -0.486136;  # [ 70][000230]
//     	FMUL.FMZ R3, R13, -0.0625;       # [ 71][000238]
//     	FFMA.FMZ R15, R5, c[0x9][0x18], R15; # [ 72][000240]
//     	FFMA.FMZ R16, R4, c[0x9][0x18], R16; # [ 73][000248]
//     	FMUL.FMZ R17, R12, -0.0625;      # [ 74][000250]
//     	TEX.LL.NODEP.T R28, R0, R1, 0x0, 0x0, 2D, 0x1; # [ 75][000258]
//     	FADD.FTZ R0, R15, R11;           # [ 76][000260]
//     	FADD.FTZ R1, R16, R2;            # [ 77][000268]
//     	FFMA.FMZ R10, R13, c[0x9][0x14], R10; # [ 78][000270]
//     	FFMA.FMZ R14, R12, c[0x9][0x14], R14; # [ 79][000278]
//     	FMUL32I.FMZ R15, R5, 0.574524;   # [ 80][000280]
//     	TEX.LL.NODEP.T R16, R0, R1, 0x0, 0x0, 2D, 0x1; # [ 81][000288]
//     	FADD.FTZ R0, R10, R11;           # [ 82][000290]
//     	FADD.FTZ R1, R14, R2;            # [ 83][000298]
//     	FFMA.FMZ R14, R5, c[0x9][0x20], R3; # [ 84][0002a0]
//     	FFMA.FMZ R17, R4, c[0x9][0x20], R17; # [ 85][0002a8]
//     	FMUL32I.FMZ R3, R4, 0.574524;    # [ 86][0002b0]
//     	TEX.LL.NODEP.P R10, R0, R1, 0x0, 0x0, 2D, 0x1; # [ 87][0002b8]
//     	FADD.FTZ R0, R14, R11;           # [ 88][0002c0]
//     	FADD.FTZ R1, R17, R2;            # [ 89][0002c8]
//     	FFMA.FMZ R14, R13, c[0x9][0x1c], R15; # [ 90][0002d0]
//     	IPA.SC R19, a[0x324], R20;       # [ 91][0002d8] FIXED_FNC_TEXTURE_2_T
//     	FFMA.FMZ R15, R12, c[0x9][0x1c], R3; # [ 92][0002e0]
//     	TEX.LL.NODEP.T R3, R0, R1, 0x0, 0x0, 2D, 0x1; # [ 93][0002e8]
//     	FADD.FTZ R0, R14, R11;           # [ 94][0002f0]
//     	FADD.FTZ R1, R15, R2;            # [ 95][0002f8]
//     	TEX.LL.NODEP.T R25, R0, R1, 0x0, 0x0, 2D, 0x1; # [ 96][000300]
//     	FFMA.FMZ R0, R5, -0.625, R11;    # [ 97][000308]
//     	FFMA.FMZ R1, R4, -0.625, R2;     # [ 98][000310]
//     	TEX.LL.NODEP.T R27, R0, R1, 0x0, 0x0, 2D, 0x1; # [ 99][000318]
//     	FFMA.FMZ R0, R13, -0.75, R11;    # [100][000320]
//     	FFMA.FMZ R1, R12, -0.75, R2;     # [101][000328]
//     	TEX.LL.NODEP.P R29, R0, R1, 0x0, 0x0, 2D, 0x1; # [102][000330]
//     	FFMA.FMZ R0, R13, 0.1875, R11;   # [103][000338]
//     	FFMA.FMZ R1, R12, 0.1875, R2;    # [104][000340]
//     	IPA.SC R14, a[0x368], R20;       # [105][000348] FIXED_FNC_TEXTURE_6_R
//     	TEX.LL.NODEP.P R24, R0, R1, 0x0, 0x0, 2D, 0x1; # [106][000350]
//     	FFMA.FMZ R0, R13, 0.5, R11;      # [107][000358]
//     	FFMA.FMZ R1, R12, 0.5, R2;       # [108][000360]
//     	FADD.FTZ R15, R8, -R22;          # [109][000368]
//     	TEX.LL.NODEP.T R18, R0, R1, 0x0, 0x0, 2D, 0x1; # [110][000370]
//     	FADD.FTZ R0, R13, R11;           # [111][000378]
//     	FADD.FTZ R1, R12, R2;            # [112][000380]
//     	IPA.SC R13, a[0x364], R20;       # [113][000388] FIXED_FNC_TEXTURE_6_T
//     	TEX.LL.NODEP.P R21, R0, R1, 0x0, 0x0, 2D, 0x1; # [114][000390]
//     	FFMA.FMZ R0, R5, 0.875, R11;     # [115][000398]
//     	FFMA.FMZ R1, R4, 0.875, R2;      # [116][0003a0]
//     	FADD.FTZ R17, R7, -R22;          # [117][0003a8]
//     	TEX.LL.NODEP.P R23, R0, R1, 0x0, 0x0, 2D, 0x1; # [118][0003b0]
//     	IPA.SC R5, a[0x304], R20;        # [119][0003b8] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R4, a[0x300], R20;        # [120][0003c0] TEX0
//     	FADD.FTZ R6, R6, -R22;           # [121][0003c8]
//     	TEX.P R0, R4, 0x3, 0x3, 2D, 0xe; # [122][0003d0]
//     	IPA.SC R11, a[0x360], R20;       # [123][0003d8] TEX6
//     	FMUL.FTZ R12, R11, R11;          # [124][0003e0]
//     	FCMP.LTU R6, RZ, 0x3f800, R6;    # [125][0003e8]
//     	FFMA.FTZ R8, R13, R13, R12;      # [126][0003f0]
//     	FADD.FTZ R12, R9, -R22;          # [127][0003f8]
//     	FCMP.LTU R9, RZ, 0x3f800, R15;   # [128][000400]
//     	FFMA.FTZ R8, R14, R14, R8;       # [129][000408]
//     	FCMP.LTU R12, RZ, 0x3f800, R12;  # [130][000410]
//     	MUFU.RSQ R15, R8;                # [131][000418]
//     	FMUL.FTZ R9, R9, 0.0625;         # [132][000420]
//     	IPA.SC R8, a[0x320], R20;        # [133][000428] TEX2
//     	FFMA.FTZ R12, R12, 0.0625, R9;   # [134][000430]
//     	FMUL.FTZ R7, R14, R15;           # [135][000438]
//     	FMUL.FTZ R9, R13, R15;           # [136][000440]
//     	FMUL.FTZ R30, R8, R8;            # [137][000448]
//     	FCMP.LTU R13, RZ, 0x3f800, R17;  # [138][000450]
//     	FMUL.FTZ R17, R11, R15;          # [139][000458]
//     	FADD.FTZ R3, R3, -R22;           # [140][000460]
//     	FFMA.FTZ R11, R13, 0.0625, R12;  # [141][000468]
//     	TEX.P R12, R4, 0x2, 0x2, 2D;     # [142][000470]
//     	FFMA.FTZ R4, R19, R19, R30;      # [143][000478]
//     	FADD.FTZ R5, R26, -R22;          # [144][000480]
//     	FFMA.FTZ R26, R31, R31, R4;      # [145][000488]
//     	FCMP.LTU R4, RZ, 0x3f800, R5;    # [146][000490]
//     	MUFU.RSQ R5, R26;                # [147][000498]
//     	FFMA.FTZ R4, R4, 0.0625, R11;    # [148][0004a0]
//     	FADD.FTZ R26, R28, -R22;         # [149][0004a8]
//     	FMUL.FTZ R8, R8, R5;             # [150][0004b0]
//     	FMUL.FTZ R28, R19, R5;           # [151][0004b8]
//     	FMUL.FTZ R11, R31, R5;           # [152][0004c0]
//     	FCMP.LTU R19, RZ, 0x3f800, R26;  # [153][0004c8]
//     	FADD.FTZ R5, R10, -R22;          # [154][0004d0]
//     	FADD.FTZ R30, R17, R8;           # [155][0004d8]
//     	FFMA.FTZ R4, R19, 0.0625, R4;    # [156][0004e0]
//     	FADD.FTZ R10, R9, R28;           # [157][0004e8]
//     	FCMP.LTU R19, RZ, 0x3f800, R5;   # [158][0004f0]
//     	FMUL.FTZ R5, R30, R30;           # [159][0004f8]
//     	FFMA.FTZ R4, R19, 0.0625, R4;    # [160][000500]
//     	FFMA.FTZ R5, R10, R10, R5;       # [161][000508]
//     	FADD.FTZ R19, R7, R11;           # [162][000510]
//     	FFMA.FTZ R5, R19, R19, R5;       # [163][000518]
//     	MUFU.RSQ R26, R5;                # [164][000520]
//     	FADD.FTZ R5, R16, -R22;          # [165][000528]
//     	FMUL.FTZ R10, R10, R26;          # [166][000530]
//     	FMUL.FTZ R16, R30, R26;          # [167][000538]
//     	FCMP.LTU R5, RZ, 0x3f800, R5;    # [168][000540]
//     	FMUL.FTZ R26, R19, R26;          # [169][000548]
//     	FFMA.FTZ R19, R5, 0.0625, R4;    # [170][000550]
//     	FADD.FTZ R4, R27, -R22;          # [171][000558]
//     	FADD.FTZ R5, R29, -R22;          # [172][000560]
//     	FADD.FTZ R27, R25, -R22;         # [173][000568]
//     	FFMA.FTZ R6, R6, 0.0625, R19;    # [174][000570]
//     	FADD.FTZ R25, R24, -R22;         # [175][000578]
//     	FCMP.LTU R24, RZ, 0x3f800, R4;   # [176][000580]
//     	FADD.FTZ R18, R18, -R22;         # [177][000588]
//     	FADD.FTZ R21, R21, -R22;         # [178][000590]
//     	MOV32I R19, -0x40800000;         # [179][000598]
//     	FADD.FTZ R22, R23, -R22;         # [180][0005a0]
//     	IPA.SC R29, a[0x344], R20;       # [181][0005a8] FIXED_FNC_TEXTURE_4_T
//     	FCMP.LTU R23, RZ, 0x3f800, R27;  # [182][0005b0]
//     	FCMP.LTU R18, RZ, 0x3f800, R18;  # [183][0005b8]
//     	FFMA.FTZ R4, R23, 0.0625, R6;    # [184][0005c0]
//     	FCMP.LTU R27, RZ, 0x3f800, R5;   # [185][0005c8]
//     	FFMA.FTZ R23, R24, 0.0625, R4;   # [186][0005d0]
//     	IPA.SC R6, a[0x330], R20;        # [187][0005d8] TEX3
//     	FCMP.LTU R5, RZ, 0x3f800, R3;    # [188][0005e0]
//     	IPA.SC R4, a[0x334], R20;        # [189][0005e8] FIXED_FNC_TEXTURE_3_T
//     	FFMA.FTZ R23, R27, 0.0625, R23;  # [190][0005f0]
//     	IPA.SC R3, a[0x340], R20;        # [191][0005f8] TEX4
//     	FCMP.LTU R24, RZ, 0x3f800, R22;  # [192][000600]
//     	FFMA.FMZ R2, R2, 2, R19;         # [193][000608]
//     	FFMA.FTZ R22, R5, 0.0625, R23;   # [194][000610]
//     	IPA.SC R27, a[0x338], R20;       # [195][000618] FIXED_FNC_TEXTURE_3_R
//     	FMUL.FTZ R5, R8, R6;             # [196][000620]
//     	FFMA.FMZ R30, R0, 2, R19;        # [197][000628]
//     	FMUL.FTZ R6, R2, R6;             # [198][000630]
//     	FFMA.FTZ R23, R24, 0.0625, R22;  # [199][000638]
//     	FFMA.FTZ R0, R28, R4, R5;        # [200][000640]
//     	IPA.SC R22, a[0x350], R20;       # [201][000648] TEX5
//     	FMUL.FTZ R5, R8, R3;             # [202][000650]
//     	FMUL.FTZ R24, R2, R3;            # [203][000658]
//     	FFMA.FTZ R4, R30, R4, R6;        # [204][000660]
//     	FFMA.FMZ R3, R1, 2, R19;         # [205][000668]
//     	FFMA.FTZ R0, R11, R27, R0;       # [206][000670]
//     	IPA.SC R6, a[0x354], R20;        # [207][000678] FIXED_FNC_TEXTURE_5_T
//     	FFMA.FTZ R4, R3, R27, R4;        # [208][000680]
//     	FFMA.FTZ R5, R28, R29, R5;       # [209][000688]
//     	FFMA.FTZ R24, R30, R29, R24;     # [210][000690]
//     	FMUL.FTZ R27, R8, R22;           # [211][000698]
//     	FMUL.FTZ R1, R2, R22;            # [212][0006a0]
//     	IPA.SC R29, a[0x348], R20;       # [213][0006a8] FIXED_FNC_TEXTURE_4_R
//     	FFMA.FTZ R22, R28, R6, R27;      # [214][0006b0]
//     	FMUL.FTZ R31, R2, R8;            # [215][0006b8]
//     	FFMA.FTZ R6, R30, R6, R1;        # [216][0006c0]
//     	IPA.SC R27, a[0x358], R20;       # [217][0006c8] FIXED_FNC_TEXTURE_5_R
//     	FFMA.FTZ R1, R11, R29, R5;       # [218][0006d0]
//     	FFMA.FTZ R6, R3, R27, R6;        # [219][0006d8]
//     	FFMA.FTZ R5, R3, R29, R24;       # [220][0006e0]
//     	FMUL.FTZ R16, R2, R16;           # [221][0006e8]
//     	FFMA.FTZ R24, R11, R27, R22;     # [222][0006f0]
//     	MOV R29, c[0x6][0xff0];          # [223][0006f8]
//     	FMUL.FTZ R22, R0, -R4;           # [224][000700]
//     	FFMA.FTZ R28, R30, R28, R31;     # [225][000708]
//     	FFMA.FTZ R27, R1, -R5, R22;      # [226][000710]
//     	FCMP.LTU R21, RZ, 0x3f800, R21;  # [227][000718]
//     	FADD.FTZ R22, -R29, c[0x6][0x1000]; # [228][000720]
//     	FFMA.FTZ R27, R24, -R6, R27;     # [229][000728]
//     	FFMA.FTZ R29, R18, 0.0625, R23;  # [230][000730]
//     	FFMA.FMZ R22, R15, R22, c[0x6][0xff0]; # [231][000738]
//     	FADD.FTZ R15, R27, R27;          # [232][000740]
//     	FADD.FTZ R23, -R22, 1;           # [233][000748]
//     	FFMA.FMZ R1, R5, -R15, -R1;      # [234][000750]
//     	FFMA.FMZ R0, R4, -R15, -R0;      # [235][000758]
//     	FFMA.FMZ R27, R6, -R15, -R24;    # [236][000760]
//     	MUFU.RCP R18, R23;               # [237][000768]
//     	FMNMX R15, |R0|, |R1|, !PT;      # [238][000770]
//     	FMUL.FMZ R24, R18, 3;            # [239][000778]
//     	FMNMX R15, |R27|, R15, !PT;      # [240][000780]
//     	MUFU.LG2 R8, |R24|;              # [241][000788]
//     	MUFU.RCP R18, R15;               # [242][000790]
//     	FADD.FTZ R8, -R8, 8;             # [243][000798]
//     	FMUL.FTZ R15, R2, R17;           # [244][0007a0]
//     	FMUL R1, R1, R18;                # [245][0007a8]
//     	FMUL R2, R27, R18;               # [246][0007b0]
//     	FMUL R0, R0, R18;                # [247][0007b8]
//     	FFMA.FTZ R27, R30, R10, R16;     # [248][0007c0]
//     	FFMA.FTZ R15, R30, R9, R15;      # [249][0007c8]
//     	FFMA.FTZ R29, R21, 0.0625, R29;  # [250][0007d0]
//     	TEX.LL.NODEP.T R16, R0, R8, 0x6, 0x6, LWBE, 0x7; # [251][0007d8]
//     	FFMA.FTZ.SAT R26, R3, R26, R27;  # [252][0007e0]
//     	TEX.LL.NODEP.T R8, R0, R8, 0x8, 0x8, LWBE, 0x7; # [253][0007e8]
//     	FMNMX R0, |R4|, |R5|, !PT;       # [254][0007f0]
//     	IPA.SC R21, a[0x314], R20;       # [255][0007f8] FIXED_FNC_TEXTURE_1_T
//     	FMNMX R0, |R6|, R0, !PT;         # [256][000800]
//     	IPA.SC R20, a[0x310], R20;       # [257][000808] TEX1
//     	MUFU.RCP R0, R0;                 # [258][000810]
//     	FCMP.LTU R25, RZ, 0x3f800, R25;  # [259][000818]
//     	FMUL R6, R6, R0;                 # [260][000820]
//     	FMUL R5, R5, R0;                 # [261][000828]
//     	FMUL R4, R4, R0;                 # [262][000830]
//     	TEX.NODEP.T R20, R20, 0x4, 0x4, 2D, 0x9; # [263][000838]
//     	FFMA.FTZ.SAT R11, R3, R11, R28;  # [264][000840]
//     	TEX.NODEP.T R0, R4, 0x5, 0x5, LWBE, 0x7; # [265][000848]
//     	FFMA.FTZ.SAT R3, R3, R7, R15;    # [266][000850]
//     	TEX.NODEP.P R4, R4, 0x7, 0x7, LWBE, 0x7; # [267][000858]
//     	FFMA.FTZ R15, R25, 0.0625, R29;  # [268][000860]
//     	MOV32I R27, 0x3d981627;          # [269][000868]
//     	FADD.FTZ R25, -R3, 1;            # [270][000870]
//     	FFMA.FMZ R28, R3, c[0x9][0x24], R27; # [271][000878]
//     	MUFU.RSQ R25, |R25|;             # [272][000880]
//     	FFMA.FMZ R28, R28, R3, c[0x9][0x28]; # [273][000888]
//     	FFMA.FMZ R27, R11, c[0x9][0x24], R27; # [274][000890]
//     	FMUL.FMZ R29, R22, R22;          # [275][000898]
//     	FFMA.FMZ R28, R28, R3, c[0x9][0x2c]; # [276][0008a0]
//     	MUFU.RCP R25, R25;               # [277][0008a8]
//     	FFMA.FMZ R27, R27, R11, c[0x9][0x28]; # [278][0008b0]
//     	FFMA.FMZ R22, R22, -R29, -R19;   # [279][0008b8]
//     	FADD.FTZ R29, -R11, 1;           # [280][0008c0]
//     	FMUL.FMZ R25, R28, R25;          # [281][0008c8]
//     	MOV32I R28, 0x3f22f983;          # [282][0008d0]
//     	FFMA.FMZ R11, R27, R11, c[0x9][0x2c]; # [283][0008d8]
//     	MUFU.LG2 R27, |R26|;             # [284][0008e0]
//     	MUFU.RSQ R29, |R29|;             # [285][0008e8]
//     	FFMA.FMZ R26, R25, R28, c[0x9][0x30]; # [286][0008f0]
//     	MUFU.RCP R29, R29;               # [287][0008f8]
//     	FFMA.FMZ R25, R25, R28, c[0x9][0x34]; # [288][000900]
//     	FMUL.FMZ R26, R26, R26;          # [289][000908]
//     	FMUL.FMZ R25, R25, R25;          # [290][000910]
//     	MUFU.RCP R26, R26;               # [291][000918]
//     	FMUL.FMZ R27, R27, R24;          # [292][000920]
//     	FMUL.FMZ R11, R11, R29;          # [293][000928]
//     	MUFU.RCP R25, R25;               # [294][000930]
//     	FADD32I.FTZ R26, R26, 0xbf4c14e6; # [295][000938]
//     	RRO.EX2 R27, R27;                # [296][000940]
//     	FFMA.FMZ R29, R11, R28, c[0x9][0x34]; # [297][000948]
//     	FMUL32I.FMZ R26, R26, 0x3c6eab60; # [298][000950]
//     	FFMA.FMZ R11, R11, R28, c[0x9][0x30]; # [299][000958]
//     	FADD.FTZ R25, -R25, 10000;       # [300][000960]
//     	MUFU.EX2 R27, R27;               # [301][000968]
//     	FADD.FTZ R24, R24, 1;            # [302][000970]
//     	FMUL.FMZ R25, R25, R26;          # [303][000978]
//     	FMUL.FMZ R26, R11, R11;          # [304][000980]
//     	FMUL.FMZ R24, R24, R27;          # [305][000988]
//     	FMUL.FMZ R11, R12, c[0x6][0xfe0]; # [306][000990]
//     	MUFU.RCP R27, R26;               # [307][000998]
//     	FMUL.FMZ R12, R13, c[0x6][0xfe4]; # [308][0009a0]
//     	FADD32I.FTZ R28, R27, 0xbf4c14e6; # [309][0009a8]
//     	FMUL.FMZ R13, R14, c[0x6][0xfe8]; # [310][0009b0]
//     	FADD.FTZ R26, R12, -1;           # [311][0009b8]
//     	FMUL.FMZ R14, R29, R29;          # [312][0009c0]
//     	FADD.FTZ R27, R13, -1;           # [313][0009c8]
//     	FFMA.FMZ R29, R28, -c[0x9][0x3c], -R19; # [314][0009d0]
//     	MUFU.RCP R14, R14;               # [315][0009d8]
//     	FADD.FTZ R28, R11, -1;           # [316][0009e0]
//     	FADD.FTZ R14, -R14, 10000;       # [317][0009e8]
//     	FFMA.FMZ R26, R29, R26, -R19;    # [318][0009f0]
//     	FFMA.FMZ R27, R29, R27, -R19;    # [319][0009f8]
//     	FFMA.FMZ R28, R29, R28, -R19;    # [320][000a00]
//     	FMUL32I.FMZ.SAT R24, R24, 0x3e22f983; # [321][000a08]
//     	FADD32I.FTZ R19, -R22, 1.001;    # [322][000a10]
//     	FMUL.FMZ R29, R25, R14;          # [323][000a18]
//     	FADD.FTZ R25, -R22, 1;           # [324][000a20]
//     	FMUL32I.FMZ R14, R14, 0x38d1bc5b; # [325][000a28]
//     	FMUL.FMZ R29, R29, R19;          # [326][000a30]
//     	FFMA.FMZ.SAT R14, R19, R14, R25; # [327][000a38]
//     	FFMA.FMZ.SAT R19, R29, c[0x9][0x38], R25; # [328][000a40]
//     	FMUL.FMZ.SAT R7, R7, 16;         # [329][000a48]
//     	FADD.FTZ R8, R8, -R16;           # [330][000a50]
//     	FADD.FTZ R9, R9, -R17;           # [331][000a58]
//     	FADD.FTZ R10, R10, -R18;         # [332][000a60]
//     	FFMA.FTZ R8, R8, c[0x6][0x1020], R16; # [333][000a68]
//     	FFMA.FTZ R25, R9, c[0x6][0x1020], R17; # [334][000a70]
//     	FFMA.FTZ R16, R10, c[0x6][0x1020], R18; # [335][000a78]
//     	FMUL32I.FMZ R9, R15, 0x3ffe048a; # [336][000a80]
//     	FMUL32I.FMZ R10, R15, 0x4025567d; # [337][000a88]
//     	FMUL32I.FMZ R17, R15, 0x403fff44; # [338][000a90]
//     	FMUL.FMZ R8, R14, R8;            # [339][000a98]
//     	FMUL.FMZ R16, R14, R16;          # [340][000aa0]
//     	FMUL.FMZ R15, R14, R25;          # [341][000aa8]
//     	FMUL.FMZ R18, R10, R12;          # [342][000ab0]
//     	FMUL.FMZ R10, R10, R24;          # [343][000ab8]
//     	FMUL.FMZ R18, R18, R23;          # [344][000ac0]
//     	FADD.FTZ R14, R4, -R0;           # [345][000ac8]
//     	FMUL.FMZ R4, R17, R11;           # [346][000ad0]
//     	FFMA.FTZ R0, R14, c[0x6][0x1020], R0; # [347][000ad8]
//     	FMUL.FMZ R14, R17, R24;          # [348][000ae0]
//     	FMUL.FMZ R4, R4, R23;            # [349][000ae8]
//     	FMUL.FMZ R17, R9, R24;           # [350][000af0]
//     	FMUL.FMZ R14, R14, R19;          # [351][000af8]
//     	FMUL.FMZ R24, R10, R19;          # [352][000b00]
//     	FMUL.FMZ R17, R17, R19;          # [353][000b08]
//     	FMUL.FMZ R10, R22, R18;          # [354][000b10]
//     	FMUL.FMZ R9, R9, R13;            # [355][000b18]
//     	FMUL.FMZ R18, R14, R28;          # [356][000b20]
//     	FMUL.FMZ R19, R24, R26;          # [357][000b28]
//     	FMUL.FMZ R14, R17, R27;          # [358][000b30]
//     	FMUL.FMZ R9, R9, R23;            # [359][000b38]
//     	FMUL.FMZ R17, R28, R8;           # [360][000b40]
//     	FMUL.FMZ R18, R18, R21;          # [361][000b48]
//     	FMUL.FMZ R8, R26, R15;           # [362][000b50]
//     	FMUL.FMZ R14, R14, R21;          # [363][000b58]
//     	FMUL.FMZ R15, R27, R16;          # [364][000b60]
//     	FMUL.FMZ R17, R21, R17;          # [365][000b68]
//     	FMUL.FMZ R16, R19, R21;          # [366][000b70]
//     	FMUL.FMZ R8, R21, R8;            # [367][000b78]
//     	FMUL.FMZ R15, R21, R15;          # [368][000b80]
//     	FMUL.FMZ R4, R22, R4;            # [369][000b88]
//     	FMUL.FMZ R9, R22, R9;            # [370][000b90]
//     	FADD.FTZ R21, R6, -R2;           # [371][000b98]
//     	FADD.FTZ R19, R5, -R1;           # [372][000ba0]
//     	FMUL.FMZ R4, R20, R4;            # [373][000ba8]
//     	FMUL.FMZ R5, R20, R10;           # [374][000bb0]
//     	FMUL.FMZ R9, R20, R9;            # [375][000bb8]
//     	FFMA.FTZ R2, R21, c[0x6][0x1020], R2; # [376][000bc0]
//     	FFMA.FTZ R6, R19, c[0x6][0x1020], R1; # [377][000bc8]
//     	FMUL.FMZ R5, R3, R5;             # [378][000bd0]
//     	FMUL.FMZ R9, R3, R9;             # [379][000bd8]
//     	FMUL.FMZ R1, R3, R4;             # [380][000be0]
//     	FMUL.FMZ R10, R13, R2;           # [381][000be8]
//     	FMUL.FMZ R3, R12, R6;            # [382][000bf0]
//     	FFMA.FMZ R4, R5, c[0x9][0x40], R16; # [383][000bf8]
//     	FMUL.FMZ R2, R11, R0;            # [384][000c00]
//     	FMUL.FMZ R5, R23, R10;           # [385][000c08]
//     	FFMA.FMZ R0, R1, c[0x9][0x40], R18; # [386][000c10]
//     	FMUL.FMZ R3, R23, R3;            # [387][000c18]
//     	FMUL.FMZ R1, R23, R2;            # [388][000c20]
//     	FMUL.FMZ R5, R22, R5;            # [389][000c28]
//     	FMUL.FMZ R2, R22, R3;            # [390][000c30]
//     	FFMA.FMZ R6, R9, c[0x9][0x40], R14; # [391][000c38]
//     	FMUL.FMZ R1, R22, R1;            # [392][000c40]
//     	FFMA.FMZ R3, R5, R20, R15;       # [393][000c48]
//     	FFMA.FMZ R5, R2, R20, R8;        # [394][000c50]
//     	FFMA.FMZ R3, R6, R7, R3;         # [395][000c58]
//     	FFMA.FMZ R2, R1, R20, R17;       # [396][000c60]
//     	FFMA.FMZ R1, R4, R7, R5;         # [397][000c68]
//     	FFMA.FMZ R0, R0, R7, R2;         # [398][000c70]
//     	MOV R2, R3;                      # [399][000c78]
//     	EXIT;                            # [400][000c80]
//     	END
//     END_SECTION
// END_SHADER
// 
