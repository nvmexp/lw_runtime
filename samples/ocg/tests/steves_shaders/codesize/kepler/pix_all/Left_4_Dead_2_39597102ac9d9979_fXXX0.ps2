// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x39597102ac9d9979
//         UCODE_HASH: 0x181aefcdc48ff796
//         POOL: APP
//         VERSION: 20
//         # USES: 1254
//         // Time: 59.338ms [9.498 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 19
//         USED_TEXTURE_BITS: 0x1
//         TEXTURE_SLOTS: 1
//         SAMPLER_SLOTS: 1
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x0a0a0a0a
//         0x0000000a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_0
        def c1, 1.00000000, 0.00000000, 0.00000000, 0.00000000 ; 0x3f800000 0x000000 0x000000 0x000000
        dcl t0.rg
        dcl t1.rg
        dcl t2.rg
        dcl t3.rg
        dcl t4.rg
        dcl_2d s0
        texld r2, t2, s0
        texld r3, t0, s0
        texld r0, t3, s0
        texld r1, t1, s0
        mul r3.xyz, r3.w, r3
        mad r2.xyz, r2, r2.w, -r3
        frc r4.xy, t4
        mad r2.xyz, r4.x, r2, r3
        mul r1.xyz, r1.w, r1
        mad r0.xyz, r0, r0.w, -r1
        mad r1.xyz, r4.x, r0, r1
        lrp r0.xyz, r4.y, r1, r2
        mul r0.xyz, r0, c0
        mov r0.w, c30.x
        mad r1.xyz, r0, -r0.w, c29
        mul r1.xyz, r1, c3.x
        mad r0.xyz, r0, c30.x, r1
        mov r0.w, c1.x
        mov oC0, r0
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0001 0x3f800000 0x00000000
//         0x00000000 0x00000000 0x0200001f 0x80000000
//         0xb0030000 0x0200001f 0x80000000 0xb0030001
//         0x0200001f 0x80000000 0xb0030002 0x0200001f
//         0x80000000 0xb0030003 0x0200001f 0x80000000
//         0xb0030004 0x0200001f 0x90000000 0xa00f0800
//         0x03000042 0x800f0002 0xb0e40002 0xa0e40800
//         0x03000042 0x800f0003 0xb0e40000 0xa0e40800
//         0x03000042 0x800f0000 0xb0e40003 0xa0e40800
//         0x03000042 0x800f0001 0xb0e40001 0xa0e40800
//         0x03000005 0x80070003 0x80ff0003 0x80e40003
//         0x04000004 0x80070002 0x80e40002 0x80ff0002
//         0x81e40003 0x02000013 0x80030004 0xb0e40004
//         0x04000004 0x80070002 0x80000004 0x80e40002
//         0x80e40003 0x03000005 0x80070001 0x80ff0001
//         0x80e40001 0x04000004 0x80070000 0x80e40000
//         0x80ff0000 0x81e40001 0x04000004 0x80070001
//         0x80000004 0x80e40000 0x80e40001 0x04000012
//         0x80070000 0x80550004 0x80e40001 0x80e40002
//         0x03000005 0x80070000 0x80e40000 0xa0e40000
//         0x02000001 0x80080000 0xa000001e 0x04000004
//         0x80070001 0x80e40000 0x81ff0000 0xa0e4001d
//         0x03000005 0x80070001 0x80e40001 0xa0000003
//         0x04000004 0x80070000 0x80e40000 0xa000001e
//         0x80e40001 0x02000001 0x80080000 0xa0000001
//         0x02000001 0x800f0800 0x80e40000 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x41000000 // 8.00000000
//         # USER FLOAT CONST: c[6][251] = 0x41000000 // 8.00000000
//         # USER FLOAT CONST: c[6][252] = 0x41000000 // 8.00000000
//         # USER FLOAT CONST: c[6][262] = 0x00000000 // 0.00000000
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@8.00000000
//         ##    ~c0.y -> c[6][251] = 100.00%@8.00000000
//         ##    ~c0.z -> c[6][252] = 100.00%@8.00000000
//         ##    ~c3.x -> c[6][262] = 100.00%@0.00000000
//         ##     c29.x -> c[6][366] = 50.24%@0.22322799 49.76%@0.05580700
//         ##     c29.y -> c[6][367] = 50.24%@0.17788845 49.76%@0.04447211
//         ##     c29.z -> c[6][368] = 50.24%@0.14702730 49.76%@0.03675682
//         ##     c30.x -> c[6][370] = 50.24%@1.00000000 49.76%@0.25000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xc0a2a793,0x000000d1
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xec85175c,0x000000d1
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xbdf5a672,0x000000d1
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x019f66a6,0x000000d1
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,128x128x0,1/0,A8R8G8B8,0,0,0), 0xe03968d6,0x000000d1
//         RENDERTARGETINFO: 1,3840x2400,A8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Point/Point/None,Clamp/Clamp/Wrap,0.00000000,4x4x0,1/0,A8R8G8B8,0,0,0), 0x7e8af404,0x000000d1
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x10 0 4 "COL1")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texr r7, v6.xyzz, #0, #0, 2D
//         texr r8, v4.xyzz, #0, #0, 2D
//         texr r5, v7.xyzz, #0, #0, 2D
//         texr r6, v5.xyzz, #0, #0, 2D
//         mulr r8.xyz, r8.w, r8
//         madr r7.xyz, r7, r7.w, -r8
//         frcr r9.xy, v8
//         madr r7.xyz, r9.x, r7, r8
//         mulr r6.xyz, r6.w, r6
//         madr r5.xyz, r5, r5.w, -r6
//         madr r6.xyz, r9.x, r5, r6
//         lrpr r5.xyz, r9.y, r6, r7
//         movr r44, c[6][250]
//         movr r44.x, constant(8.00000000, 8.00000000, 8.00000000, 8.00000000).x
//         movr r44.y, constant(8.00000000, 8.00000000, 8.00000000, 8.00000000).x
//         movr r44.z, constant(8.00000000, 8.00000000, 8.00000000, 8.00000000).x
//         mulr r5.xyz, r5, r44
//         movr r5.w, c[6][280].x
//         madr r6.xyz, r5, -r5.w, c[6][279]
//         movr r44, c[6][253].x
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulr r6.xyz, r6, r44
//         madr r5.xyz, r5, c[6][280].x, r6
//         movr r5.w, constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r0, r5
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R16, R0;                # [  1][000008]
//     	IPA.SC R1, a[0x304], R16;        # [  2][000010] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R0, a[0x300], R16;        # [  3][000018] TEX0
//     	IPA.SC R3, a[0x324], R16;        # [  4][000020] FIXED_FNC_TEXTURE_2_T
//     	IPA.SC R2, a[0x320], R16;        # [  5][000028] TEX2
//     	TEX.NODEP.T R12, R0, 0x0, 0x0, 2D; # [  6][000030]
//     	IPA.SC R7, a[0x314], R16;        # [  7][000038] FIXED_FNC_TEXTURE_1_T
//     	IPA.SC R6, a[0x310], R16;        # [  8][000040] TEX1
//     	TEX.NODEP.T R0, R2, 0x0, 0x0, 2D; # [  9][000048]
//     	IPA.SC R5, a[0x334], R16;        # [ 10][000050] FIXED_FNC_TEXTURE_3_T
//     	IPA.SC R4, a[0x330], R16;        # [ 11][000058] TEX3
//     	TEX.NODEP.T R8, R6, 0x0, 0x0, 2D; # [ 12][000060]
//     	TEX.NODEP.P R4, R4, 0x0, 0x0, 2D; # [ 13][000068]
//     	IPA.SC R18, a[0x340], R16;       # [ 14][000070] TEX4
//     	IPA.SC R17, a[0x344], R16;       # [ 15][000078] FIXED_FNC_TEXTURE_4_T
//     	F2F.FTZ.FLOOR R16, R18;          # [ 16][000080]
//     	FADD.FTZ R16, R18, -R16;         # [ 17][000088]
//     	FMUL.FMZ R12, R15, R12;          # [ 18][000090]
//     	FMUL.FMZ R13, R15, R13;          # [ 19][000098]
//     	FMUL.FMZ R14, R15, R14;          # [ 20][0000a0]
//     	F2F.FTZ.FLOOR R15, R17;          # [ 21][0000a8]
//     	FFMA.FMZ R0, R0, R3, -R12;       # [ 22][0000b0]
//     	FFMA.FMZ R1, R1, R3, -R13;       # [ 23][0000b8]
//     	FMUL.FMZ R8, R11, R8;            # [ 24][0000c0]
//     	FMUL.FMZ R9, R11, R9;            # [ 25][0000c8]
//     	FMUL.FMZ R10, R11, R10;          # [ 26][0000d0]
//     	FFMA.FMZ R18, R2, R3, -R14;      # [ 27][0000d8]
//     	FFMA.FMZ R1, R16, R1, R13;       # [ 28][0000e0]
//     	FFMA.FMZ R0, R16, R0, R12;       # [ 29][0000e8]
//     	FFMA.FMZ R4, R4, R7, -R8;        # [ 30][0000f0]
//     	FFMA.FMZ R5, R5, R7, -R9;        # [ 31][0000f8]
//     	FFMA.FMZ R6, R6, R7, -R10;       # [ 32][000100]
//     	FFMA.FMZ R14, R16, R18, R14;     # [ 33][000108]
//     	FFMA.FMZ R4, R16, R4, R8;        # [ 34][000110]
//     	FFMA.FMZ R5, R16, R5, R9;        # [ 35][000118]
//     	FFMA.FMZ R6, R16, R6, R10;       # [ 36][000120]
//     	FADD.FTZ R2, R17, -R15;          # [ 37][000128]
//     	FADD.FTZ R4, R4, -R0;            # [ 38][000130]
//     	FADD.FTZ R5, R5, -R1;            # [ 39][000138]
//     	FADD.FTZ R6, R6, -R14;           # [ 40][000140]
//     	FFMA.FTZ R0, R2, R4, R0;         # [ 41][000148]
//     	FFMA.FTZ R1, R2, R5, R1;         # [ 42][000150]
//     	FMUL.FMZ R0, R0, 8;              # [ 43][000158]
//     	FFMA.FTZ R2, R2, R6, R14;        # [ 44][000160]
//     	FMUL.FMZ R1, R1, 8;              # [ 45][000168]
//     	FMUL.FMZ R2, R2, 8;              # [ 46][000170]
//     	MOV32I R3, 0x3f800000;           # [ 47][000178]
//     	FMUL.FMZ R0, R0, c[0x6][0x1180]; # [ 48][000180]
//     	FMUL.FMZ R1, R1, c[0x6][0x1180]; # [ 49][000188]
//     	FMUL.FMZ R2, R2, c[0x6][0x1180]; # [ 50][000190]
//     	EXIT;                            # [ 51][000198]
//     	END
//     END_SECTION
// END_SHADER
// 
