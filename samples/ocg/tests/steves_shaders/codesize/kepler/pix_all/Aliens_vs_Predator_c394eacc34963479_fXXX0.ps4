// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0xc394eacc34963479
//         FINGERPRINTER_HASH: 0x0000000000000000
//         UCODE_HASH: 0x39b7580f268ae0d0
//         POOL: APP
//         VERSION: 20
//         # USES: 3285
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 1
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 23
//         TEXTURE_SLOTS: 102
//         SAMPLER_SLOTS: 1
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_4_0
        dcl_constantbuffer cb0[25].xyzw, immediateIndexed
        dcl_constantbuffer cb6[5].xyzw, immediateIndexed
        dcl_constantbuffer cb4[10].xyzw, immediateIndexed
        dcl_sampler s3, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t100, texture2d, (float, float, float, float)
        dcl_resource t101, texture2d, (float, float, float, float)
        dcl_resource t102, texturelwbe, (float, float, float, float)
        dcl_resource t103, texturelwbe, (float, float, float, float)
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_output o0.xyzw
        dcl_temps 8 
        ftoi r0.xy, v0.xyxx
        mov r0.zw, l(0, 0, 0, 0)
        ld r1.xyzw, r0.xyww, t100.xyzw
        ld r0.xyzw, r0.xyzw, t101.xyzw
        dp2 r2.x, r1.xyxx, r1.xyxx
        add r2.x, -r2.x, l(1.00000000)
        sqrt r2.x, |r2.x|
        lt r2.y, l(0.00000000), r1.z
        movc r2.z, r2.y, r2.x, -r2.x
        mul r3.xy, |r1.zzzz|, cb4[0].xyxx
        mad r3.zw, v0.xxxy, cb4[0].zzzw, l(0.00000000, 0.00000000, -1.00000000, -1.00000000)
        mul r3.xy, r3.zwzz, r3.xyxx
        mul r3.yzw, r3.yyyy, cb0[13].xxyz
        mad r3.xyz, cb0[12].xyzx, r3.xxxx, r3.yzwy
        mad r3.xyz, cb0[14].xyzx, |r1.zzzz|, r3.xyzx
        add r3.xyz, r3.xyzx, cb0[15].xyzx
        add r4.xyz, -r3.xyzx, cb4[1].xyzx
        dp3 r1.z, r4.xyzx, r4.xyzx
        rsq r2.w, r1.z
        mul r5.xyz, r2.wwww, r4.xyzx
        sqrt r1.z, r1.z
        mul r2.w, r1.z, cb4[6].w
        mad r3.w, -r1.z, cb4[6].w, l(1.00000000)
        mul_sat r3.w, r3.w, cb4[7].x
        log r3.w, r3.w
        mul r3.w, r3.w, cb4[7].y
        exp r3.w, r3.w
        dp3 r4.w, r5.xyzx, cb4[6].xyzx
        add r4.w, r4.w, -cb4[7].z
        mul_sat r4.w, r4.w, cb4[7].w
        mul r4.w, r3.w, r4.w
        movc r3.w, cb4[8].w, r4.w, r3.w
        mul r6.xyz, r3.wwww, cb4[8].xyzx
        if_nz cb4[9].y
          dp3 r7.x, r5.xyzx, cb4[2].xyzx
          dp3 r7.y, r5.xyzx, cb4[3].xyzx
          dp3 r7.z, r5.xyzx, cb4[4].xyzx
          sample r5.xyzw, r7.xyzx, t102.xyzw, s3
          if_nz cb4[9].z
            sample r7.xyzw, r7.xyzx, t103.xyzw, s3
            mul r2.w, r2.w, cb4[9].x
            min r2.w, r2.w, l(1.00000000)
            add r7.xyz, -r5.xyzx, r7.xyzx
            mad r5.xyz, r2.wwww, r7.xyzx, r5.xyzx
          endif 
          mul r6.xyz, r5.xyzx, r6.xyzx
        endif 
        add r3.xyz, -r3.xyzx, cb0[24].xyzx
        dp3 r2.w, r3.xyzx, r3.xyzx
        rsq r2.w, r2.w
        mul r3.xyz, r2.wwww, r3.xyzx
        div r4.xyz, r4.xyzx, r1.zzzz
        dp3 r1.z, r6.xyzx, l(0.33300000, 0.33300000, 0.33300000, 0.00000000)
        mov r2.xy, r1.xyxx
        dp3 r1.x, r2.xyzx, r4.xyzx
        min r1.x, r1.x, l(1.00000000)
        mul r2.xyz, r2.xyzx, r1.xxxx
        mad r2.xyz, r2.xyzx, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), -r4.xyzx
        dp3 r1.y, r2.xyzx, r3.xyzx
        min r1.y, r1.y, l(1.00000000)
        mov r2.xyw, l(0x3f7d8000, 0x3f7e8000, 0, 0x3f7f8000)
        mov r2.z, r0.w
        sample r3.xyzw, r2.xzxx, t0.xyzw, s3
        sample r4.xyzw, r2.yzyy, t0.xyzw, s3
        sample r5.xyzw, r2.wzww, t0.xyzw, s3
        mad r3.xyz, r3.xyzx, r1.zzzz, -r6.xyzx
        mad r3.xyz, r3.wwww, r3.xyzx, r6.xyzx
        mad r2.y, r1.x, l(0.49023438), l(0.49218750)
        sample r7.xyzw, r2.yzyy, t0.xyzw, s3
        mul r3.xyz, r3.xyzx, r7.xxxx
        mul r3.xyz, r0.xyzx, r3.xyzx
        mad r0.xyz, r0.xyzx, r1.zzzz, -r6.xyzx
        mad r0.xyz, r5.xxxx, r0.xyzx, r6.xyzx
        mad r4.xyz, r4.xyzx, r1.zzzz, -r0.xyzx
        mad r0.xyz, r4.wwww, r4.xyzx, r0.xyzx
        mad r2.x, r1.y, l(0.49023438), l(0.49218750)
        sample r2.xyzw, r2.xzxx, t0.xyzw, s3
        mul r0.xyz, r0.xyzx, r2.yyyy
        mad r0.xyz, r0.xyzx, r1.wwww, r3.xyzx
        movc r0.xyz, cb6[4].zzzz, r3.xyzx, r0.xyzx
        min o0.xyz, r0.xyzx, l(31.87500000, 31.87500000, 31.87500000, 0.00000000)
        mov o0.w, l(0)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3aa3d70a // 0.001250
//         COP_CONST[1]: 0x3a4ccccd // 0.000781
//         COP_CONST[2]: 0xbf7da81a // -0.990846
//         COP_CONST[3]: 0x362b2800 // 0.000003
//         COP_CONST[4]: 0xbe0a3cff // -0.134998
//         COP_CONST[5]: 0xbf7d2e80 // -0.988991
//         COP_CONST[6]: 0x3d7a8e4d // 0.061171
//         COP_CONST[7]: 0x3e09fac3 // 0.134746
//         COP_CONST[8]: 0x3eaa7efa // 0.333000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][48] = 0xbf7da81a // -0.990846
//         USER_CONST: c[0][49] = 0x362b2800 // 0.000003
//         USER_CONST: c[0][50] = 0xbe0a3cff // -0.134998
//         USER_CONST: c[0][52] = 0xbc0741d0 // -0.008255
//         USER_CONST: c[0][53] = 0x3f7f8545 // 0.998127
//         USER_CONST: c[0][54] = 0x3d78437d // 0.060611
//         USER_CONST: c[0][56] = 0x3e09fac3 // 0.134746
//         USER_CONST: c[0][57] = 0x3d7a8e4d // 0.061171
//         USER_CONST: c[0][58] = 0xbf7d2e80 // -0.988991
//         USER_CONST: c[0][60] = 0xc233fc25 // -44.996235
//         USER_CONST: c[0][61] = 0xc0f6446a // -7.695851
//         USER_CONST: c[0][62] = 0x42cdb414 // 102.851715
//         USER_CONST: c[0][96] = 0xc233fc25 // -44.996235
//         USER_CONST: c[0][97] = 0xc0f6446a // -7.695851
//         USER_CONST: c[0][98] = 0x42cdb414 // 102.851715
//         USER_CONST: c[4][0] = 0x3f52f537 // 0.824054
//         USER_CONST: c[4][1] = 0x3f03d942 // 0.515034
//         USER_CONST: c[4][2] = 0x3a4ccccd // 0.000781
//         USER_CONST: c[4][3] = 0x3aa3d70a // 0.001250
//         USER_CONST: c[4][37] = 0x00000000 // 0.000000
//         USER_CONST: c[4][38] = 0x00000000 // 0.000000
//         USER_CONST: c[6][18] = 0x00000000 // 0.000000
//     END_SECTION
//     # Exelwtion Time: 216.613ms [4.701 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x3 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x4 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 0 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 4 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 0
//         bCanReorderHalf: 0
//         bCanReorderFloat: 0
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//                 indexableRanges: 1 :  (null 0 0 0)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr (s32) r9.xy, (r) v0.xyxx  //   0 SHD
//         movu32 (u32) r9.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r9.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r9.xyww, (u32) r4106, #100, #0, 2D, LOAD  //   0 SHD
//         movr (r) r10, (r) r4105  //   0 SHD
//         movu32 (u32) r4106, (u32) r9.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r9, (u32) r4106, #101, #0, 2D, LOAD  //   0 SHD
//         movr (r) r9, (r) r4105  //   0 SHD
//         dp2r (r) r11.x, (r) r10.xyxx, (r) r10.xyxx  //   0 SHD
//         addr (r) r11.x, (r) -r11.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         rsqr (r) r4106.x, (r) |r11.x|  //   0 SHD
//         rsqr (r) r4106.y, (r) |r11.x|  //   0 SHD
//         rsqr (r) r4106.z, (r) |r11.x|  //   0 SHD
//         rsqr (r) r4106.w, (r) |r11.x|  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r11.x, (r) r4107  //   0 SHD
//         set_ltr.c (s32) r11.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r10.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r11.y  //   0 SHD
//         movr (r) r4105, (r) r11.x  //   0 SHD
//         movr (r) r4105(EQ), (r) -r11.x  //   0 SHD
//         movr (r) r11.z, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[4][0].xyxx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.51503384, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.82405418, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xy, (r) |r10.z|, (r) r4109  //   0 SHD
//         movr (r) r4109, (r) c[4][0].zzzw  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00078125, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00125000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12.zw, (r) v0.xxxy, (r) r4109, (r) constant(0.00000000, 0.00000000, -1.00000000, -1.00000000)  //   0 SHD
//         mulr (r) r12.xy, (r) r12.zwzz, (r) r12.xyxx  //   0 SHD
//         movr (r) r4109, (r) c[0][13].xxyz  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.00825544, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(-0.00825544, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.99812728, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.06061124, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.yzw, (r) r12.y, (r) r4109  //   0 SHD
//         movr (r) r4108, (r) c[0][12].xyzx  //   0 SHD
//         movr (r) r4108.x, (r) constant(-0.99084628, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.00000255, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(-0.13499831, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(-0.99084628, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12.xyz, (r) r4108, (r) r12.x, (r) r12.yzwy  //   0 SHD
//         movr (r) r4108, (r) c[0][14].xyzx  //   0 SHD
//         movr (r) r4108.x, (r) constant(0.13474564, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.y, (r) constant(0.06117086, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.z, (r) constant(-0.98899078, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4108.w, (r) constant(0.13474564, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12.xyz, (r) r4108, (r) |r10.z|, (r) r12.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[0][15].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(-44.99623489, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(-7.69585133, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(102.85171509, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-44.99623489, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r12.xyz, (r) r12.xyzx, (r) r4109  //   0 SHD
//         addr (r) r13.xyz, (r) -r12.xyzx, (r) c[4][1].xyzx  //   0 SHD
//         dp3r (r) r10.z, (r) r13.xyzx, (r) r13.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r10.z  //   0 SHD
//         movr (r) r11.w, (r) r4105  //   0 SHD
//         mulr (r) r14.xyz, (r) r11.w, (r) r13.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r10.z  //   0 SHD
//         rsqr (r) r4106.y, (r) r10.z  //   0 SHD
//         rsqr (r) r4106.z, (r) r10.z  //   0 SHD
//         rsqr (r) r4106.w, (r) r10.z  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.z, (r) r4105.z  //   0 SHD
//         movr (r) r10.z, (r) r4107  //   0 SHD
//         mulr (r) r11.w, (r) r10.z, (r) c[4][6].w  //   0 SHD
//         madr (r) r12.w, (r) -r10.z, (r) c[4][6].w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr_sat (r) r12.w, (r) r12.w, (r) c[4][7].x  //   0 SHD
//         lg2r (r) r4105.w, (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         mulr (r) r12.w, (r) r12.w, (r) c[4][7].y  //   0 SHD
//         ex2r (r) r4105.w, (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         dp3r (r) r13.w, (r) r14.xyzx, (r) c[4][6].xyzx  //   0 SHD
//         addr (r) r13.w, (r) r13.w, (r) -c[4][7].z  //   0 SHD
//         mulr_sat (r) r13.w, (r) r13.w, (r) c[4][7].w  //   0 SHD
//         mulr (r) r13.w, (r) r12.w, (r) r13.w  //   0 SHD
//         movs32.c (s32) hc, (s32) c[4][8].w  //   0 SHD
//         movr (r) r4105, (r) r13.w  //   0 SHD
//         movr (r) r4105(EQ), (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         mulr (r) r15.xyz, (r) r12.w, (r) c[4][8].xyzx  //   0 SHD
//         movs32 (s32) r4108, (s32) c[4][9].y  //   0 SHD
//         movs32 (s32) r4108.x, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.y, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.z, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.w, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r4108  //   0 SHD
//         ife NE.x , l0, l1  //   0 SHD
//         dp3r (r) r16.x, (r) r14.xyzx, (r) c[4][2].xyzx  //   0 SHD
//         dp3r (r) r16.y, (r) r14.xyzx, (r) c[4][3].xyzx  //   0 SHD
//         dp3r (r) r16.z, (r) r14.xyzx, (r) c[4][4].xyzx  //   0 SHD
//         txgr (r) r4105, (r) r16.xyzx, (r) r4106, #102, #3, LWBE, AUTO  //   0 SHD
//         movr (r) r14, (r) r4105  //   0 SHD
//         movs32 (s32) r4108, (s32) c[4][9].z  //   0 SHD
//         movs32 (s32) r4108.x, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.y, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.z, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.w, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r4108  //   0 SHD
//         ife NE.x , l2, l3  //   0 SHD
//         txgr (r) r4105, (r) r16.xyzx, (r) r4106, #103, #3, LWBE, AUTO  //   0 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         mulr (r) r11.w, (r) r11.w, (r) c[4][9].x  //   0 SHD
//         minr (r) r11.w, (r) r11.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r16.xyz, (r) -r14.xyzx, (r) r16.xyzx  //   0 SHD
//         madr (r) r14.xyz, (r) r11.w, (r) r16.xyzx, (r) r14.xyzx  //   0 SHD
//         l2:  //   0 SHD
//         l3:  //   0 SHD
//         mulr (r) r15.xyz, (r) r14.xyzx, (r) r15.xyzx  //   0 SHD
//         l0:  //   0 SHD
//         l1:  //   0 SHD
//         movr (r) r4109, (r) c[0][24].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(-44.99623489, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(-7.69585133, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(102.85171509, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-44.99623489, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r12.xyz, (r) -r12.xyzx, (r) r4109  //   0 SHD
//         dp3r (r) r11.w, (r) r12.xyzx, (r) r12.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r11.w  //   0 SHD
//         movr (r) r11.w, (r) r4105  //   0 SHD
//         mulr (r) r12.xyz, (r) r11.w, (r) r12.xyzx  //   0 SHD
//         divr (r) r4105.x, (r) r13.x, (r) r10.z  //   0 SHD
//         divr (r) r4105.y, (r) r13.y, (r) r10.z  //   0 SHD
//         divr (r) r4105.z, (r) r13.z, (r) r10.z  //   0 SHD
//         movr (r) r13.xyz, (r) r4105  //   0 SHD
//         dp3r (r) r10.z, (r) r15.xyzx, (r) constant(0.33300000, 0.33300000, 0.33300000, 0.00000000)  //   0 SHD
//         movu32 (u32) r11.xy, (u32) r10.xyxx  //   0 SHD
//         dp3r (r) r10.x, (r) r11.xyzx, (r) r13.xyzx  //   0 SHD
//         minr (r) r10.x, (r) r10.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.xyz, (r) r11.xyzx, (r) r10.x  //   0 SHD
//         madr (r) r11.xyz, (r) r11.xyzx, (r) constant(2.00000000, 2.00000000, 2.00000000, 0.00000000), (r) -r13.xyzx  //   0 SHD
//         dp3r (r) r10.y, (r) r11.xyzx, (r) r12.xyzx  //   0 SHD
//         minr (r) r10.y, (r) r10.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movu32 (u32) r11.xyw, (u32) constant(1065189376, 1065254912, 0, 1065320448)  //   0 SHD
//         movu32 (u32) r11.z, (u32) r9.w  //   0 SHD
//         txgr (r) r4105, (r) r11.xzxx, (r) r4106, #0, #3, 2D, AUTO  //   0 SHD
//         movr (r) r12, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r11.yzyy, (r) r4106, #0, #3, 2D, AUTO  //   0 SHD
//         movr (r) r13, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r11.wzww, (r) r4106, #0, #3, 2D, AUTO  //   0 SHD
//         movr (r) r14, (r) r4105  //   0 SHD
//         madr (r) r12.xyz, (r) r12.xyzx, (r) r10.z, (r) -r15.xyzx  //   0 SHD
//         madr (r) r12.xyz, (r) r12.w, (r) r12.xyzx, (r) r15.xyzx  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1056702464, 0, 0, 0).x  //   0 SHD
//         madr (r) r11.y, (r) r10.x, (r) constant(0.49023438, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r11.yzyy, (r) r4106, #0, #3, 2D, AUTO  //   0 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         mulr (r) r12.xyz, (r) r12.xyzx, (r) r16.x  //   0 SHD
//         mulr (r) r12.xyz, (r) r9.xyzx, (r) r12.xyzx  //   0 SHD
//         madr (r) r9.xyz, (r) r9.xyzx, (r) r10.z, (r) -r15.xyzx  //   0 SHD
//         madr (r) r9.xyz, (r) r14.x, (r) r9.xyzx, (r) r15.xyzx  //   0 SHD
//         madr (r) r13.xyz, (r) r13.xyzx, (r) r10.z, (r) -r9.xyzx  //   0 SHD
//         madr (r) r9.xyz, (r) r13.w, (r) r13.xyzx, (r) r9.xyzx  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1056702464, 0, 0, 0).x  //   0 SHD
//         madr (r) r11.x, (r) r10.y, (r) constant(0.49023438, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r11.xzxx, (r) r4106, #0, #3, 2D, AUTO  //   0 SHD
//         movr (r) r11, (r) r4105  //   0 SHD
//         mulr (r) r9.xyz, (r) r9.xyzx, (r) r11.y  //   0 SHD
//         madr (r) r9.xyz, (r) r9.xyzx, (r) r10.w, (r) r12.xyzx  //   0 SHD
//         movs32 (s32) r4108, (s32) c[6][4].z  //   0 SHD
//         movs32 (s32) r4108.x, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.y, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.z, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32 (s32) r4108.w, (s32) constant(0, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r4108  //   0 SHD
//         movr (r) r4105, (r) r12.xyzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r9.xyzx  //   0 SHD
//         movr (r) r9.xyz, (r) r4105  //   0 SHD
//         minr (r) r0.xyz, (r) r9.xyzx, (r) constant(31.87500000, 31.87500000, 31.87500000, 0.00000000)  //   0 SHD
//         movu32 (u32) r0.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         ret   //   0 SHD
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][48] = 100.00%@-0.99084628
//                 ~c[0][49] = 100.00%@0.00000255
//                 ~c[0][50] = 100.00%@-0.13499831
//                 ~c[0][52] = 100.00%@-0.00825544
//                 ~c[0][53] = 100.00%@0.99812728
//                 ~c[0][54] = 100.00%@0.06061124
//                 ~c[0][56] = 100.00%@0.13474564
//                 ~c[0][57] = 100.00%@0.06117086
//                 ~c[0][58] = 100.00%@-0.98899078
//                 ~c[0][60] = 100.00%@-44.99623489
//                 ~c[0][61] = 100.00%@-7.69585133
//                 ~c[0][62] = 100.00%@102.85171509
//                 ~c[0][96] = 100.00%@-44.99623489
//                 ~c[0][97] = 100.00%@-7.69585133
//                 ~c[0][98] = 100.00%@102.85171509
//                 ~c[4][0] = 100.00%@0.82405418
//                 ~c[4][1] = 100.00%@0.51503384
//                 ~c[4][2] = 100.00%@0.00078125
//                 ~c[4][3] = 100.00%@0.00125000
//                  c[4][4] = 3.23%@51.99548721 3.23%@53.63580322 3.23%@-31.01144409 3.23%@-30.98143959 3.23%@-57.71934509 3.23%@-57.96439743 3.23%@54.59610367
//                  c[4][5] = 3.23%@-25.57345581 3.23%@-23.74071693 3.23%@-8.41949177 3.23%@-8.35510063 3.23%@-3.50177050 3.23%@-3.43737936 3.23%@-24.04854012
//                  c[4][6] = 3.23%@-83.23563385 3.23%@-82.02453613 3.23%@78.28175354 3.23%@78.03670502 3.23%@41.04531097 3.23%@41.01530457 3.23%@-89.21543884
//                  c[4][8] = 19.37%@-0.03346261 19.37%@0.00002027 9.65%@1.00000000 6.46%@0.99943995 6.46%@0.71133757 6.43%@0.72798538 3.23%@0.00000006
//                  c[4][9] = 77.41%@0.00000000 6.46%@0.00000000 6.46%@0.00000000 3.23%@-0.00000003 3.23%@0.70411611 3.23%@-0.00000003
//                  c[4][10] = 22.59%@-0.99999994 19.37%@-0.99943990 6.46%@0.00002026 6.46%@-0.03346262 6.46%@-0.70285046 6.43%@-0.68559271 3.23%@1.00000000
//                  c[4][12] = 64.52%@0.00000000 12.91%@-0.00000000 3.23%@0.00000006 3.23%@-0.00390613 3.23%@0.00390619 3.23%@0.93260306 3.23%@0.70285040
//                  c[4][13] = 77.44%@1.00000000 6.43%@0.00000006 3.23%@0.99999231 3.23%@-0.99999237 3.23%@0.02639273 3.23%@0.93316501 3.23%@0.99999994
//                  c[4][14] = 67.75%@0.00000000 12.91%@0.00000000 3.23%@0.00001526 3.23%@-0.00001520 3.23%@0.35993743 3.23%@-0.30430830 3.23%@0.71133751
//                  c[4][16] = 22.59%@0.99999994 19.37%@0.99943990 6.46%@0.03346262 6.46%@-0.00002026 3.23%@0.70285046 3.23%@0.00000004 3.23%@0.68559271
//                  c[4][17] = 64.52%@0.00000000 6.46%@-0.00000000 6.46%@-0.00000000 6.43%@-0.99999994 3.23%@-0.00390631 3.23%@-0.00390607 3.23%@0.00000006
//                  c[4][18] = 19.37%@-0.03346261 19.37%@0.00002027 9.65%@1.00000000 6.46%@0.99943995 3.23%@0.71133757 3.23%@0.00000004 3.23%@0.72798538
//                  c[4][24] = 22.59%@-0.99999994 19.37%@-0.99943990 6.46%@-0.03346262 6.46%@0.00002026 3.23%@-0.70285046 3.23%@-0.00000004 3.23%@-0.68559271
//                  c[4][25] = 64.52%@0.00000000 6.46%@0.00000000 6.46%@0.00000000 6.43%@0.99999994 3.23%@0.00390631 3.23%@0.00390607 3.23%@-0.00000006
//                  c[4][26] = 19.37%@0.03346261 19.37%@-0.00002027 9.65%@-1.00000000 6.46%@-0.99943995 3.23%@-0.71133757 3.23%@-0.00000004 3.23%@-0.72798538
//                  c[4][27] = 35.51%@0.12500000 32.28%@0.33333334 12.88%@0.28717571 6.46%@1.00000000 3.23%@0.04347826 3.23%@0.02857143 3.23%@0.50000000
//                  c[4][28] = 64.49%@1.00000000 35.51%@2.00000000
//                  c[4][29] = 70.98%@2.00000000 16.11%@1.00000000 6.46%@2.00000024 3.23%@1.50000000 3.23%@1.20000005
//                  c[4][30] = 35.51%@0.04361933 32.28%@-1.00000000 28.99%@0.00000000 3.23%@0.76604444
//                  c[4][31] = 35.51%@1.04560876 32.28%@0.50000000 28.99%@999999986991104.00000000 3.23%@10.00190544
//                  c[4][32] = 19.37%@0.00000000 12.88%@58.03921890 3.23%@193.50991821 3.23%@19.35099983 3.23%@18.92218018 3.23%@10.01222897 3.23%@189.22174072
//                  c[4][33] = 19.37%@0.00000000 12.88%@137.98831177 3.23%@91.08083344 3.23%@9.10808659 3.23%@8.94103718 3.23%@19.71789551 3.23%@89.41033936
//                  c[4][34] = 19.37%@0.00000000 12.88%@199.99998474 3.23%@35.67332840 3.23%@3.56733441 3.23%@3.50190663 3.23%@31.69913101 3.23%@35.01905441
//                  c[4][36] = 51.64%@0.20000000 32.28%@0.33333334 16.08%@infinity  
//                  c[4][35] = 71.01%@0x1 28.99%@0x0
//                 ~c[4][37] = 100.00%@0x0
//                 ~c[4][38] = 100.00%@0x0
//                 ~c[6][18] = 100.00%@0x0
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x100, height=0x400, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x1
//         100.00% width=0x800, height=0x200, mips=0x1, DXGI_FORMAT_BC3_UNORM_SRGB
//         TEXTURE_SLOT 0x2
//         100.00% width=0x800, height=0x200, mips=0x1, DXGI_FORMAT_BC3_UNORM_SRGB
//         TEXTURE_SLOT 0x3
//         100.00% width=0x40, height=0x40, mips=0x7, DXGI_FORMAT_B8G8R8A8_UNORM
//         TEXTURE_SLOT 0x4
//         100.00% width=0xa00, height=0x640, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x5
//         100.00% width=0xa00, height=0x640, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x6
//         100.00% width=0x80, height=0x1, mips=0x1, DXGI_FORMAT_A8_UNORM
//         TEXTURE_SLOT 0x7
//         TEXTURE_SLOT 0x8
//         TEXTURE_SLOT 0x9
//         TEXTURE_SLOT 0xa
//         TEXTURE_SLOT 0xb
//         TEXTURE_SLOT 0xc
//         TEXTURE_SLOT 0xd
//         TEXTURE_SLOT 0xe
//         TEXTURE_SLOT 0xf
//         TEXTURE_SLOT 0x10
//         TEXTURE_SLOT 0x11
//         TEXTURE_SLOT 0x12
//         TEXTURE_SLOT 0x13
//         TEXTURE_SLOT 0x14
//         TEXTURE_SLOT 0x15
//         TEXTURE_SLOT 0x16
//         TEXTURE_SLOT 0x17
//         TEXTURE_SLOT 0x18
//         TEXTURE_SLOT 0x19
//         TEXTURE_SLOT 0x1a
//         TEXTURE_SLOT 0x1b
//         TEXTURE_SLOT 0x1c
//         TEXTURE_SLOT 0x1d
//         TEXTURE_SLOT 0x1e
//         TEXTURE_SLOT 0x1f
//         TEXTURE_SLOT 0x20
//         TEXTURE_SLOT 0x21
//         TEXTURE_SLOT 0x22
//         TEXTURE_SLOT 0x23
//         TEXTURE_SLOT 0x24
//         TEXTURE_SLOT 0x25
//         TEXTURE_SLOT 0x26
//         TEXTURE_SLOT 0x27
//         TEXTURE_SLOT 0x28
//         TEXTURE_SLOT 0x29
//         TEXTURE_SLOT 0x2a
//         TEXTURE_SLOT 0x2b
//         TEXTURE_SLOT 0x2c
//         TEXTURE_SLOT 0x2d
//         TEXTURE_SLOT 0x2e
//         TEXTURE_SLOT 0x2f
//         TEXTURE_SLOT 0x30
//         TEXTURE_SLOT 0x31
//         TEXTURE_SLOT 0x32
//         TEXTURE_SLOT 0x33
//         TEXTURE_SLOT 0x34
//         TEXTURE_SLOT 0x35
//         TEXTURE_SLOT 0x36
//         TEXTURE_SLOT 0x37
//         TEXTURE_SLOT 0x38
//         TEXTURE_SLOT 0x39
//         TEXTURE_SLOT 0x3a
//         TEXTURE_SLOT 0x3b
//         TEXTURE_SLOT 0x3c
//         TEXTURE_SLOT 0x3d
//         TEXTURE_SLOT 0x3e
//         TEXTURE_SLOT 0x3f
//         TEXTURE_SLOT 0x40
//         TEXTURE_SLOT 0x41
//         TEXTURE_SLOT 0x42
//         TEXTURE_SLOT 0x43
//         TEXTURE_SLOT 0x44
//         TEXTURE_SLOT 0x45
//         TEXTURE_SLOT 0x46
//         TEXTURE_SLOT 0x47
//         TEXTURE_SLOT 0x48
//         TEXTURE_SLOT 0x49
//         TEXTURE_SLOT 0x4a
//         TEXTURE_SLOT 0x4b
//         TEXTURE_SLOT 0x4c
//         TEXTURE_SLOT 0x4d
//         TEXTURE_SLOT 0x4e
//         TEXTURE_SLOT 0x4f
//         TEXTURE_SLOT 0x50
//         TEXTURE_SLOT 0x51
//         TEXTURE_SLOT 0x52
//         TEXTURE_SLOT 0x53
//         TEXTURE_SLOT 0x54
//         TEXTURE_SLOT 0x55
//         TEXTURE_SLOT 0x56
//         TEXTURE_SLOT 0x57
//         TEXTURE_SLOT 0x58
//         TEXTURE_SLOT 0x59
//         TEXTURE_SLOT 0x5a
//         TEXTURE_SLOT 0x5b
//         TEXTURE_SLOT 0x5c
//         TEXTURE_SLOT 0x5d
//         TEXTURE_SLOT 0x5e
//         TEXTURE_SLOT 0x5f
//         TEXTURE_SLOT 0x60
//         TEXTURE_SLOT 0x61
//         TEXTURE_SLOT 0x62
//         TEXTURE_SLOT 0x63
//         TEXTURE_SLOT 0x64
//         TEXTURE_SLOT 0x65
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=-340282346638528860000000000000000000000.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE pixel
//     	IPA.PASS R5, a[0x70];            # [  0][000000] POSITION_X
//     	IPA.PASS R4, a[0x74];            # [  1][000008] POSITION_Y
//     	F2I.TRUNC R0, R5;                # [  2][000010]
//     	F2I.TRUNC R1, R4;                # [  3][000018]
//     	TLD.LZ.T R12, R0, 0x64, 2D;      # [  4][000020]
//     	TLD.LZ.T R0, R0, 0x65, 2D;       # [  5][000028]
//     	MOV32I R11, -0x40800000;         # [  6][000030]
//     	FFMA.FTZ R7, R4, c[0x10][0x0], R11; # [  7][000038]
//     	FFMA.FTZ R5, R5, c[0x10][0x4], R11; # [  8][000040]
//     	F2F R4, |R14|;                   # [  9][000048]
//     	FMUL.FTZ R6, R12, R12;           # [ 10][000050]
//     	FMUL32I.FTZ R8, R4, 0x3f03d942;  # [ 11][000058]
//     	FFMA.FTZ R9, R13, R13, R6;       # [ 12][000060]
//     	FMUL32I.FTZ R6, R4, 0x3f52f537;  # [ 13][000068]
//     	FMUL.FTZ R7, R7, R8;             # [ 14][000070]
//     	FADD.FTZ R9, -R9, 1;             # [ 15][000078]
//     	FMUL.FTZ R5, R5, R6;             # [ 16][000080]
//     	FMUL32I.FTZ R6, R7, 0xbc0741d0;  # [ 17][000088]
//     	FMUL32I.FTZ R8, R7, 0x3f7f8545;  # [ 18][000090]
//     	MUFU.RSQ R10, |R9|;              # [ 19][000098]
//     	FFMA.FTZ R6, R5, c[0x10][0x8], R6; # [ 20][0000a0]
//     	FMUL32I.FTZ R9, R7, 0x3d78437d;  # [ 21][0000a8]
//     	FFMA.FTZ R7, R5, c[0x10][0xc], R8; # [ 22][0000b0]
//     	FFMA.FTZ R6, R4, c[0x10][0x1c], R6; # [ 23][0000b8]
//     	FFMA.FTZ R8, R5, c[0x10][0x10], R9; # [ 24][0000c0]
//     	FFMA.FTZ R7, R4, c[0x10][0x18], R7; # [ 25][0000c8]
//     	FADD32I.FTZ R6, R6, 0xc233fc25;  # [ 26][0000d0]
//     	MUFU.RCP R5, R10;                # [ 27][0000d8]
//     	FFMA.FTZ R4, R4, c[0x10][0x14], R8; # [ 28][0000e0]
//     	FADD32I.FTZ R16, R7, 0xc0f6446a; # [ 29][0000e8]
//     	FADD.FTZ R10, -R6, c[0x4][0x10]; # [ 30][0000f0]
//     	FADD32I.FTZ R9, R4, 0x42cdb414;  # [ 31][0000f8]
//     	FADD.FTZ R8, -R16, c[0x4][0x14]; # [ 32][000100]
//     	FMUL.FTZ R4, R10, R10;           # [ 33][000108]
//     	F2F R17, -R5;                    # [ 34][000110]
//     	FADD.FTZ R7, -R9, c[0x4][0x18];  # [ 35][000118]
//     	FFMA.FTZ R4, R8, R8, R4;         # [ 36][000120]
//     	FCMP.LEU.FTZ R5, R17, R5, R14;   # [ 37][000128]
//     	FADD32I.FTZ R20, -R16, 0xc0f6446a; # [ 38][000130]
//     	FFMA.FTZ R14, R7, R7, R4;        # [ 39][000138]
//     	FADD32I.FTZ R4, -R6, 0xc233fc25; # [ 40][000140]
//     	FADD32I.FTZ R6, -R9, 0x42cdb414; # [ 41][000148]
//     	MUFU.RSQ R16, R14;               # [ 42][000150]
//     	FMUL.FTZ R17, R4, R4;            # [ 43][000158]
//     	MUFU.RCP R14, R16;               # [ 44][000160]
//     	FFMA.FTZ R9, R20, R20, R17;      # [ 45][000168]
//     	FMUL.FTZ R18, R16, R10;          # [ 46][000170]
//     	MUFU.RCP R19, R14;               # [ 47][000178]
//     	FMUL.FTZ R17, R16, R8;           # [ 48][000180]
//     	FMUL.FTZ R16, R16, R7;           # [ 49][000188]
//     	FMUL.FTZ R10, R10, R19;          # [ 50][000190]
//     	FMUL.FTZ R8, R8, R19;            # [ 51][000198]
//     	FMUL.FTZ R7, R7, R19;            # [ 52][0001a0]
//     	FFMA.FTZ R19, R6, R6, R9;        # [ 53][0001a8]
//     	FMUL.FTZ R9, R12, R10;           # [ 54][0001b0]
//     	FFMA.FTZ R14, R14, -c[0x4][0x6c], -R11; # [ 55][0001b8]
//     	MUFU.RSQ R19, R19;               # [ 56][0001c0]
//     	FFMA.FTZ R21, R13, R8, R9;       # [ 57][0001c8]
//     	FMUL.FTZ R9, R19, R4;            # [ 58][0001d0]
//     	FFMA.FTZ R4, R5, R7, R21;        # [ 59][0001d8]
//     	FMUL.FTZ R21, R19, R20;          # [ 60][0001e0]
//     	MOV32I R20, 0x3efc0000;          # [ 61][0001e8]
//     	FMNMX.FTZ R4, R4, 1, PT;         # [ 62][0001f0]
//     	FMUL.FTZ R6, R19, R6;            # [ 63][0001f8]
//     	FMUL.FTZ R22, R12, R4;           # [ 64][000200]
//     	FMUL.FTZ R11, R13, R4;           # [ 65][000208]
//     	FMUL.FTZ R12, R5, R4;            # [ 66][000210]
//     	FFMA.FTZ R4, R4, 0x3efb0, R20;   # [ 67][000218]
//     	MOV R5, R3;                      # [ 68][000220]
//     	TEX.NODEP.T R19, R4, 0x0, 0x3, 2D, 0x1; # [ 69][000228]
//     	FFMA.FTZ R10, R22, 2, -R10;      # [ 70][000230]
//     	MOV32I R4, 0x3f7d8000;           # [ 71][000238]
//     	MOV R5, R3;                      # [ 72][000240]
//     	FFMA.FTZ R13, R11, 2, -R8;       # [ 73][000248]
//     	FMUL.FTZ R22, R10, R9;           # [ 74][000250]
//     	TEX.NODEP.T R8, R4, 0x0, 0x3, 2D; # [ 75][000258]
//     	MOV32I R4, 0x3f7f8000;           # [ 76][000260]
//     	FFMA.FTZ R13, R13, R21, R22;     # [ 77][000268]
//     	TEX.NODEP.T R21, R4, 0x0, 0x3, 2D, 0x1; # [ 78][000270]
//     	FFMA.FTZ R7, R12, 2, -R7;        # [ 79][000278]
//     	MOV32I R4, 0x3f7e8000;           # [ 80][000280]
//     	FFMA.FTZ R12, R7, R6, R13;       # [ 81][000288]
//     	TEX.NODEP.T R4, R4, 0x0, 0x3, 2D; # [ 82][000290]
//     	FMNMX.FTZ R12, R12, 1, PT;       # [ 83][000298]
//     	MOV R13, R3;                     # [ 84][0002a0]
//     	FFMA.FTZ R12, R12, 0x3efb0, R20; # [ 85][0002a8]
//     	TEX.NODEP.T R12, R12, 0x0, 0x3, 2D, 0x2; # [ 86][0002b0]
//     	FMUL.FTZ R13, R18, c[0x4][0x60]; # [ 87][0002b8]
//     	FMUL.FTZ.SAT R3, R14, c[0x4][0x70]; # [ 88][0002c0]
//     	I2I.S32.S32 RZ.CC, c[0x4][0x8c]; # [ 89][0002c8]
//     	FFMA.FTZ R13, R17, c[0x4][0x64], R13; # [ 90][0002d0]
//     	MUFU.LG2 R3, R3;                 # [ 91][0002d8]
//     	CSETP.EQ.AND P0, PT, CC, PT;     # [ 92][0002e0]
//     	FFMA.FTZ R13, R16, c[0x4][0x68], R13; # [ 93][0002e8]
//     	FMUL.FTZ R3, R3, c[0x4][0x74];   # [ 94][0002f0]
//     	FADD.FTZ R13, R13, -c[0x4][0x78]; # [ 95][0002f8]
//     	RRO.EX2 R3, R3;                  # [ 96][000300]
//     	FMUL.FTZ.SAT R13, R13, c[0x4][0x7c]; # [ 97][000308]
//     	MUFU.EX2 R14, R3;                # [ 98][000310]
//     	@!P0 FMUL.FTZ R14, R14, R13;     # [ 99][000318]
//     	FMUL.FTZ R3, R14, c[0x4][0x80];  # [100][000320]
//     	FMUL.FTZ R16, R14, c[0x4][0x84]; # [101][000328]
//     	FMUL.FTZ R14, R14, c[0x4][0x88]; # [102][000330]
//     	FMUL32I.FTZ R13, R3, 0.333;      # [103][000338]
//     	FFMA.FTZ R13, R16, c[0x10][0x20], R13; # [104][000340]
//     	FFMA.FTZ R13, R14, c[0x10][0x20], R13; # [105][000348]
//     	FFMA.FTZ R8, R8, R13, -R3;       # [106][000350]
//     	FFMA.FTZ R17, R9, R13, -R16;     # [107][000358]
//     	FFMA.FTZ R18, R10, R13, -R14;    # [108][000360]
//     	FFMA.FTZ R9, R11, R8, R3;        # [109][000368]
//     	FFMA.FTZ R10, R11, R17, R16;     # [110][000370]
//     	FFMA.FTZ R17, R11, R18, R14;     # [111][000378]
//     	FMUL.FTZ R11, R9, R19;           # [112][000380]
//     	FFMA.FTZ R8, R0, R13, -R3;       # [113][000388]
//     	FMUL.FTZ R9, R17, R19;           # [114][000390]
//     	FMUL.FTZ R17, R10, R19;          # [115][000398]
//     	FMUL.FTZ R0, R0, R11;            # [116][0003a0]
//     	FFMA.FTZ R10, R21, R8, R3;       # [117][0003a8]
//     	FMUL.FTZ R8, R1, R17;            # [118][0003b0]
//     	FFMA.FTZ R11, R1, R13, -R16;     # [119][0003b8]
//     	FMUL.FTZ R1, R2, R9;             # [120][0003c0]
//     	FFMA.FTZ R2, R2, R13, -R14;      # [121][0003c8]
//     	FFMA.FTZ R9, R21, R11, R16;      # [122][0003d0]
//     	MOV R3, RZ;                      # [123][0003d8]
//     	FFMA.FTZ R11, R21, R2, R14;      # [124][0003e0]
//     	FFMA.FTZ R2, R4, R13, -R10;      # [125][0003e8]
//     	FFMA.FTZ R4, R5, R13, -R9;       # [126][0003f0]
//     	FFMA.FTZ R5, R6, R13, -R11;      # [127][0003f8]
//     	FFMA.FTZ R2, R7, R2, R10;        # [128][000400]
//     	FFMA.FTZ R4, R7, R4, R9;         # [129][000408]
//     	FFMA.FTZ R5, R7, R5, R11;        # [130][000410]
//     	FMUL.FTZ R2, R2, R12;            # [131][000418]
//     	FMUL.FTZ R4, R4, R12;            # [132][000420]
//     	FMUL.FTZ R5, R5, R12;            # [133][000428]
//     	FFMA.FTZ R0, R2, R15, R0;        # [134][000430]
//     	FFMA.FTZ R2, R4, R15, R8;        # [135][000438]
//     	FFMA.FTZ R4, R5, R15, R1;        # [136][000440]
//     	FMNMX.FTZ R0, R0, 31.875, PT;    # [137][000448]
//     	FMNMX.FTZ R1, R2, 31.875, PT;    # [138][000450]
//     	FMNMX.FTZ R2, R4, 31.875, PT;    # [139][000458]
//     	EXIT;                            # [140][000460]
//     	END
//     END_SECTION
// END_SHADER
// 
