// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x1738fd9a918de9c9
//         FINGERPRINTER_HASH: 0x0000000000000000
//         UCODE_HASH: 0xbc7b3db5dd3df326
//         POOL: APP
//         VERSION: 20
//         # USES: 20987
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 1
//         # Tex / Tld vectorized: 1
//         # Dual Src Blending Opt: 0
//         # Texture Filtering: 0
//         # Blend Opt: 0
//         # Lentilwlar Halo: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 63
//         TEXTURE_SLOTS: 9
//         SAMPLER_SLOTS: 2
//         THREAD_STACK_SIZE: 0x200
//         THREAD_LOCAL_MEMORY_SIZE: 0x70
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             DOES_LOAD_OR_STORE
//             SHADER_LOCAL_MEMORY_LOW_SIZE 0x70
//             SHADER_LOCAL_MEMORY_CRS_SIZE 0x200
//             MRT_ENABLE
//         IMAP:
//             POSITION_X
//             POSITION_Y
//             POSITION_W
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET01_R
//             TARGET01_G
//             TARGET01_B
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_5_0
        dcl_globalflags refactoringAllowed
        dcl_constantbuffer cb0[1].xyzw, immediateIndexed
        dcl_constantbuffer cb1[7].xyzw, immediateIndexed
        dcl_constantbuffer cb2[17].xyzw, immediateIndexed
        dcl_constantbuffer cb3[9].xyzw, immediateIndexed
        dcl_constantbuffer cb4[6].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s1, mode_default
        dcl_resource t0, texture2dms (4), (float, float, float, float)
        dcl_resource t1, texture2dms (4), (float, float, float, float)
        dcl_resource t2, texture2dms (4), (float, float, float, float)
        dcl_resource t3, texture2dms (4), (float, float, float, float)
        dcl_resource t4, texture2dms (4), (float, float, float, float)
        dcl_resource t5, texture2d, (float, float, float, float)
        dcl_resource t6, texture2d, (float, float, float, float)
        dcl_resource t7, texture2d, (float, float, float, float)
        dcl_resource t8, texture2d, (float, float, float, float)
        dcl_input_ps_siv v0.xy, position, linear noperspective
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_temps 27 
        ftoi r0.xy, v0.xyxx
        mov r0.zw, l(0, 0, 0, 0)
        ld (texture2d) (float,float,float,float) r1.x, r0.xyww, t5.xyzw
        ldms (texture2dms) (float,float,float,float) r2.z, r0.xyww, t0.yzxw, l(0)
        mov r2.xy, v0.xyxx
        mov r2.w, l(0x3f800000)
        dp4 r3.x, cb1[0].xyzw, r2.xyzw
        dp4 r3.y, cb1[1].xyzw, r2.xyzw
        dp4 r3.z, cb1[2].xyzw, r2.xyzw
        dp4 r3.w, cb1[3].xyzw, r2.xyzw
        div r4.xyz, r3.xyzx, r3.wwww
        dp3 r1.y, r4.xyzx, r4.xyzx
        sqrt r1.y, r1.y
        div r5.xyz, r4.xyzx, r1.yyyy
        min r6.z, r1.y, l(100000.00000000)
        dp3 r1.z, cb2[11].xyzx, r5.xyzx
        lt r1.w, r1.z, l(0.00000000)
        div r2.z, -cb2[11].w, r1.z
        max r2.z, r2.z, l(0.10000000)
        min r6.y, r6.z, r2.z
        lt r1.xz, l(0.00000000, 0.00000000, 0.00000000, 0.00000000), r1.xxzx
        movc r7.z, r1.z, r6.y, r6.z
        mov r7.y, l(0x3dcccccd)
        movc r6.yz, r1.wwww, r6.yyzy, r7.yyzy
        dp3 r1.z, cb2[12].xyzx, r5.xyzx
        lt r1.w, r1.z, l(0.00000000)
        div r2.z, -cb2[12].w, r1.z
        max r2.z, r6.y, r2.z
        min r6.x, r6.z, r2.z
        lt r1.z, l(0.00000000), r1.z
        movc r6.w, r1.z, r6.x, r6.z
        movc r6.yz, r1.wwww, r6.xxzx, r6.yywy
        dp3 r1.z, cb2[13].xyzx, r5.xyzx
        lt r1.w, r1.z, l(0.00000000)
        div r2.z, -cb2[13].w, r1.z
        max r2.z, r6.y, r2.z
        min r6.x, r6.z, r2.z
        lt r1.z, l(0.00000000), r1.z
        movc r6.w, r1.z, r6.x, r6.z
        movc r6.yz, r1.wwww, r6.xxzx, r6.yywy
        dp3 r1.z, cb2[14].xyzx, r5.xyzx
        lt r1.w, r1.z, l(0.00000000)
        div r2.z, -cb2[14].w, r1.z
        max r2.z, r6.y, r2.z
        min r6.x, r6.z, r2.z
        lt r1.z, l(0.00000000), r1.z
        movc r6.w, r1.z, r6.x, r6.z
        movc r6.yz, r1.wwww, r6.xxzx, r6.yywy
        dp3 r1.z, cb2[15].xyzx, r5.xyzx
        lt r1.w, r1.z, l(0.00000000)
        div r2.z, -cb2[15].w, r1.z
        max r2.z, r6.y, r2.z
        min r6.x, r6.z, r2.z
        lt r1.z, l(0.00000000), r1.z
        movc r6.w, r1.z, r6.x, r6.z
        movc r6.yz, r1.wwww, r6.xxzx, r6.yywy
        dp3 r1.z, cb2[16].xyzx, r5.xyzx
        lt r1.w, r1.z, l(0.00000000)
        div r2.z, -cb2[16].w, r1.z
        max r2.z, r6.y, r2.z
        min r6.x, r6.z, r2.z
        lt r1.z, l(0.00000000), r1.z
        movc r6.w, r1.z, r6.x, r6.z
        movc r1.zw, r1.wwww, r6.xxxz, r6.yyyw
        lt r2.z, r1.z, r1.w
        if_nz r2.z
          ftou r6.xy, v0.xyxx
          and r6.xy, r6.xyxx, l(0x3, 0x3, 0, 0)
          mov r6.zw, l(0, 0, 0, 0)
          ld (texture2d) (float,float,float,float) r6.x, r6.xyzw, t6.xyzw
          max r2.z, r1.z, cb4[4].x
          min r6.y, r1.w, cb4[4].y
          dp3 r6.z, cb1[5].xyzx, r5.xyzx
          add r6.w, r2.z, -cb4[4].x
          max r6.w, r6.w, l(0.00000000)
          ne r7.x, r6.z, l(0.00000000)
          mad r7.y, r6.z, cb4[4].x, cb3[8].y
          mul r7.yzw, r7.yyyy, cb4[0].xxyz
          mul r7.yzw, r7.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
          exp r7.yzw, r7.yyzw
          mul r8.xyz, r6.zzzz, cb4[0].xyzx
          mul r8.xyz, r6.wwww, r8.xyzx
          mul r8.xyz, r8.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
          exp r8.xyz, r8.xyzx
          add r8.xyz, -r8.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
          mul r7.yzw, r7.yyzw, r8.xxyz
          mul r8.xyz, r6.zzzz, -cb4[0].xyzx
          div r7.yzw, r7.yyzw, r8.xxyz
          mul r8.xyz, cb3[8].yyyy, cb4[0].xyzx
          mul r8.xyz, r8.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
          exp r8.xyz, r8.xyzx
          mul r8.xyz, r6.wwww, r8.xyzx
          movc r7.xyz, r7.xxxx, r7.yzwy, r8.xyzx
          mad r6.w, r7.z, l(200.00000000), r7.y
          mul r7.yzw, r6.wwww, cb4[3].xxyz
          mad r7.xyz, cb4[1].xyzx, r7.xxxx, r7.yzwy
          mul r7.xyz, r7.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
          exp r7.xyz, r7.xyzx
          mov r5.w, l(0x3f800000)
          dp4 r8.x, cb2[4].xyzw, r5.xyzw
          dp4 r8.y, cb2[5].xyzw, r5.xyzw
          dp4 r8.z, cb2[6].xyzw, r5.xyzw
          dp4 r8.w, cb2[7].xyzw, r5.xyzw
          mov r9.x, cb2[4].w
          mov r9.y, cb2[5].w
          mov r9.z, cb2[6].w
          mov r9.w, cb2[7].w
          add r8.xyzw, r8.xyzw, -r9.xyzw
          mul r5.w, r2.z, cb4[4].z
          log r5.w, r5.w
          mul r5.w, r5.w, cb4[5].x
          round_ni r5.w, r5.w
          max r5.w, r5.w, l(0.00000000)
          log r6.w, cb4[4].w
          mul r5.w, r5.w, r6.w
          exp r5.w, r5.w
          mul r5.w, r5.w, cb4[4].x
          mul r6.w, r5.w, cb4[4].w
          mad r7.w, -cb4[3].w, cb4[3].w, l(1.00000000)
          mul r10.x, cb2[9].w, cb2[9].w
          mov r11.xyz, cb2[8].xyzx
          mov r11.w, l(0x3f800000)
          dp4 r12.x, cb1[4].xyzw, r11.xyzw
          dp4 r12.y, cb1[5].xyzw, r11.xyzw
          dp4 r12.z, cb1[6].xyzw, r11.xyzw
          mul r10.yzw, r12.yyyy, cb4[0].xxyz
          mul r10.yzw, r10.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
          exp r10.yzw, r10.yyzw
          mul r11.xyz, cb4[1].xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.00000000)
          mov r13.w, l(0x3f800000)
          mov r14.xyzw, r9.xyzw
          mov r15.xyzw, r8.xyzw
          mov r16.xyz, r7.xyzx
          mov r17.xyz, l(0, 0, 0, 0)
          mov r11.w, r5.w
          mov r12.w, r6.w
          loop 
            ge r16.w, r11.w, r6.y
            breakc_nz r16.w
            max r16.w, r2.z, r11.w
            min r17.w, r6.y, r12.w
            add r18.x, -r16.w, r17.w
            div r17.w, r17.w, r16.w
            log r17.w, r17.w
            mul r17.w, r6.x, r17.w
            exp r17.w, r17.w
            mul r16.w, r16.w, r17.w
            mad r17.w, r16.w, r6.z, cb3[8].y
            mul r18.yzw, r17.wwww, cb4[0].xxyz
            mul r18.yzw, r18.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
            exp r19.xyz, r18.yzwy
            mad r19.w, r19.z, l(200.00000000), r19.y
            mul r18.xy, r18.xxxx, r19.xwxx
            mul r19.xyz, r18.yyyy, cb4[3].xyzx
            mad r19.xyz, cb4[1].xyzx, r18.xxxx, r19.xyzx
            mul r19.xyz, r19.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
            exp r19.xyz, r19.xyzx
            mul r16.xyz, r16.xyzx, r19.xyzx
            mul r13.xyz, r5.xyzx, r16.wwww
            mad r19.xyzw, r16.wwww, r15.xyzw, r14.xyzw
            div r19.xyz, r19.xyzx, r19.wwww
            sample_l (texture2d) (float,float,float,float) r20.xyz, r19.xyxx, t7.xyzw, s0, l(0)
            sample_l (texture2d) (float,float,float,float) r17.w, r19.xyxx, t8.yzwx, s1, l(0)
            ge r17.w, r17.w, r19.z
            and r17.w, r17.w, l(0x3f800000)
            mul r19.xyz, r17.wwww, r20.xyzx
            mad r20.xyz, -r16.wwww, r5.xyzx, cb2[8].xyzx
            dp3 r16.w, r20.xyzx, r20.xyzx
            rsq r17.w, r16.w
            mul r20.xyz, r17.wwww, r20.xyzx
            dp3 r17.w, r5.xyzx, r20.xyzx
            mad r17.w, -cb4[3].w, r17.w, l(1.00000000)
            mul r17.w, r17.w, r17.w
            mul r17.w, r17.w, l(12.56637096)
            div r17.w, r7.w, r17.w
            div r18.z, r16.w, r10.x
            mad r18.z, -r18.z, r18.z, l(1.00000000)
            max r18.z, r18.z, l(0.00000000)
            add r16.w, r16.w, l(1.00000000)
            div r16.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r16.w
            mul r19.xyz, r18.zzzz, r19.xyzx
            mul r19.xyz, r16.wwww, r19.xyzx
            dp4 r20.x, cb1[4].xyzw, r13.xyzw
            dp4 r20.y, cb1[5].xyzw, r13.xyzw
            dp4 r20.z, cb1[6].xyzw, r13.xyzw
            add r13.xyz, -r12.xyzx, r20.xyzx
            dp3 r13.x, r13.xyzx, r13.xyzx
            sqrt r13.x, r13.x
            div r13.y, r13.y, r13.x
            ne r13.z, r13.y, l(0.00000000)
            mul r20.xyz, r13.yyyy, cb4[0].xyzx
            mul r20.xyz, r13.xxxx, r20.xyzx
            mul r20.xyz, r20.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r20.xyz, r20.xyzx
            add r20.xyz, -r20.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
            mul r20.xyz, r10.yzwy, r20.xyzx
            mul r21.xyz, r13.yyyy, -cb4[0].xyzx
            div r20.xyz, r20.xyzx, r21.xyzx
            mul r21.xyz, r10.yzwy, r13.xxxx
            movc r13.xyz, r13.zzzz, r20.xyzx, r21.xyzx
            mad r13.y, r13.z, l(200.00000000), r13.y
            mul r20.xyz, r13.yyyy, cb4[3].xyzx
            mad r13.xyz, cb4[1].xyzx, r13.xxxx, r20.xyzx
            mul r13.xyz, r13.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
            exp r13.xyz, r13.xyzx
            mul r13.xyz, r13.xyzx, r19.xyzx
            mul r19.xyz, r17.wwww, cb4[2].xyzx
            mul r18.yzw, r18.yyyy, r19.xxyz
            mad r18.xyz, r11.xyzx, r18.xxxx, r18.yzwy
            mul r13.xyz, r13.xyzx, r18.xyzx
            mad r17.xyz, r13.xyzx, r16.xyzx, r17.xyzx
            mul r13.x, r12.w, cb4[4].w
            mov r11.w, r12.w
            mov r12.w, r13.x
          endloop 
          mul r6.xyz, r17.xyzx, cb2[9].xyzx
          lt r1.z, r1.z, r1.y
          ge r1.y, r1.w, r1.y
          and r1.y, r1.y, r1.z
          if_nz r1.y
            ldms (texture2dms) (float,float,float,float) r1.yzw, r0.xyww, t1.wxyz, l(0)
            mad r1.yzw, r1.yyzw, l(0.00000000, 2.00000000, 2.00000000, 2.00000000), l(0.00000000, -1.00000000, -1.00000000, -1.00000000)
            dp3 r2.z, r1.yzwy, r1.yzwy
            rsq r2.z, r2.z
            mul r1.yzw, r1.yyzw, r2.zzzz
            ldms (texture2dms) (float,float,float,float) r7.xyzw, r0.xyww, t2.xyzw, l(0)
            ldms (texture2dms) (float,float,float,float) r8.xyzw, r0.xyww, t3.xyzw, l(0)
            ldms (texture2dms) (float,float,float,float) r2.z, r0.xyww, t4.yzxw, l(0)
            dp4 r9.x, cb2[4].xyzw, r3.xyzw
            dp4 r9.y, cb2[5].xyzw, r3.xyzw
            dp4 r9.z, cb2[6].xyzw, r3.xyzw
            dp4 r3.x, cb2[7].xyzw, r3.xyzw
            div r3.xyz, r9.xyzx, r3.xxxx
            sample_l (texture2d) (float,float,float,float) r9.xyz, r3.xyxx, t7.xyzw, s0, l(0)
            add r3.zw, r3.zzzz, l(0.00000000, 0.00000000, -0.00010000, -0.00100000)
            div r3.w, r3.w, cb2[9].w
            mul r3.w, r3.w, l(0.75000000)
            max r3.w, r3.w, l(0.00010000)
            mad r11.xy, r3.wwww, l(0.66291302, 0.66291302, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r5.w, r11.xyxx, t8.yzwx, s1, l(0)
            mad r11.xy, r3.wwww, l(0.00000000, 0.87500000, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r6.w, r11.xyxx, t8.yzwx, s1, l(0)
            mad r11.xy, r3.wwww, l(-0.57452399, 0.57452399, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r9.w, r11.xyxx, t8.yzwx, s1, l(0)
            mad r11.xy, r3.wwww, l(-0.75000000, 0.00000000, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r11.x, r11.xyxx, t8.xyzw, s1, l(0)
            ge r5.w, r5.w, r3.z
            and r5.w, r5.w, l(0x3f800000)
            ge r6.w, r6.w, r3.z
            and r6.w, r6.w, l(0x3f800000)
            add r5.w, r5.w, r6.w
            ge r6.w, r9.w, r3.z
            and r6.w, r6.w, l(0x3f800000)
            add r5.w, r5.w, r6.w
            ge r6.w, r11.x, r3.z
            and r6.w, r6.w, l(0x3f800000)
            add r5.w, r5.w, r6.w
            mad r11.xy, r3.wwww, l(1.00000000, 0.00000000, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r6.w, r11.xyxx, t8.yzwx, s1, l(0)
            mad r11.xy, r3.wwww, l(-0.48613599, -0.48613599, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r9.w, r11.xyxx, t8.yzwx, s1, l(0)
            mad r11.xy, r3.wwww, l(0.00000000, -0.62500000, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r11.x, r11.xyxx, t8.xyzw, s1, l(0)
            mad r11.yz, r3.wwww, l(0.00000000, 0.39774799, -0.39774799, 0.00000000), r3.xxyx
            sample_l (texture2d) (float,float,float,float) r11.y, r11.yzyy, t8.yxzw, s1, l(0)
            ge r6.w, r6.w, r3.z
            and r6.w, r6.w, l(0x3f800000)
            ge r9.w, r9.w, r3.z
            and r9.w, r9.w, l(0x3f800000)
            add r6.w, r6.w, r9.w
            ge r9.w, r11.x, r3.z
            and r9.w, r9.w, l(0x3f800000)
            add r6.w, r6.w, r9.w
            ge r9.w, r11.y, r3.z
            and r9.w, r9.w, l(0x3f800000)
            add r6.w, r6.w, r9.w
            add r5.w, r5.w, r6.w
            mad r11.xy, r3.wwww, l(0.50000000, 0.00000000, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r6.w, r11.xyxx, t8.yzwx, s1, l(0)
            mad r11.xy, r3.wwww, l(0.13519500, 0.41608700, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r9.w, r11.xyxx, t8.yzwx, s1, l(0)
            mad r11.xy, r3.wwww, l(-0.30338100, 0.22041900, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r11.x, r11.xyxx, t8.xyzw, s1, l(0)
            mad r11.yz, r3.wwww, l(0.00000000, -0.25281799, -0.18368299, 0.00000000), r3.xxyx
            sample_l (texture2d) (float,float,float,float) r11.y, r11.yzyy, t8.yxzw, s1, l(0)
            ge r6.w, r6.w, r3.z
            and r6.w, r6.w, l(0x3f800000)
            ge r9.w, r9.w, r3.z
            and r9.w, r9.w, l(0x3f800000)
            add r6.w, r6.w, r9.w
            ge r9.w, r11.x, r3.z
            and r9.w, r9.w, l(0x3f800000)
            add r6.w, r6.w, r9.w
            ge r9.w, r11.y, r3.z
            and r9.w, r9.w, l(0x3f800000)
            add r6.w, r6.w, r9.w
            add r5.w, r5.w, r6.w
            mad r11.xy, r3.wwww, l(0.07725400, -0.23776400, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r6.w, r11.xyxx, t8.yzwx, s1, l(0)
            mad r11.xy, r3.wwww, l(0.18750000, 0.00000000, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r9.w, r11.xyxx, t8.yzwx, s1, l(0)
            mad r11.xy, r3.wwww, l(-0.06250000, 0.10825300, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r11.x, r11.xyxx, t8.xyzw, s1, l(0)
            mad r3.xy, r3.wwww, l(-0.03125000, -0.05412700, 0.00000000, 0.00000000), r3.xyxx
            sample_l (texture2d) (float,float,float,float) r3.x, r3.xyxx, t8.xyzw, s1, l(0)
            ge r3.y, r6.w, r3.z
            ge r3.w, r9.w, r3.z
            and r3.yw, r3.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
            add r3.y, r3.w, r3.y
            ge r3.w, r11.x, r3.z
            and r3.w, r3.w, l(0x3f800000)
            add r3.y, r3.w, r3.y
            ge r3.x, r3.x, r3.z
            and r3.x, r3.x, l(0x3f800000)
            add r3.x, r3.x, r3.y
            add r3.x, r3.x, r5.w
            mul r3.x, r3.x, l(0.06250000)
            mul r3.yzw, r9.xxyz, cb2[9].xxyz
            mul r3.xyz, r3.xxxx, r3.yzwy
            add r9.xyz, -cb2[10].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
            mad r9.xyz, r2.zzzz, r9.xyzx, cb2[10].xyzx
            mul r3.xyz, r3.xyzx, r9.xyzx
            add r9.xyz, -r4.xyzx, cb2[8].xyzx
            dp3 r2.z, r9.xyzx, r9.xyzx
            rsq r3.w, r2.z
            mul r11.xyz, r3.wwww, r9.xyzx
            div r5.w, r2.z, r10.x
            mad r5.w, -r5.w, r5.w, l(1.00000000)
            max r5.w, r5.w, l(0.00000000)
            mul r3.xyz, r3.xyzx, r5.wwww
            div r3.xyz, r3.xyzx, r2.zzzz
            mov r4.w, l(0x3f800000)
            dp4 r13.x, cb1[4].xyzw, r4.xyzw
            dp4 r13.y, cb1[5].xyzw, r4.xyzw
            dp4 r13.z, cb1[6].xyzw, r4.xyzw
            add r4.xyz, -r12.xyzx, r13.xyzx
            dp3 r2.z, r4.xyzx, r4.xyzx
            sqrt r2.z, r2.z
            div r4.x, r4.y, r2.z
            ne r4.y, r4.x, l(0.00000000)
            mul r12.xyz, r4.xxxx, cb4[0].xyzx
            mul r12.xyz, r2.zzzz, r12.xyzx
            mul r12.xyz, r12.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r12.xyz, r12.xyzx
            add r12.xyz, -r12.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
            mul r12.xyz, r10.yzwy, r12.xyzx
            mul r4.xzw, r4.xxxx, -cb4[0].xxyz
            div r4.xzw, r12.xxyz, r4.xxzw
            mul r10.xyz, r2.zzzz, r10.yzwy
            movc r4.xyz, r4.yyyy, r4.xzwx, r10.xyzx
            mad r2.z, r4.z, l(200.00000000), r4.y
            mul r4.yzw, r2.zzzz, cb4[3].xxyz
            mad r4.xyz, cb4[1].xyzx, r4.xxxx, r4.yzwy
            mul r4.xyz, r4.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
            exp r4.xyz, r4.xyzx
            mul r3.xyz, r3.xyzx, r4.xyzx
            mul r2.z, r7.w, l(1.57079637)
            dp3 r4.x, r1.yzwy, -r5.xyzx
            dp3 r4.z, r1.yzwy, r11.xyzx
            mov_sat r4.yw, r4.xxxz
            add r5.w, -r4.y, l(1.00000000)
            sqrt r5.w, r5.w
            mad r6.w, r4.y, l(-0.01872930), l(0.07426100)
            mad r6.w, r6.w, r4.y, l(-0.21211439)
            mad r6.w, r6.w, r4.y, l(1.57072878)
            mul r5.w, r5.w, r6.w
            add r6.w, -r4.w, l(1.00000000)
            sqrt r6.w, r6.w
            mad r7.w, r4.w, l(-0.01872930), l(0.07426100)
            mad r7.w, r7.w, r4.w, l(-0.21211439)
            mad r7.w, r7.w, r4.w, l(1.57072878)
            mul r6.w, r6.w, r7.w
            max r7.w, r5.w, r6.w
            min r5.w, r5.w, r6.w
            mad r10.xyz, -r1.yzwy, r4.yyyy, -r5.xyzx
            dp3 r4.y, r10.xyzx, r10.xyzx
            rsq r4.y, r4.y
            mul r10.xyz, r4.yyyy, r10.xyzx
            mad r11.xyz, -r1.yzwy, r4.wwww, r11.xyzx
            dp3 r4.y, r11.xyzx, r11.xyzx
            rsq r4.y, r4.y
            mul r11.xyz, r4.yyyy, r11.xyzx
            dp3 r4.y, r10.xyzx, r11.xyzx
            mul r6.w, r2.z, r2.z
            mad r10.xyz, r2.zzzz, r2.zzzz, l(0.33000001, 0.09000000, 0.09000000, 0.00000000)
            div r10.xyz, r6.wwww, r10.xyzx
            mul r10.yz, r10.yyzy, l(0.00000000, 0.44999999, 0.12500000, 0.00000000)
            mad r2.z, -r10.x, l(0.50000000), l(1.00000000)
            ge r6.w, r4.y, l(0.00000000)
            sincos r9.w, null, r7.w
            mul r10.x, r5.w, l(0.63661975)
            mul r10.w, r10.x, r10.x
            mad r10.x, -r10.x, r10.w, r9.w
            movc r6.w, r6.w, r9.w, r10.x
            mul r6.w, r6.w, r10.y
            mul r9.w, r7.w, r5.w
            mul r9.w, r9.w, l(0.40528473)
            mul r9.w, r9.w, r9.w
            mul r9.w, r9.w, r10.z
            mul r6.w, r4.y, r6.w
            sincos r10.x, r11.x, r5.w
            div r10.x, r10.x, r11.x
            add r4.y, -|r4.y|, l(1.00000000)
            mul r4.y, r9.w, r4.y
            add r5.w, r5.w, r7.w
            mul r5.w, r5.w, l(0.50000000)
            sincos r11.x, r12.x, r5.w
            div r5.w, r11.x, r12.x
            mad r2.z, r6.w, r10.x, r2.z
            mad r2.z, r4.y, r5.w, r2.z
            mul r2.z, r2.z, l(0.31830987)
            mul r4.y, r8.w, l(1.57079637)
            mad r9.xyz, r9.xyzx, r3.wwww, -r5.xyzx
            dp3 r3.w, r9.xyzx, r9.xyzx
            rsq r3.w, r3.w
            mul r9.xyz, r3.wwww, r9.xyzx
            max r3.w, r4.x, l(0.00010000)
            max r4.x, r4.z, l(0.00010000)
            dp3 r1.y, r1.yzwy, r9.xyzx
            max r1.y, r1.y, l(0.00010000)
            dp3 r1.z, -r5.xyzx, r9.xyzx
            mul r1.w, r4.y, r4.y
            mul r4.y, r1.y, r1.y
            mad r4.z, r1.y, r1.y, l(-1.00000000)
            mul r5.x, r1.w, r4.y
            div r4.z, r4.z, r5.x
            mul r4.z, r4.z, l(1.44269502)
            exp r4.z, r4.z
            mul r1.w, r1.w, l(4.00000000)
            mul r4.y, r4.y, r4.y
            mul r1.w, r1.w, r4.y
            div r1.w, r4.z, r1.w
            min r4.y, r3.w, r4.x
            dp2 r1.y, r1.yyyy, r4.yyyy
            div r1.y, r1.y, r1.z
            min r1.y, r1.y, l(1.00000000)
            mul r1.y, r1.y, r1.w
            mul r1.z, r3.w, r4.x
            div r1.y, r1.y, r1.z
            mul r1.yzw, r1.yyyy, r8.xxyz
            mad r1.yzw, r7.xxyz, r2.zzzz, r1.yyzw
            mul r1.yzw, r1.yyzw, r3.xxyz
            mul r1.yzw, r4.wwww, r1.yyzw
            mul r1.yzw, r16.xxyz, r1.yyzw
          else 
            mov r1.yzw, l(0, 0, 0, 0)
          endif 
        else 
          mov r1.yzw, l(0, 0, 0, 0)
          mov r6.xyz, l(0, 0, 0, 0)
        endif 
        if_nz r1.x
          mul r3.xyz, r1.yzwy, cb0[0].xyzx
          mad r4.xyz, r1.yzwy, cb0[0].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
          div r3.xyz, r3.xyzx, r4.xyzx
          ldms (texture2dms) (float,float,float,float) r4.z, r0.xyww, t0.yzxw, l(0x1)
          ldms (texture2dms) (float,float,float,float) r5.xyz, r0.xyww, t1.xyzw, l(0x1)
          mad r5.xyz, r5.xyzx, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), l(-1.00000000, -1.00000000, -1.00000000, 0.00000000)
          dp3 r1.x, r5.xyzx, r5.xyzx
          rsq r1.x, r1.x
          mul r5.xyz, r1.xxxx, r5.xyzx
          ldms (texture2dms) (float,float,float,float) r7.xyzw, r0.xyww, t2.xyzw, l(0x1)
          ldms (texture2dms) (float,float,float,float) r8.xyzw, r0.xyww, t3.xyzw, l(0x1)
          ldms (texture2dms) (float,float,float,float) r1.x, r0.xyww, t4.xyzw, l(0x1)
          mov r4.xyw, r2.xyxw
          dp4 r2.x, cb1[0].xyzw, r4.xyzw
          dp4 r2.y, cb1[1].xyzw, r4.xyzw
          dp4 r2.z, cb1[2].xyzw, r4.xyzw
          dp4 r2.w, cb1[3].xyzw, r4.xyzw
          div r9.xyz, r2.xyzx, r2.wwww
          dp3 r3.w, r9.xyzx, r9.xyzx
          sqrt r3.w, r3.w
          div r10.xyz, r9.xyzx, r3.wwww
          min r11.z, r3.w, l(100000.00000000)
          dp3 r4.z, cb2[11].xyzx, r10.xyzx
          lt r5.w, r4.z, l(0.00000000)
          div r6.w, -cb2[11].w, r4.z
          max r6.w, r6.w, l(0.10000000)
          min r11.y, r11.z, r6.w
          lt r4.z, l(0.00000000), r4.z
          movc r12.z, r4.z, r11.y, r11.z
          mov r12.y, l(0x3dcccccd)
          movc r11.yz, r5.wwww, r11.yyzy, r12.yyzy
          dp3 r4.z, cb2[12].xyzx, r10.xyzx
          lt r5.w, r4.z, l(0.00000000)
          div r6.w, -cb2[12].w, r4.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r4.z, l(0.00000000), r4.z
          movc r11.w, r4.z, r11.x, r11.z
          movc r11.yz, r5.wwww, r11.xxzx, r11.yywy
          dp3 r4.z, cb2[13].xyzx, r10.xyzx
          lt r5.w, r4.z, l(0.00000000)
          div r6.w, -cb2[13].w, r4.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r4.z, l(0.00000000), r4.z
          movc r11.w, r4.z, r11.x, r11.z
          movc r11.yz, r5.wwww, r11.xxzx, r11.yywy
          dp3 r4.z, cb2[14].xyzx, r10.xyzx
          lt r5.w, r4.z, l(0.00000000)
          div r6.w, -cb2[14].w, r4.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r4.z, l(0.00000000), r4.z
          movc r11.w, r4.z, r11.x, r11.z
          movc r11.yz, r5.wwww, r11.xxzx, r11.yywy
          dp3 r4.z, cb2[15].xyzx, r10.xyzx
          lt r5.w, r4.z, l(0.00000000)
          div r6.w, -cb2[15].w, r4.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r4.z, l(0.00000000), r4.z
          movc r11.w, r4.z, r11.x, r11.z
          movc r11.yz, r5.wwww, r11.xxzx, r11.yywy
          dp3 r4.z, cb2[16].xyzx, r10.xyzx
          lt r5.w, r4.z, l(0.00000000)
          div r6.w, -cb2[16].w, r4.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r4.z, l(0.00000000), r4.z
          movc r11.w, r4.z, r11.x, r11.z
          movc r11.xy, r5.wwww, r11.xzxx, r11.ywyy
          lt r4.z, r11.x, r11.y
          if_nz r4.z
            ftou r11.zw, v0.xxxy
            and r12.xy, r11.zwzz, l(0x3, 0x3, 0, 0)
            mov r12.zw, l(0, 0, 0, 0)
            ld (texture2d) (float,float,float,float) r12.x, r12.xyzw, t6.xyzw
            max r4.z, r11.x, cb4[4].x
            min r5.w, r11.y, cb4[4].y
            dp3 r6.w, cb1[5].xyzx, r10.xyzx
            add r11.z, r4.z, -cb4[4].x
            max r11.z, r11.z, l(0.00000000)
            ne r11.w, r6.w, l(0.00000000)
            mad r12.y, r6.w, cb4[4].x, cb3[8].y
            mul r12.yzw, r12.yyyy, cb4[0].xxyz
            mul r12.yzw, r12.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
            exp r12.yzw, r12.yyzw
            mul r13.xyz, r6.wwww, cb4[0].xyzx
            mul r13.xyz, r11.zzzz, r13.xyzx
            mul r13.xyz, r13.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r13.xyz, r13.xyzx
            add r13.xyz, -r13.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
            mul r12.yzw, r12.yyzw, r13.xxyz
            mul r13.xyz, r6.wwww, -cb4[0].xyzx
            div r12.yzw, r12.yyzw, r13.xxyz
            mul r13.xyz, cb3[8].yyyy, cb4[0].xyzx
            mul r13.xyz, r13.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r13.xyz, r13.xyzx
            mul r13.xyz, r11.zzzz, r13.xyzx
            movc r12.yzw, r11.wwww, r12.yyzw, r13.xxyz
            mad r11.z, r12.w, l(200.00000000), r12.z
            mul r13.xyz, r11.zzzz, cb4[3].xyzx
            mad r12.yzw, cb4[1].xxyz, r12.yyyy, r13.xxyz
            mul r12.yzw, r12.yyzw, l(0.00000000, -1.44269502, -1.44269502, -1.44269502)
            exp r12.yzw, r12.yyzw
            mov r10.w, l(0x3f800000)
            dp4 r13.x, cb2[4].xyzw, r10.xyzw
            dp4 r13.y, cb2[5].xyzw, r10.xyzw
            dp4 r13.z, cb2[6].xyzw, r10.xyzw
            dp4 r13.w, cb2[7].xyzw, r10.xyzw
            mov r14.x, cb2[4].w
            mov r14.y, cb2[5].w
            mov r14.z, cb2[6].w
            mov r14.w, cb2[7].w
            add r13.xyzw, r13.xyzw, -r14.xyzw
            mul r10.w, r4.z, cb4[4].z
            log r10.w, r10.w
            mul r10.w, r10.w, cb4[5].x
            round_ni r10.w, r10.w
            max r10.w, r10.w, l(0.00000000)
            log r11.z, cb4[4].w
            mul r10.w, r10.w, r11.z
            exp r10.w, r10.w
            mul r10.w, r10.w, cb4[4].x
            mul r11.z, r10.w, cb4[4].w
            mad r11.w, -cb4[3].w, cb4[3].w, l(1.00000000)
            mul r15.x, cb2[9].w, cb2[9].w
            mov r16.xyz, cb2[8].xyzx
            mov r16.w, l(0x3f800000)
            dp4 r17.x, cb1[4].xyzw, r16.xyzw
            dp4 r17.y, cb1[5].xyzw, r16.xyzw
            dp4 r17.z, cb1[6].xyzw, r16.xyzw
            mul r15.yzw, r17.yyyy, cb4[0].xxyz
            mul r15.yzw, r15.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
            exp r15.yzw, r15.yyzw
            mul r16.xyz, cb4[1].xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.00000000)
            mov r18.w, l(0x3f800000)
            mov r19.xyzw, r14.xyzw
            mov r20.xyzw, r13.xyzw
            mov r21.xyz, r12.yzwy
            mov r22.xyz, l(0, 0, 0, 0)
            mov r16.w, r10.w
            mov r17.w, r11.z
            loop 
              ge r21.w, r16.w, r5.w
              breakc_nz r21.w
              max r21.w, r4.z, r16.w
              min r22.w, r5.w, r17.w
              add r23.x, -r21.w, r22.w
              div r22.w, r22.w, r21.w
              log r22.w, r22.w
              mul r22.w, r12.x, r22.w
              exp r22.w, r22.w
              mul r21.w, r21.w, r22.w
              mad r22.w, r21.w, r6.w, cb3[8].y
              mul r23.yzw, r22.wwww, cb4[0].xxyz
              mul r23.yzw, r23.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
              exp r24.xyz, r23.yzwy
              mad r24.w, r24.z, l(200.00000000), r24.y
              mul r23.xy, r23.xxxx, r24.xwxx
              mul r24.xyz, r23.yyyy, cb4[3].xyzx
              mad r24.xyz, cb4[1].xyzx, r23.xxxx, r24.xyzx
              mul r24.xyz, r24.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
              exp r24.xyz, r24.xyzx
              mul r21.xyz, r21.xyzx, r24.xyzx
              mul r18.xyz, r10.xyzx, r21.wwww
              mad r24.xyzw, r21.wwww, r20.xyzw, r19.xyzw
              div r24.xyz, r24.xyzx, r24.wwww
              sample_l (texture2d) (float,float,float,float) r25.xyz, r24.xyxx, t7.xyzw, s0, l(0)
              sample_l (texture2d) (float,float,float,float) r22.w, r24.xyxx, t8.yzwx, s1, l(0)
              ge r22.w, r22.w, r24.z
              and r22.w, r22.w, l(0x3f800000)
              mul r24.xyz, r22.wwww, r25.xyzx
              mad r25.xyz, -r21.wwww, r10.xyzx, cb2[8].xyzx
              dp3 r21.w, r25.xyzx, r25.xyzx
              rsq r22.w, r21.w
              mul r25.xyz, r22.wwww, r25.xyzx
              dp3 r22.w, r10.xyzx, r25.xyzx
              mad r22.w, -cb4[3].w, r22.w, l(1.00000000)
              mul r22.w, r22.w, r22.w
              mul r22.w, r22.w, l(12.56637096)
              div r22.w, r11.w, r22.w
              div r23.z, r21.w, r15.x
              mad r23.z, -r23.z, r23.z, l(1.00000000)
              max r23.z, r23.z, l(0.00000000)
              add r21.w, r21.w, l(1.00000000)
              div r21.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r21.w
              mul r24.xyz, r23.zzzz, r24.xyzx
              mul r24.xyz, r21.wwww, r24.xyzx
              dp4 r25.x, cb1[4].xyzw, r18.xyzw
              dp4 r25.y, cb1[5].xyzw, r18.xyzw
              dp4 r25.z, cb1[6].xyzw, r18.xyzw
              add r18.xyz, -r17.xyzx, r25.xyzx
              dp3 r18.x, r18.xyzx, r18.xyzx
              sqrt r18.x, r18.x
              div r18.y, r18.y, r18.x
              ne r18.z, r18.y, l(0.00000000)
              mul r25.xyz, r18.yyyy, cb4[0].xyzx
              mul r25.xyz, r18.xxxx, r25.xyzx
              mul r25.xyz, r25.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
              exp r25.xyz, r25.xyzx
              add r25.xyz, -r25.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
              mul r25.xyz, r15.yzwy, r25.xyzx
              mul r26.xyz, r18.yyyy, -cb4[0].xyzx
              div r25.xyz, r25.xyzx, r26.xyzx
              mul r26.xyz, r15.yzwy, r18.xxxx
              movc r18.xyz, r18.zzzz, r25.xyzx, r26.xyzx
              mad r18.y, r18.z, l(200.00000000), r18.y
              mul r25.xyz, r18.yyyy, cb4[3].xyzx
              mad r18.xyz, cb4[1].xyzx, r18.xxxx, r25.xyzx
              mul r18.xyz, r18.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
              exp r18.xyz, r18.xyzx
              mul r18.xyz, r18.xyzx, r24.xyzx
              mul r24.xyz, r22.wwww, cb4[2].xyzx
              mul r23.yzw, r23.yyyy, r24.xxyz
              mad r23.xyz, r16.xyzx, r23.xxxx, r23.yzwy
              mul r18.xyz, r18.xyzx, r23.xyzx
              mad r22.xyz, r18.xyzx, r21.xyzx, r22.xyzx
              mul r18.x, r17.w, cb4[4].w
              mov r16.w, r17.w
              mov r17.w, r18.x
            endloop 
            mad r6.xyz, r22.xyzx, cb2[9].xyzx, r6.xyzx
            lt r4.z, r11.x, r3.w
            ge r3.w, r11.y, r3.w
            and r3.w, r3.w, r4.z
            if_nz r3.w
              dp4 r11.x, cb2[4].xyzw, r2.xyzw
              dp4 r11.y, cb2[5].xyzw, r2.xyzw
              dp4 r11.z, cb2[6].xyzw, r2.xyzw
              dp4 r2.x, cb2[7].xyzw, r2.xyzw
              div r2.xyz, r11.xyzx, r2.xxxx
              sample_l (texture2d) (float,float,float,float) r11.xyz, r2.xyxx, t7.xyzw, s0, l(0)
              add r2.zw, r2.zzzz, l(0.00000000, 0.00000000, -0.00010000, -0.00100000)
              div r2.w, r2.w, cb2[9].w
              mul r2.w, r2.w, l(0.75000000)
              max r2.w, r2.w, l(0.00010000)
              mad r12.xy, r2.wwww, l(0.66291302, 0.66291302, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r3.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(0.00000000, 0.87500000, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r4.z, r12.xyxx, t8.yzxw, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.57452399, 0.57452399, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r5.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.75000000, 0.00000000, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r6.w, r12.xyxx, t8.yzwx, s1, l(0)
              ge r3.w, r3.w, r2.z
              and r3.w, r3.w, l(0x3f800000)
              ge r4.z, r4.z, r2.z
              and r4.z, r4.z, l(0x3f800000)
              add r3.w, r3.w, r4.z
              ge r4.z, r5.w, r2.z
              and r4.z, r4.z, l(0x3f800000)
              add r3.w, r3.w, r4.z
              ge r4.z, r6.w, r2.z
              and r4.z, r4.z, l(0x3f800000)
              add r3.w, r3.w, r4.z
              mad r12.xy, r2.wwww, l(1.00000000, 0.00000000, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r4.z, r12.xyxx, t8.yzxw, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.48613599, -0.48613599, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r5.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(0.00000000, -0.62500000, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r6.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(0.39774799, -0.39774799, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r10.w, r12.xyxx, t8.yzwx, s1, l(0)
              ge r4.z, r4.z, r2.z
              and r4.z, r4.z, l(0x3f800000)
              ge r5.w, r5.w, r2.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.z, r4.z, r5.w
              ge r5.w, r6.w, r2.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.z, r4.z, r5.w
              ge r5.w, r10.w, r2.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.z, r4.z, r5.w
              add r3.w, r3.w, r4.z
              mad r12.xy, r2.wwww, l(0.50000000, 0.00000000, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r4.z, r12.xyxx, t8.yzxw, s1, l(0)
              mad r12.xy, r2.wwww, l(0.13519500, 0.41608700, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r5.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.30338100, 0.22041900, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r6.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.25281799, -0.18368299, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r10.w, r12.xyxx, t8.yzwx, s1, l(0)
              ge r4.z, r4.z, r2.z
              and r4.z, r4.z, l(0x3f800000)
              ge r5.w, r5.w, r2.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.z, r4.z, r5.w
              ge r5.w, r6.w, r2.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.z, r4.z, r5.w
              ge r5.w, r10.w, r2.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.z, r4.z, r5.w
              add r3.w, r3.w, r4.z
              mad r12.xy, r2.wwww, l(0.07725400, -0.23776400, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r4.z, r12.xyxx, t8.yzxw, s1, l(0)
              mad r12.xy, r2.wwww, l(0.18750000, 0.00000000, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r5.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.06250000, 0.10825300, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r6.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r2.xy, r2.wwww, l(-0.03125000, -0.05412700, 0.00000000, 0.00000000), r2.xyxx
              sample_l (texture2d) (float,float,float,float) r2.x, r2.xyxx, t8.xyzw, s1, l(0)
              ge r2.y, r4.z, r2.z
              ge r2.w, r5.w, r2.z
              and r2.yw, r2.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
              add r2.y, r2.w, r2.y
              ge r2.w, r6.w, r2.z
              and r2.w, r2.w, l(0x3f800000)
              add r2.y, r2.w, r2.y
              ge r2.x, r2.x, r2.z
              and r2.x, r2.x, l(0x3f800000)
              add r2.x, r2.x, r2.y
              add r2.x, r2.x, r3.w
              mul r2.x, r2.x, l(0.06250000)
              mul r2.yzw, r11.xxyz, cb2[9].xxyz
              mul r2.xyz, r2.xxxx, r2.yzwy
              add r11.xyz, -cb2[10].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
              mad r11.xyz, r1.xxxx, r11.xyzx, cb2[10].xyzx
              mul r2.xyz, r2.xyzx, r11.xyzx
              add r11.xyz, -r9.xyzx, cb2[8].xyzx
              dp3 r1.x, r11.xyzx, r11.xyzx
              rsq r2.w, r1.x
              mul r12.xyz, r2.wwww, r11.xyzx
              div r3.w, r1.x, r15.x
              mad r3.w, -r3.w, r3.w, l(1.00000000)
              max r3.w, r3.w, l(0.00000000)
              mul r2.xyz, r2.xyzx, r3.wwww
              div r2.xyz, r2.xyzx, r1.xxxx
              mov r9.w, l(0x3f800000)
              dp4 r13.x, cb1[4].xyzw, r9.xyzw
              dp4 r13.y, cb1[5].xyzw, r9.xyzw
              dp4 r13.z, cb1[6].xyzw, r9.xyzw
              add r9.xyz, -r17.xyzx, r13.xyzx
              dp3 r1.x, r9.xyzx, r9.xyzx
              sqrt r1.x, r1.x
              div r3.w, r9.y, r1.x
              ne r4.z, r3.w, l(0.00000000)
              mul r9.xyz, r3.wwww, cb4[0].xyzx
              mul r9.xyz, r1.xxxx, r9.xyzx
              mul r9.xyz, r9.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
              exp r9.xyz, r9.xyzx
              add r9.xyz, -r9.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
              mul r9.xyz, r9.xyzx, r15.yzwy
              mul r13.xyz, r3.wwww, -cb4[0].xyzx
              div r9.xyz, r9.xyzx, r13.xyzx
              mul r13.xyz, r1.xxxx, r15.yzwy
              movc r9.xyz, r4.zzzz, r9.xyzx, r13.xyzx
              mad r1.x, r9.z, l(200.00000000), r9.y
              mul r9.yzw, r1.xxxx, cb4[3].xxyz
              mad r9.xyz, cb4[1].xyzx, r9.xxxx, r9.yzwy
              mul r9.xyz, r9.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
              exp r9.xyz, r9.xyzx
              mul r2.xyz, r2.xyzx, r9.xyzx
              mul r1.x, r7.w, l(1.57079637)
              dp3 r3.w, r5.xyzx, -r10.xyzx
              mov_sat r4.z, r3.w
              dp3 r5.w, r5.xyzx, r12.xyzx
              mov_sat r6.w, r5.w
              add r7.w, -r4.z, l(1.00000000)
              sqrt r7.w, r7.w
              mad r9.x, r4.z, l(-0.01872930), l(0.07426100)
              mad r9.x, r9.x, r4.z, l(-0.21211439)
              mad r9.x, r9.x, r4.z, l(1.57072878)
              mul r7.w, r7.w, r9.x
              add r9.x, -r6.w, l(1.00000000)
              sqrt r9.x, r9.x
              mad r9.y, r6.w, l(-0.01872930), l(0.07426100)
              mad r9.y, r9.y, r6.w, l(-0.21211439)
              mad r9.y, r9.y, r6.w, l(1.57072878)
              mul r9.x, r9.x, r9.y
              max r9.y, r7.w, r9.x
              min r7.w, r7.w, r9.x
              mad r9.xzw, -r5.xxyz, r4.zzzz, -r10.xxyz
              dp3 r4.z, r9.xzwx, r9.xzwx
              rsq r4.z, r4.z
              mul r9.xzw, r4.zzzz, r9.xxzw
              mad r12.xyz, -r5.xyzx, r6.wwww, r12.xyzx
              dp3 r4.z, r12.xyzx, r12.xyzx
              rsq r4.z, r4.z
              mul r12.xyz, r4.zzzz, r12.xyzx
              dp3 r4.z, r9.xzwx, r12.xyzx
              mul r9.x, r1.x, r1.x
              mad r12.xyz, r1.xxxx, r1.xxxx, l(0.33000001, 0.09000000, 0.09000000, 0.00000000)
              div r9.xzw, r9.xxxx, r12.xxyz
              mul r9.zw, r9.zzzw, l(0.00000000, 0.00000000, 0.44999999, 0.12500000)
              mad r1.x, -r9.x, l(0.50000000), l(1.00000000)
              ge r9.x, r4.z, l(0.00000000)
              sincos r10.w, null, r9.y
              mul r11.w, r7.w, l(0.63661975)
              mul r12.x, r11.w, r11.w
              mad r11.w, -r11.w, r12.x, r10.w
              movc r9.x, r9.x, r10.w, r11.w
              mul r9.x, r9.x, r9.z
              mul r9.z, r9.y, r7.w
              mul r9.z, r9.z, l(0.40528473)
              mul r9.z, r9.z, r9.z
              mul r9.z, r9.z, r9.w
              mul r9.x, r4.z, r9.x
              sincos r12.x, r13.x, r7.w
              div r9.w, r12.x, r13.x
              add r4.z, -|r4.z|, l(1.00000000)
              mul r4.z, r9.z, r4.z
              add r7.w, r7.w, r9.y
              mul r7.w, r7.w, l(0.50000000)
              sincos r12.x, r13.x, r7.w
              div r7.w, r12.x, r13.x
              mad r1.x, r9.x, r9.w, r1.x
              mad r1.x, r4.z, r7.w, r1.x
              mul r1.x, r1.x, l(0.31830987)
              mul r4.z, r8.w, l(1.57079637)
              mad r9.xyz, r11.xyzx, r2.wwww, -r10.xyzx
              dp3 r2.w, r9.xyzx, r9.xyzx
              rsq r2.w, r2.w
              mul r9.xyz, r2.wwww, r9.xyzx
              max r2.w, r3.w, l(0.00010000)
              max r3.w, r5.w, l(0.00010000)
              dp3 r5.x, r5.xyzx, r9.xyzx
              max r5.x, r5.x, l(0.00010000)
              dp3 r5.y, -r10.xyzx, r9.xyzx
              mul r4.z, r4.z, r4.z
              mul r5.z, r5.x, r5.x
              mad r5.w, r5.x, r5.x, l(-1.00000000)
              mul r7.w, r4.z, r5.z
              div r5.w, r5.w, r7.w
              mul r5.w, r5.w, l(1.44269502)
              exp r5.w, r5.w
              mul r4.z, r4.z, l(4.00000000)
              mul r5.z, r5.z, r5.z
              mul r4.z, r4.z, r5.z
              div r4.z, r5.w, r4.z
              min r5.z, r2.w, r3.w
              dp2 r5.x, r5.xxxx, r5.zzzz
              div r5.x, r5.x, r5.y
              min r5.x, r5.x, l(1.00000000)
              mul r4.z, r4.z, r5.x
              mul r2.w, r2.w, r3.w
              div r2.w, r4.z, r2.w
              mul r5.xyz, r2.wwww, r8.xyzx
              mad r5.xyz, r7.xyzx, r1.xxxx, r5.xyzx
              mul r2.xyz, r2.xyzx, r5.xyzx
              mul r2.xyz, r6.wwww, r2.xyzx
              mul r2.xyz, r21.xyzx, r2.xyzx
            else 
              mov r2.xyz, l(0, 0, 0, 0)
            endif 
          else 
            mov r2.xyz, l(0, 0, 0, 0)
          endif 
          mul r5.xyz, r2.xyzx, cb0[0].xyzx
          mad r2.xyz, r2.xyzx, cb0[0].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
          div r2.xyz, r5.xyzx, r2.xyzx
          add r2.xyz, r2.xyzx, r3.xyzx
          ldms (texture2dms) (float,float,float,float) r3.z, r0.xyww, t0.yzxw, l(0x2)
          ldms (texture2dms) (float,float,float,float) r5.xyz, r0.xyww, t1.xyzw, l(0x2)
          mad r5.xyz, r5.xyzx, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), l(-1.00000000, -1.00000000, -1.00000000, 0.00000000)
          dp3 r1.x, r5.xyzx, r5.xyzx
          rsq r1.x, r1.x
          mul r5.xyz, r1.xxxx, r5.xyzx
          ldms (texture2dms) (float,float,float,float) r7.xyzw, r0.xyww, t2.xyzw, l(0x2)
          ldms (texture2dms) (float,float,float,float) r8.xyzw, r0.xyww, t3.xyzw, l(0x2)
          ldms (texture2dms) (float,float,float,float) r1.x, r0.xyww, t4.xyzw, l(0x2)
          mov r3.xyw, r4.xyxw
          dp4 r4.x, cb1[0].xyzw, r3.xyzw
          dp4 r4.y, cb1[1].xyzw, r3.xyzw
          dp4 r4.z, cb1[2].xyzw, r3.xyzw
          dp4 r4.w, cb1[3].xyzw, r3.xyzw
          div r9.xyz, r4.xyzx, r4.wwww
          dp3 r2.w, r9.xyzx, r9.xyzx
          sqrt r2.w, r2.w
          div r10.xyz, r9.xyzx, r2.wwww
          min r11.z, r2.w, l(100000.00000000)
          dp3 r3.z, cb2[11].xyzx, r10.xyzx
          lt r5.w, r3.z, l(0.00000000)
          div r6.w, -cb2[11].w, r3.z
          max r6.w, r6.w, l(0.10000000)
          min r11.y, r11.z, r6.w
          lt r3.z, l(0.00000000), r3.z
          movc r12.z, r3.z, r11.y, r11.z
          mov r12.y, l(0x3dcccccd)
          movc r11.yz, r5.wwww, r11.yyzy, r12.yyzy
          dp3 r3.z, cb2[12].xyzx, r10.xyzx
          lt r5.w, r3.z, l(0.00000000)
          div r6.w, -cb2[12].w, r3.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r3.z, l(0.00000000), r3.z
          movc r11.w, r3.z, r11.x, r11.z
          movc r11.yz, r5.wwww, r11.xxzx, r11.yywy
          dp3 r3.z, cb2[13].xyzx, r10.xyzx
          lt r5.w, r3.z, l(0.00000000)
          div r6.w, -cb2[13].w, r3.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r3.z, l(0.00000000), r3.z
          movc r11.w, r3.z, r11.x, r11.z
          movc r11.yz, r5.wwww, r11.xxzx, r11.yywy
          dp3 r3.z, cb2[14].xyzx, r10.xyzx
          lt r5.w, r3.z, l(0.00000000)
          div r6.w, -cb2[14].w, r3.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r3.z, l(0.00000000), r3.z
          movc r11.w, r3.z, r11.x, r11.z
          movc r11.yz, r5.wwww, r11.xxzx, r11.yywy
          dp3 r3.z, cb2[15].xyzx, r10.xyzx
          lt r5.w, r3.z, l(0.00000000)
          div r6.w, -cb2[15].w, r3.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r3.z, l(0.00000000), r3.z
          movc r11.w, r3.z, r11.x, r11.z
          movc r11.yz, r5.wwww, r11.xxzx, r11.yywy
          dp3 r3.z, cb2[16].xyzx, r10.xyzx
          lt r5.w, r3.z, l(0.00000000)
          div r6.w, -cb2[16].w, r3.z
          max r6.w, r11.y, r6.w
          min r11.x, r11.z, r6.w
          lt r3.z, l(0.00000000), r3.z
          movc r11.w, r3.z, r11.x, r11.z
          movc r11.xy, r5.wwww, r11.xzxx, r11.ywyy
          lt r3.z, r11.x, r11.y
          if_nz r3.z
            ftou r11.zw, v0.xxxy
            and r12.xy, r11.zwzz, l(0x3, 0x3, 0, 0)
            mov r12.zw, l(0, 0, 0, 0)
            ld (texture2d) (float,float,float,float) r12.x, r12.xyzw, t6.xyzw
            max r3.z, r11.x, cb4[4].x
            min r5.w, r11.y, cb4[4].y
            dp3 r6.w, cb1[5].xyzx, r10.xyzx
            add r11.z, r3.z, -cb4[4].x
            max r11.z, r11.z, l(0.00000000)
            ne r11.w, r6.w, l(0.00000000)
            mad r12.y, r6.w, cb4[4].x, cb3[8].y
            mul r12.yzw, r12.yyyy, cb4[0].xxyz
            mul r12.yzw, r12.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
            exp r12.yzw, r12.yyzw
            mul r13.xyz, r6.wwww, cb4[0].xyzx
            mul r13.xyz, r11.zzzz, r13.xyzx
            mul r13.xyz, r13.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r13.xyz, r13.xyzx
            add r13.xyz, -r13.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
            mul r12.yzw, r12.yyzw, r13.xxyz
            mul r13.xyz, r6.wwww, -cb4[0].xyzx
            div r12.yzw, r12.yyzw, r13.xxyz
            mul r13.xyz, cb3[8].yyyy, cb4[0].xyzx
            mul r13.xyz, r13.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r13.xyz, r13.xyzx
            mul r13.xyz, r11.zzzz, r13.xyzx
            movc r12.yzw, r11.wwww, r12.yyzw, r13.xxyz
            mad r11.z, r12.w, l(200.00000000), r12.z
            mul r13.xyz, r11.zzzz, cb4[3].xyzx
            mad r12.yzw, cb4[1].xxyz, r12.yyyy, r13.xxyz
            mul r12.yzw, r12.yyzw, l(0.00000000, -1.44269502, -1.44269502, -1.44269502)
            exp r12.yzw, r12.yyzw
            mov r10.w, l(0x3f800000)
            dp4 r13.x, cb2[4].xyzw, r10.xyzw
            dp4 r13.y, cb2[5].xyzw, r10.xyzw
            dp4 r13.z, cb2[6].xyzw, r10.xyzw
            dp4 r13.w, cb2[7].xyzw, r10.xyzw
            mov r14.x, cb2[4].w
            mov r14.y, cb2[5].w
            mov r14.z, cb2[6].w
            mov r14.w, cb2[7].w
            add r13.xyzw, r13.xyzw, -r14.xyzw
            mul r10.w, r3.z, cb4[4].z
            log r10.w, r10.w
            mul r10.w, r10.w, cb4[5].x
            round_ni r10.w, r10.w
            max r10.w, r10.w, l(0.00000000)
            log r11.z, cb4[4].w
            mul r10.w, r10.w, r11.z
            exp r10.w, r10.w
            mul r10.w, r10.w, cb4[4].x
            mul r11.z, r10.w, cb4[4].w
            mad r11.w, -cb4[3].w, cb4[3].w, l(1.00000000)
            mul r15.x, cb2[9].w, cb2[9].w
            mov r16.xyz, cb2[8].xyzx
            mov r16.w, l(0x3f800000)
            dp4 r17.x, cb1[4].xyzw, r16.xyzw
            dp4 r17.y, cb1[5].xyzw, r16.xyzw
            dp4 r17.z, cb1[6].xyzw, r16.xyzw
            mul r15.yzw, r17.yyyy, cb4[0].xxyz
            mul r15.yzw, r15.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
            exp r15.yzw, r15.yyzw
            mul r16.xyz, cb4[1].xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.00000000)
            mov r18.w, l(0x3f800000)
            mov r19.xyzw, r14.xyzw
            mov r20.xyzw, r13.xyzw
            mov r21.xyz, r12.yzwy
            mov r22.xyz, l(0, 0, 0, 0)
            mov r16.w, r10.w
            mov r17.w, r11.z
            loop 
              ge r21.w, r16.w, r5.w
              breakc_nz r21.w
              max r21.w, r3.z, r16.w
              min r22.w, r5.w, r17.w
              add r23.x, -r21.w, r22.w
              div r22.w, r22.w, r21.w
              log r22.w, r22.w
              mul r22.w, r12.x, r22.w
              exp r22.w, r22.w
              mul r21.w, r21.w, r22.w
              mad r22.w, r21.w, r6.w, cb3[8].y
              mul r23.yzw, r22.wwww, cb4[0].xxyz
              mul r23.yzw, r23.yyzw, l(0.00000000, 1.44269502, 1.44269502, 1.44269502)
              exp r24.xyz, r23.yzwy
              mad r24.w, r24.z, l(200.00000000), r24.y
              mul r23.xy, r23.xxxx, r24.xwxx
              mul r24.xyz, r23.yyyy, cb4[3].xyzx
              mad r24.xyz, cb4[1].xyzx, r23.xxxx, r24.xyzx
              mul r24.xyz, r24.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
              exp r24.xyz, r24.xyzx
              mul r21.xyz, r21.xyzx, r24.xyzx
              mul r18.xyz, r10.xyzx, r21.wwww
              mad r24.xyzw, r21.wwww, r20.xyzw, r19.xyzw
              div r24.xyz, r24.xyzx, r24.wwww
              sample_l (texture2d) (float,float,float,float) r25.xyz, r24.xyxx, t7.xyzw, s0, l(0)
              sample_l (texture2d) (float,float,float,float) r22.w, r24.xyxx, t8.yzwx, s1, l(0)
              ge r22.w, r22.w, r24.z
              and r22.w, r22.w, l(0x3f800000)
              mul r24.xyz, r22.wwww, r25.xyzx
              mad r25.xyz, -r21.wwww, r10.xyzx, cb2[8].xyzx
              dp3 r21.w, r25.xyzx, r25.xyzx
              rsq r22.w, r21.w
              mul r25.xyz, r22.wwww, r25.xyzx
              dp3 r22.w, r10.xyzx, r25.xyzx
              mad r22.w, -cb4[3].w, r22.w, l(1.00000000)
              mul r22.w, r22.w, r22.w
              mul r22.w, r22.w, l(12.56637096)
              div r22.w, r11.w, r22.w
              div r23.z, r21.w, r15.x
              mad r23.z, -r23.z, r23.z, l(1.00000000)
              max r23.z, r23.z, l(0.00000000)
              add r21.w, r21.w, l(1.00000000)
              div r21.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r21.w
              mul r24.xyz, r23.zzzz, r24.xyzx
              mul r24.xyz, r21.wwww, r24.xyzx
              dp4 r25.x, cb1[4].xyzw, r18.xyzw
              dp4 r25.y, cb1[5].xyzw, r18.xyzw
              dp4 r25.z, cb1[6].xyzw, r18.xyzw
              add r18.xyz, -r17.xyzx, r25.xyzx
              dp3 r18.x, r18.xyzx, r18.xyzx
              sqrt r18.x, r18.x
              div r18.y, r18.y, r18.x
              ne r18.z, r18.y, l(0.00000000)
              mul r25.xyz, r18.yyyy, cb4[0].xyzx
              mul r25.xyz, r18.xxxx, r25.xyzx
              mul r25.xyz, r25.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
              exp r25.xyz, r25.xyzx
              add r25.xyz, -r25.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
              mul r25.xyz, r15.yzwy, r25.xyzx
              mul r26.xyz, r18.yyyy, -cb4[0].xyzx
              div r25.xyz, r25.xyzx, r26.xyzx
              mul r26.xyz, r15.yzwy, r18.xxxx
              movc r18.xyz, r18.zzzz, r25.xyzx, r26.xyzx
              mad r18.y, r18.z, l(200.00000000), r18.y
              mul r25.xyz, r18.yyyy, cb4[3].xyzx
              mad r18.xyz, cb4[1].xyzx, r18.xxxx, r25.xyzx
              mul r18.xyz, r18.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
              exp r18.xyz, r18.xyzx
              mul r18.xyz, r18.xyzx, r24.xyzx
              mul r24.xyz, r22.wwww, cb4[2].xyzx
              mul r23.yzw, r23.yyyy, r24.xxyz
              mad r23.xyz, r16.xyzx, r23.xxxx, r23.yzwy
              mul r18.xyz, r18.xyzx, r23.xyzx
              mad r22.xyz, r18.xyzx, r21.xyzx, r22.xyzx
              mul r18.x, r17.w, cb4[4].w
              mov r16.w, r17.w
              mov r17.w, r18.x
            endloop 
            mad r6.xyz, r22.xyzx, cb2[9].xyzx, r6.xyzx
            lt r3.z, r11.x, r2.w
            ge r2.w, r11.y, r2.w
            and r2.w, r2.w, r3.z
            if_nz r2.w
              dp4 r11.x, cb2[4].xyzw, r4.xyzw
              dp4 r11.y, cb2[5].xyzw, r4.xyzw
              dp4 r11.z, cb2[6].xyzw, r4.xyzw
              dp4 r2.w, cb2[7].xyzw, r4.xyzw
              div r4.xyz, r11.xyzx, r2.wwww
              sample_l (texture2d) (float,float,float,float) r11.xyz, r4.xyxx, t7.xyzw, s0, l(0)
              add r4.zw, r4.zzzz, l(0.00000000, 0.00000000, -0.00010000, -0.00100000)
              div r2.w, r4.w, cb2[9].w
              mul r2.w, r2.w, l(0.75000000)
              max r2.w, r2.w, l(0.00010000)
              mad r12.xy, r2.wwww, l(0.66291302, 0.66291302, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r3.z, r12.xyxx, t8.yzxw, s1, l(0)
              mad r12.xy, r2.wwww, l(0.00000000, 0.87500000, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r4.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.57452399, 0.57452399, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r5.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.75000000, 0.00000000, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r6.w, r12.xyxx, t8.yzwx, s1, l(0)
              ge r3.z, r3.z, r4.z
              and r3.z, r3.z, l(0x3f800000)
              ge r4.w, r4.w, r4.z
              and r4.w, r4.w, l(0x3f800000)
              add r3.z, r3.z, r4.w
              ge r4.w, r5.w, r4.z
              and r4.w, r4.w, l(0x3f800000)
              add r3.z, r3.z, r4.w
              ge r4.w, r6.w, r4.z
              and r4.w, r4.w, l(0x3f800000)
              add r3.z, r3.z, r4.w
              mad r12.xy, r2.wwww, l(1.00000000, 0.00000000, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r4.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.48613599, -0.48613599, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r5.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(0.00000000, -0.62500000, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r6.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(0.39774799, -0.39774799, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r10.w, r12.xyxx, t8.yzwx, s1, l(0)
              ge r4.w, r4.w, r4.z
              and r4.w, r4.w, l(0x3f800000)
              ge r5.w, r5.w, r4.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.w, r4.w, r5.w
              ge r5.w, r6.w, r4.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.w, r4.w, r5.w
              ge r5.w, r10.w, r4.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.w, r4.w, r5.w
              add r3.z, r3.z, r4.w
              mad r12.xy, r2.wwww, l(0.50000000, 0.00000000, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r4.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(0.13519500, 0.41608700, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r5.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.30338100, 0.22041900, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r6.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.25281799, -0.18368299, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r10.w, r12.xyxx, t8.yzwx, s1, l(0)
              ge r4.w, r4.w, r4.z
              and r4.w, r4.w, l(0x3f800000)
              ge r5.w, r5.w, r4.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.w, r4.w, r5.w
              ge r5.w, r6.w, r4.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.w, r4.w, r5.w
              ge r5.w, r10.w, r4.z
              and r5.w, r5.w, l(0x3f800000)
              add r4.w, r4.w, r5.w
              add r3.z, r3.z, r4.w
              mad r12.xy, r2.wwww, l(0.07725400, -0.23776400, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r4.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(0.18750000, 0.00000000, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r5.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r12.xy, r2.wwww, l(-0.06250000, 0.10825300, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r6.w, r12.xyxx, t8.yzwx, s1, l(0)
              mad r4.xy, r2.wwww, l(-0.03125000, -0.05412700, 0.00000000, 0.00000000), r4.xyxx
              sample_l (texture2d) (float,float,float,float) r2.w, r4.xyxx, t8.yzwx, s1, l(0)
              ge r4.x, r4.w, r4.z
              ge r4.y, r5.w, r4.z
              and r4.xy, r4.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
              add r4.x, r4.y, r4.x
              ge r4.y, r6.w, r4.z
              and r4.y, r4.y, l(0x3f800000)
              add r4.x, r4.y, r4.x
              ge r2.w, r2.w, r4.z
              and r2.w, r2.w, l(0x3f800000)
              add r2.w, r2.w, r4.x
              add r2.w, r2.w, r3.z
              mul r2.w, r2.w, l(0.06250000)
              mul r4.xyz, r11.xyzx, cb2[9].xyzx
              mul r4.xyz, r2.wwww, r4.xyzx
              add r11.xyz, -cb2[10].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
              mad r11.xyz, r1.xxxx, r11.xyzx, cb2[10].xyzx
              mul r4.xyz, r4.xyzx, r11.xyzx
              add r11.xyz, -r9.xyzx, cb2[8].xyzx
              dp3 r1.x, r11.xyzx, r11.xyzx
              rsq r2.w, r1.x
              mul r12.xyz, r2.wwww, r11.xyzx
              div r3.z, r1.x, r15.x
              mad r3.z, -r3.z, r3.z, l(1.00000000)
              max r3.z, r3.z, l(0.00000000)
              mul r4.xyz, r3.zzzz, r4.xyzx
              div r4.xyz, r4.xyzx, r1.xxxx
              mov r9.w, l(0x3f800000)
              dp4 r13.x, cb1[4].xyzw, r9.xyzw
              dp4 r13.y, cb1[5].xyzw, r9.xyzw
              dp4 r13.z, cb1[6].xyzw, r9.xyzw
              add r9.xyz, -r17.xyzx, r13.xyzx
              dp3 r1.x, r9.xyzx, r9.xyzx
              sqrt r1.x, r1.x
              div r3.z, r9.y, r1.x
              ne r4.w, r3.z, l(0.00000000)
              mul r9.xyz, r3.zzzz, cb4[0].xyzx
              mul r9.xyz, r1.xxxx, r9.xyzx
              mul r9.xyz, r9.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
              exp r9.xyz, r9.xyzx
              add r9.xyz, -r9.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
              mul r9.xyz, r9.xyzx, r15.yzwy
              mul r13.xyz, r3.zzzz, -cb4[0].xyzx
              div r9.xyz, r9.xyzx, r13.xyzx
              mul r13.xyz, r1.xxxx, r15.yzwy
              movc r9.xyz, r4.wwww, r9.xyzx, r13.xyzx
              mad r1.x, r9.z, l(200.00000000), r9.y
              mul r9.yzw, r1.xxxx, cb4[3].xxyz
              mad r9.xyz, cb4[1].xyzx, r9.xxxx, r9.yzwy
              mul r9.xyz, r9.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
              exp r9.xyz, r9.xyzx
              mul r4.xyz, r4.xyzx, r9.xyzx
              mul r1.x, r7.w, l(1.57079637)
              dp3 r3.z, r5.xyzx, -r10.xyzx
              mov_sat r4.w, r3.z
              dp3 r5.w, r5.xyzx, r12.xyzx
              mov_sat r6.w, r5.w
              add r7.w, -r4.w, l(1.00000000)
              sqrt r7.w, r7.w
              mad r9.x, r4.w, l(-0.01872930), l(0.07426100)
              mad r9.x, r9.x, r4.w, l(-0.21211439)
              mad r9.x, r9.x, r4.w, l(1.57072878)
              mul r7.w, r7.w, r9.x
              add r9.x, -r6.w, l(1.00000000)
              sqrt r9.x, r9.x
              mad r9.y, r6.w, l(-0.01872930), l(0.07426100)
              mad r9.y, r9.y, r6.w, l(-0.21211439)
              mad r9.y, r9.y, r6.w, l(1.57072878)
              mul r9.x, r9.x, r9.y
              max r9.y, r7.w, r9.x
              min r7.w, r7.w, r9.x
              mad r9.xzw, -r5.xxyz, r4.wwww, -r10.xxyz
              dp3 r4.w, r9.xzwx, r9.xzwx
              rsq r4.w, r4.w
              mul r9.xzw, r4.wwww, r9.xxzw
              mad r12.xyz, -r5.xyzx, r6.wwww, r12.xyzx
              dp3 r4.w, r12.xyzx, r12.xyzx
              rsq r4.w, r4.w
              mul r12.xyz, r4.wwww, r12.xyzx
              dp3 r4.w, r9.xzwx, r12.xyzx
              mul r9.x, r1.x, r1.x
              mad r12.xyz, r1.xxxx, r1.xxxx, l(0.33000001, 0.09000000, 0.09000000, 0.00000000)
              div r9.xzw, r9.xxxx, r12.xxyz
              mul r9.zw, r9.zzzw, l(0.00000000, 0.00000000, 0.44999999, 0.12500000)
              mad r1.x, -r9.x, l(0.50000000), l(1.00000000)
              ge r9.x, r4.w, l(0.00000000)
              sincos r10.w, null, r9.y
              mul r11.w, r7.w, l(0.63661975)
              mul r12.x, r11.w, r11.w
              mad r11.w, -r11.w, r12.x, r10.w
              movc r9.x, r9.x, r10.w, r11.w
              mul r9.x, r9.x, r9.z
              mul r9.z, r9.y, r7.w
              mul r9.z, r9.z, l(0.40528473)
              mul r9.z, r9.z, r9.z
              mul r9.z, r9.z, r9.w
              mul r9.x, r4.w, r9.x
              sincos r12.x, r13.x, r7.w
              div r9.w, r12.x, r13.x
              add r4.w, -|r4.w|, l(1.00000000)
              mul r4.w, r9.z, r4.w
              add r7.w, r7.w, r9.y
              mul r7.w, r7.w, l(0.50000000)
              sincos r12.x, r13.x, r7.w
              div r7.w, r12.x, r13.x
              mad r1.x, r9.x, r9.w, r1.x
              mad r1.x, r4.w, r7.w, r1.x
              mul r1.x, r1.x, l(0.31830987)
              mul r4.w, r8.w, l(1.57079637)
              mad r9.xyz, r11.xyzx, r2.wwww, -r10.xyzx
              dp3 r2.w, r9.xyzx, r9.xyzx
              rsq r2.w, r2.w
              mul r9.xyz, r2.wwww, r9.xyzx
              max r2.w, r3.z, l(0.00010000)
              max r3.z, r5.w, l(0.00010000)
              dp3 r5.x, r5.xyzx, r9.xyzx
              max r5.x, r5.x, l(0.00010000)
              dp3 r5.y, -r10.xyzx, r9.xyzx
              mul r4.w, r4.w, r4.w
              mul r5.z, r5.x, r5.x
              mad r5.w, r5.x, r5.x, l(-1.00000000)
              mul r7.w, r4.w, r5.z
              div r5.w, r5.w, r7.w
              mul r5.w, r5.w, l(1.44269502)
              exp r5.w, r5.w
              mul r4.w, r4.w, l(4.00000000)
              mul r5.z, r5.z, r5.z
              mul r4.w, r4.w, r5.z
              div r4.w, r5.w, r4.w
              min r5.z, r2.w, r3.z
              dp2 r5.x, r5.xxxx, r5.zzzz
              div r5.x, r5.x, r5.y
              min r5.x, r5.x, l(1.00000000)
              mul r4.w, r4.w, r5.x
              mul r2.w, r2.w, r3.z
              div r2.w, r4.w, r2.w
              mul r5.xyz, r2.wwww, r8.xyzx
              mad r5.xyz, r7.xyzx, r1.xxxx, r5.xyzx
              mul r4.xyz, r4.xyzx, r5.xyzx
              mul r4.xyz, r6.wwww, r4.xyzx
              mul r4.xyz, r21.xyzx, r4.xyzx
            else 
              mov r4.xyz, l(0, 0, 0, 0)
            endif 
          else 
            mov r4.xyz, l(0, 0, 0, 0)
          endif 
          mul r5.xyz, r4.xyzx, cb0[0].xyzx
          mad r4.xyz, r4.xyzx, cb0[0].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
          div r4.xyz, r5.xyzx, r4.xyzx
          add r2.xyz, r2.xyzx, r4.xyzx
          ldms (texture2dms) (float,float,float,float) r4.z, r0.xyww, t0.yzxw, l(0x3)
          ldms (texture2dms) (float,float,float,float) r5.xyz, r0.xyww, t1.xyzw, l(0x3)
          mad r5.xyz, r5.xyzx, l(2.00000000, 2.00000000, 2.00000000, 0.00000000), l(-1.00000000, -1.00000000, -1.00000000, 0.00000000)
          dp3 r1.x, r5.xyzx, r5.xyzx
          rsq r1.x, r1.x
          mul r5.xyz, r1.xxxx, r5.xyzx
          ldms (texture2dms) (float,float,float,float) r7.xyzw, r0.xyww, t2.xyzw, l(0x3)
          ldms (texture2dms) (float,float,float,float) r8.xyzw, r0.xyww, t3.xyzw, l(0x3)
          ldms (texture2dms) (float,float,float,float) r0.x, r0.xyzw, t4.xyzw, l(0x3)
          mov r4.xyw, r3.xyxw
          dp4 r3.x, cb1[0].xyzw, r4.xyzw
          dp4 r3.y, cb1[1].xyzw, r4.xyzw
          dp4 r3.z, cb1[2].xyzw, r4.xyzw
          dp4 r3.w, cb1[3].xyzw, r4.xyzw
          div r4.xyz, r3.xyzx, r3.wwww
          dp3 r0.y, r4.xyzx, r4.xyzx
          sqrt r0.y, r0.y
          div r9.xyz, r4.xyzx, r0.yyyy
          min r10.z, r0.y, l(100000.00000000)
          dp3 r0.z, cb2[11].xyzx, r9.xyzx
          lt r0.w, r0.z, l(0.00000000)
          div r1.x, -cb2[11].w, r0.z
          max r1.x, r1.x, l(0.10000000)
          min r10.y, r10.z, r1.x
          lt r0.z, l(0.00000000), r0.z
          movc r11.z, r0.z, r10.y, r10.z
          mov r11.y, l(0x3dcccccd)
          movc r10.yz, r0.wwww, r10.yyzy, r11.yyzy
          dp3 r0.z, cb2[12].xyzx, r9.xyzx
          lt r0.w, r0.z, l(0.00000000)
          div r1.x, -cb2[12].w, r0.z
          max r1.x, r10.y, r1.x
          min r10.x, r10.z, r1.x
          lt r0.z, l(0.00000000), r0.z
          movc r10.w, r0.z, r10.x, r10.z
          movc r10.yz, r0.wwww, r10.xxzx, r10.yywy
          dp3 r0.z, cb2[13].xyzx, r9.xyzx
          lt r0.w, r0.z, l(0.00000000)
          div r1.x, -cb2[13].w, r0.z
          max r1.x, r10.y, r1.x
          min r10.x, r10.z, r1.x
          lt r0.z, l(0.00000000), r0.z
          movc r10.w, r0.z, r10.x, r10.z
          movc r10.yz, r0.wwww, r10.xxzx, r10.yywy
          dp3 r0.z, cb2[14].xyzx, r9.xyzx
          lt r0.w, r0.z, l(0.00000000)
          div r1.x, -cb2[14].w, r0.z
          max r1.x, r10.y, r1.x
          min r10.x, r10.z, r1.x
          lt r0.z, l(0.00000000), r0.z
          movc r10.w, r0.z, r10.x, r10.z
          movc r10.yz, r0.wwww, r10.xxzx, r10.yywy
          dp3 r0.z, cb2[15].xyzx, r9.xyzx
          lt r0.w, r0.z, l(0.00000000)
          div r1.x, -cb2[15].w, r0.z
          max r1.x, r10.y, r1.x
          min r10.x, r10.z, r1.x
          lt r0.z, l(0.00000000), r0.z
          movc r10.w, r0.z, r10.x, r10.z
          movc r10.yz, r0.wwww, r10.xxzx, r10.yywy
          dp3 r0.z, cb2[16].xyzx, r9.xyzx
          lt r0.w, r0.z, l(0.00000000)
          div r1.x, -cb2[16].w, r0.z
          max r1.x, r10.y, r1.x
          min r10.x, r10.z, r1.x
          lt r0.z, l(0.00000000), r0.z
          movc r10.w, r0.z, r10.x, r10.z
          movc r0.zw, r0.wwww, r10.xxxz, r10.yyyw
          lt r1.x, r0.z, r0.w
          if_nz r1.x
            ftou r10.xy, v0.xyxx
            and r10.xy, r10.xyxx, l(0x3, 0x3, 0, 0)
            mov r10.zw, l(0, 0, 0, 0)
            ld (texture2d) (float,float,float,float) r1.x, r10.xyzw, t6.xyzw
            max r2.w, r0.z, cb4[4].x
            min r5.w, r0.w, cb4[4].y
            dp3 r6.w, cb1[5].xyzx, r9.xyzx
            add r10.x, r2.w, -cb4[4].x
            max r10.x, r10.x, l(0.00000000)
            ne r10.y, r6.w, l(0.00000000)
            mad r10.z, r6.w, cb4[4].x, cb3[8].y
            mul r11.xyz, r10.zzzz, cb4[0].xyzx
            mul r11.xyz, r11.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r11.xyz, r11.xyzx
            mul r12.xyz, r6.wwww, cb4[0].xyzx
            mul r12.xyz, r10.xxxx, r12.xyzx
            mul r12.xyz, r12.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r12.xyz, r12.xyzx
            add r12.xyz, -r12.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
            mul r11.xyz, r11.xyzx, r12.xyzx
            mul r12.xyz, r6.wwww, -cb4[0].xyzx
            div r11.xyz, r11.xyzx, r12.xyzx
            mul r12.xyz, cb3[8].yyyy, cb4[0].xyzx
            mul r12.xyz, r12.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r12.xyz, r12.xyzx
            mul r10.xzw, r10.xxxx, r12.xxyz
            movc r10.xyz, r10.yyyy, r11.xyzx, r10.xzwx
            mad r10.y, r10.z, l(200.00000000), r10.y
            mul r10.yzw, r10.yyyy, cb4[3].xxyz
            mad r10.xyz, cb4[1].xyzx, r10.xxxx, r10.yzwy
            mul r10.xyz, r10.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
            exp r10.xyz, r10.xyzx
            mov r9.w, l(0x3f800000)
            dp4 r11.x, cb2[4].xyzw, r9.xyzw
            dp4 r11.y, cb2[5].xyzw, r9.xyzw
            dp4 r11.z, cb2[6].xyzw, r9.xyzw
            dp4 r11.w, cb2[7].xyzw, r9.xyzw
            mov r12.x, cb2[4].w
            mov r12.y, cb2[5].w
            mov r12.z, cb2[6].w
            mov r12.w, cb2[7].w
            add r11.xyzw, r11.xyzw, -r12.xyzw
            mul r9.w, r2.w, cb4[4].z
            log r9.w, r9.w
            mul r9.w, r9.w, cb4[5].x
            round_ni r9.w, r9.w
            max r9.w, r9.w, l(0.00000000)
            log r10.w, cb4[4].w
            mul r9.w, r9.w, r10.w
            exp r9.w, r9.w
            mul r9.w, r9.w, cb4[4].x
            mul r10.w, r9.w, cb4[4].w
            mad r13.x, -cb4[3].w, cb4[3].w, l(1.00000000)
            mul r13.y, cb2[9].w, cb2[9].w
            mov r14.xyz, cb2[8].xyzx
            mov r14.w, l(0x3f800000)
            dp4 r15.x, cb1[4].xyzw, r14.xyzw
            dp4 r15.y, cb1[5].xyzw, r14.xyzw
            dp4 r15.z, cb1[6].xyzw, r14.xyzw
            mul r14.xyz, r15.yyyy, cb4[0].xyzx
            mul r14.xyz, r14.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
            exp r14.xyz, r14.xyzx
            mul r16.xyz, cb4[1].xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.00000000)
            mov r17.w, l(0x3f800000)
            mov r18.xyzw, r12.xyzw
            mov r19.xyzw, r11.xyzw
            mov r20.xyz, r10.xyzx
            mov r21.xyz, l(0, 0, 0, 0)
            mov r13.z, r9.w
            mov r13.w, r10.w
            loop 
              ge r14.w, r13.z, r5.w
              breakc_nz r14.w
              max r14.w, r2.w, r13.z
              min r15.w, r5.w, r13.w
              add r16.w, -r14.w, r15.w
              div r15.w, r15.w, r14.w
              log r15.w, r15.w
              mul r15.w, r1.x, r15.w
              exp r15.w, r15.w
              mul r14.w, r14.w, r15.w
              mad r15.w, r14.w, r6.w, cb3[8].y
              mul r22.xyz, r15.wwww, cb4[0].xyzx
              mul r22.xyz, r22.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
              exp r22.xyz, r22.xyzx
              mad r22.w, r22.z, l(200.00000000), r22.y
              mul r22.xy, r16.wwww, r22.xwxx
              mul r23.xyz, r22.yyyy, cb4[3].xyzx
              mad r23.xyz, cb4[1].xyzx, r22.xxxx, r23.xyzx
              mul r23.xyz, r23.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
              exp r23.xyz, r23.xyzx
              mul r20.xyz, r20.xyzx, r23.xyzx
              mul r17.xyz, r9.xyzx, r14.wwww
              mad r23.xyzw, r14.wwww, r19.xyzw, r18.xyzw
              div r23.xyz, r23.xyzx, r23.wwww
              sample_l (texture2d) (float,float,float,float) r24.xyz, r23.xyxx, t7.xyzw, s0, l(0)
              sample_l (texture2d) (float,float,float,float) r15.w, r23.xyxx, t8.yzwx, s1, l(0)
              ge r15.w, r15.w, r23.z
              and r15.w, r15.w, l(0x3f800000)
              mul r23.xyz, r15.wwww, r24.xyzx
              mad r24.xyz, -r14.wwww, r9.xyzx, cb2[8].xyzx
              dp3 r14.w, r24.xyzx, r24.xyzx
              rsq r15.w, r14.w
              mul r24.xyz, r15.wwww, r24.xyzx
              dp3 r15.w, r9.xyzx, r24.xyzx
              mad r15.w, -cb4[3].w, r15.w, l(1.00000000)
              mul r15.w, r15.w, r15.w
              mul r15.w, r15.w, l(12.56637096)
              div r15.w, r13.x, r15.w
              div r16.w, r14.w, r13.y
              mad r16.w, -r16.w, r16.w, l(1.00000000)
              max r16.w, r16.w, l(0.00000000)
              add r14.w, r14.w, l(1.00000000)
              div r14.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r14.w
              mul r23.xyz, r16.wwww, r23.xyzx
              mul r23.xyz, r14.wwww, r23.xyzx
              dp4 r24.x, cb1[4].xyzw, r17.xyzw
              dp4 r24.y, cb1[5].xyzw, r17.xyzw
              dp4 r24.z, cb1[6].xyzw, r17.xyzw
              add r17.xyz, -r15.xyzx, r24.xyzx
              dp3 r14.w, r17.xyzx, r17.xyzx
              sqrt r14.w, r14.w
              div r16.w, r17.y, r14.w
              ne r17.x, r16.w, l(0.00000000)
              mul r24.xyz, r16.wwww, cb4[0].xyzx
              mul r24.xyz, r14.wwww, r24.xyzx
              mul r24.xyz, r24.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
              exp r24.xyz, r24.xyzx
              add r24.xyz, -r24.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
              mul r24.xyz, r14.xyzx, r24.xyzx
              mul r25.xyz, r16.wwww, -cb4[0].xyzx
              div r24.xyz, r24.xyzx, r25.xyzx
              mul r25.xyz, r14.wwww, r14.xyzx
              movc r17.xyz, r17.xxxx, r24.xyzx, r25.xyzx
              mad r14.w, r17.z, l(200.00000000), r17.y
              mul r24.xyz, r14.wwww, cb4[3].xyzx
              mad r17.xyz, cb4[1].xyzx, r17.xxxx, r24.xyzx
              mul r17.xyz, r17.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
              exp r17.xyz, r17.xyzx
              mul r17.xyz, r17.xyzx, r23.xyzx
              mul r23.xyz, r15.wwww, cb4[2].xyzx
              mul r22.yzw, r22.yyyy, r23.xxyz
              mad r22.xyz, r16.xyzx, r22.xxxx, r22.yzwy
              mul r17.xyz, r17.xyzx, r22.xyzx
              mad r21.xyz, r17.xyzx, r20.xyzx, r21.xyzx
              mul r14.w, r13.w, cb4[4].w
              mov r13.z, r13.w
              mov r13.w, r14.w
            endloop 
            mad r6.xyz, r21.xyzx, cb2[9].xyzx, r6.xyzx
            lt r0.z, r0.z, r0.y
            ge r0.y, r0.w, r0.y
            and r0.y, r0.y, r0.z
            if_nz r0.y
              dp4 r10.x, cb2[4].xyzw, r3.xyzw
              dp4 r10.y, cb2[5].xyzw, r3.xyzw
              dp4 r10.z, cb2[6].xyzw, r3.xyzw
              dp4 r0.y, cb2[7].xyzw, r3.xyzw
              div r0.yzw, r10.xxyz, r0.yyyy
              sample_l (texture2d) (float,float,float,float) r3.xyz, r0.yzyy, t7.xyzw, s0, l(0)
              add r10.xy, r0.wwww, l(-0.00010000, -0.00100000, 0.00000000, 0.00000000)
              div r0.w, r10.y, cb2[9].w
              mul r0.w, r0.w, l(0.75000000)
              max r0.w, r0.w, l(0.00010000)
              mad r10.yz, r0.wwww, l(0.00000000, 0.66291302, 0.66291302, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r1.x, r10.yzyy, t8.xyzw, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, 0.00000000, 0.87500000, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r2.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, -0.57452399, 0.57452399, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r3.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, -0.75000000, 0.00000000, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r5.w, r10.yzyy, t8.yzwx, s1, l(0)
              ge r1.x, r1.x, r10.x
              and r1.x, r1.x, l(0x3f800000)
              ge r2.w, r2.w, r10.x
              and r2.w, r2.w, l(0x3f800000)
              add r1.x, r1.x, r2.w
              ge r2.w, r3.w, r10.x
              and r2.w, r2.w, l(0x3f800000)
              add r1.x, r1.x, r2.w
              ge r2.w, r5.w, r10.x
              and r2.w, r2.w, l(0x3f800000)
              add r1.x, r1.x, r2.w
              mad r10.yz, r0.wwww, l(0.00000000, 1.00000000, 0.00000000, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r2.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, -0.48613599, -0.48613599, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r3.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, 0.00000000, -0.62500000, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r5.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, 0.39774799, -0.39774799, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r6.w, r10.yzyy, t8.yzwx, s1, l(0)
              ge r2.w, r2.w, r10.x
              and r2.w, r2.w, l(0x3f800000)
              ge r3.w, r3.w, r10.x
              and r3.w, r3.w, l(0x3f800000)
              add r2.w, r2.w, r3.w
              ge r3.w, r5.w, r10.x
              and r3.w, r3.w, l(0x3f800000)
              add r2.w, r2.w, r3.w
              ge r3.w, r6.w, r10.x
              and r3.w, r3.w, l(0x3f800000)
              add r2.w, r2.w, r3.w
              add r1.x, r1.x, r2.w
              mad r10.yz, r0.wwww, l(0.00000000, 0.50000000, 0.00000000, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r2.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, 0.13519500, 0.41608700, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r3.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, -0.30338100, 0.22041900, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r5.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, -0.25281799, -0.18368299, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r6.w, r10.yzyy, t8.yzwx, s1, l(0)
              ge r2.w, r2.w, r10.x
              and r2.w, r2.w, l(0x3f800000)
              ge r3.w, r3.w, r10.x
              and r3.w, r3.w, l(0x3f800000)
              add r2.w, r2.w, r3.w
              ge r3.w, r5.w, r10.x
              and r3.w, r3.w, l(0x3f800000)
              add r2.w, r2.w, r3.w
              ge r3.w, r6.w, r10.x
              and r3.w, r3.w, l(0x3f800000)
              add r2.w, r2.w, r3.w
              add r1.x, r1.x, r2.w
              mad r10.yz, r0.wwww, l(0.00000000, 0.07725400, -0.23776400, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r2.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, 0.18750000, 0.00000000, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r3.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r10.yz, r0.wwww, l(0.00000000, -0.06250000, 0.10825300, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r5.w, r10.yzyy, t8.yzwx, s1, l(0)
              mad r0.yz, r0.wwww, l(0.00000000, -0.03125000, -0.05412700, 0.00000000), r0.yyzy
              sample_l (texture2d) (float,float,float,float) r0.y, r0.yzyy, t8.yxzw, s1, l(0)
              ge r0.z, r2.w, r10.x
              ge r0.w, r3.w, r10.x
              and r0.zw, r0.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
              add r0.z, r0.w, r0.z
              ge r0.w, r5.w, r10.x
              and r0.w, r0.w, l(0x3f800000)
              add r0.z, r0.w, r0.z
              ge r0.y, r0.y, r10.x
              and r0.y, r0.y, l(0x3f800000)
              add r0.y, r0.y, r0.z
              add r0.y, r0.y, r1.x
              mul r0.y, r0.y, l(0.06250000)
              mul r3.xyz, r3.xyzx, cb2[9].xyzx
              mul r0.yzw, r0.yyyy, r3.xxyz
              add r3.xyz, -cb2[10].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
              mad r3.xyz, r0.xxxx, r3.xyzx, cb2[10].xyzx
              mul r0.xyz, r0.yzwy, r3.xyzx
              add r3.xyz, -r4.xyzx, cb2[8].xyzx
              dp3 r0.w, r3.xyzx, r3.xyzx
              rsq r1.x, r0.w
              mul r10.xyz, r1.xxxx, r3.xyzx
              div r2.w, r0.w, r13.y
              mad r2.w, -r2.w, r2.w, l(1.00000000)
              max r2.w, r2.w, l(0.00000000)
              mul r0.xyz, r0.xyzx, r2.wwww
              div r0.xyz, r0.xyzx, r0.wwww
              mov r4.w, l(0x3f800000)
              dp4 r11.x, cb1[4].xyzw, r4.xyzw
              dp4 r11.y, cb1[5].xyzw, r4.xyzw
              dp4 r11.z, cb1[6].xyzw, r4.xyzw
              add r4.xyz, -r15.xyzx, r11.xyzx
              dp3 r0.w, r4.xyzx, r4.xyzx
              sqrt r0.w, r0.w
              div r2.w, r4.y, r0.w
              ne r3.w, r2.w, l(0.00000000)
              mul r4.xyz, r2.wwww, cb4[0].xyzx
              mul r4.xyz, r0.wwww, r4.xyzx
              mul r4.xyz, r4.xyzx, l(1.44269502, 1.44269502, 1.44269502, 0.00000000)
              exp r4.xyz, r4.xyzx
              add r4.xyz, -r4.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
              mul r4.xyz, r4.xyzx, r14.xyzx
              mul r11.xyz, r2.wwww, -cb4[0].xyzx
              div r4.xyz, r4.xyzx, r11.xyzx
              mul r11.xyz, r0.wwww, r14.xyzx
              movc r4.xyz, r3.wwww, r4.xyzx, r11.xyzx
              mad r0.w, r4.z, l(200.00000000), r4.y
              mul r4.yzw, r0.wwww, cb4[3].xxyz
              mad r4.xyz, cb4[1].xyzx, r4.xxxx, r4.yzwy
              mul r4.xyz, r4.xyzx, l(-1.44269502, -1.44269502, -1.44269502, 0.00000000)
              exp r4.xyz, r4.xyzx
              mul r0.xyz, r0.xyzx, r4.xyzx
              mul r0.w, r7.w, l(1.57079637)
              dp3 r2.w, r5.xyzx, -r9.xyzx
              mov_sat r3.w, r2.w
              dp3 r4.x, r5.xyzx, r10.xyzx
              mov_sat r4.y, r4.x
              add r4.z, -r3.w, l(1.00000000)
              sqrt r4.z, r4.z
              mad r4.w, r3.w, l(-0.01872930), l(0.07426100)
              mad r4.w, r4.w, r3.w, l(-0.21211439)
              mad r4.w, r4.w, r3.w, l(1.57072878)
              mul r4.z, r4.z, r4.w
              add r4.w, -r4.y, l(1.00000000)
              sqrt r4.w, r4.w
              mad r5.w, r4.y, l(-0.01872930), l(0.07426100)
              mad r5.w, r5.w, r4.y, l(-0.21211439)
              mad r5.w, r5.w, r4.y, l(1.57072878)
              mul r4.w, r4.w, r5.w
              max r5.w, r4.w, r4.z
              min r4.z, r4.w, r4.z
              mad r11.xyz, -r5.xyzx, r3.wwww, -r9.xyzx
              dp3 r3.w, r11.xyzx, r11.xyzx
              rsq r3.w, r3.w
              mul r11.xyz, r3.wwww, r11.xyzx
              mad r10.xyz, -r5.xyzx, r4.yyyy, r10.xyzx
              dp3 r3.w, r10.xyzx, r10.xyzx
              rsq r3.w, r3.w
              mul r10.xyz, r3.wwww, r10.xyzx
              dp3 r3.w, r11.xyzx, r10.xyzx
              mul r4.w, r0.w, r0.w
              mad r10.xyz, r0.wwww, r0.wwww, l(0.33000001, 0.09000000, 0.09000000, 0.00000000)
              div r10.xyz, r4.wwww, r10.xyzx
              mul r10.yz, r10.yyzy, l(0.00000000, 0.44999999, 0.12500000, 0.00000000)
              mad r0.w, -r10.x, l(0.50000000), l(1.00000000)
              ge r4.w, r3.w, l(0.00000000)
              sincos r6.w, null, r5.w
              mul r7.w, r4.z, l(0.63661975)
              mul r9.w, r7.w, r7.w
              mad r7.w, -r7.w, r9.w, r6.w
              movc r4.w, r4.w, r6.w, r7.w
              mul r4.w, r4.w, r10.y
              mul r6.w, r5.w, r4.z
              mul r6.w, r6.w, l(0.40528473)
              mul r6.w, r6.w, r6.w
              mul r6.w, r6.w, r10.z
              mul r4.w, r3.w, r4.w
              sincos r10.x, r11.x, r4.z
              div r7.w, r10.x, r11.x
              add r3.w, -|r3.w|, l(1.00000000)
              mul r3.w, r6.w, r3.w
              add r4.z, r4.z, r5.w
              mul r4.z, r4.z, l(0.50000000)
              sincos r10.x, r11.x, r4.z
              div r4.z, r10.x, r11.x
              mad r0.w, r4.w, r7.w, r0.w
              mad r0.w, r3.w, r4.z, r0.w
              mul r0.w, r0.w, l(0.31830987)
              mul r3.w, r8.w, l(1.57079637)
              mad r3.xyz, r3.xyzx, r1.xxxx, -r9.xyzx
              dp3 r1.x, r3.xyzx, r3.xyzx
              rsq r1.x, r1.x
              mul r3.xyz, r1.xxxx, r3.xyzx
              max r1.x, r2.w, l(0.00010000)
              max r2.w, r4.x, l(0.00010000)
              dp3 r4.x, r5.xyzx, r3.xyzx
              max r4.x, r4.x, l(0.00010000)
              dp3 r3.x, -r9.xyzx, r3.xyzx
              mul r3.y, r3.w, r3.w
              mul r3.z, r4.x, r4.x
              mad r3.w, r4.x, r4.x, l(-1.00000000)
              mul r4.z, r3.y, r3.z
              div r3.w, r3.w, r4.z
              mul r3.yw, r3.yyyw, l(0.00000000, 4.00000000, 0.00000000, 1.44269502)
              exp r3.w, r3.w
              mul r3.z, r3.z, r3.z
              mul r3.y, r3.z, r3.y
              min r3.z, r1.x, r2.w
              dp2 r3.z, r4.xxxx, r3.zzzz
              div r3.xy, r3.zwzz, r3.xyxx
              min r3.x, r3.x, l(1.00000000)
              mul r3.x, r3.x, r3.y
              mul r1.x, r1.x, r2.w
              div r1.x, r3.x, r1.x
              mul r3.xyz, r1.xxxx, r8.xyzx
              mad r3.xyz, r7.xyzx, r0.wwww, r3.xyzx
              mul r0.xyz, r0.xyzx, r3.xyzx
              mul r0.xyz, r4.yyyy, r0.xyzx
              mul r0.xyz, r20.xyzx, r0.xyzx
            else 
              mov r0.xyz, l(0, 0, 0, 0)
            endif 
          else 
            mov r0.xyz, l(0, 0, 0, 0)
          endif 
          mul r3.xyz, r0.xyzx, cb0[0].xyzx
          mad r0.xyz, r0.xyzx, cb0[0].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
          div r0.xyz, r3.xyzx, r0.xyzx
          add r0.xyz, r0.xyzx, r2.xyzx
          mul r2.xyz, r0.xyzx, l(0.25000000, 0.25000000, 0.25000000, 0.00000000)
          mul r6.xyz, r6.xyzx, l(0.25000000, 0.25000000, 0.25000000, 0.00000000)
          mad r0.xyz, -r0.xyzx, l(0.25000000, 0.25000000, 0.25000000, 0.00000000), l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
          mul r0.xyz, r0.xyzx, cb0[0].xyzx
          div r1.yzw, r2.xxyz, r0.xxyz
        endif 
        max o0.xyz, r1.yzwy, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        max o1.xyz, r6.xyzx, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3a3f340f // 0.000729
//         COP_CONST[1]: 0xba3f340c // -0.000729
//         COP_CONST[2]: 0xc11feb85 // -9.995000
//         COP_CONST[3]: 0x3dcccccd // 0.100000
//         COP_CONST[4]: 0x3f435507 // 0.763016
//         COP_CONST[5]: 0xbf2238e7 // -0.633681
//         COP_CONST[6]: 0x3f3ee4d0 // 0.745679
//         COP_CONST[7]: 0x3eb1efb6 // 0.347532
//         COP_CONST[8]: 0x3f1188c5 // 0.568493
//         COP_CONST[9]: 0x3e028e29 // 0.127495
//         COP_CONST[10]: 0xbf276c23 // -0.653994
//         COP_CONST[11]: 0x3f0b854b // 0.545003
//         COP_CONST[12]: 0x3f064fe0 // 0.524656
//         COP_CONST[13]: 0x434de9e8 // 205.913696
//         COP_CONST[14]: 0xbf19999a // -0.600000
//         COP_CONST[15]: 0xb8d1b717 // -0.000100
//         COP_CONST[16]: 0xba83126f // -0.001000
//         COP_CONST[17]: 0x3f29b4ab // 0.662913
//         COP_CONST[18]: 0x3f131401 // 0.574524
//         COP_CONST[19]: 0xbef8e6d1 // -0.486136
//         COP_CONST[20]: 0xbecba5a0 // -0.397748
//         COP_CONST[21]: 0x3ed5095b // 0.416087
//         COP_CONST[22]: 0x3e0a708f // 0.135195
//         COP_CONST[23]: 0x3e61b585 // 0.220419
//         COP_CONST[24]: 0xbe9b54c1 // -0.303381
//         COP_CONST[25]: 0xbe3c1765 // -0.183683
//         COP_CONST[26]: 0xbe81715c // -0.252818
//         COP_CONST[27]: 0xbe737868 // -0.237764
//         COP_CONST[28]: 0x3d9e3758 // 0.077254
//         COP_CONST[29]: 0x3dddb3c0 // 0.108253
//         COP_CONST[30]: 0xbd5db446 // -0.054127
//         COP_CONST[31]: 0x3f1cac08 // 0.612000
//         COP_CONST[32]: 0x3f418937 // 0.756000
//         COP_CONST[33]: 0x3f7a2c56 // 0.977239
//         COP_CONST[34]: 0xbc996e30 // -0.018729
//         COP_CONST[35]: 0xbe593484 // -0.212114
//         COP_CONST[36]: 0x3fc90da4 // 1.570729
//         COP_CONST[37]: 0x3db851ec // 0.090000
//         COP_CONST[38]: 0x3ea8f5c3 // 0.330000
//         COP_CONST[39]: 0x417001d9 // 15.000451
//         COP_CONST[40]: 0x3f800000 // 1.000000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][0] = 0x417001d9 // 15.000451
//         USER_CONST: c[0][1] = 0x417001d9 // 15.000451
//         USER_CONST: c[0][2] = 0x417001d9 // 15.000451
//         USER_CONST: c[1][0] = 0x3a3f340f // 0.000729
//         USER_CONST: c[1][1] = 0x00000000 // 0.000000
//         USER_CONST: c[1][2] = 0x00000000 // 0.000000
//         USER_CONST: c[1][3] = 0xbf3340cd // -0.700208
//         USER_CONST: c[1][4] = 0x00000000 // 0.000000
//         USER_CONST: c[1][5] = 0xba3f340c // -0.000729
//         USER_CONST: c[1][6] = 0x00000000 // 0.000000
//         USER_CONST: c[1][7] = 0x3ec9a8e5 // 0.393867
//         USER_CONST: c[1][8] = 0x00000000 // 0.000000
//         USER_CONST: c[1][9] = 0x00000000 // 0.000000
//         USER_CONST: c[1][10] = 0x00000000 // 0.000000
//         USER_CONST: c[1][11] = 0xbf800000 // -1.000000
//         USER_CONST: c[1][12] = 0x00000000 // 0.000000
//         USER_CONST: c[1][13] = 0x00000000 // 0.000000
//         USER_CONST: c[1][14] = 0xc11feb85 // -9.995000
//         USER_CONST: c[1][15] = 0x41200001 // 10.000001
//         USER_CONST: c[1][16] = 0x3f3ee4d0 // 0.745679
//         USER_CONST: c[1][17] = 0x3eb1efb6 // 0.347532
//         USER_CONST: c[1][18] = 0x3f1188c5 // 0.568493
//         USER_CONST: c[1][19] = 0xbf1e4005 // -0.618164
//         USER_CONST: c[1][20] = 0x3e028e29 // 0.127495
//         USER_CONST: c[1][21] = 0x3f435507 // 0.763016
//         USER_CONST: c[1][22] = 0xbf2238e7 // -0.633681
//         USER_CONST: c[1][23] = 0x434de9e8 // 205.913696
//         USER_CONST: c[1][24] = 0xbf276c23 // -0.653994
//         USER_CONST: c[1][25] = 0x3f0b854b // 0.545003
//         USER_CONST: c[1][26] = 0x3f064fe0 // 0.524656
//         USER_CONST: c[1][27] = 0xc08ea342 // -4.457429
//         USER_CONST: c[2][40] = 0x3cba7547 // 0.022761
//         USER_CONST: c[2][41] = 0x3e79db23 // 0.244000
//         USER_CONST: c[2][42] = 0x3ec6a7f0 // 0.388000
//         USER_CONST: c[3][33] = 0x434de9e8 // 205.913696
//         USER_CONST: c[4][0] = 0xb903126f // -0.000125
//         USER_CONST: c[4][1] = 0xba5a740e // -0.000833
//         USER_CONST: c[4][2] = 0xbd14f209 // -0.036364
//         USER_CONST: c[4][4] = 0x00000000 // 0.000000
//         USER_CONST: c[4][5] = 0x00000000 // 0.000000
//         USER_CONST: c[4][6] = 0x00000000 // 0.000000
//         USER_CONST: c[4][8] = 0x3bf5c28f // 0.007500
//         USER_CONST: c[4][9] = 0x3bf5c28f // 0.007500
//         USER_CONST: c[4][10] = 0x3bf5c28f // 0.007500
//         USER_CONST: c[4][12] = 0x3cb851eb // 0.022500
//         USER_CONST: c[4][13] = 0x3c44da90 // 0.012015
//         USER_CONST: c[4][14] = 0x3bf5c28f // 0.007500
//         USER_CONST: c[4][15] = 0x3f19999a // 0.600000
//         USER_CONST: c[4][16] = 0x3f800000 // 1.000000
//         USER_CONST: c[4][17] = 0x42c80000 // 100.000000
//         USER_CONST: c[4][18] = 0x3f800000 // 1.000000
//         USER_CONST: c[4][19] = 0x3fe39ea9 // 1.778279
//         USER_CONST: c[4][20] = 0x3f9a209b // 1.204120
//         USER_CONST: c[17][5230] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5231] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5232] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5233] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5234] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5235] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5236] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5237] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5248] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5249] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5250] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5251] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5252] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5253] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5254] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5255] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5266] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5267] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5268] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5269] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5270] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5271] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5272] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5273] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5284] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5285] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5286] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5287] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5288] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5289] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5290] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5291] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5302] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5303] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5304] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5305] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5306] = 0x00000000 // 0.000000
//         USER_CONST: c[17][5307] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5308] = 0x00000001 // 0.000000
//         USER_CONST: c[17][5309] = 0x00000001 // 0.000000
//     END_SECTION
//     # Exelwtion Time: 3592.400ms [10.492 percent]
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 45:
//         (0x3 0 4 "POS" 28)
//         (0x4 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x4 0 0 "RTIDX" 25)
//         (0x4 0 0 "VPIDX" 26)
//         (0x4 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 0 "ATTR00" 32)
//         (0x0 0 0 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x4 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         outputRegUsage: 45:
//         (0x0 0 0 "POS" 28)
//         (0x0 0 0 "PID" 24)
//         (0x0 0 0 "CLIPLWLL0" 176)
//         (0x0 0 0 "CLIPLWLL1" 180)
//         (0x0 0 0 "RTIDX" 25)
//         (0x0 0 0 "VPIDX" 26)
//         (0x0 0 0 "SSA" 255)
//         (0x0 0 0 "DEPTH" 65535)
//         (0x0 0 3 "ATTR00" 32)
//         (0x0 0 3 "ATTR01" 36)
//         (0x0 0 0 "ATTR02" 40)
//         (0x0 0 0 "ATTR03" 44)
//         (0x0 0 0 "ATTR04" 48)
//         (0x0 0 0 "ATTR05" 52)
//         (0x0 0 0 "ATTR06" 56)
//         (0x0 0 0 "ATTR07" 60)
//         (0x0 0 0 "ATTR08" 64)
//         (0x0 0 0 "ATTR09" 68)
//         (0x0 0 0 "ATTR10" 72)
//         (0x0 0 0 "ATTR11" 76)
//         (0x0 0 0 "ATTR12" 80)
//         (0x0 0 0 "ATTR13" 84)
//         (0x0 0 0 "ATTR14" 88)
//         (0x0 0 0 "ATTR15" 92)
//         (0x0 0 0 "ATTR16" 96)
//         (0x0 0 0 "ATTR17" 100)
//         (0x0 0 0 "ATTR18" 104)
//         (0x0 0 0 "ATTR19" 108)
//         (0x0 0 0 "ATTR20" 112)
//         (0x0 0 0 "ATTR21" 116)
//         (0x0 0 0 "ATTR22" 120)
//         (0x0 0 0 "ATTR23" 124)
//         (0x0 0 0 "ATTR24" 128)
//         (0x0 0 0 "ATTR25" 132)
//         (0x0 0 0 "ATTR26" 136)
//         (0x0 0 0 "ATTR27" 140)
//         (0x0 0 0 "ATTR28" 144)
//         (0x0 0 0 "ATTR29" 148)
//         (0x0 0 0 "ATTR30" 152)
//         (0x0 0 0 "ATTR31" 156)
//         (0x0 0 0 "VID" 191)
//         (0x0 0 0 "IID" 190)
//         (0x0 0 0 "SID" 65535)
//         (0x0 0 0 "COVERAGE" 65535)
//         (0x0 0 0 "UV" 188)
//         numCtaRegTargets: 0:
//         optFlags: 0x5
//         optLevel: 0
//         oriControl: 0
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 0
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 0
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 0
//         eOutputMode: R0
//         dwOutputMask: 0x77
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap: 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210 0x3210
//         normalizationLwbemap: 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 1
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 1
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 0
//         regAllocationMode: 2
//         ApplyTXLLODWar: 1
//         AddDummyCRead: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 16
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0x0
//                 indexableRanges: 2 :  (null 0 46761944 24) (null 0 1119342 0)
//         samplerProperties:         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (0 0)         (1 1)        
//         numTextures: 9
//         textureProperties:         (1 1 2)         (1 1 2)         (1 1 2)         (1 1 2)         (1 1 2)         (1 1 1)         (1 1 1)         (0 0 1)         (0 0 1)        
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 0
//         InhibitBRXGeneration: 0
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr (s32) r9.xy, (r) v0.xyxx  //   0 SHD
//         movu32 (u32) r9.zw, (u32) constant(0, 0, 0, 0)  //   2 
//         movu32 (u32) r4106, (u32) r9.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r9.xyww, (u32) r4106, #5, #0, 2D, LOAD  //   2 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1307].z  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //  16 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   2 
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   2 
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   2 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1307].w  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   2 
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   2 
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   2 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  // 146998960 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  // 146998960 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  // 162671272 SHDOPT
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  // 162671272 SHDOPT
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  // 162670600 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #0, #16, 2D, LOAD  // 162670600 SHD
//         movr (r) r11.z, (r) r4105.yzxw  // 162670504 SHD
//         movu32 (u32) r11.xy, (u32) v0.xyxx  // 162670504 SHD
//         movu32 (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  // 162669720 SHDOPT
//         movr (r) r4109, (r) c[1][0]  // 162669720 SHDOPT
//         movr (r) r4109.x, (r) constant(0.00072938, 0.00000000, 0.00000000, 0.00000000).x  // 162720408 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162720408 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162668968 SHDOPT
//         movr (r) r4109.w, (r) constant(-0.70020753, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB1
//         dp4r (r) r12.x, (r) r4109, (r) r11  //   0 SHD
//         movr (r) r4109, (r) c[1][1]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162668200 SHD
//         movr (r) r4109.y, (r) constant(-0.00072938, 0.00000000, 0.00000000, 0.00000000).x  // 162668200 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162668200 SHD
//         movr (r) r4109.w, (r) constant(0.39386669, 0.00000000, 0.00000000, 0.00000000).x  // 162668200 SHD
//         dp4r (r) r12.y, (r) r4109, (r) r11  // 162667240 SHD
//         movr (r) r4109, (r) c[1][2]  // 162667240 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162667240 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162667240 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162666200 SHDOPT
//         movr (r) r4109.w, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162666200 SHDOPT
//         dp4r (r) r12.z, (r) r4109, (r) r11  // 162665688 SHD
//         movr (r) r4109, (r) c[1][3]  // 162665688 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162665688 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162665688 SHD
//         movr (r) r4109.z, (r) constant(-9.99499989, 0.00000000, 0.00000000, 0.00000000).x  // 162664760 SHD
//         movr (r) r4109.w, (r) constant(10.00000095, 0.00000000, 0.00000000, 0.00000000).x  // 162664760 SHD
//         dp4r (r) r12.w, (r) r4109, (r) r11  // 162664488 SHDOPT
//         divr (r) r4105.x, (r) r12.x, (r) r12.w  // 162664488 SHDOPT
//         divr (r) r4105.y, (r) r12.y, (r) r12.w  // 162664008 SHD
//         divr (r) r4105.z, (r) r12.z, (r) r12.w  //   0 SHD
//         movr (r) r13.xyz, (r) r4105  //   0 SHD
//         dp3r (r) r10.y, (r) r13.xyzx, (r) r13.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r10.y  // 50462976 SHDOPT
//         rsqr (r) r4106.y, (r) r10.y  //   0 SHD
//         rsqr (r) r4106.z, (r) r10.y  //   0 SHD
//         rsqr (r) r4106.w, (r) r10.y  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.y, (r) r4105.y  //   0 SHD
//         movr (r) r10.y, (r) r4107  //   0 SHD
//         divr (r) r4108.x, (r) r13.x, (r) r10.y  //   0 SHD
//         divr (r) r4108.y, (r) r13.y, (r) r10.y  // 162663560 SHDOPT
//         divr (r) r4108.z, (r) r13.z, (r) r10.y  // 162663560 SHDOPT
//         movr (r) r14.xyz, (r) r4108  // 162663096 SHD
//         minr (r) r15.z, (r) r10.y, (r) constant(100000.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162663096 SHD
//         dp3r (r) r10.z, (r) c[2][11].xyzx, (r) r14.xyzx  // 162662392 SHD
//         set_ltr.c (s32) r10.w, (r) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162662392 SHD
//         divr (r) r4105.z, (r) -c[2][11].w, (r) r10.z  // 162662392 SHD
//         movr (r) r11.z, (r) r4105  //   0 SHD
//         maxr (r) r11.z, (r) r11.z, (r) constant(0.10000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         minr (r) r15.y, (r) r15.z, (r) r11.z  //   0 SHD
//         set_ltr.c (s32) r10.xz, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000), (r) r10.xxzx  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.z  //   0 SHD
//         movr (r) r4105, (r) r15.y  //   0 SHD
//         movr (r) r4105(EQ), (r) r15.z  //   0 SHD
//         movr (r) r16.z, (r) r4105  //   0 SHD
//         movu32 (u32) r16.y, (u32) constant(1036831949, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.w  //   0 SHD
//         movr (r) r4105, (r) r15.yyzy  //   0 SHD
//         movr (r) r4105(EQ), (r) r16.yyzy  //   0 SHD
//         movr (r) r15.yz, (r) r4105  //   0 SHD
//         dp3r (r) r10.z, (r) c[2][12].xyzx, (r) r14.xyzx  // 162661016 
//         set_ltr.c (s32) r10.w, (r) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162661016 
//         divr (r) r4105.z, (r) -c[2][12].w, (r) r10.z  // 162660760 SHD
//         movr (r) r11.z, (r) r4105  // 162660760 SHD
//         maxr (r) r11.z, (r) r15.y, (r) r11.z  // 162660760 SHD
//         minr (r) r15.x, (r) r15.z, (r) r11.z  //   0 SHD
//         set_ltr.c (s32) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r10.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.z  //   0 SHD
//         movr (r) r4105, (r) r15.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r15.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.w  //   0 SHD
//         movr (r) r4105, (r) r15.xxzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r15.yywy  //   0 SHD
//         movr (r) r15.yz, (r) r4105  //   0 SHD
//         dp3r (r) r10.z, (r) c[2][13].xyzx, (r) r14.xyzx  //   0 SHD
//         set_ltr.c (s32) r10.w, (r) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162659640 SHDOPT
//         divr (r) r4105.z, (r) -c[2][13].w, (r) r10.z  // 162659640 SHDOPT
//         movr (r) r11.z, (r) r4105  // 162659368 SHD
//         maxr (r) r11.z, (r) r15.y, (r) r11.z  // 162659368 SHD
//         minr (r) r15.x, (r) r15.z, (r) r11.z  // 162659368 SHD
//         set_ltr.c (s32) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r10.z  // 162659368 SHD
//         movs32.c (s32) hc, (s32) r10.z  // 162659368 SHD
//         movr (r) r4105, (r) r15.x  // 162659368 SHD
//         movr (r) r4105(EQ), (r) r15.z  // 162657992 SHDOPT
//         movr (r) r15.w, (r) r4105  // 162657992 SHDOPT
//         movs32.c (s32) hc, (s32) r10.w  // 162657992 SHDOPT
//         movr (r) r4105, (r) r15.xxzx  // 162657992 SHDOPT
//         movr (r) r4105(EQ), (r) r15.yywy  // 162657992 SHDOPT
//         movr (r) r15.yz, (r) r4105  //   0 SHD
//         dp3r (r) r10.z, (r) c[2][14].xyzx, (r) r14.xyzx  //   0 SHD
//         set_ltr.c (s32) r10.w, (r) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.z, (r) -c[2][14].w, (r) r10.z  //   0 SHD
//         movr (r) r11.z, (r) r4105  //   0 SHD
//         maxr (r) r11.z, (r) r15.y, (r) r11.z  //   0 SHD
//         minr (r) r15.x, (r) r15.z, (r) r11.z  //   0 SHD
//         set_ltr.c (s32) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r10.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.z  //   0 SHD
//         movr (r) r4105, (r) r15.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r15.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  // 162656600 SHD
//         movs32.c (s32) hc, (s32) r10.w  // 162656600 SHD
//         movr (r) r4105, (r) r15.xxzx  // 162655752 SHD
//         movr (r) r4105(EQ), (r) r15.yywy  // 162655752 SHD
//         movr (r) r15.yz, (r) r4105  // 162655752 SHD
//         dp3r (r) r10.z, (r) c[2][15].xyzx, (r) r14.xyzx  // 162655752 SHD
//         set_ltr.c (s32) r10.w, (r) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162655752 SHD
//         divr (r) r4105.z, (r) -c[2][15].w, (r) r10.z  // 162655752 SHD
//         movr (r) r11.z, (r) r4105  // 162654424 SHDOPT
//         maxr (r) r11.z, (r) r15.y, (r) r11.z  // 162654424 SHDOPT
//         minr (r) r15.x, (r) r15.z, (r) r11.z  //   0 SHD
//         set_ltr.c (s32) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r10.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.z  //   0 SHD
//         movr (r) r4105, (r) r15.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r15.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  // 162654008 SHDOPT
//         movs32.c (s32) hc, (s32) r10.w  // 162654008 SHDOPT
//         movr (r) r4105, (r) r15.xxzx  // 162653496 SHD
//         movr (r) r4105(EQ), (r) r15.yywy  // 162653496 SHD
//         movr (r) r15.yz, (r) r4105  // 162653080 SHDOPT
//         dp3r (r) r10.z, (r) c[2][16].xyzx, (r) r14.xyzx  //   0 SHD
//         set_ltr.c (s32) r10.w, (r) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.z, (r) -c[2][16].w, (r) r10.z  //   0 SHD
//         movr (r) r11.z, (r) r4105  //   0 SHD
//         maxr (r) r11.z, (r) r15.y, (r) r11.z  //   0 SHD
//         minr (r) r15.x, (r) r15.z, (r) r11.z  //   0 SHD
//         set_ltr.c (s32) r10.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r10.z  // 162652616 SHD
//         movs32.c (s32) hc, (s32) r10.z  // 162652616 SHD
//         movr (r) r4105, (r) r15.x  // 162652616 SHD
//         movr (r) r4105(EQ), (r) r15.z  // 162652616 SHD
//         movr (r) r15.w, (r) r4105  // 162651704 SHD
//         movs32.c (s32) hc, (s32) r10.w  // 162651704 SHD
//         movr (r) r4105, (r) r15.xxxz  //   0 SHD
//         movr (r) r4105(EQ), (r) r15.yyyw  //   0 SHD
//         movr (r) r10.zw, (r) r4105  //   0 SHD
//         set_ltr.c (s32) r11.z, (r) r10.z, (r) r10.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r11.z  //   0 SHD
//         ife NE.x , l0, l1  // 162651256 SHD
//         movr (u32) r15.xy, (r) v0.xyxx  //   0 SHD
//         andu32 (u32) r15.xy, (u32) r15.xyxx, (u32) constant(3, 3, 0, 0)  //   0 SHD
//         movu32 (u32) r15.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r15.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r15, (u32) r4106, #6, #0, 2D, LOAD  //   0 SHD
//         movr (r) r15.x, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][4].x  // 162650472 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162650472 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162650472 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162650472 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162649864 SHDOPT
//         maxr (r) r11.z, (r) r10.z, (r) r4110  // 162649864 SHDOPT
//         movr (r) r4110, (r) c[4][4].y  // 162649400 SHD
//         movr (r) r4110.x, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162649400 SHD
//         movr (r) r4110.y, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162649400 SHD
//         movr (r) r4110.z, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162649400 SHD
//         movr (r) r4110.w, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 1179653 SHD
//         minr (r) r15.y, (r) r10.w, (r) r4110  // 1179653 SHD
//         movr (r) r4109, (r) c[1][5].xyzx  // 1179653 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  // 1179653 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r15.z, (r) r4109, (r) r14.xyzx  // 162648072 SHD
//         movr (r) r4110, (r) -c[4][4].x  // 162648072 SHD
//         movr (r) r4110.x, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162647720 SHDOPT
//         movr (r) r4110.y, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162647720 SHDOPT
//         movr (r) r4110.z, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162647720 SHDOPT
//         movr (r) r4110.w, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162647720 SHDOPT
//         addr (r) r15.w, (r) r11.z, (r) r4110  // 162646504 SHDOPT
//         maxr (r) r15.w, (r) r15.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162646504 SHDOPT
//         set_neur.c (s32) r16.x, (r) r15.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][4].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111, (r) c[3][8].y  //   0 SHD
//         movr (r) r4111.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162645112 SHD
//         movr (r) r4111.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162645112 SHD
//         madr (r) r16.y, (r) r15.z, (r) r4110, (r) r4111  // 162644888 SHD
//         movr (r) r4110, (r) c[4][0].xxyz  // 162644888 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162644408 SHDOPT
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162644408 SHDOPT
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162643176 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162643176 SHD
//         mulr (r) r16.yzw, (r) r16.y, (r) r4110  //   0 SHD
//         mulr (r) r16.yzw, (r) r16.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.y, (r) r16.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r16.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r16.w  //   0 SHD
//         movr (r) r16.yzw, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r17.xyz, (r) r15.z, (r) r4110  //   0 SHD
//         mulr (r) r17.xyz, (r) r15.w, (r) r17.xyzx  //   0 SHD
//         mulr (r) r17.xyz, (r) r17.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r17.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r17.y  // 403693840 SHD
//         ex2r (r) r4105.z, (r) r17.z  // 403693840 SHD
//         movr (r) r17.xyz, (r) r4105  // 162643064 SHD
//         addr (r) r17.xyz, (r) -r17.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  // 162643064 SHD
//         mulr (r) r16.yzw, (r) r16.yyzw, (r) r17.xxyz  // 162643064 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  // 162643064 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162641512 SHDOPT
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162641512 SHDOPT
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162666120 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162666120 SHD
//         mulr (r) r17.xyz, (r) r15.z, (r) r4110  // 162641192 
//         divr (r) r4105.y, (r) r16.y, (r) r17.x  // 162641192 
//         divr (r) r4105.z, (r) r16.z, (r) r17.y  // 162640696 SHD
//         divr (r) r4105.w, (r) r16.w, (r) r17.z  // 162640696 SHD
//         movr (r) r16.yzw, (r) r4105  // 162639464 SHD
//         movr (r) r4109, (r) c[3][8].y  // 162639464 SHD
//         movr (r) r4109.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162639464 SHD
//         movr (r) r4109.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB0
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB0
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 FPB0
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162638840 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162638840 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162639224 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162639224 SHD
//         mulr (r) r17.xyz, (r) r4109, (r) r4110  // 162639224 SHD
//         mulr (r) r17.xyz, (r) r17.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 162639224 SHD
//         ex2r (r) r4105.x, (r) r17.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r17.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r17.z  //   0 SHD
//         movr (r) r17.xyz, (r) r4105  //   0 SHD
//         mulr (r) r17.xyz, (r) r15.w, (r) r17.xyzx  //   0 FPB0
//         movs32.c (s32) hc, (s32) r16.x  //   0 FPB0
//         movr (r) r4105, (r) r16.yzwy  //   0 FPB0
//         movr (r) r4105(EQ), (r) r17.xyzx  //   0 FPB0
//         movr (r) r16.xyz, (r) r4105  //   0 FPB0
//         madr (r) r15.w, (r) r16.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r16.y  //   0 FPB0
//         movr (r) r4110, (r) c[4][3].xxyz  // 1179653 
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 1179653 
//         movr (r) r4110.y, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 1179653 
//         movr (r) r4110.z, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r16.yzw, (r) r15.w, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r16.xyz, (r) r4109, (r) r16.x, (r) r16.yzwy  //   0 SHD
//         mulr (r) r16.xyz, (r) r16.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  // 1179653 SHD
//         ex2r (r) r4105.x, (r) r16.x  // 1179653 SHD
//         ex2r (r) r4105.y, (r) r16.y  // 2105344 SHD
//         ex2r (r) r4105.z, (r) r16.z  // 2105344 SHD
//         movr (r) r16.xyz, (r) r4105  // 161704400 SHD
//         movu32 (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   4 
//         dp4r (r) r17.x, (r) c[2][4], (r) r14  //   4 
//         dp4r (r) r17.y, (r) c[2][5], (r) r14  // 118784 SHD
//         dp4r (r) r17.z, (r) c[2][6], (r) r14  //   0 SHD
//         dp4r (r) r17.w, (r) c[2][7], (r) r14  //   0 SHD
//         movu32 (u32) r18.x, (u32) c[2][4].w  //   0 SHD
//         movu32 (u32) r18.y, (u32) c[2][5].w  //   0 SHD
//         movu32 (u32) r18.z, (u32) c[2][6].w  //   0 SHD
//         movu32 (u32) r18.w, (u32) c[2][7].w  //   0 SHD
//         addr (r) r17, (r) r17, (r) -r18  //   0 SHD
//         movr (r) r4110, (r) c[4][4].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.w, (r) r11.z, (r) r4110  //   0 SHD
//         lg2r (r) r4105.w, (r) r14.w  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][5].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.w, (r) r14.w, (r) r4110  //   0 SHD
//         flrr (r) r14.w, (r) r14.w  //   0 SHD
//         maxr (r) r14.w, (r) r14.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[4][4].w  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 65666 FPB0
//         movr (r) r4109.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 65666 FPB0
//         movr (r) r4109.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 65666 FPB0
//         lg2r (r) r4105.w, (r) r4109  // 65666 FPB0
//         movr (r) r15.w, (r) r4105  // 65666 FPB0
//         mulr (r) r14.w, (r) r14.w, (r) r15.w  // 65666 FPB0
//         ex2r (r) r4105.w, (r) r14.w  // 65666 FPB0
//         movr (r) r14.w, (r) r4105  // 65666 FPB0
//         movr (r) r4110, (r) c[4][4].x  // 65666 FPB0
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 65666 FPB0
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 65666 FPB0
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 65666 FPB0
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.w, (r) r14.w, (r) r4110  //   1 SHDOPT
//         movr (r) r4110, (r) c[4][4].w  //   1 SHDOPT
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHDOPT
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHDOPT
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHDOPT
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r15.w, (r) r14.w, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) -c[4][3].w  // 1179653 SHDOPT
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 1179653 SHDOPT
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][3].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r16.w, (r) r4109, (r) r4110, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 1179653 SHD
//         mulr (r) r19.x, (r) c[2][9].w, (r) c[2][9].w  // 1179653 SHD
//         movu32 (u32) r20.xyz, (u32) c[2][8].xyzx  //   0 SHD
//         movu32 (u32) r20.w, (u32) constant(1065353216, 0, 0, 0).x  //   2 SHDOPT
//         movr (r) r4109, (r) c[1][4]  //   2 SHDOPT
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r21.x, (r) r4109, (r) r20  //   0 SHD
//         movr (r) r4109, (r) c[1][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r21.y, (r) r4109, (r) r20  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r21.z, (r) r4109, (r) r20  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r19.yzw, (r) r21.y, (r) r4110  //   0 SHD
//         mulr (r) r19.yzw, (r) r19.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.y, (r) r19.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r19.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r19.w  //   0 SHD
//         movr (r) r19.yzw, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHDOPT
//         mulr (r) r20.xyz, (r) r4109, (r) constant(0.07957747, 0.07957747, 0.07957747, 0.00000000)  //   2 SHDOPT
//         movu32 (u32) r22.w, (u32) constant(1065353216, 0, 0, 0).x  //   2 SHDOPT
//         movu32 (u32) r23, (u32) r18  //   0 SHD
//         movu32 (u32) r24, (u32) r17  //   0 SHD
//         movu32 (u32) r25.xyz, (u32) r16.xyzx  //   1 SHDOPT
//         movu32 (u32) r26.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r20.w, (u32) r14.w  //   0 SHD
//         movu32 (u32) r21.w, (u32) r15.w  //   0 SHD
//         rep l2  //   0 SHD
//         set_ger.c (s32) r25.w, (r) r20.w, (r) r15.y  //   0 SHD
//         movs32.c (s32) hc, (s32) r25.w  //   1 SHDOPT
//         brk NE.x  //   1 SHDOPT
//         maxr (r) r25.w, (r) r11.z, (r) r20.w  //  96 SHD
//         minr (r) r26.w, (r) r15.y, (r) r21.w  //  96 SHD
//         addr (r) r27.x, (r) -r25.w, (r) r26.w  //  96 SHD
//         divr (r) r4105.w, (r) r26.w, (r) r25.w  //   0 SHD
//         movr (r) r26.w, (r) r4105  //   0 SHD
//         lg2r (r) r4105.w, (r) r26.w  //   0 SHD
//         movr (r) r26.w, (r) r4105  //   0 SHD
//         mulr (r) r26.w, (r) r15.x, (r) r26.w  //   0 SHD
//         ex2r (r) r4105.w, (r) r26.w  //   0 SHD
//         movr (r) r26.w, (r) r4105  //   0 SHD
//         mulr (r) r25.w, (r) r25.w, (r) r26.w  //   0 SHD
//         movr (r) r4111, (r) c[3][8].y  //   0 SHD
//         movr (r) r4111.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r26.w, (r) r25.w, (r) r15.z, (r) r4111  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 163664744 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r27.yzw, (r) r26.w, (r) r4110  //   0 SHD
//         mulr (r) r27.yzw, (r) r27.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.x, (r) r27.y  //   0 SHD
//         ex2r (r) r4105.y, (r) r27.z  //   0 SHD
//         ex2r (r) r4105.z, (r) r27.w  //   0 SHD
//         movr (r) r28.xyz, (r) r4105  //   0 SHD
//         madr (r) r28.w, (r) r28.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r28.y  // 2691 SHD
//         mulr (r) r27.xy, (r) r27.x, (r) r28.xwxx  // 2691 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  //   0 
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r28.xyz, (r) r27.y, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r28.xyz, (r) r4109, (r) r27.x, (r) r28.xyzx  //   0 SHD
//         mulr (r) r28.xyz, (r) r28.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r28.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r28.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r28.z  //   0 SHD
//         movr (r) r28.xyz, (r) r4105  //   0 SHD
//         mulr (r) r25.xyz, (r) r25.xyzx, (r) r28.xyzx  //   0 SHD
//         mulr (r) r22.xyz, (r) r14.xyzx, (r) r25.w  //   0 SHD
//         madr (r) r28, (r) r25.w, (r) r24, (r) r23  //   0 SHD
//         divr (r) r4105.x, (r) r28.x, (r) r28.w  //   0 SHD
//         divr (r) r4105.y, (r) r28.y, (r) r28.w  //   0 SHD
//         divr (r) r4105.z, (r) r28.z, (r) r28.w  //   0 SHD
//         movr (r) r28.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r28.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #0, 2D, LOD  //   0 SHD
//         movr (r) r29.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r28.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r26.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r26.w, (r) r26.w, (r) r28.z  //   0 SHD
//         andu32 (u32) r26.w, (u32) r26.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         mulr (r) r28.xyz, (r) r26.w, (r) r29.xyzx  //   0 SHD
//         madr (r) r29.xyz, (r) -r25.w, (r) r14.xyzx, (r) c[2][8].xyzx  //   0 SHD
//         dp3r (r) r25.w, (r) r29.xyzx, (r) r29.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r25.w  //   0 SHD
//         movr (r) r26.w, (r) r4105  //   0 SHD
//         mulr (r) r29.xyz, (r) r26.w, (r) r29.xyzx  //   0 SHD
//         dp3r (r) r26.w, (r) r14.xyzx, (r) r29.xyzx  //   0 SHD
//         movr (r) r4109, (r) -c[4][3].w  //   0 SHD
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r26.w, (r) r4109, (r) r26.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r26.w, (r) r26.w, (r) r26.w  //   0 SHD
//         mulr (r) r26.w, (r) r26.w, (r) constant(12.56637096, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         divr (r) r4105.w, (r) r16.w, (r) r26.w  //   1 SHD
//         movr (r) r26.w, (r) r4105  // 524288 SHD
//         divr (r) r4105.z, (r) r25.w, (r) r19.x  // 524288 SHD
//         movr (r) r27.z, (r) r4105  // 524288 SHD
//         madr (r) r27.z, (r) -r27.z, (r) r27.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 524288 SHD
//         maxr (r) r27.z, (r) r27.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 524288 SHD
//         addr (r) r25.w, (r) r25.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 524288 SHD
//         divr (r) r4105.w, (r) constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).w, (r) r25.w  // 524288 SHD
//         movr (r) r25.w, (r) r4105  //   0 SHD
//         mulr (r) r28.xyz, (r) r27.z, (r) r28.xyzx  //   0 SHD
//         mulr (r) r28.xyz, (r) r25.w, (r) r28.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[1][4]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  // 1179653 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  // 512 FPB0
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r29.x, (r) r4109, (r) r22  //   0 SHD
//         movr (r) r4109, (r) c[1][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r29.y, (r) r4109, (r) r22  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r29.z, (r) r4109, (r) r22  //   0 SHD
//         addr (r) r22.xyz, (r) -r21.xyzx, (r) r29.xyzx  //   0 SHD
//         dp3r (r) r22.x, (r) r22.xyzx, (r) r22.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r22.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r22.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r22.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r22.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r22.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r22.y, (r) r22.x  //   0 SHD
//         movr (r) r22.y, (r) r4108  //   0 SHD
//         set_neur.c (s32) r22.z, (r) r22.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r29.xyz, (r) r22.y, (r) r4110  //   0 SHD
//         mulr (r) r29.xyz, (r) r22.x, (r) r29.xyzx  //   0 SHD
//         mulr (r) r29.xyz, (r) r29.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r29.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r29.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r29.z  //   0 SHD
//         movr (r) r29.xyz, (r) r4105  //   0 SHD
//         addr (r) r29.xyz, (r) -r29.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r29.xyz, (r) r19.yzwy, (r) r29.xyzx  //   0 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r30.xyz, (r) r22.y, (r) r4110  //   0 SHD
//         divr (r) r4105.x, (r) r29.x, (r) r30.x  //   0 SHD
//         divr (r) r4105.y, (r) r29.y, (r) r30.y  //   0 SHD
//         divr (r) r4105.z, (r) r29.z, (r) r30.z  //   0 SHD
//         movr (r) r29.xyz, (r) r4105  //   0 SHD
//         mulr (r) r30.xyz, (r) r19.yzwy, (r) r22.x  //   0 SHD
//         movs32.c (s32) hc, (s32) r22.z  //   0 SHD
//         movr (r) r4105, (r) r29.xyzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r30.xyzx  //   0 SHD
//         movr (r) r22.xyz, (r) r4105  //   0 SHD
//         madr (r) r22.y, (r) r22.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r22.y  //   0 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         mulr (r) r29.xyz, (r) r22.y, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r22.xyz, (r) r4109, (r) r22.x, (r) r29.xyzx  //   0 SHD
//         mulr (r) r22.xyz, (r) r22.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r22.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r22.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r22.z  //   0 SHD
//         movr (r) r22.xyz, (r) r4105  //   0 SHD
//         mulr (r) r22.xyz, (r) r22.xyzx, (r) r28.xyzx  //   0 SHD
//         movr (r) r4110, (r) c[4][2].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         mulr (r) r28.xyz, (r) r26.w, (r) r4110  //   0 SHD
//         mulr (r) r27.yzw, (r) r27.y, (r) r28.xxyz  //   0 SHD
//         madr (r) r27.xyz, (r) r20.xyzx, (r) r27.x, (r) r27.yzwy  //   0 SHD
//         mulr (r) r22.xyz, (r) r22.xyzx, (r) r27.xyzx  //   0 SHD
//         madr (r) r26.xyz, (r) r22.xyzx, (r) r25.xyzx, (r) r26.xyzx  //   0 SHD
//         movr (r) r4110, (r) c[4][4].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.x, (r) r21.w, (r) r4110  //   0 SHD
//         movu32 (u32) r20.w, (u32) r21.w  //   0 SHD
//         movu32 (u32) r21.w, (u32) r22.x  //   0 SHD
//         l2:  //   0 SHD
//         mulr (r) r15.xyz, (r) r26.xyzx, (r) c[2][9].xyzx  //   0 SHD
//         set_ltr.c (s32) r10.z, (r) r10.z, (r) r10.y  //   0 SHD
//         set_ger.c (s32) r10.y, (r) r10.w, (r) r10.y  //   0 SHD
//         andu32 (u32) r10.y, (u32) r10.y, (u32) r10.z  //  69 
//         movs32.c (s32) hc, (s32) r10.y  //  69 
//         ife NE.x , l3, l4  //  69 
//         movu32 (u32) r4109, (u32) c[17][1312].x  //   0 FPB0
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 FPB0
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 FPB0
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 FPB0
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1312].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #1, #16, 2D, LOAD  //   0 SHD
//         movr (r) r10.yzw, (r) r4105.wxyz  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(0, 3212836864, 3212836864, 3212836864)  //   0 SHD
//         madr (r) r10.yzw, (r) r10.yyzw, (r) constant(0.00000000, 2.00000000, 2.00000000, 2.00000000), (r) r4105  //   0 SHD
//         dp3r (r) r11.z, (r) r10.yzwy, (r) r10.yzwy  //   0 SHD
//         rsqr (r) r4105.z, (r) r11.z  //   0 SHD
//         movr (r) r11.z, (r) r4105  //   0 SHD
//         mulr (r) r10.yzw, (r) r10.yyzw, (r) r11.z  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1316].z  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1316].w  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #2, #16, 2D, LOAD  //   0 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1321].x  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1321].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 FPB0
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 FPB0
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 FPB0
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #3, #16, 2D, LOAD  //   0 SHD
//         movr (r) r17, (r) r4105  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1325].z  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1325].w  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #4, #16, 2D, LOAD  //   0 SHD
//         movr (r) r11.z, (r) r4105.yzxw  //   0 SHD
//         dp4r (r) r18.x, (r) c[2][4], (r) r12  //   0 SHD
//         dp4r (r) r18.y, (r) c[2][5], (r) r12  //   0 SHD
//         dp4r (r) r18.z, (r) c[2][6], (r) r12  //   0 SHD
//         dp4r (r) r12.x, (r) c[2][7], (r) r12  //   0 SHD
//         divr (r) r4105.x, (r) r18.x, (r) r12.x  //   0 SHD
//         divr (r) r4105.y, (r) r18.y, (r) r12.x  //   0 SHD
//         divr (r) r4105.z, (r) r18.z, (r) r12.x  //   0 SHD
//         movr (r) r12.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #0, 2D, LOD  //   0 SHD
//         movr (r) r18.xyz, (r) r4105  //   0 SHD
//         addr (r) r12.zw, (r) r12.z, (r) constant(0.00000000, 0.00000000, -0.00010000, -0.00100000)  //   0 SHD
//         divr (r) r4105.w, (r) r12.w, (r) c[2][9].w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         mulr (r) r12.w, (r) r12.w, (r) constant(0.75000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r12.w, (r) r12.w, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(0.66291302, 0.66291302, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(0.00000000, 0.87500000, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(-0.57452399, 0.57452399, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r18.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(-0.75000000, 0.00000000, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r20.x, (r) r4105  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r14.w, (r) r12.z  // 209 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  // 209 SHD
//         set_ger.c (s32) r15.w, (r) r15.w, (r) r12.z  // 209 SHD
//         andu32 (u32) r15.w, (u32) r15.w, (u32) constant(1065353216, 0, 0, 0).x  // 209 SHD
//         addr (r) r14.w, (r) r14.w, (r) r15.w  // 209 SHD
//         set_ger.c (s32) r15.w, (r) r18.w, (r) r12.z  // 209 SHD
//         andu32 (u32) r15.w, (u32) r15.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r14.w, (r) r14.w, (r) r15.w  //   0 SHD
//         set_ger.c (s32) r15.w, (r) r20.x, (r) r12.z  //   0 SHD
//         andu32 (u32) r15.w, (u32) r15.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r14.w, (r) r14.w, (r) r15.w  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  // 159 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(-0.48613599, -0.48613599, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r18.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(0.00000000, -0.62500000, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r20.x, (r) r4105  //   0 SHD
//         madr (r) r20.yz, (r) r12.w, (r) constant(0.00000000, 0.39774799, -0.39774799, 0.00000000), (r) r12.xxyx  //   0 SHD
//         txgr (r) r4105, (r) r20.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r20.y, (r) r4105.yxzw  //   0 SHD
//         set_ger.c (s32) r15.w, (r) r15.w, (r) r12.z  //   0 SHD
//         andu32 (u32) r15.w, (u32) r15.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         set_ger.c (s32) r18.w, (r) r18.w, (r) r12.z  //   0 SHD
//         andu32 (u32) r18.w, (u32) r18.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r15.w, (r) r15.w, (r) r18.w  //   0 SHD
//         set_ger.c (s32) r18.w, (r) r20.x, (r) r12.z  //   0 SHD
//         andu32 (u32) r18.w, (u32) r18.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r15.w, (r) r15.w, (r) r18.w  //   0 SHD
//         set_ger.c (s32) r18.w, (r) r20.y, (r) r12.z  //   0 SHD
//         andu32 (u32) r18.w, (u32) r18.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r15.w, (r) r15.w, (r) r18.w  //   0 SHD
//         addr (r) r14.w, (r) r14.w, (r) r15.w  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(0.13519500, 0.41608700, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r18.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(-0.30338100, 0.22041900, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r20.x, (r) r4105  //   0 SHD
//         madr (r) r20.yz, (r) r12.w, (r) constant(0.00000000, -0.25281799, -0.18368299, 0.00000000), (r) r12.xxyx  //   0 SHD
//         txgr (r) r4105, (r) r20.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r20.y, (r) r4105.yxzw  //   0 SHD
//         set_ger.c (s32) r15.w, (r) r15.w, (r) r12.z  //   0 SHD
//         andu32 (u32) r15.w, (u32) r15.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         set_ger.c (s32) r18.w, (r) r18.w, (r) r12.z  //   0 SHD
//         andu32 (u32) r18.w, (u32) r18.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r15.w, (r) r15.w, (r) r18.w  //   0 SHD
//         set_ger.c (s32) r18.w, (r) r20.x, (r) r12.z  //   0 SHD
//         andu32 (u32) r18.w, (u32) r18.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r15.w, (r) r15.w, (r) r18.w  //   0 SHD
//         set_ger.c (s32) r18.w, (r) r20.y, (r) r12.z  //   0 SHD
//         andu32 (u32) r18.w, (u32) r18.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r15.w, (r) r15.w, (r) r18.w  //   0 SHD
//         addr (r) r14.w, (r) r14.w, (r) r15.w  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(0.07725400, -0.23776400, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(0.18750000, 0.00000000, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r18.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r20.xy, (r) r12.w, (r) constant(-0.06250000, 0.10825300, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r20.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r20.x, (r) r4105  //   0 SHD
//         madr (r) r12.xy, (r) r12.w, (r) constant(-0.03125000, -0.05412700, 0.00000000, 0.00000000), (r) r12.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r12.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r12.x, (r) r4105  //   0 SHD
//         set_ger.c (s32) r12.y, (r) r15.w, (r) r12.z  //   0 SHD
//         set_ger.c (s32) r12.w, (r) r18.w, (r) r12.z  //   0 SHD
//         andu32 (u32) r12.yw, (u32) r12.yyyw, (u32) constant(0, 1065353216, 0, 1065353216)  //   0 SHD
//         addr (r) r12.y, (r) r12.w, (r) r12.y  //   0 SHD
//         set_ger.c (s32) r12.w, (r) r20.x, (r) r12.z  //   0 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r12.y, (r) r12.w, (r) r12.y  //   0 SHD
//         set_ger.c (s32) r12.x, (r) r12.x, (r) r12.z  //   0 SHD
//         andu32 (u32) r12.x, (u32) r12.x, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r12.x, (r) r12.x, (r) r12.y  //   0 SHD
//         addr (r) r12.x, (r) r12.x, (r) r14.w  //   0 SHD
//         mulr (r) r12.x, (r) r12.x, (r) constant(0.06250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.yzw, (r) r18.xxyz, (r) c[2][9].xxyz  //   0 SHD
//         mulr (r) r12.xyz, (r) r12.x, (r) r12.yzwy  //   0 SHD
//         movr (r) r4109, (r) -c[2][10].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) -constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r18.xyz, (r) r4109, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         movr (r) r4111, (r) c[2][10].xyzx  //   0 SHD
//         movr (r) r4111.x, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r18.xyz, (r) r11.z, (r) r18.xyzx, (r) r4111  //   0 SHD
//         mulr (r) r12.xyz, (r) r12.xyzx, (r) r18.xyzx  //   0 SHD
//         addr (r) r18.xyz, (r) -r13.xyzx, (r) c[2][8].xyzx  //   0 SHD
//         dp3r (r) r11.z, (r) r18.xyzx, (r) r18.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r11.z  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         mulr (r) r20.xyz, (r) r12.w, (r) r18.xyzx  //   0 SHD
//         divr (r) r4105.w, (r) r11.z, (r) r19.x  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         madr (r) r14.w, (r) -r14.w, (r) r14.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r14.w, (r) r14.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xyz, (r) r12.xyzx, (r) r14.w  //   0 SHD
//         divr (r) r4105.x, (r) r12.x, (r) r11.z  //   0 SHD
//         divr (r) r4105.y, (r) r12.y, (r) r11.z  //   0 SHD
//         divr (r) r4105.z, (r) r12.z, (r) r11.z  //   0 SHD
//         movr (r) r12.xyz, (r) r4105  //   0 SHD
//         movu32 (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         movr (r) r4109, (r) c[1][4]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r22.x, (r) r4109, (r) r13  //   0 SHD
//         movr (r) r4109, (r) c[1][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r22.y, (r) r4109, (r) r13  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r22.z, (r) r4109, (r) r13  //   0 SHD
//         addr (r) r13.xyz, (r) -r21.xyzx, (r) r22.xyzx  //   0 SHD
//         dp3r (r) r11.z, (r) r13.xyzx, (r) r13.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r11.z  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.z  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.z  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.z  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.z, (r) r4105.z  //   0 SHD
//         movr (r) r11.z, (r) r4107  //   0 SHD
//         divr (r) r4108.x, (r) r13.y, (r) r11.z  //   0 SHD
//         movr (r) r13.x, (r) r4108  //   0 SHD
//         set_neur.c (s32) r13.y, (r) r13.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r21.xyz, (r) r13.x, (r) r4110  //   0 SHD
//         mulr (r) r21.xyz, (r) r11.z, (r) r21.xyzx  //   0 SHD
//         mulr (r) r21.xyz, (r) r21.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r21.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r21.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r21.z  //   0 SHD
//         movr (r) r21.xyz, (r) r4105  //   0 SHD
//         addr (r) r21.xyz, (r) -r21.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r21.xyz, (r) r19.yzwy, (r) r21.xyzx  //   0 SHD
//         movr (r) r4110, (r) -c[4][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xzw, (r) r13.x, (r) r4110  //   0 SHD
//         divr (r) r4105.x, (r) r21.x, (r) r13.x  //   0 SHD
//         divr (r) r4105.z, (r) r21.y, (r) r13.z  //   0 SHD
//         divr (r) r4105.w, (r) r21.z, (r) r13.w  //   0 SHD
//         movr (r) r13.xzw, (r) r4105  //   0 SHD
//         mulr (r) r19.xyz, (r) r11.z, (r) r19.yzwy  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.y  //   0 SHD
//         movr (r) r4105, (r) r13.xzwx  //   0 SHD
//         movr (r) r4105(EQ), (r) r19.xyzx  //   0 SHD
//         movr (r) r13.xyz, (r) r4105  //   0 SHD
//         madr (r) r11.z, (r) r13.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r13.y  //   0 SHD
//         movr (r) r4110, (r) c[4][3].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.yzw, (r) r11.z, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r13.xyz, (r) r4109, (r) r13.x, (r) r13.yzwy  //   0 SHD
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r13.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r13.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r13.z  //   0 SHD
//         movr (r) r13.xyz, (r) r4105  //   0 SHD
//         mulr (r) r12.xyz, (r) r12.xyzx, (r) r13.xyzx  //   0 SHD
//         mulr (r) r11.z, (r) r16.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r13.x, (r) r10.yzwy, (r) -r14.xyzx  //   0 SHD
//         dp3r (r) r13.z, (r) r10.yzwy, (r) r20.xyzx  //   0 SHD
//         movr_sat (r) r13.yw, (r) r13.xxxz  //   0 SHD
//         addr (r) r14.w, (r) -r13.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         rsqr (r) r4106.x, (r) r14.w  //   0 SHD
//         rsqr (r) r4106.y, (r) r14.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r14.w  //   0 SHD
//         rsqr (r) r4106.w, (r) r14.w  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 SHD
//         movr (r) r14.w, (r) r4107  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  //   0 SHD
//         madr (r) r15.w, (r) r13.y, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         madr (r) r15.w, (r) r15.w, (r) r13.y, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r15.w, (r) r15.w, (r) r13.y, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.w, (r) r14.w, (r) r15.w  //   0 SHD
//         addr (r) r15.w, (r) -r13.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         rsqr (r) r4106.x, (r) r15.w  //   0 SHD
//         rsqr (r) r4106.y, (r) r15.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r15.w  //   0 SHD
//         rsqr (r) r4106.w, (r) r15.w  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 SHD
//         movr (r) r15.w, (r) r4107  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  //   0 SHD
//         madr (r) r16.w, (r) r13.w, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         madr (r) r16.w, (r) r16.w, (r) r13.w, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r16.w, (r) r16.w, (r) r13.w, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r15.w, (r) r15.w, (r) r16.w  //   0 SHD
//         maxr (r) r16.w, (r) r14.w, (r) r15.w  //   0 SHD
//         minr (r) r14.w, (r) r14.w, (r) r15.w  //   0 SHD
//         madr (r) r19.xyz, (r) -r10.yzwy, (r) r13.y, (r) -r14.xyzx  //   0 SHD
//         dp3r (r) r13.y, (r) r19.xyzx, (r) r19.xyzx  //   0 SHD
//         rsqr (r) r4105.y, (r) r13.y  //   0 SHD
//         movr (r) r13.y, (r) r4105  //   0 SHD
//         mulr (r) r19.xyz, (r) r13.y, (r) r19.xyzx  //   0 SHD
//         madr (r) r20.xyz, (r) -r10.yzwy, (r) r13.w, (r) r20.xyzx  //   0 SHD
//         dp3r (r) r13.y, (r) r20.xyzx, (r) r20.xyzx  //   0 SHD
//         rsqr (r) r4105.y, (r) r13.y  //   0 SHD
//         movr (r) r13.y, (r) r4105  //   0 SHD
//         mulr (r) r20.xyz, (r) r13.y, (r) r20.xyzx  //   0 SHD
//         dp3r (r) r13.y, (r) r19.xyzx, (r) r20.xyzx  //   0 SHD
//         mulr (r) r15.w, (r) r11.z, (r) r11.z  //   0 SHD
//         madr (r) r19.xyz, (r) r11.z, (r) r11.z, (r) constant(0.33000001, 0.09000000, 0.09000000, 0.00000000)  //   0 SHD
//         divr (r) r4105.x, (r) r15.w, (r) r19.x  //   0 SHD
//         divr (r) r4105.y, (r) r15.w, (r) r19.y  //   0 SHD
//         divr (r) r4105.z, (r) r15.w, (r) r19.z  //   0 SHD
//         movr (r) r19.xyz, (r) r4105  //   0 SHD
//         mulr (r) r19.yz, (r) r19.yyzy, (r) constant(0.00000000, 0.44999999, 0.12500000, 0.00000000)  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         madr (r) r11.z, (r) -r19.x, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         set_ger.c (s32) r15.w, (r) r13.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4105, (r) r16.w  //   0 SHD
//         sinr (r) r4106.w, (r) r4105.w  //   0 SHD
//         movr (r) r18.w, (r) r4106  //   0 SHD
//         mulr (r) r19.x, (r) r14.w, (r) constant(0.63661975, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r19.w, (r) r19.x, (r) r19.x  //   0 SHD
//         madr (r) r19.x, (r) -r19.x, (r) r19.w, (r) r18.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r15.w  //   0 SHD
//         movr (r) r4105, (r) r18.w  //   0 SHD
//         movr (r) r4105(EQ), (r) r19.x  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         mulr (r) r15.w, (r) r15.w, (r) r19.y  //   0 SHD
//         mulr (r) r18.w, (r) r16.w, (r) r14.w  //   0 SHD
//         mulr (r) r18.w, (r) r18.w, (r) constant(0.40528473, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.w, (r) r18.w, (r) r18.w  //   0 SHD
//         mulr (r) r18.w, (r) r18.w, (r) r19.z  //   0 SHD
//         mulr (r) r15.w, (r) r13.y, (r) r15.w  //   0 SHD
//         movr (r) r4105, (r) r14.w  //   0 SHD
//         sinr (r) r4106.x, (r) r4105.x  //   0 SHD
//         movr (r) r19.x, (r) r4106  //   0 SHD
//         cosr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r20.x, (r) r4107  //   0 SHD
//         divr (r) r4105.x, (r) r19.x, (r) r20.x  //   0 SHD
//         movr (r) r19.x, (r) r4105  //   0 SHD
//         addr (r) r13.y, (r) -|r13.y|, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.y, (r) r18.w, (r) r13.y  //   0 SHD
//         addr (r) r14.w, (r) r14.w, (r) r16.w  //   0 SHD
//         mulr (r) r14.w, (r) r14.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4105, (r) r14.w  //   0 SHD
//         sinr (r) r4106.x, (r) r4105.x  //   0 SHD
//         movr (r) r20.x, (r) r4106  //   0 SHD
//         cosr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r21.x, (r) r4107  //   0 SHD
//         divr (r) r4105.w, (r) r20.x, (r) r21.x  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         madr (r) r11.z, (r) r15.w, (r) r19.x, (r) r11.z  //   0 SHD
//         madr (r) r11.z, (r) r13.y, (r) r14.w, (r) r11.z  //   0 SHD
//         mulr (r) r11.z, (r) r11.z, (r) constant(0.31830987, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.y, (r) r17.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r18.xyz, (r) r18.xyzx, (r) r12.w, (r) -r14.xyzx  //   0 SHD
//         dp3r (r) r12.w, (r) r18.xyzx, (r) r18.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         mulr (r) r18.xyz, (r) r12.w, (r) r18.xyzx  //   0 SHD
//         maxr (r) r12.w, (r) r13.x, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r13.x, (r) r13.z, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r10.y, (r) r10.yzwy, (r) r18.xyzx  //   0 SHD
//         maxr (r) r10.y, (r) r10.y, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r10.z, (r) -r14.xyzx, (r) r18.xyzx  //   0 SHD
//         mulr (r) r10.w, (r) r13.y, (r) r13.y  //   0 SHD
//         mulr (r) r13.y, (r) r10.y, (r) r10.y  //   0 SHD
//         madr (r) r13.z, (r) r10.y, (r) r10.y, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.x, (r) r10.w, (r) r13.y  //   0 SHD
//         divr (r) r4105.z, (r) r13.z, (r) r14.x  //   0 SHD
//         movr (r) r13.z, (r) r4105  //   0 SHD
//         mulr (r) r13.z, (r) r13.z, (r) constant(1.44269502, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         ex2r (r) r4105.z, (r) r13.z  //   0 SHD
//         movr (r) r13.z, (r) r4105  //   0 SHD
//         mulr (r) r10.w, (r) r10.w, (r) constant(4.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.y, (r) r13.y, (r) r13.y  //   0 SHD
//         mulr (r) r10.w, (r) r10.w, (r) r13.y  //   0 SHD
//         divr (r) r4105.w, (r) r13.z, (r) r10.w  //   0 SHD
//         movr (r) r10.w, (r) r4105  //   0 SHD
//         minr (r) r13.y, (r) r12.w, (r) r13.x  //   0 SHD
//         dp2r (r) r10.y, (r) r10.y, (r) r13.y  //   0 SHD
//         divr (r) r4105.y, (r) r10.y, (r) r10.z  //   0 SHD
//         movr (r) r10.y, (r) r4105  //   0 SHD
//         minr (r) r10.y, (r) r10.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r10.y, (r) r10.y, (r) r10.w  //   0 SHD
//         mulr (r) r10.z, (r) r12.w, (r) r13.x  //   0 SHD
//         divr (r) r4105.y, (r) r10.y, (r) r10.z  //   0 SHD
//         movr (r) r10.y, (r) r4105  //   0 SHD
//         mulr (r) r10.yzw, (r) r10.y, (r) r17.xxyz  //   0 SHD
//         madr (r) r10.yzw, (r) r16.xxyz, (r) r11.z, (r) r10.yyzw  //   0 SHD
//         mulr (r) r10.yzw, (r) r10.yyzw, (r) r12.xxyz  //   0 SHD
//         mulr (r) r10.yzw, (r) r13.w, (r) r10.yyzw  //   0 SHD
//         mulr (r) r10.yzw, (r) r25.xxyz, (r) r10.yyzw  //   0 SHD
//         l3:  //   0 SHD
//         movu32 (u32) r10.yzw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         l4:  //   0 SHD
//         l0:  //   0 SHD
//         movu32 (u32) r10.yzw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r15.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         l1:  //   0 SHD
//         movs32.c (s32) hc, (s32) r10.x  //   0 SHD
//         ife NE.x , l5, l6  //   0 SHD
//         movr (r) r4110, (r) c[0][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xyz, (r) r10.yzwy, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[0][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r13.xyz, (r) r10.yzwy, (r) r4110, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         divr (r) r4105.x, (r) r12.x, (r) r13.x  //   0 SHD
//         divr (r) r4105.y, (r) r12.y, (r) r13.y  //   0 SHD
//         divr (r) r4105.z, (r) r12.z, (r) r13.z  //   0 SHD
//         movr (r) r12.xyz, (r) r4105  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1308].x  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1308].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #0, #16, 2D, LOAD  //   0 SHD
//         movr (r) r13.z, (r) r4105.yzxw  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1312].z  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1312].w  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #1, #16, 2D, LOAD  //   0 SHD
//         movr (r) r14.xyz, (r) r4105  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(3212836864, 3212836864, 3212836864, 0)  //   0 SHD
//         madr (r) r14.xyz, (r) r14.xyzx, (r) constant(2.00000000, 2.00000000, 2.00000000, 0.00000000), (r) r4105  //   0 SHD
//         dp3r (r) r10.x, (r) r14.xyzx, (r) r14.xyzx  //   0 SHD
//         rsqr (r) r4105.x, (r) r10.x  //   0 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         mulr (r) r14.xyz, (r) r10.x, (r) r14.xyzx  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1317].x  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1317].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #2, #16, 2D, LOAD  //   0 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1321].z  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1321].w  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #3, #16, 2D, LOAD  //   0 SHD
//         movr (r) r17, (r) r4105  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1326].x  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1326].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #4, #16, 2D, LOAD  //   0 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         movu32 (u32) r13.xyw, (u32) r11.xyxw  //   0 SHD
//         movr (r) r4109, (r) c[1][0]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00072938, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.70020753, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r11.x, (r) r4109, (r) r13  //   0 SHD
//         movr (r) r4109, (r) c[1][1]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(-0.00072938, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.39386669, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r11.y, (r) r4109, (r) r13  //   0 SHD
//         movr (r) r4109, (r) c[1][2]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r11.z, (r) r4109, (r) r13  //   0 SHD
//         movr (r) r4109, (r) c[1][3]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-9.99499989, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(10.00000095, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r11.w, (r) r4109, (r) r13  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r11.w  //   0 SHD
//         divr (r) r4105.y, (r) r11.y, (r) r11.w  //   0 SHD
//         divr (r) r4105.z, (r) r11.z, (r) r11.w  //   0 SHD
//         movr (r) r18.xyz, (r) r4105  //   0 SHD
//         dp3r (r) r12.w, (r) r18.xyzx, (r) r18.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r12.w  //   0 SHD
//         rsqr (r) r4106.y, (r) r12.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r12.w  //   0 SHD
//         rsqr (r) r4106.w, (r) r12.w  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 SHD
//         movr (r) r12.w, (r) r4107  //   0 SHD
//         divr (r) r4108.x, (r) r18.x, (r) r12.w  //   0 SHD
//         divr (r) r4108.y, (r) r18.y, (r) r12.w  //   0 SHD
//         divr (r) r4108.z, (r) r18.z, (r) r12.w  //   0 SHD
//         movr (r) r19.xyz, (r) r4108  //   0 SHD
//         minr (r) r20.z, (r) r12.w, (r) constant(100000.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r13.z, (r) c[2][11].xyzx, (r) r19.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.w, (r) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[2][11].w, (r) r13.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         maxr (r) r15.w, (r) r15.w, (r) constant(0.10000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         minr (r) r20.y, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r13.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.z  //   0 SHD
//         movr (r) r4105, (r) r20.y  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r21.z, (r) r4105  //   0 SHD
//         movu32 (u32) r21.y, (u32) constant(1036831949, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  //   0 SHD
//         movr (r) r4105, (r) r20.yyzy  //   0 SHD
//         movr (r) r4105(EQ), (r) r21.yyzy  //   0 SHD
//         movr (r) r20.yz, (r) r4105  //   0 SHD
//         dp3r (r) r13.z, (r) c[2][12].xyzx, (r) r19.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.w, (r) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[2][12].w, (r) r13.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  //   0 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r13.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  //   0 SHD
//         movr (r) r4105, (r) r20.xxzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.yywy  //   0 SHD
//         movr (r) r20.yz, (r) r4105  //   0 SHD
//         dp3r (r) r13.z, (r) c[2][13].xyzx, (r) r19.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.w, (r) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[2][13].w, (r) r13.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  //   0 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r13.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  //   0 SHD
//         movr (r) r4105, (r) r20.xxzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.yywy  //   0 SHD
//         movr (r) r20.yz, (r) r4105  //   0 SHD
//         dp3r (r) r13.z, (r) c[2][14].xyzx, (r) r19.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.w, (r) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[2][14].w, (r) r13.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  //   0 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r13.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  //   0 SHD
//         movr (r) r4105, (r) r20.xxzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.yywy  //   0 SHD
//         movr (r) r20.yz, (r) r4105  //   0 SHD
//         dp3r (r) r13.z, (r) c[2][15].xyzx, (r) r19.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.w, (r) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[2][15].w, (r) r13.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  //   0 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r13.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  //   0 SHD
//         movr (r) r4105, (r) r20.xxzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.yywy  //   0 SHD
//         movr (r) r20.yz, (r) r4105  //   0 SHD
//         dp3r (r) r13.z, (r) c[2][16].xyzx, (r) r19.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.w, (r) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[2][16].w, (r) r13.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  //   0 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r13.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  //   0 SHD
//         movr (r) r4105, (r) r20.xzxx  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.ywyy  //   0 SHD
//         movr (r) r20.xy, (r) r4105  //   0 SHD
//         set_ltr.c (s32) r13.z, (r) r20.x, (r) r20.y  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.z  //   0 SHD
//         ife NE.x , l7, l8  //   0 SHD
//         movr (u32) r20.zw, (r) v0.xxxy  //   0 SHD
//         andu32 (u32) r21.xy, (u32) r20.zwzz, (u32) constant(3, 3, 0, 0)  //   0 SHD
//         movu32 (u32) r21.zw, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4106, (u32) r21.w  //   0 SHD
//         txgu32 (r) r4105, (u32) r21, (u32) r4106, #6, #0, 2D, LOAD  //   0 SHD
//         movr (r) r21.x, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][4].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r13.z, (r) r20.x, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[4][4].y  //   0 SHD
//         movr (r) r4110.x, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         minr (r) r14.w, (r) r20.y, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[1][5].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r15.w, (r) r4109, (r) r19.xyzx  //   0 SHD
//         movr (r) r4110, (r) -c[4][4].x  //   0 SHD
//         movr (r) r4110.x, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r20.z, (r) r13.z, (r) r4110  //   0 SHD
//         maxr (r) r20.z, (r) r20.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         set_neur.c (s32) r20.w, (r) r15.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][4].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111, (r) c[3][8].y  //   0 SHD
//         movr (r) r4111.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r21.y, (r) r15.w, (r) r4110, (r) r4111  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r21.yzw, (r) r21.y, (r) r4110  //   0 SHD
//         mulr (r) r21.yzw, (r) r21.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.y, (r) r21.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r21.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r21.w  //   0 SHD
//         movr (r) r21.yzw, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.xyz, (r) r15.w, (r) r4110  //   0 SHD
//         mulr (r) r22.xyz, (r) r20.z, (r) r22.xyzx  //   0 SHD
//         mulr (r) r22.xyz, (r) r22.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r22.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r22.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r22.z  //   0 SHD
//         movr (r) r22.xyz, (r) r4105  //   0 SHD
//         addr (r) r22.xyz, (r) -r22.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r21.yzw, (r) r21.yyzw, (r) r22.xxyz  //   0 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.xyz, (r) r15.w, (r) r4110  //   0 SHD
//         divr (r) r4105.y, (r) r21.y, (r) r22.x  //   0 SHD
//         divr (r) r4105.z, (r) r21.z, (r) r22.y  //   0 SHD
//         divr (r) r4105.w, (r) r21.w, (r) r22.z  //   0 SHD
//         movr (r) r21.yzw, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[3][8].y  //   0 SHD
//         movr (r) r4109.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.xyz, (r) r4109, (r) r4110  //   0 SHD
//         mulr (r) r22.xyz, (r) r22.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r22.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r22.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r22.z  //   0 SHD
//         movr (r) r22.xyz, (r) r4105  //   0 SHD
//         mulr (r) r22.xyz, (r) r20.z, (r) r22.xyzx  //   0 SHD
//         movs32.c (s32) hc, (s32) r20.w  //   0 SHD
//         movr (r) r4105, (r) r21.yyzw  //   0 SHD
//         movr (r) r4105(EQ), (r) r22.xxyz  //   0 SHD
//         movr (r) r21.yzw, (r) r4105  //   0 SHD
//         madr (r) r20.z, (r) r21.w, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r21.z  //   0 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.xyz, (r) r20.z, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xxyz  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r21.yzw, (r) r4109, (r) r21.y, (r) r22.xxyz  //   0 SHD
//         mulr (r) r21.yzw, (r) r21.yyzw, (r) constant(0.00000000, -1.44269502, -1.44269502, -1.44269502)  //   0 SHD
//         ex2r (r) r4105.y, (r) r21.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r21.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r21.w  //   0 SHD
//         movr (r) r21.yzw, (r) r4105  //   0 SHD
//         movu32 (u32) r19.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         dp4r (r) r22.x, (r) c[2][4], (r) r19  //   0 SHD
//         dp4r (r) r22.y, (r) c[2][5], (r) r19  //   0 SHD
//         dp4r (r) r22.z, (r) c[2][6], (r) r19  //   0 SHD
//         dp4r (r) r22.w, (r) c[2][7], (r) r19  //   0 SHD
//         movu32 (u32) r23.x, (u32) c[2][4].w  //   0 SHD
//         movu32 (u32) r23.y, (u32) c[2][5].w  //   0 SHD
//         movu32 (u32) r23.z, (u32) c[2][6].w  //   0 SHD
//         movu32 (u32) r23.w, (u32) c[2][7].w  //   0 SHD
//         addr (r) r22, (r) r22, (r) -r23  //   0 SHD
//         movr (r) r4110, (r) c[4][4].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r19.w, (r) r13.z, (r) r4110  //   0 SHD
//         lg2r (r) r4105.w, (r) r19.w  //   0 SHD
//         movr (r) r19.w, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][5].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r19.w, (r) r19.w, (r) r4110  //   0 SHD
//         flrr (r) r19.w, (r) r19.w  //   0 SHD
//         maxr (r) r19.w, (r) r19.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[4][4].w  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         lg2r (r) r4105.z, (r) r4109  //   0 SHD
//         movr (r) r20.z, (r) r4105  //   0 SHD
//         mulr (r) r19.w, (r) r19.w, (r) r20.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r19.w  //   0 SHD
//         movr (r) r19.w, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][4].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r19.w, (r) r19.w, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[4][4].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r20.z, (r) r19.w, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) -c[4][3].w  //   0 SHD
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][3].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r20.w, (r) r4109, (r) r4110, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r24.x, (r) c[2][9].w, (r) c[2][9].w  //   0 SHD
//         movu32 (u32) r25.xyz, (u32) c[2][8].xyzx  //   0 SHD
//         movu32 (u32) r25.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         movr (r) r4109, (r) c[1][4]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r26.x, (r) r4109, (r) r25  //   0 SHD
//         movr (r) r4109, (r) c[1][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r26.y, (r) r4109, (r) r25  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r26.z, (r) r4109, (r) r25  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r24.yzw, (r) r26.y, (r) r4110  //   0 SHD
//         mulr (r) r24.yzw, (r) r24.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.y, (r) r24.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r24.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r24.w  //   0 SHD
//         movr (r) r24.yzw, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r25.xyz, (r) r4109, (r) constant(0.07957747, 0.07957747, 0.07957747, 0.00000000)  //   0 SHD
//         movu32 (u32) r27.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r28, (u32) r23  //   0 SHD
//         movu32 (u32) r29, (u32) r22  //   0 SHD
//         movu32 (u32) r30.xyz, (u32) r21.yzwy  //   0 SHD
//         movu32 (u32) r31.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r25.w, (u32) r19.w  //   0 SHD
//         movu32 (u32) r26.w, (u32) r20.z  //   0 SHD
//         rep l9  //   0 SHD
//         set_ger.c (s32) r30.w, (r) r25.w, (r) r14.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r30.w  //   0 SHD
//         brk NE.x  //   0 SHD
//         maxr (r) r30.w, (r) r13.z, (r) r25.w  //   0 SHD
//         minr (r) r31.w, (r) r14.w, (r) r26.w  //   0 SHD
//         addr (r) r32.x, (r) -r30.w, (r) r31.w  //   0 SHD
//         divr (r) r4105.w, (r) r31.w, (r) r30.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         lg2r (r) r4105.w, (r) r31.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         mulr (r) r31.w, (r) r21.x, (r) r31.w  //   0 SHD
//         ex2r (r) r4105.w, (r) r31.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         mulr (r) r30.w, (r) r30.w, (r) r31.w  //   0 SHD
//         movr (r) r4111, (r) c[3][8].y  //   0 SHD
//         movr (r) r4111.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r31.w, (r) r30.w, (r) r15.w, (r) r4111  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r32.yzw, (r) r31.w, (r) r4110  //   0 SHD
//         mulr (r) r32.yzw, (r) r32.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.x, (r) r32.y  //   0 SHD
//         ex2r (r) r4105.y, (r) r32.z  //   0 SHD
//         ex2r (r) r4105.z, (r) r32.w  //   0 SHD
//         movr (r) r33.xyz, (r) r4105  //   0 SHD
//         madr (r) r33.w, (r) r33.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r33.y  //   0 SHD
//         mulr (r) r32.xy, (r) r32.x, (r) r33.xwxx  //   0 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r33.xyz, (r) r32.y, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r33.xyz, (r) r4109, (r) r32.x, (r) r33.xyzx  //   0 SHD
//         mulr (r) r33.xyz, (r) r33.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r33.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r33.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r33.z  //   0 SHD
//         movr (r) r33.xyz, (r) r4105  //   0 SHD
//         mulr (r) r30.xyz, (r) r30.xyzx, (r) r33.xyzx  //   0 SHD
//         mulr (r) r27.xyz, (r) r19.xyzx, (r) r30.w  //   0 SHD
//         madr (r) r33, (r) r30.w, (r) r29, (r) r28  //   0 SHD
//         divr (r) r4105.x, (r) r33.x, (r) r33.w  //   0 SHD
//         divr (r) r4105.y, (r) r33.y, (r) r33.w  //   0 SHD
//         divr (r) r4105.z, (r) r33.z, (r) r33.w  //   0 SHD
//         movr (r) r33.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r33.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #0, 2D, LOD  //   0 SHD
//         movr (r) r34.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r33.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r31.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r31.w, (r) r31.w, (r) r33.z  //   0 SHD
//         andu32 (u32) r31.w, (u32) r31.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         mulr (r) r33.xyz, (r) r31.w, (r) r34.xyzx  //   0 SHD
//         madr (r) r34.xyz, (r) -r30.w, (r) r19.xyzx, (r) c[2][8].xyzx  //   0 SHD
//         dp3r (r) r30.w, (r) r34.xyzx, (r) r34.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r30.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         mulr (r) r34.xyz, (r) r31.w, (r) r34.xyzx  //   0 SHD
//         dp3r (r) r31.w, (r) r19.xyzx, (r) r34.xyzx  //   0 SHD
//         movr (r) r4109, (r) -c[4][3].w  //   0 SHD
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r31.w, (r) r4109, (r) r31.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r31.w, (r) r31.w, (r) r31.w  //   0 SHD
//         mulr (r) r31.w, (r) r31.w, (r) constant(12.56637096, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) r20.w, (r) r31.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         divr (r) r4105.z, (r) r30.w, (r) r24.x  //   0 SHD
//         movr (r) r32.z, (r) r4105  //   0 SHD
//         madr (r) r32.z, (r) -r32.z, (r) r32.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r32.z, (r) r32.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r30.w, (r) r30.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).w, (r) r30.w  //   0 SHD
//         movr (r) r30.w, (r) r4105  //   0 SHD
//         mulr (r) r33.xyz, (r) r32.z, (r) r33.xyzx  //   0 SHD
//         mulr (r) r33.xyz, (r) r30.w, (r) r33.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[1][4]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r34.x, (r) r4109, (r) r27  //   0 SHD
//         movr (r) r4109, (r) c[1][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r34.y, (r) r4109, (r) r27  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r34.z, (r) r4109, (r) r27  //   0 SHD
//         addr (r) r27.xyz, (r) -r26.xyzx, (r) r34.xyzx  //   0 SHD
//         dp3r (r) r27.x, (r) r27.xyzx, (r) r27.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r27.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r27.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r27.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r27.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r27.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r27.y, (r) r27.x  //   0 SHD
//         movr (r) r27.y, (r) r4108  //   0 SHD
//         set_neur.c (s32) r27.z, (r) r27.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r34.xyz, (r) r27.y, (r) r4110  //   0 SHD
//         mulr (r) r34.xyz, (r) r27.x, (r) r34.xyzx  //   0 SHD
//         mulr (r) r34.xyz, (r) r34.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r34.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r34.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r34.z  //   0 SHD
//         movr (r) r34.xyz, (r) r4105  //   0 SHD
//         addr (r) r34.xyz, (r) -r34.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r34.xyz, (r) r24.yzwy, (r) r34.xyzx  //   0 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r35.xyz, (r) r27.y, (r) r4110  //   0 SHD
//         divr (r) r4105.x, (r) r34.x, (r) r35.x  //   0 SHD
//         divr (r) r4105.y, (r) r34.y, (r) r35.y  //   0 SHD
//         divr (r) r4105.z, (r) r34.z, (r) r35.z  //   0 SHD
//         movr (r) r34.xyz, (r) r4105  //   0 SHD
//         mulr (r) r35.xyz, (r) r24.yzwy, (r) r27.x  //   0 SHD
//         movs32.c (s32) hc, (s32) r27.z  //   0 SHD
//         movr (r) r4105, (r) r34.xyzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r35.xyzx  //   0 SHD
//         movr (r) r27.xyz, (r) r4105  //   0 SHD
//         madr (r) r27.y, (r) r27.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r27.y  //   0 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r34.xyz, (r) r27.y, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r27.xyz, (r) r4109, (r) r27.x, (r) r34.xyzx  //   0 SHD
//         mulr (r) r27.xyz, (r) r27.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r27.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r27.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r27.z  //   0 SHD
//         movr (r) r27.xyz, (r) r4105  //   0 SHD
//         mulr (r) r27.xyz, (r) r27.xyzx, (r) r33.xyzx  //   0 SHD
//         movr (r) r4110, (r) c[4][2].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r33.xyz, (r) r31.w, (r) r4110  //   0 SHD
//         mulr (r) r32.yzw, (r) r32.y, (r) r33.xxyz  //   0 SHD
//         madr (r) r32.xyz, (r) r25.xyzx, (r) r32.x, (r) r32.yzwy  //   0 SHD
//         mulr (r) r27.xyz, (r) r27.xyzx, (r) r32.xyzx  //   0 SHD
//         madr (r) r31.xyz, (r) r27.xyzx, (r) r30.xyzx, (r) r31.xyzx  //   0 SHD
//         movr (r) r4110, (r) c[4][4].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r27.x, (r) r26.w, (r) r4110  //   0 SHD
//         movu32 (u32) r25.w, (u32) r26.w  //   0 SHD
//         movu32 (u32) r26.w, (u32) r27.x  //   0 SHD
//         l9:  //   0 SHD
//         madr (r) r15.xyz, (r) r31.xyzx, (r) c[2][9].xyzx, (r) r15.xyzx  //   0 SHD
//         set_ltr.c (s32) r13.z, (r) r20.x, (r) r12.w  //   0 SHD
//         set_ger.c (s32) r12.w, (r) r20.y, (r) r12.w  //   0 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) r13.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.w  //   0 SHD
//         ife NE.x , l10, l11  //   0 SHD
//         dp4r (r) r20.x, (r) c[2][4], (r) r11  //   0 SHD
//         dp4r (r) r20.y, (r) c[2][5], (r) r11  //   0 SHD
//         dp4r (r) r20.z, (r) c[2][6], (r) r11  //   0 SHD
//         dp4r (r) r11.x, (r) c[2][7], (r) r11  //   0 SHD
//         divr (r) r4105.x, (r) r20.x, (r) r11.x  //   0 SHD
//         divr (r) r4105.y, (r) r20.y, (r) r11.x  //   0 SHD
//         divr (r) r4105.z, (r) r20.z, (r) r11.x  //   0 SHD
//         movr (r) r11.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r11.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #0, 2D, LOD  //   0 SHD
//         movr (r) r20.xyz, (r) r4105  //   0 SHD
//         addr (r) r11.zw, (r) r11.z, (r) constant(0.00000000, 0.00000000, -0.00010000, -0.00100000)  //   0 SHD
//         divr (r) r4105.w, (r) r11.w, (r) c[2][9].w  //   0 SHD
//         movr (r) r11.w, (r) r4105  //   0 SHD
//         mulr (r) r11.w, (r) r11.w, (r) constant(0.75000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r11.w, (r) r11.w, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.66291302, 0.66291302, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r12.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.00000000, 0.87500000, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r13.z, (r) r4105.yzxw  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.57452399, 0.57452399, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.75000000, 0.00000000, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r12.w, (r) r12.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         set_ger.c (s32) r13.z, (r) r13.z, (r) r11.z  //   0 SHD
//         andu32 (u32) r13.z, (u32) r13.z, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r12.w, (r) r12.w, (r) r13.z  //   0 SHD
//         set_ger.c (s32) r13.z, (r) r14.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r13.z, (u32) r13.z, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r12.w, (r) r12.w, (r) r13.z  //   0 SHD
//         set_ger.c (s32) r13.z, (r) r15.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r13.z, (u32) r13.z, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r12.w, (r) r12.w, (r) r13.z  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r13.z, (r) r4105.yzxw  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.48613599, -0.48613599, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.00000000, -0.62500000, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.39774799, -0.39774799, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r19.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r13.z, (r) r13.z, (r) r11.z  //   0 SHD
//         andu32 (u32) r13.z, (u32) r13.z, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r14.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.z, (r) r13.z, (r) r14.w  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r15.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.z, (r) r13.z, (r) r14.w  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r19.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.z, (r) r13.z, (r) r14.w  //   0 SHD
//         addr (r) r12.w, (r) r12.w, (r) r13.z  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r13.z, (r) r4105.yzxw  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.13519500, 0.41608700, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.30338100, 0.22041900, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.25281799, -0.18368299, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r19.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r13.z, (r) r13.z, (r) r11.z  //   0 SHD
//         andu32 (u32) r13.z, (u32) r13.z, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r14.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.z, (r) r13.z, (r) r14.w  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r15.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.z, (r) r13.z, (r) r14.w  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r19.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.z, (r) r13.z, (r) r14.w  //   0 SHD
//         addr (r) r12.w, (r) r12.w, (r) r13.z  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.07725400, -0.23776400, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r13.z, (r) r4105.yzxw  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.18750000, 0.00000000, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.06250000, 0.10825300, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r11.xy, (r) r11.w, (r) constant(-0.03125000, -0.05412700, 0.00000000, 0.00000000), (r) r11.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r11.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r11.x, (r) r4105  //   0 SHD
//         set_ger.c (s32) r11.y, (r) r13.z, (r) r11.z  //   0 SHD
//         set_ger.c (s32) r11.w, (r) r14.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r11.yw, (u32) r11.yyyw, (u32) constant(0, 1065353216, 0, 1065353216)  //   0 SHD
//         addr (r) r11.y, (r) r11.w, (r) r11.y  //   0 SHD
//         set_ger.c (s32) r11.w, (r) r15.w, (r) r11.z  //   0 SHD
//         andu32 (u32) r11.w, (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r11.y, (r) r11.w, (r) r11.y  //   0 SHD
//         set_ger.c (s32) r11.x, (r) r11.x, (r) r11.z  //   0 SHD
//         andu32 (u32) r11.x, (u32) r11.x, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r11.x, (r) r11.x, (r) r11.y  //   0 SHD
//         addr (r) r11.x, (r) r11.x, (r) r12.w  //   0 SHD
//         mulr (r) r11.x, (r) r11.x, (r) constant(0.06250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.yzw, (r) r20.xxyz, (r) c[2][9].xxyz  //   0 SHD
//         mulr (r) r11.xyz, (r) r11.x, (r) r11.yzwy  //   0 SHD
//         movr (r) r4109, (r) -c[2][10].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) -constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r20.xyz, (r) r4109, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         movr (r) r4111, (r) c[2][10].xyzx  //   0 SHD
//         movr (r) r4111.x, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r20.xyz, (r) r10.x, (r) r20.xyzx, (r) r4111  //   0 SHD
//         mulr (r) r11.xyz, (r) r11.xyzx, (r) r20.xyzx  //   0 SHD
//         addr (r) r20.xyz, (r) -r18.xyzx, (r) c[2][8].xyzx  //   0 SHD
//         dp3r (r) r10.x, (r) r20.xyzx, (r) r20.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r10.x  //   0 SHD
//         movr (r) r11.w, (r) r4105  //   0 SHD
//         mulr (r) r21.xyz, (r) r11.w, (r) r20.xyzx  //   0 SHD
//         divr (r) r4105.w, (r) r10.x, (r) r24.x  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         madr (r) r12.w, (r) -r12.w, (r) r12.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r12.w, (r) r12.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r11.xyz, (r) r11.xyzx, (r) r12.w  //   0 SHD
//         divr (r) r4105.x, (r) r11.x, (r) r10.x  //   0 SHD
//         divr (r) r4105.y, (r) r11.y, (r) r10.x  //   0 SHD
//         divr (r) r4105.z, (r) r11.z, (r) r10.x  //   0 SHD
//         movr (r) r11.xyz, (r) r4105  //   0 SHD
//         movu32 (u32) r18.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         movr (r) r4109, (r) c[1][4]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r22.x, (r) r4109, (r) r18  //   0 SHD
//         movr (r) r4109, (r) c[1][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r22.y, (r) r4109, (r) r18  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  // 162449712 SHD
//         dp4r (r) r22.z, (r) r4109, (r) r18  // 162449712 SHD
//         addr (r) r18.xyz, (r) -r26.xyzx, (r) r22.xyzx  // 162449712 SHD
//         dp3r (r) r10.x, (r) r18.xyzx, (r) r18.xyzx  //   2 
//         rsqr (r) r4106.x, (r) r10.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r10.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r10.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r10.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   2 
//         movr (r) r10.x, (r) r4107  //   0 
//         divr (r) r4108.w, (r) r18.y, (r) r10.x  //   0 
//         movr (r) r12.w, (r) r4108  // 162442104 SHD
//         set_neur.c (s32) r13.z, (r) r12.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  14 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //  14 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162443960 SHD
//         mulr (r) r18.xyz, (r) r12.w, (r) r4110  //   8 SHD
//         mulr (r) r18.xyz, (r) r10.x, (r) r18.xyzx  //   8 SHD
//         mulr (r) r18.xyz, (r) r18.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   2 
//         ex2r (r) r4105.x, (r) r18.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r18.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r18.z  // 162445816 SHD
//         movr (r) r18.xyz, (r) r4105  //   8 SHD
//         addr (r) r18.xyz, (r) -r18.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r18.xyz, (r) r18.xyzx, (r) r24.yzwy  //   1 FPB0
//         movr (r) r4110, (r) -c[4][0].xyzx  // 262144 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 262144 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //  14 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.xyz, (r) r12.w, (r) r4110  //   1 FPB0
//         divr (r) r4105.x, (r) r18.x, (r) r22.x  // 262144 SHD
//         divr (r) r4105.y, (r) r18.y, (r) r22.y  // 262144 SHD
//         divr (r) r4105.z, (r) r18.z, (r) r22.z  //   0 SHD
//         movr (r) r18.xyz, (r) r4105  //   0 SHD
//         mulr (r) r22.xyz, (r) r10.x, (r) r24.yzwy  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.z  //   2 
//         movr (r) r4105, (r) r18.xyzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r22.xyzx  //   0 SHD
//         movr (r) r18.xyz, (r) r4105  //   0 SHD
//         madr (r) r10.x, (r) r18.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r18.y  //   1 SHD
//         movr (r) r4110, (r) c[4][3].xxyz  //   1 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.yzw, (r) r10.x, (r) r4110  //   1 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   1 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r18.xyz, (r) r4109, (r) r18.x, (r) r18.yzwy  //   1 SHD
//         mulr (r) r18.xyz, (r) r18.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   1 SHD
//         ex2r (r) r4105.x, (r) r18.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r18.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r18.z  //   0 SHD
//         movr (r) r18.xyz, (r) r4105  //   0 SHD
//         mulr (r) r11.xyz, (r) r11.xyzx, (r) r18.xyzx  //   1 SHD
//         mulr (r) r10.x, (r) r16.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         dp3r (r) r12.w, (r) r14.xyzx, (r) -r19.xyzx  //   0 SHD
//         movr_sat (r) r13.z, (r) r12.w  //   0 SHD
//         dp3r (r) r14.w, (r) r14.xyzx, (r) r21.xyzx  //   0 SHD
//         movr_sat (r) r15.w, (r) r14.w  //   0 SHD
//         addr (r) r16.w, (r) -r13.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         rsqr (r) r4106.x, (r) r16.w  //   1 SHD
//         rsqr (r) r4106.y, (r) r16.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r16.w  //   0 SHD
//         rsqr (r) r4106.w, (r) r16.w  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   1 SHD
//         movr (r) r16.w, (r) r4107  //   1 SHD
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  //   0 SHD
//         madr (r) r18.x, (r) r13.z, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         madr (r) r18.x, (r) r18.x, (r) r13.z, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r18.x, (r) r18.x, (r) r13.z, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r16.w, (r) r16.w, (r) r18.x  //   1 SHD
//         addr (r) r18.x, (r) -r15.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         rsqr (r) r4106.x, (r) r18.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r18.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r18.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r18.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   1 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r18.x, (r) r4107  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  //   0 SHD
//         madr (r) r18.y, (r) r15.w, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         madr (r) r18.y, (r) r18.y, (r) r15.w, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r18.y, (r) r18.y, (r) r15.w, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.x, (r) r18.x, (r) r18.y  //   0 SHD
//         maxr (r) r18.y, (r) r16.w, (r) r18.x  //   0 SHD
//         minr (r) r16.w, (r) r16.w, (r) r18.x  //   0 SHD
//         madr (r) r18.xzw, (r) -r14.xxyz, (r) r13.z, (r) -r19.xxyz  //   0 SHD
//         dp3r (r) r13.z, (r) r18.xzwx, (r) r18.xzwx  //   0 SHD
//         rsqr (r) r4105.z, (r) r13.z  //   0 SHD
//         movr (r) r13.z, (r) r4105  //   0 SHD
//         mulr (r) r18.xzw, (r) r13.z, (r) r18.xxzw  //   0 SHD
//         madr (r) r21.xyz, (r) -r14.xyzx, (r) r15.w, (r) r21.xyzx  //   0 SHD
//         dp3r (r) r13.z, (r) r21.xyzx, (r) r21.xyzx  //   1 SHD
//         rsqr (r) r4105.z, (r) r13.z  //   1 SHD
//         movr (r) r13.z, (r) r4105  //   0 SHD
//         mulr (r) r21.xyz, (r) r13.z, (r) r21.xyzx  //   0 SHD
//         dp3r (r) r13.z, (r) r18.xzwx, (r) r21.xyzx  //   0 SHD
//         mulr (r) r18.x, (r) r10.x, (r) r10.x  //   0 SHD
//         madr (r) r21.xyz, (r) r10.x, (r) r10.x, (r) constant(0.33000001, 0.09000000, 0.09000000, 0.00000000)  //   0 SHD
//         divr (r) r4105.x, (r) r18.x, (r) r21.x  //   0 SHD
//         divr (r) r4105.z, (r) r18.x, (r) r21.y  //   0 SHD
//         divr (r) r4105.w, (r) r18.x, (r) r21.z  //   0 SHD
//         movr (r) r18.xzw, (r) r4105  //   0 SHD
//         mulr (r) r18.zw, (r) r18.zzzw, (r) constant(0.00000000, 0.00000000, 0.44999999, 0.12500000)  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         madr (r) r10.x, (r) -r18.x, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         set_ger.c (s32) r18.x, (r) r13.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4105, (r) r18.y  //   0 SHD
//         sinr (r) r4106.w, (r) r4105.w  //   1 SHD
//         movr (r) r19.w, (r) r4106  //   1 SHD
//         mulr (r) r20.w, (r) r16.w, (r) constant(0.63661975, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r21.x, (r) r20.w, (r) r20.w  //   0 SHD
//         madr (r) r20.w, (r) -r20.w, (r) r21.x, (r) r19.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r18.x  //   0 SHD
//         movr (r) r4105, (r) r19.w  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.w  //   0 SHD
//         movr (r) r18.x, (r) r4105  //   0 SHD
//         mulr (r) r18.x, (r) r18.x, (r) r18.z  //   0 SHD
//         mulr (r) r18.z, (r) r18.y, (r) r16.w  //   0 SHD
//         mulr (r) r18.z, (r) r18.z, (r) constant(0.40528473, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.z, (r) r18.z, (r) r18.z  //   0 SHD
//         mulr (r) r18.z, (r) r18.z, (r) r18.w  //   0 SHD
//         mulr (r) r18.x, (r) r13.z, (r) r18.x  //   0 SHD
//         movr (r) r4105, (r) r16.w  //   0 SHD
//         sinr (r) r4106.x, (r) r4105.x  //   1 SHD
//         movr (r) r21.x, (r) r4106  //   1 SHD
//         cosr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r22.x, (r) r4107  //   0 SHD
//         divr (r) r4105.w, (r) r21.x, (r) r22.x  //   0 SHD
//         movr (r) r18.w, (r) r4105  //   0 SHD
//         addr (r) r13.z, (r) -|r13.z|, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         mulr (r) r13.z, (r) r18.z, (r) r13.z  //   1 SHD
//         addr (r) r16.w, (r) r16.w, (r) r18.y  //   0 SHD
//         mulr (r) r16.w, (r) r16.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4105, (r) r16.w  //   0 SHD
//         sinr (r) r4106.x, (r) r4105.x  //   0 SHD
//         movr (r) r21.x, (r) r4106  //   0 SHD
//         cosr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r22.x, (r) r4107  //   0 SHD
//         divr (r) r4105.w, (r) r21.x, (r) r22.x  //   0 SHD
//         movr (r) r16.w, (r) r4105  //   0 SHD
//         madr (r) r10.x, (r) r18.x, (r) r18.w, (r) r10.x  //   0 SHD
//         madr (r) r10.x, (r) r13.z, (r) r16.w, (r) r10.x  //   0 SHD
//         mulr (r) r10.x, (r) r10.x, (r) constant(0.31830987, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.z, (r) r17.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r18.xyz, (r) r20.xyzx, (r) r11.w, (r) -r19.xyzx  //   0 SHD
//         dp3r (r) r11.w, (r) r18.xyzx, (r) r18.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r11.w  // 50462976 SHD
//         movr (r) r11.w, (r) r4105  // 50462976 SHD
//         mulr (r) r18.xyz, (r) r11.w, (r) r18.xyzx  //   0 SHD
//         maxr (r) r11.w, (r) r12.w, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r12.w, (r) r14.w, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r14.x, (r) r14.xyzx, (r) r18.xyzx  //   0 SHD
//         maxr (r) r14.x, (r) r14.x, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r14.y, (r) -r19.xyzx, (r) r18.xyzx  //   0 SHD
//         mulr (r) r13.z, (r) r13.z, (r) r13.z  //   0 SHD
//         mulr (r) r14.z, (r) r14.x, (r) r14.x  //   0 SHD
//         madr (r) r14.w, (r) r14.x, (r) r14.x, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r16.w, (r) r13.z, (r) r14.z  //   0 SHD
//         divr (r) r4105.w, (r) r14.w, (r) r16.w  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         mulr (r) r14.w, (r) r14.w, (r) constant(1.44269502, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         ex2r (r) r4105.w, (r) r14.w  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         mulr (r) r13.z, (r) r13.z, (r) constant(4.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.z, (r) r14.z, (r) r14.z  //   0 SHD
//         mulr (r) r13.z, (r) r13.z, (r) r14.z  //   0 SHD
//         divr (r) r4105.z, (r) r14.w, (r) r13.z  // 50462976 SHD
//         movr (r) r13.z, (r) r4105  //   0 SHD
//         minr (r) r14.z, (r) r11.w, (r) r12.w  //   0 SHD
//         dp2r (r) r14.x, (r) r14.x, (r) r14.z  //   0 SHD
//         divr (r) r4105.x, (r) r14.x, (r) r14.y  //   1 SHDOPT
//         movr (r) r14.x, (r) r4105  //   0 SHD
//         minr (r) r14.x, (r) r14.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.z, (r) r13.z, (r) r14.x  //   0 SHD
//         mulr (r) r11.w, (r) r11.w, (r) r12.w  //   0 SHD
//         divr (r) r4105.w, (r) r13.z, (r) r11.w  //   0 SHD
//         movr (r) r11.w, (r) r4105  //   0 SHD
//         mulr (r) r14.xyz, (r) r11.w, (r) r17.xyzx  //   0 SHD
//         madr (r) r14.xyz, (r) r16.xyzx, (r) r10.x, (r) r14.xyzx  //   0 SHD
//         mulr (r) r11.xyz, (r) r11.xyzx, (r) r14.xyzx  //   0 SHD
//         mulr (r) r11.xyz, (r) r15.w, (r) r11.xyzx  //   0 SHD
//         mulr (r) r11.xyz, (r) r30.xyzx, (r) r11.xyzx  //   0 SHD
//         l10:  //   0 SHD
//         movu32 (u32) r11.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         l11:  //   0 SHD
//         l7:  //   0 SHD
//         movu32 (u32) r11.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         l8:  //   0 SHD
//         movr (r) r4110, (r) c[0][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.xyz, (r) r11.xyzx, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[0][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 SHD
//         movr (r) r4110.y, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r11.xyz, (r) r11.xyzx, (r) r4110, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         divr (r) r4105.x, (r) r14.x, (r) r11.x  //   0 SHD
//         divr (r) r4105.y, (r) r14.y, (r) r11.y  //   0 SHD
//         divr (r) r4105.z, (r) r14.z, (r) r11.z  //   0 SHD
//         movr (r) r11.xyz, (r) r4105  //   0 SHD
//         addr (r) r11.xyz, (r) r11.xyzx, (r) r12.xyzx  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1308].z  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1308].w  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  // 50462976 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #0, #16, 2D, LOAD  //   0 SHD
//         movr (r) r12.z, (r) r4105.yzxw  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1313].x  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   1 SHDOPT
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1313].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  // 50462976 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  // 50462976 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #1, #16, 2D, LOAD  //   0 SHD
//         movr (r) r14.xyz, (r) r4105  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(3212836864, 3212836864, 3212836864, 0)  //   0 SHD
//         madr (r) r14.xyz, (r) r14.xyzx, (r) constant(2.00000000, 2.00000000, 2.00000000, 0.00000000), (r) r4105  //   0 SHD
//         dp3r (r) r10.x, (r) r14.xyzx, (r) r14.xyzx  //   0 SHD
//         rsqr (r) r4105.x, (r) r10.x  // 50462976 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         mulr (r) r14.xyz, (r) r10.x, (r) r14.xyzx  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1317].z  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   1 SHDOPT
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1317].w  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  // 50462976 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  // 50462976 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #2, #16, 2D, LOAD  //   0 SHD
//         movr (r) r16, (r) r4105  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1322].x  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  // 50462976 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1322].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   1 SHDOPT
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #3, #16, 2D, LOAD  //   0 SHD
//         movr (r) r17, (r) r4105  // 50462976 SHD
//         movu32 (u32) r4109, (u32) c[17][1326].z  // 50462976 SHD
//         movu32 (u32) r4109.x, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(0, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1326].w  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  // 50462976 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   1 SHDOPT
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #4, #16, 2D, LOAD  //   0 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         movu32 (u32) r12.xyw, (u32) r13.xyxw  //   0 SHD
//         movr (r) r4109, (r) c[1][0]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00072938, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.70020753, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r13.x, (r) r4109, (r) r12  //   0 SHD
//         movr (r) r4109, (r) c[1][1]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(-0.00072938, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.39386669, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r13.y, (r) r4109, (r) r12  // 65535 SHDOPT
//         movr (r) r4109, (r) c[1][2]  // 162315416 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162315416 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162315416 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162315416 SHD
//         movr (r) r4109.w, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162316424 SHD
//         dp4r (r) r13.z, (r) r4109, (r) r12  // 162316424 SHD
//         movr (r) r4109, (r) c[1][3]  // 162316904 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162316904 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162316904 SHD
//         movr (r) r4109.z, (r) constant(-9.99499989, 0.00000000, 0.00000000, 0.00000000).x  // 162316904 SHD
//         movr (r) r4109.w, (r) constant(10.00000095, 0.00000000, 0.00000000, 0.00000000).x  // 162317832 SHD
//         dp4r (r) r13.w, (r) r4109, (r) r12  // 162317832 SHD
//         divr (r) r4105.x, (r) r13.x, (r) r13.w  // 162316776 SHD
//         divr (r) r4105.y, (r) r13.y, (r) r13.w  // 162316776 SHD
//         divr (r) r4105.z, (r) r13.z, (r) r13.w  // 162316776 SHD
//         movr (r) r18.xyz, (r) r4105  // 162316776 SHD
//         dp3r (r) r11.w, (r) r18.xyzx, (r) r18.xyzx  // 162319176 SHD
//         rsqr (r) r4106.x, (r) r11.w  //   0 SHD
//         rsqr (r) r4106.y, (r) r11.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r11.w  //   0 SHD
//         rsqr (r) r4106.w, (r) r11.w  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 SHD
//         movr (r) r11.w, (r) r4107  //   0 SHD
//         divr (r) r4108.x, (r) r18.x, (r) r11.w  //   0 SHD
//         divr (r) r4108.y, (r) r18.y, (r) r11.w  //   0 SHD
//         divr (r) r4108.z, (r) r18.z, (r) r11.w  //   0 SHD
//         movr (r) r19.xyz, (r) r4108  //   0 SHD
//         minr (r) r20.z, (r) r11.w, (r) constant(100000.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162319688 SHD
//         dp3r (r) r12.z, (r) c[2][11].xyzx, (r) r19.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.w, (r) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[2][11].w, (r) r12.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         maxr (r) r15.w, (r) r15.w, (r) constant(0.10000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         minr (r) r20.y, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         movr (r) r4105, (r) r20.y  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r21.z, (r) r4105  //   0 SHD
//         movu32 (u32) r21.y, (u32) constant(1036831949, 0, 0, 0).x  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  //   0 SHD
//         movr (r) r4105, (r) r20.yyzy  // 162320584 SHD
//         movr (r) r4105(EQ), (r) r21.yyzy  //   0 SHD
//         movr (r) r20.yz, (r) r4105  //   0 SHD
//         dp3r (r) r12.z, (r) c[2][12].xyzx, (r) r19.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.w, (r) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[2][12].w, (r) r12.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  //   0 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  //   0 SHD
//         movr (r) r4105, (r) r20.xxzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.yywy  //   0 SHD
//         movr (r) r20.yz, (r) r4105  // 162321016 SHD
//         dp3r (r) r12.z, (r) c[2][13].xyzx, (r) r19.xyzx  // 162321016 SHD
//         set_ltr.c (s32) r14.w, (r) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162321016 SHD
//         divr (r) r4105.w, (r) -c[2][13].w, (r) r12.z  // 162321016 SHD
//         movr (r) r15.w, (r) r4105  // 162321688 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  // 162321688 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  // 162322136 SHD
//         movs32.c (s32) hc, (s32) r14.w  // 162322136 SHD
//         movr (r) r4105, (r) r20.xxzx  // 162322136 SHD
//         movr (r) r4105(EQ), (r) r20.yywy  // 162322136 SHD
//         movr (r) r20.yz, (r) r4105  // 162323096 SHD
//         dp3r (r) r12.z, (r) c[2][14].xyzx, (r) r19.xyzx  // 162323096 SHD
//         set_ltr.c (s32) r14.w, (r) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162323832 SHD
//         divr (r) r4105.w, (r) -c[2][14].w, (r) r12.z  // 162323832 SHD
//         movr (r) r15.w, (r) r4105  // 162323832 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  //   0 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  // 162324696 SHD
//         movs32.c (s32) hc, (s32) r14.w  // 162324696 SHD
//         movr (r) r4105, (r) r20.xxzx  // 162325224 SHD
//         movr (r) r4105(EQ), (r) r20.yywy  // 162325224 SHD
//         movr (r) r20.yz, (r) r4105  //   0 SHD
//         dp3r (r) r12.z, (r) c[2][15].xyzx, (r) r19.xyzx  //   0 SHD
//         set_ltr.c (s32) r14.w, (r) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) -c[2][15].w, (r) r12.z  //   0 SHD
//         movr (r) r15.w, (r) r4105  //   0 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  //   0 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  // 162325784 SHD
//         movr (r) r4105, (r) r20.xxzx  // 162325784 SHD
//         movr (r) r4105(EQ), (r) r20.yywy  // 162326248 SHD
//         movr (r) r20.yz, (r) r4105  // 162326248 SHD
//         dp3r (r) r12.z, (r) c[2][16].xyzx, (r) r19.xyzx  // 162326248 SHD
//         set_ltr.c (s32) r14.w, (r) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162326248 SHD
//         divr (r) r4105.w, (r) -c[2][16].w, (r) r12.z  // 162327576 SHD
//         movr (r) r15.w, (r) r4105  // 162327576 SHD
//         maxr (r) r15.w, (r) r20.y, (r) r15.w  // 162328040 SHD
//         minr (r) r20.x, (r) r20.z, (r) r15.w  // 162328040 SHD
//         set_ltr.c (s32) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r12.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         movr (r) r4105, (r) r20.x  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.z  //   0 SHD
//         movr (r) r20.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r14.w  //   0 SHD
//         movr (r) r4105, (r) r20.xzxx  //   0 SHD
//         movr (r) r4105(EQ), (r) r20.ywyy  //   0 SHD
//         movr (r) r20.xy, (r) r4105  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) r20.x, (r) r20.y  //   0 SHD
//         movs32.c (s32) hc, (s32) r12.z  //   0 SHD
//         ife NE.x , l12, l13  //   0 SHD
//         movr (u32) r20.zw, (r) v0.xxxy  // 162328456 SHD
//         andu32 (u32) r21.xy, (u32) r20.zwzz, (u32) constant(3, 3, 0, 0)  // 162328456 SHD
//         movu32 (u32) r21.zw, (u32) constant(0, 0, 0, 0)  // 162329432 SHD
//         movu32 (u32) r4106, (u32) r21.w  // 162329432 SHD
//         txgu32 (r) r4105, (u32) r21, (u32) r4106, #6, #0, 2D, LOAD  // 162329432 SHD
//         movr (r) r21.x, (r) r4105  // 162329432 SHD
//         movr (r) r4110, (r) c[4][4].x  // 162330360 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 65535 FPB1
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162329784 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162329784 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162329784 SHD
//         maxr (r) r12.z, (r) r20.x, (r) r4110  // 162329784 SHD
//         movr (r) r4110, (r) c[4][4].y  // 162329784 SHD
//         movr (r) r4110.x, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162329784 SHD
//         movr (r) r4110.y, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // -2147090432 SHD
//         movr (r) r4110.z, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         minr (r) r14.w, (r) r20.y, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[1][5].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4109.w, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   8 
//         dp3r (r) r15.w, (r) r4109, (r) r19.xyzx  //   0 SHD
//         movr (r) r4110, (r) -c[4][4].x  //   0 SHD
//         movr (r) r4110.x, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  16 SHDOPT
//         addr (r) r20.z, (r) r12.z, (r) r4110  //  16 SHDOPT
//         maxr (r) r20.z, (r) r20.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  16 SHDOPT
//         set_neur.c (s32) r20.w, (r) r15.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][4].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4111, (r) c[3][8].y  //   2 
//         movr (r) r4111.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4111.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 65535 SHDOPT
//         movr (r) r4111.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r21.y, (r) r15.w, (r) r4110, (r) r4111  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r21.yzw, (r) r21.y, (r) r4110  //   0 SHD
//         mulr (r) r21.yzw, (r) r21.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.y, (r) r21.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r21.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r21.w  //   0 SHD
//         movr (r) r21.yzw, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.xyz, (r) r15.w, (r) r4110  //   0 SHD
//         mulr (r) r22.xyz, (r) r20.z, (r) r22.xyzx  //   0 SHD
//         mulr (r) r22.xyz, (r) r22.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r22.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r22.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r22.z  //   0 SHD
//         movr (r) r22.xyz, (r) r4105  //   0 SHD
//         addr (r) r22.xyz, (r) -r22.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r21.yzw, (r) r21.yyzw, (r) r22.xxyz  //   0 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 267419520 SHD
//         mulr (r) r22.xyz, (r) r15.w, (r) r4110  //   0 SHD
//         divr (r) r4105.y, (r) r21.y, (r) r22.x  //   0 SHD
//         divr (r) r4105.z, (r) r21.z, (r) r22.y  //   0 SHD
//         divr (r) r4105.w, (r) r21.w, (r) r22.z  //   0 SHD
//         movr (r) r21.yzw, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[3][8].y  //   0 
//         movr (r) r4109.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 28315008 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.xyz, (r) r4109, (r) r4110  //   0 SHD
//         mulr (r) r22.xyz, (r) r22.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r22.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r22.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r22.z  //   0 SHD
//         movr (r) r22.xyz, (r) r4105  // 16779264 SHD
//         mulr (r) r22.xyz, (r) r20.z, (r) r22.xyzx  // 524288 
//         movs32.c (s32) hc, (s32) r20.w  // 524288 
//         movr (r) r4105, (r) r21.yyzw  //   0 SHD
//         movr (r) r4105(EQ), (r) r22.xxyz  //   0 SHD
//         movr (r) r21.yzw, (r) r4105  //   0 SHD
//         madr (r) r20.z, (r) r21.w, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r21.z  //   0 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.xyz, (r) r20.z, (r) r4110  //   8 SHD
//         movr (r) r4109, (r) c[4][1].xxyz  //   8 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r21.yzw, (r) r4109, (r) r21.y, (r) r22.xxyz  //   0 SHD
//         mulr (r) r21.yzw, (r) r21.yyzw, (r) constant(0.00000000, -1.44269502, -1.44269502, -1.44269502)  //   0 SHD
//         ex2r (r) r4105.y, (r) r21.y  //   2 FPB1
//         ex2r (r) r4105.z, (r) r21.z  // 262176 SHD
//         ex2r (r) r4105.w, (r) r21.w  // 262176 SHD
//         movr (r) r21.yzw, (r) r4105  //   0 SHD
//         movu32 (u32) r19.w, (u32) constant(1065353216, 0, 0, 0).x  //  14 SHD
//         dp4r (r) r22.x, (r) c[2][4], (r) r19  //  14 SHD
//         dp4r (r) r22.y, (r) c[2][5], (r) r19  //   1 FPB0
//         dp4r (r) r22.z, (r) c[2][6], (r) r19  //   0 SHD
//         dp4r (r) r22.w, (r) c[2][7], (r) r19  //   0 SHD
//         movu32 (u32) r23.x, (u32) c[2][4].w  //   0 SHD
//         movu32 (u32) r23.y, (u32) c[2][5].w  //   0 SHD
//         movu32 (u32) r23.z, (u32) c[2][6].w  //   0 SHD
//         movu32 (u32) r23.w, (u32) c[2][7].w  //   0 SHD
//         addr (r) r22, (r) r22, (r) -r23  //   0 SHD
//         movr (r) r4110, (r) c[4][4].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r19.w, (r) r12.z, (r) r4110  //   0 SHD
//         lg2r (r) r4105.w, (r) r19.w  //   0 SHD
//         movr (r) r19.w, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][5].x  //   4 
//         movr (r) r4110.x, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         mulr (r) r19.w, (r) r19.w, (r) r4110  //   1 SHD
//         flrr (r) r19.w, (r) r19.w  //   0 SHD
//         maxr (r) r19.w, (r) r19.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109, (r) c[4][4].w  //   0 SHD
//         movr (r) r4109.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         lg2r (r) r4105.z, (r) r4109  //   0 SHD
//         movr (r) r20.z, (r) r4105  //   0 SHD
//         mulr (r) r19.w, (r) r19.w, (r) r20.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r19.w  //   0 SHD
//         movr (r) r19.w, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][4].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r19.w, (r) r19.w, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[4][4].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r20.z, (r) r19.w, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) -c[4][3].w  //   0 SHD
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   8 SHD
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4110, (r) c[4][3].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r20.w, (r) r4109, (r) r4110, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r24.x, (r) c[2][9].w, (r) c[2][9].w  //   0 SHD
//         movu32 (u32) r25.xyz, (u32) c[2][8].xyzx  //   0 SHD
//         movu32 (u32) r25.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         movr (r) r4109, (r) c[1][4]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r26.x, (r) r4109, (r) r25  //   0 SHD
//         movr (r) r4109, (r) c[1][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   8 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHD
//         dp4r (r) r26.y, (r) r4109, (r) r25  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r26.z, (r) r4109, (r) r25  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r24.yzw, (r) r26.y, (r) r4110  //   0 SHD
//         mulr (r) r24.yzw, (r) r24.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.y, (r) r24.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r24.z  //   0 SHD
//         ex2r (r) r4105.w, (r) r24.w  //   0 SHD
//         movr (r) r24.yzw, (r) r4105  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r25.xyz, (r) r4109, (r) constant(0.07957747, 0.07957747, 0.07957747, 0.00000000)  //   0 SHD
//         movu32 (u32) r27.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r28, (u32) r23  //   0 SHD
//         movu32 (u32) r29, (u32) r22  //   8 SHD
//         movu32 (u32) r30.xyz, (u32) r21.yzwy  //   0 SHD
//         movu32 (u32) r31.xyz, (u32) constant(0, 0, 0, 0)  //   1 SHD
//         movu32 (u32) r25.w, (u32) r19.w  //   0 SHDOPT
//         movu32 (u32) r26.w, (u32) r20.z  //   0 SHD
//         rep l14  //   0 SHD
//         set_ger.c (s32) r30.w, (r) r25.w, (r) r14.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r30.w  //   0 SHD
//         brk NE.x  //   0 SHD
//         maxr (r) r30.w, (r) r12.z, (r) r25.w  //   0 SHD
//         minr (r) r31.w, (r) r14.w, (r) r26.w  //   0 SHD
//         addr (r) r32.x, (r) -r30.w, (r) r31.w  //   0 SHD
//         divr (r) r4105.w, (r) r31.w, (r) r30.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         lg2r (r) r4105.w, (r) r31.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         mulr (r) r31.w, (r) r21.x, (r) r31.w  //   0 SHD
//         ex2r (r) r4105.w, (r) r31.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         mulr (r) r30.w, (r) r30.w, (r) r31.w  //   0 SHD
//         movr (r) r4111, (r) c[3][8].y  //   8 SHD
//         movr (r) r4111.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4111.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4111.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r31.w, (r) r30.w, (r) r15.w, (r) r4111  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r32.yzw, (r) r31.w, (r) r4110  //   0 SHD
//         mulr (r) r32.yzw, (r) r32.yyzw, (r) constant(0.00000000, 1.44269502, 1.44269502, 1.44269502)  //   0 SHD
//         ex2r (r) r4105.x, (r) r32.y  //   0 SHD
//         ex2r (r) r4105.y, (r) r32.z  //   0 SHD
//         ex2r (r) r4105.z, (r) r32.w  //   0 SHD
//         movr (r) r33.xyz, (r) r4105  //   0 SHD
//         madr (r) r33.w, (r) r33.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r33.y  //   0 SHD
//         mulr (r) r32.xy, (r) r32.x, (r) r33.xwxx  //   0 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   8 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r33.xyz, (r) r32.y, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r33.xyz, (r) r4109, (r) r32.x, (r) r33.xyzx  //   0 SHD
//         mulr (r) r33.xyz, (r) r33.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r33.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r33.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r33.z  //   0 SHD
//         movr (r) r33.xyz, (r) r4105  //   0 SHD
//         mulr (r) r30.xyz, (r) r30.xyzx, (r) r33.xyzx  //   0 SHD
//         mulr (r) r27.xyz, (r) r19.xyzx, (r) r30.w  //   0 SHD
//         madr (r) r33, (r) r30.w, (r) r29, (r) r28  //   0 SHD
//         divr (r) r4105.x, (r) r33.x, (r) r33.w  //   0 SHD
//         divr (r) r4105.y, (r) r33.y, (r) r33.w  //   0 SHD
//         divr (r) r4105.z, (r) r33.z, (r) r33.w  //   0 SHD
//         movr (r) r33.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r33.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #0, 2D, LOD  //   0 SHD
//         movr (r) r34.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r33.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r31.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r31.w, (r) r31.w, (r) r33.z  //   0 SHD
//         andu32 (u32) r31.w, (u32) r31.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         mulr (r) r33.xyz, (r) r31.w, (r) r34.xyzx  //   0 SHD
//         madr (r) r34.xyz, (r) -r30.w, (r) r19.xyzx, (r) c[2][8].xyzx  //   8 SHD
//         dp3r (r) r30.w, (r) r34.xyzx, (r) r34.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r30.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         mulr (r) r34.xyz, (r) r31.w, (r) r34.xyzx  //   0 SHD
//         dp3r (r) r31.w, (r) r19.xyzx, (r) r34.xyzx  //   0 SHD
//         movr (r) r4109, (r) -c[4][3].w  //   0 SHD
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r31.w, (r) r4109, (r) r31.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r31.w, (r) r31.w, (r) r31.w  //   0 SHD
//         mulr (r) r31.w, (r) r31.w, (r) constant(12.56637096, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         divr (r) r4105.w, (r) r20.w, (r) r31.w  //   0 SHD
//         movr (r) r31.w, (r) r4105  //   0 SHD
//         divr (r) r4105.z, (r) r30.w, (r) r24.x  //   0 SHD
//         movr (r) r32.z, (r) r4105  //   0 SHD
//         madr (r) r32.z, (r) -r32.z, (r) r32.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r32.z, (r) r32.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r30.w, (r) r30.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   8 SHD
//         divr (r) r4105.w, (r) constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).w, (r) r30.w  //   0 SHD
//         movr (r) r30.w, (r) r4105  //   1 SHD
//         mulr (r) r33.xyz, (r) r32.z, (r) r33.xyzx  //   0 SHDOPT
//         mulr (r) r33.xyz, (r) r30.w, (r) r33.xyzx  //   0 SHD
//         movr (r) r4109, (r) c[1][4]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r34.x, (r) r4109, (r) r27  //   0 SHD
//         movr (r) r4109, (r) c[1][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r34.y, (r) r4109, (r) r27  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r34.z, (r) r4109, (r) r27  //   0 SHD
//         addr (r) r27.xyz, (r) -r26.xyzx, (r) r34.xyzx  //   0 SHD
//         dp3r (r) r27.x, (r) r27.xyzx, (r) r27.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r27.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r27.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r27.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r27.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r27.x, (r) r4107  //   0 SHD
//         divr (r) r4108.y, (r) r27.y, (r) r27.x  //   0 SHD
//         movr (r) r27.y, (r) r4108  //   0 SHD
//         set_neur.c (s32) r27.z, (r) r27.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r34.xyz, (r) r27.y, (r) r4110  //   0 SHD
//         mulr (r) r34.xyz, (r) r27.x, (r) r34.xyzx  //   0 SHD
//         mulr (r) r34.xyz, (r) r34.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r34.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r34.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r34.z  //   0 SHD
//         movr (r) r34.xyz, (r) r4105  //   0 SHD
//         addr (r) r34.xyz, (r) -r34.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r34.xyz, (r) r24.yzwy, (r) r34.xyzx  //   0 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r35.xyz, (r) r27.y, (r) r4110  //   0 SHD
//         divr (r) r4105.x, (r) r34.x, (r) r35.x  //   0 SHD
//         divr (r) r4105.y, (r) r34.y, (r) r35.y  //   0 SHD
//         divr (r) r4105.z, (r) r34.z, (r) r35.z  //   0 SHD
//         movr (r) r34.xyz, (r) r4105  //   0 SHD
//         mulr (r) r35.xyz, (r) r24.yzwy, (r) r27.x  //   0 SHD
//         movs32.c (s32) hc, (s32) r27.z  //   0 SHD
//         movr (r) r4105, (r) r34.xyzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r35.xyzx  //   0 SHD
//         movr (r) r27.xyz, (r) r4105  //   0 SHD
//         madr (r) r27.y, (r) r27.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r27.y  //   0 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r34.xyz, (r) r27.y, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r27.xyz, (r) r4109, (r) r27.x, (r) r34.xyzx  //   0 SHD
//         mulr (r) r27.xyz, (r) r27.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r27.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r27.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r27.z  //   0 SHD
//         movr (r) r27.xyz, (r) r4105  //   0 SHD
//         mulr (r) r27.xyz, (r) r27.xyzx, (r) r33.xyzx  //   0 SHD
//         movr (r) r4110, (r) c[4][2].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r33.xyz, (r) r31.w, (r) r4110  //   0 SHD
//         mulr (r) r32.yzw, (r) r32.y, (r) r33.xxyz  //   0 SHD
//         madr (r) r32.xyz, (r) r25.xyzx, (r) r32.x, (r) r32.yzwy  //   0 SHD
//         mulr (r) r27.xyz, (r) r27.xyzx, (r) r32.xyzx  //   0 SHD
//         madr (r) r31.xyz, (r) r27.xyzx, (r) r30.xyzx, (r) r31.xyzx  //   0 SHD
//         movr (r) r4110, (r) c[4][4].w  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r27.x, (r) r26.w, (r) r4110  //   0 SHD
//         movu32 (u32) r25.w, (u32) r26.w  //   0 SHD
//         movu32 (u32) r26.w, (u32) r27.x  //   0 SHD
//         l14:  //   0 SHD
//         madr (r) r15.xyz, (r) r31.xyzx, (r) c[2][9].xyzx, (r) r15.xyzx  //   0 SHD
//         set_ltr.c (s32) r12.z, (r) r20.x, (r) r11.w  //   0 SHD
//         set_ger.c (s32) r11.w, (r) r20.y, (r) r11.w  //   0 SHD
//         andu32 (u32) r11.w, (u32) r11.w, (u32) r12.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r11.w  //   0 SHD
//         ife NE.x , l15, l16  //   0 SHD
//         dp4r (r) r20.x, (r) c[2][4], (r) r13  //   0 SHD
//         dp4r (r) r20.y, (r) c[2][5], (r) r13  //   0 SHD
//         dp4r (r) r20.z, (r) c[2][6], (r) r13  //   0 SHD
//         dp4r (r) r11.w, (r) c[2][7], (r) r13  //   0 SHD
//         divr (r) r4105.x, (r) r20.x, (r) r11.w  //   0 SHD
//         divr (r) r4105.y, (r) r20.y, (r) r11.w  //   0 SHD
//         divr (r) r4105.z, (r) r20.z, (r) r11.w  //   0 SHD
//         movr (r) r13.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r13.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #0, 2D, LOD  //   0 SHD
//         movr (r) r20.xyz, (r) r4105  //   0 SHD
//         addr (r) r13.zw, (r) r13.z, (r) constant(0.00000000, 0.00000000, -0.00010000, -0.00100000)  //   0 SHD
//         divr (r) r4105.w, (r) r13.w, (r) c[2][9].w  //   0 SHD
//         movr (r) r11.w, (r) r4105  //   0 SHD
//         mulr (r) r11.w, (r) r11.w, (r) constant(0.75000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r11.w, (r) r11.w, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.66291302, 0.66291302, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r12.z, (r) r4105.yzxw  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.00000000, 0.87500000, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r13.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.57452399, 0.57452399, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.75000000, 0.00000000, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r12.z, (r) r12.z, (r) r13.z  //   0 SHD
//         andu32 (u32) r12.z, (u32) r12.z, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         set_ger.c (s32) r13.w, (r) r13.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r12.z, (r) r12.z, (r) r13.w  //   0 SHD
//         set_ger.c (s32) r13.w, (r) r14.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r12.z, (r) r12.z, (r) r13.w  //   0 SHD
//         set_ger.c (s32) r13.w, (r) r15.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r12.z, (r) r12.z, (r) r13.w  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r13.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.48613599, -0.48613599, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.00000000, -0.62500000, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.39774799, -0.39774799, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r19.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r13.w, (r) r13.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r14.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.w, (r) r13.w, (r) r14.w  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r15.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.w, (r) r13.w, (r) r14.w  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r19.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.w, (r) r13.w, (r) r14.w  //   0 SHD
//         addr (r) r12.z, (r) r12.z, (r) r13.w  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r13.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.13519500, 0.41608700, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.30338100, 0.22041900, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.25281799, -0.18368299, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r19.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r13.w, (r) r13.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r13.w, (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r14.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.w, (r) r13.w, (r) r14.w  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r15.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.w, (r) r13.w, (r) r14.w  //   0 SHD
//         set_ger.c (s32) r14.w, (r) r19.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r14.w, (u32) r14.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.w, (r) r13.w, (r) r14.w  //   0 SHD
//         addr (r) r12.z, (r) r12.z, (r) r13.w  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.07725400, -0.23776400, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r13.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(0.18750000, 0.00000000, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r21.xy, (r) r11.w, (r) constant(-0.06250000, 0.10825300, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r21.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r13.xy, (r) r11.w, (r) constant(-0.03125000, -0.05412700, 0.00000000, 0.00000000), (r) r13.xyxx  //   0 SHD
//         txgr (r) r4105, (r) r13.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r11.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r13.x, (r) r13.w, (r) r13.z  //   0 SHD
//         set_ger.c (s32) r13.y, (r) r14.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r13.xy, (u32) r13.xyxx, (u32) constant(1065353216, 1065353216, 0, 0)  //   0 SHD
//         addr (r) r13.x, (r) r13.y, (r) r13.x  //   0 SHD
//         set_ger.c (s32) r13.y, (r) r15.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r13.y, (u32) r13.y, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r13.x, (r) r13.y, (r) r13.x  //   0 SHD
//         set_ger.c (s32) r11.w, (r) r11.w, (r) r13.z  //   0 SHD
//         andu32 (u32) r11.w, (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r11.w, (r) r11.w, (r) r13.x  //   0 SHD
//         addr (r) r11.w, (r) r11.w, (r) r12.z  //   0 SHD
//         mulr (r) r11.w, (r) r11.w, (r) constant(0.06250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xyz, (r) r20.xyzx, (r) c[2][9].xyzx  //   0 SHD
//         mulr (r) r13.xyz, (r) r11.w, (r) r13.xyzx  //   0 SHD
//         movr (r) r4109, (r) -c[2][10].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) -constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         addr (r) r20.xyz, (r) r4109, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         movr (r) r4111, (r) c[2][10].xyzx  //   0 SHD
//         movr (r) r4111.x, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.y, (r) constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.z, (r) constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r20.xyz, (r) r10.x, (r) r20.xyzx, (r) r4111  //   0 SHD
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) r20.xyzx  //   0 SHD
//         addr (r) r20.xyz, (r) -r18.xyzx, (r) c[2][8].xyzx  // 134 SHD
//         dp3r (r) r10.x, (r) r20.xyzx, (r) r20.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r10.x  //   0 SHD
//         movr (r) r11.w, (r) r4105  //   0 SHD
//         mulr (r) r21.xyz, (r) r11.w, (r) r20.xyzx  //   0 SHD
//         divr (r) r4105.z, (r) r10.x, (r) r24.x  //   0 SHD
//         movr (r) r12.z, (r) r4105  //   0 SHD
//         madr (r) r12.z, (r) -r12.z, (r) r12.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r12.z, (r) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.xyz, (r) r12.z, (r) r13.xyzx  //   0 SHD
//         divr (r) r4105.x, (r) r13.x, (r) r10.x  //   0 SHD
//         divr (r) r4105.y, (r) r13.y, (r) r10.x  //   0 SHD
//         divr (r) r4105.z, (r) r13.z, (r) r10.x  //   0 SHD
//         movr (r) r13.xyz, (r) r4105  //   0 SHD
//         movu32 (u32) r18.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         movr (r) r4109, (r) c[1][4]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r22.x, (r) r4109, (r) r18  //   0 SHD
//         movr (r) r4109, (r) c[1][5]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r22.y, (r) r4109, (r) r18  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r22.z, (r) r4109, (r) r18  //   0 SHD
//         addr (r) r18.xyz, (r) -r26.xyzx, (r) r22.xyzx  //   0 SHD
//         dp3r (r) r10.x, (r) r18.xyzx, (r) r18.xyzx  //   0 SHD
//         rsqr (r) r4106.x, (r) r10.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r10.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r10.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r10.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r10.x, (r) r4107  //   0 SHD
//         divr (r) r4108.z, (r) r18.y, (r) r10.x  //   0 SHD
//         movr (r) r12.z, (r) r4108  //   0 SHD
//         set_neur.c (s32) r13.w, (r) r12.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.xyz, (r) r12.z, (r) r4110  //   0 SHD
//         mulr (r) r18.xyz, (r) r10.x, (r) r18.xyzx  //   0 SHD
//         mulr (r) r18.xyz, (r) r18.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r18.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r18.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r18.z  //   0 SHD
//         movr (r) r18.xyz, (r) r4105  //   0 SHD
//         addr (r) r18.xyz, (r) -r18.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r18.xyz, (r) r18.xyzx, (r) r24.yzwy  //   0 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r22.xyz, (r) r12.z, (r) r4110  //   0 SHD
//         divr (r) r4105.x, (r) r18.x, (r) r22.x  //   0 SHD
//         divr (r) r4105.y, (r) r18.y, (r) r22.y  //   0 SHD
//         divr (r) r4105.z, (r) r18.z, (r) r22.z  //   0 SHD
//         movr (r) r18.xyz, (r) r4105  //   0 SHD
//         mulr (r) r22.xyz, (r) r10.x, (r) r24.yzwy  //   0 SHD
//         movs32.c (s32) hc, (s32) r13.w  //   0 SHD
//         movr (r) r4105, (r) r18.xyzx  //   0 SHD
//         movr (r) r4105(EQ), (r) r22.xyzx  //   0 SHD
//         movr (r) r18.xyz, (r) r4105  //   0 SHD
//         madr (r) r10.x, (r) r18.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r18.y  //   0 SHD
//         movr (r) r4110, (r) c[4][3].xxyz  //   0 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.yzw, (r) r10.x, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r18.xyz, (r) r4109, (r) r18.x, (r) r18.yzwy  //   0 SHD
//         mulr (r) r18.xyz, (r) r18.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  //   0 SHD
//         ex2r (r) r4105.x, (r) r18.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r18.y  //   0 SHD
//         ex2r (r) r4105.z, (r) r18.z  //   0 SHD
//         movr (r) r18.xyz, (r) r4105  //   0 SHD
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) r18.xyzx  //   0 SHD
//         mulr (r) r10.x, (r) r16.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r12.z, (r) r14.xyzx, (r) -r19.xyzx  //   0 SHD
//         movr_sat (r) r13.w, (r) r12.z  //   0 SHD
//         dp3r (r) r14.w, (r) r14.xyzx, (r) r21.xyzx  //   0 SHD
//         movr_sat (r) r15.w, (r) r14.w  //   0 SHD
//         addr (r) r16.w, (r) -r13.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         rsqr (r) r4106.x, (r) r16.w  //   0 SHD
//         rsqr (r) r4106.y, (r) r16.w  //   0 SHD
//         rsqr (r) r4106.z, (r) r16.w  //   0 SHD
//         rsqr (r) r4106.w, (r) r16.w  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 SHD
//         movr (r) r16.w, (r) r4107  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  //   0 SHD
//         madr (r) r18.x, (r) r13.w, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         madr (r) r18.x, (r) r18.x, (r) r13.w, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r18.x, (r) r18.x, (r) r13.w, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r16.w, (r) r16.w, (r) r18.x  //   0 SHD
//         addr (r) r18.x, (r) -r15.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         rsqr (r) r4106.x, (r) r18.x  //   0 SHD
//         rsqr (r) r4106.y, (r) r18.x  //   0 SHD
//         rsqr (r) r4106.z, (r) r18.x  //   0 SHD
//         rsqr (r) r4106.w, (r) r18.x  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r18.x, (r) r4107  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  //   0 SHD
//         madr (r) r18.y, (r) r15.w, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         madr (r) r18.y, (r) r18.y, (r) r15.w, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r18.y, (r) r18.y, (r) r15.w, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.x, (r) r18.x, (r) r18.y  //   0 SHD
//         maxr (r) r18.y, (r) r16.w, (r) r18.x  //   0 SHD
//         minr (r) r16.w, (r) r16.w, (r) r18.x  //   0 SHD
//         madr (r) r18.xzw, (r) -r14.xxyz, (r) r13.w, (r) -r19.xxyz  //   0 SHD
//         dp3r (r) r13.w, (r) r18.xzwx, (r) r18.xzwx  //   0 SHD
//         rsqr (r) r4105.w, (r) r13.w  //   0 SHD
//         movr (r) r13.w, (r) r4105  //   0 SHD
//         mulr (r) r18.xzw, (r) r13.w, (r) r18.xxzw  //   0 SHD
//         madr (r) r21.xyz, (r) -r14.xyzx, (r) r15.w, (r) r21.xyzx  //   0 SHD
//         dp3r (r) r13.w, (r) r21.xyzx, (r) r21.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r13.w  //   0 SHD
//         movr (r) r13.w, (r) r4105  //   0 SHD
//         mulr (r) r21.xyz, (r) r13.w, (r) r21.xyzx  //   0 SHD
//         dp3r (r) r13.w, (r) r18.xzwx, (r) r21.xyzx  //   0 SHD
//         mulr (r) r18.x, (r) r10.x, (r) r10.x  //   0 SHD
//         madr (r) r21.xyz, (r) r10.x, (r) r10.x, (r) constant(0.33000001, 0.09000000, 0.09000000, 0.00000000)  //   0 SHD
//         divr (r) r4105.x, (r) r18.x, (r) r21.x  //   0 SHD
//         divr (r) r4105.z, (r) r18.x, (r) r21.y  //   0 SHD
//         divr (r) r4105.w, (r) r18.x, (r) r21.z  //   0 SHD
//         movr (r) r18.xzw, (r) r4105  //   0 SHD
//         mulr (r) r18.zw, (r) r18.zzzw, (r) constant(0.00000000, 0.00000000, 0.44999999, 0.12500000)  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         madr (r) r10.x, (r) -r18.x, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         set_ger.c (s32) r18.x, (r) r13.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4105, (r) r18.y  //   0 SHD
//         sinr (r) r4106.w, (r) r4105.w  //   0 SHD
//         movr (r) r19.w, (r) r4106  //   0 SHD
//         mulr (r) r20.w, (r) r16.w, (r) constant(0.63661975, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r21.x, (r) r20.w, (r) r20.w  //   0 SHD
//         madr (r) r20.w, (r) -r20.w, (r) r21.x, (r) r19.w  //   0 SHD
//         movs32.c (s32) hc, (s32) r18.x  //   0 SHD
//         movr (r) r4105, (r) r19.w  //   8 SHD
//         movr (r) r4105(EQ), (r) r20.w  //   0 SHD
//         movr (r) r18.x, (r) r4105  //   1 SHD
//         mulr (r) r18.x, (r) r18.x, (r) r18.z  //   1 SHD
//         mulr (r) r18.z, (r) r18.y, (r) r16.w  // 161804632 SHD
//         mulr (r) r18.z, (r) r18.z, (r) constant(0.40528473, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r18.z, (r) r18.z, (r) r18.z  // 161805096 SHD
//         mulr (r) r18.z, (r) r18.z, (r) r18.w  // 1113 SHD
//         mulr (r) r18.x, (r) r13.w, (r) r18.x  //   0 SHDOPT
//         movr (r) r4105, (r) r16.w  //   0 SHD
//         sinr (r) r4106.x, (r) r4105.x  //   0 SHD
//         movr (r) r21.x, (r) r4106  //   0 SHD
//         cosr (r) r4107.x, (r) r4105.x  //   0 SHD
//         movr (r) r22.x, (r) r4107  //   0 SHD
//         divr (r) r4105.w, (r) r21.x, (r) r22.x  //   0 SHD
//         movr (r) r18.w, (r) r4105  //   0 SHD
//         addr (r) r13.w, (r) -|r13.w|, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.w, (r) r18.z, (r) r13.w  //   0 SHD
//         addr (r) r16.w, (r) r16.w, (r) r18.y  //   0 SHD
//         mulr (r) r16.w, (r) r16.w, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  // 1486 SHD
//         movr (r) r4105, (r) r16.w  // 1486 SHD
//         sinr (r) r4106.x, (r) r4105.x  // 1486 SHD
//         movr (r) r21.x, (r) r4106  // 1486 SHD
//         cosr (r) r4107.x, (r) r4105.x  //  53 SHD
//         movr (r) r22.x, (r) r4107  // 3110 SHD
//         divr (r) r4105.w, (r) r21.x, (r) r22.x  // 3110 SHD
//         movr (r) r16.w, (r) r4105  // 3110 SHD
//         madr (r) r10.x, (r) r18.x, (r) r18.w, (r) r10.x  //   0 SHD
//         madr (r) r10.x, (r) r13.w, (r) r16.w, (r) r10.x  //   2 SHD
//         mulr (r) r10.x, (r) r10.x, (r) constant(0.31830987, 0.00000000, 0.00000000, 0.00000000).x  //   2 SHD
//         mulr (r) r13.w, (r) r17.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  // 397833112 SHD
//         madr (r) r18.xyz, (r) r20.xyzx, (r) r11.w, (r) -r19.xyzx  //   0 SHDOPT
//         dp3r (r) r11.w, (r) r18.xyzx, (r) r18.xyzx  //   0 FPB0
//         rsqr (r) r4105.w, (r) r11.w  //   0 SHD
//         movr (r) r11.w, (r) r4105  //   0 SHD
//         mulr (r) r18.xyz, (r) r11.w, (r) r18.xyzx  //   0 SHD
//         maxr (r) r11.w, (r) r12.z, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r12.z, (r) r14.w, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r14.x, (r) r14.xyzx, (r) r18.xyzx  //   0 SHD
//         maxr (r) r14.x, (r) r14.x, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r14.y, (r) -r19.xyzx, (r) r18.xyzx  // 161808112 SHD
//         mulr (r) r13.w, (r) r13.w, (r) r13.w  // 161808112 SHD
//         mulr (r) r14.z, (r) r14.x, (r) r14.x  // 161808112 SHD
//         madr (r) r14.w, (r) r14.x, (r) r14.x, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r16.w, (r) r13.w, (r) r14.z  // 162866264 SHD
//         divr (r) r4105.w, (r) r14.w, (r) r16.w  // 162866264 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         mulr (r) r14.w, (r) r14.w, (r) constant(1.44269502, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         ex2r (r) r4105.w, (r) r14.w  //   0 SHD
//         movr (r) r14.w, (r) r4105  //   0 SHD
//         mulr (r) r13.w, (r) r13.w, (r) constant(4.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.z, (r) r14.z, (r) r14.z  //   0 SHD
//         mulr (r) r13.w, (r) r13.w, (r) r14.z  //   0 SHD
//         divr (r) r4105.w, (r) r14.w, (r) r13.w  //   0 SHD
//         movr (r) r13.w, (r) r4105  //   0 SHD
//         minr (r) r14.z, (r) r11.w, (r) r12.z  //   0 SHD
//         dp2r (r) r14.x, (r) r14.x, (r) r14.z  //   0 SHD
//         divr (r) r4105.x, (r) r14.x, (r) r14.y  //   0 SHD
//         movr (r) r14.x, (r) r4105  //   0 SHD
//         minr (r) r14.x, (r) r14.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  10 
//         mulr (r) r13.w, (r) r13.w, (r) r14.x  // 146953840 SHD
//         mulr (r) r11.w, (r) r11.w, (r) r12.z  // 146953840 SHD
//         divr (r) r4105.w, (r) r13.w, (r) r11.w  //   0 SHD
//         movr (r) r11.w, (r) r4105  //   0 SHD
//         mulr (r) r14.xyz, (r) r11.w, (r) r17.xyzx  //   0 SHD
//         madr (r) r14.xyz, (r) r16.xyzx, (r) r10.x, (r) r14.xyzx  //   0 SHD
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) r14.xyzx  //   0 SHD
//         mulr (r) r13.xyz, (r) r15.w, (r) r13.xyzx  //   0 SHD
//         mulr (r) r13.xyz, (r) r30.xyzx, (r) r13.xyzx  //   0 SHD
//         l15:  //   0 SHD
//         movu32 (u32) r13.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         l16:  //   0 SHD
//         l12:  //   0 SHD
//         movu32 (u32) r13.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         l13:  //   0 SHD
//         movr (r) r4110, (r) c[0][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r14.xyz, (r) r13.xyzx, (r) r4110  //   0 SHD
//         movr (r) r4110, (r) c[0][0].xyzx  // 50462976 
//         movr (r) r4110.x, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  // 50462976 
//         movr (r) r4110.y, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r13.xyz, (r) r13.xyzx, (r) r4110, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         divr (r) r4105.x, (r) r14.x, (r) r13.x  //   0 SHD
//         divr (r) r4105.y, (r) r14.y, (r) r13.y  //   0 SHD
//         divr (r) r4105.z, (r) r14.z, (r) r13.z  //   0 SHD
//         movr (r) r13.xyz, (r) r4105  //   0 SHD
//         addr (r) r11.xyz, (r) r11.xyzx, (r) r13.xyzx  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1309].x  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1309].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #0, #16, 2D, LOAD  //   0 SHD
//         movr (r) r13.z, (r) r4105.yzxw  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1313].z  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1313].w  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #1, #16, 2D, LOAD  //   0 SHD
//         movr (r) r14.xyz, (r) r4105  // 1207959552 SHD
//         movu32 (u32) r4105, (u32) constant(3212836864, 3212836864, 3212836864, 0)  // 162763928 SHD
//         madr (r) r14.xyz, (r) r14.xyzx, (r) constant(2.00000000, 2.00000000, 2.00000000, 0.00000000), (r) r4105  // 162763928 SHD
//         dp3r (r) r10.x, (r) r14.xyzx, (r) r14.xyzx  // 162763928 SHD
//         rsqr (r) r4105.x, (r) r10.x  //   0 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         mulr (r) r14.xyz, (r) r10.x, (r) r14.xyzx  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1318].x  // 1179653 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  // 1179653 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  // 1179653 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  // 1179653 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  // 1179653 SHDOPT
//         movu32_precise (u32) r4108.x, (u32) r4109  // 65536 SHD
//         movu32 (u32) r4109, (u32) c[17][1318].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #2, #16, 2D, LOAD  // 1179653 FPB1
//         movr (r) r16, (r) r4105  // 1179653 FPB1
//         movu32 (u32) r4109, (u32) c[17][1322].z  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  // 1179653 
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  // 1179653 
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1322].w  // 1179653 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  // 1179653 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  // 1179653 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  // 1179653 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  // 1179653 
//         movu32_precise (u32) r4108.y, (u32) r4109  //   0 SHD
//         adds32 (s32) r4106.xyz, (s32) r9.xyww, (s32) constant(0, 0, 0, 0)  //   0 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  //   0 SHD
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #3, #16, 2D, LOAD  //   0 SHD
//         movr (r) r17, (r) r4105  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1327].x  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32_precise (u32) r4108.x, (u32) r4109  //   0 SHD
//         movu32 (u32) r4109, (u32) c[17][1327].y  //   0 SHD
//         movu32 (u32) r4109.x, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.y, (u32) constant(1, 0, 0, 0).x  //   0 SHD
//         movu32 (u32) r4109.z, (u32) constant(1, 0, 0, 0).x  // 163019096 SHD
//         movu32 (u32) r4109.w, (u32) constant(1, 0, 0, 0).x  // 163019096 SHD
//         movu32_precise (u32) r4108.y, (u32) r4109  // 163019096 SHD
//         adds32 (s32) r4106.xyz, (s32) r9, (s32) constant(0, 0, 0, 0)  // 163019096 SHD
//         mads32 (s32) r4106.xy, (s32) r4106, (s32) constant(2, 2, 1, 1), (s32) r4108.xyyy  // 162886904 FPB0
//         movu32 (u32) r4106.w, (u32) constant(0, 0, 0, 0)  // 162886904 FPB0
//         movu32 (u32) r4107, (u32) constant(0, 0, 0, 0)  // 162886904 FPB0
//         txgu32 (r) r4105, (u32) r4106, (u32) r4107, #4, #16, 2D, LOAD  // 1179653 FPB1
//         movr (r) r9.x, (r) r4105  // 295042 FPB0
//         movu32 (u32) r13.xyw, (u32) r12.xyxw  // 295042 FPB0
//         movr (r) r4109, (r) c[1][0]  //  17 SHD
//         movr (r) r4109.x, (r) constant(0.00072938, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 1066000384 SHD
//         movr (r) r4109.w, (r) constant(-0.70020753, 0.00000000, 0.00000000, 0.00000000).x  // 1066000384 SHD
//         dp4r (r) r12.x, (r) r4109, (r) r13  // 1066000384 SHD
//         movr (r) r4109, (r) c[1][1]  // 1066000384 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         movr (r) r4109.y, (r) constant(-0.00072938, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(0.39386669, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r12.y, (r) r4109, (r) r13  //   0 SHD
//         movr (r) r4109, (r) c[1][2]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r12.z, (r) r4109, (r) r13  //   0 SHD
//         movr (r) r4109, (r) c[1][3]  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162149128 SHD
//         movr (r) r4109.z, (r) constant(-9.99499989, 0.00000000, 0.00000000, 0.00000000).x  // 162149128 SHD
//         movr (r) r4109.w, (r) constant(10.00000095, 0.00000000, 0.00000000, 0.00000000).x  // 162149128 SHD
//         dp4r (r) r12.w, (r) r4109, (r) r13  // 162149128 SHD
//         divr (r) r4105.x, (r) r12.x, (r) r12.w  // 162149128 SHD
//         divr (r) r4105.y, (r) r12.y, (r) r12.w  // 162149128 SHD
//         divr (r) r4105.z, (r) r12.z, (r) r12.w  // 162149128 SHD
//         movr (r) r13.xyz, (r) r4105  // 162149592 SHDOPT
//         dp3r (r) r9.y, (r) r13.xyzx, (r) r13.xyzx  // 162149592 SHDOPT
//         rsqr (r) r4106.x, (r) r9.y  // 162150056 SHDOPT
//         rsqr (r) r4106.y, (r) r9.y  // 162150056 SHDOPT
//         rsqr (r) r4106.z, (r) r9.y  // 162150296 FPB0
//         rsqr (r) r4106.w, (r) r9.y  // 162150296 FPB0
//         movr (r) r4105, (r) r4106  // 162150296 FPB0
//         rcpr (r) r4107.y, (r) r4105.y  // 161813960 SHD
//         movr (r) r9.y, (r) r4107  // 161813960 SHD
//         divr (r) r4108.x, (r) r13.x, (r) r9.y  // 161813960 SHD
//         divr (r) r4108.y, (r) r13.y, (r) r9.y  // 161813960 SHD
//         divr (r) r4108.z, (r) r13.z, (r) r9.y  // 162120104 SHD
//         movr (r) r18.xyz, (r) r4108  // 162120104 SHD
//         minr (r) r19.z, (r) r9.y, (r) constant(100000.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         dp3r (r) r9.z, (r) c[2][11].xyzx, (r) r18.xyzx  //  17 SHD
//         set_ltr.c (s32) r9.w, (r) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         divr (r) r4105.x, (r) -c[2][11].w, (r) r9.z  //   0 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         maxr (r) r10.x, (r) r10.x, (r) constant(0.10000000, 0.00000000, 0.00000000, 0.00000000).x  // 162120664 
//         minr (r) r19.y, (r) r19.z, (r) r10.x  // 162120664 
//         set_ltr.c (s32) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.z  // 162120920 SHD
//         movs32.c (s32) hc, (s32) r9.z  // 162120920 SHD
//         movr (r) r4105, (r) r19.y  // 162120920 SHD
//         movr (r) r4105(EQ), (r) r19.z  // 162120920 SHD
//         movr (r) r20.z, (r) r4105  // 162150808 SHD
//         movu32 (u32) r20.y, (u32) constant(1036831949, 0, 0, 0).x  // 162150808 SHD
//         movs32.c (s32) hc, (s32) r9.w  // 162151272 SHD
//         movr (r) r4105, (r) r19.yyzy  // 162151272 SHD
//         movr (r) r4105(EQ), (r) r20.yyzy  // 162151272 SHD
//         movr (r) r19.yz, (r) r4105  // 162151272 SHD
//         dp3r (r) r9.z, (r) c[2][12].xyzx, (r) r18.xyzx  // 130 FPB0
//         set_ltr.c (s32) r9.w, (r) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 130 FPB0
//         divr (r) r4105.x, (r) -c[2][12].w, (r) r9.z  // 130 FPB0
//         movr (r) r10.x, (r) r4105  // 130 FPB0
//         maxr (r) r10.x, (r) r19.y, (r) r10.x  // 1553 SHD
//         minr (r) r19.x, (r) r19.z, (r) r10.x  // 162122440 SHDOPT
//         set_ltr.c (s32) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.z  // 162122440 SHDOPT
//         movs32.c (s32) hc, (s32) r9.z  // 162122440 SHDOPT
//         movr (r) r4105, (r) r19.x  // 162122440 SHDOPT
//         movr (r) r4105(EQ), (r) r19.z  // 161817856 SHD
//         movr (r) r19.w, (r) r4105  // 161817856 SHD
//         movs32.c (s32) hc, (s32) r9.w  // 161817856 SHD
//         movr (r) r4105, (r) r19.xxzx  // 162122904 
//         movr (r) r4105(EQ), (r) r19.yywy  // 162122904 
//         movr (r) r19.yz, (r) r4105  // 162123480 SHD
//         dp3r (r) r9.z, (r) c[2][13].xyzx, (r) r18.xyzx  // 162123480 SHD
//         set_ltr.c (s32) r9.w, (r) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162123480 SHD
//         divr (r) r4105.x, (r) -c[2][13].w, (r) r9.z  // 162123480 SHD
//         movr (r) r10.x, (r) r4105  // 162123480 SHD
//         maxr (r) r10.x, (r) r19.y, (r) r10.x  // 162123480 SHD
//         minr (r) r19.x, (r) r19.z, (r) r10.x  // 161818824 SHD
//         set_ltr.c (s32) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.z  // 161818824 SHD
//         movs32.c (s32) hc, (s32) r9.z  //   0 SHD
//         movr (r) r4105, (r) r19.x  // 162124408 SHD
//         movr (r) r4105(EQ), (r) r19.z  // 455 SHD
//         movr (r) r19.w, (r) r4105  //   0 SHD
//         movs32.c (s32) hc, (s32) r9.w  //  16 SHD
//         movr (r) r4105, (r) r19.xxzx  //   0 SHDOPT
//         movr (r) r4105(EQ), (r) r19.yywy  //   0 SHDOPT
//         movr (r) r19.yz, (r) r4105  //   0 SHDOPT
//         dp3r (r) r9.z, (r) c[2][14].xyzx, (r) r18.xyzx  // 162170296 SHD
//         set_ltr.c (s32) r9.w, (r) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162170296 SHD
//         divr (r) r4105.x, (r) -c[2][14].w, (r) r9.z  // 162126408 SHDOPT
//         movr (r) r10.x, (r) r4105  // 162126408 SHDOPT
//         maxr (r) r10.x, (r) r19.y, (r) r10.x  // 162126408 SHDOPT
//         minr (r) r19.x, (r) r19.z, (r) r10.x  // 162126408 SHDOPT
//         set_ltr.c (s32) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.z  // 162126408 SHDOPT
//         movs32.c (s32) hc, (s32) r9.z  // 162126408 SHDOPT
//         movr (r) r4105, (r) r19.x  // 162126408 SHDOPT
//         movr (r) r4105(EQ), (r) r19.z  //   0 SHD
//         movr (r) r19.w, (r) r4105  // 130 SHD
//         movs32.c (s32) hc, (s32) r9.w  // 162127176 SHDOPT
//         movr (r) r4105, (r) r19.xxzx  // 162127176 SHDOPT
//         movr (r) r4105(EQ), (r) r19.yywy  // 162127176 SHDOPT
//         movr (r) r19.yz, (r) r4105  // 162127176 SHDOPT
//         dp3r (r) r9.z, (r) c[2][15].xyzx, (r) r18.xyzx  // 162127176 SHDOPT
//         set_ltr.c (s32) r9.w, (r) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //  16 SHD
//         divr (r) r4105.x, (r) -c[2][15].w, (r) r9.z  //  16 SHD
//         movr (r) r10.x, (r) r4105  // 162119080 SHD
//         maxr (r) r10.x, (r) r19.y, (r) r10.x  // 162119080 SHD
//         minr (r) r19.x, (r) r19.z, (r) r10.x  // 162127880 SHD
//         set_ltr.c (s32) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.z  // 162127880 SHD
//         movs32.c (s32) hc, (s32) r9.z  // 162127880 SHD
//         movr (r) r4105, (r) r19.x  // 162127880 SHD
//         movr (r) r4105(EQ), (r) r19.z  // 162128264 SHD
//         movr (r) r19.w, (r) r4105  // 162128264 SHD
//         movs32.c (s32) hc, (s32) r9.w  // 162128264 SHD
//         movr (r) r4105, (r) r19.xxzx  // 162128264 SHD
//         movr (r) r4105(EQ), (r) r19.yywy  // 162128264 SHD
//         movr (r) r19.yz, (r) r4105  // 162128264 SHD
//         dp3r (r) r9.z, (r) c[2][16].xyzx, (r) r18.xyzx  // 162128264 SHD
//         set_ltr.c (s32) r9.w, (r) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162128264 SHD
//         divr (r) r4105.x, (r) -c[2][16].w, (r) r9.z  // 162128264 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         maxr (r) r10.x, (r) r19.y, (r) r10.x  //   0 SHD
//         minr (r) r19.x, (r) r19.z, (r) r10.x  // 161825088 SHD
//         set_ltr.c (s32) r9.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r9.z  // 161825088 SHD
//         movs32.c (s32) hc, (s32) r9.z  // 161825088 SHD
//         movr (r) r4105, (r) r19.x  //  17 SHD
//         movr (r) r4105(EQ), (r) r19.z  //  17 SHD
//         movr (r) r19.w, (r) r4105  //  17 SHD
//         movs32.c (s32) hc, (s32) r9.w  //   0 SHD
//         movr (r) r4105, (r) r19.xxxz  //   0 SHD
//         movr (r) r4105(EQ), (r) r19.yyyw  // 130 FPB0
//         movr (r) r9.zw, (r) r4105  // 130 FPB0
//         set_ltr.c (s32) r10.x, (r) r9.z, (r) r9.w  // 130 FPB0
//         movs32.c (s32) hc, (s32) r10.x  // 130 FPB0
//         ife NE.x , l17, l18  // 130 FPB0
//         movr (u32) r19.xy, (r) v0.xyxx  // 162129544 SHD
//         andu32 (u32) r19.xy, (u32) r19.xyxx, (u32) constant(3, 3, 0, 0)  // 162129544 SHD
//         movu32 (u32) r19.zw, (u32) constant(0, 0, 0, 0)  // 162129544 SHD
//         movu32 (u32) r4106, (u32) r19.w  // 162129544 SHD
//         txgu32 (r) r4105, (u32) r19, (u32) r4106, #6, #0, 2D, LOAD  // 162130408 SHD
//         movr (r) r10.x, (r) r4105  // 162130408 SHD
//         movr (r) r4110, (r) c[4][4].x  // 162130872 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162130872 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162131272 SHDOPT
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162131272 SHDOPT
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162131736 SHD
//         maxr (r) r11.w, (r) r9.z, (r) r4110  // 162131736 SHD
//         movr (r) r4110, (r) c[4][4].y  // 162132200 SHDOPT
//         movr (r) r4110.x, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162132200 SHDOPT
//         movr (r) r4110.y, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162127624 SHD
//         movr (r) r4110.z, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162127624 SHD
//         movr (r) r4110.w, (r) constant(100.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162125544 SHD
//         minr (r) r14.w, (r) r9.w, (r) r4110  // 162125544 SHD
//         movr (r) r4109, (r) c[1][5].xyzx  // 162125544 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  // 162125544 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  // 162167576 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  // 162167576 SHD
//         movr (r) r4109.w, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  // 162167176 SHD
//         dp3r (r) r15.w, (r) r4109, (r) r18.xyzx  // 162167176 SHD
//         movr (r) r4110, (r) -c[4][4].x  // 162135832 SHD
//         movr (r) r4110.x, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162135832 SHD
//         movr (r) r4110.y, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162136296 SHD
//         movr (r) r4110.z, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162136296 SHD
//         movr (r) r4110.w, (r) -constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162136296 SHD
//         addr (r) r19.x, (r) r11.w, (r) r4110  // 162136296 SHD
//         maxr (r) r19.x, (r) r19.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162180888 SHD
//         set_neur.c (s32) r19.y, (r) r15.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162180888 SHD
//         movr (r) r4110, (r) c[4][4].x  // 162137688 SHDOPT
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162137688 SHDOPT
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162137688 SHDOPT
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162137688 SHDOPT
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162138392 SHDOPT
//         movr (r) r4111, (r) c[3][8].y  // 162138392 SHDOPT
//         movr (r) r4111.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162318904 SHD
//         movr (r) r4111.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162318904 SHD
//         movr (r) r4111.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162317032 SHD
//         movr (r) r4111.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162317032 SHD
//         madr (r) r19.z, (r) r15.w, (r) r4110, (r) r4111  // 162316264 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  // 162316264 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162136760 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162136760 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162135368 
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162135368 
//         mulr (r) r20.xyz, (r) r19.z, (r) r4110  // 162165224 SHD
//         mulr (r) r20.xyz, (r) r20.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 162165224 SHD
//         ex2r (r) r4105.x, (r) r20.x  // 162182184 SHD
//         ex2r (r) r4105.y, (r) r20.y  // 162182184 SHD
//         ex2r (r) r4105.z, (r) r20.z  // 162142344 SHD
//         movr (r) r20.xyz, (r) r4105  // 162142344 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  // 162142808 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162142808 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162182984 SHDOPT
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162182984 SHDOPT
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162143656 SHDOPT
//         mulr (r) r21.xyz, (r) r15.w, (r) r4110  // 162143656 SHDOPT
//         mulr (r) r21.xyz, (r) r19.x, (r) r21.xyzx  // 162151656 SHDOPT
//         mulr (r) r21.xyz, (r) r21.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 162151656 SHDOPT
//         ex2r (r) r4105.x, (r) r21.x  // 162151656 SHDOPT
//         ex2r (r) r4105.y, (r) r21.y  // 162151656 SHDOPT
//         ex2r (r) r4105.z, (r) r21.z  // 162144904 SHD
//         movr (r) r21.xyz, (r) r4105  // 162144904 SHD
//         addr (r) r21.xyz, (r) -r21.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  // 162143512 SHD
//         mulr (r) r20.xyz, (r) r20.xyzx, (r) r21.xyzx  // 162143512 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  // 162140840 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162140840 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162140840 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162140840 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162164040 SHD
//         mulr (r) r21.xyz, (r) r15.w, (r) r4110  // 162164040 SHD
//         divr (r) r4105.x, (r) r20.x, (r) r21.x  // 162163464 SHD
//         divr (r) r4105.y, (r) r20.y, (r) r21.y  // 162163464 SHD
//         divr (r) r4105.z, (r) r20.z, (r) r21.z  // 162145672 SHD
//         movr (r) r20.xyz, (r) r4105  // 162145672 SHD
//         movr (r) r4109, (r) c[3][8].y  // 162146136 SHD
//         movr (r) r4109.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162146136 SHD
//         movr (r) r4109.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162146136 SHD
//         movr (r) r4109.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162146136 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162147064 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  // 162147064 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162147528 SHDOPT
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162147528 SHDOPT
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162147944 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162147944 SHD
//         mulr (r) r21.xyz, (r) r4109, (r) r4110  // 162147944 SHD
//         mulr (r) r21.xyz, (r) r21.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 162147944 SHD
//         ex2r (r) r4105.x, (r) r21.x  // 162148872 SHD
//         ex2r (r) r4105.y, (r) r21.y  // 162148872 SHD
//         ex2r (r) r4105.z, (r) r21.z  // 162151512 SHD
//         movr (r) r21.xyz, (r) r4105  // 162151512 SHD
//         mulr (r) r19.xzw, (r) r19.x, (r) r21.xxyz  // 162152008 
//         movs32.c (s32) hc, (s32) r19.y  // 162152008 
//         movr (r) r4105, (r) r20.xyzx  // 162152648 SHD
//         movr (r) r4105(EQ), (r) r19.xzwx  // 162152648 SHD
//         movr (r) r19.xyz, (r) r4105  // 162153112 SHD
//         madr (r) r19.y, (r) r19.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r19.y  // 162153112 SHD
//         movr (r) r4110, (r) c[4][3].xxyz  // 162153576 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 162153576 SHD
//         movr (r) r4110.y, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 162153944 SHD
//         movr (r) r4110.z, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  // 162153944 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  // 162153944 SHD
//         mulr (r) r19.yzw, (r) r19.y, (r) r4110  // 162153944 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  // 162320968 FPB0
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162320968 FPB0
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162155384 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162155384 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162155832 SHD
//         madr (r) r19.xyz, (r) r4109, (r) r19.x, (r) r19.yzwy  // 162155832 SHD
//         mulr (r) r19.xyz, (r) r19.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  // 162155832 SHD
//         ex2r (r) r4105.x, (r) r19.x  // 162155832 SHD
//         ex2r (r) r4105.y, (r) r19.y  // 162156648 SHD
//         ex2r (r) r4105.z, (r) r19.z  // 162156648 SHD
//         movr (r) r19.xyz, (r) r4105  // 162156008 SHD
//         movu32 (u32) r18.w, (u32) constant(1065353216, 0, 0, 0).x  // 162156008 SHD
//         dp4r (r) r20.x, (r) c[2][4], (r) r18  // 162156008 SHD
//         dp4r (r) r20.y, (r) c[2][5], (r) r18  // 162156008 SHD
//         dp4r (r) r20.z, (r) c[2][6], (r) r18  // 162156008 SHD
//         dp4r (r) r20.w, (r) c[2][7], (r) r18  // 162156008 SHD
//         movu32 (u32) r21.x, (u32) c[2][4].w  // 162156008 SHD
//         movu32 (u32) r21.y, (u32) c[2][5].w  // 162157464 
//         movu32 (u32) r21.z, (u32) c[2][6].w  //   0 SHD
//         movu32 (u32) r21.w, (u32) c[2][7].w  //   0 SHD
//         addr (r) r20, (r) r20, (r) -r21  //   0 SHD
//         movr (r) r4110, (r) c[4][4].z  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 1248 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 1248 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 161829920 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 161829920 SHD
//         mulr (r) r18.w, (r) r11.w, (r) r4110  // 161829920 SHD
//         lg2r (r) r4105.w, (r) r18.w  // 142 SHD
//         movr (r) r18.w, (r) r4105  // 142 SHD
//         movr (r) r4110, (r) c[4][5].x  // 162158072 SHD
//         movr (r) r4110.x, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4110.y, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  // 161831312 SHD
//         movr (r) r4110.z, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  // 161831312 SHD
//         movr (r) r4110.w, (r) constant(1.20412004, 0.00000000, 0.00000000, 0.00000000).x  // 161831776 SHD
//         mulr (r) r18.w, (r) r18.w, (r) r4110  // 161831776 SHD
//         flrr (r) r18.w, (r) r18.w  // 161831776 SHD
//         maxr (r) r18.w, (r) r18.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162156600 SHD
//         movr (r) r4109, (r) c[4][4].w  // 162156600 SHD
//         movr (r) r4109.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 162156600 SHD
//         movr (r) r4109.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 162156600 SHD
//         movr (r) r4109.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 161832744 SHD
//         movr (r) r4109.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 161832744 SHD
//         lg2r (r) r4105.w, (r) r4109  // 161832744 SHD
//         movr (r) r19.w, (r) r4105  // 161832744 SHD
//         mulr (r) r18.w, (r) r18.w, (r) r19.w  // 1659 SHD
//         ex2r (r) r4105.w, (r) r18.w  // 161833864 SHD
//         movr (r) r18.w, (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[4][4].x  //   0 SHD
//         movr (r) r4110.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162158808 SHD
//         movr (r) r4110.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162158808 SHD
//         movr (r) r4110.z, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162158808 SHD
//         movr (r) r4110.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 161835064 SHD
//         mulr (r) r18.w, (r) r18.w, (r) r4110  // 161835064 SHD
//         movr (r) r4110, (r) c[4][4].w  // 130 SHD
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 130 SHD
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 162159496 SHD
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 162159496 SHD
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 162159496 SHD
//         mulr (r) r19.w, (r) r18.w, (r) r4110  // 162159496 SHD
//         movr (r) r4109, (r) -c[4][3].w  // 162160408 SHD
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 1275 SHD
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         movr (r) r4110, (r) c[4][3].w  //  17 SHD
//         movr (r) r4110.x, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //  17 SHD
//         movr (r) r4110.y, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 162323320 SHDOPT
//         movr (r) r4110.z, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 162323320 SHDOPT
//         movr (r) r4110.w, (r) constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  // 162323320 SHDOPT
//         madr (r) r22.x, (r) r4109, (r) r4110, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162323320 SHDOPT
//         mulr (r) r22.y, (r) c[2][9].w, (r) c[2][9].w  // 162161752 SHD
//         movu32 (u32) r23.xyz, (u32) c[2][8].xyzx  // 162161752 SHD
//         movu32 (u32) r23.w, (u32) constant(1065353216, 0, 0, 0).x  // 162161416 SHD
//         movr (r) r4109, (r) c[1][4]  // 162161416 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  // 162161416 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  // 162161416 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  // 450 FPB0
//         dp4r (r) r24.x, (r) r4109, (r) r23  // 450 FPB0
//         movr (r) r4109, (r) c[1][5]  // 450 FPB0
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  // 450 FPB0
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  // 162163112 
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  // 162163112 
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162163688 SHD
//         dp4r (r) r24.y, (r) r4109, (r) r23  //  17 SHD
//         movr (r) r4109, (r) c[1][6]  //  17 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r24.z, (r) r4109, (r) r23  // 142 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  // 142 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   1 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162163288 SHD
//         mulr (r) r23.xyz, (r) r24.y, (r) r4110  // 162163288 SHD
//         mulr (r) r23.xyz, (r) r23.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 162163144 SHD
//         ex2r (r) r4105.x, (r) r23.x  // 162163144 SHD
//         ex2r (r) r4105.y, (r) r23.y  // 162163144 SHD
//         ex2r (r) r4105.z, (r) r23.z  // 162163144 SHD
//         movr (r) r23.xyz, (r) r4105  // 162165592 SHDOPT
//         movr (r) r4109, (r) c[4][1].xyzx  // 162165592 SHDOPT
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162166040 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162166040 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162166440 SHDOPT
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 130 SHD
//         mulr (r) r25.xyz, (r) r4109, (r) constant(0.07957747, 0.07957747, 0.07957747, 0.00000000)  // 1704 SHD
//         movu32 (u32) r26.w, (u32) constant(1065353216, 0, 0, 0).x  // 1704 SHD
//         movu32 (u32) r27, (u32) r21  // 1704 SHD
//         movu32 (u32) r28, (u32) r20  // 1704 SHD
//         movu32 (u32) r29.xyz, (u32) r19.xyzx  // 1704 SHD
//         movu32 (u32) r30.xyz, (u32) constant(0, 0, 0, 0)  // 1704 SHD
//         movu32 (u32) r22.z, (u32) r18.w  // 130 SHD
//         movu32 (u32) r22.w, (u32) r19.w  //   0 SHD
//         rep l19  // 112 SHD
//         set_ger.c (s32) r23.w, (r) r22.z, (r) r14.w  // 112 SHD
//         movs32.c (s32) hc, (s32) r23.w  // 162166824 SHD
//         brk NE.x  // 162166824 SHD
//         maxr (r) r23.w, (r) r11.w, (r) r22.z  // 162215976 SHD
//         minr (r) r24.w, (r) r14.w, (r) r22.w  // 162215976 SHD
//         addr (r) r25.w, (r) -r23.w, (r) r24.w  // 162200232 SHD
//         divr (r) r4105.w, (r) r24.w, (r) r23.w  // 162200232 SHD
//         movr (r) r24.w, (r) r4105  // 162168344 SHD
//         lg2r (r) r4105.w, (r) r24.w  // 162168344 SHD
//         movr (r) r24.w, (r) r4105  // 162168424 
//         mulr (r) r24.w, (r) r10.x, (r) r24.w  // 162168424 
//         ex2r (r) r4105.w, (r) r24.w  // 162168888 SHD
//         movr (r) r24.w, (r) r4105  // 162168888 SHD
//         mulr (r) r23.w, (r) r23.w, (r) r24.w  // 162169352 SHD
//         movr (r) r4111, (r) c[3][8].y  // 162169352 SHD
//         movr (r) r4111.x, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162169352 SHD
//         movr (r) r4111.y, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162169352 SHD
//         movr (r) r4111.z, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162169352 SHD
//         movr (r) r4111.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162169352 SHD
//         madr (r) r24.w, (r) r23.w, (r) r15.w, (r) r4111  // 162169352 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  // 162169352 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162169352 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162170312 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162170312 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162171208 SHDOPT
//         mulr (r) r31.xyz, (r) r24.w, (r) r4110  // 161843872 SHD
//         mulr (r) r31.xyz, (r) r31.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 161843872 SHD
//         ex2r (r) r4105.x, (r) r31.x  // 130 SHD
//         ex2r (r) r4105.y, (r) r31.y  // 1318 SHD
//         ex2r (r) r4105.z, (r) r31.z  //  17 SHD
//         movr (r) r31.xyz, (r) r4105  //  17 SHD
//         madr (r) r31.w, (r) r31.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r31.y  // 162171672 SHD
//         mulr (r) r31.xy, (r) r25.w, (r) r31.xwxx  // 162171672 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  // 162171672 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 162171672 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  // 1322 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  // 1322 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 161845960 SHD
//         mulr (r) r32.xyz, (r) r31.y, (r) r4110  // 162172136 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  // 162172136 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162170824 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162170824 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162172680 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162172680 SHD
//         madr (r) r32.xyz, (r) r4109, (r) r31.x, (r) r32.xyzx  // 162172680 SHD
//         mulr (r) r32.xyz, (r) r32.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  // 162172680 SHD
//         ex2r (r) r4105.x, (r) r32.x  // 1744 SHD
//         ex2r (r) r4105.y, (r) r32.y  // 161847088 SHD
//         ex2r (r) r4105.z, (r) r32.z  // 161847088 SHD
//         movr (r) r32.xyz, (r) r4105  // 161847088 SHD
//         mulr (r) r29.xyz, (r) r29.xyzx, (r) r32.xyzx  // 161847088 SHD
//         mulr (r) r26.xyz, (r) r18.xyzx, (r) r23.w  // 161847088 SHD
//         madr (r) r32, (r) r23.w, (r) r28, (r) r27  // 161847088 SHD
//         divr (r) r4105.x, (r) r32.x, (r) r32.w  // 161847088 SHD
//         divr (r) r4105.y, (r) r32.y, (r) r32.w  // 161847088 SHD
//         divr (r) r4105.z, (r) r32.z, (r) r32.w  // 161847088 SHD
//         movr (r) r32.xyz, (r) r4105  // 161847088 SHD
//         txgr (r) r4105, (r) r32.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #0, 2D, LOD  //   0 SHD
//         movr (r) r33.xyz, (r) r4105  //   0 SHD
//         txgr (r) r4105, (r) r32.xyxx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  // 1760 SHD
//         movr (r) r24.w, (r) r4105.yzwx  // 1760 SHD
//         set_ger.c (s32) r24.w, (r) r24.w, (r) r32.z  // 1760 SHD
//         andu32 (u32) r24.w, (u32) r24.w, (u32) constant(1065353216, 0, 0, 0).x  // 1760 SHD
//         mulr (r) r32.xyz, (r) r24.w, (r) r33.xyzx  // 1760 SHD
//         madr (r) r33.xyz, (r) -r23.w, (r) r18.xyzx, (r) c[2][8].xyzx  // 1760 SHD
//         dp3r (r) r23.w, (r) r33.xyzx, (r) r33.xyzx  // 1760 SHD
//         rsqr (r) r4105.w, (r) r23.w  // 162173992 SHD
//         movr (r) r24.w, (r) r4105  // 162173992 SHD
//         mulr (r) r33.xyz, (r) r24.w, (r) r33.xyzx  // 162174456 
//         dp3r (r) r24.w, (r) r18.xyzx, (r) r33.xyzx  // 161850832 SHD
//         movr (r) r4109, (r) -c[4][3].w  //   0 SHD
//         movr (r) r4109.x, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.z, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.w, (r) -constant(0.60000002, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r24.w, (r) r4109, (r) r24.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r24.w, (r) r24.w, (r) r24.w  //   0 SHD
//         mulr (r) r24.w, (r) r24.w, (r) constant(12.56637096, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         divr (r) r4105.w, (r) r22.x, (r) r24.w  //   0 SHD
//         movr (r) r24.w, (r) r4105  // 130 FPB0
//         divr (r) r4105.w, (r) r23.w, (r) r22.y  // 162174920 SHD
//         movr (r) r25.w, (r) r4105  //   0 SHD
//         madr (r) r25.w, (r) -r25.w, (r) r25.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 112 SHD
//         maxr (r) r25.w, (r) r25.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 112 SHD
//         addr (r) r23.w, (r) r23.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 112 SHD
//         divr (r) r4105.w, (r) constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).w, (r) r23.w  // 161854048 SHD
//         movr (r) r23.w, (r) r4105  // 161854048 SHD
//         mulr (r) r32.xyz, (r) r25.w, (r) r32.xyzx  // 161854048 SHD
//         mulr (r) r32.xyz, (r) r23.w, (r) r32.xyzx  // 161854048 SHD
//         movr (r) r4109, (r) c[1][4]  // 161854776 SHD
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  // 161854776 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  // 161854776 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  // 162175384 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  // 162175384 SHD
//         dp4r (r) r33.x, (r) r4109, (r) r26  // 162175512 SHD
//         movr (r) r4109, (r) c[1][5]  // 162175512 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  // 162176312 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  // 162176312 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  // 162176312 SHD
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp4r (r) r33.y, (r) r4109, (r) r26  //   0 SHD
//         movr (r) r4109, (r) c[1][6]  //   0 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  // 162176664 SHDOPT
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  // 162176664 SHDOPT
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  // 162177240 SHD
//         dp4r (r) r33.z, (r) r4109, (r) r26  // 162177240 SHD
//         addr (r) r26.xyz, (r) -r24.xyzx, (r) r33.xyzx  // 162177704 SHDOPT
//         dp3r (r) r23.w, (r) r26.xyzx, (r) r26.xyzx  // 162177704 SHDOPT
//         rsqr (r) r4106.x, (r) r23.w  // 162178168 SHDOPT
//         rsqr (r) r4106.y, (r) r23.w  // 162178168 SHDOPT
//         rsqr (r) r4106.z, (r) r23.w  // 162178632 SHD
//         rsqr (r) r4106.w, (r) r23.w  // 162178632 SHD
//         movr (r) r4105, (r) r4106  // 162179096 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 
//         movr (r) r23.w, (r) r4107  //   0 
//         divr (r) r4108.w, (r) r26.y, (r) r23.w  //   0 
//         movr (r) r25.w, (r) r4108  // 162179928 
//         set_neur.c (s32) r26.x, (r) r25.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162179928 
//         movr (r) r4110, (r) c[4][0].xyzx  // 162180248 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162180248 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162181416 SHD
//         mulr (r) r33.xyz, (r) r25.w, (r) r4110  // 162181416 SHD
//         mulr (r) r33.xyz, (r) r23.w, (r) r33.xyzx  // 162181880 SHD
//         mulr (r) r33.xyz, (r) r33.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 162181880 SHD
//         ex2r (r) r4105.x, (r) r33.x  //   0 SHD
//         ex2r (r) r4105.y, (r) r33.y  // 161857096 SHD
//         ex2r (r) r4105.z, (r) r33.z  //   0 SHD
//         movr (r) r33.xyz, (r) r4105  //   0 SHD
//         addr (r) r33.xyz, (r) -r33.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   0 SHD
//         mulr (r) r33.xyz, (r) r23.xyzx, (r) r33.xyzx  //   0 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  // 146 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 146 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 146 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 65666 SHD
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHDOPT
//         mulr (r) r34.xyz, (r) r25.w, (r) r4110  //   0 SHDOPT
//         divr (r) r4105.x, (r) r33.x, (r) r34.x  //   0 SHDOPT
//         divr (r) r4105.y, (r) r33.y, (r) r34.y  //   0 SHDOPT
//         divr (r) r4105.z, (r) r33.z, (r) r34.z  // 162183272 SHDOPT
//         movr (r) r33.xyz, (r) r4105  //   0 
//         mulr (r) r34.xyz, (r) r23.w, (r) r23.xyzx  //   0 
//         movs32.c (s32) hc, (s32) r26.x  //   0 
//         movr (r) r4105, (r) r33.xyzx  //   0 
//         movr (r) r4105(EQ), (r) r34.xyzx  // 112 SHD
//         movr (r) r26.xyz, (r) r4105  // 112 SHD
//         madr (r) r23.w, (r) r26.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r26.y  // 112 SHD
//         movr (r) r4110, (r) c[4][3].xyzx  // 112 SHD
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 162216376 SHD
//         movr (r) r4110.y, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  // 162216376 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  // 162216376 SHD
//         movr (r) r4110.w, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r33.xyz, (r) r23.w, (r) r4110  //   0 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  //   0 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162216840 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162216840 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r26.xyz, (r) r4109, (r) r26.x, (r) r33.xyzx  //   0 SHD
//         mulr (r) r26.xyz, (r) r26.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  // 162185048 
//         ex2r (r) r4105.x, (r) r26.x  // 162185048 
//         ex2r (r) r4105.y, (r) r26.y  // 162185704 SHD
//         ex2r (r) r4105.z, (r) r26.z  // 162185704 SHD
//         movr (r) r26.xyz, (r) r4105  // 162185992 SHD
//         mulr (r) r26.xyz, (r) r26.xyzx, (r) r32.xyzx  // 162185992 SHD
//         movr (r) r4110, (r) c[4][2].xyzx  // 162186456 SHD
//         movr (r) r4110.x, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  // 162186456 SHD
//         movr (r) r4110.y, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  // 162186888 SHD
//         movr (r) r4110.z, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  // 162186888 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  // 162186888 SHD
//         mulr (r) r32.xyz, (r) r24.w, (r) r4110  // 162186888 SHD
//         mulr (r) r31.yzw, (r) r31.y, (r) r32.xxyz  // 162187816 SHDOPT
//         madr (r) r31.xyz, (r) r25.xyzx, (r) r31.x, (r) r31.yzwy  // 162187816 SHDOPT
//         mulr (r) r26.xyz, (r) r26.xyzx, (r) r31.xyzx  // 162188280 SHDOPT
//         madr (r) r30.xyz, (r) r26.xyzx, (r) r29.xyzx, (r) r30.xyzx  // 162188280 SHDOPT
//         movr (r) r4110, (r) c[4][4].w  // 162188280 SHDOPT
//         movr (r) r4110.x, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 162188280 SHDOPT
//         movr (r) r4110.y, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 162189224 SHD
//         movr (r) r4110.z, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 162189224 SHD
//         movr (r) r4110.w, (r) constant(1.77827942, 0.00000000, 0.00000000, 0.00000000).x  // 162189672 SHD
//         mulr (r) r23.w, (r) r22.w, (r) r4110  //   0 SHD
//         movu32 (u32) r22.z, (u32) r22.w  //   0 SHD
//         movu32 (u32) r22.w, (u32) r23.w  //   0 SHD
//         l19:  //   0 SHD
//         madr (r) r15.xyz, (r) r30.xyzx, (r) c[2][9].xyzx, (r) r15.xyzx  //   0 SHD
//         set_ltr.c (s32) r9.z, (r) r9.z, (r) r9.y  //   0 SHD
//         set_ger.c (s32) r9.y, (r) r9.w, (r) r9.y  //   0 SHD
//         andu32 (u32) r9.y, (u32) r9.y, (u32) r9.z  //   0 SHD
//         movs32.c (s32) hc, (s32) r9.y  // 162190600 
//         ife NE.x , l20, l21  // 162190600 
//         dp4r (r) r19.x, (r) c[2][4], (r) r12  // 162191624 SHD
//         dp4r (r) r19.y, (r) c[2][5], (r) r12  // 162191624 SHD
//         dp4r (r) r19.z, (r) c[2][6], (r) r12  // 162192088 SHD
//         dp4r (r) r9.y, (r) c[2][7], (r) r12  // 162192088 SHD
//         divr (r) r4105.y, (r) r19.x, (r) r9.y  // 162192520 SHD
//         divr (r) r4105.z, (r) r19.y, (r) r9.y  // 162192520 SHD
//         divr (r) r4105.w, (r) r19.z, (r) r9.y  // 162193016 SHD
//         movr (r) r9.yzw, (r) r4105  // 162193016 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #7, #0, 2D, LOD  // 162193480 SHDOPT
//         movr (r) r12.xyz, (r) r4105  //   0 SHD
//         addr (r) r19.xy, (r) r9.w, (r) constant(-0.00010000, -0.00100000, 0.00000000, 0.00000000)  //   0 SHD
//         divr (r) r4105.w, (r) r19.y, (r) c[2][9].w  //   0 SHD
//         movr (r) r9.w, (r) r4105  //   0 SHD
//         mulr (r) r9.w, (r) r9.w, (r) constant(0.75000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r9.w, (r) r9.w, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, 0.66291302, 0.66291302, 0.00000000), (r) r9.yyzy  //   0 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, 0.00000000, 0.87500000, 0.00000000), (r) r9.yyzy  //   0 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r11.w, (r) r4105.yzwx  // 162190696 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, -0.57452399, 0.57452399, 0.00000000), (r) r9.yyzy  //   0 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r12.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, -0.75000000, 0.00000000, 0.00000000), (r) r9.yyzy  //   0 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r10.x, (r) r10.x, (r) r19.x  // 162193912 SHDOPT
//         andu32 (u32) r10.x, (u32) r10.x, (u32) constant(1065353216, 0, 0, 0).x  // 162193912 SHDOPT
//         set_ger.c (s32) r11.w, (r) r11.w, (r) r19.x  // 162194408 SHD
//         andu32 (u32) r11.w, (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  // 162194408 SHD
//         addr (r) r10.x, (r) r10.x, (r) r11.w  // 162194408 SHD
//         set_ger.c (s32) r11.w, (r) r12.w, (r) r19.x  // 162194408 SHD
//         andu32 (u32) r11.w, (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  // 162195800 SHD
//         addr (r) r10.x, (r) r10.x, (r) r11.w  // 162195800 SHD
//         set_ger.c (s32) r11.w, (r) r14.w, (r) r19.x  // 162196264 SHD
//         andu32 (u32) r11.w, (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  // 162196264 SHD
//         addr (r) r10.x, (r) r10.x, (r) r11.w  // 162196728 
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, 1.00000000, 0.00000000, 0.00000000), (r) r9.yyzy  // 162196728 
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r11.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, -0.48613599, -0.48613599, 0.00000000), (r) r9.yyzy  //   0 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r12.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, 0.00000000, -0.62500000, 0.00000000), (r) r9.yyzy  // 162196696 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  // 162196696 SHD
//         movr (r) r14.w, (r) r4105.yzwx  // 162197208 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, 0.39774799, -0.39774799, 0.00000000), (r) r9.yyzy  // 162197208 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  // 162197672 SHD
//         movr (r) r15.w, (r) r4105.yzwx  // 162197672 SHD
//         set_ger.c (s32) r11.w, (r) r11.w, (r) r19.x  // 162198136 SHD
//         andu32 (u32) r11.w, (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  // 162198136 SHD
//         set_ger.c (s32) r12.w, (r) r12.w, (r) r19.x  // 162198600 SHDOPT
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r11.w, (r) r11.w, (r) r12.w  //   0 SHD
//         set_ger.c (s32) r12.w, (r) r14.w, (r) r19.x  //   0 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r11.w, (r) r11.w, (r) r12.w  //   0 SHD
//         set_ger.c (s32) r12.w, (r) r15.w, (r) r19.x  //   0 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r11.w, (r) r11.w, (r) r12.w  //   0 SHD
//         addr (r) r10.x, (r) r10.x, (r) r11.w  // 162199752 SHDOPT
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, 0.50000000, 0.00000000, 0.00000000), (r) r9.yyzy  // 162199752 SHDOPT
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  // 162199976 SHD
//         movr (r) r11.w, (r) r4105.yzwx  // 162199976 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, 0.13519500, 0.41608700, 0.00000000), (r) r9.yyzy  // 162200904 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  // 162200904 SHD
//         movr (r) r12.w, (r) r4105.yzwx  // 162233032 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, -0.30338100, 0.22041900, 0.00000000), (r) r9.yyzy  // 162233032 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r14.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, -0.25281799, -0.18368299, 0.00000000), (r) r9.yyzy  //   0 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r15.w, (r) r4105.yzwx  //   0 SHD
//         set_ger.c (s32) r11.w, (r) r11.w, (r) r19.x  // 162201832 SHD
//         andu32 (u32) r11.w, (u32) r11.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         set_ger.c (s32) r12.w, (r) r12.w, (r) r19.x  //   0 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r11.w, (r) r11.w, (r) r12.w  //   0 SHD
//         set_ger.c (s32) r12.w, (r) r14.w, (r) r19.x  //   0 SHD
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r11.w, (r) r11.w, (r) r12.w  // 162202296 
//         set_ger.c (s32) r12.w, (r) r15.w, (r) r19.x  // 162202296 
//         andu32 (u32) r12.w, (u32) r12.w, (u32) constant(1065353216, 0, 0, 0).x  // 162202248 SHD
//         addr (r) r11.w, (r) r11.w, (r) r12.w  // 162202248 SHD
//         addr (r) r10.x, (r) r10.x, (r) r11.w  // 162202696 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, 0.07725400, -0.23776400, 0.00000000), (r) r9.yyzy  // 162202696 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r11.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, 0.18750000, 0.00000000, 0.00000000), (r) r9.yyzy  //   0 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  //   0 SHD
//         movr (r) r12.w, (r) r4105.yzwx  //   0 SHD
//         madr (r) r19.yz, (r) r9.w, (r) constant(0.00000000, -0.06250000, 0.10825300, 0.00000000), (r) r9.yyzy  // 162203672 SHD
//         txgr (r) r4105, (r) r19.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  // 162203672 SHD
//         movr (r) r14.w, (r) r4105.yzwx  // 162203624 SHD
//         madr (r) r9.yz, (r) r9.w, (r) constant(0.00000000, -0.03125000, -0.05412700, 0.00000000), (r) r9.yyzy  // 162203624 SHD
//         txgr (r) r4105, (r) r9.yzyy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x, #8, #1, 2D, LOD  // 162204104 SHDOPT
//         movr (r) r9.y, (r) r4105.yxzw  //   0 SHD
//         set_ger.c (s32) r9.z, (r) r11.w, (r) r19.x  //   0 SHD
//         set_ger.c (s32) r9.w, (r) r12.w, (r) r19.x  //   0 SHD
//         andu32 (u32) r9.zw, (u32) r9.zzzw, (u32) constant(0, 0, 1065353216, 1065353216)  //   0 SHD
//         addr (r) r9.z, (r) r9.w, (r) r9.z  //   0 SHD
//         set_ger.c (s32) r9.w, (r) r14.w, (r) r19.x  //   0 SHD
//         andu32 (u32) r9.w, (u32) r9.w, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         addr (r) r9.z, (r) r9.w, (r) r9.z  //   0 SHD
//         set_ger.c (s32) r9.y, (r) r9.y, (r) r19.x  // 162205032 SHDOPT
//         andu32 (u32) r9.y, (u32) r9.y, (u32) constant(1065353216, 0, 0, 0).x  // 162205032 SHDOPT
//         addr (r) r9.y, (r) r9.y, (r) r9.z  // 162206008 SHD
//         addr (r) r9.y, (r) r9.y, (r) r10.x  // 162206008 SHD
//         mulr (r) r9.y, (r) r9.y, (r) constant(0.06250000, 0.00000000, 0.00000000, 0.00000000).x  // 162205960 SHD
//         mulr (r) r12.xyz, (r) r12.xyzx, (r) c[2][9].xyzx  // 162205960 SHD
//         mulr (r) r9.yzw, (r) r9.y, (r) r12.xxyz  // 162206424 SHD
//         movr (r) r4109, (r) -c[2][10].xyzx  // 162206424 SHD
//         movr (r) r4109.x, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  // 162206904 SHD
//         movr (r) r4109.y, (r) -constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  // 162206904 SHD
//         movr (r) r4109.z, (r) -constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  // 162207080 
//         movr (r) r4109.w, (r) -constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  // 162207080 
//         addr (r) r12.xyz, (r) r4109, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  // 162207816 SHD
//         movr (r) r4111, (r) c[2][10].xyzx  // 162207816 SHD
//         movr (r) r4111.x, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  // 162208296 SHD
//         movr (r) r4111.y, (r) constant(0.24400000, 0.00000000, 0.00000000, 0.00000000).x  // 162208296 SHD
//         movr (r) r4111.z, (r) constant(0.38800001, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4111.w, (r) constant(0.02276100, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r12.xyz, (r) r9.x, (r) r12.xyzx, (r) r4111  // 162209208 SHD
//         mulr (r) r9.xyz, (r) r9.yzwy, (r) r12.xyzx  // 162209208 SHD
//         addr (r) r12.xyz, (r) -r13.xyzx, (r) c[2][8].xyzx  // 162209688 SHDOPT
//         dp3r (r) r9.w, (r) r12.xyzx, (r) r12.xyzx  // 162209688 SHDOPT
//         rsqr (r) r4105.x, (r) r9.w  // 162209688 SHDOPT
//         movr (r) r10.x, (r) r4105  // 162209688 SHDOPT
//         mulr (r) r19.xyz, (r) r10.x, (r) r12.xyzx  // 162210568 SHDOPT
//         divr (r) r4105.w, (r) r9.w, (r) r22.y  // 162210568 SHDOPT
//         movr (r) r11.w, (r) r4105  // 162211016 SHD
//         madr (r) r11.w, (r) -r11.w, (r) r11.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162211016 SHD
//         maxr (r) r11.w, (r) r11.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162211480 SHD
//         mulr (r) r9.xyz, (r) r9.xyzx, (r) r11.w  // 162211480 SHD
//         divr (r) r4105.x, (r) r9.x, (r) r9.w  // 162212216 SHD
//         divr (r) r4105.y, (r) r9.y, (r) r9.w  // 162212216 SHD
//         divr (r) r4105.z, (r) r9.z, (r) r9.w  // 162212408 SHD
//         movr (r) r9.xyz, (r) r4105  // 162212408 SHD
//         movu32 (u32) r13.w, (u32) constant(1065353216, 0, 0, 0).x  // 162212888 
//         movr (r) r4109, (r) c[1][4]  // 162212888 
//         movr (r) r4109.x, (r) constant(0.74567890, 0.00000000, 0.00000000, 0.00000000).x  // 162213368 SHD
//         movr (r) r4109.y, (r) constant(0.34753197, 0.00000000, 0.00000000, 0.00000000).x  // 162213368 SHD
//         movr (r) r4109.z, (r) constant(0.56849319, 0.00000000, 0.00000000, 0.00000000).x  // 162213832 SHD
//         movr (r) r4109.w, (r) constant(-0.61816436, 0.00000000, 0.00000000, 0.00000000).x  // 162213832 SHD
//         dp4r (r) r20.x, (r) r4109, (r) r13  // 162214280 SHD
//         movr (r) r4109, (r) c[1][5]  // 162214280 SHD
//         movr (r) r4109.x, (r) constant(0.12749542, 0.00000000, 0.00000000, 0.00000000).x  // 162214744 SHD
//         movr (r) r4109.y, (r) constant(0.76301616, 0.00000000, 0.00000000, 0.00000000).x  // 162214744 SHD
//         movr (r) r4109.z, (r) constant(-0.63368076, 0.00000000, 0.00000000, 0.00000000).x  // 162215192 SHDOPT
//         movr (r) r4109.w, (r) constant(205.91369629, 0.00000000, 0.00000000, 0.00000000).x  // 162215192 SHDOPT
//         dp4r (r) r20.y, (r) r4109, (r) r13  // 162215656 SHD
//         movr (r) r4109, (r) c[1][6]  // 162215656 SHD
//         movr (r) r4109.x, (r) constant(-0.65399379, 0.00000000, 0.00000000, 0.00000000).x  // 162216120 SHDOPT
//         movr (r) r4109.y, (r) constant(0.54500264, 0.00000000, 0.00000000, 0.00000000).x  // 162216120 SHDOPT
//         movr (r) r4109.z, (r) constant(0.52465630, 0.00000000, 0.00000000, 0.00000000).x  // 162249352 SHD
//         movr (r) r4109.w, (r) constant(-4.45742893, 0.00000000, 0.00000000, 0.00000000).x  // 162249352 SHD
//         dp4r (r) r20.z, (r) r4109, (r) r13  // 162217032 SHD
//         addr (r) r13.xyz, (r) -r24.xyzx, (r) r20.xyzx  // 162217032 SHD
//         dp3r (r) r9.w, (r) r13.xyzx, (r) r13.xyzx  // 162218072 SHD
//         rsqr (r) r4106.x, (r) r9.w  // 162218072 SHD
//         rsqr (r) r4106.y, (r) r9.w  // 162218520 SHD
//         rsqr (r) r4106.z, (r) r9.w  // 162218520 SHD
//         rsqr (r) r4106.w, (r) r9.w  // 162218472 
//         movr (r) r4105, (r) r4106  // 162218472 
//         rcpr (r) r4107.w, (r) r4105.w  // 162218920 SHD
//         movr (r) r9.w, (r) r4107  // 162218920 SHD
//         divr (r) r4108.w, (r) r13.y, (r) r9.w  // 162219928 SHD
//         movr (r) r11.w, (r) r4108  // 162219928 SHD
//         set_neur.c (s32) r12.w, (r) r11.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162219896 SHD
//         movr (r) r4110, (r) c[4][0].xyzx  // 162219896 SHD
//         movr (r) r4110.x, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162220344 SHD
//         movr (r) r4110.y, (r) constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162220344 SHD
//         movr (r) r4110.z, (r) constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162220808 SHDOPT
//         movr (r) r4110.w, (r) constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162220808 SHDOPT
//         mulr (r) r13.xyz, (r) r11.w, (r) r4110  // 162221768 
//         mulr (r) r13.xyz, (r) r9.w, (r) r13.xyzx  // 162221768 
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) constant(1.44269502, 1.44269502, 1.44269502, 0.00000000)  // 162219592 SHDOPT
//         ex2r (r) r4105.x, (r) r13.x  // 162219592 SHDOPT
//         ex2r (r) r4105.y, (r) r13.y  // 162222152 SHD
//         ex2r (r) r4105.z, (r) r13.z  // 162222152 SHD
//         movr (r) r13.xyz, (r) r4105  // 162223176 SHD
//         addr (r) r13.xyz, (r) -r13.xyzx, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  // 162223176 SHD
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) r23.xyzx  // 162223640 SHD
//         movr (r) r4110, (r) -c[4][0].xyzx  // 162223640 SHD
//         movr (r) r4110.x, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162224104 SHD
//         movr (r) r4110.y, (r) -constant(-0.00083333, 0.00000000, 0.00000000, 0.00000000).x  // 162224104 SHD
//         movr (r) r4110.z, (r) -constant(-0.03636364, 0.00000000, 0.00000000, 0.00000000).x  // 162224568 
//         movr (r) r4110.w, (r) -constant(-0.00012500, 0.00000000, 0.00000000, 0.00000000).x  // 162224568 
//         mulr (r) r20.xyz, (r) r11.w, (r) r4110  // 162225032 SHD
//         divr (r) r4105.x, (r) r13.x, (r) r20.x  // 162225032 SHD
//         divr (r) r4105.y, (r) r13.y, (r) r20.y  // 162225320 SHD
//         divr (r) r4105.z, (r) r13.z, (r) r20.z  // 162225320 SHD
//         movr (r) r13.xyz, (r) r4105  // 162225784 SHD
//         mulr (r) r20.xyz, (r) r9.w, (r) r23.xyzx  // 162225784 SHD
//         movs32.c (s32) hc, (s32) r12.w  // 162226424 SHD
//         movr (r) r4105, (r) r13.xyzx  // 162226424 SHD
//         movr (r) r4105(EQ), (r) r20.xyzx  // 162226888 SHDOPT
//         movr (r) r13.xyz, (r) r4105  // 162226888 SHDOPT
//         madr (r) r9.w, (r) r13.z, (r) constant(200.00000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r13.y  // 162226936 
//         movr (r) r4110, (r) c[4][3].xxyz  // 162226936 
//         movr (r) r4110.x, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 162225720 SHDOPT
//         movr (r) r4110.y, (r) constant(0.02250000, 0.00000000, 0.00000000, 0.00000000).x  // 162225720 SHDOPT
//         movr (r) r4110.z, (r) constant(0.01201500, 0.00000000, 0.00000000, 0.00000000).x  // 162225704 SHD
//         movr (r) r4110.w, (r) constant(0.00750000, 0.00000000, 0.00000000, 0.00000000).x  // 162225704 SHD
//         mulr (r) r13.yzw, (r) r9.w, (r) r4110  // 162228360 SHD
//         movr (r) r4109, (r) c[4][1].xyzx  // 162228360 SHD
//         movr (r) r4109.x, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162228808 SHD
//         movr (r) r4109.y, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162228808 SHD
//         movr (r) r4109.z, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162229288 SHD
//         movr (r) r4109.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162229288 SHD
//         madr (r) r13.xyz, (r) r4109, (r) r13.x, (r) r13.yzwy  // 162229688 SHDOPT
//         mulr (r) r13.xyz, (r) r13.xyzx, (r) constant(-1.44269502, -1.44269502, -1.44269502, 0.00000000)  // 162229688 SHDOPT
//         ex2r (r) r4105.x, (r) r13.x  // 162230520 SHD
//         ex2r (r) r4105.y, (r) r13.y  // 162230520 SHD
//         ex2r (r) r4105.z, (r) r13.z  // 162230536 SHD
//         movr (r) r13.xyz, (r) r4105  // 162230536 SHD
//         mulr (r) r9.xyz, (r) r9.xyzx, (r) r13.xyzx  // 162230264 SHD
//         mulr (r) r9.w, (r) r16.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  // 162230264 SHD
//         dp3r (r) r11.w, (r) r14.xyzx, (r) -r18.xyzx  // 162231464 SHD
//         movr_sat (r) r12.w, (r) r11.w  // 162231464 SHD
//         dp3r (r) r13.x, (r) r14.xyzx, (r) r19.xyzx  // 162231928 SHDOPT
//         movr_sat (r) r13.y, (r) r13.x  // 162231928 SHDOPT
//         addr (r) r13.z, (r) -r12.w, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162232920 SHD
//         rsqr (r) r4106.x, (r) r13.z  //   0 SHD
//         rsqr (r) r4106.y, (r) r13.z  //   0 SHD
//         rsqr (r) r4106.z, (r) r13.z  //   0 SHD
//         rsqr (r) r4106.w, (r) r13.z  //   0 SHD
//         movr (r) r4105, (r) r4106  //   0 SHD
//         rcpr (r) r4107.z, (r) r4105.z  //   0 SHD
//         movr (r) r13.z, (r) r4107  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  //   0 SHD
//         madr (r) r13.w, (r) r12.w, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  //   0 SHD
//         madr (r) r13.w, (r) r13.w, (r) r12.w, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r13.w, (r) r13.w, (r) r12.w, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.z, (r) r13.z, (r) r13.w  // 162331160 SHDOPT
//         addr (r) r13.w, (r) -r13.y, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 
//         rsqr (r) r4106.x, (r) r13.w  // 162233336 SHD
//         rsqr (r) r4106.y, (r) r13.w  // 162233336 SHD
//         rsqr (r) r4106.z, (r) r13.w  // 162233800 SHD
//         rsqr (r) r4106.w, (r) r13.w  // 162233800 SHD
//         movr (r) r4105, (r) r4106  // 162234264 SHD
//         rcpr (r) r4107.w, (r) r4105.w  //   0 
//         movr (r) r13.w, (r) r4107  // 162233688 SHD
//         movu32 (u32) r4105, (u32) constant(1033377319, 0, 0, 0).x  // 162233688 SHD
//         madr (r) r14.w, (r) r13.y, (r) constant(-0.01872930, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  // 162235192 
//         madr (r) r14.w, (r) r14.w, (r) r13.y, (r) constant(-0.21211439, 0.00000000, 0.00000000, 0.00000000).x  // 162235192 
//         madr (r) r14.w, (r) r14.w, (r) r13.y, (r) constant(1.57072878, 0.00000000, 0.00000000, 0.00000000).x  // 162235656 SHD
//         mulr (r) r13.w, (r) r13.w, (r) r14.w  //   0 
//         maxr (r) r14.w, (r) r13.w, (r) r13.z  // 162236120 SHD
//         minr (r) r13.z, (r) r13.w, (r) r13.z  // 162236120 SHD
//         madr (r) r20.xyz, (r) -r14.xyzx, (r) r12.w, (r) -r18.xyzx  // 162237096 SHD
//         dp3r (r) r12.w, (r) r20.xyzx, (r) r20.xyzx  //   0 SHD
//         rsqr (r) r4105.w, (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         mulr (r) r20.xyz, (r) r12.w, (r) r20.xyzx  //   0 SHD
//         madr (r) r19.xyz, (r) -r14.xyzx, (r) r13.y, (r) r19.xyzx  //   0 SHD
//         dp3r (r) r12.w, (r) r19.xyzx, (r) r19.xyzx  //   0 
//         rsqr (r) r4105.w, (r) r12.w  //   0 SHD
//         movr (r) r12.w, (r) r4105  //   0 SHD
//         mulr (r) r19.xyz, (r) r12.w, (r) r19.xyzx  //   0 SHD
//         dp3r (r) r12.w, (r) r20.xyzx, (r) r19.xyzx  //   0 SHD
//         mulr (r) r13.w, (r) r9.w, (r) r9.w  //   0 SHD
//         madr (r) r19.xyz, (r) r9.w, (r) r9.w, (r) constant(0.33000001, 0.09000000, 0.09000000, 0.00000000)  // 162237064 SHD
//         divr (r) r4105.x, (r) r13.w, (r) r19.x  //   0 SHD
//         divr (r) r4105.y, (r) r13.w, (r) r19.y  //   0 SHD
//         divr (r) r4105.z, (r) r13.w, (r) r19.z  //   0 SHD
//         movr (r) r19.xyz, (r) r4105  //   0 SHD
//         mulr (r) r19.yz, (r) r19.yyzy, (r) constant(0.00000000, 0.44999999, 0.12500000, 0.00000000)  //   0 SHD
//         movu32 (u32) r4105, (u32) constant(1065353216, 0, 0, 0).x  //   0 SHD
//         madr (r) r9.w, (r) -r19.x, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x, (r) r4105  // 162236472 SHDOPT
//         set_ger.c (s32) r13.w, (r) r12.w, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162236472 SHDOPT
//         movr (r) r4105, (r) r14.w  // 162238008 SHD
//         sinr (r) r4106.w, (r) r4105.w  //   0 
//         movr (r) r15.w, (r) r4106  // 162238440 SHDOPT
//         mulr (r) r16.w, (r) r13.z, (r) constant(0.63661975, 0.00000000, 0.00000000, 0.00000000).x  // 162238440 SHDOPT
//         mulr (r) r18.w, (r) r16.w, (r) r16.w  // 162239272 SHD
//         madr (r) r16.w, (r) -r16.w, (r) r18.w, (r) r15.w  // 162239272 SHD
//         movs32.c (s32) hc, (s32) r13.w  // 162239400 SHD
//         movr (r) r4105, (r) r15.w  // 162239400 SHD
//         movr (r) r4105(EQ), (r) r16.w  // 162239832 SHD
//         movr (r) r13.w, (r) r4105  // 162239832 SHD
//         mulr (r) r13.w, (r) r13.w, (r) r19.y  //   0 SHD
//         mulr (r) r15.w, (r) r14.w, (r) r13.z  //   0 SHD
//         mulr (r) r15.w, (r) r15.w, (r) constant(0.40528473, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r15.w, (r) r15.w, (r) r15.w  //   0 SHD
//         mulr (r) r15.w, (r) r15.w, (r) r19.z  //   0 SHD
//         mulr (r) r13.w, (r) r12.w, (r) r13.w  // 162240264 SHD
//         movr (r) r4105, (r) r13.z  // 162240264 SHD
//         sinr (r) r4106.x, (r) r4105.x  // 162240728 
//         movr (r) r19.x, (r) r4106  // 162240728 
//         cosr (r) r4107.x, (r) r4105.x  // 162241176 SHD
//         movr (r) r20.x, (r) r4107  // 162241176 SHD
//         divr (r) r4105.w, (r) r19.x, (r) r20.x  // 162242200 SHD
//         movr (r) r16.w, (r) r4105  // 162242200 SHD
//         addr (r) r12.w, (r) -|r12.w|, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162241560 SHD
//         mulr (r) r12.w, (r) r15.w, (r) r12.w  //   0 SHD
//         addr (r) r13.z, (r) r13.z, (r) r14.w  //   0 SHD
//         mulr (r) r13.z, (r) r13.z, (r) constant(0.50000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4105, (r) r13.z  //   0 SHD
//         sinr (r) r4106.x, (r) r4105.x  //   0 SHD
//         movr (r) r19.x, (r) r4106  //   0 SHD
//         cosr (r) r4107.x, (r) r4105.x  // 162242600 SHD
//         movr (r) r20.x, (r) r4107  // 162242600 SHD
//         divr (r) r4105.z, (r) r19.x, (r) r20.x  // 162243464 SHDOPT
//         movr (r) r13.z, (r) r4105  // 162243464 SHDOPT
//         madr (r) r9.w, (r) r13.w, (r) r16.w, (r) r9.w  // 162243544 SHD
//         madr (r) r9.w, (r) r12.w, (r) r13.z, (r) r9.w  // 162243544 SHD
//         mulr (r) r9.w, (r) r9.w, (r) constant(0.31830987, 0.00000000, 0.00000000, 0.00000000).x  // 162244488 SHDOPT
//         mulr (r) r12.w, (r) r17.w, (r) constant(1.57079637, 0.00000000, 0.00000000, 0.00000000).x  // 162244488 SHDOPT
//         madr (r) r12.xyz, (r) r12.xyzx, (r) r10.x, (r) -r18.xyzx  // 162244440 SHD
//         dp3r (r) r10.x, (r) r12.xyzx, (r) r12.xyzx  // 162244440 SHD
//         rsqr (r) r4105.x, (r) r10.x  //   0 SHD
//         movr (r) r10.x, (r) r4105  //   0 SHD
//         mulr (r) r12.xyz, (r) r10.x, (r) r12.xyzx  //   0 SHD
//         maxr (r) r10.x, (r) r11.w, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         maxr (r) r11.w, (r) r13.x, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r13.x, (r) r14.xyzx, (r) r12.xyzx  // 162244936 SHD
//         maxr (r) r13.x, (r) r13.x, (r) constant(0.00010000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         dp3r (r) r12.x, (r) -r18.xyzx, (r) r12.xyzx  //   0 SHD
//         mulr (r) r12.y, (r) r12.w, (r) r12.w  //   0 SHD
//         mulr (r) r12.z, (r) r13.x, (r) r13.x  //   0 SHD
//         madr (r) r12.w, (r) r13.x, (r) r13.x, (r) constant(-1.00000000, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r13.z, (r) r12.y, (r) r12.z  //   0 SHD
//         divr (r) r4105.w, (r) r12.w, (r) r13.z  // 162245368 SHD
//         movr (r) r12.w, (r) r4105  // 162245368 SHD
//         mulr (r) r12.yw, (r) r12.yyyw, (r) constant(0.00000000, 4.00000000, 0.00000000, 1.44269502)  // 162245832 SHD
//         ex2r (r) r4105.w, (r) r12.w  // 162245832 SHD
//         movr (r) r12.w, (r) r4105  // 162246296 
//         mulr (r) r12.z, (r) r12.z, (r) r12.z  // 162246296 
//         mulr (r) r12.y, (r) r12.z, (r) r12.y  // 162247288 SHD
//         minr (r) r12.z, (r) r10.x, (r) r11.w  // 162247288 SHD
//         dp2r (r) r12.z, (r) r13.x, (r) r12.z  // 162247208 SHD
//         divr (r) r4105.x, (r) r12.z, (r) r12.x  // 162247208 SHD
//         divr (r) r4105.y, (r) r12.w, (r) r12.y  // 162248056 SHD
//         movr (r) r12.xy, (r) r4105  // 162248056 SHD
//         minr (r) r12.x, (r) r12.x, (r) constant(1.00000000, 0.00000000, 0.00000000, 0.00000000).x  // 162248696 SHD
//         mulr (r) r12.x, (r) r12.x, (r) r12.y  // 162248696 SHD
//         mulr (r) r10.x, (r) r10.x, (r) r11.w  // 162248632 
//         divr (r) r4105.x, (r) r12.x, (r) r10.x  // 162248632 
//         movr (r) r10.x, (r) r4105  // 162248632 
//         mulr (r) r12.xyz, (r) r10.x, (r) r17.xyzx  //   2 
//         madr (r) r12.xyz, (r) r16.xyzx, (r) r9.w, (r) r12.xyzx  //   0 SHD
//         mulr (r) r9.xyz, (r) r9.xyzx, (r) r12.xyzx  //   0 SHD
//         mulr (r) r9.xyz, (r) r13.y, (r) r9.xyzx  //   0 SHD
//         mulr (r) r9.xyz, (r) r29.xyzx, (r) r9.xyzx  //   2 SHD
//         l20:  //   2 SHD
//         movu32 (u32) r9.xyz, (u32) constant(0, 0, 0, 0)  //   2 
//         l21:  //   0 SHD
//         l17:  //   0 SHD
//         movu32 (u32) r9.xyz, (u32) constant(0, 0, 0, 0)  //   0 SHD
//         l18:  //   2 SHD
//         movr (r) r4110, (r) c[0][0].xyzx  //   2 SHD
//         movr (r) r4110.x, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4110.y, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         mulr (r) r12.xyz, (r) r9.xyzx, (r) r4110  //   2 SHD
//         movr (r) r4110, (r) c[0][0].xyzx  //   2 SHD
//         movr (r) r4110.x, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   2 
//         movr (r) r4110.y, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.w, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         madr (r) r9.xyz, (r) r9.xyzx, (r) r4110, (r) constant(1.00000000, 1.00000000, 1.00000000, 0.00000000)  //   2 SHD
//         divr (r) r4105.x, (r) r12.x, (r) r9.x  //   2 SHD
//         divr (r) r4105.y, (r) r12.y, (r) r9.y  //   2 
//         divr (r) r4105.z, (r) r12.z, (r) r9.z  //   0 SHD
//         movr (r) r9.xyz, (r) r4105  //   0 SHD
//         addr (r) r9.xyz, (r) r9.xyzx, (r) r11.xyzx  //   0 SHD
//         mulr (r) r11.xyz, (r) r9.xyzx, (r) constant(0.25000000, 0.25000000, 0.25000000, 0.00000000)  //   2 SHD
//         mulr (r) r15.xyz, (r) r15.xyzx, (r) constant(0.25000000, 0.25000000, 0.25000000, 0.00000000)  //   2 SHD
//         movu32 (u32) r4105, (u32) constant(1065353216, 1065353216, 1065353216, 0)  //   2 
//         madr (r) r9.xyz, (r) -r9.xyzx, (r) constant(0.25000000, 0.25000000, 0.25000000, 0.00000000), (r) r4105  //   0 SHD
//         movr (r) r4110, (r) c[0][0].xyzx  //   0 SHD
//         movr (r) r4110.x, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.y, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 SHD
//         movr (r) r4110.z, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   0 FPB0
//         movr (r) r4110.w, (r) constant(15.00045109, 0.00000000, 0.00000000, 0.00000000).x  //   8 
//         mulr (r) r9.xyz, (r) r9.xyzx, (r) r4110  //   0 SHDOPT
//         divr (r) r4105.y, (r) r11.x, (r) r9.x  //   0 SHDOPT
//         divr (r) r4105.z, (r) r11.y, (r) r9.y  //   0 SHD
//         divr (r) r4105.w, (r) r11.z, (r) r9.z  //   2 SHD
//         movr (r) r10.yzw, (r) r4105  //   2 SHD
//         l5:  //   2 
//         l6:  //   0 SHD
//         maxr (r) r0.xyz, (r) r10.yzwy, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)  //   0 SHD
//         maxr (r) r2.xyz, (r) r15.xyzx, (r) constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)  //   0 SHD
//         ret   //   2 SHD
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	IPA.PASS R0, a[0x70];            # [  0][000000] POSITION_X
//     	F2I.TRUNC R50, R0;               # [  1][000008]
//     	IPA.PASS R1, a[0x74];            # [  2][000010] POSITION_Y
//     	SHL.W R0, R50, 0x1;              # [  3][000018]
//     	F2I.TRUNC R51, R1;               # [  4][000020]
//     	SHL.W R1, R51, 0x1;              # [  5][000028]
//     	IPA.PASS R3, a[0x70];            # [  6][000030] POSITION_X
//     	TLD.LZ.P R2, R0, 0x0, 2D, 0x1;   # [  7][000038]
//     	FMUL.FTZ R5, RZ, R3;             # [  8][000040]
//     	IPA.PASS R52, a[0x74];           # [  9][000048] POSITION_Y
//     	FMUL.FTZ R0, RZ, R52;            # [ 10][000050]
//     	SSY L1998;                       # [ 11][000058]
//     	FADD.FTZ R1, R5, R0;             # [ 12][000060]
//     	FFMA.FTZ R3, R3, c[0x10][0x0], R0; # [ 13][000068]
//     	FFMA.FTZ R0, R2, c[0x10][0x8], R1; # [ 14][000070]
//     	FFMA.FTZ R3, RZ, R2, R3;         # [ 15][000078]
//     	FADD32I.FTZ R4, R0, 0x41200001;  # [ 16][000080]
//     	FADD32I.FTZ R6, R3, 0xbf3340cd;  # [ 17][000088]
//     	FFMA.FTZ R0, R52, c[0x10][0x4], R5; # [ 18][000090]
//     	FFMA.FTZ R1, RZ, R2, R1;         # [ 19][000098]
//     	FFMA.FTZ R5, RZ, R2, R0;         # [ 20][0000a0]
//     	MUFU.RCP R7, R4;                 # [ 21][0000a8]
//     	FADD.FTZ R3, R1, -1;             # [ 22][0000b0]
//     	TLD.LZ.P R0, R50, 0x5, 2D, 0x1;  # [ 23][0000b8]
//     	FADD32I.FTZ R5, R5, 0x3ec9a8e5;  # [ 24][0000c0]
//     	FMUL.FTZ R40, R6, R7;            # [ 25][0000c8]
//     	FMUL.FTZ R43, R5, R7;            # [ 26][0000d0]
//     	FMUL.FTZ R1, R40, R40;           # [ 27][0000d8]
//     	FMUL.FTZ R41, R3, R7;            # [ 28][0000e0]
//     	FFMA.FTZ R1, R43, R43, R1;       # [ 29][0000e8]
//     	FFMA.FTZ R1, R41, R41, R1;       # [ 30][0000f0]
//     	MUFU.RSQ R1, R1;                 # [ 31][0000f8]
//     	MUFU.RCP R11, R1;                # [ 32][000100]
//     	MUFU.RCP R1, R11;                # [ 33][000108]
//     	FMNMX.FTZ R9, R11, 100000, PT;   # [ 34][000110]
//     	FMUL.FTZ R33, R40, R1;           # [ 35][000118]
//     	FMUL.FTZ R30, R43, R1;           # [ 36][000120]
//     	FMUL.FTZ R31, R41, R1;           # [ 37][000128]
//     	FMUL.FTZ R2, R33, c[0x2][0xb0];  # [ 38][000130]
//     	FFMA.FTZ R1, R30, c[0x2][0xb4], R2; # [ 39][000138]
//     	FFMA.FTZ R7, R31, c[0x2][0xb8], R1; # [ 40][000140]
//     	FMUL.FTZ R1, R33, c[0x2][0xc0];  # [ 41][000148]
//     	MUFU.RCP R2, R7;                 # [ 42][000150]
//     	FFMA.FTZ R1, R30, c[0x2][0xc4], R1; # [ 43][000158]
//     	FSETP.LT.FTZ.AND P0, PT, R7, RZ, PT; # [ 44][000160]
//     	FMUL.FTZ R8, R2, -c[0x2][0xbc];  # [ 45][000168]
//     	FFMA.FTZ R2, R31, c[0x2][0xc8], R1; # [ 46][000170]
//     	FMNMX.FTZ R8, R8, c[0x10][0xc], !PT; # [ 47][000178]
//     	MUFU.RCP R10, R2;                # [ 48][000180]
//     	FMNMX.FTZ R12, R9, R8, PT;       # [ 49][000188]
//     	FMUL.FTZ R1, R33, c[0x2][0xd0];  # [ 50][000190]
//     	FSETP.LT.FTZ.AND P1, PT, R2, RZ, PT; # [ 51][000198]
//     	FMUL.FTZ R13, R10, -c[0x2][0xcc]; # [ 52][0001a0]
//     	FCMP.LEU.FTZ R10, R9, R12, R7;   # [ 53][0001a8]
//     	FFMA.FTZ R1, R30, c[0x2][0xd4], R1; # [ 54][0001b0]
//     	@!P0 MOV32I R12, 0x3dcccccd;     # [ 55][0001b8]
//     	FCMP.GEU.FTZ R10, R10, R9, R7;   # [ 56][0001c0]
//     	FFMA.FTZ R8, R31, c[0x2][0xd8], R1; # [ 57][0001c8]
//     	FMNMX.FTZ R7, R12, R13, !PT;     # [ 58][0001d0]
//     	FMUL.FTZ R1, R33, c[0x2][0xe0];  # [ 59][0001d8]
//     	MUFU.RCP R13, R8;                # [ 60][0001e0]
//     	FMNMX.FTZ R9, R10, R7, PT;       # [ 61][0001e8]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R2, PT; # [ 62][0001f0]
//     	FFMA.FTZ R1, R30, c[0x2][0xe4], R1; # [ 63][0001f8]
//     	FCMP.GEU.FTZ R2, R12, R9, R2;    # [ 64][000200]
//     	@!P1 SEL R10, R10, R9, !P0;      # [ 65][000208]
//     	FMUL.FTZ R12, R13, -c[0x2][0xdc]; # [ 66][000210]
//     	FFMA.FTZ R7, R31, c[0x2][0xe8], R1; # [ 67][000218]
//     	FMNMX.FTZ R9, R2, R12, !PT;      # [ 68][000220]
//     	FMUL.FTZ R1, R33, c[0x2][0xf0];  # [ 69][000228]
//     	FMNMX.FTZ R9, R10, R9, PT;       # [ 70][000230]
//     	MUFU.RCP R13, R7;                # [ 71][000238]
//     	FCMP.LEU.FTZ R12, R10, R9, R8;   # [ 72][000240]
//     	FFMA.FTZ R1, R30, c[0x2][0xf4], R1; # [ 73][000248]
//     	FCMP.GEU.FTZ R9, R2, R9, R8;     # [ 74][000250]
//     	FMUL.FTZ R13, R13, -c[0x2][0xec]; # [ 75][000258]
//     	FFMA.FTZ R2, R31, c[0x2][0xf8], R1; # [ 76][000260]
//     	FCMP.GEU.FTZ R10, R12, R10, R8;  # [ 77][000268]
//     	FMNMX.FTZ R1, R9, R13, !PT;      # [ 78][000270]
//     	MUFU.RCP R12, R2;                # [ 79][000278]
//     	FMNMX.FTZ R8, R10, R1, PT;       # [ 80][000280]
//     	FSETP.LT.FTZ.AND P1, PT, R7, RZ, PT; # [ 81][000288]
//     	FMUL.FTZ R1, R33, c[0x2][0x100]; # [ 82][000290]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R7, PT; # [ 83][000298]
//     	FMUL.FTZ R12, R12, -c[0x2][0xfc]; # [ 84][0002a0]
//     	FCMP.GEU.FTZ R7, R9, R8, R7;     # [ 85][0002a8]
//     	FFMA.FTZ R1, R30, c[0x2][0x104], R1; # [ 86][0002b0]
//     	@!P1 SEL R10, R10, R8, !P0;      # [ 87][0002b8]
//     	FMNMX.FTZ R8, R7, R12, !PT;      # [ 88][0002c0]
//     	FFMA.FTZ R1, R31, c[0x2][0x108], R1; # [ 89][0002c8]
//     	FMNMX.FTZ R8, R10, R8, PT;       # [ 90][0002d0]
//     	MUFU.RCP R12, R1;                # [ 91][0002d8]
//     	FCMP.LEU.FTZ R9, R10, R8, R2;    # [ 92][0002e0]
//     	FCMP.GEU.FTZ R7, R7, R8, R2;     # [ 93][0002e8]
//     	FMUL.FTZ R8, R12, -c[0x2][0x10c]; # [ 94][0002f0]
//     	FSETP.LT.FTZ.AND P1, PT, R1, RZ, PT; # [ 95][0002f8]
//     	FCMP.GEU.FTZ R12, R9, R10, R2;   # [ 96][000300]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R1, PT; # [ 97][000308]
//     	FMNMX.FTZ R2, R7, R8, !PT;       # [ 98][000310]
//     	FMNMX.FTZ R2, R12, R2, PT;       # [ 99][000318]
//     	FCMP.GEU.FTZ R13, R7, R2, R1;    # [100][000320]
//     	@!P1 SEL R12, R12, R2, !P0;      # [101][000328]
//     	FSETP.LT.FTZ.AND P1, PT, R13, R12, PT; # [102][000330]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R0, PT; # [103][000338]
//     	@!P1 BRA L1968;                  # [104][000340]
//     	MOV R15, c[0x2][0x80];           # [105][000348]
//     	IPA.PASS R0, a[0x70];            # [106][000350] POSITION_X
//     	F2I.U32.TRUNC R0, R0;            # [107][000358]
//     	IPA.PASS R1, a[0x74];            # [108][000360] POSITION_Y
//     	LOP.AND R0, R0, 0x3;             # [109][000368]
//     	F2I.U32.TRUNC R1, R1;            # [110][000370]
//     	LOP.AND R1, R1, 0x3;             # [111][000378]
//     	TLD.LZ.P R20, R0, 0x6, 2D, 0x1;  # [112][000380]
//     	FMUL32I.FTZ R1, R33, 0x3e028e29; # [113][000388]
//     	MOV R14, c[0x2][0x9c];           # [114][000390]
//     	MOV R23, c[0x2][0x84];           # [115][000398]
//     	MOV R0, c[0x2][0x88];            # [116][0003a0]
//     	FFMA.FTZ R2, R30, c[0x10][0x10], R1; # [117][0003a8]
//     	FMUL.FTZ R22, R15, c[0x10][0x18]; # [118][0003b0]
//     	FMUL.FTZ R10, R33, c[0x2][0x40]; # [119][0003b8]
//     	FMUL.FTZ R1, R15, c[0x10][0x24]; # [120][0003c0]
//     	FMUL.FTZ R21, R15, c[0x10][0x28]; # [121][0003c8]
//     	FMUL.FTZ R53, R14, c[0x2][0x9c]; # [122][0003d0]
//     	FMNMX.FTZ R15, R13, 1, !PT;      # [123][0003d8]
//     	FFMA.FTZ R14, R31, c[0x10][0x14], R2; # [124][0003e0]
//     	FFMA.FTZ R28, R23, c[0x10][0x1c], R22; # [125][0003e8]
//     	FMUL.FTZ R8, R33, c[0x2][0x60];  # [126][0003f0]
//     	MUFU.LG2 R22, R15;               # [127][0003f8]
//     	FFMA.FTZ R18, R30, c[0x2][0x44], R10; # [128][000400]
//     	FADD32I.FTZ R26, R14, 0x434de9e8; # [129][000408]
//     	FFMA.FTZ R25, R23, c[0x10][0x10], R1; # [130][000410]
//     	FMUL32I.FTZ R29, R14, 0xba5a740e; # [131][000418]
//     	FADD.FTZ R1, R15, -1;            # [132][000420]
//     	FFMA.FTZ R19, R30, c[0x2][0x64], R8; # [133][000428]
//     	FFMA.FTZ R2, R23, c[0x10][0x2c], R21; # [134][000430]
//     	FMUL32I.FTZ R24, R26, 0xba5a740e; # [135][000438]
//     	FFMA.FTZ R27, R31, c[0x2][0x48], R18; # [136][000440]
//     	FMUL32I.FTZ R21, R14, 0xbd14f209; # [137][000448]
//     	FMNMX.FTZ R18, R1, RZ, !PT;      # [138][000450]
//     	FMUL32I.FTZ R23, R22, 1.20412;   # [139][000458]
//     	FFMA.FTZ R1, R31, c[0x2][0x68], R19; # [140][000460]
//     	FMUL32I.FTZ R34, R24, 0x3fb8aa3b; # [141][000468]
//     	FFMA.FTZ R19, R0, c[0x10][0x20], R28; # [142][000470]
//     	FMUL.FTZ R22, R18, R21;          # [143][000478]
//     	FMUL32I.FTZ R28, R14, 0x3d14f209; # [144][000480]
//     	FMUL.FTZ R35, R18, R29;          # [145][000488]
//     	FMUL32I.FTZ R24, R14, -0.000125; # [146][000490]
//     	FMUL32I.FTZ R29, R26, 0xbd14f209; # [147][000498]
//     	FMUL32I.FTZ R32, R22, 0x3fb8aa3b; # [148][0004a0]
//     	RRO.EX2 R34, R34;                # [149][0004a8]
//     	MUFU.RCP R21, R28;               # [150][0004b0]
//     	FMUL32I.FTZ R35, R35, 0x3fb8aa3b; # [151][0004b8]
//     	FMUL.FTZ R28, R18, R24;          # [152][0004c0]
//     	FMUL32I.FTZ R29, R29, 0x3fb8aa3b; # [153][0004c8]
//     	RRO.EX2 R32, R32;                # [154][0004d0]
//     	MUFU.EX2 R24, R34;               # [155][0004d8]
//     	RRO.EX2 R34, R35;                # [156][0004e0]
//     	RRO.EX2 R29, R29;                # [157][0004e8]
//     	MUFU.EX2 R32, R32;               # [158][0004f0]
//     	FMUL32I.FTZ R28, R28, 0x3fb8aa3b; # [159][0004f8]
//     	FMUL32I.FTZ R26, R26, -0.000125; # [160][000500]
//     	MUFU.EX2 R34, R34;               # [161][000508]
//     	FFMA.FTZ R25, R0, c[0x10][0x14], R25; # [162][000510]
//     	MUFU.EX2 R29, R29;               # [163][000518]
//     	FFMA.FTZ R2, R0, c[0x10][0x30], R2; # [164][000520]
//     	FADD.FTZ R32, -R32, 1;           # [165][000528]
//     	FADD.FTZ R0, R27, c[0x2][0x4c];  # [166][000530]
//     	FMUL32I.FTZ R36, R14, 0x3a5a740e; # [167][000538]
//     	RRO.EX2 R27, R28;                # [168][000540]
//     	FMUL32I.FTZ R26, R26, 0x3fb8aa3b; # [169][000548]
//     	FADD.FTZ R34, -R34, 1;           # [170][000550]
//     	FMUL.FTZ R29, R29, R32;          # [171][000558]
//     	MUFU.RCP R22, R36;               # [172][000560]
//     	RRO.EX2 R26, R26;                # [173][000568]
//     	MUFU.EX2 R27, R27;               # [174][000570]
//     	FMUL.FTZ R32, R24, R34;          # [175][000578]
//     	F2F.FTZ.FLOOR R34, R23;          # [176][000580]
//     	FSETP.NEU.FTZ.AND P1, PT, R14, RZ, PT; # [177][000588]
//     	FMUL32I.FTZ R28, R14, 0.000125;  # [178][000590]
//     	FADD32I.FTZ R38, R25, 0x434de9e8; # [179][000598]
//     	MUFU.EX2 R23, R26;               # [180][0005a0]
//     	FMUL.FTZ R25, R29, R21;          # [181][0005a8]
//     	FADD.FTZ R24, -R27, 1;           # [182][0005b0]
//     	FMUL.FTZ R26, R32, R22;          # [183][0005b8]
//     	@!P1 FMUL32I.FTZ R25, R18, 0x3a12c592; # [184][0005c0]
//     	@!P1 FMUL32I.FTZ R26, R18, 0x3f57a251; # [185][0005c8]
//     	MUFU.RCP R28, R28;               # [186][0005d0]
//     	FMNMX.FTZ R27, R34, RZ, !PT;     # [187][0005d8]
//     	FMUL.FTZ R23, R23, R24;          # [188][0005e0]
//     	FMUL32I.FTZ R22, R38, -0.000125; # [189][0005e8]
//     	FFMA.FTZ R24, R25, 200, R26;     # [190][0005f0]
//     	FMUL32I.FTZ R21, R38, 0xba5a740e; # [191][0005f8]
//     	FMUL32I.FTZ R26, R27, 0.830482;  # [192][000600]
//     	FADD32I.FTZ R42, R19, 0xbf1e4005; # [193][000608]
//     	FMUL.FTZ R23, R23, R28;          # [194][000610]
//     	FMUL32I.FTZ R22, R22, 0x3fb8aa3b; # [195][000618]
//     	@!P1 FMUL32I.FTZ R23, R18, 0x3f797eae; # [196][000620]
//     	FMUL32I.FTZ R25, R24, 0x3cb851eb; # [197][000628]
//     	FMUL32I.FTZ R19, R38, 0xbd14f209; # [198][000630]
//     	FMUL32I.FTZ R21, R21, 0x3fb8aa3b; # [199][000638]
//     	RRO.EX2 R27, R26;                # [200][000640]
//     	FMUL.FTZ R9, R33, c[0x2][0x50];  # [201][000648]
//     	FMUL32I.FTZ R26, R24, 0.012015;  # [202][000650]
//     	RRO.EX2 R22, R22;                # [203][000658]
//     	FFMA.FTZ R25, RZ, R23, R25;      # [204][000660]
//     	FMUL32I.FTZ R18, R19, 0x3fb8aa3b; # [205][000668]
//     	FMUL.FTZ R7, R33, c[0x2][0x70];  # [206][000670]
//     	FMUL32I.FTZ R24, R24, 0.0075;    # [207][000678]
//     	RRO.EX2 R19, R21;                # [208][000680]
//     	FFMA.FTZ R17, R30, c[0x2][0x54], R9; # [209][000688]
//     	MUFU.EX2 R32, R22;               # [210][000690]
//     	FMUL32I.FTZ R21, R25, 0xbfb8aa3b; # [211][000698]
//     	FFMA.FTZ R16, R30, c[0x2][0x74], R7; # [212][0006a0]
//     	FFMA.FTZ R26, RZ, R23, R26;      # [213][0006a8]
//     	FFMA.FTZ R22, RZ, R23, R24;      # [214][0006b0]
//     	FADD32I.FTZ R39, R2, 0xc08ea342; # [215][0006b8]
//     	FFMA.FTZ R17, R31, c[0x2][0x58], R17; # [216][0006c0]
//     	MUFU.EX2 R28, R27;               # [217][0006c8]
//     	RRO.EX2 R2, R21;                 # [218][0006d0]
//     	FMNMX.FTZ R10, R12, 100, PT;     # [219][0006d8]
//     	FFMA.FTZ R16, R31, c[0x2][0x78], R16; # [220][0006e0]
//     	FMUL32I.FTZ R24, R26, 0xbfb8aa3b; # [221][0006e8]
//     	FMUL32I.FTZ R21, R22, 0xbfb8aa3b; # [222][0006f0]
//     	RRO.EX2 R18, R18;                # [223][0006f8]
//     	MUFU.EX2 R34, R19;               # [224][000700]
//     	FADD.FTZ R17, R17, c[0x2][0x5c]; # [225][000708]
//     	FADD.FTZ R19, R0, -c[0x2][0x4c]; # [226][000710]
//     	RRO.EX2 R22, R24;                # [227][000718]
//     	FADD.FTZ R1, R1, c[0x2][0x6c];   # [228][000720]
//     	FSETP.GE.FTZ.AND P1, PT, R28, R10, PT; # [229][000728]
//     	FADD.FTZ R16, R16, c[0x2][0x7c]; # [230][000730]
//     	RRO.EX2 R0, R21;                 # [231][000738]
//     	MUFU.EX2 R23, R18;               # [232][000740]
//     	SSY L0d50;                       # [233][000748]
//     	FADD.FTZ R18, R17, -c[0x2][0x5c]; # [234][000750]
//     	MOV R9, RZ;                      # [235][000758]
//     	MOV R8, RZ;                      # [236][000760]
//     	MOV R7, RZ;                      # [237][000768]
//     	MUFU.EX2 R24, R2;                # [238][000770]
//     	FADD.FTZ R17, R1, -c[0x2][0x6c]; # [239][000778]
//     	FADD.FTZ R16, R16, -c[0x2][0x7c]; # [240][000780]
//     	FMUL32I.FTZ R29, R28, 0x3fe39ea9; # [241][000788]
//     	MUFU.EX2 R25, R22;               # [242][000790]
//     	MUFU.EX2 R26, R0;                # [243][000798]
//     	@P1 BRA L0d48;                   # [244][0007a0]
//     	MUFU.RCP R22, R53;               # [245][0007a8]
//     	NOP;                             # [246][0007b0]
//     L07b8:
//     	FMNMX.FTZ R27, R15, R28, !PT;    # [247][0007b8]
//     	FMNMX.FTZ R28, R10, R29, PT;     # [248][0007c0]
//     	MUFU.RCP R0, R27;                # [249][0007c8]
//     	FMUL.FTZ R0, R28, R0;            # [250][0007d0]
//     	FMUL32I.FTZ R58, R29, 0x3fe39ea9; # [251][0007d8]
//     	MUFU.LG2 R0, R0;                 # [252][0007e0]
//     	MOV32I R59, 0x3f800000;          # [253][0007e8]
//     	FMUL.FTZ R0, R20, R0;            # [254][0007f0]
//     	RRO.EX2 R0, R0;                  # [255][0007f8]
//     	MUFU.EX2 R0, R0;                 # [256][000800]
//     	FMUL.FTZ R46, R27, R0;           # [257][000808]
//     	FFMA.FTZ R0, R46, R16, c[0x2][0x7c]; # [258][000810]
//     	FMUL.FTZ R35, R33, R46;          # [259][000818]
//     	FFMA.FTZ R1, R46, R19, c[0x2][0x4c]; # [260][000820]
//     	MUFU.RCP R56, R0;                # [261][000828]
//     	FFMA.FTZ R2, R46, R18, c[0x2][0x5c]; # [262][000830]
//     	FMUL.FTZ R0, R1, R56;            # [263][000838]
//     	FMUL.FTZ R1, R2, R56;            # [264][000840]
//     	FMUL.FTZ R37, R30, R46;          # [265][000848]
//     	FMUL32I.FTZ R45, R35, 0x3f3ee4d0; # [266][000850]
//     	TEX.LZ.NODEP.T R21, R0, 0x8, 0x1, 2D, 0x1; # [267][000858]
//     	FMUL32I.FTZ R36, R35, 0x3e028e29; # [268][000860]
//     	TEX.LZ.NODEP.P R0, R0, 0x7, 0x0, 2D, 0x7; # [269][000868]
//     	FMUL.FTZ R44, R31, R46;          # [270][000870]
//     	FFMA.FTZ R45, R37, c[0x10][0x1c], R45; # [271][000878]
//     	FMUL32I.FTZ R47, R35, 0xbf276c23; # [272][000880]
//     	FFMA.FTZ R48, R46, R14, c[0x10][0x34]; # [273][000888]
//     	FFMA.FTZ R35, R37, c[0x10][0x10], R36; # [274][000890]
//     	FFMA.FTZ R36, R44, c[0x10][0x20], R45; # [275][000898]
//     	FFMA.FTZ R37, R37, c[0x10][0x2c], R47; # [276][0008a0]
//     	FFMA.FTZ R35, R44, c[0x10][0x14], R35; # [277][0008a8]
//     	FADD32I.FTZ R36, R36, 0xbf1e4005; # [278][0008b0]
//     	FFMA.FTZ R37, R44, c[0x10][0x30], R37; # [279][0008b8]
//     	FADD32I.FTZ R35, R35, 0x434de9e8; # [280][0008c0]
//     	FADD.FTZ R36, -R42, R36;         # [281][0008c8]
//     	FADD32I.FTZ R37, R37, 0xc08ea342; # [282][0008d0]
//     	FADD.FTZ R35, -R38, R35;         # [283][0008d8]
//     	FMUL.FTZ R36, R36, R36;          # [284][0008e0]
//     	FADD.FTZ R37, -R39, R37;         # [285][0008e8]
//     	FFMA.FTZ R36, R35, R35, R36;     # [286][0008f0]
//     	FADD.FTZ R47, -R27, R28;         # [287][0008f8]
//     	FFMA.FTZ R36, R37, R37, R36;     # [288][000900]
//     	FMUL32I.FTZ R28, R48, 0xbd14f209; # [289][000908]
//     	FMUL32I.FTZ R37, R48, -0.000125; # [290][000910]
//     	MUFU.RSQ R27, R36;               # [291][000918]
//     	FMUL32I.FTZ R36, R48, 0xba5a740e; # [292][000920]
//     	FMUL32I.FTZ R37, R37, 0x3fb8aa3b; # [293][000928]
//     	FFMA.FTZ R61, R46, -R33, c[0x2][0x80]; # [294][000930]
//     	FMUL.FTZ R35, R35, R27;          # [295][000938]
//     	FMUL32I.FTZ R48, R36, 0x3fb8aa3b; # [296][000940]
//     	RRO.EX2 R54, R37;                # [297][000948]
//     	FMUL32I.FTZ R37, R28, 0x3fb8aa3b; # [298][000950]
//     	FFMA.FTZ R44, R46, -R30, c[0x2][0x84]; # [299][000958]
//     	FMUL.FTZ R36, R61, R61;          # [300][000960]
//     	MUFU.RCP R27, R27;               # [301][000968]
//     	RRO.EX2 R49, R48;                # [302][000970]
//     	FMUL32I.FTZ R28, R35, 0xbd14f209; # [303][000978]
//     	RRO.EX2 R48, R37;                # [304][000980]
//     	FFMA.FTZ R45, R46, -R31, c[0x2][0x88]; # [305][000988]
//     	FMUL32I.FTZ R37, R35, 0xba5a740e; # [306][000990]
//     	FFMA.FTZ R36, R44, R44, R36;     # [307][000998]
//     	FMUL.FTZ R55, R27, R28;          # [308][0009a0]
//     	FMUL.FTZ R60, R27, R37;          # [309][0009a8]
//     	MOV R28, R29;                    # [310][0009b0]
//     	FFMA.FTZ R36, R45, R45, R36;     # [311][0009b8]
//     	FFMA.FTZ R57, R46, R17, c[0x2][0x6c]; # [312][0009c0]
//     	FMUL32I.FTZ R29, R55, 0x3fb8aa3b; # [313][0009c8]
//     	FMUL32I.FTZ R60, R60, 0x3fb8aa3b; # [314][0009d0]
//     	FMUL32I.FTZ R37, R35, -0.000125; # [315][0009d8]
//     	MUFU.RSQ R46, R36;               # [316][0009e0]
//     	FADD.FTZ R55, R36, 1;            # [317][0009e8]
//     	RRO.EX2 R29, R29;                # [318][0009f0]
//     	MUFU.EX2 R49, R49;               # [319][0009f8]
//     	RRO.EX2 R60, R60;                # [320][000a00]
//     	MUFU.EX2 R48, R48;               # [321][000a08]
//     	FMUL.FTZ R37, R27, R37;          # [322][000a10]
//     	FMUL.FTZ R36, R36, R22;          # [323][000a18]
//     	MUFU.EX2 R29, R29;               # [324][000a20]
//     	FMUL.FTZ R61, R46, R61;          # [325][000a28]
//     	FMUL.FTZ R57, R57, R56;          # [326][000a30]
//     	FMUL.FTZ R44, R46, R44;          # [327][000a38]
//     	FMUL.FTZ R45, R46, R45;          # [328][000a40]
//     	MUFU.EX2 R60, R60;               # [329][000a48]
//     	FMUL32I.FTZ R37, R37, 0x3fb8aa3b; # [330][000a50]
//     	FFMA.FTZ R56, R36, -R36, R59;    # [331][000a58]
//     	MUFU.EX2 R54, R54;               # [332][000a60]
//     	FFMA.FTZ R46, R48, 200, R49;     # [333][000a68]
//     	FMUL32I.FTZ R36, R35, 0x3d14f209; # [334][000a70]
//     	FMUL.FTZ R49, R33, R61;          # [335][000a78]
//     	FMUL32I.FTZ R48, R35, 0x3a5a740e; # [336][000a80]
//     	FADD.FTZ R29, -R29, 1;           # [337][000a88]
//     	RRO.EX2 R37, R37;                # [338][000a90]
//     	FADD.FTZ R60, -R60, 1;           # [339][000a98]
//     	MUFU.RCP R36, R36;               # [340][000aa0]
//     	FMUL.FTZ R54, R47, R54;          # [341][000aa8]
//     	FMUL.FTZ R46, R47, R46;          # [342][000ab0]
//     	FFMA.FTZ R44, R30, R44, R49;     # [343][000ab8]
//     	MUFU.RCP R47, R48;               # [344][000ac0]
//     	FMUL.FTZ R49, R23, R29;          # [345][000ac8]
//     	MUFU.EX2 R37, R37;               # [346][000ad0]
//     	FMUL.FTZ R60, R34, R60;          # [347][000ad8]
//     	FSETP.NEU.FTZ.AND P1, PT, R35, RZ, PT; # [348][000ae0]
//     	FMUL32I.FTZ R48, R35, 0.000125;  # [349][000ae8]
//     	FMUL.FTZ R35, R49, R36;          # [350][000af0]
//     	FADD.FTZ R37, -R37, 1;           # [351][000af8]
//     	FMUL.FTZ R49, R60, R47;          # [352][000b00]
//     	@!P1 FMUL.FTZ R35, R23, R27;     # [353][000b08]
//     	@!P1 FMUL.FTZ R49, R34, R27;     # [354][000b10]
//     	FMUL32I.FTZ R36, R46, 0.012015;  # [355][000b18]
//     	MUFU.RCP R47, R48;               # [356][000b20]
//     	FMUL32I.FTZ R29, R46, 0.0075;    # [357][000b28]
//     	FMUL.FTZ R37, R32, R37;          # [358][000b30]
//     	FFMA.FTZ R35, R35, 200, R49;     # [359][000b38]
//     	FFMA.FTZ R49, RZ, R54, R36;      # [360][000b40]
//     	FFMA.FTZ R48, RZ, R54, R29;      # [361][000b48]
//     	FFMA.FTZ R44, R31, R45, R44;     # [362][000b50]
//     	FMUL.FTZ R36, R37, R47;          # [363][000b58]
//     	@!P1 FMUL.FTZ R36, R32, R27;     # [364][000b60]
//     	FMUL32I.FTZ R45, R48, 0xbfb8aa3b; # [365][000b68]
//     	FMUL32I.FTZ R27, R35, 0.0075;    # [366][000b70]
//     	FMNMX.FTZ R29, R56, RZ, !PT;     # [367][000b78]
//     	FFMA.FTZ R47, R44, c[0x10][0x38], R59; # [368][000b80]
//     	FMUL32I.FTZ R56, R49, 0xbfb8aa3b; # [369][000b88]
//     	RRO.EX2 R49, R45;                # [370][000b90]
//     	FFMA.FTZ R44, RZ, R36, R27;      # [371][000b98]
//     	FMUL.FTZ R48, R47, R47;          # [372][000ba0]
//     	FMUL32I.FTZ R45, R35, 0.012015;  # [373][000ba8]
//     	FMUL32I.FTZ R37, R46, 0x3cb851eb; # [374][000bb0]
//     	FMUL32I.FTZ R44, R44, 0xbfb8aa3b; # [375][000bb8]
//     	FMUL32I.FTZ R48, R48, 0x41490fdb; # [376][000bc0]
//     	FFMA.FTZ R45, RZ, R36, R45;      # [377][000bc8]
//     	FMUL32I.FTZ R47, R35, 0x3cb851eb; # [378][000bd0]
//     	MUFU.EX2 R27, R49;               # [379][000bd8]
//     	RRO.EX2 R44, R44;                # [380][000be0]
//     	FFMA.FTZ R37, RZ, R54, R37;      # [381][000be8]
//     	MUFU.RCP R48, R48;               # [382][000bf0]
//     	FMUL32I.FTZ R45, R45, 0xbfb8aa3b; # [383][000bf8]
//     	FFMA.FTZ R47, RZ, R36, R47;      # [384][000c00]
//     	MUFU.RCP R55, R55;               # [385][000c08]
//     	FMUL32I.FTZ R36, R37, 0xbfb8aa3b; # [386][000c10]
//     	FMUL32I.FTZ R47, R47, 0xbfb8aa3b; # [387][000c18]
//     	RRO.EX2 R37, R45;                # [388][000c20]
//     	RRO.EX2 R56, R56;                # [389][000c28]
//     	FSET.BF.GE.FTZ.AND R49, R21, R57, PT; # [390][000c30]
//     	FMUL.FTZ R26, R26, R27;          # [391][000c38]
//     	MUFU.EX2 R21, R44;               # [392][000c40]
//     	FMUL.FTZ R45, R49, R1;           # [393][000c48]
//     	FMUL.FTZ R44, R49, R2;           # [394][000c50]
//     	RRO.EX2 R1, R47;                 # [395][000c58]
//     	FMUL32I.FTZ R2, R48, 0x3b9d4951; # [396][000c60]
//     	RRO.EX2 R47, R36;                # [397][000c68]
//     	FMUL.FTZ R48, R49, R0;           # [398][000c70]
//     	MUFU.EX2 R1, R1;                 # [399][000c78]
//     	MUFU.EX2 R0, R37;                # [400][000c80]
//     	FMUL.FTZ R2, R46, R2;            # [401][000c88]
//     	FMUL.FTZ R37, R29, R44;          # [402][000c90]
//     	MUFU.EX2 R35, R56;               # [403][000c98]
//     	FMUL.FTZ R44, R29, R45;          # [404][000ca0]
//     	FFMA.FTZ R2, RZ, R54, R2;        # [405][000ca8]
//     	FMUL.FTZ R45, R29, R48;          # [406][000cb0]
//     	FMUL.FTZ R36, R55, R44;          # [407][000cb8]
//     	FMUL.FTZ R29, R55, R37;          # [408][000cc0]
//     	MUFU.EX2 R44, R47;               # [409][000cc8]
//     	FMUL.FTZ R37, R55, R45;          # [410][000cd0]
//     	FMUL.FTZ R0, R0, R36;            # [411][000cd8]
//     	FMUL.FTZ R21, R21, R29;          # [412][000ce0]
//     	FMUL.FTZ R27, R1, R37;           # [413][000ce8]
//     	FMUL.FTZ R1, R0, R2;             # [414][000cf0]
//     	FSETP.GE.FTZ.AND P1, PT, R28, R10, PT; # [415][000cf8]
//     	FMUL.FTZ R0, R21, R2;            # [416][000d00]
//     	FMUL.FTZ R25, R25, R35;          # [417][000d08]
//     	FMUL.FTZ R24, R24, R44;          # [418][000d10]
//     	FMUL.FTZ R2, R27, R2;            # [419][000d18]
//     	MOV R29, R58;                    # [420][000d20]
//     	FFMA.FTZ R9, R0, R26, R9;        # [421][000d28]
//     	FFMA.FTZ R8, R1, R25, R8;        # [422][000d30]
//     	FFMA.FTZ R7, R2, R24, R7;        # [423][000d38]
//     	@!P1 BRA L07b8;                  # [424][000d40]
//     L0d48:
//     	FSETP.GE.FTZ.AND.S P1, PT, R12, R11, PT; # [425][000d48]
//     L0d50:
//     	FSETP.LT.FTZ.AND P1, PT, R13, R11, P1; # [426][000d50]
//     	FMUL.FTZ R22, R9, c[0x2][0x98];  # [427][000d58]
//     	FMUL.FTZ R21, R8, c[0x2][0x94];  # [428][000d60]
//     	FMUL.FTZ R20, R7, c[0x2][0x90];  # [429][000d68]
//     	@!P1 BRA L1950;                  # [430][000d70]
//     	FMUL.FTZ R1, R6, c[0x2][0x70];   # [431][000d78]
//     	FMUL.FTZ R0, R6, c[0x2][0x60];   # [432][000d80]
//     	MUFU.RCP R53, R53;               # [433][000d88]
//     	FFMA.FTZ R1, R5, c[0x2][0x74], R1; # [434][000d90]
//     	FFMA.FTZ R0, R5, c[0x2][0x64], R0; # [435][000d98]
//     	FFMA.FTZ R1, R3, c[0x2][0x78], R1; # [436][000da0]
//     	FFMA.FTZ R0, R3, c[0x2][0x68], R0; # [437][000da8]
//     	FFMA.FTZ R1, R4, c[0x2][0x7c], R1; # [438][000db0]
//     	FMUL.FTZ R2, R6, c[0x2][0x40];   # [439][000db8]
//     	MOV R7, c[0x2][0x9c];            # [440][000dc0]
//     	MUFU.RCP R28, R1;                # [441][000dc8]
//     	FMUL.FTZ R6, R6, c[0x2][0x50];   # [442][000dd0]
//     	MUFU.RCP R1, R7;                 # [443][000dd8]
//     	FFMA.FTZ R47, R4, c[0x2][0x6c], R0; # [444][000de0]
//     	FFMA.FTZ R2, R5, c[0x2][0x44], R2; # [445][000de8]
//     	FFMA.FTZ R5, R5, c[0x2][0x54], R6; # [446][000df0]
//     	FFMA.FTZ R0, R47, R28, c[0x10][0x40]; # [447][000df8]
//     	FFMA.FTZ R2, R3, c[0x2][0x48], R2; # [448][000e00]
//     	FMUL.FTZ R0, R0, R1;             # [449][000e08]
//     	FFMA.FTZ R3, R3, c[0x2][0x58], R5; # [450][000e10]
//     	FMUL.FTZ R0, R0, 0.75;           # [451][000e18]
//     	FFMA.FTZ R1, R4, c[0x2][0x4c], R2; # [452][000e20]
//     	FFMA.FTZ R3, R4, c[0x2][0x5c], R3; # [453][000e28]
//     	FMNMX.FTZ R18, R0, -c[0x10][0x3c], !PT; # [454][000e30]
//     	FMUL.FTZ R4, R1, R28;            # [455][000e38]
//     	FMUL.FTZ R5, R3, R28;            # [456][000e40]
//     	FFMA.FTZ R0, R18, c[0x10][0x44], R4; # [457][000e48]
//     	FFMA.FTZ R1, R18, c[0x10][0x44], R5; # [458][000e50]
//     	FFMA.FTZ R11, R18, 0.875, R5;    # [459][000e58]
//     	FFMA.FTZ R10, R18, RZ, R4;       # [460][000e60]
//     	FFMA.FTZ R17, R18, c[0x10][0x48], R5; # [461][000e68]
//     	FFMA.FTZ R16, R18, -c[0x10][0x48], R4; # [462][000e70]
//     	FFMA.FTZ R13, R18, c[0x10][0x4c], R5; # [463][000e78]
//     	FFMA.FTZ R3, R18, RZ, R5;        # [464][000e80]
//     	TEX.LZ.NODEP R27, R0, 0x8, 0x1, 2D, 0x1; # [465][000e88]
//     	FADD.FTZ R14, R18, R4;           # [466][000e90]
//     	TEX.LZ.NODEP.P R29, R10, 0x8, 0x1, 2D, 0x1; # [467][000e98]
//     	FFMA.FTZ R12, R18, c[0x10][0x4c], R4; # [468][000ea0]
//     	FFMA.FTZ R11, R18, -0.625, R5;   # [469][000ea8]
//     	FFMA.FTZ R9, R18, c[0x10][0x50], R5; # [470][000eb0]
//     	FFMA.FTZ R8, R18, -c[0x10][0x50], R4; # [471][000eb8]
//     	FFMA.FTZ R2, R18, -0.75, R4;     # [472][000ec0]
//     	FFMA.FTZ R6, R18, 0.5, R4;       # [473][000ec8]
//     	FFMA.FTZ R1, R18, c[0x10][0x54], R5; # [474][000ed0]
//     	FFMA.FTZ R0, R18, c[0x10][0x58], R4; # [475][000ed8]
//     	MOV R15, R3;                     # [476][000ee0]
//     	TEX.LZ.NODEP R35, R16, 0x8, 0x1, 2D, 0x1; # [477][000ee8]
//     	MOV R7, R3;                      # [478][000ef0]
//     	TEX.LZ.NODEP R36, R12, 0x8, 0x1, 2D, 0x1; # [479][000ef8]
//     	FFMA.FTZ R16, R18, -0.0625, R4;  # [480][000f00]
//     	TEX.LZ.NODEP R37, R14, 0x8, 0x1, 2D, 0x1; # [481][000f08]
//     	FFMA.FTZ R14, R18, 0.1875, R4;   # [482][000f10]
//     	TEX.LZ.NODEP R44, R10, 0x8, 0x1, 2D, 0x1; # [483][000f18]
//     	TEX.LZ.NODEP R45, R8, 0x8, 0x1, 2D, 0x1; # [484][000f20]
//     	SHL.W R9, R51, 0x1;              # [485][000f28]
//     	TEX.LZ.NODEP.P R46, R2, 0x8, 0x1, 2D, 0x1; # [486][000f30]
//     	TEX.LZ.NODEP R48, R6, 0x8, 0x1, 2D, 0x1; # [487][000f38]
//     	SHL.W R8, R50, 0x1;              # [488][000f40]
//     	TEX.LZ.NODEP.P R49, R0, 0x8, 0x1, 2D, 0x1; # [489][000f48]
//     	TLD.LZ.NODEP.P R0, R8, 0x1, 2D, 0x7; # [490][000f50]
//     	FFMA.FTZ R11, R18, c[0x10][0x5c], R5; # [491][000f58]
//     	FFMA.FTZ R10, R18, c[0x10][0x60], R4; # [492][000f60]
//     	FFMA.FTZ R7, R18, c[0x10][0x64], R5; # [493][000f68]
//     	FFMA.FTZ R6, R18, c[0x10][0x68], R4; # [494][000f70]
//     	FFMA.FTZ R13, R18, c[0x10][0x6c], R5; # [495][000f78]
//     	FFMA.FTZ R12, R18, c[0x10][0x70], R4; # [496][000f80]
//     	FFMA.FTZ R17, R18, c[0x10][0x74], R5; # [497][000f88]
//     	FFMA.FTZ R19, R18, c[0x10][0x78], R5; # [498][000f90]
//     	FFMA.FTZ R18, R18, -0.03125, R4; # [499][000f98]
//     	TEX.LZ.NODEP R3, R10, 0x8, 0x1, 2D, 0x1; # [500][000fa0]
//     	TEX.LZ.NODEP R54, R12, 0x8, 0x1, 2D, 0x1; # [501][000fa8]
//     	TEX.LZ.NODEP R15, R14, 0x8, 0x1, 2D, 0x1; # [502][000fb0]
//     	TEX.LZ.NODEP R55, R6, 0x8, 0x1, 2D, 0x1; # [503][000fb8]
//     	FMUL32I.FTZ R6, R40, 0xbf276c23; # [504][000fc0]
//     	TEX.LZ.NODEP.P R16, R16, 0x8, 0x1, 2D, 0x1; # [505][000fc8]
//     	TEX.LZ.NODEP.T R17, R18, 0x8, 0x1, 2D, 0x1; # [506][000fd0]
//     	TEX.LZ.NODEP.P R12, R4, 0x7, 0x0, 2D, 0x7; # [507][000fd8]
//     	FMUL32I.FTZ R5, R40, 0x3f3ee4d0; # [508][000fe0]
//     	TLD.LZ.NODEP.P R18, R8, 0x4, 2D, 0x1; # [509][000fe8]
//     	FMUL32I.FTZ R4, R40, 0x3e028e29; # [510][000ff0]
//     	FFMA.FTZ R5, R43, c[0x10][0x1c], R5; # [511][000ff8]
//     	FFMA.FTZ R4, R43, c[0x10][0x10], R4; # [512][001000]
//     	FFMA.FTZ R5, R41, c[0x10][0x20], R5; # [513][001008]
//     	FFMA.FTZ R6, R43, c[0x10][0x2c], R6; # [514][001010]
//     	FFMA.FTZ R4, R41, c[0x10][0x14], R4; # [515][001018]
//     	FADD32I.FTZ R5, R5, 0xbf1e4005;  # [516][001020]
//     	FADD.FTZ R19, -R40, c[0x2][0x80]; # [517][001028]
//     	FADD32I.FTZ R4, R4, 0x434de9e8;  # [518][001030]
//     	FFMA.FTZ R6, R41, c[0x10][0x30], R6; # [519][001038]
//     	FADD.FTZ R5, -R42, R5;           # [520][001040]
//     	FADD.FTZ R40, -R43, c[0x2][0x84]; # [521][001048]
//     	FMUL.FTZ R7, R19, R19;           # [522][001050]
//     	FADD.FTZ R10, -R38, R4;          # [523][001058]
//     	FADD32I.FTZ R6, R6, 0xc08ea342;  # [524][001060]
//     	FMUL.FTZ R4, R5, R5;             # [525][001068]
//     	FADD.FTZ R38, -R41, c[0x2][0x88]; # [526][001070]
//     	FFMA.FTZ R7, R40, R40, R7;       # [527][001078]
//     	FADD.FTZ R5, -R39, R6;           # [528][001080]
//     	FFMA.FTZ R4, R10, R10, R4;       # [529][001088]
//     	FFMA.FTZ R42, R38, R38, R7;      # [530][001090]
//     	FFMA.FTZ R11, R5, R5, R4;        # [531][001098]
//     	MUFU.RSQ R43, R42;               # [532][0010a0]
//     	TLD.LZ.NODEP.P R4, R8, 0x3, 2D;  # [533][0010a8]
//     	MUFU.RSQ R11, R11;               # [534][0010b0]
//     	FFMA.FTZ R39, R19, R43, -R33;    # [535][0010b8]
//     	FFMA.FTZ R57, R40, R43, -R30;    # [536][0010c0]
//     	FMUL.FTZ R41, R10, R11;          # [537][0010c8]
//     	MUFU.RCP R56, R11;               # [538][0010d0]
//     	FFMA.FTZ R28, R47, R28, c[0x10][0x3c]; # [539][0010d8]
//     	FMUL.FTZ R60, R39, R39;          # [540][0010e0]
//     	TLD.LZ.NODEP.P R8, R8, 0x2, 2D;  # [541][0010e8]
//     	FMUL32I.FTZ R62, R41, -0.000125; # [542][0010f0]
//     	FMUL32I.FTZ R61, R41, 0xbd14f209; # [543][0010f8]
//     	FMUL32I.FTZ R59, R41, 0xba5a740e; # [544][001100]
//     	FMUL.FTZ R62, R56, R62;          # [545][001108]
//     	FMUL.FTZ R61, R56, R61;          # [546][001110]
//     	FMUL.FTZ R59, R56, R59;          # [547][001118]
//     	FMUL32I.FTZ R62, R62, 0x3fb8aa3b; # [548][001120]
//     	FFMA.FTZ R58, R38, R43, -R31;    # [549][001128]
//     	FMUL32I.FTZ R61, R61, 0x3fb8aa3b; # [550][001130]
//     	FMUL32I.FTZ R59, R59, 0x3fb8aa3b; # [551][001138]
//     	RRO.EX2 R47, R62;                # [552][001140]
//     	FMUL.FTZ R19, R43, R19;          # [553][001148]
//     	FMUL.FTZ R40, R43, R40;          # [554][001150]
//     	FMUL.FTZ R38, R43, R38;          # [555][001158]
//     	RRO.EX2 R61, R61;                # [556][001160]
//     	RRO.EX2 R59, R59;                # [557][001168]
//     	FFMA.FTZ R60, R57, R57, R60;     # [558][001170]
//     	MUFU.EX2 R43, R47;               # [559][001178]
//     	FMUL32I.FTZ R62, R41, 0x3d14f209; # [560][001180]
//     	FSETP.NEU.FTZ.AND P1, PT, R41, RZ, PT; # [561][001188]
//     	MUFU.EX2 R61, R61;               # [562][001190]
//     	FMUL32I.FTZ R47, R41, 0x3a5a740e; # [563][001198]
//     	FFMA.FTZ R60, R58, R58, R60;     # [564][0011a0]
//     	MUFU.EX2 R59, R59;               # [565][0011a8]
//     	FMUL32I.FTZ R41, R41, 0.000125;  # [566][0011b0]
//     	FADD.FTZ R43, -R43, 1;           # [567][0011b8]
//     	MUFU.RSQ R60, R60;               # [568][0011c0]
//     	FADD.FTZ R61, -R61, 1;           # [569][0011c8]
//     	FADD.FTZ R59, -R59, 1;           # [570][0011d0]
//     	MUFU.RCP R41, R41;               # [571][0011d8]
//     	FMUL.FTZ R43, R32, R43;          # [572][0011e0]
//     	MUFU.RCP R62, R62;               # [573][0011e8]
//     	MUFU.RCP R47, R47;               # [574][0011f0]
//     	FMUL.FTZ R61, R23, R61;          # [575][0011f8]
//     	FMUL.FTZ R59, R34, R59;          # [576][001200]
//     	FMUL.FTZ R39, R60, R39;          # [577][001208]
//     	FMUL.FTZ R41, R43, R41;          # [578][001210]
//     	FMUL.FTZ R57, R60, R57;          # [579][001218]
//     	FMUL.FTZ R58, R60, R58;          # [580][001220]
//     	@!P1 FMUL.FTZ R41, R56, R32;     # [581][001228]
//     	FMUL.FTZ R60, R61, R62;          # [582][001230]
//     	FMUL.FTZ R47, R59, R47;          # [583][001238]
//     	FMUL.FTZ R32, R33, -R39;         # [584][001240]
//     	FSET.BF.GE.FTZ.AND R36, R36, R28, PT; # [585][001248]
//     	FSET.BF.GE.FTZ.AND R37, R37, R28, PT; # [586][001250]
//     	@!P1 FMUL.FTZ R60, R56, R23;     # [587][001258]
//     	@!P1 FMUL.FTZ R47, R56, R34;     # [588][001260]
//     	FSET.BF.GE.FTZ.AND R27, R27, R28, PT; # [589][001268]
//     	FSET.BF.GE.FTZ.AND R56, R29, R28, PT; # [590][001270]
//     	FSET.BF.GE.FTZ.AND R44, R44, R28, PT; # [591][001278]
//     	FFMA.FTZ R29, R30, -R57, R32;    # [592][001280]
//     	FADD.FTZ R36, R37, R36;          # [593][001288]
//     	FFMA.FTZ R32, R60, 200, R47;     # [594][001290]
//     	FADD.FTZ R37, R27, R56;          # [595][001298]
//     	FSET.BF.GE.FTZ.AND R47, R35, R28, PT; # [596][0012a0]
//     	FADD.FTZ R36, R36, R44;          # [597][0012a8]
//     	FSET.BF.GE.FTZ.AND R44, R45, R28, PT; # [598][0012b0]
//     	MOV32I R43, -0x40800000;         # [599][0012b8]
//     	FADD.FTZ R45, R37, R47;          # [600][0012c0]
//     	FSET.BF.GE.FTZ.AND R46, R46, R28, PT; # [601][0012c8]
//     	FSET.BF.GE.FTZ.AND R47, R48, R28, PT; # [602][0012d0]
//     	FMUL32I.FTZ R27, R32, 0.0075;    # [603][0012d8]
//     	FSET.BF.GE.FTZ.AND R48, R49, R28, PT; # [604][0012e0]
//     	FMUL32I.FTZ R35, R32, 0.012015;  # [605][0012e8]
//     	FMUL32I.FTZ R37, R32, 0x3cb851eb; # [606][0012f0]
//     	FADD.FTZ R45, R45, R46;          # [607][0012f8]
//     	FFMA.FTZ R32, R0, 2, R43;        # [608][001300]
//     	FADD.FTZ R47, R47, R48;          # [609][001308]
//     	FSET.BF.GE.FTZ.AND R48, R3, R28, PT; # [610][001310]
//     	FSET.BF.GE.FTZ.AND R46, R54, R28, PT; # [611][001318]
//     	FSET.BF.GE.FTZ.AND R3, R15, R28, PT; # [612][001320]
//     	FADD.FTZ R44, R36, R44;          # [613][001328]
//     	FFMA.FTZ R36, R1, 2, R43;        # [614][001330]
//     	FMUL.FTZ R0, R32, R32;           # [615][001338]
//     	FSET.BF.GE.FTZ.AND R1, R16, R28, PT; # [616][001340]
//     	FADD.FTZ R47, R47, R48;          # [617][001348]
//     	FADD.FTZ R3, R3, R46;            # [618][001350]
//     	FSET.BF.GE.FTZ.AND R48, R55, R28, PT; # [619][001358]
//     	FFMA.FTZ R16, R2, 2, R43;        # [620][001360]
//     	FFMA.FTZ R0, R36, R36, R0;       # [621][001368]
//     	FFMA.FTZ R46, RZ, R41, R37;      # [622][001370]
//     	FADD.FTZ R2, R1, R3;             # [623][001378]
//     	FADD.FTZ R15, R45, R44;          # [624][001380]
//     	FADD.FTZ R37, R47, R48;          # [625][001388]
//     	FFMA.FTZ R0, R16, R16, R0;       # [626][001390]
//     	FFMA.FTZ R27, RZ, R41, R27;      # [627][001398]
//     	FADD.FTZ R3, R15, R37;           # [628][0013a0]
//     	FSET.BF.GE.FTZ.AND R1, R17, R28, PT; # [629][0013a8]
//     	FFMA.FTZ R28, RZ, R41, R35;      # [630][0013b0]
//     	MUFU.RSQ R17, R0;                # [631][0013b8]
//     	FMUL32I.FTZ R41, R46, 0xbfb8aa3b; # [632][0013c0]
//     	FADD.FTZ R2, R1, R2;             # [633][0013c8]
//     	FMUL32I.FTZ R35, R28, 0xbfb8aa3b; # [634][0013d0]
//     	FFMA.FTZ R1, R31, -R58, R29;     # [635][0013d8]
//     	FMUL32I.FTZ R28, R27, 0xbfb8aa3b; # [636][0013e0]
//     	RRO.EX2 R37, R41;                # [637][0013e8]
//     	FADD.FTZ R27, R2, R3;            # [638][0013f0]
//     	FMUL.FTZ R29, R32, R17;          # [639][0013f8]
//     	MUFU.EX2 R3, R37;                # [640][001400]
//     	FMUL.FTZ R32, R29, -R33;         # [641][001408]
//     	FMUL.FTZ R37, R27, 0.0625;       # [642][001410]
//     	FMUL.FTZ R41, R13, c[0x2][0x94]; # [643][001418]
//     	FMUL.FTZ R27, R36, R17;          # [644][001420]
//     	MUFU.RCP R15, R1;                # [645][001428]
//     	FMUL.FTZ R36, R14, c[0x2][0x98]; # [646][001430]
//     	RRO.EX2 R2, R35;                 # [647][001438]
//     	RRO.EX2 R1, R28;                 # [648][001440]
//     	FMUL.FTZ R13, R29, R19;          # [649][001448]
//     	FFMA.FTZ R14, R27, -R30, R32;    # [650][001450]
//     	FMUL.FTZ R35, R29, R39;          # [651][001458]
//     	FMUL.FTZ R28, R16, R17;          # [652][001460]
//     	FMUL.FTZ R32, R12, c[0x2][0x90]; # [653][001468]
//     	FMUL.FTZ R12, R37, R36;          # [654][001470]
//     	FFMA.FTZ R16, R27, R40, R13;     # [655][001478]
//     	FFMA.FTZ R17, R27, R57, R35;     # [656][001480]
//     	FFMA.FTZ R36, R28, -R31, R14;    # [657][001488]
//     	MOV32I R61, 0x3cba7547;          # [658][001490]
//     	MOV32I R59, 0x3e79db23;          # [659][001498]
//     	MOV32I R23, 0x3ec6a7f0;          # [660][0014a0]
//     	FMUL.FTZ R13, R37, R41;          # [661][0014a8]
//     	FMUL.FTZ R14, R37, R32;          # [662][0014b0]
//     	F2F.SAT R35, R36;                # [663][0014b8]
//     	FFMA.FTZ R37, R28, R38, R16;     # [664][0014c0]
//     	FFMA.FTZ R32, R28, R58, R17;     # [665][0014c8]
//     	FFMA.FTZ R16, R18, c[0x10][0x84], R61; # [666][0014d0]
//     	FFMA.FTZ R17, R18, c[0x10][0x80], R59; # [667][0014d8]
//     	FFMA.FTZ R23, R18, c[0x10][0x7c], R23; # [668][0014e0]
//     	FADD.FTZ R41, -R35, 1;           # [669][0014e8]
//     	F2F.SAT R18, R37;                # [670][0014f0]
//     	MOV32I R34, 0x3d981627;          # [671][0014f8]
//     	FFMA.FTZ R19, R29, -R18, R19;    # [672][001500]
//     	FADD.FTZ R39, -R18, 1;           # [673][001508]
//     	FFMA.FTZ R29, R29, -R35, -R33;   # [674][001510]
//     	FFMA.FTZ R44, R35, c[0x10][0x88], R34; # [675][001518]
//     	FFMA.FTZ R33, R27, -R18, R40;    # [676][001520]
//     	FMNMX.FTZ R36, R36, -c[0x10][0x3c], !PT; # [677][001528]
//     	MUFU.RSQ R40, R41;               # [678][001530]
//     	FMNMX.FTZ R37, R37, -c[0x10][0x3c], !PT; # [679][001538]
//     	FFMA.FTZ R41, R18, c[0x10][0x88], R34; # [680][001540]
//     	FMUL.FTZ R45, R19, R19;          # [681][001548]
//     	MUFU.RSQ R34, R39;               # [682][001550]
//     	FFMA.FTZ R27, R27, -R35, -R30;   # [683][001558]
//     	FFMA.FTZ R39, R44, R35, c[0x10][0x8c]; # [684][001560]
//     	FFMA.FTZ R30, R28, -R18, R38;    # [685][001568]
//     	FMNMX.FTZ R32, R32, -c[0x10][0x3c], !PT; # [686][001570]
//     	FMNMX.FTZ R44, R36, R37, PT;     # [687][001578]
//     	FFMA.FTZ R41, R41, R18, c[0x10][0x8c]; # [688][001580]
//     	MUFU.RCP R38, R40;               # [689][001588]
//     	FFMA.FTZ R39, R39, R35, c[0x10][0x90]; # [690][001590]
//     	FFMA.FTZ R31, R28, -R35, -R31;   # [691][001598]
//     	FMUL.FTZ R46, R29, R29;          # [692][0015a0]
//     	FFMA.FTZ R45, R33, R33, R45;     # [693][0015a8]
//     	MUFU.RCP R34, R34;               # [694][0015b0]
//     	FMUL.FTZ R35, R32, R44;          # [695][0015b8]
//     	FFMA.FTZ R40, R41, R18, c[0x10][0x90]; # [696][0015c0]
//     	FMUL.FTZ R28, R36, R37;          # [697][0015c8]
//     	FFMA.FTZ R44, R27, R27, R46;     # [698][0015d0]
//     	FFMA.FTZ R41, R30, R30, R45;     # [699][0015d8]
//     	FMUL.FTZ R38, R38, R39;          # [700][0015e0]
//     	FADD.FTZ R36, R35, R35;          # [701][0015e8]
//     	FMUL.FTZ R39, R34, R40;          # [702][0015f0]
//     	FFMA.FTZ R44, R31, R31, R44;     # [703][0015f8]
//     	MUFU.RSQ R40, R41;               # [704][001600]
//     	FMUL.FTZ R15, R36, R15;          # [705][001608]
//     	FMNMX.FTZ R35, R38, R39, !PT;    # [706][001610]
//     	FMNMX.FTZ R36, R38, R39, PT;     # [707][001618]
//     	MUFU.RSQ R38, R44;               # [708][001620]
//     	FMUL.FTZ R47, R40, R19;          # [709][001628]
//     	RRO.SINCOS R39, R35;             # [710][001630]
//     	FMUL32I.FTZ R19, R7, 0x3fc90fdb; # [711][001638]
//     	FMUL.FTZ R41, R40, R33;          # [712][001640]
//     	FMUL.FTZ R37, R32, R32;          # [713][001648]
//     	FADD.FTZ R33, R36, R35;          # [714][001650]
//     	FMUL.FTZ R46, R38, R29;          # [715][001658]
//     	MUFU.SIN R7, R39;                # [716][001660]
//     	FMUL.FTZ R29, R19, R19;          # [717][001668]
//     	RRO.SINCOS R44, R36;             # [718][001670]
//     	FMUL.FTZ R39, R40, R30;          # [719][001678]
//     	FFMA.FTZ R34, R32, R32, R43;     # [720][001680]
//     	FMUL.FTZ R30, R33, 0.5;          # [721][001688]
//     	FMUL.FTZ R32, R37, R37;          # [722][001690]
//     	FMUL.FTZ R33, R29, R37;          # [723][001698]
//     	MUFU.COS R45, R44;               # [724][0016a0]
//     	FMUL.FTZ R48, R38, R27;          # [725][0016a8]
//     	FMUL.FTZ R40, R46, R47;          # [726][0016b0]
//     	FMUL32I.FTZ R37, R11, 0x3fc90fdb; # [727][0016b8]
//     	MUFU.SIN R19, R44;               # [728][0016c0]
//     	MUFU.RCP R33, R33;               # [729][0016c8]
//     	FMUL.FTZ R44, R38, R31;          # [730][0016d0]
//     	FMUL.FTZ R29, R29, 4;            # [731][0016d8]
//     	RRO.SINCOS R31, R30;             # [732][0016e0]
//     	FFMA.FTZ R38, R37, R37, c[0x10][0x94]; # [733][0016e8]
//     	FFMA.FTZ R30, R48, R41, R40;     # [734][0016f0]
//     	FMUL.FTZ R33, R34, R33;          # [735][0016f8]
//     	FMUL.FTZ R40, R35, R36;          # [736][001700]
//     	MUFU.RCP R38, R38;               # [737][001708]
//     	FMUL32I.FTZ R35, R36, 0x3f22f983; # [738][001710]
//     	FFMA.FTZ R30, R44, R39, R30;     # [739][001718]
//     	FMUL.FTZ R36, R37, R37;          # [740][001720]
//     	FFMA.FTZ R39, R37, R37, c[0x10][0x98]; # [741][001728]
//     	FMUL.FTZ R34, R35, R35;          # [742][001730]
//     	FSETP.GE.FTZ.AND P1, PT, R30, RZ, PT; # [743][001738]
//     	FMUL32I.FTZ R33, R33, 0x3fb8aa3b; # [744][001740]
//     	FMUL.FTZ R37, R36, R38;          # [745][001748]
//     	FMUL.FTZ R32, R29, R32;          # [746][001750]
//     	MUFU.SIN R11, R31;               # [747][001758]
//     	@!P1 FFMA.FTZ R7, R35, -R34, R7; # [748][001760]
//     	MUFU.COS R29, R31;               # [749][001768]
//     	RRO.EX2 R31, R33;                # [750][001770]
//     	FMUL32I.FTZ R34, R37, 0.45;      # [751][001778]
//     	MUFU.RCP R39, R39;               # [752][001780]
//     	FMUL32I.FTZ R38, R40, 0x3ecf817b; # [753][001788]
//     	MUFU.RCP R32, R32;               # [754][001790]
//     	FMUL.FTZ R7, R7, R34;            # [755][001798]
//     	MUFU.EX2 R31, R31;               # [756][0017a0]
//     	FMUL.FTZ R53, R42, R53;          # [757][0017a8]
//     	MUFU.RCP R27, R45;               # [758][0017b0]
//     	FMUL.FTZ R35, R38, R38;          # [759][0017b8]
//     	MUFU.RCP R34, R29;               # [760][0017c0]
//     	FMNMX.FTZ R15, R15, 1, PT;       # [761][0017c8]
//     	FMUL.FTZ R29, R30, R7;           # [762][0017d0]
//     	FMUL.FTZ R38, R36, R39;          # [763][0017d8]
//     	FMUL.FTZ R33, R37, 0.125;        # [764][0017e0]
//     	FMUL.FTZ R7, R31, R32;           # [765][0017e8]
//     	FMUL.FTZ R17, R13, R17;          # [766][0017f0]
//     	FFMA.FTZ R53, R53, -R53, -R43;   # [767][0017f8]
//     	FMUL.FTZ R19, R19, R27;          # [768][001800]
//     	MUFU.RCP R13, R28;               # [769][001808]
//     	FADD.FTZ R36, -|R30|, 1;         # [770][001810]
//     	FFMA.FTZ R37, R38, -0.5, -R43;   # [771][001818]
//     	FMUL.FTZ R27, R35, R33;          # [772][001820]
//     	FMUL.FTZ R7, R15, R7;            # [773][001828]
//     	FMNMX.FTZ R0, R53, RZ, !PT;      # [774][001830]
//     	MUFU.EX2 R15, R2;                # [775][001838]
//     	FMUL.FTZ R12, R12, R23;          # [776][001840]
//     	FMUL.FTZ R11, R11, R34;          # [777][001848]
//     	MUFU.RCP R42, R42;               # [778][001850]
//     	FMUL.FTZ R27, R27, R36;          # [779][001858]
//     	FFMA.FTZ R19, R29, R19, R37;     # [780][001860]
//     	FMUL.FTZ R16, R14, R16;          # [781][001868]
//     	FMUL.FTZ R2, R7, R13;            # [782][001870]
//     	FMUL.FTZ R14, R17, R0;           # [783][001878]
//     	MUFU.EX2 R7, R1;                 # [784][001880]
//     	FFMA.FTZ R17, R27, R11, R19;     # [785][001888]
//     	FMUL.FTZ R1, R12, R0;            # [786][001890]
//     	FMUL.FTZ R11, R14, R42;          # [787][001898]
//     	FMUL.FTZ R12, R16, R0;           # [788][0018a0]
//     	FMUL.FTZ R14, R2, R5;            # [789][0018a8]
//     	FMUL32I.FTZ R13, R17, 0x3ea2f983; # [790][0018b0]
//     	FMUL.FTZ R6, R2, R6;             # [791][0018b8]
//     	FMUL.FTZ R5, R12, R42;           # [792][0018c0]
//     	FMUL.FTZ R0, R1, R42;            # [793][0018c8]
//     	FMUL.FTZ R12, R2, R4;            # [794][0018d0]
//     	FMUL.FTZ R1, R11, R15;           # [795][0018d8]
//     	FMUL.FTZ R2, R5, R3;             # [796][0018e0]
//     	FFMA.FTZ R9, R9, R13, R14;       # [797][0018e8]
//     	FMUL.FTZ R0, R0, R7;             # [798][0018f0]
//     	FFMA.FTZ R4, R10, R13, R6;       # [799][0018f8]
//     	FFMA.FTZ R3, R8, R13, R12;       # [800][001900]
//     	FMUL.FTZ R1, R9, R1;             # [801][001908]
//     	FMUL.FTZ R0, R4, R0;             # [802][001910]
//     	FMUL.FTZ R2, R3, R2;             # [803][001918]
//     	FMUL.FTZ R1, R18, R1;            # [804][001920]
//     	FMUL.FTZ R0, R18, R0;            # [805][001928]
//     	FMUL.FTZ R2, R18, R2;            # [806][001930]
//     	FMUL.FTZ R17, R26, R0;           # [807][001938]
//     	FMUL.FTZ R18, R25, R1;           # [808][001940]
//     	FMUL.FTZ.S R19, R24, R2;         # [809][001948]
//     L1950:
//     	MOV R17, RZ;                     # [810][001950]
//     	MOV R18, RZ;                     # [811][001958]
//     	MOV.S R19, RZ;                   # [812][001960]
//     L1968:
//     	MOV R17, RZ;                     # [813][001968]
//     	MOV R18, RZ;                     # [814][001970]
//     	MOV R19, RZ;                     # [815][001978]
//     	MOV R22, RZ;                     # [816][001980]
//     	MOV R21, RZ;                     # [817][001988]
//     	MOV.S R20, RZ;                   # [818][001990]
//     L1998:
//     	SSY L6948;                       # [819][001998]
//     	@!P0 NOP.S;                      # [820][0019a0]
//     	SHL.W R1, R51, 0x1;              # [821][0019a8]
//     	SHL.W R12, R50, 0x1;             # [822][0019b0]
//     	MOV32I R7, 0x1;                  # [823][0019b8]
//     	MOV R13, R1;                     # [824][0019c0]
//     	ISCADD R0, R50, 0x1, 0x1;        # [825][0019c8]
//     	FMUL.FTZ R4, RZ, R52;            # [826][0019d0]
//     	TLD.LZ.AOFFI.T R3, R12, R7, 0x0, 2D, 0x1; # [827][0019d8]
//     	MOV32I R32, 0x3f800000;          # [828][0019e0]
//     	TLD.LZ.NODEP.P R8, R0, 0x1, 2D, 0x7; # [829][0019e8]
//     	IPA.PASS R5, a[0x70];            # [830][0019f0] POSITION_X
//     	FMUL.FTZ R6, RZ, R5;             # [831][0019f8]
//     	FFMA.FTZ R5, R5, c[0x10][0x0], R4; # [832][001a00]
//     	FADD.FTZ R2, R6, R4;             # [833][001a08]
//     	TLD.LZ.AOFFI.NODEP.P R23, R12, R7, 0x4, 2D, 0x1; # [834][001a10]
//     	FFMA.FTZ R4, R3, c[0x10][0x8], R2; # [835][001a18]
//     	FFMA.FTZ R6, R52, c[0x10][0x4], R6; # [836][001a20]
//     	FADD32I.FTZ R13, R4, 0x41200001; # [837][001a28]
//     	FFMA.FTZ R2, RZ, R3, R2;         # [838][001a30]
//     	FFMA.FTZ R4, RZ, R3, R5;         # [839][001a38]
//     	FFMA.FTZ R5, RZ, R3, R6;         # [840][001a40]
//     	MUFU.RCP R16, R13;               # [841][001a48]
//     	FADD32I.FTZ R15, R4, 0xbf3340cd; # [842][001a50]
//     	FADD32I.FTZ R14, R5, 0x3ec9a8e5; # [843][001a58]
//     	FADD.FTZ R12, R2, -1;            # [844][001a60]
//     	TLD.LZ.NODEP.P R4, R0, 0x2, 2D;  # [845][001a68]
//     	FMUL.FTZ R11, R15, R16;          # [846][001a70]
//     	FMUL.FTZ R42, R14, R16;          # [847][001a78]
//     	FMUL.FTZ R24, R11, R11;          # [848][001a80]
//     	TLD.LZ.NODEP.P R0, R0, 0x3, 2D;  # [849][001a88]
//     	FMUL.FTZ R44, R12, R16;          # [850][001a90]
//     	STL.64 [0x8], R6;                # [851][001a98]
//     	FFMA.FTZ R16, R42, R42, R24;     # [852][001aa0]
//     	FFMA.FTZ R30, R18, c[0x10][0x9c], R32; # [853][001aa8]
//     	FFMA.FTZ R6, R44, R44, R16;      # [854][001ab0]
//     	FFMA.FTZ R31, R19, c[0x10][0x9c], R32; # [855][001ab8]
//     	MUFU.RSQ R6, R6;                 # [856][001ac0]
//     	FFMA.FTZ R10, R10, 2, -R32;      # [857][001ac8]
//     	MUFU.RCP R16, R6;                # [858][001ad0]
//     	SSY L3398;                       # [859][001ad8]
//     	MUFU.RCP R6, R16;                # [860][001ae0]
//     	FMNMX.FTZ R26, R16, 100000, PT;  # [861][001ae8]
//     	FMUL.FTZ R36, R11, R6;           # [862][001af0]
//     	FMUL.FTZ R38, R42, R6;           # [863][001af8]
//     	FMUL.FTZ R34, R44, R6;           # [864][001b00]
//     	FMUL.FTZ R7, R36, c[0x2][0xb0];  # [865][001b08]
//     	FFMA.FTZ R6, R38, c[0x2][0xb4], R7; # [866][001b10]
//     	FFMA.FTZ R24, R34, c[0x2][0xb8], R6; # [867][001b18]
//     	MUFU.RCP R7, R24;                # [868][001b20]
//     	FMUL.FTZ R6, R36, c[0x2][0xc0];  # [869][001b28]
//     	FFMA.FTZ R6, R38, c[0x2][0xc4], R6; # [870][001b30]
//     	FSETP.LT.FTZ.AND P0, PT, R24, RZ, PT; # [871][001b38]
//     	FMUL.FTZ R7, R7, -c[0x2][0xbc];  # [872][001b40]
//     	FMNMX.FTZ R25, R7, c[0x10][0xc], !PT; # [873][001b48]
//     	FFMA.FTZ R7, R34, c[0x2][0xc8], R6; # [874][001b50]
//     	FMNMX.FTZ R27, R26, R25, PT;     # [875][001b58]
//     	FMUL.FTZ R6, R36, c[0x2][0xd0];  # [876][001b60]
//     	MUFU.RCP R25, R7;                # [877][001b68]
//     	FCMP.LEU.FTZ R28, R26, R27, R24; # [878][001b70]
//     	FFMA.FTZ R6, R38, c[0x2][0xd4], R6; # [879][001b78]
//     	FMUL.FTZ R29, R25, -c[0x2][0xcc]; # [880][001b80]
//     	@!P0 MOV32I R27, 0x3dcccccd;     # [881][001b88]
//     	FFMA.FTZ R25, R34, c[0x2][0xd8], R6; # [882][001b90]
//     	FCMP.GEU.FTZ R28, R28, R26, R24; # [883][001b98]
//     	FMNMX.FTZ R24, R27, R29, !PT;    # [884][001ba0]
//     	FMUL.FTZ R6, R36, c[0x2][0xe0];  # [885][001ba8]
//     	MUFU.RCP R29, R25;               # [886][001bb0]
//     	FMNMX.FTZ R26, R28, R24, PT;     # [887][001bb8]
//     	FFMA.FTZ R6, R38, c[0x2][0xe4], R6; # [888][001bc0]
//     	FSETP.LT.FTZ.AND P1, PT, R7, RZ, PT; # [889][001bc8]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R7, PT; # [890][001bd0]
//     	FMUL.FTZ R29, R29, -c[0x2][0xdc]; # [891][001bd8]
//     	FCMP.GEU.FTZ R7, R27, R26, R7;   # [892][001be0]
//     	FFMA.FTZ R24, R34, c[0x2][0xe8], R6; # [893][001be8]
//     	@!P1 SEL R28, R28, R26, !P0;     # [894][001bf0]
//     	MUFU.RCP R27, R24;               # [895][001bf8]
//     	FMNMX.FTZ R26, R7, R29, !PT;     # [896][001c00]
//     	FMUL.FTZ R6, R36, c[0x2][0xf0];  # [897][001c08]
//     	FMNMX.FTZ R26, R28, R26, PT;     # [898][001c10]
//     	FMUL.FTZ R29, R27, -c[0x2][0xec]; # [899][001c18]
//     	FCMP.GEU.FTZ R27, R7, R26, R25;  # [900][001c20]
//     	FFMA.FTZ R6, R38, c[0x2][0xf4], R6; # [901][001c28]
//     	FCMP.LEU.FTZ R26, R28, R26, R25; # [902][001c30]
//     	FFMA.FTZ R7, R34, c[0x2][0xf8], R6; # [903][001c38]
//     	FCMP.GEU.FTZ R26, R26, R28, R25; # [904][001c40]
//     	FSETP.LT.FTZ.AND P1, PT, R24, RZ, PT; # [905][001c48]
//     	FMNMX.FTZ R25, R27, R29, !PT;    # [906][001c50]
//     	MUFU.RCP R28, R7;                # [907][001c58]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R24, PT; # [908][001c60]
//     	FMNMX.FTZ R25, R26, R25, PT;     # [909][001c68]
//     	FMUL.FTZ R6, R36, c[0x2][0x100]; # [910][001c70]
//     	FCMP.GEU.FTZ R24, R27, R25, R24; # [911][001c78]
//     	FMUL.FTZ R27, R28, -c[0x2][0xfc]; # [912][001c80]
//     	@!P1 SEL R26, R26, R25, !P0;     # [913][001c88]
//     	FFMA.FTZ R6, R38, c[0x2][0x104], R6; # [914][001c90]
//     	FMNMX.FTZ R25, R24, R27, !PT;    # [915][001c98]
//     	FFMA.FTZ R6, R34, c[0x2][0x108], R6; # [916][001ca0]
//     	FMNMX.FTZ R25, R26, R25, PT;     # [917][001ca8]
//     	FFMA.FTZ R28, R8, 2, -R32;       # [918][001cb0]
//     	MUFU.RCP R27, R6;                # [919][001cb8]
//     	FCMP.GEU.FTZ R8, R24, R25, R7;   # [920][001cc0]
//     	FMUL.FTZ R27, R27, -c[0x2][0x10c]; # [921][001cc8]
//     	FCMP.LEU.FTZ R24, R26, R25, R7;  # [922][001cd0]
//     	FFMA.FTZ R29, R17, c[0x10][0x9c], R32; # [923][001cd8]
//     	FCMP.GEU.FTZ R24, R24, R26, R7;  # [924][001ce0]
//     	FSETP.LT.FTZ.AND P1, PT, R6, RZ, PT; # [925][001ce8]
//     	FMNMX.FTZ R7, R8, R27, !PT;      # [926][001cf0]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R6, PT; # [927][001cf8]
//     	FMNMX.FTZ R7, R24, R7, PT;       # [928][001d00]
//     	MUFU.RCP R29, R29;               # [929][001d08]
//     	FFMA.FTZ R25, R9, 2, -R32;       # [930][001d10]
//     	FCMP.GEU.FTZ R55, R8, R7, R6;    # [931][001d18]
//     	@!P1 SEL R24, R24, R7, !P0;      # [932][001d20]
//     	FMUL.FTZ R9, R28, R28;           # [933][001d28]
//     	FMUL32I.FTZ R7, R17, 0x417001d9; # [934][001d30]
//     	FFMA.FTZ R9, R25, R25, R9;       # [935][001d38]
//     	FMUL.FTZ R7, R7, R29;            # [936][001d40]
//     	MUFU.RCP R26, R30;               # [937][001d48]
//     	FFMA.FTZ R9, R10, R10, R9;       # [938][001d50]
//     	MUFU.RCP R27, R31;               # [939][001d58]
//     	FMUL32I.FTZ R8, R18, 0x417001d9; # [940][001d60]
//     	STL [0x30], R7;                  # [941][001d68]
//     	FMUL32I.FTZ R17, R19, 0x417001d9; # [942][001d70]
//     	MUFU.RSQ R6, R9;                 # [943][001d78]
//     	FSETP.LT.FTZ.AND P0, PT, R55, R24, PT; # [944][001d80]
//     	FMUL.FTZ R8, R8, R26;            # [945][001d88]
//     	FMUL.FTZ R7, R17, R27;           # [946][001d90]
//     	FMUL.FTZ R39, R6, R28;           # [947][001d98]
//     	FMUL.FTZ R40, R6, R25;           # [948][001da0]
//     	STL [0x34], R8;                  # [949][001da8]
//     	FMUL.FTZ R41, R6, R10;           # [950][001db0]
//     	STL [0x40], R7;                  # [951][001db8]
//     	@!P0 BRA L3380;                  # [952][001dc0]
//     	MOV R26, c[0x2][0x80];           # [953][001dc8]
//     	IPA.PASS R6, a[0x70];            # [954][001dd0] POSITION_X
//     	F2I.U32.TRUNC R6, R6;            # [955][001dd8]
//     	IPA.PASS R7, a[0x74];            # [956][001de0] POSITION_Y
//     	LOP.AND R6, R6, 0x3;             # [957][001de8]
//     	F2I.U32.TRUNC R7, R7;            # [958][001df0]
//     	LOP.AND R7, R7, 0x3;             # [959][001df8]
//     	FMNMX.FTZ R57, R55, 1, !PT;      # [960][001e00]
//     	TLD.LZ.P R62, R6, 0x6, 2D, 0x1;  # [961][001e08]
//     	FMUL32I.FTZ R6, R36, 0x3e028e29; # [962][001e10]
//     	FMUL.FTZ R18, R36, c[0x2][0x50]; # [963][001e18]
//     	MOV R33, c[0x2][0x84];           # [964][001e20]
//     	MOV R9, c[0x2][0x88];            # [965][001e28]
//     	FMUL.FTZ R17, R36, c[0x2][0x60]; # [966][001e30]
//     	FMNMX.FTZ R54, R24, 100, PT;     # [967][001e38]
//     	FFMA.FTZ R8, R38, c[0x10][0x10], R6; # [968][001e40]
//     	FMUL.FTZ R31, R26, c[0x10][0x18]; # [969][001e48]
//     	FMUL.FTZ R7, R26, c[0x10][0x24]; # [970][001e50]
//     	FMUL.FTZ R30, R26, c[0x10][0x28]; # [971][001e58]
//     	FMUL.FTZ R19, R36, c[0x2][0x40]; # [972][001e60]
//     	SSY L27c0;                       # [973][001e68]
//     	FFMA.FTZ R28, R38, c[0x2][0x54], R18; # [974][001e70]
//     	MOV R27, RZ;                     # [975][001e78]
//     	FMUL.FTZ R10, R36, c[0x2][0x70]; # [976][001e80]
//     	MOV R26, RZ;                     # [977][001e88]
//     	FFMA.FTZ R18, R38, c[0x2][0x64], R17; # [978][001e90]
//     	MOV R25, RZ;                     # [979][001e98]
//     	FFMA.FTZ R56, R34, c[0x10][0x14], R8; # [980][001ea0]
//     	FFMA.FTZ R32, R33, c[0x10][0x10], R7; # [981][001ea8]
//     	FFMA.FTZ R29, R38, c[0x2][0x44], R19; # [982][001eb0]
//     	FADD.FTZ R7, R57, -1;            # [983][001eb8]
//     	FFMA.FTZ R37, R33, c[0x10][0x1c], R31; # [984][001ec0]
//     	FMUL32I.FTZ R43, R56, 0xba5a740e; # [985][001ec8]
//     	FFMA.FTZ R19, R33, c[0x10][0x2c], R30; # [986][001ed0]
//     	FMUL32I.FTZ R49, R56, 0x3a5a740e; # [987][001ed8]
//     	FFMA.FTZ R17, R38, c[0x2][0x74], R10; # [988][001ee0]
//     	FADD32I.FTZ R33, R56, 0x434de9e8; # [989][001ee8]
//     	FFMA.FTZ R8, R34, c[0x2][0x68], R18; # [990][001ef0]
//     	MUFU.LG2 R30, R57;               # [991][001ef8]
//     	FMNMX.FTZ R10, R7, RZ, !PT;      # [992][001f00]
//     	FMUL32I.FTZ R18, R56, 0xbd14f209; # [993][001f08]
//     	FFMA.FTZ R35, R34, c[0x2][0x48], R29; # [994][001f10]
//     	FMUL32I.FTZ R31, R33, 0xba5a740e; # [995][001f18]
//     	FFMA.FTZ R7, R34, c[0x2][0x78], R17; # [996][001f20]
//     	FMUL.FTZ R29, R10, R18;          # [997][001f28]
//     	FMUL32I.FTZ R17, R30, 1.20412;   # [998][001f30]
//     	FMUL32I.FTZ R46, R31, 0x3fb8aa3b; # [999][001f38]
//     	FFMA.FTZ R30, R9, c[0x10][0x20], R37; # [1000][001f40]
//     	FMUL.FTZ R48, R10, R43;          # [1001][001f48]
//     	FMUL32I.FTZ R45, R29, 0x3fb8aa3b; # [1002][001f50]
//     	FMUL32I.FTZ R37, R56, 0x3d14f209; # [1003][001f58]
//     	FMUL32I.FTZ R43, R33, 0xbd14f209; # [1004][001f60]
//     	FMUL32I.FTZ R31, R56, -0.000125; # [1005][001f68]
//     	RRO.EX2 R47, R46;                # [1006][001f70]
//     	FMUL32I.FTZ R48, R48, 0x3fb8aa3b; # [1007][001f78]
//     	RRO.EX2 R46, R45;                # [1008][001f80]
//     	MUFU.RCP R18, R37;               # [1009][001f88]
//     	FMUL32I.FTZ R45, R43, 0x3fb8aa3b; # [1010][001f90]
//     	FMUL.FTZ R37, R10, R31;          # [1011][001f98]
//     	MUFU.EX2 R31, R47;               # [1012][001fa0]
//     	FMUL32I.FTZ R33, R33, -0.000125; # [1013][001fa8]
//     	RRO.EX2 R47, R48;                # [1014][001fb0]
//     	RRO.EX2 R45, R45;                # [1015][001fb8]
//     	FMUL32I.FTZ R43, R37, 0x3fb8aa3b; # [1016][001fc0]
//     	FFMA.FTZ R32, R9, c[0x10][0x14], R32; # [1017][001fc8]
//     	MUFU.EX2 R37, R46;               # [1018][001fd0]
//     	FFMA.FTZ R19, R9, c[0x10][0x30], R19; # [1019][001fd8]
//     	MUFU.EX2 R47, R47;               # [1020][001fe0]
//     	FADD.FTZ R9, R35, c[0x2][0x4c];  # [1021][001fe8]
//     	MUFU.EX2 R46, R45;               # [1022][001ff0]
//     	RRO.EX2 R43, R43;                # [1023][001ff8]
//     	FMUL32I.FTZ R45, R56, 0.000125;  # [1024][002000]
//     	FMUL32I.FTZ R35, R33, 0x3fb8aa3b; # [1025][002008]
//     	FADD.FTZ R37, -R37, 1;           # [1026][002010]
//     	FADD.FTZ R47, -R47, 1;           # [1027][002018]
//     	MUFU.EX2 R43, R43;               # [1028][002020]
//     	RRO.EX2 R35, R35;                # [1029][002028]
//     	MUFU.RCP R33, R45;               # [1030][002030]
//     	FMUL.FTZ R37, R46, R37;          # [1031][002038]
//     	F2F.FTZ.FLOOR R45, R17;          # [1032][002040]
//     	MUFU.RCP R29, R49;               # [1033][002048]
//     	FADD32I.FTZ R17, R32, 0x434de9e8; # [1034][002050]
//     	FMUL.FTZ R31, R31, R47;          # [1035][002058]
//     	MUFU.EX2 R32, R35;               # [1036][002060]
//     	FSETP.NEU.FTZ.AND P0, PT, R56, RZ, PT; # [1037][002068]
//     	FADD.FTZ R35, -R43, 1;           # [1038][002070]
//     	FMUL.FTZ R37, R37, R18;          # [1039][002078]
//     	FMUL.FTZ R29, R31, R29;          # [1040][002080]
//     	@!P0 FMUL32I.FTZ R37, R10, 0x3a12c592; # [1041][002088]
//     	@!P0 FMUL32I.FTZ R29, R10, 0x3f57a251; # [1042][002090]
//     	FMUL.FTZ R32, R32, R35;          # [1043][002098]
//     	FMNMX.FTZ R43, R45, RZ, !PT;     # [1044][0020a0]
//     	FMUL32I.FTZ R31, R17, -0.000125; # [1045][0020a8]
//     	FFMA.FTZ R35, R37, 200, R29;     # [1046][0020b0]
//     	FMUL.FTZ R32, R32, R33;          # [1047][0020b8]
//     	FMUL32I.FTZ R37, R43, 0.830482;  # [1048][0020c0]
//     	@!P0 FMUL32I.FTZ R32, R10, 0x3f797eae; # [1049][0020c8]
//     	FMUL32I.FTZ R10, R35, 0x3cb851eb; # [1050][0020d0]
//     	FMUL32I.FTZ R31, R31, 0x3fb8aa3b; # [1051][0020d8]
//     	RRO.EX2 R33, R37;                # [1052][0020e0]
//     	FMUL32I.FTZ R29, R17, 0xbd14f209; # [1053][0020e8]
//     	FMUL32I.FTZ R37, R35, 0.012015;  # [1054][0020f0]
//     	FFMA.FTZ R43, RZ, R32, R10;      # [1055][0020f8]
//     	MUFU.EX2 R10, R33;               # [1056][002100]
//     	RRO.EX2 R31, R31;                # [1057][002108]
//     	FMUL32I.FTZ R29, R29, 0x3fb8aa3b; # [1058][002110]
//     	FMUL32I.FTZ R33, R35, 0.0075;    # [1059][002118]
//     	FFMA.FTZ R35, RZ, R32, R37;      # [1060][002120]
//     	FADD32I.FTZ R18, R30, 0xbf1e4005; # [1061][002128]
//     	MUFU.EX2 R37, R31;               # [1062][002130]
//     	RRO.EX2 R29, R29;                # [1063][002138]
//     	FFMA.FTZ R31, RZ, R32, R33;      # [1064][002140]
//     	FMUL32I.FTZ R30, R17, 0xba5a740e; # [1065][002148]
//     	FMUL32I.FTZ R32, R35, 0xbfb8aa3b; # [1066][002150]
//     	FFMA.FTZ R28, R34, c[0x2][0x58], R28; # [1067][002158]
//     	FMUL32I.FTZ R43, R43, 0xbfb8aa3b; # [1068][002160]
//     	MUFU.EX2 R35, R29;               # [1069][002168]
//     	FMUL32I.FTZ R30, R30, 0x3fb8aa3b; # [1070][002170]
//     	FMUL32I.FTZ R29, R31, 0xbfb8aa3b; # [1071][002178]
//     	FADD.FTZ R28, R28, c[0x2][0x5c]; # [1072][002180]
//     	RRO.EX2 R33, R43;                # [1073][002188]
//     	FADD.FTZ R61, R9, -c[0x2][0x4c]; # [1074][002190]
//     	RRO.EX2 R30, R30;                # [1075][002198]
//     	FADD.FTZ R8, R8, c[0x2][0x6c];   # [1076][0021a0]
//     	RRO.EX2 R32, R32;                # [1077][0021a8]
//     	FADD.FTZ R7, R7, c[0x2][0x7c];   # [1078][0021b0]
//     	FSETP.GE.FTZ.AND P0, PT, R10, R54, PT; # [1079][0021b8]
//     	RRO.EX2 R9, R29;                 # [1080][0021c0]
//     	FADD.FTZ R60, R28, -c[0x2][0x5c]; # [1081][0021c8]
//     	MUFU.EX2 R31, R33;               # [1082][0021d0]
//     	FADD32I.FTZ R19, R19, 0xc08ea342; # [1083][0021d8]
//     	FADD.FTZ R59, R8, -c[0x2][0x6c]; # [1084][0021e0]
//     	FMUL32I.FTZ R28, R10, 0x3fe39ea9; # [1085][0021e8]
//     	MUFU.EX2 R30, R30;               # [1086][0021f0]
//     	FADD.FTZ R58, R7, -c[0x2][0x7c]; # [1087][0021f8]
//     	MUFU.EX2 R32, R32;               # [1088][002200]
//     	MUFU.EX2 R33, R9;                # [1089][002208]
//     	@P0 BRA L27b8;                   # [1090][002210]
//     L2218:
//     	FMNMX.FTZ R53, R57, R10, !PT;    # [1091][002218]
//     	FMNMX.FTZ R52, R54, R28, PT;     # [1092][002220]
//     	MUFU.RCP R6, R53;                # [1093][002228]
//     	FMUL.FTZ R6, R52, R6;            # [1094][002230]
//     	MUFU.LG2 R6, R6;                 # [1095][002238]
//     	FMUL.FTZ R6, R62, R6;            # [1096][002240]
//     	RRO.EX2 R6, R6;                  # [1097][002248]
//     	MUFU.EX2 R6, R6;                 # [1098][002250]
//     	FMUL.FTZ R51, R53, R6;           # [1099][002258]
//     	FFMA.FTZ R9, R51, -R36, c[0x2][0x80]; # [1100][002260]
//     	FFMA.FTZ R10, R51, -R38, c[0x2][0x84]; # [1101][002268]
//     	FMUL.FTZ R6, R9, R9;             # [1102][002270]
//     	FFMA.FTZ R8, R51, R58, c[0x2][0x7c]; # [1103][002278]
//     	FFMA.FTZ R7, R10, R10, R6;       # [1104][002280]
//     	MUFU.RCP R49, R8;                # [1105][002288]
//     	FFMA.FTZ R6, R51, -R34, c[0x2][0x88]; # [1106][002290]
//     	FFMA.FTZ R50, R6, R6, R7;        # [1107][002298]
//     	FFMA.FTZ R8, R51, R56, c[0x10][0x34]; # [1108][0022a0]
//     	MUFU.RSQ R7, R50;                # [1109][0022a8]
//     	FFMA.FTZ R45, R51, R61, c[0x2][0x4c]; # [1110][0022b0]
//     	FMUL.FTZ R9, R7, R9;             # [1111][0022b8]
//     	FMUL.FTZ R43, R36, R9;           # [1112][0022c0]
//     	FMUL.FTZ R29, R7, R10;           # [1113][0022c8]
//     	FFMA.FTZ R9, R51, R60, c[0x2][0x5c]; # [1114][0022d0]
//     	FMUL.FTZ R48, R7, R6;            # [1115][0022d8]
//     	FMUL32I.FTZ R10, R8, 0xba5a740e; # [1116][0022e0]
//     	FMUL.FTZ R6, R45, R49;           # [1117][0022e8]
//     	FMUL.FTZ R7, R9, R49;            # [1118][0022f0]
//     	FFMA.FTZ R47, R38, R29, R43;     # [1119][0022f8]
//     	FMUL32I.FTZ R46, R10, 0x3fb8aa3b; # [1120][002300]
//     	TEX.LZ.NODEP.P R45, R6, 0x8, 0x1, 2D, 0x1; # [1121][002308]
//     	FMUL32I.FTZ R43, R8, -0.000125;  # [1122][002310]
//     	FMUL32I.FTZ R8, R8, 0xbd14f209;  # [1123][002318]
//     	FMUL32I.FTZ R29, R8, 0x3fb8aa3b; # [1124][002320]
//     	TEX.LZ.NODEP.P R8, R6, 0x7, 0x0, 2D, 0x7; # [1125][002328]
//     	RRO.EX2 R6, R46;                 # [1126][002330]
//     	RRO.EX2 R29, R29;                # [1127][002338]
//     	FFMA.FTZ R46, R34, R48, R47;     # [1128][002340]
//     	FMUL32I.FTZ R7, R43, 0x3fb8aa3b; # [1129][002348]
//     	MUFU.EX2 R48, R29;               # [1130][002350]
//     	FFMA.FTZ R47, R51, R59, c[0x2][0x6c]; # [1131][002358]
//     	MOV R29, c[0x2][0x9c];           # [1132][002360]
//     	FADD.FTZ R43, -R53, R52;         # [1133][002368]
//     	FMUL.FTZ R29, R29, c[0x2][0x9c]; # [1134][002370]
//     	RRO.EX2 R7, R7;                  # [1135][002378]
//     	MUFU.RCP R29, R29;               # [1136][002380]
//     	MOV32I R52, 0x3f800000;          # [1137][002388]
//     	MUFU.EX2 R6, R6;                 # [1138][002390]
//     	FMUL.FTZ R47, R47, R49;          # [1139][002398]
//     	FMUL.FTZ R29, R50, R29;          # [1140][0023a0]
//     	MUFU.EX2 R7, R7;                 # [1141][0023a8]
//     	FMUL.FTZ R49, R36, R51;          # [1142][0023b0]
//     	FFMA.FTZ R46, R46, c[0x10][0x38], R52; # [1143][0023b8]
//     	FFMA.FTZ R29, R29, -R29, R52;    # [1144][0023c0]
//     	FMUL.FTZ R7, R43, R7;            # [1145][0023c8]
//     	FFMA.FTZ R52, R48, 200, R6;      # [1146][0023d0]
//     	FMUL.FTZ R46, R46, R46;          # [1147][0023d8]
//     	FMUL.FTZ R6, R38, R51;           # [1148][0023e0]
//     	FMUL32I.FTZ R48, R49, 0x3f3ee4d0; # [1149][0023e8]
//     	FMUL.FTZ R43, R43, R52;          # [1150][0023f0]
//     	FMUL.FTZ R51, R34, R51;          # [1151][0023f8]
//     	FMUL32I.FTZ R52, R49, 0x3e028e29; # [1152][002400]
//     	FFMA.FTZ R48, R6, c[0x10][0x1c], R48; # [1153][002408]
//     	FMUL32I.FTZ R49, R49, 0xbf276c23; # [1154][002410]
//     	FFMA.FTZ R52, R6, c[0x10][0x10], R52; # [1155][002418]
//     	FFMA.FTZ R48, R51, c[0x10][0x20], R48; # [1156][002420]
//     	FFMA.FTZ R6, R6, c[0x10][0x2c], R49; # [1157][002428]
//     	FFMA.FTZ R49, R51, c[0x10][0x14], R52; # [1158][002430]
//     	FADD32I.FTZ R48, R48, 0xbf1e4005; # [1159][002438]
//     	FFMA.FTZ R51, R51, c[0x10][0x30], R6; # [1160][002440]
//     	FADD.FTZ R48, -R18, R48;         # [1161][002448]
//     	FADD32I.FTZ R6, R49, 0x434de9e8; # [1162][002450]
//     	FMUL.FTZ R48, R48, R48;          # [1163][002458]
//     	FADD32I.FTZ R49, R51, 0xc08ea342; # [1164][002460]
//     	FADD.FTZ R6, -R17, R6;           # [1165][002468]
//     	FADD.FTZ R49, -R19, R49;         # [1166][002470]
//     	FFMA.FTZ R48, R6, R6, R48;       # [1167][002478]
//     	FFMA.FTZ R48, R49, R49, R48;     # [1168][002480]
//     	FADD.FTZ R50, R50, 1;            # [1169][002488]
//     	MUFU.RSQ R48, R48;               # [1170][002490]
//     	FMUL32I.FTZ R46, R46, 0x41490fdb; # [1171][002498]
//     	FMUL.FTZ R49, R6, R48;           # [1172][0024a0]
//     	MUFU.RCP R46, R46;               # [1173][0024a8]
//     	MUFU.RCP R6, R48;                # [1174][0024b0]
//     	FMUL32I.FTZ R51, R49, 0xba5a740e; # [1175][0024b8]
//     	FMUL32I.FTZ R48, R49, 0xbd14f209; # [1176][0024c0]
//     	FMUL.FTZ R51, R6, R51;           # [1177][0024c8]
//     	FMUL.FTZ R48, R6, R48;           # [1178][0024d0]
//     	FMUL32I.FTZ R52, R51, 0x3fb8aa3b; # [1179][0024d8]
//     	FMUL32I.FTZ R48, R48, 0x3fb8aa3b; # [1180][0024e0]
//     	FMUL32I.FTZ R51, R49, 0x3d14f209; # [1181][0024e8]
//     	RRO.EX2 R48, R48;                # [1182][0024f0]
//     	RRO.EX2 R52, R52;                # [1183][0024f8]
//     	MUFU.EX2 R48, R48;               # [1184][002500]
//     	MUFU.RCP R51, R51;               # [1185][002508]
//     	FADD.FTZ R48, -R48, 1;           # [1186][002510]
//     	MUFU.EX2 R52, R52;               # [1187][002518]
//     	FMUL.FTZ R48, R35, R48;          # [1188][002520]
//     	FADD.FTZ R52, -R52, 1;           # [1189][002528]
//     	FMUL.FTZ R48, R48, R51;          # [1190][002530]
//     	FMUL.FTZ R52, R30, R52;          # [1191][002538]
//     	FMUL32I.FTZ R51, R49, 0x3a5a740e; # [1192][002540]
//     	FSETP.NEU.FTZ.AND P0, PT, R49, RZ, PT; # [1193][002548]
//     	MUFU.RCP R51, R51;               # [1194][002550]
//     	@!P0 FMUL.FTZ R48, R35, R6;      # [1195][002558]
//     	FMUL.FTZ R51, R52, R51;          # [1196][002560]
//     	FMNMX.FTZ R29, R29, RZ, !PT;     # [1197][002568]
//     	FMUL32I.FTZ R52, R49, -0.000125; # [1198][002570]
//     	@!P0 FMUL.FTZ R51, R30, R6;      # [1199][002578]
//     	FMUL.FTZ R52, R6, R52;           # [1200][002580]
//     	FFMA.FTZ R51, R48, 200, R51;     # [1201][002588]
//     	FMUL32I.FTZ R52, R52, 0x3fb8aa3b; # [1202][002590]
//     	FMUL32I.FTZ R48, R43, 0.0075;    # [1203][002598]
//     	RRO.EX2 R52, R52;                # [1204][0025a0]
//     	FFMA.FTZ R48, RZ, R7, R48;       # [1205][0025a8]
//     	MUFU.EX2 R52, R52;               # [1206][0025b0]
//     	FMUL32I.FTZ R49, R49, 0.000125;  # [1207][0025b8]
//     	FMUL32I.FTZ R48, R48, 0xbfb8aa3b; # [1208][0025c0]
//     	FADD.FTZ R52, -R52, 1;           # [1209][0025c8]
//     	MUFU.RCP R49, R49;               # [1210][0025d0]
//     	FMUL.FTZ R52, R37, R52;          # [1211][0025d8]
//     	RRO.EX2 R48, R48;                # [1212][0025e0]
//     	FMUL.FTZ R52, R52, R49;          # [1213][0025e8]
//     	@!P0 FMUL.FTZ R52, R37, R6;      # [1214][0025f0]
//     	MUFU.EX2 R49, R48;               # [1215][0025f8]
//     	FMUL32I.FTZ R6, R51, 0.012015;   # [1216][002600]
//     	FMUL32I.FTZ R48, R51, 0x3cb851eb; # [1217][002608]
//     	FMUL32I.FTZ R51, R51, 0.0075;    # [1218][002610]
//     	FFMA.FTZ R48, RZ, R52, R48;      # [1219][002618]
//     	FFMA.FTZ R6, RZ, R52, R6;        # [1220][002620]
//     	FFMA.FTZ R51, RZ, R52, R51;      # [1221][002628]
//     	FMUL32I.FTZ R52, R43, 0x3cb851eb; # [1222][002630]
//     	FSET.BF.GE.FTZ.AND R45, R45, R47, PT; # [1223][002638]
//     	FMUL.FTZ R33, R33, R49;          # [1224][002640]
//     	MUFU.RCP R47, R50;               # [1225][002648]
//     	FFMA.FTZ R52, RZ, R7, R52;       # [1226][002650]
//     	FMUL32I.FTZ R49, R43, 0.012015;  # [1227][002658]
//     	FMUL32I.FTZ R6, R6, 0xbfb8aa3b;  # [1228][002660]
//     	FMUL32I.FTZ R51, R51, 0xbfb8aa3b; # [1229][002668]
//     	FMUL32I.FTZ R50, R52, 0xbfb8aa3b; # [1230][002670]
//     	FMUL.FTZ R9, R45, R9;            # [1231][002678]
//     	FMUL.FTZ R8, R45, R8;            # [1232][002680]
//     	FMUL.FTZ R10, R45, R10;          # [1233][002688]
//     	FFMA.FTZ R49, RZ, R7, R49;       # [1234][002690]
//     	FMUL32I.FTZ R48, R48, 0xbfb8aa3b; # [1235][002698]
//     	RRO.EX2 R45, R50;                # [1236][0026a0]
//     	RRO.EX2 R6, R6;                  # [1237][0026a8]
//     	RRO.EX2 R50, R51;                # [1238][0026b0]
//     	FMUL32I.FTZ R46, R46, 0x3b9d4951; # [1239][0026b8]
//     	FMUL.FTZ R9, R29, R9;            # [1240][0026c0]
//     	FMUL32I.FTZ R49, R49, 0xbfb8aa3b; # [1241][0026c8]
//     	FMUL.FTZ R10, R29, R10;          # [1242][0026d0]
//     	RRO.EX2 R48, R48;                # [1243][0026d8]
//     	FMUL.FTZ R8, R29, R8;            # [1244][0026e0]
//     	MUFU.EX2 R6, R6;                 # [1245][0026e8]
//     	FMUL.FTZ R29, R43, R46;          # [1246][0026f0]
//     	FMUL.FTZ R9, R47, R9;            # [1247][0026f8]
//     	MUFU.EX2 R50, R50;               # [1248][002700]
//     	RRO.EX2 R49, R49;                # [1249][002708]
//     	FMUL.FTZ R10, R47, R10;          # [1250][002710]
//     	MUFU.EX2 R43, R48;               # [1251][002718]
//     	FMUL.FTZ R46, R47, R8;           # [1252][002720]
//     	FMUL.FTZ R9, R6, R9;             # [1253][002728]
//     	MUFU.EX2 R49, R49;               # [1254][002730]
//     	FFMA.FTZ R6, RZ, R7, R29;        # [1255][002738]
//     	FMUL.FTZ R8, R50, R10;           # [1256][002740]
//     	MUFU.EX2 R45, R45;               # [1257][002748]
//     	MOV R10, R28;                    # [1258][002750]
//     	FMUL.FTZ R29, R43, R46;          # [1259][002758]
//     	FMUL.FTZ R9, R9, R6;             # [1260][002760]
//     	FMUL.FTZ R7, R8, R6;             # [1261][002768]
//     	FMUL.FTZ R32, R32, R49;          # [1262][002770]
//     	FMUL.FTZ R31, R31, R45;          # [1263][002778]
//     	FSETP.GE.FTZ.AND P0, PT, R10, R54, PT; # [1264][002780]
//     	FMUL.FTZ R6, R29, R6;            # [1265][002788]
//     	FMUL32I.FTZ R28, R28, 0x3fe39ea9; # [1266][002790]
//     	FFMA.FTZ R27, R7, R33, R27;      # [1267][002798]
//     	FFMA.FTZ R26, R9, R32, R26;      # [1268][0027a0]
//     	FFMA.FTZ R25, R6, R31, R25;      # [1269][0027a8]
//     	@!P0 BRA L2218;                  # [1270][0027b0]
//     L27b8:
//     	FSETP.GE.FTZ.AND.S P0, PT, R24, R16, PT; # [1271][0027b8]
//     L27c0:
//     	FSETP.LT.FTZ.AND P0, PT, R55, R16, P0; # [1272][0027c0]
//     	FFMA.FTZ R22, R27, c[0x2][0x98], R22; # [1273][0027c8]
//     	FFMA.FTZ R21, R26, c[0x2][0x94], R21; # [1274][0027d0]
//     	FFMA.FTZ R20, R25, c[0x2][0x90], R20; # [1275][0027d8]
//     	@!P0 BRA L3368;                  # [1276][0027e0]
//     	FMUL.FTZ R7, R15, c[0x2][0x40];  # [1277][0027e8]
//     	MOV32I R62, 0x3e79db23;          # [1278][0027f0]
//     	FMUL.FTZ R6, R15, c[0x2][0x70];  # [1279][0027f8]
//     	FMUL.FTZ R16, R15, c[0x2][0x50]; # [1280][002800]
//     	FMUL.FTZ R8, R15, c[0x2][0x60];  # [1281][002808]
//     	FFMA.FTZ R15, R14, c[0x2][0x44], R7; # [1282][002810]
//     	FMUL32I.FTZ R7, R11, 0x3f3ee4d0; # [1283][002818]
//     	FFMA.FTZ R10, R14, c[0x2][0x74], R6; # [1284][002820]
//     	FMUL32I.FTZ R6, R11, 0x3e028e29; # [1285][002828]
//     	FFMA.FTZ R9, R14, c[0x2][0x64], R8; # [1286][002830]
//     	FFMA.FTZ R7, R42, c[0x10][0x1c], R7; # [1287][002838]
//     	FFMA.FTZ R10, R12, c[0x2][0x78], R10; # [1288][002840]
//     	FMUL32I.FTZ R8, R11, 0xbf276c23; # [1289][002848]
//     	FFMA.FTZ R6, R42, c[0x10][0x10], R6; # [1290][002850]
//     	FFMA.FTZ R7, R44, c[0x10][0x20], R7; # [1291][002858]
//     	FFMA.FTZ R8, R42, c[0x10][0x2c], R8; # [1292][002860]
//     	FFMA.FTZ R10, R13, c[0x2][0x7c], R10; # [1293][002868]
//     	FADD32I.FTZ R7, R7, 0xbf1e4005;  # [1294][002870]
//     	FFMA.FTZ R9, R12, c[0x2][0x68], R9; # [1295][002878]
//     	FFMA.FTZ R6, R44, c[0x10][0x14], R6; # [1296][002880]
//     	MUFU.RCP R46, R10;               # [1297][002888]
//     	MOV R24, c[0x2][0x9c];           # [1298][002890]
//     	FADD.FTZ R7, -R18, R7;           # [1299][002898]
//     	FFMA.FTZ R45, R13, c[0x2][0x6c], R9; # [1300][0028a0]
//     	FADD32I.FTZ R6, R6, 0x434de9e8;  # [1301][0028a8]
//     	MUFU.RCP R10, R24;               # [1302][0028b0]
//     	FFMA.FTZ R8, R44, c[0x10][0x30], R8; # [1303][0028b8]
//     	FFMA.FTZ R9, R45, R46, c[0x10][0x40]; # [1304][0028c0]
//     	FADD.FTZ R53, -R17, R6;          # [1305][0028c8]
//     	FFMA.FTZ R14, R14, c[0x2][0x54], R16; # [1306][0028d0]
//     	FMUL.FTZ R6, R7, R7;             # [1307][0028d8]
//     	FADD32I.FTZ R8, R8, 0xc08ea342;  # [1308][0028e0]
//     	FMUL.FTZ R7, R9, R10;            # [1309][0028e8]
//     	FFMA.FTZ R14, R12, c[0x2][0x58], R14; # [1310][0028f0]
//     	FFMA.FTZ R6, R53, R53, R6;       # [1311][0028f8]
//     	FFMA.FTZ R10, R12, c[0x2][0x48], R15; # [1312][002900]
//     	FADD.FTZ R8, -R19, R8;           # [1313][002908]
//     	FFMA.FTZ R12, R13, c[0x2][0x5c], R14; # [1314][002910]
//     	FMUL.FTZ R9, R7, 0.75;           # [1315][002918]
//     	FFMA.FTZ R10, R13, c[0x2][0x4c], R10; # [1316][002920]
//     	FFMA.FTZ R8, R8, R8, R6;         # [1317][002928]
//     	FMUL.FTZ R7, R12, R46;           # [1318][002930]
//     	FMNMX.FTZ R47, R9, -c[0x10][0x3c], !PT; # [1319][002938]
//     	FMUL.FTZ R6, R10, R46;           # [1320][002940]
//     	FADD.FTZ R43, -R11, c[0x2][0x80]; # [1321][002948]
//     	FFMA.FTZ R29, R47, c[0x10][0x44], R7; # [1322][002950]
//     	FFMA.FTZ R11, R47, RZ, R7;       # [1323][002958]
//     	FFMA.FTZ R28, R47, c[0x10][0x44], R6; # [1324][002960]
//     	FFMA.FTZ R26, R47, RZ, R6;       # [1325][002968]
//     	MUFU.RSQ R56, R8;                # [1326][002970]
//     	FFMA.FTZ R27, R47, 0.875, R7;    # [1327][002978]
//     	FFMA.FTZ R25, R47, c[0x10][0x48], R7; # [1328][002980]
//     	FFMA.FTZ R24, R47, -c[0x10][0x48], R6; # [1329][002988]
//     	FFMA.FTZ R17, R47, c[0x10][0x4c], R7; # [1330][002990]
//     	FFMA.FTZ R16, R47, c[0x10][0x4c], R6; # [1331][002998]
//     	FADD.FTZ R18, R47, R6;           # [1332][0029a0]
//     	TEX.LZ.NODEP.P R28, R28, 0x8, 0x1, 2D, 0x1; # [1333][0029a8]
//     	FFMA.FTZ R15, R47, -0.625, R7;   # [1334][0029b0]
//     	FFMA.FTZ R13, R47, c[0x10][0x50], R7; # [1335][0029b8]
//     	FFMA.FTZ R12, R47, -c[0x10][0x50], R6; # [1336][0029c0]
//     	FFMA.FTZ R10, R47, -0.75, R6;    # [1337][0029c8]
//     	FFMA.FTZ R9, R47, c[0x10][0x54], R7; # [1338][0029d0]
//     	FFMA.FTZ R8, R47, c[0x10][0x58], R6; # [1339][0029d8]
//     	MOV R14, R26;                    # [1340][0029e0]
//     	MOV R19, R11;                    # [1341][0029e8]
//     	FMUL.FTZ R55, R53, R56;          # [1342][0029f0]
//     	TEX.LZ.NODEP R29, R26, 0x8, 0x1, 2D, 0x1; # [1343][0029f8]
//     	MUFU.RCP R53, R56;               # [1344][002a00]
//     	TEX.LZ.NODEP R48, R24, 0x8, 0x1, 2D, 0x1; # [1345][002a08]
//     	FMUL32I.FTZ R26, R55, 0xbd14f209; # [1346][002a10]
//     	TEX.LZ.NODEP R49, R16, 0x8, 0x1, 2D, 0x1; # [1347][002a18]
//     	FMUL.FTZ R56, R53, R26;          # [1348][002a20]
//     	TEX.LZ.NODEP R50, R18, 0x8, 0x1, 2D, 0x1; # [1349][002a28]
//     	FMUL32I.FTZ R19, R55, 0xba5a740e; # [1350][002a30]
//     	TEX.LZ.NODEP R51, R14, 0x8, 0x1, 2D, 0x1; # [1351][002a38]
//     	FMUL.FTZ R58, R53, R19;          # [1352][002a40]
//     	TEX.LZ.NODEP R52, R12, 0x8, 0x1, 2D, 0x1; # [1353][002a48]
//     	FMUL32I.FTZ R19, R55, -0.000125; # [1354][002a50]
//     	TEX.LZ.NODEP.P R54, R10, 0x8, 0x1, 2D, 0x1; # [1355][002a58]
//     	FFMA.FTZ R10, R47, 0.5, R6;      # [1356][002a60]
//     	FMUL32I.FTZ R58, R58, 0x3fb8aa3b; # [1357][002a68]
//     	FMUL.FTZ R57, R53, R19;          # [1358][002a70]
//     	FFMA.FTZ R15, R47, c[0x10][0x5c], R7; # [1359][002a78]
//     	FFMA.FTZ R14, R47, c[0x10][0x60], R6; # [1360][002a80]
//     	FFMA.FTZ R13, R47, c[0x10][0x64], R7; # [1361][002a88]
//     	FFMA.FTZ R12, R47, c[0x10][0x68], R6; # [1362][002a90]
//     	FFMA.FTZ R17, R47, c[0x10][0x6c], R7; # [1363][002a98]
//     	FFMA.FTZ R16, R47, c[0x10][0x70], R6; # [1364][002aa0]
//     	FFMA.FTZ R18, R47, 0.1875, R6;   # [1365][002aa8]
//     	FFMA.FTZ R25, R47, c[0x10][0x74], R7; # [1366][002ab0]
//     	FFMA.FTZ R24, R47, -0.0625, R6;  # [1367][002ab8]
//     	FFMA.FTZ R27, R47, c[0x10][0x78], R7; # [1368][002ac0]
//     	FFMA.FTZ R26, R47, -0.03125, R6; # [1369][002ac8]
//     	MOV R19, R11;                    # [1370][002ad0]
//     	FMUL32I.FTZ R47, R57, 0x3fb8aa3b; # [1371][002ad8]
//     	FMUL32I.FTZ R56, R56, 0x3fb8aa3b; # [1372][002ae0]
//     	RRO.EX2 R58, R58;                # [1373][002ae8]
//     	FMUL32I.FTZ R57, R55, 0x3d14f209; # [1374][002af0]
//     	TEX.LZ.NODEP.P R11, R10, 0x8, 0x1, 2D, 0x1; # [1375][002af8]
//     	RRO.EX2 R10, R56;                # [1376][002b00]
//     	TEX.LZ.NODEP R59, R8, 0x8, 0x1, 2D, 0x1; # [1377][002b08]
//     	FMUL.FTZ R8, R43, R43;           # [1378][002b10]
//     	TEX.LZ.NODEP R14, R14, 0x8, 0x1, 2D, 0x1; # [1379][002b18]
//     	RRO.EX2 R9, R47;                 # [1380][002b20]
//     	TEX.LZ.NODEP R12, R12, 0x8, 0x1, 2D, 0x1; # [1381][002b28]
//     	MUFU.EX2 R10, R10;               # [1382][002b30]
//     	TEX.LZ.NODEP R13, R16, 0x8, 0x1, 2D, 0x1; # [1383][002b38]
//     	MUFU.EX2 R9, R9;                 # [1384][002b40]
//     	TEX.LZ.NODEP R15, R18, 0x8, 0x1, 2D, 0x1; # [1385][002b48]
//     	FSETP.NEU.FTZ.AND P0, PT, R55, RZ, PT; # [1386][002b50]
//     	TEX.LZ.NODEP R16, R24, 0x8, 0x1, 2D, 0x1; # [1387][002b58]
//     	MUFU.EX2 R25, R58;               # [1388][002b60]
//     	TEX.LZ.NODEP.P R17, R26, 0x8, 0x1, 2D, 0x1; # [1389][002b68]
//     	FADD.FTZ R18, -R42, c[0x2][0x84]; # [1390][002b70]
//     	FADD.FTZ R24, -R44, c[0x2][0x88]; # [1391][002b78]
//     	FFMA.FTZ R8, R18, R18, R8;       # [1392][002b80]
//     	FMUL32I.FTZ R42, R55, 0x3a5a740e; # [1393][002b88]
//     	FFMA.FTZ R19, R24, R24, R8;      # [1394][002b90]
//     	FFMA.FTZ R26, R45, R46, c[0x10][0x3c]; # [1395][002b98]
//     	FADD.FTZ R8, -R10, 1;            # [1396][002ba0]
//     	FADD.FTZ R56, -R25, 1;           # [1397][002ba8]
//     	FADD.FTZ R45, -R9, 1;            # [1398][002bb0]
//     	MUFU.RCP R27, R57;               # [1399][002bb8]
//     	FMUL.FTZ R47, R8, R35;           # [1400][002bc0]
//     	MUFU.RCP R42, R42;               # [1401][002bc8]
//     	FMUL.FTZ R44, R39, -R36;         # [1402][002bd0]
//     	FMUL32I.FTZ R46, R55, 0.000125;  # [1403][002bd8]
//     	MUFU.RSQ R25, R19;               # [1404][002be0]
//     	TEX.LZ.NODEP.P R8, R6, 0x7, 0x0, 2D, 0x7; # [1405][002be8]
//     	FMUL.FTZ R56, R56, R30;          # [1406][002bf0]
//     	FFMA.FTZ R6, R40, -R38, R44;     # [1407][002bf8]
//     	MUFU.RCP R46, R46;               # [1408][002c00]
//     	FMUL.FTZ R7, R45, R37;           # [1409][002c08]
//     	FMUL.FTZ R44, R56, R42;          # [1410][002c10]
//     	FMUL.FTZ R27, R47, R27;          # [1411][002c18]
//     	FMUL.FTZ R42, R25, R43;          # [1412][002c20]
//     	@!P0 FMUL.FTZ R27, R53, R35;     # [1413][002c28]
//     	@!P0 FMUL.FTZ R44, R53, R30;     # [1414][002c30]
//     	FMUL.FTZ R35, R25, R18;          # [1415][002c38]
//     	FMUL.FTZ R7, R7, R46;            # [1416][002c40]
//     	FFMA.FTZ R6, R41, -R34, R6;      # [1417][002c48]
//     	FMUL.FTZ R30, R39, R42;          # [1418][002c50]
//     	@!P0 FMUL.FTZ R7, R53, R37;      # [1419][002c58]
//     	FMUL.FTZ R53, R25, R24;          # [1420][002c60]
//     	MOV32I R45, 0x3cba7547;          # [1421][002c68]
//     	F2F.SAT R46, R6;                 # [1422][002c70]
//     	FFMA.FTZ R30, R40, R35, R30;     # [1423][002c78]
//     	MOV32I R47, 0x3ec6a7f0;          # [1424][002c80]
//     	MOV32I R58, 0x3d981627;          # [1425][002c88]
//     	FFMA.FTZ R37, R41, R53, R30;     # [1426][002c90]
//     	FFMA.FTZ R55, R39, -R46, -R36;   # [1427][002c98]
//     	FADD.FTZ R30, -R46, 1;           # [1428][002ca0]
//     	FFMA.FTZ R57, R23, c[0x10][0x84], R45; # [1429][002ca8]
//     	FFMA.FTZ R45, R23, c[0x10][0x7c], R47; # [1430][002cb0]
//     	FMUL.FTZ R60, R55, R55;          # [1431][002cb8]
//     	FFMA.FTZ R61, R46, c[0x10][0x88], R58; # [1432][002cc0]
//     	FFMA.FTZ R47, R40, -R46, -R38;   # [1433][002cc8]
//     	MUFU.RSQ R56, R30;               # [1434][002cd0]
//     	FFMA.FTZ R62, R23, c[0x10][0x80], R62; # [1435][002cd8]
//     	F2F.SAT R30, R37;                # [1436][002ce0]
//     	FFMA.FTZ R61, R61, R46, c[0x10][0x8c]; # [1437][002ce8]
//     	FFMA.FTZ R23, R47, R47, R60;     # [1438][002cf0]
//     	MUFU.RCP R56, R56;               # [1439][002cf8]
//     	FFMA.FTZ R60, R41, -R46, -R34;   # [1440][002d00]
//     	FFMA.FTZ R42, R39, -R30, R42;    # [1441][002d08]
//     	FFMA.FTZ R46, R61, R46, c[0x10][0x90]; # [1442][002d10]
//     	FFMA.FTZ R53, R41, -R30, R53;    # [1443][002d18]
//     	FFMA.FTZ R61, R40, -R30, R35;    # [1444][002d20]
//     	FSET.BF.GE.FTZ.AND R28, R28, R26, PT; # [1445][002d28]
//     	FMUL.FTZ R35, R42, R42;          # [1446][002d30]
//     	FMUL.FTZ R46, R56, R46;          # [1447][002d38]
//     	FSET.BF.GE.FTZ.AND R29, R29, R26, PT; # [1448][002d40]
//     	FSET.BF.GE.FTZ.AND R49, R49, R26, PT; # [1449][002d48]
//     	FFMA.FTZ R56, R61, R61, R35;     # [1450][002d50]
//     	FSET.BF.GE.FTZ.AND R50, R50, R26, PT; # [1451][002d58]
//     	FADD.FTZ R35, -R30, 1;           # [1452][002d60]
//     	FFMA.FTZ R43, R43, R25, -R36;    # [1453][002d68]
//     	FFMA.FTZ R23, R60, R60, R23;     # [1454][002d70]
//     	FADD.FTZ R28, R28, R29;          # [1455][002d78]
//     	FFMA.FTZ R56, R53, R53, R56;     # [1456][002d80]
//     	LDL.LU R29, [0xc];               # [1457][002d88]
//     	FFMA.FTZ R58, R30, c[0x10][0x88], R58; # [1458][002d90]
//     	FADD.FTZ R49, R50, R49;          # [1459][002d98]
//     	MUFU.RSQ R35, R35;               # [1460][002da0]
//     	FFMA.FTZ R18, R18, R25, -R38;    # [1461][002da8]
//     	FMUL.FTZ R50, R43, R43;          # [1462][002db0]
//     	MUFU.RSQ R23, R23;               # [1463][002db8]
//     	MUFU.RSQ R56, R56;               # [1464][002dc0]
//     	FFMA.FTZ R58, R58, R30, c[0x10][0x8c]; # [1465][002dc8]
//     	FFMA.FTZ R24, R24, R25, -R34;    # [1466][002dd0]
//     	FFMA.FTZ R50, R18, R18, R50;     # [1467][002dd8]
//     	MUFU.RCP R35, R35;               # [1468][002de0]
//     	FSET.BF.GE.FTZ.AND R25, R48, R26, PT; # [1469][002de8]
//     	FMUL.FTZ R55, R23, R55;          # [1470][002df0]
//     	FFMA.FTZ R58, R58, R30, c[0x10][0x90]; # [1471][002df8]
//     	FMUL.FTZ R42, R56, R42;          # [1472][002e00]
//     	FFMA.FTZ R50, R24, R24, R50;     # [1473][002e08]
//     	FADD.FTZ R28, R28, R25;          # [1474][002e10]
//     	FMUL.FTZ R35, R35, R58;          # [1475][002e18]
//     	FMUL.FTZ R25, R55, R42;          # [1476][002e20]
//     	FMUL32I.FTZ R29, R29, 0x3fc90fdb; # [1477][002e28]
//     	MUFU.RSQ R42, R50;               # [1478][002e30]
//     	FMNMX.FTZ R48, R46, R35, !PT;    # [1479][002e38]
//     	FSET.BF.GE.FTZ.AND R50, R54, R26, PT; # [1480][002e40]
//     	FSET.BF.GE.FTZ.AND R51, R51, R26, PT; # [1481][002e48]
//     	FMNMX.FTZ R35, R46, R35, PT;     # [1482][002e50]
//     	FFMA.FTZ R27, R27, 200, R44;     # [1483][002e58]
//     	FFMA.FTZ R46, R29, R29, c[0x10][0x98]; # [1484][002e60]
//     	FADD.FTZ R28, R28, R50;          # [1485][002e68]
//     	FMUL.FTZ R50, R42, R43;          # [1486][002e70]
//     	FADD.FTZ R49, R49, R51;          # [1487][002e78]
//     	MOV R43, c[0x2][0x9c];           # [1488][002e80]
//     	FSET.BF.GE.FTZ.AND R51, R52, R26, PT; # [1489][002e88]
//     	MUFU.RCP R44, R46;               # [1490][002e90]
//     	FSET.BF.GE.FTZ.AND R54, R11, R26, PT; # [1491][002e98]
//     	FFMA.FTZ R46, R29, R29, c[0x10][0x94]; # [1492][002ea0]
//     	FMUL.FTZ R52, R29, R29;          # [1493][002ea8]
//     	FMUL.FTZ R43, R43, c[0x2][0x9c]; # [1494][002eb0]
//     	FADD.FTZ R11, R49, R51;          # [1495][002eb8]
//     	MUFU.RCP R51, R46;               # [1496][002ec0]
//     	FMUL.FTZ R39, R39, R50;          # [1497][002ec8]
//     	MUFU.RCP R46, R43;               # [1498][002ed0]
//     	FMUL.FTZ R47, R23, R47;          # [1499][002ed8]
//     	FMUL.FTZ R43, R52, R44;          # [1500][002ee0]
//     	FMUL.FTZ R23, R23, R60;          # [1501][002ee8]
//     	FMUL.FTZ R44, R42, R18;          # [1502][002ef0]
//     	FMNMX.FTZ R6, R6, -c[0x10][0x3c], !PT; # [1503][002ef8]
//     	FMUL.FTZ R42, R42, R24;          # [1504][002f00]
//     	FMNMX.FTZ R37, R37, -c[0x10][0x3c], !PT; # [1505][002f08]
//     	FFMA.FTZ R24, R40, R44, R39;     # [1506][002f10]
//     	FMUL.FTZ R60, R56, R61;          # [1507][002f18]
//     	FMUL.FTZ R50, R36, -R50;         # [1508][002f20]
//     	FMUL.FTZ R39, R19, R46;          # [1509][002f28]
//     	FMUL.FTZ R46, R6, R37;           # [1510][002f30]
//     	FFMA.FTZ R40, R41, R42, R24;     # [1511][002f38]
//     	FMUL.FTZ R53, R56, R53;          # [1512][002f40]
//     	FFMA.FTZ R41, R47, R60, R25;     # [1513][002f48]
//     	FMUL32I.FTZ R49, R3, 0x3fc90fdb; # [1514][002f50]
//     	FFMA.FTZ R44, R38, -R44, R50;    # [1515][002f58]
//     	MUFU.RCP R24, R46;               # [1516][002f60]
//     	RRO.SINCOS R25, R48;             # [1517][002f68]
//     	FMNMX.FTZ R40, R40, -c[0x10][0x3c], !PT; # [1518][002f70]
//     	FMUL32I.FTZ R46, R35, 0x3f22f983; # [1519][002f78]
//     	FFMA.FTZ R23, R23, R53, R41;     # [1520][002f80]
//     	FMUL.FTZ R36, R49, R49;          # [1521][002f88]
//     	FFMA.FTZ R34, R34, -R42, R44;    # [1522][002f90]
//     	FMUL.FTZ R49, R48, R35;          # [1523][002f98]
//     	FADD.FTZ R41, R35, R48;          # [1524][002fa0]
//     	MOV32I R18, 0x3f800000;          # [1525][002fa8]
//     	MUFU.SIN R25, R25;               # [1526][002fb0]
//     	RRO.SINCOS R48, R35;             # [1527][002fb8]
//     	FMUL.FTZ R47, R46, R46;          # [1528][002fc0]
//     	FSETP.GE.FTZ.AND P0, PT, R23, RZ, PT; # [1529][002fc8]
//     	FMUL.FTZ R42, R40, R40;          # [1530][002fd0]
//     	MUFU.RCP R35, R34;               # [1531][002fd8]
//     	FMNMX.FTZ R44, R6, R37, PT;      # [1532][002fe0]
//     	FFMA.FTZ R34, R43, -0.5, R18;    # [1533][002fe8]
//     	@!P0 FFMA.FTZ R25, R46, -R47, R25; # [1534][002ff0]
//     	FMUL.FTZ R38, R36, 4;            # [1535][002ff8]
//     	FMUL.FTZ R43, R36, R42;          # [1536][003000]
//     	MUFU.COS R46, R48;               # [1537][003008]
//     	FMUL.FTZ R44, R40, R44;          # [1538][003010]
//     	FMUL.FTZ R36, R41, 0.5;          # [1539][003018]
//     	FMUL.FTZ R3, R52, R51;           # [1540][003020]
//     	FMUL.FTZ R42, R42, R42;          # [1541][003028]
//     	MUFU.RCP R41, R43;               # [1542][003030]
//     	FMUL32I.FTZ R47, R49, 0x3ecf817b; # [1543][003038]
//     	FADD.FTZ R43, R44, R44;          # [1544][003040]
//     	MUFU.SIN R6, R48;                # [1545][003048]
//     	MUFU.RCP R44, R46;               # [1546][003050]
//     	FMUL.FTZ R37, R3, 0.125;         # [1547][003058]
//     	FMUL.FTZ R42, R38, R42;          # [1548][003060]
//     	FMUL.FTZ R46, R47, R47;          # [1549][003068]
//     	FFMA.FTZ R48, R39, -R39, c[0x10][0xa0]; # [1550][003070]
//     	RRO.SINCOS R38, R36;             # [1551][003078]
//     	FFMA.FTZ R39, R40, R40, -R18;    # [1552][003080]
//     	FMUL.FTZ R35, R43, R35;          # [1553][003088]
//     	FMUL.FTZ R40, R46, R37;          # [1554][003090]
//     	MUFU.RCP R18, R42;               # [1555][003098]
//     	MUFU.SIN R37, R38;               # [1556][0030a0]
//     	FSET.BF.GE.FTZ.AND R55, R59, R26, PT; # [1557][0030a8]
//     	MUFU.COS R38, R38;               # [1558][0030b0]
//     	FSET.BF.GE.FTZ.AND R43, R14, R26, PT; # [1559][0030b8]
//     	FSET.BF.GE.FTZ.AND R42, R13, R26, PT; # [1560][0030c0]
//     	FSET.BF.GE.FTZ.AND R15, R15, R26, PT; # [1561][0030c8]
//     	FADD.FTZ R29, R54, R55;          # [1562][0030d0]
//     	MUFU.RCP R14, R38;               # [1563][0030d8]
//     	FSET.BF.GE.FTZ.AND R38, R12, R26, PT; # [1564][0030e0]
//     	FMUL.FTZ R39, R39, R41;          # [1565][0030e8]
//     	FADD.FTZ R15, R15, R42;          # [1566][0030f0]
//     	FSET.BF.GE.FTZ.AND R12, R16, R26, PT; # [1567][0030f8]
//     	FADD.FTZ R41, -|R23|, 1;         # [1568][003100]
//     	FADD.FTZ R29, R29, R43;          # [1569][003108]
//     	FMUL32I.FTZ R39, R39, 0x3fb8aa3b; # [1570][003110]
//     	FADD.FTZ R16, R12, R15;          # [1571][003118]
//     	FMUL32I.FTZ R36, R3, 0.45;       # [1572][003120]
//     	FMUL.FTZ R13, R40, R41;          # [1573][003128]
//     	FSET.BF.GE.FTZ.AND R12, R17, R26, PT; # [1574][003130]
//     	FMUL32I.FTZ R41, R27, 0x3cb851eb; # [1575][003138]
//     	FADD.FTZ R28, R28, R11;          # [1576][003140]
//     	FADD.FTZ R29, R29, R38;          # [1577][003148]
//     	FMUL32I.FTZ R26, R27, 0.012015;  # [1578][003150]
//     	FMUL32I.FTZ R40, R27, 0.0075;    # [1579][003158]
//     	RRO.EX2 R11, R39;                # [1580][003160]
//     	FMUL.FTZ R15, R25, R36;          # [1581][003168]
//     	FADD.FTZ R16, R12, R16;          # [1582][003170]
//     	FFMA.FTZ R27, RZ, R7, R41;       # [1583][003178]
//     	FADD.FTZ R17, R28, R29;          # [1584][003180]
//     	FFMA.FTZ R25, RZ, R7, R26;       # [1585][003188]
//     	FMUL.FTZ R12, R37, R14;          # [1586][003190]
//     	MUFU.EX2 R11, R11;               # [1587][003198]
//     	FFMA.FTZ R7, RZ, R7, R40;        # [1588][0031a0]
//     	FMUL.FTZ R14, R23, R15;          # [1589][0031a8]
//     	FADD.FTZ R15, R16, R17;          # [1590][0031b0]
//     	FMUL.FTZ R6, R6, R44;            # [1591][0031b8]
//     	FMUL32I.FTZ R16, R7, 0xbfb8aa3b; # [1592][0031c0]
//     	FMNMX.FTZ R35, R35, 1, PT;       # [1593][0031c8]
//     	FMUL.FTZ R7, R11, R18;           # [1594][0031d0]
//     	FMUL32I.FTZ R17, R25, 0xbfb8aa3b; # [1595][0031d8]
//     	FMUL.FTZ R11, R15, 0.0625;       # [1596][0031e0]
//     	FMUL.FTZ R18, R8, c[0x2][0x90];  # [1597][0031e8]
//     	FMUL.FTZ R15, R9, c[0x2][0x94];  # [1598][0031f0]
//     	FMNMX.FTZ R3, R48, RZ, !PT;      # [1599][0031f8]
//     	FFMA.FTZ R9, R14, R6, R34;       # [1600][003200]
//     	FMUL32I.FTZ R23, R27, 0xbfb8aa3b; # [1601][003208]
//     	FMUL.FTZ R6, R10, c[0x2][0x98];  # [1602][003210]
//     	FMUL.FTZ R14, R11, R15;          # [1603][003218]
//     	FMUL.FTZ R15, R11, R18;          # [1604][003220]
//     	FMUL.FTZ R8, R11, R6;            # [1605][003228]
//     	FMUL.FTZ R11, R14, R62;          # [1606][003230]
//     	FMUL.FTZ R6, R7, R35;            # [1607][003238]
//     	FFMA.FTZ R7, R13, R12, R9;       # [1608][003240]
//     	LDL.LU R14, [0x8];               # [1609][003248]
//     	FMUL.FTZ R8, R8, R45;            # [1610][003250]
//     	FMUL.FTZ R13, R15, R57;          # [1611][003258]
//     	FMUL.FTZ R6, R6, R24;            # [1612][003260]
//     	MUFU.RCP R19, R19;               # [1613][003268]
//     	RRO.EX2 R17, R17;                # [1614][003270]
//     	RRO.EX2 R10, R16;                # [1615][003278]
//     	FMUL.FTZ R11, R11, R3;           # [1616][003280]
//     	FMUL.FTZ R8, R8, R3;             # [1617][003288]
//     	FMUL.FTZ R13, R13, R3;           # [1618][003290]
//     	RRO.EX2 R23, R23;                # [1619][003298]
//     	FMUL.FTZ R3, R6, R1;             # [1620][0032a0]
//     	MUFU.EX2 R12, R17;               # [1621][0032a8]
//     	FMUL32I.FTZ R7, R7, 0x3ea2f983;  # [1622][0032b0]
//     	FMUL.FTZ R1, R6, R2;             # [1623][0032b8]
//     	MUFU.EX2 R9, R10;                # [1624][0032c0]
//     	FMUL.FTZ R8, R8, R19;            # [1625][0032c8]
//     	FMUL.FTZ R10, R11, R19;          # [1626][0032d0]
//     	FMUL.FTZ R6, R6, R0;             # [1627][0032d8]
//     	MUFU.EX2 R16, R23;               # [1628][0032e0]
//     	FMUL.FTZ R11, R13, R19;          # [1629][0032e8]
//     	FFMA.FTZ R2, R5, R7, R3;         # [1630][0032f0]
//     	FFMA.FTZ R0, R14, R7, R1;        # [1631][0032f8]
//     	FMUL.FTZ R5, R10, R12;           # [1632][003300]
//     	FMUL.FTZ R3, R8, R9;             # [1633][003308]
//     	FFMA.FTZ R1, R4, R7, R6;         # [1634][003310]
//     	FMUL.FTZ R2, R5, R2;             # [1635][003318]
//     	FMUL.FTZ R4, R11, R16;           # [1636][003320]
//     	FMUL.FTZ R0, R3, R0;             # [1637][003328]
//     	FMUL.FTZ R3, R4, R1;             # [1638][003330]
//     	FMUL.FTZ R0, R30, R0;            # [1639][003338]
//     	FMUL.FTZ R1, R30, R2;            # [1640][003340]
//     	FMUL.FTZ R17, R33, R0;           # [1641][003348]
//     	FMUL.FTZ R2, R30, R3;            # [1642][003350]
//     	FMUL.FTZ R18, R32, R1;           # [1643][003358]
//     	FMUL.FTZ.S R19, R31, R2;         # [1644][003360]
//     L3368:
//     	MOV R17, RZ;                     # [1645][003368]
//     	MOV R18, RZ;                     # [1646][003370]
//     	MOV.S R19, RZ;                   # [1647][003378]
//     L3380:
//     	MOV R17, RZ;                     # [1648][003380]
//     	MOV R18, RZ;                     # [1649][003388]
//     	MOV.S R19, RZ;                   # [1650][003390]
//     L3398:
//     	MOV32I R7, 0x10;                 # [1651][003398]
//     	IPA.PASS R0, a[0x70];            # [1652][0033a0] POSITION_X
//     	F2I.TRUNC R0, R0;                # [1653][0033a8]
//     	IPA.PASS R1, a[0x74];            # [1654][0033b0] POSITION_Y
//     	SHL.W R0, R0, 0x1;               # [1655][0033b8]
//     	F2I.TRUNC R1, R1;                # [1656][0033c0]
//     	MOV R12, R0;                     # [1657][0033c8]
//     	SHL.W R13, R1, 0x1;              # [1658][0033d0]
//     	IPA.PASS R11, a[0x74];           # [1659][0033d8] POSITION_Y
//     	ISCADD R1, R1, 0x1, 0x1;         # [1660][0033e0]
//     	TLD.LZ.AOFFI.T R3, R12, R7, 0x0, 2D, 0x1; # [1661][0033e8]
//     	MOV32I R34, 0x3f800000;          # [1662][0033f0]
//     	TLD.LZ.NODEP.P R8, R0, 0x1, 2D, 0x7; # [1663][0033f8]
//     	FMUL.FTZ R4, RZ, R11;            # [1664][003400]
//     	IPA.PASS R5, a[0x70];            # [1665][003408] POSITION_X
//     	FMUL.FTZ R6, RZ, R5;             # [1666][003410]
//     	TLD.LZ.AOFFI.NODEP.P R23, R12, R7, 0x4, 2D, 0x1; # [1667][003418]
//     	FFMA.FTZ R5, R5, c[0x10][0x0], R4; # [1668][003420]
//     	FADD.FTZ R2, R6, R4;             # [1669][003428]
//     	FFMA.FTZ R4, R3, c[0x10][0x8], R2; # [1670][003430]
//     	FFMA.FTZ R6, R11, c[0x10][0x4], R6; # [1671][003438]
//     	FADD32I.FTZ R13, R4, 0x41200001; # [1672][003440]
//     	FFMA.FTZ R2, RZ, R3, R2;         # [1673][003448]
//     	FFMA.FTZ R4, RZ, R3, R5;         # [1674][003450]
//     	MUFU.RCP R16, R13;               # [1675][003458]
//     	FFMA.FTZ R5, RZ, R3, R6;         # [1676][003460]
//     	FADD32I.FTZ R15, R4, 0xbf3340cd; # [1677][003468]
//     	FADD32I.FTZ R14, R5, 0x3ec9a8e5; # [1678][003470]
//     	FADD.FTZ R12, R2, -1;            # [1679][003478]
//     	FMUL.FTZ R11, R15, R16;          # [1680][003480]
//     	TLD.LZ.NODEP.P R4, R0, 0x2, 2D;  # [1681][003488]
//     	FMUL.FTZ R42, R14, R16;          # [1682][003490]
//     	FMUL.FTZ R24, R11, R11;          # [1683][003498]
//     	FMUL.FTZ R44, R12, R16;          # [1684][0034a0]
//     	TLD.LZ.NODEP.P R0, R0, 0x3, 2D;  # [1685][0034a8]
//     	FFMA.FTZ R16, R42, R42, R24;     # [1686][0034b0]
//     	STL.64 [0x18], R6;               # [1687][0034b8]
//     	FFMA.FTZ R6, R44, R44, R16;      # [1688][0034c0]
//     	FFMA.FTZ R30, R18, c[0x10][0x9c], R34; # [1689][0034c8]
//     	MUFU.RSQ R6, R6;                 # [1690][0034d0]
//     	FFMA.FTZ R10, R10, 2, -R34;      # [1691][0034d8]
//     	MUFU.RCP R16, R6;                # [1692][0034e0]
//     	FFMA.FTZ R32, R19, c[0x10][0x9c], R34; # [1693][0034e8]
//     	MUFU.RCP R6, R16;                # [1694][0034f0]
//     	FMNMX.FTZ R26, R16, 100000, PT;  # [1695][0034f8]
//     	FMUL.FTZ R33, R11, R6;           # [1696][003500]
//     	FMUL.FTZ R35, R42, R6;           # [1697][003508]
//     	FMUL.FTZ R31, R44, R6;           # [1698][003510]
//     	FMUL.FTZ R7, R33, c[0x2][0xb0];  # [1699][003518]
//     	FFMA.FTZ R6, R35, c[0x2][0xb4], R7; # [1700][003520]
//     	SSY L4dc8;                       # [1701][003528]
//     	FFMA.FTZ R24, R31, c[0x2][0xb8], R6; # [1702][003530]
//     	MUFU.RCP R7, R24;                # [1703][003538]
//     	FMUL.FTZ R6, R33, c[0x2][0xc0];  # [1704][003540]
//     	FSETP.LT.FTZ.AND P0, PT, R24, RZ, PT; # [1705][003548]
//     	FMUL.FTZ R7, R7, -c[0x2][0xbc];  # [1706][003550]
//     	FFMA.FTZ R6, R35, c[0x2][0xc4], R6; # [1707][003558]
//     	FMNMX.FTZ R25, R7, c[0x10][0xc], !PT; # [1708][003560]
//     	FFMA.FTZ R7, R31, c[0x2][0xc8], R6; # [1709][003568]
//     	FMNMX.FTZ R27, R26, R25, PT;     # [1710][003570]
//     	FMUL.FTZ R6, R33, c[0x2][0xd0];  # [1711][003578]
//     	MUFU.RCP R25, R7;                # [1712][003580]
//     	FCMP.LEU.FTZ R28, R26, R27, R24; # [1713][003588]
//     	FFMA.FTZ R6, R35, c[0x2][0xd4], R6; # [1714][003590]
//     	@!P0 MOV32I R27, 0x3dcccccd;     # [1715][003598]
//     	FMUL.FTZ R29, R25, -c[0x2][0xcc]; # [1716][0035a0]
//     	FCMP.GEU.FTZ R28, R28, R26, R24; # [1717][0035a8]
//     	FFMA.FTZ R25, R31, c[0x2][0xd8], R6; # [1718][0035b0]
//     	FMNMX.FTZ R24, R27, R29, !PT;    # [1719][0035b8]
//     	FMUL.FTZ R6, R33, c[0x2][0xe0];  # [1720][0035c0]
//     	MUFU.RCP R29, R25;               # [1721][0035c8]
//     	FMNMX.FTZ R26, R28, R24, PT;     # [1722][0035d0]
//     	FSETP.LT.FTZ.AND P1, PT, R7, RZ, PT; # [1723][0035d8]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R7, PT; # [1724][0035e0]
//     	FFMA.FTZ R6, R35, c[0x2][0xe4], R6; # [1725][0035e8]
//     	FCMP.GEU.FTZ R7, R27, R26, R7;   # [1726][0035f0]
//     	FMUL.FTZ R29, R29, -c[0x2][0xdc]; # [1727][0035f8]
//     	FFMA.FTZ R24, R31, c[0x2][0xe8], R6; # [1728][003600]
//     	@!P1 SEL R28, R28, R26, !P0;     # [1729][003608]
//     	FMNMX.FTZ R26, R7, R29, !PT;     # [1730][003610]
//     	MUFU.RCP R27, R24;               # [1731][003618]
//     	FMNMX.FTZ R26, R28, R26, PT;     # [1732][003620]
//     	FMUL.FTZ R6, R33, c[0x2][0xf0];  # [1733][003628]
//     	FMUL.FTZ R29, R27, -c[0x2][0xec]; # [1734][003630]
//     	FSETP.LT.FTZ.AND P1, PT, R24, RZ, PT; # [1735][003638]
//     	FCMP.GEU.FTZ R27, R7, R26, R25;  # [1736][003640]
//     	FFMA.FTZ R6, R35, c[0x2][0xf4], R6; # [1737][003648]
//     	FCMP.LEU.FTZ R26, R28, R26, R25; # [1738][003650]
//     	FFMA.FTZ R7, R31, c[0x2][0xf8], R6; # [1739][003658]
//     	FCMP.GEU.FTZ R26, R26, R28, R25; # [1740][003660]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R24, PT; # [1741][003668]
//     	FMNMX.FTZ R25, R27, R29, !PT;    # [1742][003670]
//     	MUFU.RCP R28, R7;                # [1743][003678]
//     	FMNMX.FTZ R25, R26, R25, PT;     # [1744][003680]
//     	FMUL.FTZ R6, R33, c[0x2][0x100]; # [1745][003688]
//     	FCMP.GEU.FTZ R24, R27, R25, R24; # [1746][003690]
//     	FFMA.FTZ R6, R35, c[0x2][0x104], R6; # [1747][003698]
//     	FMUL.FTZ R27, R28, -c[0x2][0xfc]; # [1748][0036a0]
//     	@!P1 SEL R26, R26, R25, !P0;     # [1749][0036a8]
//     	FMNMX.FTZ R25, R24, R27, !PT;    # [1750][0036b0]
//     	FFMA.FTZ R6, R31, c[0x2][0x108], R6; # [1751][0036b8]
//     	FFMA.FTZ R28, R8, 2, -R34;       # [1752][0036c0]
//     	FMNMX.FTZ R25, R26, R25, PT;     # [1753][0036c8]
//     	MUFU.RCP R27, R6;                # [1754][0036d0]
//     	FCMP.GEU.FTZ R8, R24, R25, R7;   # [1755][0036d8]
//     	FCMP.LEU.FTZ R24, R26, R25, R7;  # [1756][0036e0]
//     	FMUL.FTZ R27, R27, -c[0x2][0x10c]; # [1757][0036e8]
//     	FFMA.FTZ R25, R9, 2, -R34;       # [1758][0036f0]
//     	FCMP.GEU.FTZ R24, R24, R26, R7;  # [1759][0036f8]
//     	FMUL.FTZ R9, R28, R28;           # [1760][003700]
//     	MUFU.RCP R26, R30;               # [1761][003708]
//     	FMNMX.FTZ R7, R8, R27, !PT;      # [1762][003710]
//     	LDL.LU R30, [0x30];              # [1763][003718]
//     	FFMA.FTZ R9, R25, R25, R9;       # [1764][003720]
//     	FMNMX.FTZ R7, R24, R7, PT;       # [1765][003728]
//     	FFMA.FTZ R29, R17, c[0x10][0x9c], R34; # [1766][003730]
//     	FSETP.LT.FTZ.AND P1, PT, R6, RZ, PT; # [1767][003738]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R6, PT; # [1768][003740]
//     	FFMA.FTZ R9, R10, R10, R9;       # [1769][003748]
//     	FCMP.GEU.FTZ R54, R8, R7, R6;    # [1770][003750]
//     	MUFU.RCP R29, R29;               # [1771][003758]
//     	FMUL32I.FTZ R8, R18, 0x417001d9; # [1772][003760]
//     	MUFU.RSQ R6, R9;                 # [1773][003768]
//     	@!P1 SEL R24, R24, R7, !P0;      # [1774][003770]
//     	LDL.LU R18, [0x34];              # [1775][003778]
//     	FMUL32I.FTZ R7, R17, 0x417001d9; # [1776][003780]
//     	LDL.LU R9, [0x40];               # [1777][003788]
//     	FFMA.FTZ R7, R7, R29, R30;       # [1778][003790]
//     	MUFU.RCP R27, R32;               # [1779][003798]
//     	FMUL32I.FTZ R17, R19, 0x417001d9; # [1780][0037a0]
//     	STL [0x3c], R7;                  # [1781][0037a8]
//     	FSETP.LT.FTZ.AND P0, PT, R54, R24, PT; # [1782][0037b0]
//     	FMUL.FTZ R39, R6, R28;           # [1783][0037b8]
//     	FFMA.FTZ R8, R8, R26, R18;       # [1784][0037c0]
//     	FFMA.FTZ R7, R17, R27, R9;       # [1785][0037c8]
//     	FMUL.FTZ R40, R6, R25;           # [1786][0037d0]
//     	FMUL.FTZ R41, R6, R10;           # [1787][0037d8]
//     	STL [0x54], R8;                  # [1788][0037e0]
//     	STL [0x4c], R7;                  # [1789][0037e8]
//     	@!P0 BRA L4db0;                  # [1790][0037f0]
//     	IPA.PASS R6, a[0x70];            # [1791][0037f8] POSITION_X
//     	F2I.U32.TRUNC R6, R6;            # [1792][003800]
//     	IPA.PASS R7, a[0x74];            # [1793][003808] POSITION_Y
//     	LOP.AND R6, R6, 0x3;             # [1794][003810]
//     	F2I.U32.TRUNC R7, R7;            # [1795][003818]
//     	LOP.AND R7, R7, 0x3;             # [1796][003820]
//     	MOV R26, c[0x2][0x80];           # [1797][003828]
//     	FMNMX.FTZ R56, R54, 1, !PT;      # [1798][003830]
//     	TLD.LZ.P R61, R6, 0x6, 2D, 0x1;  # [1799][003838]
//     	FMUL32I.FTZ R6, R33, 0x3e028e29; # [1800][003840]
//     	FMUL.FTZ R18, R33, c[0x2][0x50]; # [1801][003848]
//     	MOV R36, c[0x2][0x84];           # [1802][003850]
//     	MOV R9, c[0x2][0x88];            # [1803][003858]
//     	FMUL.FTZ R17, R33, c[0x2][0x60]; # [1804][003860]
//     	FMNMX.FTZ R62, R24, 100, PT;     # [1805][003868]
//     	FFMA.FTZ R8, R35, c[0x10][0x10], R6; # [1806][003870]
//     	FMUL.FTZ R32, R26, c[0x10][0x18]; # [1807][003878]
//     	FMUL.FTZ R7, R26, c[0x10][0x24]; # [1808][003880]
//     	FMUL.FTZ R30, R26, c[0x10][0x28]; # [1809][003888]
//     	FMUL.FTZ R19, R33, c[0x2][0x40]; # [1810][003890]
//     	SSY L41f0;                       # [1811][003898]
//     	FMUL.FTZ R10, R33, c[0x2][0x70]; # [1812][0038a0]
//     	MOV R27, RZ;                     # [1813][0038a8]
//     	FFMA.FTZ R28, R35, c[0x2][0x54], R18; # [1814][0038b0]
//     	MOV R26, RZ;                     # [1815][0038b8]
//     	FFMA.FTZ R55, R31, c[0x10][0x14], R8; # [1816][0038c0]
//     	FFMA.FTZ R34, R36, c[0x10][0x10], R7; # [1817][0038c8]
//     	FFMA.FTZ R18, R35, c[0x2][0x64], R17; # [1818][0038d0]
//     	FADD.FTZ R7, R56, -1;            # [1819][0038d8]
//     	FFMA.FTZ R29, R35, c[0x2][0x44], R19; # [1820][0038e0]
//     	FMUL32I.FTZ R43, R55, 0xba5a740e; # [1821][0038e8]
//     	FFMA.FTZ R38, R36, c[0x10][0x1c], R32; # [1822][0038f0]
//     	FFMA.FTZ R34, R9, c[0x10][0x14], R34; # [1823][0038f8]
//     	FFMA.FTZ R19, R36, c[0x10][0x2c], R30; # [1824][003900]
//     	FMUL32I.FTZ R49, R55, 0x3a5a740e; # [1825][003908]
//     	FFMA.FTZ R17, R35, c[0x2][0x74], R10; # [1826][003910]
//     	FADD32I.FTZ R36, R55, 0x434de9e8; # [1827][003918]
//     	MUFU.LG2 R30, R56;               # [1828][003920]
//     	FFMA.FTZ R10, R31, c[0x2][0x58], R28; # [1829][003928]
//     	FFMA.FTZ R8, R31, c[0x2][0x68], R18; # [1830][003930]
//     	FMNMX.FTZ R28, R7, RZ, !PT;      # [1831][003938]
//     	FMUL32I.FTZ R18, R55, 0xbd14f209; # [1832][003940]
//     	FMUL32I.FTZ R32, R36, 0xba5a740e; # [1833][003948]
//     	FFMA.FTZ R37, R31, c[0x2][0x48], R29; # [1834][003950]
//     	FMUL.FTZ R48, R28, R43;          # [1835][003958]
//     	FFMA.FTZ R7, R31, c[0x2][0x78], R17; # [1836][003960]
//     	FMUL.FTZ R29, R28, R18;          # [1837][003968]
//     	FMUL32I.FTZ R17, R30, 1.20412;   # [1838][003970]
//     	FMUL32I.FTZ R46, R32, 0x3fb8aa3b; # [1839][003978]
//     	FFMA.FTZ R30, R9, c[0x10][0x20], R38; # [1840][003980]
//     	FMUL32I.FTZ R32, R55, -0.000125; # [1841][003988]
//     	FMUL32I.FTZ R38, R55, 0x3d14f209; # [1842][003990]
//     	FMUL32I.FTZ R45, R29, 0x3fb8aa3b; # [1843][003998]
//     	FMUL32I.FTZ R43, R36, 0xbd14f209; # [1844][0039a0]
//     	RRO.EX2 R47, R46;                # [1845][0039a8]
//     	FMUL32I.FTZ R48, R48, 0x3fb8aa3b; # [1846][0039b0]
//     	MUFU.RCP R18, R38;               # [1847][0039b8]
//     	RRO.EX2 R46, R45;                # [1848][0039c0]
//     	FMUL.FTZ R38, R28, R32;          # [1849][0039c8]
//     	FMUL32I.FTZ R45, R43, 0x3fb8aa3b; # [1850][0039d0]
//     	MUFU.EX2 R32, R47;               # [1851][0039d8]
//     	RRO.EX2 R47, R48;                # [1852][0039e0]
//     	FMUL32I.FTZ R43, R38, 0x3fb8aa3b; # [1853][0039e8]
//     	RRO.EX2 R45, R45;                # [1854][0039f0]
//     	MUFU.EX2 R38, R46;               # [1855][0039f8]
//     	FMUL32I.FTZ R36, R36, -0.000125; # [1856][003a00]
//     	FFMA.FTZ R19, R9, c[0x10][0x30], R19; # [1857][003a08]
//     	MUFU.EX2 R47, R47;               # [1858][003a10]
//     	FADD.FTZ R9, R37, c[0x2][0x4c];  # [1859][003a18]
//     	MUFU.EX2 R46, R45;               # [1860][003a20]
//     	RRO.EX2 R43, R43;                # [1861][003a28]
//     	FMUL32I.FTZ R45, R55, 0.000125;  # [1862][003a30]
//     	FMUL32I.FTZ R37, R36, 0x3fb8aa3b; # [1863][003a38]
//     	FADD.FTZ R38, -R38, 1;           # [1864][003a40]
//     	FADD.FTZ R47, -R47, 1;           # [1865][003a48]
//     	MUFU.RCP R29, R49;               # [1866][003a50]
//     	RRO.EX2 R37, R37;                # [1867][003a58]
//     	MUFU.RCP R36, R45;               # [1868][003a60]
//     	FMUL.FTZ R38, R46, R38;          # [1869][003a68]
//     	MUFU.EX2 R43, R43;               # [1870][003a70]
//     	F2F.FTZ.FLOOR R45, R17;          # [1871][003a78]
//     	FMUL.FTZ R32, R32, R47;          # [1872][003a80]
//     	FADD32I.FTZ R17, R34, 0x434de9e8; # [1873][003a88]
//     	FSETP.NEU.FTZ.AND P0, PT, R55, RZ, PT; # [1874][003a90]
//     	MUFU.EX2 R34, R37;               # [1875][003a98]
//     	FMUL.FTZ R38, R38, R18;          # [1876][003aa0]
//     	FADD.FTZ R37, -R43, 1;           # [1877][003aa8]
//     	FMUL.FTZ R29, R32, R29;          # [1878][003ab0]
//     	@!P0 FMUL32I.FTZ R38, R28, 0x3a12c592; # [1879][003ab8]
//     	@!P0 FMUL32I.FTZ R29, R28, 0x3f57a251; # [1880][003ac0]
//     	FMNMX.FTZ R43, R45, RZ, !PT;     # [1881][003ac8]
//     	FMUL.FTZ R34, R34, R37;          # [1882][003ad0]
//     	FMUL32I.FTZ R32, R17, -0.000125; # [1883][003ad8]
//     	FFMA.FTZ R37, R38, 200, R29;     # [1884][003ae0]
//     	FMUL32I.FTZ R43, R43, 0.830482;  # [1885][003ae8]
//     	FMUL.FTZ R36, R34, R36;          # [1886][003af0]
//     	FMUL32I.FTZ R32, R32, 0x3fb8aa3b; # [1887][003af8]
//     	@!P0 FMUL32I.FTZ R36, R28, 0x3f797eae; # [1888][003b00]
//     	FMUL32I.FTZ R38, R37, 0x3cb851eb; # [1889][003b08]
//     	FMUL32I.FTZ R34, R37, 0.012015;  # [1890][003b10]
//     	FMUL32I.FTZ R29, R17, 0xbd14f209; # [1891][003b18]
//     	RRO.EX2 R45, R43;                # [1892][003b20]
//     	RRO.EX2 R32, R32;                # [1893][003b28]
//     	FFMA.FTZ R43, RZ, R36, R38;      # [1894][003b30]
//     	FMUL32I.FTZ R37, R37, 0.0075;    # [1895][003b38]
//     	FFMA.FTZ R38, RZ, R36, R34;      # [1896][003b40]
//     	FMUL32I.FTZ R28, R29, 0x3fb8aa3b; # [1897][003b48]
//     	MUFU.EX2 R34, R32;               # [1898][003b50]
//     	FADD32I.FTZ R18, R30, 0xbf1e4005; # [1899][003b58]
//     	FMUL32I.FTZ R32, R43, 0xbfb8aa3b; # [1900][003b60]
//     	FFMA.FTZ R36, RZ, R36, R37;      # [1901][003b68]
//     	RRO.EX2 R28, R28;                # [1902][003b70]
//     	FMUL32I.FTZ R37, R38, 0xbfb8aa3b; # [1903][003b78]
//     	FMUL32I.FTZ R30, R17, 0xba5a740e; # [1904][003b80]
//     	RRO.EX2 R38, R32;                # [1905][003b88]
//     	MUFU.EX2 R29, R45;               # [1906][003b90]
//     	MUFU.EX2 R32, R28;               # [1907][003b98]
//     	FMUL32I.FTZ R30, R30, 0x3fb8aa3b; # [1908][003ba0]
//     	FMUL32I.FTZ R28, R36, 0xbfb8aa3b; # [1909][003ba8]
//     	FADD.FTZ R60, R9, -c[0x2][0x4c]; # [1910][003bb0]
//     	RRO.EX2 R37, R37;                # [1911][003bb8]
//     	FADD.FTZ R10, R10, c[0x2][0x5c]; # [1912][003bc0]
//     	RRO.EX2 R30, R30;                # [1913][003bc8]
//     	FADD.FTZ R8, R8, c[0x2][0x6c];   # [1914][003bd0]
//     	FSETP.GE.FTZ.AND P0, PT, R29, R62, PT; # [1915][003bd8]
//     	FADD.FTZ R7, R7, c[0x2][0x7c];   # [1916][003be0]
//     	RRO.EX2 R9, R28;                 # [1917][003be8]
//     	MUFU.EX2 R36, R38;               # [1918][003bf0]
//     	MOV R25, RZ;                     # [1919][003bf8]
//     	FADD32I.FTZ R19, R19, 0xc08ea342; # [1920][003c00]
//     	FADD.FTZ R59, R10, -c[0x2][0x5c]; # [1921][003c08]
//     	MUFU.EX2 R30, R30;               # [1922][003c10]
//     	FADD.FTZ R58, R8, -c[0x2][0x6c]; # [1923][003c18]
//     	FADD.FTZ R57, R7, -c[0x2][0x7c]; # [1924][003c20]
//     	FMUL32I.FTZ R28, R29, 0x3fe39ea9; # [1925][003c28]
//     	MUFU.EX2 R37, R37;               # [1926][003c30]
//     	MUFU.EX2 R38, R9;                # [1927][003c38]
//     	@P0 BRA L41e8;                   # [1928][003c40]
//     L3c48:
//     	FMNMX.FTZ R53, R56, R29, !PT;    # [1929][003c48]
//     	FMNMX.FTZ R52, R62, R28, PT;     # [1930][003c50]
//     	MUFU.RCP R6, R53;                # [1931][003c58]
//     	FMUL.FTZ R6, R52, R6;            # [1932][003c60]
//     	MUFU.LG2 R6, R6;                 # [1933][003c68]
//     	FMUL.FTZ R6, R61, R6;            # [1934][003c70]
//     	RRO.EX2 R6, R6;                  # [1935][003c78]
//     	MUFU.EX2 R6, R6;                 # [1936][003c80]
//     	FMUL.FTZ R51, R53, R6;           # [1937][003c88]
//     	FFMA.FTZ R9, R51, -R33, c[0x2][0x80]; # [1938][003c90]
//     	FFMA.FTZ R10, R51, -R35, c[0x2][0x84]; # [1939][003c98]
//     	FMUL.FTZ R6, R9, R9;             # [1940][003ca0]
//     	FFMA.FTZ R8, R51, R57, c[0x2][0x7c]; # [1941][003ca8]
//     	FFMA.FTZ R7, R10, R10, R6;       # [1942][003cb0]
//     	MUFU.RCP R49, R8;                # [1943][003cb8]
//     	FFMA.FTZ R6, R51, -R31, c[0x2][0x88]; # [1944][003cc0]
//     	FFMA.FTZ R50, R6, R6, R7;        # [1945][003cc8]
//     	FFMA.FTZ R8, R51, R55, c[0x10][0x34]; # [1946][003cd0]
//     	MUFU.RSQ R7, R50;                # [1947][003cd8]
//     	FFMA.FTZ R45, R51, R60, c[0x2][0x4c]; # [1948][003ce0]
//     	FMUL.FTZ R9, R7, R9;             # [1949][003ce8]
//     	FMUL.FTZ R29, R7, R10;           # [1950][003cf0]
//     	FMUL.FTZ R43, R33, R9;           # [1951][003cf8]
//     	FFMA.FTZ R9, R51, R59, c[0x2][0x5c]; # [1952][003d00]
//     	FMUL.FTZ R48, R7, R6;            # [1953][003d08]
//     	FMUL32I.FTZ R10, R8, 0xba5a740e; # [1954][003d10]
//     	FMUL.FTZ R6, R45, R49;           # [1955][003d18]
//     	FMUL.FTZ R7, R9, R49;            # [1956][003d20]
//     	FFMA.FTZ R47, R35, R29, R43;     # [1957][003d28]
//     	FMUL32I.FTZ R46, R10, 0x3fb8aa3b; # [1958][003d30]
//     	TEX.LZ.NODEP.P R45, R6, 0x8, 0x1, 2D, 0x1; # [1959][003d38]
//     	FMUL32I.FTZ R43, R8, -0.000125;  # [1960][003d40]
//     	FMUL32I.FTZ R8, R8, 0xbd14f209;  # [1961][003d48]
//     	FMUL32I.FTZ R29, R8, 0x3fb8aa3b; # [1962][003d50]
//     	TEX.LZ.NODEP.P R8, R6, 0x7, 0x0, 2D, 0x7; # [1963][003d58]
//     	FMUL32I.FTZ R7, R43, 0x3fb8aa3b; # [1964][003d60]
//     	RRO.EX2 R6, R46;                 # [1965][003d68]
//     	FADD.FTZ R43, -R53, R52;         # [1966][003d70]
//     	RRO.EX2 R29, R29;                # [1967][003d78]
//     	MOV R53, c[0x2][0x9c];           # [1968][003d80]
//     	FFMA.FTZ R46, R31, R48, R47;     # [1969][003d88]
//     	FMUL.FTZ R53, R53, c[0x2][0x9c]; # [1970][003d90]
//     	RRO.EX2 R7, R7;                  # [1971][003d98]
//     	MUFU.RCP R53, R53;               # [1972][003da0]
//     	FFMA.FTZ R47, R51, R58, c[0x2][0x6c]; # [1973][003da8]
//     	MUFU.EX2 R48, R29;               # [1974][003db0]
//     	MOV32I R52, 0x3f800000;          # [1975][003db8]
//     	MUFU.EX2 R6, R6;                 # [1976][003dc0]
//     	FMUL.FTZ R47, R47, R49;          # [1977][003dc8]
//     	FMUL.FTZ R29, R50, R53;          # [1978][003dd0]
//     	FMUL.FTZ R49, R33, R51;          # [1979][003dd8]
//     	MUFU.EX2 R7, R7;                 # [1980][003de0]
//     	FFMA.FTZ R46, R46, c[0x10][0x38], R52; # [1981][003de8]
//     	FFMA.FTZ R29, R29, -R29, R52;    # [1982][003df0]
//     	FMUL.FTZ R7, R43, R7;            # [1983][003df8]
//     	FFMA.FTZ R52, R48, 200, R6;      # [1984][003e00]
//     	FMUL.FTZ R46, R46, R46;          # [1985][003e08]
//     	FMUL.FTZ R6, R35, R51;           # [1986][003e10]
//     	FMUL32I.FTZ R48, R49, 0x3f3ee4d0; # [1987][003e18]
//     	FMUL.FTZ R43, R43, R52;          # [1988][003e20]
//     	FMUL.FTZ R51, R31, R51;          # [1989][003e28]
//     	FMUL32I.FTZ R52, R49, 0x3e028e29; # [1990][003e30]
//     	FFMA.FTZ R48, R6, c[0x10][0x1c], R48; # [1991][003e38]
//     	FMUL32I.FTZ R49, R49, 0xbf276c23; # [1992][003e40]
//     	FFMA.FTZ R52, R6, c[0x10][0x10], R52; # [1993][003e48]
//     	FFMA.FTZ R48, R51, c[0x10][0x20], R48; # [1994][003e50]
//     	FFMA.FTZ R6, R6, c[0x10][0x2c], R49; # [1995][003e58]
//     	FFMA.FTZ R49, R51, c[0x10][0x14], R52; # [1996][003e60]
//     	FADD32I.FTZ R48, R48, 0xbf1e4005; # [1997][003e68]
//     	FFMA.FTZ R51, R51, c[0x10][0x30], R6; # [1998][003e70]
//     	FADD.FTZ R48, -R18, R48;         # [1999][003e78]
//     	FADD32I.FTZ R6, R49, 0x434de9e8; # [2000][003e80]
//     	FMUL.FTZ R48, R48, R48;          # [2001][003e88]
//     	FADD32I.FTZ R49, R51, 0xc08ea342; # [2002][003e90]
//     	FADD.FTZ R6, -R17, R6;           # [2003][003e98]
//     	FADD.FTZ R49, -R19, R49;         # [2004][003ea0]
//     	FFMA.FTZ R48, R6, R6, R48;       # [2005][003ea8]
//     	FFMA.FTZ R48, R49, R49, R48;     # [2006][003eb0]
//     	FADD.FTZ R50, R50, 1;            # [2007][003eb8]
//     	MUFU.RSQ R48, R48;               # [2008][003ec0]
//     	FMUL32I.FTZ R46, R46, 0x41490fdb; # [2009][003ec8]
//     	FMUL.FTZ R49, R6, R48;           # [2010][003ed0]
//     	MUFU.RCP R46, R46;               # [2011][003ed8]
//     	MUFU.RCP R6, R48;                # [2012][003ee0]
//     	FMUL32I.FTZ R51, R49, 0xba5a740e; # [2013][003ee8]
//     	FMUL32I.FTZ R48, R49, 0xbd14f209; # [2014][003ef0]
//     	FMUL.FTZ R51, R6, R51;           # [2015][003ef8]
//     	FMUL.FTZ R48, R6, R48;           # [2016][003f00]
//     	FMUL32I.FTZ R52, R51, 0x3fb8aa3b; # [2017][003f08]
//     	FMUL32I.FTZ R48, R48, 0x3fb8aa3b; # [2018][003f10]
//     	FMUL32I.FTZ R51, R49, 0x3d14f209; # [2019][003f18]
//     	RRO.EX2 R48, R48;                # [2020][003f20]
//     	RRO.EX2 R52, R52;                # [2021][003f28]
//     	MUFU.EX2 R48, R48;               # [2022][003f30]
//     	MUFU.RCP R51, R51;               # [2023][003f38]
//     	FADD.FTZ R48, -R48, 1;           # [2024][003f40]
//     	MUFU.EX2 R52, R52;               # [2025][003f48]
//     	FMUL.FTZ R48, R32, R48;          # [2026][003f50]
//     	FADD.FTZ R52, -R52, 1;           # [2027][003f58]
//     	FMUL.FTZ R48, R48, R51;          # [2028][003f60]
//     	FMUL.FTZ R52, R30, R52;          # [2029][003f68]
//     	FMUL32I.FTZ R51, R49, 0x3a5a740e; # [2030][003f70]
//     	FSETP.NEU.FTZ.AND P0, PT, R49, RZ, PT; # [2031][003f78]
//     	MUFU.RCP R51, R51;               # [2032][003f80]
//     	@!P0 FMUL.FTZ R48, R32, R6;      # [2033][003f88]
//     	FMUL.FTZ R51, R52, R51;          # [2034][003f90]
//     	FMNMX.FTZ R29, R29, RZ, !PT;     # [2035][003f98]
//     	FMUL32I.FTZ R52, R49, -0.000125; # [2036][003fa0]
//     	@!P0 FMUL.FTZ R51, R30, R6;      # [2037][003fa8]
//     	FMUL.FTZ R52, R6, R52;           # [2038][003fb0]
//     	FFMA.FTZ R51, R48, 200, R51;     # [2039][003fb8]
//     	FMUL32I.FTZ R52, R52, 0x3fb8aa3b; # [2040][003fc0]
//     	FMUL32I.FTZ R48, R43, 0.0075;    # [2041][003fc8]
//     	RRO.EX2 R52, R52;                # [2042][003fd0]
//     	FFMA.FTZ R48, RZ, R7, R48;       # [2043][003fd8]
//     	MUFU.EX2 R52, R52;               # [2044][003fe0]
//     	FMUL32I.FTZ R49, R49, 0.000125;  # [2045][003fe8]
//     	FMUL32I.FTZ R48, R48, 0xbfb8aa3b; # [2046][003ff0]
//     	FADD.FTZ R52, -R52, 1;           # [2047][003ff8]
//     	MUFU.RCP R49, R49;               # [2048][004000]
//     	FMUL.FTZ R52, R34, R52;          # [2049][004008]
//     	RRO.EX2 R48, R48;                # [2050][004010]
//     	FMUL.FTZ R52, R52, R49;          # [2051][004018]
//     	@!P0 FMUL.FTZ R52, R34, R6;      # [2052][004020]
//     	MUFU.EX2 R49, R48;               # [2053][004028]
//     	FMUL32I.FTZ R6, R51, 0.012015;   # [2054][004030]
//     	FMUL32I.FTZ R48, R51, 0x3cb851eb; # [2055][004038]
//     	FMUL32I.FTZ R51, R51, 0.0075;    # [2056][004040]
//     	FFMA.FTZ R48, RZ, R52, R48;      # [2057][004048]
//     	FFMA.FTZ R6, RZ, R52, R6;        # [2058][004050]
//     	FFMA.FTZ R51, RZ, R52, R51;      # [2059][004058]
//     	FMUL32I.FTZ R52, R43, 0x3cb851eb; # [2060][004060]
//     	FSET.BF.GE.FTZ.AND R45, R45, R47, PT; # [2061][004068]
//     	FMUL.FTZ R38, R38, R49;          # [2062][004070]
//     	MUFU.RCP R47, R50;               # [2063][004078]
//     	FFMA.FTZ R52, RZ, R7, R52;       # [2064][004080]
//     	FMUL32I.FTZ R49, R43, 0.012015;  # [2065][004088]
//     	FMUL32I.FTZ R6, R6, 0xbfb8aa3b;  # [2066][004090]
//     	FMUL32I.FTZ R51, R51, 0xbfb8aa3b; # [2067][004098]
//     	FMUL32I.FTZ R50, R52, 0xbfb8aa3b; # [2068][0040a0]
//     	FMUL.FTZ R9, R45, R9;            # [2069][0040a8]
//     	FMUL.FTZ R10, R45, R10;          # [2070][0040b0]
//     	FMUL.FTZ R8, R45, R8;            # [2071][0040b8]
//     	FFMA.FTZ R49, RZ, R7, R49;       # [2072][0040c0]
//     	FMUL32I.FTZ R48, R48, 0xbfb8aa3b; # [2073][0040c8]
//     	RRO.EX2 R45, R50;                # [2074][0040d0]
//     	RRO.EX2 R6, R6;                  # [2075][0040d8]
//     	RRO.EX2 R50, R51;                # [2076][0040e0]
//     	FMUL.FTZ R10, R29, R10;          # [2077][0040e8]
//     	FMUL.FTZ R9, R29, R9;            # [2078][0040f0]
//     	FMUL32I.FTZ R49, R49, 0xbfb8aa3b; # [2079][0040f8]
//     	FMUL32I.FTZ R46, R46, 0x3b9d4951; # [2080][004100]
//     	RRO.EX2 R48, R48;                # [2081][004108]
//     	FMUL.FTZ R8, R29, R8;            # [2082][004110]
//     	MUFU.EX2 R6, R6;                 # [2083][004118]
//     	FMUL.FTZ R29, R47, R10;          # [2084][004120]
//     	FMUL.FTZ R9, R47, R9;            # [2085][004128]
//     	MUFU.EX2 R50, R50;               # [2086][004130]
//     	RRO.EX2 R49, R49;                # [2087][004138]
//     	FMUL.FTZ R43, R43, R46;          # [2088][004140]
//     	MUFU.EX2 R10, R48;               # [2089][004148]
//     	FMUL.FTZ R46, R47, R8;           # [2090][004150]
//     	FMUL.FTZ R9, R6, R9;             # [2091][004158]
//     	MUFU.EX2 R49, R49;               # [2092][004160]
//     	FMUL.FTZ R8, R50, R29;           # [2093][004168]
//     	FFMA.FTZ R6, RZ, R7, R43;        # [2094][004170]
//     	MUFU.EX2 R45, R45;               # [2095][004178]
//     	MOV R29, R28;                    # [2096][004180]
//     	FMUL.FTZ R10, R10, R46;          # [2097][004188]
//     	FMUL.FTZ R9, R9, R6;             # [2098][004190]
//     	FMUL.FTZ R7, R8, R6;             # [2099][004198]
//     	FMUL.FTZ R37, R37, R49;          # [2100][0041a0]
//     	FMUL.FTZ R36, R36, R45;          # [2101][0041a8]
//     	FSETP.GE.FTZ.AND P0, PT, R29, R62, PT; # [2102][0041b0]
//     	FMUL.FTZ R6, R10, R6;            # [2103][0041b8]
//     	FMUL32I.FTZ R28, R28, 0x3fe39ea9; # [2104][0041c0]
//     	FFMA.FTZ R27, R7, R38, R27;      # [2105][0041c8]
//     	FFMA.FTZ R26, R9, R37, R26;      # [2106][0041d0]
//     	FFMA.FTZ R25, R6, R36, R25;      # [2107][0041d8]
//     	@!P0 BRA L3c48;                  # [2108][0041e0]
//     L41e8:
//     	FSETP.GE.FTZ.AND.S P0, PT, R24, R16, PT; # [2109][0041e8]
//     L41f0:
//     	FSETP.LT.FTZ.AND P0, PT, R54, R16, P0; # [2110][0041f0]
//     	FFMA.FTZ R22, R27, c[0x2][0x98], R22; # [2111][0041f8]
//     	FFMA.FTZ R21, R26, c[0x2][0x94], R21; # [2112][004200]
//     	FFMA.FTZ R20, R25, c[0x2][0x90], R20; # [2113][004208]
//     	@!P0 BRA L4d98;                  # [2114][004210]
//     	FMUL.FTZ R7, R15, c[0x2][0x40];  # [2115][004218]
//     	MOV32I R62, 0x3e79db23;          # [2116][004220]
//     	FMUL.FTZ R6, R15, c[0x2][0x70];  # [2117][004228]
//     	FMUL.FTZ R16, R15, c[0x2][0x50]; # [2118][004230]
//     	FMUL.FTZ R8, R15, c[0x2][0x60];  # [2119][004238]
//     	FFMA.FTZ R15, R14, c[0x2][0x44], R7; # [2120][004240]
//     	FMUL32I.FTZ R7, R11, 0x3f3ee4d0; # [2121][004248]
//     	FFMA.FTZ R10, R14, c[0x2][0x74], R6; # [2122][004250]
//     	FMUL32I.FTZ R6, R11, 0x3e028e29; # [2123][004258]
//     	FFMA.FTZ R9, R14, c[0x2][0x64], R8; # [2124][004260]
//     	FFMA.FTZ R7, R42, c[0x10][0x1c], R7; # [2125][004268]
//     	FFMA.FTZ R6, R42, c[0x10][0x10], R6; # [2126][004270]
//     	FFMA.FTZ R10, R12, c[0x2][0x78], R10; # [2127][004278]
//     	FFMA.FTZ R7, R44, c[0x10][0x20], R7; # [2128][004280]
//     	FMUL32I.FTZ R8, R11, 0xbf276c23; # [2129][004288]
//     	FFMA.FTZ R10, R13, c[0x2][0x7c], R10; # [2130][004290]
//     	FADD32I.FTZ R7, R7, 0xbf1e4005;  # [2131][004298]
//     	FFMA.FTZ R9, R12, c[0x2][0x68], R9; # [2132][0042a0]
//     	MUFU.RCP R46, R10;               # [2133][0042a8]
//     	FFMA.FTZ R6, R44, c[0x10][0x14], R6; # [2134][0042b0]
//     	FADD.FTZ R7, -R18, R7;           # [2135][0042b8]
//     	MOV R24, c[0x2][0x9c];           # [2136][0042c0]
//     	FADD32I.FTZ R6, R6, 0x434de9e8;  # [2137][0042c8]
//     	FFMA.FTZ R8, R42, c[0x10][0x2c], R8; # [2138][0042d0]
//     	MUFU.RCP R10, R24;               # [2139][0042d8]
//     	FFMA.FTZ R45, R13, c[0x2][0x6c], R9; # [2140][0042e0]
//     	FADD.FTZ R53, -R17, R6;          # [2141][0042e8]
//     	FFMA.FTZ R8, R44, c[0x10][0x30], R8; # [2142][0042f0]
//     	FMUL.FTZ R6, R7, R7;             # [2143][0042f8]
//     	FFMA.FTZ R9, R45, R46, c[0x10][0x40]; # [2144][004300]
//     	FADD32I.FTZ R8, R8, 0xc08ea342;  # [2145][004308]
//     	FFMA.FTZ R14, R14, c[0x2][0x54], R16; # [2146][004310]
//     	FMUL.FTZ R7, R9, R10;            # [2147][004318]
//     	FFMA.FTZ R10, R12, c[0x2][0x48], R15; # [2148][004320]
//     	FADD.FTZ R8, -R19, R8;           # [2149][004328]
//     	FFMA.FTZ R14, R12, c[0x2][0x58], R14; # [2150][004330]
//     	FFMA.FTZ R6, R53, R53, R6;       # [2151][004338]
//     	FMUL.FTZ R9, R7, 0.75;           # [2152][004340]
//     	FFMA.FTZ R10, R13, c[0x2][0x4c], R10; # [2153][004348]
//     	FFMA.FTZ R12, R13, c[0x2][0x5c], R14; # [2154][004350]
//     	FFMA.FTZ R8, R8, R8, R6;         # [2155][004358]
//     	FMNMX.FTZ R47, R9, -c[0x10][0x3c], !PT; # [2156][004360]
//     	FMUL.FTZ R6, R10, R46;           # [2157][004368]
//     	FMUL.FTZ R7, R12, R46;           # [2158][004370]
//     	FADD.FTZ R43, -R11, c[0x2][0x80]; # [2159][004378]
//     	FFMA.FTZ R28, R47, c[0x10][0x44], R6; # [2160][004380]
//     	FFMA.FTZ R26, R47, RZ, R6;       # [2161][004388]
//     	FFMA.FTZ R29, R47, c[0x10][0x44], R7; # [2162][004390]
//     	FFMA.FTZ R11, R47, RZ, R7;       # [2163][004398]
//     	MUFU.RSQ R56, R8;                # [2164][0043a0]
//     	FFMA.FTZ R27, R47, 0.875, R7;    # [2165][0043a8]
//     	FFMA.FTZ R25, R47, c[0x10][0x48], R7; # [2166][0043b0]
//     	FFMA.FTZ R24, R47, -c[0x10][0x48], R6; # [2167][0043b8]
//     	FFMA.FTZ R17, R47, c[0x10][0x4c], R7; # [2168][0043c0]
//     	FFMA.FTZ R16, R47, c[0x10][0x4c], R6; # [2169][0043c8]
//     	FADD.FTZ R18, R47, R6;           # [2170][0043d0]
//     	TEX.LZ.NODEP.P R28, R28, 0x8, 0x1, 2D, 0x1; # [2171][0043d8]
//     	FFMA.FTZ R15, R47, -0.625, R7;   # [2172][0043e0]
//     	FFMA.FTZ R13, R47, c[0x10][0x50], R7; # [2173][0043e8]
//     	FFMA.FTZ R12, R47, -c[0x10][0x50], R6; # [2174][0043f0]
//     	FFMA.FTZ R10, R47, -0.75, R6;    # [2175][0043f8]
//     	FFMA.FTZ R9, R47, c[0x10][0x54], R7; # [2176][004400]
//     	FFMA.FTZ R8, R47, c[0x10][0x58], R6; # [2177][004408]
//     	MOV R14, R26;                    # [2178][004410]
//     	MOV R19, R11;                    # [2179][004418]
//     	FMUL.FTZ R55, R53, R56;          # [2180][004420]
//     	TEX.LZ.NODEP R29, R26, 0x8, 0x1, 2D, 0x1; # [2181][004428]
//     	MUFU.RCP R53, R56;               # [2182][004430]
//     	TEX.LZ.NODEP R48, R24, 0x8, 0x1, 2D, 0x1; # [2183][004438]
//     	FMUL32I.FTZ R26, R55, 0xbd14f209; # [2184][004440]
//     	TEX.LZ.NODEP R49, R16, 0x8, 0x1, 2D, 0x1; # [2185][004448]
//     	FMUL.FTZ R56, R53, R26;          # [2186][004450]
//     	TEX.LZ.NODEP R50, R18, 0x8, 0x1, 2D, 0x1; # [2187][004458]
//     	FMUL32I.FTZ R19, R55, 0xba5a740e; # [2188][004460]
//     	TEX.LZ.NODEP R51, R14, 0x8, 0x1, 2D, 0x1; # [2189][004468]
//     	FMUL.FTZ R58, R53, R19;          # [2190][004470]
//     	TEX.LZ.NODEP R52, R12, 0x8, 0x1, 2D, 0x1; # [2191][004478]
//     	FMUL32I.FTZ R19, R55, -0.000125; # [2192][004480]
//     	TEX.LZ.NODEP.P R54, R10, 0x8, 0x1, 2D, 0x1; # [2193][004488]
//     	FFMA.FTZ R10, R47, 0.5, R6;      # [2194][004490]
//     	FMUL32I.FTZ R58, R58, 0x3fb8aa3b; # [2195][004498]
//     	FMUL.FTZ R57, R53, R19;          # [2196][0044a0]
//     	FFMA.FTZ R15, R47, c[0x10][0x5c], R7; # [2197][0044a8]
//     	FFMA.FTZ R14, R47, c[0x10][0x60], R6; # [2198][0044b0]
//     	FFMA.FTZ R13, R47, c[0x10][0x64], R7; # [2199][0044b8]
//     	FFMA.FTZ R12, R47, c[0x10][0x68], R6; # [2200][0044c0]
//     	FFMA.FTZ R17, R47, c[0x10][0x6c], R7; # [2201][0044c8]
//     	FFMA.FTZ R16, R47, c[0x10][0x70], R6; # [2202][0044d0]
//     	FFMA.FTZ R18, R47, 0.1875, R6;   # [2203][0044d8]
//     	FFMA.FTZ R25, R47, c[0x10][0x74], R7; # [2204][0044e0]
//     	FFMA.FTZ R24, R47, -0.0625, R6;  # [2205][0044e8]
//     	FFMA.FTZ R27, R47, c[0x10][0x78], R7; # [2206][0044f0]
//     	FFMA.FTZ R26, R47, -0.03125, R6; # [2207][0044f8]
//     	MOV R19, R11;                    # [2208][004500]
//     	FMUL32I.FTZ R47, R57, 0x3fb8aa3b; # [2209][004508]
//     	FMUL32I.FTZ R56, R56, 0x3fb8aa3b; # [2210][004510]
//     	RRO.EX2 R58, R58;                # [2211][004518]
//     	FMUL32I.FTZ R57, R55, 0x3d14f209; # [2212][004520]
//     	TEX.LZ.NODEP.P R11, R10, 0x8, 0x1, 2D, 0x1; # [2213][004528]
//     	RRO.EX2 R10, R56;                # [2214][004530]
//     	TEX.LZ.NODEP R59, R8, 0x8, 0x1, 2D, 0x1; # [2215][004538]
//     	FMUL.FTZ R8, R43, R43;           # [2216][004540]
//     	TEX.LZ.NODEP R14, R14, 0x8, 0x1, 2D, 0x1; # [2217][004548]
//     	RRO.EX2 R9, R47;                 # [2218][004550]
//     	TEX.LZ.NODEP R12, R12, 0x8, 0x1, 2D, 0x1; # [2219][004558]
//     	MUFU.EX2 R10, R10;               # [2220][004560]
//     	TEX.LZ.NODEP R13, R16, 0x8, 0x1, 2D, 0x1; # [2221][004568]
//     	MUFU.EX2 R9, R9;                 # [2222][004570]
//     	TEX.LZ.NODEP R15, R18, 0x8, 0x1, 2D, 0x1; # [2223][004578]
//     	FSETP.NEU.FTZ.AND P0, PT, R55, RZ, PT; # [2224][004580]
//     	TEX.LZ.NODEP R16, R24, 0x8, 0x1, 2D, 0x1; # [2225][004588]
//     	MUFU.EX2 R25, R58;               # [2226][004590]
//     	TEX.LZ.NODEP.P R17, R26, 0x8, 0x1, 2D, 0x1; # [2227][004598]
//     	FADD.FTZ R18, -R42, c[0x2][0x84]; # [2228][0045a0]
//     	FADD.FTZ R24, -R44, c[0x2][0x88]; # [2229][0045a8]
//     	FFMA.FTZ R8, R18, R18, R8;       # [2230][0045b0]
//     	FMUL32I.FTZ R42, R55, 0x3a5a740e; # [2231][0045b8]
//     	FFMA.FTZ R19, R24, R24, R8;      # [2232][0045c0]
//     	FFMA.FTZ R26, R45, R46, c[0x10][0x3c]; # [2233][0045c8]
//     	FADD.FTZ R8, -R10, 1;            # [2234][0045d0]
//     	FADD.FTZ R56, -R25, 1;           # [2235][0045d8]
//     	FADD.FTZ R45, -R9, 1;            # [2236][0045e0]
//     	MUFU.RCP R27, R57;               # [2237][0045e8]
//     	FMUL.FTZ R47, R8, R32;           # [2238][0045f0]
//     	MUFU.RCP R42, R42;               # [2239][0045f8]
//     	FMUL.FTZ R44, R39, -R33;         # [2240][004600]
//     	FMUL32I.FTZ R46, R55, 0.000125;  # [2241][004608]
//     	MUFU.RSQ R25, R19;               # [2242][004610]
//     	TEX.LZ.NODEP.P R8, R6, 0x7, 0x0, 2D, 0x7; # [2243][004618]
//     	FMUL.FTZ R56, R56, R30;          # [2244][004620]
//     	FFMA.FTZ R6, R40, -R35, R44;     # [2245][004628]
//     	MUFU.RCP R46, R46;               # [2246][004630]
//     	FMUL.FTZ R7, R45, R34;           # [2247][004638]
//     	FMUL.FTZ R44, R56, R42;          # [2248][004640]
//     	FMUL.FTZ R27, R47, R27;          # [2249][004648]
//     	FMUL.FTZ R42, R25, R43;          # [2250][004650]
//     	@!P0 FMUL.FTZ R27, R53, R32;     # [2251][004658]
//     	@!P0 FMUL.FTZ R44, R53, R30;     # [2252][004660]
//     	FMUL.FTZ R32, R25, R18;          # [2253][004668]
//     	FMUL.FTZ R7, R7, R46;            # [2254][004670]
//     	FFMA.FTZ R6, R41, -R31, R6;      # [2255][004678]
//     	FMUL.FTZ R30, R39, R42;          # [2256][004680]
//     	@!P0 FMUL.FTZ R7, R53, R34;      # [2257][004688]
//     	FMUL.FTZ R53, R25, R24;          # [2258][004690]
//     	MOV32I R45, 0x3cba7547;          # [2259][004698]
//     	F2F.SAT R46, R6;                 # [2260][0046a0]
//     	FFMA.FTZ R30, R40, R32, R30;     # [2261][0046a8]
//     	MOV32I R47, 0x3ec6a7f0;          # [2262][0046b0]
//     	MOV32I R58, 0x3d981627;          # [2263][0046b8]
//     	FFMA.FTZ R34, R41, R53, R30;     # [2264][0046c0]
//     	FFMA.FTZ R55, R39, -R46, -R33;   # [2265][0046c8]
//     	FADD.FTZ R30, -R46, 1;           # [2266][0046d0]
//     	FFMA.FTZ R57, R23, c[0x10][0x84], R45; # [2267][0046d8]
//     	FFMA.FTZ R45, R23, c[0x10][0x7c], R47; # [2268][0046e0]
//     	FMUL.FTZ R60, R55, R55;          # [2269][0046e8]
//     	FFMA.FTZ R61, R46, c[0x10][0x88], R58; # [2270][0046f0]
//     	FFMA.FTZ R47, R40, -R46, -R35;   # [2271][0046f8]
//     	MUFU.RSQ R56, R30;               # [2272][004700]
//     	FFMA.FTZ R62, R23, c[0x10][0x80], R62; # [2273][004708]
//     	F2F.SAT R30, R34;                # [2274][004710]
//     	FFMA.FTZ R61, R61, R46, c[0x10][0x8c]; # [2275][004718]
//     	FFMA.FTZ R23, R47, R47, R60;     # [2276][004720]
//     	MUFU.RCP R56, R56;               # [2277][004728]
//     	FFMA.FTZ R60, R41, -R46, -R31;   # [2278][004730]
//     	FFMA.FTZ R42, R39, -R30, R42;    # [2279][004738]
//     	FFMA.FTZ R46, R61, R46, c[0x10][0x90]; # [2280][004740]
//     	FFMA.FTZ R53, R41, -R30, R53;    # [2281][004748]
//     	FFMA.FTZ R61, R40, -R30, R32;    # [2282][004750]
//     	FSET.BF.GE.FTZ.AND R28, R28, R26, PT; # [2283][004758]
//     	FMUL.FTZ R32, R42, R42;          # [2284][004760]
//     	FMUL.FTZ R46, R56, R46;          # [2285][004768]
//     	FSET.BF.GE.FTZ.AND R29, R29, R26, PT; # [2286][004770]
//     	FSET.BF.GE.FTZ.AND R49, R49, R26, PT; # [2287][004778]
//     	FFMA.FTZ R56, R61, R61, R32;     # [2288][004780]
//     	FSET.BF.GE.FTZ.AND R50, R50, R26, PT; # [2289][004788]
//     	FADD.FTZ R32, -R30, 1;           # [2290][004790]
//     	FFMA.FTZ R43, R43, R25, -R33;    # [2291][004798]
//     	FFMA.FTZ R23, R60, R60, R23;     # [2292][0047a0]
//     	FADD.FTZ R28, R28, R29;          # [2293][0047a8]
//     	FFMA.FTZ R56, R53, R53, R56;     # [2294][0047b0]
//     	LDL.LU R29, [0x1c];              # [2295][0047b8]
//     	FFMA.FTZ R58, R30, c[0x10][0x88], R58; # [2296][0047c0]
//     	FADD.FTZ R49, R50, R49;          # [2297][0047c8]
//     	MUFU.RSQ R32, R32;               # [2298][0047d0]
//     	FFMA.FTZ R18, R18, R25, -R35;    # [2299][0047d8]
//     	FMUL.FTZ R50, R43, R43;          # [2300][0047e0]
//     	MUFU.RSQ R23, R23;               # [2301][0047e8]
//     	MUFU.RSQ R56, R56;               # [2302][0047f0]
//     	FFMA.FTZ R58, R58, R30, c[0x10][0x8c]; # [2303][0047f8]
//     	FFMA.FTZ R24, R24, R25, -R31;    # [2304][004800]
//     	FFMA.FTZ R50, R18, R18, R50;     # [2305][004808]
//     	MUFU.RCP R32, R32;               # [2306][004810]
//     	FSET.BF.GE.FTZ.AND R25, R48, R26, PT; # [2307][004818]
//     	FMUL.FTZ R55, R23, R55;          # [2308][004820]
//     	FFMA.FTZ R58, R58, R30, c[0x10][0x90]; # [2309][004828]
//     	FMUL.FTZ R42, R56, R42;          # [2310][004830]
//     	FFMA.FTZ R50, R24, R24, R50;     # [2311][004838]
//     	FADD.FTZ R28, R28, R25;          # [2312][004840]
//     	FMUL.FTZ R32, R32, R58;          # [2313][004848]
//     	FMUL.FTZ R25, R55, R42;          # [2314][004850]
//     	FMUL32I.FTZ R29, R29, 0x3fc90fdb; # [2315][004858]
//     	MUFU.RSQ R42, R50;               # [2316][004860]
//     	FMNMX.FTZ R48, R46, R32, !PT;    # [2317][004868]
//     	FSET.BF.GE.FTZ.AND R50, R54, R26, PT; # [2318][004870]
//     	FSET.BF.GE.FTZ.AND R51, R51, R26, PT; # [2319][004878]
//     	FMNMX.FTZ R32, R46, R32, PT;     # [2320][004880]
//     	FFMA.FTZ R27, R27, 200, R44;     # [2321][004888]
//     	FFMA.FTZ R46, R29, R29, c[0x10][0x98]; # [2322][004890]
//     	FADD.FTZ R28, R28, R50;          # [2323][004898]
//     	FMUL.FTZ R50, R42, R43;          # [2324][0048a0]
//     	FADD.FTZ R49, R49, R51;          # [2325][0048a8]
//     	MOV R43, c[0x2][0x9c];           # [2326][0048b0]
//     	FSET.BF.GE.FTZ.AND R51, R52, R26, PT; # [2327][0048b8]
//     	MUFU.RCP R44, R46;               # [2328][0048c0]
//     	FSET.BF.GE.FTZ.AND R54, R11, R26, PT; # [2329][0048c8]
//     	FFMA.FTZ R46, R29, R29, c[0x10][0x94]; # [2330][0048d0]
//     	FMUL.FTZ R52, R29, R29;          # [2331][0048d8]
//     	FMUL.FTZ R43, R43, c[0x2][0x9c]; # [2332][0048e0]
//     	FADD.FTZ R11, R49, R51;          # [2333][0048e8]
//     	MUFU.RCP R51, R46;               # [2334][0048f0]
//     	FMUL.FTZ R39, R39, R50;          # [2335][0048f8]
//     	MUFU.RCP R46, R43;               # [2336][004900]
//     	FMUL.FTZ R47, R23, R47;          # [2337][004908]
//     	FMUL.FTZ R43, R52, R44;          # [2338][004910]
//     	FMUL.FTZ R23, R23, R60;          # [2339][004918]
//     	FMUL.FTZ R44, R42, R18;          # [2340][004920]
//     	FMNMX.FTZ R6, R6, -c[0x10][0x3c], !PT; # [2341][004928]
//     	FMUL.FTZ R42, R42, R24;          # [2342][004930]
//     	FMNMX.FTZ R34, R34, -c[0x10][0x3c], !PT; # [2343][004938]
//     	FFMA.FTZ R24, R40, R44, R39;     # [2344][004940]
//     	FMUL.FTZ R60, R56, R61;          # [2345][004948]
//     	FMUL.FTZ R50, R33, -R50;         # [2346][004950]
//     	FMUL.FTZ R39, R19, R46;          # [2347][004958]
//     	FMUL.FTZ R46, R6, R34;           # [2348][004960]
//     	FFMA.FTZ R40, R41, R42, R24;     # [2349][004968]
//     	FMUL.FTZ R53, R56, R53;          # [2350][004970]
//     	FFMA.FTZ R41, R47, R60, R25;     # [2351][004978]
//     	FMUL32I.FTZ R49, R3, 0x3fc90fdb; # [2352][004980]
//     	FFMA.FTZ R44, R35, -R44, R50;    # [2353][004988]
//     	MUFU.RCP R24, R46;               # [2354][004990]
//     	RRO.SINCOS R25, R48;             # [2355][004998]
//     	FMNMX.FTZ R40, R40, -c[0x10][0x3c], !PT; # [2356][0049a0]
//     	FMUL32I.FTZ R46, R32, 0x3f22f983; # [2357][0049a8]
//     	FFMA.FTZ R23, R23, R53, R41;     # [2358][0049b0]
//     	FMUL.FTZ R33, R49, R49;          # [2359][0049b8]
//     	FFMA.FTZ R31, R31, -R42, R44;    # [2360][0049c0]
//     	FMUL.FTZ R49, R48, R32;          # [2361][0049c8]
//     	FADD.FTZ R41, R32, R48;          # [2362][0049d0]
//     	MOV32I R18, 0x3f800000;          # [2363][0049d8]
//     	MUFU.SIN R25, R25;               # [2364][0049e0]
//     	RRO.SINCOS R48, R32;             # [2365][0049e8]
//     	FMUL.FTZ R47, R46, R46;          # [2366][0049f0]
//     	FSETP.GE.FTZ.AND P0, PT, R23, RZ, PT; # [2367][0049f8]
//     	FMUL.FTZ R42, R40, R40;          # [2368][004a00]
//     	MUFU.RCP R32, R31;               # [2369][004a08]
//     	FMNMX.FTZ R44, R6, R34, PT;      # [2370][004a10]
//     	FFMA.FTZ R31, R43, -0.5, R18;    # [2371][004a18]
//     	@!P0 FFMA.FTZ R25, R46, -R47, R25; # [2372][004a20]
//     	FMUL.FTZ R35, R33, 4;            # [2373][004a28]
//     	FMUL.FTZ R43, R33, R42;          # [2374][004a30]
//     	MUFU.COS R46, R48;               # [2375][004a38]
//     	FMUL.FTZ R44, R40, R44;          # [2376][004a40]
//     	FMUL.FTZ R33, R41, 0.5;          # [2377][004a48]
//     	FMUL.FTZ R3, R52, R51;           # [2378][004a50]
//     	FMUL.FTZ R42, R42, R42;          # [2379][004a58]
//     	MUFU.RCP R41, R43;               # [2380][004a60]
//     	FMUL32I.FTZ R47, R49, 0x3ecf817b; # [2381][004a68]
//     	FADD.FTZ R43, R44, R44;          # [2382][004a70]
//     	MUFU.SIN R6, R48;                # [2383][004a78]
//     	MUFU.RCP R44, R46;               # [2384][004a80]
//     	FMUL.FTZ R34, R3, 0.125;         # [2385][004a88]
//     	FMUL.FTZ R42, R35, R42;          # [2386][004a90]
//     	FMUL.FTZ R46, R47, R47;          # [2387][004a98]
//     	FFMA.FTZ R48, R39, -R39, c[0x10][0xa0]; # [2388][004aa0]
//     	RRO.SINCOS R35, R33;             # [2389][004aa8]
//     	FFMA.FTZ R39, R40, R40, -R18;    # [2390][004ab0]
//     	FMUL.FTZ R32, R43, R32;          # [2391][004ab8]
//     	FMUL.FTZ R40, R46, R34;          # [2392][004ac0]
//     	MUFU.RCP R18, R42;               # [2393][004ac8]
//     	MUFU.SIN R34, R35;               # [2394][004ad0]
//     	FSET.BF.GE.FTZ.AND R55, R59, R26, PT; # [2395][004ad8]
//     	MUFU.COS R35, R35;               # [2396][004ae0]
//     	FSET.BF.GE.FTZ.AND R43, R14, R26, PT; # [2397][004ae8]
//     	FSET.BF.GE.FTZ.AND R42, R13, R26, PT; # [2398][004af0]
//     	FSET.BF.GE.FTZ.AND R15, R15, R26, PT; # [2399][004af8]
//     	FADD.FTZ R29, R54, R55;          # [2400][004b00]
//     	MUFU.RCP R14, R35;               # [2401][004b08]
//     	FSET.BF.GE.FTZ.AND R35, R12, R26, PT; # [2402][004b10]
//     	FMUL.FTZ R39, R39, R41;          # [2403][004b18]
//     	FADD.FTZ R15, R15, R42;          # [2404][004b20]
//     	FSET.BF.GE.FTZ.AND R12, R16, R26, PT; # [2405][004b28]
//     	FADD.FTZ R41, -|R23|, 1;         # [2406][004b30]
//     	FADD.FTZ R29, R29, R43;          # [2407][004b38]
//     	FMUL32I.FTZ R39, R39, 0x3fb8aa3b; # [2408][004b40]
//     	FADD.FTZ R16, R12, R15;          # [2409][004b48]
//     	FMUL32I.FTZ R33, R3, 0.45;       # [2410][004b50]
//     	FMUL.FTZ R13, R40, R41;          # [2411][004b58]
//     	FSET.BF.GE.FTZ.AND R12, R17, R26, PT; # [2412][004b60]
//     	FMUL32I.FTZ R41, R27, 0x3cb851eb; # [2413][004b68]
//     	FADD.FTZ R28, R28, R11;          # [2414][004b70]
//     	FADD.FTZ R29, R29, R35;          # [2415][004b78]
//     	FMUL32I.FTZ R26, R27, 0.012015;  # [2416][004b80]
//     	FMUL32I.FTZ R40, R27, 0.0075;    # [2417][004b88]
//     	RRO.EX2 R11, R39;                # [2418][004b90]
//     	FMUL.FTZ R15, R25, R33;          # [2419][004b98]
//     	FADD.FTZ R16, R12, R16;          # [2420][004ba0]
//     	FFMA.FTZ R27, RZ, R7, R41;       # [2421][004ba8]
//     	FADD.FTZ R17, R28, R29;          # [2422][004bb0]
//     	FFMA.FTZ R25, RZ, R7, R26;       # [2423][004bb8]
//     	FMUL.FTZ R12, R34, R14;          # [2424][004bc0]
//     	MUFU.EX2 R11, R11;               # [2425][004bc8]
//     	FFMA.FTZ R7, RZ, R7, R40;        # [2426][004bd0]
//     	FMUL.FTZ R14, R23, R15;          # [2427][004bd8]
//     	FADD.FTZ R15, R16, R17;          # [2428][004be0]
//     	FMUL.FTZ R6, R6, R44;            # [2429][004be8]
//     	FMUL32I.FTZ R16, R7, 0xbfb8aa3b; # [2430][004bf0]
//     	FMNMX.FTZ R32, R32, 1, PT;       # [2431][004bf8]
//     	FMUL.FTZ R7, R11, R18;           # [2432][004c00]
//     	FMUL32I.FTZ R17, R25, 0xbfb8aa3b; # [2433][004c08]
//     	FMUL.FTZ R11, R15, 0.0625;       # [2434][004c10]
//     	FMUL.FTZ R18, R8, c[0x2][0x90];  # [2435][004c18]
//     	FMUL.FTZ R15, R9, c[0x2][0x94];  # [2436][004c20]
//     	FMNMX.FTZ R3, R48, RZ, !PT;      # [2437][004c28]
//     	FFMA.FTZ R9, R14, R6, R31;       # [2438][004c30]
//     	FMUL32I.FTZ R23, R27, 0xbfb8aa3b; # [2439][004c38]
//     	FMUL.FTZ R6, R10, c[0x2][0x98];  # [2440][004c40]
//     	FMUL.FTZ R14, R11, R15;          # [2441][004c48]
//     	FMUL.FTZ R15, R11, R18;          # [2442][004c50]
//     	FMUL.FTZ R8, R11, R6;            # [2443][004c58]
//     	FMUL.FTZ R11, R14, R62;          # [2444][004c60]
//     	FMUL.FTZ R6, R7, R32;            # [2445][004c68]
//     	FFMA.FTZ R7, R13, R12, R9;       # [2446][004c70]
//     	LDL.LU R14, [0x18];              # [2447][004c78]
//     	FMUL.FTZ R8, R8, R45;            # [2448][004c80]
//     	FMUL.FTZ R13, R15, R57;          # [2449][004c88]
//     	FMUL.FTZ R6, R6, R24;            # [2450][004c90]
//     	MUFU.RCP R19, R19;               # [2451][004c98]
//     	RRO.EX2 R17, R17;                # [2452][004ca0]
//     	RRO.EX2 R10, R16;                # [2453][004ca8]
//     	FMUL.FTZ R11, R3, R11;           # [2454][004cb0]
//     	FMUL.FTZ R8, R3, R8;             # [2455][004cb8]
//     	FMUL.FTZ R13, R3, R13;           # [2456][004cc0]
//     	RRO.EX2 R23, R23;                # [2457][004cc8]
//     	FMUL.FTZ R3, R6, R1;             # [2458][004cd0]
//     	MUFU.EX2 R12, R17;               # [2459][004cd8]
//     	FMUL32I.FTZ R7, R7, 0x3ea2f983;  # [2460][004ce0]
//     	FMUL.FTZ R1, R6, R2;             # [2461][004ce8]
//     	MUFU.EX2 R9, R10;                # [2462][004cf0]
//     	FMUL.FTZ R8, R8, R19;            # [2463][004cf8]
//     	FMUL.FTZ R10, R11, R19;          # [2464][004d00]
//     	FMUL.FTZ R6, R6, R0;             # [2465][004d08]
//     	MUFU.EX2 R16, R23;               # [2466][004d10]
//     	FMUL.FTZ R11, R13, R19;          # [2467][004d18]
//     	FFMA.FTZ R2, R5, R7, R3;         # [2468][004d20]
//     	FFMA.FTZ R0, R14, R7, R1;        # [2469][004d28]
//     	FMUL.FTZ R5, R10, R12;           # [2470][004d30]
//     	FMUL.FTZ R3, R8, R9;             # [2471][004d38]
//     	FFMA.FTZ R1, R4, R7, R6;         # [2472][004d40]
//     	FMUL.FTZ R2, R5, R2;             # [2473][004d48]
//     	FMUL.FTZ R4, R11, R16;           # [2474][004d50]
//     	FMUL.FTZ R0, R3, R0;             # [2475][004d58]
//     	FMUL.FTZ R3, R4, R1;             # [2476][004d60]
//     	FMUL.FTZ R0, R30, R0;            # [2477][004d68]
//     	FMUL.FTZ R1, R30, R2;            # [2478][004d70]
//     	FMUL.FTZ R19, R38, R0;           # [2479][004d78]
//     	FMUL.FTZ R2, R30, R3;            # [2480][004d80]
//     	FMUL.FTZ R24, R37, R1;           # [2481][004d88]
//     	FMUL.FTZ.S R25, R36, R2;         # [2482][004d90]
//     L4d98:
//     	MOV R19, RZ;                     # [2483][004d98]
//     	MOV R24, RZ;                     # [2484][004da0]
//     	MOV.S R25, RZ;                   # [2485][004da8]
//     L4db0:
//     	MOV R19, RZ;                     # [2486][004db0]
//     	MOV R24, RZ;                     # [2487][004db8]
//     	MOV.S R25, RZ;                   # [2488][004dc0]
//     L4dc8:
//     	MOV32I R12, 0x11;                # [2489][004dc8]
//     	IPA.PASS R0, a[0x74];            # [2490][004dd0] POSITION_Y
//     	F2I.TRUNC R1, R0;                # [2491][004dd8]
//     	IPA.PASS R13, a[0x74];           # [2492][004de0] POSITION_Y
//     	SHL.W R11, R1, 0x1;              # [2493][004de8]
//     	IPA.PASS R0, a[0x70];            # [2494][004df0] POSITION_X
//     	F2I.TRUNC R0, R0;                # [2495][004df8]
//     	SHL.W R10, R0, 0x1;              # [2496][004e00]
//     	ISCADD R1, R1, 0x1, 0x1;         # [2497][004e08]
//     	ISCADD R0, R0, 0x1, 0x1;         # [2498][004e10]
//     	TLD.LZ.AOFFI.T R3, R10, R12, 0x0, 2D, 0x1; # [2499][004e18]
//     	FMUL.FTZ R7, RZ, R13;            # [2500][004e20]
//     	TLD.LZ.NODEP.P R4, R0, 0x1, 2D, 0x7; # [2501][004e28]
//     	MOV32I R32, 0x3f800000;          # [2502][004e30]
//     	IPA.PASS R8, a[0x70];            # [2503][004e38] POSITION_X
//     	FMUL.FTZ R9, RZ, R8;             # [2504][004e40]
//     	TLD.LZ.AOFFI.NODEP.P R10, R10, R12, 0x4, 2D, 0x1; # [2505][004e48]
//     	FFMA.FTZ R8, R8, c[0x10][0x0], R7; # [2506][004e50]
//     	FADD.FTZ R2, R9, R7;             # [2507][004e58]
//     	FFMA.FTZ R7, R3, c[0x10][0x8], R2; # [2508][004e60]
//     	FFMA.FTZ R9, R13, c[0x10][0x4], R9; # [2509][004e68]
//     	FFMA.FTZ R8, RZ, R3, R8;         # [2510][004e70]
//     	FADD32I.FTZ R7, R7, 0x41200001;  # [2511][004e78]
//     	FFMA.FTZ R9, RZ, R3, R9;         # [2512][004e80]
//     	FFMA.FTZ R2, RZ, R3, R2;         # [2513][004e88]
//     	MUFU.RCP R17, R7;                # [2514][004e90]
//     	FADD32I.FTZ R16, R8, 0xbf3340cd; # [2515][004e98]
//     	FADD32I.FTZ R14, R9, 0x3ec9a8e5; # [2516][004ea0]
//     	FADD.FTZ R12, R2, -1;            # [2517][004ea8]
//     	FMUL.FTZ R13, R16, R17;          # [2518][004eb0]
//     	STL [0x44], R10;                 # [2519][004eb8]
//     	FMUL.FTZ R15, R14, R17;          # [2520][004ec0]
//     	TLD.LZ.NODEP.T R8, R0, 0x2, 2D;  # [2521][004ec8]
//     	FMUL.FTZ R18, R13, R13;          # [2522][004ed0]
//     	TLD.LZ.NODEP.P R0, R0, 0x3, 2D;  # [2523][004ed8]
//     	FFMA.FTZ R6, R6, 2, -R32;        # [2524][004ee0]
//     	STL.128 [0x20], R8;              # [2525][004ee8]
//     	FMUL.FTZ R8, R12, R17;           # [2526][004ef0]
//     	STL [0x6c], R3;                  # [2527][004ef8]
//     	FFMA.FTZ R9, R15, R15, R18;      # [2528][004f00]
//     	FFMA.FTZ R30, R24, c[0x10][0x9c], R32; # [2529][004f08]
//     	FFMA.FTZ R3, R8, R8, R9;         # [2530][004f10]
//     	FFMA.FTZ R31, R25, c[0x10][0x9c], R32; # [2531][004f18]
//     	MUFU.RSQ R3, R3;                 # [2532][004f20]
//     	SSY L6838;                       # [2533][004f28]
//     	MUFU.RCP R3, R3;                 # [2534][004f30]
//     	MUFU.RCP R9, R3;                 # [2535][004f38]
//     	FMUL.FTZ R40, R13, R9;           # [2536][004f40]
//     	FMUL.FTZ R23, R15, R9;           # [2537][004f48]
//     	FMUL.FTZ R39, R8, R9;            # [2538][004f50]
//     	FMUL.FTZ R10, R40, c[0x2][0xb0]; # [2539][004f58]
//     	FFMA.FTZ R9, R23, c[0x2][0xb4], R10; # [2540][004f60]
//     	FMNMX.FTZ R18, R3, 100000, PT;   # [2541][004f68]
//     	FFMA.FTZ R11, R39, c[0x2][0xb8], R9; # [2542][004f70]
//     	MUFU.RCP R10, R11;               # [2543][004f78]
//     	FMUL.FTZ R9, R40, c[0x2][0xc0];  # [2544][004f80]
//     	FSETP.LT.FTZ.AND P0, PT, R11, RZ, PT; # [2545][004f88]
//     	FMUL.FTZ R10, R10, -c[0x2][0xbc]; # [2546][004f90]
//     	FFMA.FTZ R9, R23, c[0x2][0xc4], R9; # [2547][004f98]
//     	FMNMX.FTZ R17, R10, c[0x10][0xc], !PT; # [2548][004fa0]
//     	FFMA.FTZ R10, R39, c[0x2][0xc8], R9; # [2549][004fa8]
//     	FMNMX.FTZ R27, R18, R17, PT;     # [2550][004fb0]
//     	FMUL.FTZ R9, R40, c[0x2][0xd0];  # [2551][004fb8]
//     	MUFU.RCP R17, R10;               # [2552][004fc0]
//     	FCMP.LEU.FTZ R26, R18, R27, R11; # [2553][004fc8]
//     	FFMA.FTZ R9, R23, c[0x2][0xd4], R9; # [2554][004fd0]
//     	@!P0 MOV32I R27, 0x3dcccccd;     # [2555][004fd8]
//     	FMUL.FTZ R28, R17, -c[0x2][0xcc]; # [2556][004fe0]
//     	FCMP.GEU.FTZ R26, R26, R18, R11; # [2557][004fe8]
//     	FFMA.FTZ R17, R39, c[0x2][0xd8], R9; # [2558][004ff0]
//     	FMNMX.FTZ R11, R27, R28, !PT;    # [2559][004ff8]
//     	FMUL.FTZ R9, R40, c[0x2][0xe0];  # [2560][005000]
//     	MUFU.RCP R28, R17;               # [2561][005008]
//     	FMNMX.FTZ R18, R26, R11, PT;     # [2562][005010]
//     	FSETP.LT.FTZ.AND P1, PT, R10, RZ, PT; # [2563][005018]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R10, PT; # [2564][005020]
//     	FFMA.FTZ R9, R23, c[0x2][0xe4], R9; # [2565][005028]
//     	FCMP.GEU.FTZ R10, R27, R18, R10; # [2566][005030]
//     	FMUL.FTZ R28, R28, -c[0x2][0xdc]; # [2567][005038]
//     	FFMA.FTZ R11, R39, c[0x2][0xe8], R9; # [2568][005040]
//     	@!P1 SEL R26, R26, R18, !P0;     # [2569][005048]
//     	FMNMX.FTZ R18, R10, R28, !PT;    # [2570][005050]
//     	MUFU.RCP R27, R11;               # [2571][005058]
//     	FMUL.FTZ R9, R40, c[0x2][0xf0];  # [2572][005060]
//     	FMNMX.FTZ R18, R26, R18, PT;     # [2573][005068]
//     	FMUL.FTZ R28, R27, -c[0x2][0xec]; # [2574][005070]
//     	FSETP.LT.FTZ.AND P1, PT, R11, RZ, PT; # [2575][005078]
//     	FCMP.GEU.FTZ R27, R10, R18, R17; # [2576][005080]
//     	FFMA.FTZ R9, R23, c[0x2][0xf4], R9; # [2577][005088]
//     	FCMP.LEU.FTZ R18, R26, R18, R17; # [2578][005090]
//     	FFMA.FTZ R10, R39, c[0x2][0xf8], R9; # [2579][005098]
//     	FCMP.GEU.FTZ R18, R18, R26, R17; # [2580][0050a0]
//     	FMUL.FTZ R9, R40, c[0x2][0x100]; # [2581][0050a8]
//     	FMNMX.FTZ R17, R27, R28, !PT;    # [2582][0050b0]
//     	MUFU.RCP R26, R10;               # [2583][0050b8]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R11, PT; # [2584][0050c0]
//     	FMNMX.FTZ R17, R18, R17, PT;     # [2585][0050c8]
//     	FMUL.FTZ R26, R26, -c[0x2][0xfc]; # [2586][0050d0]
//     	FCMP.GEU.FTZ R11, R27, R17, R11; # [2587][0050d8]
//     	FFMA.FTZ R9, R23, c[0x2][0x104], R9; # [2588][0050e0]
//     	@!P1 SEL R18, R18, R17, !P0;     # [2589][0050e8]
//     	FMNMX.FTZ R17, R11, R26, !PT;    # [2590][0050f0]
//     	FFMA.FTZ R9, R39, c[0x2][0x108], R9; # [2591][0050f8]
//     	FFMA.FTZ R28, R19, c[0x10][0x9c], R32; # [2592][005100]
//     	FFMA.FTZ R27, R4, 2, -R32;       # [2593][005108]
//     	FMNMX.FTZ R17, R18, R17, PT;     # [2594][005110]
//     	MUFU.RCP R26, R9;                # [2595][005118]
//     	MUFU.RCP R29, R28;               # [2596][005120]
//     	FCMP.LEU.FTZ R4, R18, R17, R10;  # [2597][005128]
//     	FCMP.GEU.FTZ R11, R11, R17, R10; # [2598][005130]
//     	FMUL.FTZ R26, R26, -c[0x2][0x10c]; # [2599][005138]
//     	FFMA.FTZ R28, R5, 2, -R32;       # [2600][005140]
//     	FCMP.GEU.FTZ R17, R4, R18, R10;  # [2601][005148]
//     	FMUL.FTZ R5, R27, R27;           # [2602][005150]
//     	FMNMX.FTZ R4, R11, R26, !PT;     # [2603][005158]
//     	FSETP.LT.FTZ.AND P1, PT, R9, RZ, PT; # [2604][005160]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R9, PT; # [2605][005168]
//     	FFMA.FTZ R5, R28, R28, R5;       # [2606][005170]
//     	FMNMX.FTZ R4, R17, R4, PT;       # [2607][005178]
//     	MUFU.RCP R26, R30;               # [2608][005180]
//     	FFMA.FTZ R5, R6, R6, R5;         # [2609][005188]
//     	FCMP.GEU.FTZ R18, R11, R4, R9;   # [2610][005190]
//     	@!P1 SEL R17, R17, R4, !P0;      # [2611][005198]
//     	MUFU.RCP R30, R31;               # [2612][0051a0]
//     	FMUL32I.FTZ R9, R19, 0x417001d9; # [2613][0051a8]
//     	MUFU.RSQ R4, R5;                 # [2614][0051b0]
//     	LDL.LU R31, [0x3c];              # [2615][0051b8]
//     	FMUL32I.FTZ R10, R24, 0x417001d9; # [2616][0051c0]
//     	LDL.LU R19, [0x54];              # [2617][0051c8]
//     	FMUL32I.FTZ R11, R25, 0x417001d9; # [2618][0051d0]
//     	LDL.LU R5, [0x4c];               # [2619][0051d8]
//     	FSETP.LT.FTZ.AND P0, PT, R18, R17, PT; # [2620][0051e0]
//     	FMUL.FTZ R47, R4, R6;            # [2621][0051e8]
//     	FMUL.FTZ R46, R4, R28;           # [2622][0051f0]
//     	FMUL.FTZ R45, R4, R27;           # [2623][0051f8]
//     	FFMA.FTZ R9, R9, R29, R31;       # [2624][005200]
//     	FFMA.FTZ R10, R10, R26, R19;     # [2625][005208]
//     	FFMA.FTZ R5, R11, R30, R5;       # [2626][005210]
//     	STL [0x38], R9;                  # [2627][005218]
//     	STL [0x50], R10;                 # [2628][005220]
//     	STL [0x48], R5;                  # [2629][005228]
//     	@!P0 BRA L6820;                  # [2630][005230]
//     	IPA.PASS R4, a[0x70];            # [2631][005238] POSITION_X
//     	F2I.U32.TRUNC R4, R4;            # [2632][005240]
//     	IPA.PASS R5, a[0x74];            # [2633][005248] POSITION_Y
//     	LOP.AND R4, R4, 0x3;             # [2634][005250]
//     	F2I.U32.TRUNC R5, R5;            # [2635][005258]
//     	LOP.AND R5, R5, 0x3;             # [2636][005260]
//     	MOV R25, c[0x2][0x80];           # [2637][005268]
//     	FMNMX.FTZ R33, R17, 100, PT;     # [2638][005270]
//     	TLD.LZ.P R29, R4, 0x6, 2D, 0x1;  # [2639][005278]
//     	FMUL.FTZ R19, R40, c[0x2][0x40]; # [2640][005280]
//     	FMUL32I.FTZ R4, R40, 0x3e028e29; # [2641][005288]
//     	MOV R31, c[0x2][0x9c];           # [2642][005290]
//     	SSY L5c40;                       # [2643][005298]
//     	FMUL.FTZ R30, R25, c[0x10][0x18]; # [2644][0052a0]
//     	FFMA.FTZ R6, R23, c[0x10][0x10], R4; # [2645][0052a8]
//     	FMUL.FTZ R5, R25, c[0x10][0x24]; # [2646][0052b0]
//     	FMUL.FTZ R27, R25, c[0x10][0x28]; # [2647][0052b8]
//     	MOV R32, c[0x2][0x84];           # [2648][0052c0]
//     	MOV R11, c[0x2][0x88];           # [2649][0052c8]
//     	FFMA.FTZ R25, R23, c[0x2][0x44], R19; # [2650][0052d0]
//     	MOV R41, RZ;                     # [2651][0052d8]
//     	FMUL.FTZ R24, R40, c[0x2][0x50]; # [2652][0052e0]
//     	FMNMX.FTZ R19, R18, 1, !PT;      # [2653][0052e8]
//     	FMUL.FTZ R10, R40, c[0x2][0x60]; # [2654][0052f0]
//     	MOV R38, RZ;                     # [2655][0052f8]
//     	FMUL.FTZ R4, R31, c[0x2][0x9c];  # [2656][005300]
//     	MOV R34, RZ;                     # [2657][005308]
//     	FMUL.FTZ R9, R40, c[0x2][0x70];  # [2658][005310]
//     	FFMA.FTZ R31, R32, c[0x10][0x10], R5; # [2659][005318]
//     	FFMA.FTZ R30, R32, c[0x10][0x1c], R30; # [2660][005320]
//     	FFMA.FTZ R26, R23, c[0x2][0x54], R24; # [2661][005328]
//     	FADD.FTZ R5, R19, -1;            # [2662][005330]
//     	FFMA.FTZ R28, R23, c[0x2][0x64], R10; # [2663][005338]
//     	FFMA.FTZ R10, R23, c[0x2][0x74], R9; # [2664][005340]
//     	FFMA.FTZ R24, R39, c[0x10][0x14], R6; # [2665][005348]
//     	FFMA.FTZ R31, R11, c[0x10][0x14], R31; # [2666][005350]
//     	FFMA.FTZ R36, R32, c[0x10][0x2c], R27; # [2667][005358]
//     	FADD32I.FTZ R35, R24, 0x434de9e8; # [2668][005360]
//     	FMNMX.FTZ R27, R5, RZ, !PT;      # [2669][005368]
//     	FMUL32I.FTZ R42, R24, 0xba5a740e; # [2670][005370]
//     	FFMA.FTZ R5, R39, c[0x2][0x78], R10; # [2671][005378]
//     	FMUL32I.FTZ R10, R24, 0xbd14f209; # [2672][005380]
//     	FFMA.FTZ R6, R39, c[0x2][0x68], R28; # [2673][005388]
//     	FMUL32I.FTZ R32, R35, 0xba5a740e; # [2674][005390]
//     	FMUL.FTZ R48, R27, R42;          # [2675][005398]
//     	FMUL.FTZ R28, R27, R10;          # [2676][0053a0]
//     	FMUL32I.FTZ R37, R24, 0x3d14f209; # [2677][0053a8]
//     	FMUL32I.FTZ R44, R32, 0x3fb8aa3b; # [2678][0053b0]
//     	FMUL32I.FTZ R42, R35, 0xbd14f209; # [2679][0053b8]
//     	FMUL32I.FTZ R32, R24, -0.000125; # [2680][0053c0]
//     	FMUL32I.FTZ R43, R28, 0x3fb8aa3b; # [2681][0053c8]
//     	FMUL32I.FTZ R48, R48, 0x3fb8aa3b; # [2682][0053d0]
//     	RRO.EX2 R44, R44;                # [2683][0053d8]
//     	MUFU.RCP R10, R37;               # [2684][0053e0]
//     	FMUL32I.FTZ R42, R42, 0x3fb8aa3b; # [2685][0053e8]
//     	RRO.EX2 R43, R43;                # [2686][0053f0]
//     	FFMA.FTZ R30, R11, c[0x10][0x20], R30; # [2687][0053f8]
//     	FMUL.FTZ R37, R27, R32;          # [2688][005400]
//     	RRO.EX2 R48, R48;                # [2689][005408]
//     	MUFU.EX2 R32, R44;               # [2690][005410]
//     	FFMA.FTZ R11, R11, c[0x10][0x30], R36; # [2691][005418]
//     	RRO.EX2 R36, R42;                # [2692][005420]
//     	MUFU.EX2 R44, R43;               # [2693][005428]
//     	MUFU.EX2 R48, R48;               # [2694][005430]
//     	FMUL32I.FTZ R35, R35, -0.000125; # [2695][005438]
//     	FMUL32I.FTZ R37, R37, 0x3fb8aa3b; # [2696][005440]
//     	MUFU.LG2 R9, R19;                # [2697][005448]
//     	FMUL32I.FTZ R42, R24, 0.000125;  # [2698][005450]
//     	MUFU.EX2 R43, R36;               # [2699][005458]
//     	FADD.FTZ R44, -R44, 1;           # [2700][005460]
//     	FMUL32I.FTZ R36, R35, 0x3fb8aa3b; # [2701][005468]
//     	FADD.FTZ R48, -R48, 1;           # [2702][005470]
//     	RRO.EX2 R37, R37;                # [2703][005478]
//     	MUFU.RCP R35, R42;               # [2704][005480]
//     	FMUL32I.FTZ R9, R9, 1.20412;     # [2705][005488]
//     	FMUL.FTZ R42, R43, R44;          # [2706][005490]
//     	FMUL32I.FTZ R49, R24, 0x3a5a740e; # [2707][005498]
//     	FMUL.FTZ R43, R32, R48;          # [2708][0054a0]
//     	MUFU.EX2 R37, R37;               # [2709][0054a8]
//     	RRO.EX2 R36, R36;                # [2710][0054b0]
//     	F2F.FTZ.FLOOR R32, R9;           # [2711][0054b8]
//     	FADD32I.FTZ R9, R31, 0x434de9e8; # [2712][0054c0]
//     	MUFU.RCP R28, R49;               # [2713][0054c8]
//     	MUFU.EX2 R31, R36;               # [2714][0054d0]
//     	FSETP.NEU.FTZ.AND P0, PT, R24, RZ, PT; # [2715][0054d8]
//     	FADD.FTZ R36, -R37, 1;           # [2716][0054e0]
//     	FFMA.FTZ R25, R39, c[0x2][0x48], R25; # [2717][0054e8]
//     	FMUL.FTZ R37, R42, R10;          # [2718][0054f0]
//     	FMUL.FTZ R36, R31, R36;          # [2719][0054f8]
//     	FMUL.FTZ R42, R43, R28;          # [2720][005500]
//     	@!P0 FMUL32I.FTZ R37, R27, 0x3a12c592; # [2721][005508]
//     	FMNMX.FTZ R28, R32, RZ, !PT;     # [2722][005510]
//     	@!P0 FMUL32I.FTZ R42, R27, 0x3f57a251; # [2723][005518]
//     	FADD32I.FTZ R10, R30, 0xbf1e4005; # [2724][005520]
//     	FMUL32I.FTZ R32, R9, -0.000125;  # [2725][005528]
//     	FMUL.FTZ R36, R36, R35;          # [2726][005530]
//     	FMUL32I.FTZ R28, R28, 0.830482;  # [2727][005538]
//     	FFMA.FTZ R37, R37, 200, R42;     # [2728][005540]
//     	FMUL32I.FTZ R31, R9, 0xba5a740e; # [2729][005548]
//     	FMUL32I.FTZ R30, R9, 0xbd14f209; # [2730][005550]
//     	@!P0 FMUL32I.FTZ R36, R27, 0x3f797eae; # [2731][005558]
//     	RRO.EX2 R27, R28;                # [2732][005560]
//     	FMUL32I.FTZ R32, R32, 0x3fb8aa3b; # [2733][005568]
//     	FMUL32I.FTZ R42, R37, 0x3cb851eb; # [2734][005570]
//     	FMUL32I.FTZ R31, R31, 0x3fb8aa3b; # [2735][005578]
//     	FMUL32I.FTZ R28, R30, 0x3fb8aa3b; # [2736][005580]
//     	FMUL32I.FTZ R35, R37, 0.012015;  # [2737][005588]
//     	FMUL32I.FTZ R37, R37, 0.0075;    # [2738][005590]
//     	MUFU.EX2 R30, R27;               # [2739][005598]
//     	RRO.EX2 R32, R32;                # [2740][0055a0]
//     	FFMA.FTZ R43, RZ, R36, R42;      # [2741][0055a8]
//     	RRO.EX2 R31, R31;                # [2742][0055b0]
//     	RRO.EX2 R27, R28;                # [2743][0055b8]
//     	FFMA.FTZ R42, RZ, R36, R35;      # [2744][0055c0]
//     	FFMA.FTZ R28, RZ, R36, R37;      # [2745][0055c8]
//     	FADD.FTZ R25, R25, c[0x2][0x4c]; # [2746][0055d0]
//     	MUFU.EX2 R35, R32;               # [2747][0055d8]
//     	FFMA.FTZ R26, R39, c[0x2][0x58], R26; # [2748][0055e0]
//     	MUFU.EX2 R36, R31;               # [2749][0055e8]
//     	FMUL32I.FTZ R32, R42, 0xbfb8aa3b; # [2750][0055f0]
//     	FMUL32I.FTZ R31, R28, 0xbfb8aa3b; # [2751][0055f8]
//     	FMUL32I.FTZ R43, R43, 0xbfb8aa3b; # [2752][005600]
//     	FADD.FTZ R28, R25, -c[0x2][0x4c]; # [2753][005608]
//     	FADD.FTZ R26, R26, c[0x2][0x5c]; # [2754][005610]
//     	RRO.EX2 R25, R32;                # [2755][005618]
//     	FADD.FTZ R6, R6, c[0x2][0x6c];   # [2756][005620]
//     	RRO.EX2 R42, R43;                # [2757][005628]
//     	FADD.FTZ R5, R5, c[0x2][0x7c];   # [2758][005630]
//     	FSETP.GE.FTZ.AND P0, PT, R30, R33, PT; # [2759][005638]
//     	RRO.EX2 R31, R31;                # [2760][005640]
//     	MUFU.EX2 R37, R27;               # [2761][005648]
//     	FADD.FTZ R27, R26, -c[0x2][0x5c]; # [2762][005650]
//     	MUFU.EX2 R43, R25;               # [2763][005658]
//     	FADD32I.FTZ R11, R11, 0xc08ea342; # [2764][005660]
//     	FADD.FTZ R26, R6, -c[0x2][0x6c]; # [2765][005668]
//     	MUFU.EX2 R42, R42;               # [2766][005670]
//     	FADD.FTZ R25, R5, -c[0x2][0x7c]; # [2767][005678]
//     	FMUL32I.FTZ R48, R30, 0x3fe39ea9; # [2768][005680]
//     	MUFU.EX2 R44, R31;               # [2769][005688]
//     	@P0 BRA L5c38;                   # [2770][005690]
//     	MUFU.RCP R49, R4;                # [2771][005698]
//     	NOP;                             # [2772][0056a0]
//     L56a8:
//     	FMNMX.FTZ R57, R19, R30, !PT;    # [2773][0056a8]
//     	FMNMX.FTZ R55, R33, R48, PT;     # [2774][0056b0]
//     	MUFU.RCP R4, R57;                # [2775][0056b8]
//     	FMUL.FTZ R4, R55, R4;            # [2776][0056c0]
//     	FADD.FTZ R62, -R57, R55;         # [2777][0056c8]
//     	MUFU.LG2 R4, R4;                 # [2778][0056d0]
//     	FMUL.FTZ R4, R29, R4;            # [2779][0056d8]
//     	RRO.EX2 R4, R4;                  # [2780][0056e0]
//     	MUFU.EX2 R4, R4;                 # [2781][0056e8]
//     	FMUL.FTZ R30, R57, R4;           # [2782][0056f0]
//     	FFMA.FTZ R4, R30, R25, c[0x2][0x7c]; # [2783][0056f8]
//     	FFMA.FTZ R5, R30, R28, c[0x2][0x4c]; # [2784][005700]
//     	MUFU.RCP R31, R4;                # [2785][005708]
//     	FFMA.FTZ R6, R30, R27, c[0x2][0x5c]; # [2786][005710]
//     	FMUL.FTZ R4, R5, R31;            # [2787][005718]
//     	FMUL.FTZ R5, R6, R31;            # [2788][005720]
//     	FMUL.FTZ R51, R40, R30;          # [2789][005728]
//     	FMUL.FTZ R53, R23, R30;          # [2790][005730]
//     	TEX.LZ.NODEP.T R32, R4, 0x8, 0x1, 2D, 0x1; # [2791][005738]
//     	FMUL32I.FTZ R50, R51, 0x3f3ee4d0; # [2792][005740]
//     	TEX.LZ.NODEP.P R4, R4, 0x7, 0x0, 2D, 0x7; # [2793][005748]
//     	FMUL32I.FTZ R52, R51, 0x3e028e29; # [2794][005750]
//     	FMUL32I.FTZ R56, R51, 0xbf276c23; # [2795][005758]
//     	FFMA.FTZ R54, R53, c[0x10][0x1c], R50; # [2796][005760]
//     	FFMA.FTZ R51, R53, c[0x10][0x10], R52; # [2797][005768]
//     	FMUL.FTZ R50, R39, R30;          # [2798][005770]
//     	FFMA.FTZ R53, R53, c[0x10][0x2c], R56; # [2799][005778]
//     	FFMA.FTZ R52, R50, c[0x10][0x20], R54; # [2800][005780]
//     	FFMA.FTZ R51, R50, c[0x10][0x14], R51; # [2801][005788]
//     	FADD32I.FTZ R52, R52, 0xbf1e4005; # [2802][005790]
//     	FFMA.FTZ R53, R50, c[0x10][0x30], R53; # [2803][005798]
//     	FFMA.FTZ R58, R30, -R40, c[0x2][0x80]; # [2804][0057a0]
//     	FADD32I.FTZ R50, R51, 0x434de9e8; # [2805][0057a8]
//     	FADD.FTZ R51, -R10, R52;         # [2806][0057b0]
//     	FFMA.FTZ R59, R30, -R23, c[0x2][0x84]; # [2807][0057b8]
//     	FMUL.FTZ R56, R58, R58;          # [2808][0057c0]
//     	FADD.FTZ R52, -R9, R50;          # [2809][0057c8]
//     	FADD32I.FTZ R54, R53, 0xc08ea342; # [2810][0057d0]
//     	FMUL.FTZ R50, R51, R51;          # [2811][0057d8]
//     	FFMA.FTZ R53, R30, -R39, c[0x2][0x88]; # [2812][0057e0]
//     	FFMA.FTZ R56, R59, R59, R56;     # [2813][0057e8]
//     	FADD.FTZ R51, -R11, R54;         # [2814][0057f0]
//     	FFMA.FTZ R50, R52, R52, R50;     # [2815][0057f8]
//     	FFMA.FTZ R56, R53, R53, R56;     # [2816][005800]
//     	FFMA.FTZ R50, R51, R51, R50;     # [2817][005808]
//     	MUFU.RSQ R54, R56;               # [2818][005810]
//     	FFMA.FTZ R51, R30, R24, c[0x10][0x34]; # [2819][005818]
//     	MUFU.RSQ R50, R50;               # [2820][005820]
//     	FMUL.FTZ R55, R54, R58;          # [2821][005828]
//     	FMUL.FTZ R57, R54, R59;          # [2822][005830]
//     	FMUL.FTZ R58, R54, R53;          # [2823][005838]
//     	FMUL32I.FTZ R59, R51, 0xba5a740e; # [2824][005840]
//     	FMUL32I.FTZ R53, R51, -0.000125; # [2825][005848]
//     	FMUL32I.FTZ R54, R51, 0xbd14f209; # [2826][005850]
//     	FMUL.FTZ R52, R52, R50;          # [2827][005858]
//     	MUFU.RCP R51, R50;               # [2828][005860]
//     	FMUL32I.FTZ R60, R59, 0x3fb8aa3b; # [2829][005868]
//     	FMUL32I.FTZ R50, R52, 0xbd14f209; # [2830][005870]
//     	FMUL32I.FTZ R59, R54, 0x3fb8aa3b; # [2831][005878]
//     	FMUL32I.FTZ R54, R52, 0xba5a740e; # [2832][005880]
//     	RRO.EX2 R60, R60;                # [2833][005888]
//     	FMUL.FTZ R50, R51, R50;          # [2834][005890]
//     	RRO.EX2 R59, R59;                # [2835][005898]
//     	FMUL.FTZ R54, R51, R54;          # [2836][0058a0]
//     	FMUL32I.FTZ R53, R53, 0x3fb8aa3b; # [2837][0058a8]
//     	FMUL32I.FTZ R50, R50, 0x3fb8aa3b; # [2838][0058b0]
//     	MUFU.EX2 R61, R60;               # [2839][0058b8]
//     	FMUL32I.FTZ R54, R54, 0x3fb8aa3b; # [2840][0058c0]
//     	MUFU.EX2 R59, R59;               # [2841][0058c8]
//     	RRO.EX2 R60, R50;                # [2842][0058d0]
//     	RRO.EX2 R53, R53;                # [2843][0058d8]
//     	FMUL32I.FTZ R50, R52, -0.000125; # [2844][0058e0]
//     	RRO.EX2 R54, R54;                # [2845][0058e8]
//     	FMUL.FTZ R55, R40, R55;          # [2846][0058f0]
//     	FFMA.FTZ R59, R59, 200, R61;     # [2847][0058f8]
//     	MUFU.EX2 R53, R53;               # [2848][005900]
//     	FMUL.FTZ R50, R51, R50;          # [2849][005908]
//     	MUFU.EX2 R54, R54;               # [2850][005910]
//     	FFMA.FTZ R57, R23, R57, R55;     # [2851][005918]
//     	FMUL.FTZ R59, R62, R59;          # [2852][005920]
//     	MUFU.EX2 R61, R60;               # [2853][005928]
//     	FMUL32I.FTZ R50, R50, 0x3fb8aa3b; # [2854][005930]
//     	FMUL32I.FTZ R55, R52, 0x3a5a740e; # [2855][005938]
//     	FMUL.FTZ R60, R62, R53;          # [2856][005940]
//     	FADD.FTZ R54, -R54, 1;           # [2857][005948]
//     	FMUL32I.FTZ R53, R52, 0x3d14f209; # [2858][005950]
//     	FMUL32I.FTZ R62, R59, 0.0075;    # [2859][005958]
//     	RRO.EX2 R50, R50;                # [2860][005960]
//     	FADD.FTZ R61, -R61, 1;           # [2861][005968]
//     	FFMA.FTZ R30, R30, R26, c[0x2][0x6c]; # [2862][005970]
//     	MUFU.RCP R55, R55;               # [2863][005978]
//     	FMUL.FTZ R54, R36, R54;          # [2864][005980]
//     	FFMA.FTZ R62, RZ, R60, R62;      # [2865][005988]
//     	MUFU.RCP R53, R53;               # [2866][005990]
//     	FMUL.FTZ R61, R37, R61;          # [2867][005998]
//     	MUFU.EX2 R50, R50;               # [2868][0059a0]
//     	FMUL.FTZ R30, R30, R31;          # [2869][0059a8]
//     	FFMA.FTZ R31, R39, R58, R57;     # [2870][0059b0]
//     	FSETP.NEU.FTZ.AND P0, PT, R52, RZ, PT; # [2871][0059b8]
//     	FMUL.FTZ R54, R54, R55;          # [2872][0059c0]
//     	FMUL32I.FTZ R57, R62, 0xbfb8aa3b; # [2873][0059c8]
//     	FMUL32I.FTZ R55, R52, 0.000125;  # [2874][0059d0]
//     	FMUL.FTZ R53, R61, R53;          # [2875][0059d8]
//     	FADD.FTZ R52, -R50, 1;           # [2876][0059e0]
//     	@!P0 FMUL.FTZ R53, R51, R37;     # [2877][0059e8]
//     	@!P0 FMUL.FTZ R54, R51, R36;     # [2878][0059f0]
//     	RRO.EX2 R57, R57;                # [2879][0059f8]
//     	MUFU.RCP R55, R55;               # [2880][005a00]
//     	FMUL.FTZ R52, R35, R52;          # [2881][005a08]
//     	FFMA.FTZ R53, R53, 200, R54;     # [2882][005a10]
//     	FMUL32I.FTZ R58, R59, 0.012015;  # [2883][005a18]
//     	MUFU.EX2 R54, R57;               # [2884][005a20]
//     	MOV32I R61, 0x3f800000;          # [2885][005a28]
//     	FMUL.FTZ R52, R52, R55;          # [2886][005a30]
//     	FMUL.FTZ R50, R56, R49;          # [2887][005a38]
//     	FFMA.FTZ R55, RZ, R60, R58;      # [2888][005a40]
//     	@!P0 FMUL.FTZ R52, R51, R35;     # [2889][005a48]
//     	FFMA.FTZ R31, R31, c[0x10][0x38], R61; # [2890][005a50]
//     	FMUL32I.FTZ R51, R53, 0.0075;    # [2891][005a58]
//     	FMUL.FTZ R44, R44, R54;          # [2892][005a60]
//     	FADD.FTZ R56, R56, 1;            # [2893][005a68]
//     	FMUL32I.FTZ R57, R55, 0xbfb8aa3b; # [2894][005a70]
//     	FMUL32I.FTZ R54, R53, 0.012015;  # [2895][005a78]
//     	FMUL32I.FTZ R55, R53, 0x3cb851eb; # [2896][005a80]
//     	FFMA.FTZ R51, RZ, R52, R51;      # [2897][005a88]
//     	FFMA.FTZ R53, RZ, R52, R54;      # [2898][005a90]
//     	FFMA.FTZ R50, R50, -R50, R61;    # [2899][005a98]
//     	FFMA.FTZ R52, RZ, R52, R55;      # [2900][005aa0]
//     	FMUL32I.FTZ R51, R51, 0xbfb8aa3b; # [2901][005aa8]
//     	FMUL32I.FTZ R54, R53, 0xbfb8aa3b; # [2902][005ab0]
//     	RRO.EX2 R54, R54;                # [2903][005ab8]
//     	FSET.BF.GE.FTZ.AND R30, R32, R30, PT; # [2904][005ac0]
//     	FMUL.FTZ R32, R31, R31;          # [2905][005ac8]
//     	FMUL.FTZ R5, R30, R5;            # [2906][005ad0]
//     	MUFU.RCP R31, R56;               # [2907][005ad8]
//     	FMUL32I.FTZ R55, R32, 0x41490fdb; # [2908][005ae0]
//     	RRO.EX2 R56, R57;                # [2909][005ae8]
//     	MUFU.EX2 R32, R56;               # [2910][005af0]
//     	FMUL32I.FTZ R57, R59, 0x3cb851eb; # [2911][005af8]
//     	RRO.EX2 R56, R51;                # [2912][005b00]
//     	FFMA.FTZ R53, RZ, R60, R57;      # [2913][005b08]
//     	FMNMX.FTZ R51, R50, RZ, !PT;     # [2914][005b10]
//     	FMUL32I.FTZ R57, R53, 0xbfb8aa3b; # [2915][005b18]
//     	MUFU.RCP R50, R55;               # [2916][005b20]
//     	FMUL.FTZ R43, R43, R32;          # [2917][005b28]
//     	FMUL32I.FTZ R55, R52, 0xbfb8aa3b; # [2918][005b30]
//     	MUFU.EX2 R52, R56;               # [2919][005b38]
//     	FMUL.FTZ R56, R30, R6;           # [2920][005b40]
//     	FMUL.FTZ R30, R30, R4;           # [2921][005b48]
//     	RRO.EX2 R6, R55;                 # [2922][005b50]
//     	MUFU.EX2 R4, R54;                # [2923][005b58]
//     	FMUL.FTZ R53, R51, R56;          # [2924][005b60]
//     	FMUL.FTZ R55, R51, R30;          # [2925][005b68]
//     	FMUL.FTZ R54, R51, R5;           # [2926][005b70]
//     	FMUL32I.FTZ R30, R50, 0x3b9d4951; # [2927][005b78]
//     	FMUL.FTZ R50, R31, R53;          # [2928][005b80]
//     	MUFU.EX2 R5, R6;                 # [2929][005b88]
//     	FMUL.FTZ R51, R31, R54;          # [2930][005b90]
//     	FMUL.FTZ R53, R31, R55;          # [2931][005b98]
//     	RRO.EX2 R56, R57;                # [2932][005ba0]
//     	FMUL.FTZ R6, R59, R30;           # [2933][005ba8]
//     	FMUL.FTZ R31, R52, R50;          # [2934][005bb0]
//     	MOV R30, R48;                    # [2935][005bb8]
//     	FMUL.FTZ R50, R4, R51;           # [2936][005bc0]
//     	MUFU.EX2 R54, R56;               # [2937][005bc8]
//     	FMUL32I.FTZ R51, R48, 0x3fe39ea9; # [2938][005bd0]
//     	FFMA.FTZ R4, RZ, R60, R6;        # [2939][005bd8]
//     	FMUL.FTZ R48, R5, R53;           # [2940][005be0]
//     	FSETP.GE.FTZ.AND P0, PT, R30, R33, PT; # [2941][005be8]
//     	FMUL.FTZ R6, R50, R4;            # [2942][005bf0]
//     	FMUL.FTZ R5, R31, R4;            # [2943][005bf8]
//     	FMUL.FTZ R42, R42, R54;          # [2944][005c00]
//     	FMUL.FTZ R4, R48, R4;            # [2945][005c08]
//     	MOV R48, R51;                    # [2946][005c10]
//     	FFMA.FTZ R41, R5, R44, R41;      # [2947][005c18]
//     	FFMA.FTZ R38, R6, R43, R38;      # [2948][005c20]
//     	FFMA.FTZ R34, R4, R42, R34;      # [2949][005c28]
//     	@!P0 BRA L56a8;                  # [2950][005c30]
//     L5c38:
//     	FSETP.GE.FTZ.AND.S P0, PT, R17, R3, PT; # [2951][005c38]
//     L5c40:
//     	FSETP.LT.FTZ.AND P0, PT, R18, R3, P0; # [2952][005c40]
//     	FFMA.FTZ R22, R41, c[0x2][0x98], R22; # [2953][005c48]
//     	FFMA.FTZ R21, R38, c[0x2][0x94], R21; # [2954][005c50]
//     	FFMA.FTZ R20, R34, c[0x2][0x90], R20; # [2955][005c58]
//     	@!P0 BRA L6808;                  # [2956][005c60]
//     	FMUL.FTZ R4, R16, c[0x2][0x40];  # [2957][005c68]
//     	FMUL.FTZ R3, R16, c[0x2][0x70];  # [2958][005c70]
//     	FMUL.FTZ R6, R16, c[0x2][0x50];  # [2959][005c78]
//     	FMUL.FTZ R5, R16, c[0x2][0x60];  # [2960][005c80]
//     	FFMA.FTZ R17, R14, c[0x2][0x44], R4; # [2961][005c88]
//     	FMUL32I.FTZ R4, R13, 0x3f3ee4d0; # [2962][005c90]
//     	FFMA.FTZ R16, R14, c[0x2][0x74], R3; # [2963][005c98]
//     	FFMA.FTZ R18, R14, c[0x2][0x54], R6; # [2964][005ca0]
//     	FMUL32I.FTZ R3, R13, 0x3e028e29; # [2965][005ca8]
//     	FFMA.FTZ R6, R14, c[0x2][0x64], R5; # [2966][005cb0]
//     	FFMA.FTZ R5, R15, c[0x10][0x1c], R4; # [2967][005cb8]
//     	FFMA.FTZ R4, R15, c[0x10][0x10], R3; # [2968][005cc0]
//     	FFMA.FTZ R3, R12, c[0x2][0x78], R16; # [2969][005cc8]
//     	FFMA.FTZ R16, R12, c[0x2][0x48], R17; # [2970][005cd0]
//     	FFMA.FTZ R14, R7, c[0x2][0x7c], R3; # [2971][005cd8]
//     	FMUL32I.FTZ R3, R13, 0xbf276c23; # [2972][005ce0]
//     	FFMA.FTZ R17, R12, c[0x2][0x58], R18; # [2973][005ce8]
//     	FFMA.FTZ R12, R12, c[0x2][0x68], R6; # [2974][005cf0]
//     	FFMA.FTZ R6, R15, c[0x10][0x2c], R3; # [2975][005cf8]
//     	MOV R19, c[0x2][0x9c];           # [2976][005d00]
//     	MUFU.RCP R3, R14;                # [2977][005d08]
//     	FFMA.FTZ R5, R8, c[0x10][0x20], R5; # [2978][005d10]
//     	MUFU.RCP R14, R19;               # [2979][005d18]
//     	FFMA.FTZ R32, R7, c[0x2][0x6c], R12; # [2980][005d20]
//     	FADD32I.FTZ R5, R5, 0xbf1e4005;  # [2981][005d28]
//     	FADD.FTZ R34, -R13, c[0x2][0x80]; # [2982][005d30]
//     	FADD.FTZ R38, -R8, c[0x2][0x88]; # [2983][005d38]
//     	FFMA.FTZ R4, R8, c[0x10][0x14], R4; # [2984][005d40]
//     	FADD.FTZ R5, -R10, R5;           # [2985][005d48]
//     	FFMA.FTZ R13, R32, R3, c[0x10][0x40]; # [2986][005d50]
//     	FADD32I.FTZ R4, R4, 0x434de9e8;  # [2987][005d58]
//     	FFMA.FTZ R6, R8, c[0x10][0x30], R6; # [2988][005d60]
//     	FADD.FTZ R51, -R9, R4;           # [2989][005d68]
//     	FMUL.FTZ R8, R13, R14;           # [2990][005d70]
//     	FADD.FTZ R41, -R15, c[0x2][0x84]; # [2991][005d78]
//     	FFMA.FTZ R15, R7, c[0x2][0x4c], R16; # [2992][005d80]
//     	FMUL.FTZ R4, R5, R5;             # [2993][005d88]
//     	FFMA.FTZ R13, R7, c[0x2][0x5c], R17; # [2994][005d90]
//     	FADD32I.FTZ R6, R6, 0xc08ea342;  # [2995][005d98]
//     	FMUL.FTZ R10, R8, 0.75;          # [2996][005da0]
//     	FMUL.FTZ R12, R34, R34;          # [2997][005da8]
//     	FMUL.FTZ R8, R15, R3;            # [2998][005db0]
//     	FFMA.FTZ R4, R51, R51, R4;       # [2999][005db8]
//     	FADD.FTZ R5, -R11, R6;           # [3000][005dc0]
//     	FMUL.FTZ R9, R13, R3;            # [3001][005dc8]
//     	FMNMX.FTZ R48, R10, -c[0x10][0x3c], !PT; # [3002][005dd0]
//     	FFMA.FTZ R7, R41, R41, R12;      # [3003][005dd8]
//     	FMUL.FTZ R13, R45, -R40;         # [3004][005de0]
//     	FFMA.FTZ R49, R5, R5, R4;        # [3005][005de8]
//     	FFMA.FTZ R31, R48, c[0x10][0x44], R9; # [3006][005df0]
//     	FFMA.FTZ R30, R48, c[0x10][0x44], R8; # [3007][005df8]
//     	FFMA.FTZ R28, R48, RZ, R8;       # [3008][005e00]
//     	FFMA.FTZ R11, R48, RZ, R9;       # [3009][005e08]
//     	FFMA.FTZ R33, R38, R38, R7;      # [3010][005e10]
//     	FFMA.FTZ R29, R48, 0.875, R9;    # [3011][005e18]
//     	FFMA.FTZ R27, R48, c[0x10][0x48], R9; # [3012][005e20]
//     	FFMA.FTZ R26, R48, -c[0x10][0x48], R8; # [3013][005e28]
//     	FFMA.FTZ R19, R48, c[0x10][0x4c], R9; # [3014][005e30]
//     	FFMA.FTZ R18, R48, c[0x10][0x4c], R8; # [3015][005e38]
//     	FADD.FTZ R24, R48, R8;           # [3016][005e40]
//     	TEX.LZ.NODEP.P R30, R30, 0x8, 0x1, 2D, 0x1; # [3017][005e48]
//     	FFMA.FTZ R17, R48, -0.625, R9;   # [3018][005e50]
//     	FFMA.FTZ R15, R48, c[0x10][0x50], R9; # [3019][005e58]
//     	FFMA.FTZ R14, R48, -c[0x10][0x50], R8; # [3020][005e60]
//     	FFMA.FTZ R10, R48, -0.75, R8;    # [3021][005e68]
//     	FFMA.FTZ R12, R48, 0.5, R8;      # [3022][005e70]
//     	FFMA.FTZ R5, R48, c[0x10][0x54], R9; # [3023][005e78]
//     	FFMA.FTZ R4, R48, c[0x10][0x58], R8; # [3024][005e80]
//     	FFMA.FTZ R7, R48, c[0x10][0x5c], R9; # [3025][005e88]
//     	FFMA.FTZ R6, R48, c[0x10][0x60], R8; # [3026][005e90]
//     	MOV R16, R28;                    # [3027][005e98]
//     	MOV R25, R11;                    # [3028][005ea0]
//     	FFMA.FTZ R13, R46, -R23, R13;    # [3029][005ea8]
//     	MUFU.RSQ R49, R49;               # [3030][005eb0]
//     	TEX.LZ.NODEP R28, R28, 0x8, 0x1, 2D, 0x1; # [3031][005eb8]
//     	FFMA.FTZ R53, R47, -R39, R13;    # [3032][005ec0]
//     	TEX.LZ.NODEP R26, R26, 0x8, 0x1, 2D, 0x1; # [3033][005ec8]
//     	FMUL.FTZ R51, R51, R49;          # [3034][005ed0]
//     	TEX.LZ.NODEP R27, R18, 0x8, 0x1, 2D, 0x1; # [3035][005ed8]
//     	MUFU.RCP R49, R49;               # [3036][005ee0]
//     	TEX.LZ.NODEP R29, R24, 0x8, 0x1, 2D, 0x1; # [3037][005ee8]
//     	FMUL32I.FTZ R54, R51, 0xbd14f209; # [3038][005ef0]
//     	TEX.LZ.NODEP R31, R16, 0x8, 0x1, 2D, 0x1; # [3039][005ef8]
//     	MOV R13, R11;                    # [3040][005f00]
//     	TEX.LZ.NODEP R50, R14, 0x8, 0x1, 2D, 0x1; # [3041][005f08]
//     	FFMA.FTZ R18, R48, -0.0625, R8;  # [3042][005f10]
//     	TEX.LZ.NODEP.P R52, R10, 0x8, 0x1, 2D, 0x1; # [3043][005f18]
//     	FFMA.FTZ R15, R48, c[0x10][0x64], R9; # [3044][005f20]
//     	FFMA.FTZ R14, R48, c[0x10][0x68], R8; # [3045][005f28]
//     	FFMA.FTZ R17, R48, c[0x10][0x6c], R9; # [3046][005f30]
//     	FFMA.FTZ R10, R48, 0.1875, R8;   # [3047][005f38]
//     	FFMA.FTZ R16, R48, c[0x10][0x70], R8; # [3048][005f40]
//     	FFMA.FTZ R19, R48, c[0x10][0x74], R9; # [3049][005f48]
//     	FFMA.FTZ R25, R48, c[0x10][0x78], R9; # [3050][005f50]
//     	FFMA.FTZ R24, R48, -0.03125, R8; # [3051][005f58]
//     	FMUL.FTZ R56, R49, R54;          # [3052][005f60]
//     	MUFU.RSQ R48, R33;               # [3053][005f68]
//     	F2F.SAT R54, R53;                # [3054][005f70]
//     	FMUL32I.FTZ R55, R51, -0.000125; # [3055][005f78]
//     	FSETP.NEU.FTZ.AND P0, PT, R51, RZ, PT; # [3056][005f80]
//     	TEX.LZ.NODEP.P R12, R12, 0x8, 0x1, 2D, 0x1; # [3057][005f88]
//     	TEX.LZ.NODEP R13, R4, 0x8, 0x1, 2D, 0x1; # [3058][005f90]
//     	FADD.FTZ R4, -R54, 1;            # [3059][005f98]
//     	TEX.LZ.NODEP R7, R6, 0x8, 0x1, 2D, 0x1; # [3060][005fa0]
//     	FMUL32I.FTZ R6, R56, 0x3fb8aa3b; # [3061][005fa8]
//     	TEX.LZ.NODEP R14, R14, 0x8, 0x1, 2D, 0x1; # [3062][005fb0]
//     	TEX.LZ.NODEP R15, R16, 0x8, 0x1, 2D, 0x1; # [3063][005fb8]
//     	FMUL32I.FTZ R17, R51, 0xba5a740e; # [3064][005fc0]
//     	TEX.LZ.NODEP R10, R10, 0x8, 0x1, 2D, 0x1; # [3065][005fc8]
//     	FMUL.FTZ R56, R49, R17;          # [3066][005fd0]
//     	TEX.LZ.NODEP R11, R18, 0x8, 0x1, 2D, 0x1; # [3067][005fd8]
//     	MUFU.RSQ R17, R4;                # [3068][005fe0]
//     	TEX.LZ.NODEP.P R16, R24, 0x8, 0x1, 2D, 0x1; # [3069][005fe8]
//     	FMUL.FTZ R25, R48, R34;          # [3070][005ff0]
//     	FMUL.FTZ R5, R49, R55;           # [3071][005ff8]
//     	FMUL32I.FTZ R4, R56, 0x3fb8aa3b; # [3072][006000]
//     	RRO.EX2 R24, R6;                 # [3073][006008]
//     	FMUL.FTZ R18, R48, R41;          # [3074][006010]
//     	FMUL.FTZ R55, R45, R25;          # [3075][006018]
//     	FMUL32I.FTZ R19, R5, 0x3fb8aa3b; # [3076][006020]
//     	RRO.EX2 R57, R4;                 # [3077][006028]
//     	MUFU.EX2 R24, R24;               # [3078][006030]
//     	TEX.LZ.NODEP.P R4, R8, 0x7, 0x0, 2D, 0x7; # [3079][006038]
//     	FFMA.FTZ R8, R46, R18, R55;      # [3080][006040]
//     	FMUL32I.FTZ R56, R51, 0x3d14f209; # [3081][006048]
//     	RRO.EX2 R19, R19;                # [3082][006050]
//     	MUFU.EX2 R55, R57;               # [3083][006058]
//     	FADD.FTZ R24, -R24, 1;           # [3084][006060]
//     	MUFU.RCP R58, R56;               # [3085][006068]
//     	MUFU.EX2 R19, R19;               # [3086][006070]
//     	FMUL32I.FTZ R56, R51, 0x3a5a740e; # [3087][006078]
//     	FADD.FTZ R55, -R55, 1;           # [3088][006080]
//     	FMUL32I.FTZ R57, R51, 0.000125;  # [3089][006088]
//     	FMUL.FTZ R59, R24, R37;          # [3090][006090]
//     	FFMA.FTZ R51, R45, -R54, -R40;   # [3091][006098]
//     	MUFU.RCP R61, R56;               # [3092][0060a0]
//     	FMUL.FTZ R60, R55, R36;          # [3093][0060a8]
//     	FADD.FTZ R24, -R19, 1;           # [3094][0060b0]
//     	FMUL.FTZ R59, R59, R58;          # [3095][0060b8]
//     	FMUL.FTZ R9, R48, R38;           # [3096][0060c0]
//     	FFMA.FTZ R55, R46, -R54, -R23;   # [3097][0060c8]
//     	FMUL.FTZ R56, R51, R51;          # [3098][0060d0]
//     	MUFU.RCP R58, R57;               # [3099][0060d8]
//     	FMUL.FTZ R57, R24, R35;          # [3100][0060e0]
//     	FMUL.FTZ R60, R60, R61;          # [3101][0060e8]
//     	FFMA.FTZ R8, R47, R9, R8;        # [3102][0060f0]
//     	FFMA.FTZ R24, R47, -R54, -R39;   # [3103][0060f8]
//     	FFMA.FTZ R56, R55, R55, R56;     # [3104][006100]
//     	MOV32I R61, 0x3d981627;          # [3105][006108]
//     	@!P0 FMUL.FTZ R59, R49, R37;     # [3106][006110]
//     	F2F.SAT R19, R8;                 # [3107][006118]
//     	FFMA.FTZ R37, R24, R24, R56;     # [3108][006120]
//     	FFMA.FTZ R25, R45, -R19, R25;    # [3109][006128]
//     	FFMA.FTZ R56, R54, c[0x10][0x88], R61; # [3110][006130]
//     	FFMA.FTZ R18, R46, -R19, R18;    # [3111][006138]
//     	MUFU.RCP R17, R17;               # [3112][006140]
//     	FFMA.FTZ R56, R56, R54, c[0x10][0x8c]; # [3113][006148]
//     	FMUL.FTZ R62, R25, R25;          # [3114][006150]
//     	FMUL.FTZ R57, R57, R58;          # [3115][006158]
//     	FFMA.FTZ R54, R56, R54, c[0x10][0x90]; # [3116][006160]
//     	FFMA.FTZ R9, R47, -R19, R9;      # [3117][006168]
//     	FFMA.FTZ R58, R18, R18, R62;     # [3118][006170]
//     	FFMA.FTZ R3, R32, R3, c[0x10][0x3c]; # [3119][006178]
//     	@!P0 FMUL.FTZ R60, R49, R36;     # [3120][006180]
//     	LDL.LU R32, [0x44];              # [3121][006188]
//     	FMUL.FTZ R17, R17, R54;          # [3122][006190]
//     	@!P0 FMUL.FTZ R57, R49, R35;     # [3123][006198]
//     	FFMA.FTZ R49, R9, R9, R58;       # [3124][0061a0]
//     	LDL.LU R54, [0x2c];              # [3125][0061a8]
//     	MUFU.RSQ R35, R37;               # [3126][0061b0]
//     	MUFU.RSQ R49, R49;               # [3127][0061b8]
//     	FSET.BF.GE.FTZ.AND R30, R30, R3, PT; # [3128][0061c0]
//     	FSET.BF.GE.FTZ.AND R28, R28, R3, PT; # [3129][0061c8]
//     	MOV32I R37, 0x3cba7547;          # [3130][0061d0]
//     	MOV32I R36, 0x3e79db23;          # [3131][0061d8]
//     	FMUL.FTZ R51, R35, R51;          # [3132][0061e0]
//     	FMUL.FTZ R25, R49, R25;          # [3133][0061e8]
//     	MOV32I R56, 0x3ec6a7f0;          # [3134][0061f0]
//     	FFMA.FTZ R34, R34, R48, -R40;    # [3135][0061f8]
//     	FMUL.FTZ R18, R49, R18;          # [3136][006200]
//     	FMUL.FTZ R9, R49, R9;            # [3137][006208]
//     	FADD.FTZ R28, R30, R28;          # [3138][006210]
//     	FFMA.FTZ R37, R32, c[0x10][0x84], R37; # [3139][006218]
//     	FFMA.FTZ R36, R32, c[0x10][0x80], R36; # [3140][006220]
//     	FMUL.FTZ R49, R51, R25;          # [3141][006228]
//     	FMUL32I.FTZ R30, R54, 0x3fc90fdb; # [3142][006230]
//     	FFMA.FTZ R32, R32, c[0x10][0x7c], R56; # [3143][006238]
//     	FFMA.FTZ R25, R41, R48, -R23;    # [3144][006240]
//     	FMUL.FTZ R51, R34, R34;          # [3145][006248]
//     	FMUL.FTZ R56, R35, R55;          # [3146][006250]
//     	FFMA.FTZ R38, R38, R48, -R39;    # [3147][006258]
//     	FFMA.FTZ R55, R30, R30, c[0x10][0x98]; # [3148][006260]
//     	FFMA.FTZ R54, R25, R25, R51;     # [3149][006268]
//     	FSET.BF.GE.FTZ.AND R51, R26, R3, PT; # [3150][006270]
//     	FADD.FTZ R58, -R19, 1;           # [3151][006278]
//     	MUFU.RCP R26, R55;               # [3152][006280]
//     	FFMA.FTZ R18, R56, R18, R49;     # [3153][006288]
//     	FFMA.FTZ R55, R38, R38, R54;     # [3154][006290]
//     	FFMA.FTZ R48, R19, c[0x10][0x88], R61; # [3155][006298]
//     	MUFU.RSQ R54, R58;               # [3156][0062a0]
//     	FSET.BF.GE.FTZ.AND R56, R29, R3, PT; # [3157][0062a8]
//     	MOV R41, c[0x2][0x9c];           # [3158][0062b0]
//     	LDL.LU R58, [0x6c];              # [3159][0062b8]
//     	FSET.BF.GE.FTZ.AND R49, R27, R3, PT; # [3160][0062c0]
//     	FADD.FTZ R28, R28, R51;          # [3161][0062c8]
//     	MUFU.RSQ R29, R55;               # [3162][0062d0]
//     	FFMA.FTZ R51, R48, R19, c[0x10][0x8c]; # [3163][0062d8]
//     	FMUL.FTZ R41, R41, c[0x2][0x9c]; # [3164][0062e0]
//     	FMUL.FTZ R35, R35, R24;          # [3165][0062e8]
//     	FADD.FTZ R48, R56, R49;          # [3166][0062f0]
//     	MUFU.RCP R54, R54;               # [3167][0062f8]
//     	FFMA.FTZ R56, R51, R19, c[0x10][0x90]; # [3168][006300]
//     	MUFU.RCP R41, R41;               # [3169][006308]
//     	FMUL32I.FTZ R55, R58, 0x3fc90fdb; # [3170][006310]
//     	FMUL.FTZ R54, R54, R56;          # [3171][006318]
//     	FMUL.FTZ R24, R55, R55;          # [3172][006320]
//     	FMUL.FTZ R56, R29, R25;          # [3173][006328]
//     	FMUL.FTZ R55, R29, R34;          # [3174][006330]
//     	FMUL.FTZ R51, R30, R30;          # [3175][006338]
//     	FMUL.FTZ R41, R33, R41;          # [3176][006340]
//     	MUFU.RCP R25, R33;               # [3177][006348]
//     	FMUL.FTZ R45, R45, R55;          # [3178][006350]
//     	FMUL.FTZ R33, R29, R38;          # [3179][006358]
//     	FMUL.FTZ R55, R40, -R55;         # [3180][006360]
//     	FMNMX.FTZ R29, R54, R17, !PT;    # [3181][006368]
//     	FMUL.FTZ R38, R51, R26;          # [3182][006370]
//     	FFMA.FTZ R40, R46, R56, R45;     # [3183][006378]
//     	FFMA.FTZ R58, R30, R30, c[0x10][0x94]; # [3184][006380]
//     	FMNMX.FTZ R26, R54, R17, PT;     # [3185][006388]
//     	FFMA.FTZ R45, R23, -R56, R55;    # [3186][006390]
//     	FFMA.FTZ R40, R47, R33, R40;     # [3187][006398]
//     	RRO.SINCOS R23, R29;             # [3188][0063a0]
//     	MUFU.RCP R30, R58;               # [3189][0063a8]
//     	FFMA.FTZ R9, R35, R9, R18;       # [3190][0063b0]
//     	FMUL32I.FTZ R46, R26, 0x3f22f983; # [3191][0063b8]
//     	FMNMX.FTZ R53, R53, -c[0x10][0x3c], !PT; # [3192][0063c0]
//     	FMNMX.FTZ R8, R8, -c[0x10][0x3c], !PT; # [3193][0063c8]
//     	FMNMX.FTZ R35, R40, -c[0x10][0x3c], !PT; # [3194][0063d0]
//     	FFMA.FTZ R33, R39, -R33, R45;    # [3195][0063d8]
//     	MUFU.SIN R18, R23;               # [3196][0063e0]
//     	FMUL.FTZ R45, R46, R46;          # [3197][0063e8]
//     	FSETP.GE.FTZ.AND P0, PT, R9, RZ, PT; # [3198][0063f0]
//     	FMUL.FTZ R30, R51, R30;          # [3199][0063f8]
//     	FMNMX.FTZ R40, R53, R8, PT;      # [3200][006400]
//     	FMUL.FTZ R39, R35, R35;          # [3201][006408]
//     	RRO.SINCOS R47, R26;             # [3202][006410]
//     	FMUL.FTZ R51, R29, R26;          # [3203][006418]
//     	@!P0 FFMA.FTZ R18, R46, -R45, R18; # [3204][006420]
//     	MOV32I R49, 0x3f800000;          # [3205][006428]
//     	FADD.FTZ R26, R26, R29;          # [3206][006430]
//     	FMUL.FTZ R45, R35, R40;          # [3207][006438]
//     	FMUL.FTZ R29, R24, R39;          # [3208][006440]
//     	FMUL.FTZ R34, R24, 4;            # [3209][006448]
//     	FMUL.FTZ R58, R53, R8;           # [3210][006450]
//     	FMUL.FTZ R40, R39, R39;          # [3211][006458]
//     	MUFU.COS R46, R47;               # [3212][006460]
//     	FFMA.FTZ R23, R38, -0.5, R49;    # [3213][006468]
//     	MUFU.SIN R8, R47;                # [3214][006470]
//     	FMUL.FTZ R24, R26, 0.5;          # [3215][006478]
//     	FMUL32I.FTZ R47, R51, 0x3ecf817b; # [3216][006480]
//     	MUFU.RCP R38, R33;               # [3217][006488]
//     	MUFU.RCP R39, R29;               # [3218][006490]
//     	FMUL.FTZ R26, R40, R34;          # [3219][006498]
//     	FFMA.FTZ R53, R41, -R41, c[0x10][0xa0]; # [3220][0064a0]
//     	FADD.FTZ R29, R45, R45;          # [3221][0064a8]
//     	FFMA.FTZ R40, R35, R35, -R49;    # [3222][0064b0]
//     	MUFU.RCP R41, R46;               # [3223][0064b8]
//     	FMUL.FTZ R33, R30, 0.125;        # [3224][0064c0]
//     	FMUL.FTZ R35, R47, R47;          # [3225][0064c8]
//     	RRO.SINCOS R34, R24;             # [3226][0064d0]
//     	FMUL.FTZ R29, R29, R38;          # [3227][0064d8]
//     	FMUL.FTZ R38, R40, R39;          # [3228][0064e0]
//     	FMUL.FTZ R45, R35, R33;          # [3229][0064e8]
//     	FMUL.FTZ R8, R8, R41;            # [3230][0064f0]
//     	FSET.BF.GE.FTZ.AND R40, R31, R3, PT; # [3231][0064f8]
//     	MUFU.COS R35, R34;               # [3232][006500]
//     	FSET.BF.GE.FTZ.AND R41, R12, R3, PT; # [3233][006508]
//     	FSET.BF.GE.FTZ.AND R13, R13, R3, PT; # [3234][006510]
//     	MUFU.SIN R33, R34;               # [3235][006518]
//     	FMUL32I.FTZ R34, R38, 0x3fb8aa3b; # [3236][006520]
//     	FADD.FTZ R39, -|R9|, 1;          # [3237][006528]
//     	FADD.FTZ R38, R48, R40;          # [3238][006530]
//     	MUFU.RCP R31, R35;               # [3239][006538]
//     	FADD.FTZ R40, R41, R13;          # [3240][006540]
//     	FSET.BF.GE.FTZ.AND R35, R52, R3, PT; # [3241][006548]
//     	FSET.BF.GE.FTZ.AND R41, R7, R3, PT; # [3242][006550]
//     	FSET.BF.GE.FTZ.AND R13, R15, R3, PT; # [3243][006558]
//     	FSET.BF.GE.FTZ.AND R7, R10, R3, PT; # [3244][006560]
//     	FMUL.FTZ R12, R45, R39;          # [3245][006568]
//     	FSET.BF.GE.FTZ.AND R39, R50, R3, PT; # [3246][006570]
//     	FADD.FTZ R15, R28, R35;          # [3247][006578]
//     	FADD.FTZ R10, R7, R13;           # [3248][006580]
//     	FADD.FTZ R28, R40, R41;          # [3249][006588]
//     	FSET.BF.GE.FTZ.AND R7, R11, R3, PT; # [3250][006590]
//     	FADD.FTZ R38, R38, R39;          # [3251][006598]
//     	FSET.BF.GE.FTZ.AND R14, R14, R3, PT; # [3252][0065a0]
//     	FMUL32I.FTZ R30, R30, 0.45;      # [3253][0065a8]
//     	FADD.FTZ R11, R7, R10;           # [3254][0065b0]
//     	FFMA.FTZ R27, R59, 200, R60;     # [3255][0065b8]
//     	FADD.FTZ R13, R15, R38;          # [3256][0065c0]
//     	FADD.FTZ R14, R28, R14;          # [3257][0065c8]
//     	FSET.BF.GE.FTZ.AND R7, R16, R3, PT; # [3258][0065d0]
//     	FMUL.FTZ R10, R18, R30;          # [3259][0065d8]
//     	FMUL32I.FTZ R15, R27, 0.012015;  # [3260][0065e0]
//     	FMUL32I.FTZ R35, R27, 0.0075;    # [3261][0065e8]
//     	FADD.FTZ R13, R13, R14;          # [3262][0065f0]
//     	FADD.FTZ R11, R7, R11;           # [3263][0065f8]
//     	FMUL.FTZ R9, R9, R10;            # [3264][006600]
//     	FFMA.FTZ R15, RZ, R57, R15;      # [3265][006608]
//     	FFMA.FTZ R14, RZ, R57, R35;      # [3266][006610]
//     	FADD.FTZ R10, R11, R13;          # [3267][006618]
//     	RRO.EX2 R3, R34;                 # [3268][006620]
//     	FMUL.FTZ R13, R5, c[0x2][0x94];  # [3269][006628]
//     	FMUL32I.FTZ R15, R15, 0xbfb8aa3b; # [3270][006630]
//     	FFMA.FTZ R5, R9, R8, R23;        # [3271][006638]
//     	FMUL.FTZ R10, R10, 0.0625;       # [3272][006640]
//     	FMUL32I.FTZ R11, R14, 0xbfb8aa3b; # [3273][006648]
//     	MUFU.RCP R26, R26;               # [3274][006650]
//     	FMUL.FTZ R6, R6, c[0x2][0x98];   # [3275][006658]
//     	MUFU.EX2 R3, R3;                 # [3276][006660]
//     	FMUL.FTZ R9, R4, c[0x2][0x90];   # [3277][006668]
//     	RRO.EX2 R14, R15;                # [3278][006670]
//     	FMUL.FTZ R4, R10, R13;           # [3279][006678]
//     	RRO.EX2 R8, R11;                 # [3280][006680]
//     	FMUL.FTZ R7, R33, R31;           # [3281][006688]
//     	FMUL32I.FTZ R39, R27, 0x3cb851eb; # [3282][006690]
//     	FMUL.FTZ R6, R10, R6;            # [3283][006698]
//     	FMUL.FTZ R11, R10, R9;           # [3284][0066a0]
//     	FMNMX.FTZ R29, R29, 1, PT;       # [3285][0066a8]
//     	FMUL.FTZ R3, R3, R26;            # [3286][0066b0]
//     	FMUL.FTZ R9, R4, R36;            # [3287][0066b8]
//     	MUFU.EX2 R10, R14;               # [3288][0066c0]
//     	FFMA.FTZ R4, R12, R7, R5;        # [3289][0066c8]
//     	FFMA.FTZ R16, RZ, R57, R39;      # [3290][0066d0]
//     	LDL.LU R14, [0x28];              # [3291][0066d8]
//     	MUFU.RCP R17, R58;               # [3292][0066e0]
//     	LDL.LU R12, [0x24];              # [3293][0066e8]
//     	FMUL.FTZ R3, R29, R3;            # [3294][0066f0]
//     	LDL.LU R15, [0x20];              # [3295][0066f8]
//     	FMNMX.FTZ R24, R53, RZ, !PT;     # [3296][006700]
//     	FMUL.FTZ R5, R6, R32;            # [3297][006708]
//     	FMUL32I.FTZ R16, R16, 0xbfb8aa3b; # [3298][006710]
//     	FMUL.FTZ R11, R11, R37;          # [3299][006718]
//     	FMUL.FTZ R3, R3, R17;            # [3300][006720]
//     	FMUL.FTZ R6, R5, R24;            # [3301][006728]
//     	RRO.EX2 R16, R16;                # [3302][006730]
//     	FMUL.FTZ R9, R9, R24;            # [3303][006738]
//     	FMUL.FTZ R11, R11, R24;          # [3304][006740]
//     	FMUL.FTZ R5, R3, R1;             # [3305][006748]
//     	MUFU.EX2 R7, R8;                 # [3306][006750]
//     	FMUL32I.FTZ R4, R4, 0x3ea2f983;  # [3307][006758]
//     	FMUL.FTZ R1, R3, R2;             # [3308][006760]
//     	FMUL.FTZ R8, R9, R25;            # [3309][006768]
//     	MUFU.EX2 R13, R16;               # [3310][006770]
//     	FMUL.FTZ R3, R3, R0;             # [3311][006778]
//     	FMUL.FTZ R6, R6, R25;            # [3312][006780]
//     	FMUL.FTZ R9, R11, R25;           # [3313][006788]
//     	FFMA.FTZ R0, R14, R4, R1;        # [3314][006790]
//     	FFMA.FTZ R2, R12, R4, R5;        # [3315][006798]
//     	FMUL.FTZ R8, R8, R10;            # [3316][0067a0]
//     	FFMA.FTZ R1, R15, R4, R3;        # [3317][0067a8]
//     	FMUL.FTZ R5, R6, R7;             # [3318][0067b0]
//     	FMUL.FTZ R3, R9, R13;            # [3319][0067b8]
//     	FMUL.FTZ R2, R8, R2;             # [3320][0067c0]
//     	FMUL.FTZ R0, R5, R0;             # [3321][0067c8]
//     	FMUL.FTZ R3, R3, R1;             # [3322][0067d0]
//     	FMUL.FTZ R0, R19, R0;            # [3323][0067d8]
//     	FMUL.FTZ R1, R19, R2;            # [3324][0067e0]
//     	FMUL.FTZ R6, R44, R0;            # [3325][0067e8]
//     	FMUL.FTZ R2, R19, R3;            # [3326][0067f0]
//     	FMUL.FTZ R7, R43, R1;            # [3327][0067f8]
//     	FMUL.FTZ.S R4, R42, R2;          # [3328][006800]
//     L6808:
//     	MOV R6, RZ;                      # [3329][006808]
//     	MOV R7, RZ;                      # [3330][006810]
//     	MOV.S R4, RZ;                    # [3331][006818]
//     L6820:
//     	MOV R6, RZ;                      # [3332][006820]
//     	MOV R7, RZ;                      # [3333][006828]
//     	MOV.S R4, RZ;                    # [3334][006830]
//     L6838:
//     	MOV32I R8, 0x3f800000;           # [3335][006838]
//     	FFMA.FTZ R2, R4, c[0x10][0x9c], R8; # [3336][006840]
//     	FFMA.FTZ R1, R7, c[0x10][0x9c], R8; # [3337][006848]
//     	MUFU.RCP R5, R2;                 # [3338][006850]
//     	LDL.LU R9, [0x50];               # [3339][006858]
//     	FMUL32I.FTZ R2, R7, 0x417001d9;  # [3340][006860]
//     	LDL.LU R10, [0x48];              # [3341][006868]
//     	FFMA.FTZ R0, R6, c[0x10][0x9c], R8; # [3342][006870]
//     	LDL.LU R7, [0x38];               # [3343][006878]
//     	MUFU.RCP R3, R1;                 # [3344][006880]
//     	FMUL32I.FTZ R4, R4, 0x417001d9;  # [3345][006888]
//     	MUFU.RCP R1, R0;                 # [3346][006890]
//     	FFMA.FTZ R2, R2, R3, R9;         # [3347][006898]
//     	FMUL32I.FTZ R0, R6, 0x417001d9;  # [3348][0068a0]
//     	FFMA.FTZ R4, R4, R5, R10;        # [3349][0068a8]
//     	FFMA.FTZ R0, R0, R1, R7;         # [3350][0068b0]
//     	FFMA.FTZ R3, R2, -0.25, R8;      # [3351][0068b8]
//     	FFMA.FTZ R5, R4, -0.25, R8;      # [3352][0068c0]
//     	FFMA.FTZ R1, R0, -0.25, R8;      # [3353][0068c8]
//     	FMUL32I.FTZ R3, R3, 0x417001d9;  # [3354][0068d0]
//     	FMUL32I.FTZ R5, R5, 0x417001d9;  # [3355][0068d8]
//     	FMUL32I.FTZ R1, R1, 0x417001d9;  # [3356][0068e0]
//     	FMUL.FTZ R2, R2, 0.25;           # [3357][0068e8]
//     	MUFU.RCP R3, R3;                 # [3358][0068f0]
//     	FMUL.FTZ R4, R4, 0.25;           # [3359][0068f8]
//     	MUFU.RCP R5, R5;                 # [3360][006900]
//     	FMUL.FTZ R0, R0, 0.25;           # [3361][006908]
//     	MUFU.RCP R1, R1;                 # [3362][006910]
//     	FMUL.FTZ R22, R22, 0.25;         # [3363][006918]
//     	FMUL.FTZ R21, R21, 0.25;         # [3364][006920]
//     	FMUL.FTZ R20, R20, 0.25;         # [3365][006928]
//     	FMUL.FTZ R18, R2, R3;            # [3366][006930]
//     	FMUL.FTZ R19, R4, R5;            # [3367][006938]
//     	FMUL.FTZ.S R17, R0, R1;          # [3368][006940]
//     L6948:
//     	FMNMX.FTZ R2, R17, RZ, !PT;      # [3369][006948]
//     	FMNMX.FTZ R1, R18, RZ, !PT;      # [3370][006950]
//     	FMNMX.FTZ R0, R19, RZ, !PT;      # [3371][006958]
//     	FMNMX.FTZ R5, R22, RZ, !PT;      # [3372][006960]
//     	FMNMX.FTZ R4, R21, RZ, !PT;      # [3373][006968]
//     	FMNMX.FTZ R3, R20, RZ, !PT;      # [3374][006970]
//     	EXIT;                            # [3375][006978]
//     	END
//     END_SECTION
// END_SHADER
// 
