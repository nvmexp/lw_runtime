// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x1d326ef18267c359
//         UCODE_HASH: 0xf6edadeaeb34b775
//         POOL: APP
//         VERSION: 20
//         # USES: 11025
//         // Time: 100.909ms [6.197 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 19
//         USED_TEXTURE_BITS: 0x1
//         TEXTURE_SLOTS: 1
//         SAMPLER_SLOTS: 1
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX00_R              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x002a0a2a
//         0x00000000      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c10, 0.00000000, 1.00000000, -0.01000000, 0.25000000 ; 0x000000 0x3f800000 0xbc23d70a 0x3e800000
        def c11, 1.44269502, 0.00000000, 0.00000000, 0.00000000 ; 0x3fb8aa3b 0x000000 0x000000 0x000000
        dcl_texcoord2 v0.rgb
        dcl_texcoord3 v1.rg
        dcl_texcoord4 v2.rgb
        dcl_volume s0
        add r1.xyz, v2, -c8
        nrm r0.xyz, r1
        add r0.w, -v2.y, c5.x
        rcp r1.x, r0.y
        cmp r1.w, r0.w, c10.x, c10.y
        mul r1.y, r0.w, r1.x
        add r1.z, r0_abs.y, c10.z
        mov r0.w, c8.y
        add r0.w, -r0.w, c5.x
        cmp r1.y, r1.z, r1.y, c10.x
        mul r1.x, r1.x, r0.w
        cmp r0.w, r0.w, c10.x, c10.y
        cmp r1.z, r1.z, r1.x, c10.x
        mul r1.w, r1.w, r1.y
        mul r0.w, r0.w, r1.z
        mad r1.xyz, r1.w, -r0, v2
        mad r0.xyz, r0.w, r0, c8
        add r1.xyz, r1, -r0
        dp3 r0.w, r1, r1
        rsq r0.w, r0.w
        mul r1.xyz, r1, c10.w
        rcp r0.w, r0.w
        mul_pp r0.w, r0.w, c10.w
        add r3.xyz, r0, r1
        rcp r4.w, c6.x
        mov r0.z, c9.x
        mul r2.xyz, r0.z, c7
        mul_pp r2.w, r0.w, -c4.x
        mad r0.xyz, r3, r4.w, r2
        texld_pp r0, r0, s0
        rcp r3.w, c5.x
        mul_sat_pp r0.w, r3.y, r3.w
        add_pp r0.z, -r0.w, c10.y
        mul_pp r0.w, r0.x, r0.x
        add r3.xyz, r1, r3
        mul_pp r0.w, r0.z, r0.w
        mul_pp r4.z, r0.x, r0.w
        mul_sat_pp r0.w, r3.w, r3.y
        add_pp r1.w, -r0.w, c10.y
        mad r0.xyz, r3, r4.w, r2
        texld_pp r0, r0, s0
        mul_pp r0.w, r0.x, r0.x
        mul_pp r0.z, r2.w, r4.z
        mul_pp r0.w, r1.w, r0.w
        mul_pp r0.z, r0.z, c11.x
        mul_pp r0.w, r0.x, r0.w
        exp_pp r1.w, r0.z
        mul_pp r0.w, r2.w, r0.w
        add r3.xyz, r1, r3
        mul_pp r0.w, r0.w, c11.x
        exp_pp r4.y, r0.w
        mul_sat_pp r0.w, r3.w, r3.y
        add_pp r4.z, -r0.w, c10.y
        mad r0.xyz, r3, r4.w, r2
        texld_pp r0, r0, s0
        mul_pp r0.w, r0.x, r0.x
        mul_pp r1.w, r1.w, r4.y
        mul_pp r0.w, r4.z, r0.w
        add r3.xyz, r1, r3
        mul_pp r0.w, r0.x, r0.w
        add r1.xyz, r1, r3
        mul_pp r0.w, r2.w, r0.w
        mul_pp r4.z, r0.w, c11.x
        mul_sat_pp r0.w, r3.w, r3.y
        mad r0.xyz, r3, r4.w, r2
        add_pp r3.z, -r0.w, c10.y
        texld_pp r0, r0, s0
        mul_pp r0.w, r0.x, r0.x
        exp_pp r0.z, r4.z
        mul_pp r0.w, r3.z, r0.w
        mul_pp r1.w, r1.w, r0.z
        mul_pp r0.w, r0.x, r0.w
        mad r0.xyz, r1, r4.w, r2
        mul_pp r1.z, r2.w, r0.w
        mul_sat_pp r0.w, r3.w, r1.y
        mul_pp r1.z, r1.z, c11.x
        exp_pp r1.y, r1.z
        add_pp r1.z, -r0.w, c10.y
        texld_pp r0, r0, s0
        mul_pp r0.w, r0.x, r0.x
        mul_pp r1.w, r1.w, r1.y
        mul_pp r0.w, r1.z, r0.w
        mul_pp r0.z, r0.x, r0.w
        mov_sat r0.w, v1.y
        mul_pp r1.z, r2.w, r0.z
        mul r0, r0.w, c2.xyz
        mul_pp r1.z, r1.z, c11.x
        mad r0, c1.xyz, v1.x, r0
        exp_pp r1.z, r1.z
        mul r0, r0, c0.xyz
        mul_pp r1.w, r1.w, r1.z
        mad r0, r0, v0.xyz, -c3.xyz
        mad oC0, r1.w, r0, c3.xyz
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f000a 0x00000000 0x3f800000
//         0xbc23d70a 0x3e800000 0x05000051 0xa00f000b
//         0x3fb8aa3b 0x00000000 0x00000000 0x00000000
//         0x0200001f 0x80020005 0x90070000 0x0200001f
//         0x80030005 0x90030001 0x0200001f 0x80040005
//         0x90070002 0x0200001f 0xa0000000 0xa00f0800
//         0x03000002 0x80070001 0x90e40002 0xa1e40008
//         0x02000024 0x80070000 0x80e40001 0x03000002
//         0x80080000 0x91550002 0xa0000005 0x02000006
//         0x80010001 0x80550000 0x04000058 0x80080001
//         0x80ff0000 0xa000000a 0xa055000a 0x03000005
//         0x80020001 0x80ff0000 0x80000001 0x03000002
//         0x80040001 0x8b550000 0xa0aa000a 0x02000001
//         0x80080000 0xa0550008 0x03000002 0x80080000
//         0x81ff0000 0xa0000005 0x04000058 0x80020001
//         0x80aa0001 0x80550001 0xa000000a 0x03000005
//         0x80010001 0x80000001 0x80ff0000 0x04000058
//         0x80080000 0x80ff0000 0xa000000a 0xa055000a
//         0x04000058 0x80040001 0x80aa0001 0x80000001
//         0xa000000a 0x03000005 0x80080001 0x80ff0001
//         0x80550001 0x03000005 0x80080000 0x80ff0000
//         0x80aa0001 0x04000004 0x80070001 0x80ff0001
//         0x81e40000 0x90e40002 0x04000004 0x80070000
//         0x80ff0000 0x80e40000 0xa0e40008 0x03000002
//         0x80070001 0x80e40001 0x81e40000 0x03000008
//         0x80080000 0x80e40001 0x80e40001 0x02000007
//         0x80080000 0x80ff0000 0x03000005 0x80070001
//         0x80e40001 0xa0ff000a 0x02000006 0x80080000
//         0x80ff0000 0x03000005 0x80280000 0x80ff0000
//         0xa0ff000a 0x03000002 0x80070003 0x80e40000
//         0x80e40001 0x02000006 0x80080004 0xa0000006
//         0x02000001 0x80040000 0xa0000009 0x03000005
//         0x80070002 0x80aa0000 0xa0e40007 0x03000005
//         0x80280002 0x80ff0000 0xa1000004 0x04000004
//         0x80070000 0x80e40003 0x80ff0004 0x80e40002
//         0x03000042 0x802f0000 0x80e40000 0xa0e40800
//         0x02000006 0x80080003 0xa0000005 0x03000005
//         0x80380000 0x80550003 0x80ff0003 0x03000002
//         0x80240000 0x81ff0000 0xa055000a 0x03000005
//         0x80280000 0x80000000 0x80000000 0x03000002
//         0x80070003 0x80e40001 0x80e40003 0x03000005
//         0x80280000 0x80aa0000 0x80ff0000 0x03000005
//         0x80240004 0x80000000 0x80ff0000 0x03000005
//         0x80380000 0x80ff0003 0x80550003 0x03000002
//         0x80280001 0x81ff0000 0xa055000a 0x04000004
//         0x80070000 0x80e40003 0x80ff0004 0x80e40002
//         0x03000042 0x802f0000 0x80e40000 0xa0e40800
//         0x03000005 0x80280000 0x80000000 0x80000000
//         0x03000005 0x80240000 0x80ff0002 0x80aa0004
//         0x03000005 0x80280000 0x80ff0001 0x80ff0000
//         0x03000005 0x80240000 0x80aa0000 0xa000000b
//         0x03000005 0x80280000 0x80000000 0x80ff0000
//         0x0200000e 0x80280001 0x80aa0000 0x03000005
//         0x80280000 0x80ff0002 0x80ff0000 0x03000002
//         0x80070003 0x80e40001 0x80e40003 0x03000005
//         0x80280000 0x80ff0000 0xa000000b 0x0200000e
//         0x80220004 0x80ff0000 0x03000005 0x80380000
//         0x80ff0003 0x80550003 0x03000002 0x80240004
//         0x81ff0000 0xa055000a 0x04000004 0x80070000
//         0x80e40003 0x80ff0004 0x80e40002 0x03000042
//         0x802f0000 0x80e40000 0xa0e40800 0x03000005
//         0x80280000 0x80000000 0x80000000 0x03000005
//         0x80280001 0x80ff0001 0x80550004 0x03000005
//         0x80280000 0x80aa0004 0x80ff0000 0x03000002
//         0x80070003 0x80e40001 0x80e40003 0x03000005
//         0x80280000 0x80000000 0x80ff0000 0x03000002
//         0x80070001 0x80e40001 0x80e40003 0x03000005
//         0x80280000 0x80ff0002 0x80ff0000 0x03000005
//         0x80240004 0x80ff0000 0xa000000b 0x03000005
//         0x80380000 0x80ff0003 0x80550003 0x04000004
//         0x80070000 0x80e40003 0x80ff0004 0x80e40002
//         0x03000002 0x80240003 0x81ff0000 0xa055000a
//         0x03000042 0x802f0000 0x80e40000 0xa0e40800
//         0x03000005 0x80280000 0x80000000 0x80000000
//         0x0200000e 0x80240000 0x80aa0004 0x03000005
//         0x80280000 0x80aa0003 0x80ff0000 0x03000005
//         0x80280001 0x80ff0001 0x80aa0000 0x03000005
//         0x80280000 0x80000000 0x80ff0000 0x04000004
//         0x80070000 0x80e40001 0x80ff0004 0x80e40002
//         0x03000005 0x80240001 0x80ff0002 0x80ff0000
//         0x03000005 0x80380000 0x80ff0003 0x80550001
//         0x03000005 0x80240001 0x80aa0001 0xa000000b
//         0x0200000e 0x80220001 0x80aa0001 0x03000002
//         0x80240001 0x81ff0000 0xa055000a 0x03000042
//         0x802f0000 0x80e40000 0xa0e40800 0x03000005
//         0x80280000 0x80000000 0x80000000 0x03000005
//         0x80280001 0x80ff0001 0x80550001 0x03000005
//         0x80280000 0x80aa0001 0x80ff0000 0x03000005
//         0x80240000 0x80000000 0x80ff0000 0x02000001
//         0x80180000 0x90550001 0x03000005 0x80240001
//         0x80ff0002 0x80aa0000 0x03000005 0x800f0000
//         0x80ff0000 0xa0a40002 0x03000005 0x80240001
//         0x80aa0001 0xa000000b 0x04000004 0x800f0000
//         0xa0a40001 0x90000001 0x80e40000 0x0200000e
//         0x80240001 0x80aa0001 0x03000005 0x800f0000
//         0x80e40000 0xa0a40000 0x03000005 0x80280001
//         0x80ff0001 0x80aa0001 0x04000004 0x800f0000
//         0x80e40000 0x90a40000 0xa1a40003 0x04000004
//         0x800f0800 0x80ff0001 0x80e40000 0xa0a40003
//         0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x43427b9b // 194.48283388
//         COP_CONST[1]: 0x4406ea0d // 539.65704344
//         COP_CONST[2]: 0x3dda3c21 // 0.10656000
//         COP_CONST[3]: 0xbdf583a4 // -0.11988000
//         COP_CONST[4]: 0x362720b6 // 0.00000249
//         COP_CONST[5]: 0x36760b6c // 0.00000367
//         COP_CONST[6]: 0x370c49f8 // 0.00000836
//         COP_CONST[7]: 0xbe24a139 // -0.16077128
//         COP_CONST[8]: 0xbe42eabb // -0.19034856
//         COP_CONST[9]: 0xbe5fb212 // -0.21845272
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x497a9924 // 1026450.25000000
//         # USER FLOAT CONST: c[6][251] = 0x49097fee // 563198.87500000
//         # USER FLOAT CONST: c[6][252] = 0x48388f86 // 188990.09375000
//         # USER FLOAT CONST: c[6][254] = 0x362720b6 // 0.00000249
//         # USER FLOAT CONST: c[6][255] = 0x36760b6c // 0.00000367
//         # USER FLOAT CONST: c[6][256] = 0x370c49f8 // 0.00000836
//         # USER FLOAT CONST: c[6][258] = 0x1d11886f // 0.00000000
//         # USER FLOAT CONST: c[6][259] = 0x1d1d15c4 // 0.00000000
//         # USER FLOAT CONST: c[6][260] = 0x1d671ae5 // 0.00000000
//         # USER FLOAT CONST: c[6][262] = 0x3e24a139 // 0.16077128
//         # USER FLOAT CONST: c[6][263] = 0x3e42eabb // 0.19034856
//         # USER FLOAT CONST: c[6][264] = 0x3e5fb212 // 0.21845272
//         # USER FLOAT CONST: c[6][266] = 0x3aeaa8cc // 0.00179031
//         # USER FLOAT CONST: c[6][270] = 0x43f1335e // 482.40130616
//         # USER FLOAT CONST: c[6][274] = 0x4496a723 // 1205.22302246
//         # USER FLOAT CONST: c[6][278] = 0x3c1374bc // 0.00900000
//         # USER FLOAT CONST: c[6][279] = 0xbc1374bc // -0.00900000
//         # USER FLOAT CONST: c[6][280] = 0x3c03126f // 0.00800000
//         # USER FLOAT CONST: c[6][282] = 0x4406ea0d // 539.65704344
//         # USER FLOAT CONST: c[6][284] = 0x43427b9b // 194.48283388
//         # USER FLOAT CONST: c[6][286] = 0x41551eb8 // 13.31999970
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@1026450.25000000
//         ##    ~c0.y -> c[6][251] = 100.00%@563198.87500000
//         ##    ~c0.z -> c[6][252] = 100.00%@188990.09375000
//         ##    ~c1.x -> c[6][254] = 100.00%@0.00000249
//         ##    ~c1.y -> c[6][255] = 100.00%@0.00000367
//         ##    ~c1.z -> c[6][256] = 100.00%@0.00000836
//         ##    ~c2.x -> c[6][258] = 100.00%@0.00000000
//         ##    ~c2.y -> c[6][259] = 100.00%@0.00000000
//         ##    ~c2.z -> c[6][260] = 100.00%@0.00000000
//         ##    ~c3.x -> c[6][262] = 100.00%@0.16077128
//         ##    ~c3.y -> c[6][263] = 100.00%@0.19034856
//         ##    ~c3.z -> c[6][264] = 100.00%@0.21845272
//         ##    ~c4.x -> c[6][266] = 100.00%@0.00179031
//         ##    ~c5.x -> c[6][270] = 100.00%@482.40130616
//         ##    ~c6.x -> c[6][274] = 100.00%@1205.22302246
//         ##    ~c7.x -> c[6][278] = 100.00%@0.00900000
//         ##    ~c7.y -> c[6][279] = 100.00%@-0.00900000
//         ##    ~c7.z -> c[6][280] = 100.00%@0.00800000
//         ##    ~c8.x -> c[6][282] = 100.00%@539.65704344
//         ##     c8.y -> c[6][283] = 88.68%@161.83779904 11.32%@-161.83779904
//         ##    ~c8.z -> c[6][284] = 100.00%@194.48283388
//         ##    ~c9.x -> c[6][286] = 100.00%@13.31999970
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,3D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,1024x1024,A16B16G16R16
//         STAGEINFO:(0x0,3D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x128,1/0,Y8,0,0,0), 0x00000000,0x00002b11
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "ATTR02")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 1 : 
//          (attr 1 3 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r44, -c[6][258]
//         movr r44.x, -constant(539.65704344, 539.65704344, 539.65704344, 539.65704344).x
//         movr r44.z, -constant(194.48283388, 194.48283388, 194.48283388, 194.48283388).x
//         addr r6.xyz, v3, r44
//         nrmr r5.xyz, r6
//         movr r44, c[6][255].x
//         movr r44.x, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         movr r44.y, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         movr r44.z, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         movr r44.w, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         addr r5.w, -v3.y, r44
//         rcpr r6.x, r5.y
//         cmpr r6.w, r5.w, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).x, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).y
//         mulr r6.y, r5.w, r6.x
//         addr r6.z, |r5.y|, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).z
//         movr r5.w, c[6][258].y
//         movr r44, c[6][255].x
//         movr r44.x, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         movr r44.y, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         movr r44.z, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         movr r44.w, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         addr r5.w, -r5.w, r44
//         cmpr r6.y, r6.z, r6.y, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).x
//         mulr r6.x, r6.x, r5.w
//         cmpr r5.w, r5.w, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).x, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).y
//         cmpr r6.z, r6.z, r6.x, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).x
//         mulr r6.w, r6.w, r6.y
//         mulr r5.w, r5.w, r6.z
//         madr r6.xyz, r6.w, -r5, v3
//         movr r43, c[6][258]
//         movr r43.x, constant(539.65704344, 539.65704344, 539.65704344, 539.65704344).x
//         movr r43.z, constant(194.48283388, 194.48283388, 194.48283388, 194.48283388).x
//         madr r5.xyz, r5.w, r5, r43
//         addr r6.xyz, r6, -r5
//         dp3r r5.w, r6, r6
//         rsqr r5.w, |r5.w|
//         mulr r6.xyz, r6, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).w
//         rcpr r5.w, r5.w
//         mulh r5.w, r5.w, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).w
//         addr r8.xyz, r5, r6
//         movr r45, c[6][256].x
//         movr r45.x, constant(1205.22302246, 1205.22302246, 1205.22302246, 1205.22302246).x
//         movr r45.y, constant(1205.22302246, 1205.22302246, 1205.22302246, 1205.22302246).x
//         movr r45.z, constant(1205.22302246, 1205.22302246, 1205.22302246, 1205.22302246).x
//         movr r45.w, constant(1205.22302246, 1205.22302246, 1205.22302246, 1205.22302246).x
//         rcpr r9.w, r45
//         movr r45, c[6][259].x
//         movr r45.x, constant(13.31999970, 13.31999970, 13.31999970, 13.31999970).x
//         movr r45.y, constant(13.31999970, 13.31999970, 13.31999970, 13.31999970).x
//         movr r45.z, constant(13.31999970, 13.31999970, 13.31999970, 13.31999970).x
//         movr r45.w, constant(13.31999970, 13.31999970, 13.31999970, 13.31999970).x
//         movr r5.z, r45
//         movr r44, c[6][257]
//         movr r44.x, constant(0.00900000, 0.00900000, 0.00900000, 0.00900000).x
//         movr r44.y, constant(-0.00900000, -0.00900000, -0.00900000, -0.00900000).x
//         movr r44.z, constant(0.00800000, 0.00800000, 0.00800000, 0.00800000).x
//         mulr r7.xyz, r5.z, r44
//         movr r44, -c[6][254].x
//         movr r44.x, -constant(0.00179031, 0.00179031, 0.00179031, 0.00179031).x
//         movr r44.y, -constant(0.00179031, 0.00179031, 0.00179031, 0.00179031).x
//         movr r44.z, -constant(0.00179031, 0.00179031, 0.00179031, 0.00179031).x
//         movr r44.w, -constant(0.00179031, 0.00179031, 0.00179031, 0.00179031).x
//         mulh r7.w, r5.w, r44
//         madr r5.xyz, r8, r9.w, r7
//         texh r5, r5.xyzz, #0, #0, 3D
//         movr r45, c[6][255].x
//         movr r45.x, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         movr r45.y, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         movr r45.z, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         movr r45.w, constant(482.40130616, 482.40130616, 482.40130616, 482.40130616).x
//         rcpr r8.w, r45
//         mulh_sat r5.w, r8.y, r8.w
//         addh r5.z, -r5.w, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).y
//         mulh r5.w, r5.x, r5.x
//         addr r8.xyz, r6, r8
//         mulh r5.w, r5.z, r5.w
//         mulh r9.z, r5.x, r5.w
//         mulh_sat r5.w, r8.w, r8.y
//         addh r6.w, -r5.w, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).y
//         madr r5.xyz, r8, r9.w, r7
//         texh r5, r5.xyzz, #0, #0, 3D
//         mulh r5.w, r5.x, r5.x
//         mulh r5.z, r7.w, r9.z
//         mulh r5.w, r6.w, r5.w
//         mulh r5.z, r5.z, constant(1.44269504, 0.00000000, 0.00000000, 0.00000000).x
//         mulh r5.w, r5.x, r5.w
//         ex2h r6.w, r5.z
//         mulh r5.w, r7.w, r5.w
//         addr r8.xyz, r6, r8
//         mulh r5.w, r5.w, constant(1.44269504, 0.00000000, 0.00000000, 0.00000000).x
//         ex2h r9.y, r5.w
//         mulh_sat r5.w, r8.w, r8.y
//         addh r9.z, -r5.w, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).y
//         madr r5.xyz, r8, r9.w, r7
//         texh r5, r5.xyzz, #0, #0, 3D
//         mulh r5.w, r5.x, r5.x
//         mulh r6.w, r6.w, r9.y
//         mulh r5.w, r9.z, r5.w
//         addr r8.xyz, r6, r8
//         mulh r5.w, r5.x, r5.w
//         addr r6.xyz, r6, r8
//         mulh r5.w, r7.w, r5.w
//         mulh r9.z, r5.w, constant(1.44269504, 0.00000000, 0.00000000, 0.00000000).x
//         mulh_sat r5.w, r8.w, r8.y
//         madr r5.xyz, r8, r9.w, r7
//         addh r8.z, -r5.w, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).y
//         texh r5, r5.xyzz, #0, #0, 3D
//         mulh r5.w, r5.x, r5.x
//         ex2h r5.z, r9.z
//         mulh r5.w, r8.z, r5.w
//         mulh r6.w, r6.w, r5.z
//         mulh r5.w, r5.x, r5.w
//         madr r5.xyz, r6, r9.w, r7
//         mulh r6.z, r7.w, r5.w
//         mulh_sat r5.w, r8.w, r6.y
//         mulh r6.z, r6.z, constant(1.44269504, 0.00000000, 0.00000000, 0.00000000).x
//         ex2h r6.y, r6.z
//         addh r6.z, -r5.w, constant(0.00000000, 1.00000000, -0.01000000, 0.25000000).y
//         texh r5, r5.xyzz, #0, #0, 3D
//         mulh r5.w, r5.x, r5.x
//         mulh r6.w, r6.w, r6.y
//         mulh r5.w, r6.z, r5.w
//         mulh r5.z, r5.x, r5.w
//         movr_sat r5.w, v2.y
//         mulh r6.z, r7.w, r5.z
//         movr r44, c[6][252].xyzz
//         movr r44.x, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.y, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.z, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         movr r44.w, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000).x
//         mulr r5, r5.w, r44
//         mulh r6.z, r6.z, constant(1.44269504, 0.00000000, 0.00000000, 0.00000000).x
//         movr r45, c[6][251].xyzz
//         movr r45.x, constant(0.00000249, 0.00000249, 0.00000249, 0.00000249).x
//         movr r45.y, constant(0.00000367, 0.00000367, 0.00000367, 0.00000367).x
//         movr r45.z, constant(0.00000836, 0.00000836, 0.00000836, 0.00000836).x
//         movr r45.w, constant(0.00000836, 0.00000836, 0.00000836, 0.00000836).x
//         madr r5, r45, v2.x, r5
//         ex2h r6.z, r6.z
//         movr r44, c[6][250].xyzz
//         movr r44.x, constant(1026450.25000000, 1026450.25000000, 1026450.25000000, 1026450.25000000).x
//         movr r44.y, constant(563198.87500000, 563198.87500000, 563198.87500000, 563198.87500000).x
//         movr r44.z, constant(188990.09375000, 188990.09375000, 188990.09375000, 188990.09375000).x
//         movr r44.w, constant(188990.09375000, 188990.09375000, 188990.09375000, 188990.09375000).x
//         mulr r5, r5, r44
//         mulh r6.w, r6.w, r6.z
//         movr r43, -c[6][253].xyzz
//         movr r43.x, -constant(0.16077128, 0.16077128, 0.16077128, 0.16077128).x
//         movr r43.y, -constant(0.19034856, 0.19034856, 0.19034856, 0.19034856).x
//         movr r43.z, -constant(0.21845272, 0.21845272, 0.21845272, 0.21845272).x
//         movr r43.w, -constant(0.21845272, 0.21845272, 0.21845272, 0.21845272).x
//         madr r5, r5, v1.xyzz, r43
//         movr r43, c[6][253].xyzz
//         movr r43.x, constant(0.16077128, 0.16077128, 0.16077128, 0.16077128).x
//         movr r43.y, constant(0.19034856, 0.19034856, 0.19034856, 0.19034856).x
//         movr r43.z, constant(0.21845272, 0.21845272, 0.21845272, 0.21845272).x
//         movr r43.w, constant(0.21845272, 0.21845272, 0.21845272, 0.21845272).x
//         madr r0, r6.w, r5, r43
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	MOV32I R8, 0x43f1335e;           # [  0][000000]
//     	IPA.PASS R0, a[0x7c];            # [  1][000008] POSITION_W
//     	MUFU.RCP R4, R0;                 # [  2][000010]
//     	FADD.FTZ R14, R8, -c[0x6][0x1024]; # [  3][000018]
//     	FCMP.GE R8, RZ, 0x3f800, R14;    # [  4][000020]
//     	IPA.SC R1, a[0x320], R4;         # [  5][000028] TEX2
//     	FADD32I.FTZ R3, R1, 0xc406ea0d;  # [  6][000030]
//     	IPA.SC R0, a[0x324], R4;         # [  7][000038] FIXED_FNC_TEXTURE_2_T
//     	FMUL.FTZ R7, R3, R3;             # [  8][000040]
//     	IPA.SC R2, a[0x328], R4;         # [  9][000048] FIXED_FNC_TEXTURE_2_R
//     	FADD.FTZ R5, R0, -c[0x6][0x1024]; # [ 10][000050]
//     	FADD32I.FTZ R6, R2, 0xc3427b9b;  # [ 11][000058]
//     	FFMA.FTZ R7, R5, R5, R7;         # [ 12][000060]
//     	FADD32I.FTZ R9, -R0, 0x43f1335e; # [ 13][000068]
//     	FFMA.FTZ R7, R6, R6, R7;         # [ 14][000070]
//     	MOV32I R10, 0x3a5981b3;          # [ 15][000078]
//     	MUFU.RSQ R7, R7;                 # [ 16][000080]
//     	FMUL.FTZ R5, R5, R7;             # [ 17][000088]
//     	FMUL.FTZ R6, R6, R7;             # [ 18][000090]
//     	MUFU.RCP R12, R5;                # [ 19][000098]
//     	FADD32I.FTZ R11, |R5|, -0.01;    # [ 20][0000a0]
//     	FMUL.FMZ R13, R9, R12;           # [ 21][0000a8]
//     	FMUL.FMZ R14, R12, R14;          # [ 22][0000b0]
//     	FCMP.GE R9, RZ, 0x3f800, R9;     # [ 23][0000b8]
//     	FCMP.GE R12, R13, RZ, R11;       # [ 24][0000c0]
//     	FMUL.FTZ R3, R3, R7;             # [ 25][0000c8]
//     	FCMP.GE R11, R14, RZ, R11;       # [ 26][0000d0]
//     	FMUL.FMZ R9, R9, R12;            # [ 27][0000d8]
//     	FMUL.FMZ R7, R8, R11;            # [ 28][0000e0]
//     	FFMA.FMZ R8, R9, -R6, R2;        # [ 29][0000e8]
//     	FFMA.FMZ R2, R9, -R5, R0;        # [ 30][0000f0]
//     	FFMA.FMZ R6, R7, R6, c[0x9][0x0]; # [ 31][0000f8]
//     	FFMA.FMZ R0, R9, -R3, R1;        # [ 32][000100]
//     	FFMA.FMZ R5, R7, R5, c[0x6][0x1024]; # [ 33][000108]
//     	FFMA.FMZ R1, R7, R3, c[0x9][0x4]; # [ 34][000110]
//     	FADD.FTZ R8, R8, -R6;            # [ 35][000118]
//     	FADD.FTZ R3, R2, -R5;            # [ 36][000120]
//     	FADD.FTZ R9, R0, -R1;            # [ 37][000128]
//     	FFMA.FTZ R12, R8, 0.25, R6;      # [ 38][000130]
//     	FFMA.FTZ R7, R3, 0.25, R5;       # [ 39][000138]
//     	FFMA.FTZ R11, R9, 0.25, R1;      # [ 40][000140]
//     	FFMA.FMZ R2, R12, R10, c[0x9][0x8]; # [ 41][000148]
//     	FFMA.FMZ R1, R7, R10, c[0x9][0xc]; # [ 42][000150]
//     	FFMA.FMZ R0, R11, R10, -c[0x9][0xc]; # [ 43][000158]
//     	FFMA.FTZ R13, R8, 0.25, R12;     # [ 44][000160]
//     	TEX.NODEP.T R6, R0, 0x0, 0x0, 3D, 0x1; # [ 45][000168]
//     	FFMA.FTZ R5, R3, 0.25, R7;       # [ 46][000170]
//     	FFMA.FTZ R12, R9, 0.25, R11;     # [ 47][000178]
//     	FFMA.FMZ R2, R13, R10, c[0x9][0x8]; # [ 48][000180]
//     	FFMA.FMZ R1, R5, R10, c[0x9][0xc]; # [ 49][000188]
//     	FFMA.FMZ R0, R12, R10, -c[0x9][0xc]; # [ 50][000190]
//     	FFMA.FTZ R14, R8, 0.25, R13;     # [ 51][000198]
//     	FFMA.FTZ R13, R9, 0.25, R12;     # [ 52][0001a0]
//     	TEX.NODEP.T R11, R0, 0x0, 0x0, 3D, 0x1; # [ 53][0001a8]
//     	FFMA.FTZ R12, R3, 0.25, R5;      # [ 54][0001b0]
//     	FFMA.FMZ R2, R14, R10, c[0x9][0x8]; # [ 55][0001b8]
//     	FFMA.FMZ R0, R13, R10, -c[0x9][0xc]; # [ 56][0001c0]
//     	FFMA.FMZ R1, R12, R10, c[0x9][0xc]; # [ 57][0001c8]
//     	FFMA.FTZ R15, R8, 0.25, R14;     # [ 58][0001d0]
//     	FFMA.FTZ R16, R9, 0.25, R13;     # [ 59][0001d8]
//     	FFMA.FTZ R13, R3, 0.25, R12;     # [ 60][0001e0]
//     	TEX.NODEP.T R14, R0, 0x0, 0x0, 3D, 0x1; # [ 61][0001e8]
//     	FFMA.FMZ R2, R15, R10, c[0x9][0x8]; # [ 62][0001f0]
//     	FFMA.FMZ R0, R16, R10, -c[0x9][0xc]; # [ 63][0001f8]
//     	FFMA.FMZ R1, R13, R10, c[0x9][0xc]; # [ 64][000200]
//     	FFMA.FTZ R17, R9, 0.25, R16;     # [ 65][000208]
//     	FFMA.FTZ R18, R8, 0.25, R15;     # [ 66][000210]
//     	FFMA.FTZ R16, R3, 0.25, R13;     # [ 67][000218]
//     	FMUL32I.FMZ.SAT R7, R7, 0x3b07da8c; # [ 68][000220]
//     	TEX.NODEP.T R15, R0, 0x0, 0x0, 3D, 0x1; # [ 69][000228]
//     	FFMA.FMZ R2, R18, R10, c[0x9][0x8]; # [ 70][000230]
//     	FFMA.FMZ R0, R17, R10, -c[0x9][0xc]; # [ 71][000238]
//     	FFMA.FMZ R1, R16, R10, c[0x9][0xc]; # [ 72][000240]
//     	FMUL32I.FMZ.SAT R5, R5, 0x3b07da8c; # [ 73][000248]
//     	FADD.FTZ R7, -R7, 1;             # [ 74][000250]
//     	TEX.NODEP.P R0, R0, 0x0, 0x0, 3D, 0x1; # [ 75][000258]
//     	FMUL.FTZ R1, R9, R9;             # [ 76][000260]
//     	IPA.SC R2, a[0x314], R4;         # [ 77][000268] FIXED_FNC_TEXTURE_1_T
//     	FFMA.FTZ R9, R3, R3, R1;         # [ 78][000270]
//     	IPA.SC R10, a[0x310], R4;        # [ 79][000278] TEX1
//     	F2F.SAT R2, R2;                  # [ 80][000280]
//     	FFMA.FTZ R9, R8, R8, R9;         # [ 81][000288]
//     	FMUL32I.FMZ R1, R2, 0x1d11886f;  # [ 82][000290]
//     	FMUL32I.FMZ R3, R2, 3.05865e-021; # [ 83][000298]
//     	FMUL32I.FMZ R2, R2, 0x1d1d15c4;  # [ 84][0002a0]
//     	FFMA.FMZ R1, R10, c[0x9][0x10], R1; # [ 85][0002a8]
//     	FFMA.FMZ R2, R10, c[0x9][0x14], R2; # [ 86][0002b0]
//     	MUFU.RSQ R17, |R9|;              # [ 87][0002b8]
//     	FFMA.FMZ R10, R10, c[0x9][0x18], R3; # [ 88][0002c0]
//     	FMUL32I.FMZ.SAT R12, R12, 0x3b07da8c; # [ 89][0002c8]
//     	FMUL32I.FMZ R9, R10, 0x48388f86; # [ 90][0002d0]
//     	MUFU.RCP R17, R17;               # [ 91][0002d8]
//     	FADD.FTZ R10, -R5, 1;            # [ 92][0002e0]
//     	FMUL32I.FMZ.SAT R18, R13, 0x3b07da8c; # [ 93][0002e8]
//     	FADD.FTZ R5, -R12, 1;            # [ 94][0002f0]
//     	IPA.SC R3, a[0x300], R4;         # [ 95][0002f8] TEX0
//     	FMUL32I.FMZ R1, R1, 0x497a9924;  # [ 96][000300]
//     	FMUL.FMZ R8, R6, R6;             # [ 97][000308]
//     	FMUL.FMZ R8, R7, R8;             # [ 98][000310]
//     	FMUL.FMZ R12, R6, R8;            # [ 99][000318]
//     	IPA.SC R7, a[0x304], R4;         # [100][000320] FIXED_FNC_TEXTURE_0_T
//     	FMUL.FMZ R8, R11, R11;           # [101][000328]
//     	FMUL32I.FMZ R6, R17, 0xb9eaa8cc; # [102][000330]
//     	FMUL.FMZ R13, R10, R8;           # [103][000338]
//     	FMUL.FMZ R10, R6, R12;           # [104][000340]
//     	FADD.FTZ R8, -R18, 1;            # [105][000348]
//     	FMUL.FMZ R12, R11, R13;          # [106][000350]
//     	IPA.SC R4, a[0x308], R4;         # [107][000358] FIXED_FNC_TEXTURE_0_R
//     	FMUL32I.FMZ.SAT R13, R16, 0x3b07da8c; # [108][000360]
//     	FMUL32I.FMZ R11, R10, 0x3fb8aa3b; # [109][000368]
//     	FMUL.FMZ R12, R6, R12;           # [110][000370]
//     	FADD.FTZ R10, -R13, 1;           # [111][000378]
//     	FMUL.FMZ R13, R14, R14;          # [112][000380]
//     	FMUL32I.FMZ R12, R12, 0x3fb8aa3b; # [113][000388]
//     	RRO.EX2 R12, R12;                # [114][000390]
//     	FMUL.FMZ R13, R5, R13;           # [115][000398]
//     	FMUL.FMZ R16, R15, R15;          # [116][0003a0]
//     	MUFU.EX2 R5, R12;                # [117][0003a8]
//     	FMUL.FMZ R12, R14, R13;          # [118][0003b0]
//     	RRO.EX2 R11, R11;                # [119][0003b8]
//     	FMUL.FMZ R13, R8, R16;           # [120][0003c0]
//     	FMUL.FMZ R14, R0, R0;            # [121][0003c8]
//     	FMUL.FMZ R8, R6, R12;            # [122][0003d0]
//     	MUFU.EX2 R11, R11;               # [123][0003d8]
//     	FMUL.FMZ R12, R15, R13;          # [124][0003e0]
//     	FMUL32I.FMZ R8, R8, 0x3fb8aa3b;  # [125][0003e8]
//     	FMUL.FMZ R13, R10, R14;          # [126][0003f0]
//     	FMUL.FMZ R10, R6, R12;           # [127][0003f8]
//     	FMUL.FMZ R12, R0, R13;           # [128][000400]
//     	RRO.EX2 R0, R8;                  # [129][000408]
//     	FMUL32I.FMZ R8, R10, 0x3fb8aa3b; # [130][000410]
//     	FMUL.FMZ R10, R6, R12;           # [131][000418]
//     	RRO.EX2 R8, R8;                  # [132][000420]
//     	MUFU.EX2 R6, R0;                 # [133][000428]
//     	FMUL32I.FMZ R10, R10, 0x3fb8aa3b; # [134][000430]
//     	FMUL.FMZ R0, R11, R5;            # [135][000438]
//     	MUFU.EX2 R5, R8;                 # [136][000440]
//     	FMUL.FMZ R0, R0, R6;             # [137][000448]
//     	RRO.EX2 R8, R10;                 # [138][000450]
//     	FMUL32I.FMZ R6, R2, 0x49097fee;  # [139][000458]
//     	MUFU.EX2 R2, R8;                 # [140][000460]
//     	FMUL.FMZ R0, R0, R5;             # [141][000468]
//     	FFMA.FMZ R5, R9, R4, c[0x9][0x24]; # [142][000470]
//     	FMUL.FMZ R0, R0, R2;             # [143][000478]
//     	FFMA.FMZ R4, R6, R7, c[0x9][0x20]; # [144][000480]
//     	FFMA.FMZ R2, R1, R3, c[0x9][0x1c]; # [145][000488]
//     	FFMA.FMZ R3, R0, R5, -c[0x9][0x24]; # [146][000490]
//     	FFMA.FMZ R1, R0, R4, -c[0x9][0x20]; # [147][000498]
//     	FFMA.FMZ R0, R0, R2, -c[0x9][0x1c]; # [148][0004a0]
//     	MOV R2, R3;                      # [149][0004a8]
//     	EXIT;                            # [150][0004b0]
//     	END
//     END_SECTION
// END_SHADER
// 
