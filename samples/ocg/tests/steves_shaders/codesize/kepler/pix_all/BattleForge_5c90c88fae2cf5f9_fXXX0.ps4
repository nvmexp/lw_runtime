// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x5c90c88fae2cf5f9
//         FINGERPRINTER_HASH: 0x1ca49b2a29e7668c
//         UCODE_HASH: 0x7ff0a41b362fe764
//         POOL: APP
//         VERSION: 20
//         # USES: 211
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 0
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 12
//         TEXTURE_SLOTS: 1
//         SAMPLER_SLOTS: 1
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             GENERIC01_X          PERSPECTIVE
//             GENERIC01_Y          PERSPECTIVE
//             GENERIC02_X          PERSPECTIVE
//             GENERIC02_Y          PERSPECTIVE
//             GENERIC03_X          PERSPECTIVE
//             GENERIC03_Y          PERSPECTIVE
//             GENERIC04_X          PERSPECTIVE
//             GENERIC04_Y          PERSPECTIVE
//             GENERIC05_X          PERSPECTIVE
//             GENERIC05_Y          PERSPECTIVE
//             GENERIC06_X          PERSPECTIVE
//             GENERIC06_Y          PERSPECTIVE
//             GENERIC07_X          PERSPECTIVE
//             GENERIC07_Y          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_4_0
        dcl_input_ps v1.xy, linear
        dcl_input_ps v2.xy, linear
        dcl_input_ps v3.xy, linear
        dcl_input_ps v4.xy, linear
        dcl_input_ps v5.xy, linear
        dcl_input_ps v6.xy, linear
        dcl_input_ps v7.xy, linear
        dcl_output o0.xyzw
        dcl_constantbuffer cb0[1].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_temps 2 
        sample r0.xyzw, v2.xyxx, t0.xyzw, s0
        sample r1.xyzw, v1.xyxx, t0.xyzw, s0
        mul r0.y, r1.x, cb0[0].x
        mad r0.x, r0.x, cb0[0].x, -r0.y
        mul r0.x, r0.x, l(1.44269502)
        exp r0.x, r0.x
        mad r0.x, r0.x, l(0.06100000), l(0.00600000)
        log r0.x, r0.x
        mad r0.x, r0.x, l(0.69314718), r0.y
        sample r1.xyzw, v3.xyxx, t0.xyzw, s0
        mad r0.y, r1.x, cb0[0].x, -r0.x
        mul r0.y, r0.y, l(1.44269502)
        exp r0.y, r0.y
        mad r0.y, r0.y, l(0.24200000), l(1.00000000)
        log r0.y, r0.y
        mad r0.x, r0.y, l(0.69314718), r0.x
        sample r1.xyzw, v4.xyxx, t0.xyzw, s0
        mad r0.y, r1.x, cb0[0].x, -r0.x
        add r0.z, r1.x, cb0[0].z
        mul r0.y, r0.y, l(1.44269502)
        exp r0.y, r0.y
        mad r0.y, r0.y, l(0.38200000), l(1.00000000)
        log r0.y, r0.y
        mad r0.x, r0.y, l(0.69314718), r0.x
        sample r1.xyzw, v5.xyxx, t0.xyzw, s0
        mad r0.y, r1.x, cb0[0].x, -r0.x
        mul r0.y, r0.y, l(1.44269502)
        exp r0.y, r0.y
        mad r0.y, r0.y, l(0.24200000), l(1.00000000)
        log r0.y, r0.y
        mad r0.x, r0.y, l(0.69314718), r0.x
        sample r1.xyzw, v6.xyxx, t0.xyzw, s0
        mad r0.y, r1.x, cb0[0].x, -r0.x
        mul r0.y, r0.y, l(1.44269502)
        exp r0.y, r0.y
        mad r0.y, r0.y, l(0.06100000), l(1.00000000)
        log r0.y, r0.y
        mad r0.x, r0.y, l(0.69314718), r0.x
        sample r1.xyzw, v7.xyxx, t0.xyzw, s0
        mad r0.y, r1.x, cb0[0].x, -r0.x
        mul r0.y, r0.y, l(1.44269502)
        exp r0.y, r0.y
        mad r0.y, r0.y, l(0.00600000), l(1.00000000)
        log r0.y, r0.y
        mad r0.x, r0.y, l(0.69314718), r0.x
        mul r0.x, r0.x, cb0[0].y
        min o0.xyzw, r0.zzzz, r0.xxxx
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x43af54fb // 350.663910
//         COP_CONST[1]: 0x3d79db23 // 0.061000
//         COP_CONST[2]: 0x3f317218 // 0.693147
//         COP_CONST[3]: 0x3e77ced9 // 0.242000
//         COP_CONST[4]: 0x3ec39581 // 0.382000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][0] = 0x43af54fb // 350.663910
//         USER_CONST: c[0][1] = 0x3b3ae426 // 0.002852
//         USER_CONST: c[0][2] = 0x3d4ccccd // 0.050000
//     END_SECTION
//     # Exelwtion Time: 137.478ms [6.497 percent]
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][0] = 100.00%@350.66390991
//                 ~c[0][1] = 100.00%@0.00285173
//                 ~c[0][2] = 100.00%@0.05000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x800, height=0x800, mips=0x1, DXGI_FORMAT_R32_FLOAT
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=0.000000, maxLOD=340282346638528860000000000000000000000.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R2, R0;                 # [  1][000008]
//     	IPA R1, a[0x94], R2;             # [  2][000010] GENERIC_ATTRIBUTE_01_Y
//     	IPA R0, a[0x90], R2;             # [  3][000018] ATTR1
//     	IPA R5, a[0xa4], R2;             # [  4][000020] GENERIC_ATTRIBUTE_02_Y
//     	IPA R4, a[0xa0], R2;             # [  5][000028] ATTR2
//     	TEX.NODEP R1, R0, 0x0, 0x0, 2D, 0x1; # [  6][000030]
//     	IPA R7, a[0xb4], R2;             # [  7][000038] GENERIC_ATTRIBUTE_03_Y
//     	TEX.NODEP R0, R4, 0x0, 0x0, 2D, 0x1; # [  8][000040]
//     	IPA R6, a[0xb0], R2;             # [  9][000048] ATTR3
//     	TEX.NODEP.T R5, R6, 0x0, 0x0, 2D, 0x1; # [ 10][000050]
//     	IPA R11, a[0xc4], R2;            # [ 11][000058] GENERIC_ATTRIBUTE_04_Y
//     	IPA R10, a[0xc0], R2;            # [ 12][000060] ATTR4
//     	IPA R9, a[0xd4], R2;             # [ 13][000068] GENERIC_ATTRIBUTE_05_Y
//     	FMUL32I.FTZ R6, R1, 0x43af54fb;  # [ 14][000070]
//     	FFMA.FTZ R3, R0, c[0x10][0x0], -R6; # [ 15][000078]
//     	TEX.NODEP R0, R10, 0x0, 0x0, 2D, 0x1; # [ 16][000080]
//     	IPA R8, a[0xd0], R2;             # [ 17][000088] ATTR5
//     	IPA R11, a[0xe4], R2;            # [ 18][000090] GENERIC_ATTRIBUTE_06_Y
//     	TEX.NODEP R1, R8, 0x0, 0x0, 2D, 0x1; # [ 19][000098]
//     	IPA R10, a[0xe0], R2;            # [ 20][0000a0] ATTR6
//     	IPA R9, a[0xf4], R2;             # [ 21][0000a8] GENERIC_ATTRIBUTE_07_Y
//     	IPA R8, a[0xf0], R2;             # [ 22][0000b0] ATTR7
//     	TEX.NODEP R2, R10, 0x0, 0x0, 2D, 0x1; # [ 23][0000b8]
//     	FMUL32I.FTZ R4, R3, 0x3fb8aa3b;  # [ 24][0000c0]
//     	TEX.NODEP.T R3, R8, 0x0, 0x0, 2D, 0x1; # [ 25][0000c8]
//     	RRO.EX2 R7, R4;                  # [ 26][0000d0]
//     	MOV32I R4, 0x3bc49ba6;           # [ 27][0000d8]
//     	MUFU.EX2 R7, R7;                 # [ 28][0000e0]
//     	FFMA.FTZ R7, R7, c[0x10][0x4], R4; # [ 29][0000e8]
//     	MUFU.LG2 R7, R7;                 # [ 30][0000f0]
//     	FFMA.FTZ R6, R7, c[0x10][0x8], R6; # [ 31][0000f8]
//     	FFMA.FTZ R5, R5, c[0x10][0x0], -R6; # [ 32][000100]
//     	FMUL32I.FTZ R5, R5, 0x3fb8aa3b;  # [ 33][000108]
//     	RRO.EX2 R7, R5;                  # [ 34][000110]
//     	MOV32I R5, 0x3f800000;           # [ 35][000118]
//     	MUFU.EX2 R7, R7;                 # [ 36][000120]
//     	FFMA.FTZ R7, R7, c[0x10][0xc], R5; # [ 37][000128]
//     	MUFU.LG2 R7, R7;                 # [ 38][000130]
//     	FFMA.FTZ R6, R7, c[0x10][0x8], R6; # [ 39][000138]
//     	FFMA.FTZ R7, R0, c[0x10][0x0], -R6; # [ 40][000140]
//     	FADD32I.FTZ R0, R0, 0.05;        # [ 41][000148]
//     	FMUL32I.FTZ R7, R7, 0x3fb8aa3b;  # [ 42][000150]
//     	RRO.EX2 R7, R7;                  # [ 43][000158]
//     	MUFU.EX2 R7, R7;                 # [ 44][000160]
//     	FFMA.FTZ R7, R7, c[0x10][0x10], R5; # [ 45][000168]
//     	MUFU.LG2 R7, R7;                 # [ 46][000170]
//     	FFMA.FTZ R6, R7, c[0x10][0x8], R6; # [ 47][000178]
//     	FFMA.FTZ R1, R1, c[0x10][0x0], -R6; # [ 48][000180]
//     	FMUL32I.FTZ R1, R1, 0x3fb8aa3b;  # [ 49][000188]
//     	RRO.EX2 R1, R1;                  # [ 50][000190]
//     	MUFU.EX2 R1, R1;                 # [ 51][000198]
//     	FFMA.FTZ R1, R1, c[0x10][0xc], R5; # [ 52][0001a0]
//     	MUFU.LG2 R1, R1;                 # [ 53][0001a8]
//     	FFMA.FTZ R1, R1, c[0x10][0x8], R6; # [ 54][0001b0]
//     	FFMA.FTZ R2, R2, c[0x10][0x0], -R1; # [ 55][0001b8]
//     	FMUL32I.FTZ R2, R2, 0x3fb8aa3b;  # [ 56][0001c0]
//     	RRO.EX2 R2, R2;                  # [ 57][0001c8]
//     	MUFU.EX2 R2, R2;                 # [ 58][0001d0]
//     	FFMA.FTZ R2, R2, c[0x10][0x4], R5; # [ 59][0001d8]
//     	MUFU.LG2 R2, R2;                 # [ 60][0001e0]
//     	FFMA.FTZ R1, R2, c[0x10][0x8], R1; # [ 61][0001e8]
//     	FFMA.FTZ R2, R3, c[0x10][0x0], -R1; # [ 62][0001f0]
//     	FMUL32I.FTZ R2, R2, 0x3fb8aa3b;  # [ 63][0001f8]
//     	RRO.EX2 R2, R2;                  # [ 64][000200]
//     	MUFU.EX2 R2, R2;                 # [ 65][000208]
//     	FFMA.FTZ R2, R2, R4, R5;         # [ 66][000210]
//     	MUFU.LG2 R2, R2;                 # [ 67][000218]
//     	FFMA.FTZ R1, R2, c[0x10][0x8], R1; # [ 68][000220]
//     	FMUL32I.FTZ R1, R1, 0x3b3ae426;  # [ 69][000228]
//     	FMNMX.FTZ R3, R0, R1, PT;        # [ 70][000230]
//     	MOV R2, R3;                      # [ 71][000238]
//     	MOV R1, R3;                      # [ 72][000240]
//     	MOV R0, R3;                      # [ 73][000248]
//     	EXIT;                            # [ 74][000250]
//     	END
//     END_SECTION
// END_SHADER
// 
