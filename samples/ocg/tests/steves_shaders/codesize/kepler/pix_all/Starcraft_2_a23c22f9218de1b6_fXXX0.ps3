// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0xa23c22f9218de1b6
//         UCODE_HASH: 0x68f2f87736ed5461
//         POOL: APP
//         VERSION: 20
//         # USES: 2497
//         // Time: 185.738ms [18.120 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF104
//         SM_VERSION: SMQuick  // SM 2.1
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//         TEXINFO: SHADOWMAP:0x5
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 27
//         USED_TEXTURE_BITS: 0x3ff
//         TEXTURE_SLOTS: 10
//         SAMPLER_SLOTS: 10
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 3
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             COLOR_SPELWLAR_RED   PERSPECTIVE
//             COLOR_SPELWLAR_GREEN PERSPECTIVE
//             COLOR_SPELWLAR_BLUE  PERSPECTIVE
//             COLOR_SPELWLAR_ALPHA PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX00_R              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX04_Q              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX07_S              PERSPECTIVE
//             TEX07_T              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//             TARGET01_R
//             TARGET01_G
//             TARGET01_B
//             TARGET01_A
//             TARGET02_R
//             TARGET02_G
//             TARGET02_B
//             TARGET02_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00065462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x0000aa00      0x2a2a2a2a
//         0x0a0a0aaa      0x00000000      0x00000fff      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c19, 2.00000000, -1.00000000, 128.00000000, 0.00000000 ; 0x40000000 0xbf800000 0x43000000 0x000000
        def c20, 0.08333334, -1.00000000, -2.00000000, 1.00000000 ; 0x3daaaaab 0xbf800000 0xc0000000 0x3f800000
        def c21, -0.10000000, 5.00000000, 0.50000000, -0.50000000 ; 0xbdcccccd 0x40a00000 0x3f000000 0xbf000000
        defi i0, 2, 0, 0, 0
        dcl_texcoord0_pp v0.rgb
        dcl_texcoord1_pp v1.rgb
        dcl_texcoord2_pp v2.rgb
        dcl_texcoord3_pp v3.rgb
        dcl_texcoord4 v4
        dcl_color1_pp v5
        dcl_texcoord5 v6.rg
        dcl_texcoord6_pp v7.rg
        dcl_texcoord7 v8.rg
        dcl_2d s0
        dcl_2d s1
        dcl_2d s2
        dcl_2d s3
        dcl_2d s4
        dcl_2d s5
        dcl_2d s6
        dcl_2d s7
        dcl_2d s8
        dcl_2d s9
        mul r0.xy, c15, v8
        mul r0.zw, c16.xyxy, v8.xyxy
        mul r1.xy, c17, v8
        texld_pp r2, v6, s5
        texld_pp r3, r0, s7
        texld r1, r1, s6
        mad_pp r1.xyz, r1, c19.x, c19.y
        add r2.x, r2.w, -c18.x
        mul_sat r2.x, r2.x, c18.y
        texld_pp r4, r0.zwzw, s8
        mad_pp r4.xyz, r4, c19.x, c19.y
        lrp r5.xyz, r2.x, r4, r1
        nrm r1.xyz, r5
        mul_pp r2.xyz, r1.y, v2
        mad_pp r2.xyz, r1.x, v1, r2
        mad_pp r1.xyz, r1.z, v0, r2
        nrm_pp r2.xyz, r1
        mul r0.zw, r0.xyxy, c19.z
        rcp r1.x, v4.w
        mul r4, r1.x, v4
        texld r5, r0.zwzw, s1
        dp2add r0.z, r5.xwzw, r5.xwzw, c19.w
        rsq r0.z, r0.z
        mul r1.xy, r5.xwzw, r0.z
        mov r1.z, -r1.y
        mul r5, r1.yxyx, c6.yyw
        mad_pp r5, r1.xzxz, c6.xxz, r5
        mad r6, r5.xyx, c19_abs.yyw, r4
        texldp_pp r6, r6, s0
        mad r5, r5.zwx, c19_abs.yyw, r4
        texldp_pp r5, r5, s0
        add_pp r0.z, r6.x, r5.x
        mul r5, r1.yxyx, c7.yyw
        mad_pp r5, r1.xzxz, c7.xxz, r5
        mad r6, r5.xyx, c19_abs.yyw, r4
        texldp_pp r6, r6, s0
        add_pp r0.z, r0.z, r6.x
        mad r5, r5.zwx, c19_abs.yyw, r4
        texldp_pp r5, r5, s0
        add_pp r0.z, r0.z, r5.x
        mul r5, r1.yxyx, c8.yyw
        mad_pp r5, r1.xzxz, c8.xxz, r5
        mad r6, r5.xyx, c19_abs.yyw, r4
        texldp_pp r6, r6, s0
        add_pp r0.z, r0.z, r6.x
        mad r5, r5.zwx, c19_abs.yyw, r4
        texldp_pp r5, r5, s0
        add_pp r0.z, r0.z, r5.x
        mul r5, r1.yxyx, c9.yyw
        mad_pp r5, r1.xzxz, c9.xxz, r5
        mad r6, r5.xyx, c19_abs.yyw, r4
        texldp_pp r6, r6, s0
        add_pp r0.z, r0.z, r6.x
        mad r5, r5.zwx, c19_abs.yyw, r4
        texldp_pp r5, r5, s0
        add_pp r0.z, r0.z, r5.x
        mul r5, r1.yxyx, c10.yyw
        mad_pp r5, r1.xzxz, c10.xxz, r5
        mad r6, r5.xyx, c19_abs.yyw, r4
        texldp_pp r6, r6, s0
        add_pp r0.z, r0.z, r6.x
        mad r5, r5.zwx, c19_abs.yyw, r4
        texldp_pp r5, r5, s0
        add_pp r0.z, r0.z, r5.x
        mul r5, r1.yxyx, c11.yyw
        mad_pp r5, r1.xzxz, c11.xxz, r5
        mad r6, r5.xyx, c19_abs.yyw, r4
        texldp_pp r6, r6, s0
        add_pp r0.z, r0.z, r6.x
        mad r5, r5.zwx, c19_abs.yyw, r4
        texldp_pp r5, r5, s0
        add_pp r0.z, r0.z, r5.x
        mul_pp r0.z, r0.z, c20.x
        texldp_pp r5, r4, s2
        add r0.w, r5.x, c19.y
        texld_pp r4, r4, s3
        mul_pp r1.xyz, r0.z, r4
        cmp_pp r1.xyz, r0.w, r0.z, r1
        dp3_pp r0.z, r2, -c0
        dp3_sat_pp r0.w, r2, v3
        pow_pp r3.w, r0.w, c12.w
        cmp_pp r0.w, -r0.z, c19_abs.w, c19_abs.y
        cmp_pp r4.x, r0.z, -c19_abs.w, -c19_abs.y
        add_pp r0.w, r0.w, r4.x
        mul_sat_pp r0.w, r3.w, r0.w
        mov_sat_pp r0.z, r0.z
        mul_pp r4.xyz, r0.z, c1
        mul_pp r5.xyz, r0.w, c12
        mul_pp r5.xyz, r1, r5
        mad r1.xyz, r4, r1, c13
        mov r4.xyz, r1
        mov r6.x, -c19.y
        rep i0
        add r6.xyz, r6.x, c20.wyzw
        mov r0.w, c19.w
        cmp_pp r7.xyz, -r6_abs.y, c2, r0.w
        cmp_pp r7.xyz, -r6_abs.z, c4, r7
        dp3_sat_pp r0.z, r2, -r7
        cmp_pp r7.xyz, -r6_abs.y, c3, r0.w
        cmp_pp r6.yzw, -r6_abs.z, c5.xxyz, r7.xxyz
        mad r4.xyz, r6.yzw, r0.z, r4
        endrep
        add r0.z, r1.w, c21.x
        mul_sat r0.z, r0.z, c21.y
        texld r6, r0, s9
        mul r0.xyz, r0.z, r6
        mul r0.xyz, r5, r0
        mad_pp r0.xyz, r4, r3, r0
        mov_sat_pp r4, v5
        lrp_pp r1.xyz, r4.w, r4, r0
        mad_pp r0.xy, v7, c21.zwzw, c21.z
        texld_pp r0, r0, s4
        add_pp r4.xyz, -r3, r0
        mad_pp oC2.xyz, r0.w, r4, r3
        add r0.xyz, -r1, r0
        mad_pp oC0.xyz, r0.w, r0, r1
        mad r0.x, r2.w, r1.w, -c14.x
        cmp_pp r0.x, r0.x, c19_abs.y, c19_abs.w
        mov_pp oC0.w, r0.x
        mov_pp oC1.xyz, r2
        mov oC1.w, -c19.y
        mov_pp oC2.w, r0.x
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0013 0x40000000 0xbf800000
//         0x43000000 0x00000000 0x05000051 0xa00f0014
//         0x3daaaaab 0xbf800000 0xc0000000 0x3f800000
//         0x05000051 0xa00f0015 0xbdcccccd 0x40a00000
//         0x3f000000 0xbf000000 0x05000030 0xf00f0000
//         0x00000002 0x00000000 0x00000000 0x00000000
//         0x0200001f 0x80000005 0x90270000 0x0200001f
//         0x80010005 0x90270001 0x0200001f 0x80020005
//         0x90270002 0x0200001f 0x80030005 0x90270003
//         0x0200001f 0x80040005 0x900f0004 0x0200001f
//         0x8001000a 0x902f0005 0x0200001f 0x80050005
//         0x90030006 0x0200001f 0x80060005 0x90230007
//         0x0200001f 0x80070005 0x90030008 0x0200001f
//         0x90000000 0xa00f0800 0x0200001f 0x90000000
//         0xa00f0801 0x0200001f 0x90000000 0xa00f0802
//         0x0200001f 0x90000000 0xa00f0803 0x0200001f
//         0x90000000 0xa00f0804 0x0200001f 0x90000000
//         0xa00f0805 0x0200001f 0x90000000 0xa00f0806
//         0x0200001f 0x90000000 0xa00f0807 0x0200001f
//         0x90000000 0xa00f0808 0x0200001f 0x90000000
//         0xa00f0809 0x03000005 0x80030000 0xa0e4000f
//         0x90e40008 0x03000005 0x800c0000 0xa0440010
//         0x90440008 0x03000005 0x80030001 0xa0e40011
//         0x90e40008 0x03000042 0x802f0002 0x90e40006
//         0xa0e40805 0x03000042 0x802f0003 0x80e40000
//         0xa0e40807 0x03000042 0x800f0001 0x80e40001
//         0xa0e40806 0x04000004 0x80270001 0x80e40001
//         0xa0000013 0xa0550013 0x03000002 0x80010002
//         0x80ff0002 0xa1000012 0x03000005 0x80110002
//         0x80000002 0xa0550012 0x03000042 0x802f0004
//         0x80ee0000 0xa0e40808 0x04000004 0x80270004
//         0x80e40004 0xa0000013 0xa0550013 0x04000012
//         0x80070005 0x80000002 0x80e40004 0x80e40001
//         0x02000024 0x80070001 0x80e40005 0x03000005
//         0x80270002 0x80550001 0x90e40002 0x04000004
//         0x80270002 0x80000001 0x90e40001 0x80e40002
//         0x04000004 0x80270001 0x80aa0001 0x90e40000
//         0x80e40002 0x02000024 0x80270002 0x80e40001
//         0x03000005 0x800c0000 0x80440000 0xa0aa0013
//         0x02000006 0x80010001 0x90ff0004 0x03000005
//         0x800f0004 0x80000001 0x90e40004 0x03000042
//         0x800f0005 0x80ee0000 0xa0e40801 0x0400005a
//         0x80040000 0x80ec0005 0x80ec0005 0xa0ff0013
//         0x02000007 0x80040000 0x80aa0000 0x03000005
//         0x80030001 0x80ec0005 0x80aa0000 0x02000001
//         0x80040001 0x81550001 0x03000005 0x800f0005
//         0x80110001 0xa0f50006 0x04000004 0x802f0005
//         0x80880001 0xa0a00006 0x80e40005 0x04000004
//         0x800f0006 0x80040005 0xabf50013 0x80e40004
//         0x03010042 0x802f0006 0x80e40006 0xa0e40800
//         0x04000004 0x800f0005 0x800e0005 0xabf50013
//         0x80e40004 0x03010042 0x802f0005 0x80e40005
//         0xa0e40800 0x03000002 0x80240000 0x80000006
//         0x80000005 0x03000005 0x800f0005 0x80110001
//         0xa0f50007 0x04000004 0x802f0005 0x80880001
//         0xa0a00007 0x80e40005 0x04000004 0x800f0006
//         0x80040005 0xabf50013 0x80e40004 0x03010042
//         0x802f0006 0x80e40006 0xa0e40800 0x03000002
//         0x80240000 0x80aa0000 0x80000006 0x04000004
//         0x800f0005 0x800e0005 0xabf50013 0x80e40004
//         0x03010042 0x802f0005 0x80e40005 0xa0e40800
//         0x03000002 0x80240000 0x80aa0000 0x80000005
//         0x03000005 0x800f0005 0x80110001 0xa0f50008
//         0x04000004 0x802f0005 0x80880001 0xa0a00008
//         0x80e40005 0x04000004 0x800f0006 0x80040005
//         0xabf50013 0x80e40004 0x03010042 0x802f0006
//         0x80e40006 0xa0e40800 0x03000002 0x80240000
//         0x80aa0000 0x80000006 0x04000004 0x800f0005
//         0x800e0005 0xabf50013 0x80e40004 0x03010042
//         0x802f0005 0x80e40005 0xa0e40800 0x03000002
//         0x80240000 0x80aa0000 0x80000005 0x03000005
//         0x800f0005 0x80110001 0xa0f50009 0x04000004
//         0x802f0005 0x80880001 0xa0a00009 0x80e40005
//         0x04000004 0x800f0006 0x80040005 0xabf50013
//         0x80e40004 0x03010042 0x802f0006 0x80e40006
//         0xa0e40800 0x03000002 0x80240000 0x80aa0000
//         0x80000006 0x04000004 0x800f0005 0x800e0005
//         0xabf50013 0x80e40004 0x03010042 0x802f0005
//         0x80e40005 0xa0e40800 0x03000002 0x80240000
//         0x80aa0000 0x80000005 0x03000005 0x800f0005
//         0x80110001 0xa0f5000a 0x04000004 0x802f0005
//         0x80880001 0xa0a0000a 0x80e40005 0x04000004
//         0x800f0006 0x80040005 0xabf50013 0x80e40004
//         0x03010042 0x802f0006 0x80e40006 0xa0e40800
//         0x03000002 0x80240000 0x80aa0000 0x80000006
//         0x04000004 0x800f0005 0x800e0005 0xabf50013
//         0x80e40004 0x03010042 0x802f0005 0x80e40005
//         0xa0e40800 0x03000002 0x80240000 0x80aa0000
//         0x80000005 0x03000005 0x800f0005 0x80110001
//         0xa0f5000b 0x04000004 0x802f0005 0x80880001
//         0xa0a0000b 0x80e40005 0x04000004 0x800f0006
//         0x80040005 0xabf50013 0x80e40004 0x03010042
//         0x802f0006 0x80e40006 0xa0e40800 0x03000002
//         0x80240000 0x80aa0000 0x80000006 0x04000004
//         0x800f0005 0x800e0005 0xabf50013 0x80e40004
//         0x03010042 0x802f0005 0x80e40005 0xa0e40800
//         0x03000002 0x80240000 0x80aa0000 0x80000005
//         0x03000005 0x80240000 0x80aa0000 0xa0000014
//         0x03010042 0x802f0005 0x80e40004 0xa0e40802
//         0x03000002 0x80080000 0x80000005 0xa0550013
//         0x03000042 0x802f0004 0x80e40004 0xa0e40803
//         0x03000005 0x80270001 0x80aa0000 0x80e40004
//         0x04000058 0x80270001 0x80ff0000 0x80aa0000
//         0x80e40001 0x03000008 0x80240000 0x80e40002
//         0xa1e40000 0x03000008 0x80380000 0x80e40002
//         0x90e40003 0x03000020 0x80280003 0x80ff0000
//         0xa0ff000c 0x04000058 0x80280000 0x81aa0000
//         0xabff0013 0xab550013 0x04000058 0x80210004
//         0x80aa0000 0xacff0013 0xac550013 0x03000002
//         0x80280000 0x80ff0000 0x80000004 0x03000005
//         0x80380000 0x80ff0003 0x80ff0000 0x02000001
//         0x80340000 0x80aa0000 0x03000005 0x80270004
//         0x80aa0000 0xa0e40001 0x03000005 0x80270005
//         0x80ff0000 0xa0e4000c 0x03000005 0x80270005
//         0x80e40001 0x80e40005 0x04000004 0x80070001
//         0x80e40004 0x80e40001 0xa0e4000d 0x02000001
//         0x80070004 0x80e40001 0x02000001 0x80010006
//         0xa1550013 0x01000026 0xf0e40000 0x03000002
//         0x80070006 0x80000006 0xa0e70014 0x02000001
//         0x80080000 0xa0ff0013 0x04000058 0x80270007
//         0x8c550006 0xa0e40002 0x80ff0000 0x04000058
//         0x80270007 0x8caa0006 0xa0e40004 0x80e40007
//         0x03000008 0x80340000 0x80e40002 0x81e40007
//         0x04000058 0x80270007 0x8c550006 0xa0e40003
//         0x80ff0000 0x04000058 0x802e0006 0x8caa0006
//         0xa0900005 0x80900007 0x04000004 0x80070004
//         0x80f90006 0x80aa0000 0x80e40004 0x00000027
//         0x03000002 0x80040000 0x80ff0001 0xa0000015
//         0x03000005 0x80140000 0x80aa0000 0xa0550015
//         0x03000042 0x800f0006 0x80e40000 0xa0e40809
//         0x03000005 0x80070000 0x80aa0000 0x80e40006
//         0x03000005 0x80070000 0x80e40005 0x80e40000
//         0x04000004 0x80270000 0x80e40004 0x80e40003
//         0x80e40000 0x02000001 0x803f0004 0x90e40005
//         0x04000012 0x80270001 0x80ff0004 0x80e40004
//         0x80e40000 0x04000004 0x80230000 0x90e40007
//         0xa0ee0015 0xa0aa0015 0x03000042 0x802f0000
//         0x80e40000 0xa0e40804 0x03000002 0x80270004
//         0x81e40003 0x80e40000 0x04000004 0x80270802
//         0x80ff0000 0x80e40004 0x80e40003 0x03000002
//         0x80070000 0x81e40001 0x80e40000 0x04000004
//         0x80270800 0x80ff0000 0x80e40000 0x80e40001
//         0x04000004 0x80010000 0x80ff0002 0x80ff0001
//         0xa100000e 0x04000058 0x80210000 0x80000000
//         0xab550013 0xabff0013 0x02000001 0x80280800
//         0x80000000 0x02000001 0x80270801 0x80e40002
//         0x02000001 0x80080801 0xa1550013 0x02000001
//         0x80280802 0x80000000 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0xba0269c7 // -0.00049749
//         COP_CONST[1]: 0xb94a8c43 // -0.00019316
//         COP_CONST[2]: 0x3992facc // 0.00028034
//         COP_CONST[3]: 0x3a1561a0 // 0.00056984
//         COP_CONST[4]: 0xb8fc8475 // -0.00012041
//         COP_CONST[5]: 0xb9d80cb0 // -0.00041208
//         COP_CONST[6]: 0x38e64f09 // 0.00010982
//         COP_CONST[7]: 0x39a14475 // 0.00030759
//         COP_CONST[8]: 0x3a0b2616 // 0.00053081
//         COP_CONST[9]: 0x399d88c0 // 0.00030047
//         COP_CONST[10]: 0xb9f5be34 // -0.00046872
//         COP_CONST[11]: 0xb947e538 // -0.00019064
//         COP_CONST[12]: 0x3dfe7ea0 // 0.12426496
//         COP_CONST[13]: 0x3f2d82a6 // 0.67777480
//         COP_CONST[14]: 0x3ef0f0e9 // 0.47058800
//         COP_CONST[15]: 0x3efcfd09 // 0.49411800
//         COP_CONST[16]: 0x3e9c9c91 // 0.30588200
//         COP_CONST[17]: 0xbf4514f3 // -0.76985088
//         COP_CONST[18]: 0x3ee07228 // 0.43837096
//         COP_CONST[19]: 0x3f4b4b50 // 0.79411792
//         COP_CONST[20]: 0x3ea2a2b2 // 0.31764752
//         COP_CONST[21]: 0xbcae1694 // -0.02125100
//         COP_CONST[22]: 0x3f3e3ec0 // 0.74314496
//         COP_CONST[23]: 0x3e8f5c29 // 0.28000000
//         COP_CONST[24]: 0x3e2e4804 // 0.17019660
//         COP_CONST[25]: 0x3dec1f5e // 0.11529420
//         COP_CONST[26]: 0xbe3851ec // -0.18000000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][250] = 0x3f398577 // 0.72469280
//         # USER FLOAT CONST: c[6][251] = 0xbdfe7ea0 // -0.12426496
//         # USER FLOAT CONST: c[6][252] = 0xbf2d82a6 // -0.67777480
//         # USER FLOAT CONST: c[6][254] = 0x3f8190ef // 1.01223552
//         # USER FLOAT CONST: c[6][255] = 0x3f810622 // 1.00799966
//         # USER FLOAT CONST: c[6][256] = 0x3f606fd2 // 0.87670624
//         # USER FLOAT CONST: c[6][258] = 0xbeed7e44 // -0.46385396
//         # USER FLOAT CONST: c[6][259] = 0xbf4514f3 // -0.76985088
//         # USER FLOAT CONST: c[6][260] = 0x3ee07228 // 0.43837096
//         # USER FLOAT CONST: c[6][262] = 0x3ea2a2b2 // 0.31764752
//         # USER FLOAT CONST: c[6][263] = 0x3f4b4b50 // 0.79411792
//         # USER FLOAT CONST: c[6][264] = 0x3f4b4b50 // 0.79411792
//         # USER FLOAT CONST: c[6][266] = 0xbf2b3605 // -0.66879304
//         # USER FLOAT CONST: c[6][267] = 0xbcae1694 // -0.02125100
//         # USER FLOAT CONST: c[6][268] = 0x3f3e3ec0 // 0.74314496
//         # USER FLOAT CONST: c[6][270] = 0x3dec1f5e // 0.11529420
//         # USER FLOAT CONST: c[6][271] = 0x3e2e4804 // 0.17019660
//         # USER FLOAT CONST: c[6][272] = 0x3e8f5c29 // 0.28000000
//         # USER FLOAT CONST: c[6][274] = 0xb94a8c43 // -0.00019316
//         # USER FLOAT CONST: c[6][275] = 0xb9fec1d7 // -0.00048591
//         # USER FLOAT CONST: c[6][276] = 0xba0269c7 // -0.00049749
//         # USER FLOAT CONST: c[6][277] = 0xb8b8c43f // -0.00008810
//         # USER FLOAT CONST: c[6][278] = 0x3a1561a0 // 0.00056984
//         # USER FLOAT CONST: c[6][279] = 0xb974cf8c // -0.00023347
//         # USER FLOAT CONST: c[6][280] = 0x3992facc // 0.00028034
//         # USER FLOAT CONST: c[6][281] = 0xba16ac8f // -0.00057478
//         # USER FLOAT CONST: c[6][282] = 0xb9d80cb0 // -0.00041208
//         # USER FLOAT CONST: c[6][283] = 0x3a0f7d4f // 0.00054737
//         # USER FLOAT CONST: c[6][284] = 0xb8fc8475 // -0.00012041
//         # USER FLOAT CONST: c[6][285] = 0x3a42d5b8 // 0.00074324
//         # USER FLOAT CONST: c[6][286] = 0x39a14475 // 0.00030759
//         # USER FLOAT CONST: c[6][287] = 0x3a70c229 // 0.00091842
//         # USER FLOAT CONST: c[6][288] = 0x38e64f09 // 0.00010982
//         # USER FLOAT CONST: c[6][289] = 0xba8c2b8d // -0.00106941
//         # USER FLOAT CONST: c[6][290] = 0x399d88c0 // 0.00030047
//         # USER FLOAT CONST: c[6][291] = 0x38a1c70a // 0.00007714
//         # USER FLOAT CONST: c[6][292] = 0x3a0b2616 // 0.00053081
//         # USER FLOAT CONST: c[6][293] = 0x3a01771f // 0.00049387
//         # USER FLOAT CONST: c[6][294] = 0xb947e538 // -0.00019064
//         # USER FLOAT CONST: c[6][295] = 0xba925e34 // -0.00111670
//         # USER FLOAT CONST: c[6][296] = 0xb9f5be34 // -0.00046872
//         # USER FLOAT CONST: c[6][297] = 0xba3b9d12 // -0.00071569
//         # USER FLOAT CONST: c[6][298] = 0x40700000 // 3.75000000
//         # USER FLOAT CONST: c[6][299] = 0x40700000 // 3.75000000
//         # USER FLOAT CONST: c[6][300] = 0x40700000 // 3.75000000
//         # USER FLOAT CONST: c[6][301] = 0x41f00000 // 30.00000000
//         # USER FLOAT CONST: c[6][302] = 0x3ef0f0e9 // 0.47058800
//         # USER FLOAT CONST: c[6][303] = 0x3efcfd09 // 0.49411800
//         # USER FLOAT CONST: c[6][304] = 0x3e9c9c91 // 0.30588200
//         # USER FLOAT CONST: c[6][306] = 0x3e3851ec // 0.18000000
//         # USER FLOAT CONST: c[6][310] = 0x41e00000 // 28.00000000
//         # USER FLOAT CONST: c[6][311] = 0x41e00000 // 28.00000000
//         # USER FLOAT CONST: c[6][314] = 0x41e00000 // 28.00000000
//         # USER FLOAT CONST: c[6][315] = 0x41e00000 // 28.00000000
//         # USER FLOAT CONST: c[6][318] = 0x41e00000 // 28.00000000
//         # USER FLOAT CONST: c[6][319] = 0x41e00000 // 28.00000000
//         # USER FLOAT CONST: c[6][322] = 0x3f400000 // 0.75000000
//         # USER FLOAT CONST: c[6][323] = 0x40800000 // 4.00000000
//         ## USER CONST histogram
//         ##    ~c0.x -> c[6][250] = 100.00%@0.72469280
//         ##    ~c0.y -> c[6][251] = 100.00%@-0.12426496
//         ##    ~c0.z -> c[6][252] = 100.00%@-0.67777480
//         ##    ~c1.x -> c[6][254] = 100.00%@1.01223552
//         ##    ~c1.y -> c[6][255] = 100.00%@1.00799966
//         ##    ~c1.z -> c[6][256] = 100.00%@0.87670624
//         ##    ~c2.x -> c[6][258] = 100.00%@-0.46385396
//         ##    ~c2.y -> c[6][259] = 100.00%@-0.76985088
//         ##    ~c2.z -> c[6][260] = 100.00%@0.43837096
//         ##    ~c3.x -> c[6][262] = 100.00%@0.31764752
//         ##    ~c3.y -> c[6][263] = 100.00%@0.79411792
//         ##    ~c3.z -> c[6][264] = 100.00%@0.79411792
//         ##    ~c4.x -> c[6][266] = 100.00%@-0.66879304
//         ##    ~c4.y -> c[6][267] = 100.00%@-0.02125100
//         ##    ~c4.z -> c[6][268] = 100.00%@0.74314496
//         ##    ~c5.x -> c[6][270] = 100.00%@0.11529420
//         ##    ~c5.y -> c[6][271] = 100.00%@0.17019660
//         ##    ~c5.z -> c[6][272] = 100.00%@0.28000000
//         ##    ~c6.x -> c[6][274] = 100.00%@-0.00019316
//         ##    ~c6.y -> c[6][275] = 100.00%@-0.00048591
//         ##    ~c6.z -> c[6][276] = 100.00%@-0.00049749
//         ##    ~c6.w -> c[6][277] = 100.00%@-0.00008810
//         ##    ~c7.x -> c[6][278] = 100.00%@0.00056984
//         ##    ~c7.y -> c[6][279] = 100.00%@-0.00023347
//         ##    ~c7.z -> c[6][280] = 100.00%@0.00028034
//         ##    ~c7.w -> c[6][281] = 100.00%@-0.00057478
//         ##    ~c8.x -> c[6][282] = 100.00%@-0.00041208
//         ##    ~c8.y -> c[6][283] = 100.00%@0.00054737
//         ##    ~c8.z -> c[6][284] = 100.00%@-0.00012041
//         ##    ~c8.w -> c[6][285] = 100.00%@0.00074324
//         ##    ~c9.x -> c[6][286] = 100.00%@0.00030759
//         ##    ~c9.y -> c[6][287] = 100.00%@0.00091842
//         ##    ~c9.z -> c[6][288] = 100.00%@0.00010982
//         ##    ~c9.w -> c[6][289] = 100.00%@-0.00106941
//         ##    ~c10.x -> c[6][290] = 100.00%@0.00030047
//         ##    ~c10.y -> c[6][291] = 100.00%@0.00007714
//         ##    ~c10.z -> c[6][292] = 100.00%@0.00053081
//         ##    ~c10.w -> c[6][293] = 100.00%@0.00049387
//         ##    ~c11.x -> c[6][294] = 100.00%@-0.00019064
//         ##    ~c11.y -> c[6][295] = 100.00%@-0.00111670
//         ##    ~c11.z -> c[6][296] = 100.00%@-0.00046872
//         ##    ~c11.w -> c[6][297] = 100.00%@-0.00071569
//         ##    ~c12.x -> c[6][298] = 100.00%@3.75000000
//         ##    ~c12.y -> c[6][299] = 100.00%@3.75000000
//         ##    ~c12.z -> c[6][300] = 100.00%@3.75000000
//         ##    ~c12.w -> c[6][301] = 100.00%@30.00000000
//         ##    ~c13.x -> c[6][302] = 100.00%@0.47058800
//         ##    ~c13.y -> c[6][303] = 100.00%@0.49411800
//         ##    ~c13.z -> c[6][304] = 100.00%@0.30588200
//         ##    ~c14.x -> c[6][306] = 100.00%@0.18000000
//         ##    ~c15.x -> c[6][310] = 100.00%@28.00000000
//         ##    ~c15.y -> c[6][311] = 100.00%@28.00000000
//         ##    ~c16.x -> c[6][314] = 100.00%@28.00000000
//         ##    ~c16.y -> c[6][315] = 100.00%@28.00000000
//         ##    ~c17.x -> c[6][318] = 100.00%@28.00000000
//         ##    ~c17.y -> c[6][319] = 100.00%@28.00000000
//         ##    ~c18.x -> c[6][322] = 100.00%@0.75000000
//         ##    ~c18.y -> c[6][323] = 100.00%@4.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        , (0x9,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Border/Border/Clamp,-0.75000000,2048x2048x0,1/0,Z16,0,0,0), 0x00000000,0x00000411
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Wrap/Wrap/Clamp,-0.75000000,64x64x0,1/0,A8Y8,0,0,0), 0x35aaf229,0x00000411
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Border/Border/Clamp,-0.75000000,2048x2048x0,1/0,Z16,0,0,0), 0x00000000,0x00000411
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Point,Border/Border/Clamp,-0.75000000,2048x2048x0,1/0,R5G6B5,0,0,0), 0x00000000,0x00000411
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,-0.75000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xc4e3ebc9,0x00000411
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,-0.75000000,256x256x0,1/0,A8Y8,0,0,0), 0x36c83700,0x00000411
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/Linear,Wrap/Wrap/Clamp,-0.75000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xba34e573,0x00000411
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/Linear,Wrap/Wrap/Clamp,-0.75000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x5b5c8145,0x00000411
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 7 when no alpha is required.
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Linear,Wrap/Wrap/Clamp,-0.75000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x00000411
//         STAGEINFO:(0x9,2D,1X,Linear/Linear/Linear,Wrap/Wrap/Clamp,-0.75000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x34bbd752,0x00000411
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 9 when no alpha is required.
//         RENDERTARGETINFO: 3,1920x1200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Linear/Linear/Point,Border/Border/Clamp,-0.75000000,2048x2048x0,1/0,Z16,0,0,0), 0x00000000,0x000005b0
//         STAGEINFO:(0x1,2D,1X,Linear/Linear/Point,Wrap/Wrap/Clamp,-0.75000000,64x64x0,1/0,A8Y8,0,0,0), 0x35aaf229,0x000005b0
//         STAGEINFO:(0x2,2D,1X,Linear/Linear/Point,Border/Border/Clamp,-0.75000000,2048x2048x0,1/0,Z16,0,0,0), 0x00000000,0x000005b0
//         STAGEINFO:(0x3,2D,1X,Linear/Linear/Point,Border/Border/Clamp,-0.75000000,2048x2048x0,1/0,R5G6B5,0,0,0), 0x00000000,0x000005b0
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,-0.75000000,256x256x0,1/0,A8R8G8B8,0,0,0), 0xc4e3ebc9,0x000005b0
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/Point,Clamp/Clamp/Clamp,-0.75000000,256x256x0,1/0,A8Y8,0,0,0), 0x36c83700,0x000005b0
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/Linear,Wrap/Wrap/Clamp,-0.75000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xba34e573,0x000005b0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 6 when no alpha is required.
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/Linear,Wrap/Wrap/Clamp,-0.75000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x5b5c8145,0x000005b0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 7 when no alpha is required.
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/Linear,Wrap/Wrap/Clamp,-0.75000000,512x512x0,1/0,A8R8G8B8,0,0,0), 0x00000000,0x000005b0
//         STAGEINFO:(0x9,2D,1X,Linear/Linear/Linear,Wrap/Wrap/Clamp,-0.75000000,1024x1024x0,11/0,DXT45_A8R8G8B8,0,0,0), 0x34bbd752,0x000005b0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 9 when no alpha is required.
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x18 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xfff
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 3 : 
//          (attr 1 5 4) (attr 6 1 4) (attr 7 3 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r45, c[6][265]
//         movr r45.x, constant(28.00000000, 28.00000000, 28.00000000, 28.00000000).x
//         movr r45.y, constant(28.00000000, 28.00000000, 28.00000000, 28.00000000).x
//         mulr r5.xy, r45, v9
//         movr r45, c[6][266].xyxy
//         movr r45.x, constant(28.00000000, 28.00000000, 28.00000000, 28.00000000).x
//         movr r45.y, constant(28.00000000, 28.00000000, 28.00000000, 28.00000000).x
//         movr r45.z, constant(28.00000000, 28.00000000, 28.00000000, 28.00000000).x
//         movr r45.w, constant(28.00000000, 28.00000000, 28.00000000, 28.00000000).x
//         mulr r5.zw, r45, v9.xyxy
//         movr r45, c[6][267]
//         movr r45.x, constant(28.00000000, 28.00000000, 28.00000000, 28.00000000).x
//         movr r45.y, constant(28.00000000, 28.00000000, 28.00000000, 28.00000000).x
//         mulr r6.xy, r45, v9
//         texh r7, v7.xyzz, #5, #5, 2D
//         texh r8, r5.xyzz, #7, #7, 2D
//         texr r6, r6.xyyy, #6, #6, 2D
//         madh r6.xyz, r6, constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).x, constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).y
//         movr r44, -c[6][268].x
//         movr r44.x, -constant(0.75000000, 0.75000000, 0.75000000, 0.75000000).x
//         movr r44.y, -constant(0.75000000, 0.75000000, 0.75000000, 0.75000000).x
//         movr r44.z, -constant(0.75000000, 0.75000000, 0.75000000, 0.75000000).x
//         movr r44.w, -constant(0.75000000, 0.75000000, 0.75000000, 0.75000000).x
//         addr r7.x, r7.w, r44
//         movr r44, c[6][268].y
//         movr r44.x, constant(4.00000000, 4.00000000, 4.00000000, 4.00000000).x
//         movr r44.y, constant(4.00000000, 4.00000000, 4.00000000, 4.00000000).x
//         movr r44.z, constant(4.00000000, 4.00000000, 4.00000000, 4.00000000).x
//         movr r44.w, constant(4.00000000, 4.00000000, 4.00000000, 4.00000000).x
//         mulr_sat r7.x, r7.x, r44
//         texh r9, r5.zwzz, #8, #8, 2D
//         madh r9.xyz, r9, constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).x, constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).y
//         lrpr r10.xyz, r7.x, r9, r6
//         nrmr r6.xyz, r10
//         mulh r7.xyz, r6.y, v3
//         madh r7.xyz, r6.x, v2, r7
//         madh r6.xyz, r6.z, v1, r7
//         nrmh r7.xyz, r6
//         mulr r5.zw, r5.xyxy, constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).z
//         rcpr r6.x, v5.w
//         mulr r9, r6.x, v5
//         texr r10, r5.zwzz, #1, #1, 2D
//         dp2ar r5.z, r10.xwzw, r10.xwzw, constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).w
//         rsqr r5.z, |r5.z|
//         mulr r6.xy, r10.xwzw, r5.z
//         movr r6.z, -r6.y
//         movr r44, c[6][256].yyww
//         movr r44.x, constant(-0.00048591, -0.00048591, -0.00048591, -0.00048591).x
//         movr r44.y, constant(-0.00048591, -0.00048591, -0.00048591, -0.00048591).x
//         movr r44.z, constant(-0.00008810, -0.00008810, -0.00008810, -0.00008810).x
//         movr r44.w, constant(-0.00008810, -0.00008810, -0.00008810, -0.00008810).x
//         mulr r10, r6.yxyx, r44
//         movr r44, c[6][256].xxzz
//         movr r44.x, constant(-0.00019316, -0.00019316, -0.00019316, -0.00019316).x
//         movr r44.y, constant(-0.00019316, -0.00019316, -0.00019316, -0.00019316).x
//         movr r44.z, constant(-0.00049749, -0.00049749, -0.00049749, -0.00049749).x
//         movr r44.w, constant(-0.00049749, -0.00049749, -0.00049749, -0.00049749).x
//         madh r10, r6.xzxz, r44, r10
//         madr r11, r10.xyxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r11, r11, #0, #0, SHADOW2D
//         madr r10, r10.zwxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r10, r10, #0, #0, SHADOW2D
//         addh r5.z, r11.x, r10.x
//         movr r44, c[6][257].yyww
//         movr r44.x, constant(-0.00023347, -0.00023347, -0.00023347, -0.00023347).x
//         movr r44.y, constant(-0.00023347, -0.00023347, -0.00023347, -0.00023347).x
//         movr r44.z, constant(-0.00057478, -0.00057478, -0.00057478, -0.00057478).x
//         movr r44.w, constant(-0.00057478, -0.00057478, -0.00057478, -0.00057478).x
//         mulr r10, r6.yxyx, r44
//         movr r44, c[6][257].xxzz
//         movr r44.x, constant(0.00056984, 0.00056984, 0.00056984, 0.00056984).x
//         movr r44.y, constant(0.00056984, 0.00056984, 0.00056984, 0.00056984).x
//         movr r44.z, constant(0.00028034, 0.00028034, 0.00028034, 0.00028034).x
//         movr r44.w, constant(0.00028034, 0.00028034, 0.00028034, 0.00028034).x
//         madh r10, r6.xzxz, r44, r10
//         madr r11, r10.xyxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r11, r11, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r11.x
//         madr r10, r10.zwxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r10, r10, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r10.x
//         movr r44, c[6][258].yyww
//         movr r44.x, constant(0.00054737, 0.00054737, 0.00054737, 0.00054737).x
//         movr r44.y, constant(0.00054737, 0.00054737, 0.00054737, 0.00054737).x
//         movr r44.z, constant(0.00074324, 0.00074324, 0.00074324, 0.00074324).x
//         movr r44.w, constant(0.00074324, 0.00074324, 0.00074324, 0.00074324).x
//         mulr r10, r6.yxyx, r44
//         movr r44, c[6][258].xxzz
//         movr r44.x, constant(-0.00041208, -0.00041208, -0.00041208, -0.00041208).x
//         movr r44.y, constant(-0.00041208, -0.00041208, -0.00041208, -0.00041208).x
//         movr r44.z, constant(-0.00012041, -0.00012041, -0.00012041, -0.00012041).x
//         movr r44.w, constant(-0.00012041, -0.00012041, -0.00012041, -0.00012041).x
//         madh r10, r6.xzxz, r44, r10
//         madr r11, r10.xyxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r11, r11, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r11.x
//         madr r10, r10.zwxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r10, r10, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r10.x
//         movr r44, c[6][259].yyww
//         movr r44.x, constant(0.00091842, 0.00091842, 0.00091842, 0.00091842).x
//         movr r44.y, constant(0.00091842, 0.00091842, 0.00091842, 0.00091842).x
//         movr r44.z, constant(-0.00106941, -0.00106941, -0.00106941, -0.00106941).x
//         movr r44.w, constant(-0.00106941, -0.00106941, -0.00106941, -0.00106941).x
//         mulr r10, r6.yxyx, r44
//         movr r44, c[6][259].xxzz
//         movr r44.x, constant(0.00030759, 0.00030759, 0.00030759, 0.00030759).x
//         movr r44.y, constant(0.00030759, 0.00030759, 0.00030759, 0.00030759).x
//         movr r44.z, constant(0.00010982, 0.00010982, 0.00010982, 0.00010982).x
//         movr r44.w, constant(0.00010982, 0.00010982, 0.00010982, 0.00010982).x
//         madh r10, r6.xzxz, r44, r10
//         madr r11, r10.xyxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r11, r11, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r11.x
//         madr r10, r10.zwxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r10, r10, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r10.x
//         movr r44, c[6][260].yyww
//         movr r44.x, constant(0.00007714, 0.00007714, 0.00007714, 0.00007714).x
//         movr r44.y, constant(0.00007714, 0.00007714, 0.00007714, 0.00007714).x
//         movr r44.z, constant(0.00049387, 0.00049387, 0.00049387, 0.00049387).x
//         movr r44.w, constant(0.00049387, 0.00049387, 0.00049387, 0.00049387).x
//         mulr r10, r6.yxyx, r44
//         movr r44, c[6][260].xxzz
//         movr r44.x, constant(0.00030047, 0.00030047, 0.00030047, 0.00030047).x
//         movr r44.y, constant(0.00030047, 0.00030047, 0.00030047, 0.00030047).x
//         movr r44.z, constant(0.00053081, 0.00053081, 0.00053081, 0.00053081).x
//         movr r44.w, constant(0.00053081, 0.00053081, 0.00053081, 0.00053081).x
//         madh r10, r6.xzxz, r44, r10
//         madr r11, r10.xyxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r11, r11, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r11.x
//         madr r10, r10.zwxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r10, r10, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r10.x
//         movr r44, c[6][261].yyww
//         movr r44.x, constant(-0.00111670, -0.00111670, -0.00111670, -0.00111670).x
//         movr r44.y, constant(-0.00111670, -0.00111670, -0.00111670, -0.00111670).x
//         movr r44.z, constant(-0.00071569, -0.00071569, -0.00071569, -0.00071569).x
//         movr r44.w, constant(-0.00071569, -0.00071569, -0.00071569, -0.00071569).x
//         mulr r10, r6.yxyx, r44
//         movr r44, c[6][261].xxzz
//         movr r44.x, constant(-0.00019064, -0.00019064, -0.00019064, -0.00019064).x
//         movr r44.y, constant(-0.00019064, -0.00019064, -0.00019064, -0.00019064).x
//         movr r44.z, constant(-0.00046872, -0.00046872, -0.00046872, -0.00046872).x
//         movr r44.w, constant(-0.00046872, -0.00046872, -0.00046872, -0.00046872).x
//         madh r10, r6.xzxz, r44, r10
//         madr r11, r10.xyxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r11, r11, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r11.x
//         madr r10, r10.zwxx, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).yyww|, r9
//         txph r10, r10, #0, #0, SHADOW2D
//         addh r5.z, r5.z, r10.x
//         mulh r5.z, r5.z, constant(0.08333334, -1.00000000, -2.00000000, 1.00000000).x
//         txph r10, r9, #2, #2, SHADOW2D
//         addr r5.w, r10.x, constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).y
//         texh r9, r9.xyzz, #3, #3, 2D
//         mulh r6.xyz, r5.z, r9
//         cmph r6.xyz, r5.w, r5.z, r6
//         movr r44, -c[6][250]
//         movr r44.x, -constant(0.72469280, 0.72469280, 0.72469280, 0.72469280).x
//         movr r44.y, -constant(-0.12426496, -0.12426496, -0.12426496, -0.12426496).x
//         movr r44.z, -constant(-0.67777480, -0.67777480, -0.67777480, -0.67777480).x
//         dp3h r5.z, r7, r44
//         dp3h_sat r5.w, r7, v4
//         lg2r r47, |r5.w|
//         movr r44, c[6][262].w
//         movr r44.x, constant(30.00000000, 30.00000000, 30.00000000, 30.00000000).x
//         movr r44.y, constant(30.00000000, 30.00000000, 30.00000000, 30.00000000).x
//         movr r44.z, constant(30.00000000, 30.00000000, 30.00000000, 30.00000000).x
//         movr r44.w, constant(30.00000000, 30.00000000, 30.00000000, 30.00000000).x
//         mulr r47, r47, r44
//         ex2r r47, r47
//         movh r8.w, r47
//         cmph r5.w, -r5.z, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).w|, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).y|
//         cmph r9.x, r5.z, -|constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).w|, -|constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).y|
//         addh r5.w, r5.w, r9.x
//         mulh_sat r5.w, r8.w, r5.w
//         movh_sat r5.z, r5.z
//         movr r44, c[6][251]
//         movr r44.x, constant(1.01223552, 1.01223552, 1.01223552, 1.01223552).x
//         movr r44.y, constant(1.00799966, 1.00799966, 1.00799966, 1.00799966).x
//         movr r44.z, constant(0.87670624, 0.87670624, 0.87670624, 0.87670624).x
//         mulh r9.xyz, r5.z, r44
//         movr r44, c[6][262]
//         movr r44.x, constant(3.75000000, 3.75000000, 3.75000000, 3.75000000).x
//         movr r44.y, constant(3.75000000, 3.75000000, 3.75000000, 3.75000000).x
//         movr r44.z, constant(3.75000000, 3.75000000, 3.75000000, 3.75000000).x
//         movr r44.w, constant(30.00000000, 30.00000000, 30.00000000, 30.00000000).x
//         mulh r10.xyz, r5.w, r44
//         mulh r10.xyz, r6, r10
//         movr r43, c[6][263]
//         movr r43.x, constant(0.47058800, 0.47058800, 0.47058800, 0.47058800).x
//         movr r43.y, constant(0.49411800, 0.49411800, 0.49411800, 0.49411800).x
//         movr r43.z, constant(0.30588200, 0.30588200, 0.30588200, 0.30588200).x
//         madr r6.xyz, r9, r6, r43
//         movr r9.xyz, r6
//         movr r11.x, -constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).y
//         rep constant(2, 0, 0, 0), l0
//         addr r11.xyz, r11.x, constant(0.08333334, -1.00000000, -2.00000000, 1.00000000).wyzw
//         movr r5.w, constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).w
//         movr r44, c[6][252]
//         movr r44.x, constant(-0.46385396, -0.46385396, -0.46385396, -0.46385396).x
//         movr r44.y, constant(-0.76985088, -0.76985088, -0.76985088, -0.76985088).x
//         movr r44.z, constant(0.43837096, 0.43837096, 0.43837096, 0.43837096).x
//         cmph r12.xyz, -|r11.y|, r44, r5.w
//         movr r44, c[6][254]
//         movr r44.x, constant(-0.66879304, -0.66879304, -0.66879304, -0.66879304).x
//         movr r44.y, constant(-0.02125100, -0.02125100, -0.02125100, -0.02125100).x
//         movr r44.z, constant(0.74314496, 0.74314496, 0.74314496, 0.74314496).x
//         cmph r12.xyz, -|r11.z|, r44, r12
//         dp3h_sat r5.z, r7, -r12
//         movr r44, c[6][253]
//         movr r44.x, constant(0.31764752, 0.31764752, 0.31764752, 0.31764752).x
//         movr r44.y, constant(0.79411792, 0.79411792, 0.79411792, 0.79411792).x
//         movr r44.z, constant(0.79411792, 0.79411792, 0.79411792, 0.79411792).x
//         cmph r12.xyz, -|r11.y|, r44, r5.w
//         movr r44, c[6][255].xxyz
//         movr r44.x, constant(0.11529420, 0.11529420, 0.11529420, 0.11529420).x
//         movr r44.y, constant(0.11529420, 0.11529420, 0.11529420, 0.11529420).x
//         movr r44.z, constant(0.17019660, 0.17019660, 0.17019660, 0.17019660).x
//         movr r44.w, constant(0.28000000, 0.28000000, 0.28000000, 0.28000000).x
//         cmph r11.yzw, -|r11.z|, r44, r12.xxyz
//         madr r9.xyz, r11.yzww, r5.z, r9
//         l0:
//         addr r5.z, r6.w, constant(-0.10000000, 5.00000000, 0.50000000, -0.50000000).x
//         mulr_sat r5.z, r5.z, constant(-0.10000000, 5.00000000, 0.50000000, -0.50000000).y
//         texr r11, r5.xyzz, #9, #9, 2D
//         mulr r5.xyz, r5.z, r11
//         mulr r5.xyz, r10, r5
//         madh r5.xyz, r9, r8, r5
//         movh_sat r9, v6
//         lrph r6.xyz, r9.w, r9, r5
//         madh r5.xy, v8, constant(-0.10000000, 5.00000000, 0.50000000, -0.50000000).zwzw, constant(-0.10000000, 5.00000000, 0.50000000, -0.50000000).z
//         texh r5, r5.xyzz, #4, #4, 2D
//         addh r9.xyz, -r8, r5
//         madh r3.xyz, r5.w, r9, r8
//         addr r5.xyz, -r6, r5
//         madh r0.xyz, r5.w, r5, r6
//         movr r43, -c[6][264].x
//         movr r43.x, -constant(0.18000000, 0.18000000, 0.18000000, 0.18000000).x
//         movr r43.y, -constant(0.18000000, 0.18000000, 0.18000000, 0.18000000).x
//         movr r43.z, -constant(0.18000000, 0.18000000, 0.18000000, 0.18000000).x
//         movr r43.w, -constant(0.18000000, 0.18000000, 0.18000000, 0.18000000).x
//         madr r5.x, r7.w, r6.w, r43
//         cmph r5.x, r5.x, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).y|, |constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).w|
//         movh r0.w, r5.x
//         movh r2.xyz, r7
//         movr r2.w, -constant(2.00000000, -1.00000000, 128.00000000, 0.00000000).y
//         movh r3.w, r5.x
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.3
//     	.THREAD_TYPE pixel
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R12, R0;                # [  1][000008]
//     	IPA.SC R1, a[0x374], R12;        # [  2][000010] FIXED_FNC_TEXTURE_7_T
//     	FMUL.FMZ R3, R1, 3584;           # [  3][000018]
//     	IPA.SC R0, a[0x370], R12;        # [  4][000020] TEX7
//     	FMUL.FMZ R2, R0, 3584;           # [  5][000028]
//     	FMUL.FMZ R1, R1, 28;             # [  6][000030]
//     	TEX.T R16, R2, 0x1, 0x1, 2D, 0x9; # [  7][000038]
//     	FMUL.FMZ R0, R0, 28;             # [  8][000040]
//     	IPA.SC R3, a[0x354], R12;        # [  9][000048] FIXED_FNC_TEXTURE_5_T
//     	TEX.NODEP.T R4, R0, 0x6, 0x6, 2D; # [ 10][000050]
//     	TEX.NODEP.T R8, R0, 0x8, 0x8, 2D, 0x7; # [ 11][000058]
//     	IPA.SC R2, a[0x350], R12;        # [ 12][000060] TEX5
//     	TEX.NODEP.P R3, R2, 0x5, 0x5, 2D, 0x8; # [ 13][000068]
//     	MOV32I R2, -0x40800000;          # [ 14][000070]
//     	IPA.SC R13, a[0x34c], R12;       # [ 15][000078] FIXED_FNC_TEXTURE_4_Q
//     	MUFU.RCP R14, R13;               # [ 16][000080]
//     	IPA.SC R19, a[0x348], R12;       # [ 17][000088] FIXED_FNC_TEXTURE_4_R
//     	FMUL.FMZ R13, R14, R13;          # [ 18][000090]
//     	IPA.SC R15, a[0x344], R12;       # [ 19][000098] FIXED_FNC_TEXTURE_4_T
//     	MUFU.RCP R21, R13;               # [ 20][0000a0]
//     	IPA.SC R18, a[0x340], R12;       # [ 21][0000a8] TEX4
//     	FMUL.FMZ R19, R14, R19;          # [ 22][0000b0]
//     	FMUL.FMZ R15, R14, R15;          # [ 23][0000b8]
//     	FMUL.FMZ R14, R14, R18;          # [ 24][0000c0]
//     	IPA.SC R24, a[0x314], R12;       # [ 25][0000c8] FIXED_FNC_TEXTURE_1_T
//     	FMUL R18, R19, R21;              # [ 26][0000d0]
//     	FMUL.FTZ R11, R16, R16;          # [ 27][0000d8]
//     	FFMA.FTZ R11, R17, R17, R11;     # [ 28][0000e0]
//     	IPA.SC R26, a[0x318], R12;       # [ 29][0000e8] FIXED_FNC_TEXTURE_1_R
//     	MUFU.RSQ R11, |R11|;             # [ 30][0000f0]
//     	FMUL.FMZ R25, R17, R11;          # [ 31][0000f8]
//     	FMUL.FMZ R20, R16, R11;          # [ 32][000100]
//     	FMUL32I.FMZ R13, R25, 0xb9fec1d7; # [ 33][000108]
//     	FMUL32I.FMZ R17, R20, 0xb9fec1d7; # [ 34][000110]
//     	FFMA.FMZ R16, R20, c[0x9][0x4], R13; # [ 35][000118]
//     	FMUL32I.FMZ R19, R25, 0xb8b8c43f; # [ 36][000120]
//     	FFMA.FMZ R17, R25, -c[0x9][0x4], R17; # [ 37][000128]
//     	FMUL32I.FMZ R11, R20, 0xb8b8c43f; # [ 38][000130]
//     	FADD.FTZ R16, R16, R14;          # [ 39][000138]
//     	FADD.FTZ R17, R17, R15;          # [ 40][000140]
//     	FFMA.FMZ R13, R20, c[0x9][0x0], R19; # [ 41][000148]
//     	FFMA.FMZ R11, R25, -c[0x9][0x0], R11; # [ 42][000150]
//     	FMUL R16, R16, R21;              # [ 43][000158]
//     	FMUL R17, R17, R21;              # [ 44][000160]
//     	FADD.FTZ R19, R13, R14;          # [ 45][000168]
//     	FADD.FTZ R22, R11, R15;          # [ 46][000170]
//     	TEX.DC.NODEP.P R13, R16, R18, 0x0, 0x0, 2D, 0x1; # [ 47][000178]
//     	FMUL R16, R19, R21;              # [ 48][000180]
//     	FFMA.FMZ R11, R6, 2, R2;         # [ 49][000188]
//     	FMUL R17, R22, R21;              # [ 50][000190]
//     	FFMA.FMZ R10, R10, 2, R2;        # [ 51][000198]
//     	FFMA.FMZ R22, R5, 2, R2;         # [ 52][0001a0]
//     	TEX.DC.NODEP.P R6, R16, R18, 0x0, 0x0, 2D, 0x1; # [ 53][0001a8]
//     	FMUL32I.FMZ R5, R25, 0xb974cf8c; # [ 54][0001b0]
//     	FMUL32I.FMZ R16, R20, 0xb974cf8c; # [ 55][0001b8]
//     	FFMA.FMZ R17, R4, 2, R2;         # [ 56][0001c0]
//     	FFMA.FMZ R9, R9, 2, R2;          # [ 57][0001c8]
//     	FFMA.FMZ R4, R20, c[0x9][0xc], R5; # [ 58][0001d0]
//     	FFMA.FMZ R19, R8, 2, R2;         # [ 59][0001d8]
//     	FFMA.FMZ R5, R25, -c[0x9][0xc], R16; # [ 60][0001e0]
//     	FADD.FTZ R4, R4, R14;            # [ 61][0001e8]
//     	FADD.FTZ R5, R5, R15;            # [ 62][0001f0]
//     	FMUL R4, R4, R21;                # [ 63][0001f8]
//     	FMUL R5, R5, R21;                # [ 64][000200]
//     	FADD.FTZ R2, R3, -0.75;          # [ 65][000208]
//     	FMUL.FMZ.SAT R2, R2, 4;          # [ 66][000210]
//     	TEX.DC.NODEP.P R8, R4, R18, 0x0, 0x0, 2D, 0x1; # [ 67][000218]
//     	FADD.FTZ R5, R19, -R17;          # [ 68][000220]
//     	FADD.FTZ R23, R9, -R22;          # [ 69][000228]
//     	FADD.FTZ R4, R10, -R11;          # [ 70][000230]
//     	FFMA.FTZ R19, R2, R5, R17;       # [ 71][000238]
//     	FFMA.FTZ R17, R2, R23, R22;      # [ 72][000240]
//     	FMUL32I.FMZ R5, R20, 0xba16ac8f; # [ 73][000248]
//     	FFMA.FTZ R2, R2, R4, R11;        # [ 74][000250]
//     	FMUL.FTZ R10, R19, R19;          # [ 75][000258]
//     	FMUL32I.FMZ R4, R25, 0xba16ac8f; # [ 76][000260]
//     	FFMA.FMZ R5, R25, -c[0x9][0x8], R5; # [ 77][000268]
//     	FFMA.FMZ R4, R20, c[0x9][0x8], R4; # [ 78][000270]
//     	FFMA.FTZ R10, R17, R17, R10;     # [ 79][000278]
//     	FADD.FTZ R5, R5, R15;            # [ 80][000280]
//     	FADD.FTZ R4, R4, R14;            # [ 81][000288]
//     	FFMA.FTZ R10, R2, R2, R10;       # [ 82][000290]
//     	FMUL R4, R4, R21;                # [ 83][000298]
//     	FMUL R5, R5, R21;                # [ 84][0002a0]
//     	IPA.SC R16, a[0x320], R12;       # [ 85][0002a8] TEX2
//     	FMUL32I.FMZ R22, R25, 0x3a0f7d4f; # [ 86][0002b0]
//     	IPA.SC R9, a[0x324], R12;        # [ 87][0002b8] FIXED_FNC_TEXTURE_2_T
//     	MUFU.RSQ R10, R10;               # [ 88][0002c0]
//     	TEX.DC.NODEP.T R23, R4, R18, 0x0, 0x0, 2D, 0x1; # [ 89][0002c8]
//     	FMUL32I.FMZ R5, R20, 0x3a0f7d4f; # [ 90][0002d0]
//     	FFMA.FMZ R4, R20, c[0x9][0x14], R22; # [ 91][0002d8]
//     	FFMA.FMZ R5, R25, -c[0x9][0x14], R5; # [ 92][0002e0]
//     	IPA.SC R11, a[0x328], R12;       # [ 93][0002e8] FIXED_FNC_TEXTURE_2_R
//     	FADD.FTZ R4, R4, R14;            # [ 94][0002f0]
//     	FMUL.FTZ R22, R17, R10;          # [ 95][0002f8]
//     	FADD.FTZ R5, R5, R15;            # [ 96][000300]
//     	FMUL R4, R4, R21;                # [ 97][000308]
//     	FMUL.FMZ R17, R22, R9;           # [ 98][000310]
//     	FMUL R5, R5, R21;                # [ 99][000318]
//     	FMUL.FMZ R9, R22, R11;           # [100][000320]
//     	FMUL.FMZ R16, R22, R16;          # [101][000328]
//     	FMUL.FTZ R22, R19, R10;          # [102][000330]
//     	TEX.DC.NODEP.T R11, R4, R18, 0x0, 0x0, 2D, 0x1; # [103][000338]
//     	FMUL32I.FMZ R4, R25, 0x3a42d5b8; # [104][000340]
//     	FMUL32I.FMZ R5, R20, 0x3a42d5b8; # [105][000348]
//     	FFMA.FMZ R4, R20, c[0x9][0x10], R4; # [106][000350]
//     	FFMA.FMZ R5, R25, -c[0x9][0x10], R5; # [107][000358]
//     	FADD.FTZ R4, R4, R14;            # [108][000360]
//     	FADD.FTZ R5, R5, R15;            # [109][000368]
//     	FFMA.FMZ R19, R22, R24, R17;     # [110][000370]
//     	FMUL R4, R4, R21;                # [111][000378]
//     	FMUL R5, R5, R21;                # [112][000380]
//     	FFMA.FMZ R9, R22, R26, R9;       # [113][000388]
//     	FMUL32I.FMZ R26, R20, 0xba8c2b8d; # [114][000390]
//     	TEX.DC.NODEP.T R17, R4, R18, 0x0, 0x0, 2D, 0x1; # [115][000398]
//     	FMUL32I.FMZ R4, R25, 0x3a70c229; # [116][0003a0]
//     	FMUL32I.FMZ R5, R20, 0x3a70c229; # [117][0003a8]
//     	FFMA.FMZ R4, R20, c[0x9][0x1c], R4; # [118][0003b0]
//     	IPA.SC R24, a[0x310], R12;       # [119][0003b8] TEX1
//     	FFMA.FMZ R5, R25, -c[0x9][0x1c], R5; # [120][0003c0]
//     	FADD.FTZ R4, R4, R14;            # [121][0003c8]
//     	FADD.FTZ R5, R5, R15;            # [122][0003d0]
//     	FMUL R4, R4, R21;                # [123][0003d8]
//     	FFMA.FMZ R22, R22, R24, R16;     # [124][0003e0]
//     	FMUL R5, R5, R21;                # [125][0003e8]
//     	FMUL32I.FMZ R24, R25, 0xba8c2b8d; # [126][0003f0]
//     	TEX.DC.NODEP.T R16, R4, R18, 0x0, 0x0, 2D, 0x1; # [127][0003f8]
//     	FFMA.FMZ R5, R25, -c[0x9][0x18], R26; # [128][000400]
//     	FFMA.FMZ R4, R20, c[0x9][0x18], R24; # [129][000408]
//     	FADD.FTZ R4, R4, R14;            # [130][000410]
//     	IPA.SC R24, a[0x300], R12;       # [131][000418] TEX0
//     	FADD.FTZ R5, R5, R15;            # [132][000420]
//     	FMUL.FTZ R10, R2, R10;           # [133][000428]
//     	FMUL R4, R4, R21;                # [134][000430]
//     	FMUL R5, R5, R21;                # [135][000438]
//     	FFMA.FMZ R24, R10, R24, R22;     # [136][000440]
//     	TEX.DC.NODEP.P R2, R4, R18, 0x0, 0x0, 2D, 0x1; # [137][000448]
//     	FMUL32I.FMZ R4, R25, 0x38a1c70a; # [138][000450]
//     	FMUL32I.FMZ R5, R20, 0x38a1c70a; # [139][000458]
//     	FFMA.FMZ R4, R20, c[0x9][0x24], R4; # [140][000460]
//     	IPA.SC R22, a[0x304], R12;       # [141][000468] FIXED_FNC_TEXTURE_0_T
//     	FFMA.FMZ R5, R25, -c[0x9][0x24], R5; # [142][000470]
//     	FADD.FTZ R4, R4, R14;            # [143][000478]
//     	FADD.FTZ R5, R5, R15;            # [144][000480]
//     	FMUL R4, R4, R21;                # [145][000488]
//     	FFMA.FMZ R19, R10, R22, R19;     # [146][000490]
//     	FMUL R5, R5, R21;                # [147][000498]
//     	FADD.FTZ R22, R13, R6;           # [148][0004a0]
//     	FFMA.FMZ R3, R3, R7, c[0x9][0x68]; # [149][0004a8]
//     	TEX.DC.NODEP.T R13, R4, R18, 0x0, 0x0, 2D, 0x1; # [150][0004b0]
//     	FMUL32I.FMZ R4, R25, 0.000493871; # [151][0004b8]
//     	FMUL32I.FMZ R5, R20, 0.000493871; # [152][0004c0]
//     	IPA.SC R6, a[0x308], R12;        # [153][0004c8] FIXED_FNC_TEXTURE_0_R
//     	FFMA.FMZ R4, R20, c[0x9][0x20], R4; # [154][0004d0]
//     	FFMA.FMZ R5, R25, -c[0x9][0x20], R5; # [155][0004d8]
//     	FADD.FTZ R4, R4, R14;            # [156][0004e0]
//     	FADD.FTZ R5, R5, R15;            # [157][0004e8]
//     	FMUL R4, R4, R21;                # [158][0004f0]
//     	FMUL R5, R5, R21;                # [159][0004f8]
//     	FFMA.FMZ R6, R10, R6, R9;        # [160][000500]
//     	TEX.DC.NODEP.P R26, R4, R18, 0x0, 0x0, 2D, 0x1; # [161][000508]
//     	FADD.FTZ R22, R22, R8;           # [162][000510]
//     	FMUL32I.FMZ R9, R20, 0xba925e34; # [163][000518]
//     	FMUL32I.FMZ R4, R25, 0xba925e34; # [164][000520]
//     	FMUL32I.FMZ R5, R25, 0xba3b9d12; # [165][000528]
//     	FFMA.FMZ R10, R25, -c[0x9][0x2c], R9; # [166][000530]
//     	FFMA.FMZ R4, R20, c[0x9][0x2c], R4; # [167][000538]
//     	FFMA.FMZ R9, R20, c[0x9][0x28], R5; # [168][000540]
//     	FMUL32I.FMZ R8, R20, 0xba3b9d12; # [169][000548]
//     	FADD.FTZ R5, R10, R15;           # [170][000550]
//     	FADD.FTZ R4, R4, R14;            # [171][000558]
//     	FFMA.FMZ R8, R25, -c[0x9][0x28], R8; # [172][000560]
//     	FMUL R5, R5, R21;                # [173][000568]
//     	FMUL R4, R4, R21;                # [174][000570]
//     	TEX.DC.NODEP.T R25, R4, R18, 0x0, 0x0, 2D, 0x1; # [175][000578]
//     	FADD.FTZ R5, R8, R15;            # [176][000580]
//     	FADD.FTZ R4, R9, R14;            # [177][000588]
//     	FMUL R5, R5, R21;                # [178][000590]
//     	FMUL R4, R4, R21;                # [179][000598]
//     	TEX.DC.NODEP.T R20, R4, R18, 0x0, 0x0, 2D, 0x1; # [180][0005a0]
//     	FMUL R5, R15, R21;               # [181][0005a8]
//     	FMUL R4, R14, R21;               # [182][0005b0]
//     	TEX.DC.NODEP.T R21, R4, R18, 0x2, 0x2, 2D, 0x1; # [183][0005b8]
//     	FMUL.FTZ R4, R24, R24;           # [184][0005c0]
//     	TEX.NODEP.P R8, R14, 0x3, 0x3, 2D, 0x7; # [185][0005c8]
//     	FFMA.FTZ R4, R19, R19, R4;       # [186][0005d0]
//     	IPA.SC R15, a[0x330], R12;       # [187][0005d8] TEX3
//     	FFMA.FTZ R4, R6, R6, R4;         # [188][0005e0]
//     	FADD.FTZ R14, R22, R23;          # [189][0005e8]
//     	MUFU.RSQ R5, R4;                 # [190][0005f0]
//     	IPA.SC R22, a[0x334], R12;       # [191][0005f8] FIXED_FNC_TEXTURE_3_T
//     	FMUL.FTZ R4, R24, R5;            # [192][000600]
//     	FMUL.FTZ R6, R6, R5;             # [193][000608]
//     	FMUL.FTZ R5, R19, R5;            # [194][000610]
//     	F2F R18, -|RZ|;                  # [195][000618]
//     	FMUL32I.FTZ R19, R4, 0xbf398577; # [196][000620]
//     	FMUL.FTZ R15, R4, R15;           # [197][000628]
//     	FFMA.FTZ R23, R5, c[0x9][0x30], R19; # [198][000630]
//     	FFMA.FTZ R15, R5, R22, R15;      # [199][000638]
//     	F2F R19, -1;                     # [200][000640]
//     	FFMA.FTZ R23, R6, c[0x9][0x34], R23; # [201][000648]
//     	FADD.FTZ R14, R14, R11;          # [202][000650]
//     	IPA.SC R22, a[0x338], R12;       # [203][000658] FIXED_FNC_TEXTURE_3_R
//     	FCMP.GE R18, R18, R19, R23;      # [204][000660]
//     	F2F R11, |RZ|;                   # [205][000668]
//     	F2F R19, 1;                      # [206][000670]
//     	FADD.FTZ R14, R14, R17;          # [207][000678]
//     	FCMP.LE R17, R11, R19, R23;      # [208][000680]
//     	FFMA.FTZ.SAT R22, R6, R22, R15;  # [209][000688]
//     	FADD.FTZ R14, R14, R16;          # [210][000690]
//     	FADD.FTZ R24, R17, R18;          # [211][000698]
//     	MUFU.LG2 R22, |R22|;             # [212][0006a0]
//     	TEX.NODEP.P R16, R0, 0x9, 0x9, 2D, 0x7; # [213][0006a8]
//     	FADD.FTZ R14, R14, R2;           # [214][0006b0]
//     	FMUL.FMZ R22, R22, 30;           # [215][0006b8]
//     	F2F.SAT R23, R23;                # [216][0006c0]
//     	TEX.NODEP.P R0, R0, 0x7, 0x7, 2D, 0x7; # [217][0006c8]
//     	FADD.FTZ R13, R14, R13;          # [218][0006d0]
//     	RRO.EX2 R22, R22;                # [219][0006d8]
//     	FCMP.LTU R11, R11, R19, R3;      # [220][0006e0]
//     	IPA.SC R14, a[0x364], R12;       # [221][0006e8] FIXED_FNC_TEXTURE_6_T
//     	IPA.SC R12, a[0x360], R12;       # [222][0006f0] TEX6
//     	FADD.FTZ R15, R13, R26;          # [223][0006f8]
//     	MOV32I R26, -0x41000000;         # [224][000700]
//     	MUFU.EX2 R22, R22;               # [225][000708]
//     	FFMA.FMZ R13, R14, -0.5, -R26;   # [226][000710]
//     	FFMA.FMZ R12, R12, 0.5, -R26;    # [227][000718]
//     	FADD.FTZ R25, R15, R25;          # [228][000720]
//     	FMUL.FMZ.SAT R22, R22, R24;      # [229][000728]
//     	MOV R3, R11;                     # [230][000730]
//     	TEX.NODEP.P R12, R12, 0x4, 0x4, 2D; # [231][000738]
//     	FADD.FTZ R20, R25, R20;          # [232][000740]
//     	FADD.FTZ R21, R21, -1;           # [233][000748]
//     	FMUL32I.FMZ R20, R20, 0x3daaaaab; # [234][000750]
//     	FMUL32I.FTZ R25, R4, 0x3eed7e44; # [235][000758]
//     	FMUL.FMZ R8, R20, R8;            # [236][000760]
//     	FMUL.FMZ R9, R20, R9;            # [237][000768]
//     	FMUL.FMZ R10, R20, R10;          # [238][000770]
//     	FCMP.GE R8, R20, R8, R21;        # [239][000778]
//     	FCMP.GE R9, R20, R9, R21;        # [240][000780]
//     	FCMP.GE R10, R20, R10, R21;      # [241][000788]
//     	FMUL32I.FMZ R20, R23, 0x3f810622; # [242][000790]
//     	FMUL32I.FMZ R21, R23, 0x3f8190ef; # [243][000798]
//     	FMUL32I.FMZ R23, R23, 0x3f606fd2; # [244][0007a0]
//     	FFMA.FTZ R24, R5, -c[0x9][0x44], R25; # [245][0007a8]
//     	FMUL.FMZ R22, R22, 3.75;         # [246][0007b0]
//     	FFMA.FMZ R20, R20, R9, c[0x9][0x3c]; # [247][0007b8]
//     	FFMA.FMZ R25, R23, R10, c[0x9][0x40]; # [248][0007c0]
//     	FFMA.FTZ.SAT R24, R6, -c[0x9][0x48], R24; # [249][0007c8]
//     	FMUL32I.FTZ R23, R4, 0.668793;   # [250][0007d0]
//     	FFMA.FMZ R21, R21, R8, c[0x9][0x38]; # [251][0007d8]
//     	FMUL.FMZ R8, R8, R22;            # [252][0007e0]
//     	FMUL.FMZ R9, R9, R22;            # [253][0007e8]
//     	FMUL.FMZ R10, R10, R22;          # [254][0007f0]
//     	FFMA.FMZ R20, R24, c[0x9][0x4c], R20; # [255][0007f8]
//     	FFMA.FMZ R22, R24, c[0x9][0x4c], R25; # [256][000800]
//     	FFMA.FTZ R23, R5, -c[0x9][0x54], R23; # [257][000808]
//     	FFMA.FMZ R24, R24, c[0x9][0x50], R21; # [258][000810]
//     	FADD32I.FTZ R21, R7, -0.1;       # [259][000818]
//     	IPA.PASS.CENTROID R25, a[0x7c];  # [260][000820] POSITION_W
//     	FFMA.FTZ.SAT R26, R6, -c[0x9][0x58], R23; # [261][000828]
//     	MOV32I R7, 0x3f800000;           # [262][000830]
//     	FMUL.FMZ.SAT R23, R21, 5;        # [263][000838]
//     	FFMA.FMZ R21, R26, c[0x9][0x5c], R22; # [264][000840]
//     	FFMA.FMZ R22, R26, c[0x9][0x60], R20; # [265][000848]
//     	FFMA.FMZ R20, R26, c[0x9][0x64], R24; # [266][000850]
//     	MUFU.RCP R24, R25;               # [267][000858]
//     	FMUL.FMZ R25, R23, R16;          # [268][000860]
//     	FMUL.FMZ R16, R23, R17;          # [269][000868]
//     	FMUL.FMZ R8, R8, R25;            # [270][000870]
//     	FMUL.FMZ R17, R23, R18;          # [271][000878]
//     	FMUL.FMZ R23, R9, R16;           # [272][000880]
//     	IPA.SC.CENTROID R18, a[0x29c], R24; # [273][000888] COLOR_FRONT_SPELWLAR_ALPHA
//     	FMUL.FMZ R9, R10, R17;           # [274][000890]
//     	IPA.SC.CENTROID R16, a[0x294], R24; # [275][000898] COLOR_FRONT_SPELWLAR_GREEN
//     	FFMA.FMZ R10, R22, R1, R23;      # [276][0008a0]
//     	IPA.SC.CENTROID R17, a[0x290], R24; # [277][0008a8] COLOR_FRONT_SPELWLAR_RED
//     	F2F.SAT R23, R16;                # [278][0008b0]
//     	IPA.SC.CENTROID R22, a[0x298], R24; # [279][0008b8] COLOR_FRONT_SPELWLAR_BLUE
//     	F2F.SAT R16, R18;                # [280][0008c0]
//     	F2F.SAT R17, R17;                # [281][0008c8]
//     	FFMA.FMZ R18, R20, R0, R8;       # [282][0008d0]
//     	F2F.SAT R19, R22;                # [283][0008d8]
//     	FFMA.FMZ R20, R21, R2, R9;       # [284][0008e0]
//     	FADD.FTZ R8, R23, -R10;          # [285][0008e8]
//     	FADD.FTZ R9, R17, -R18;          # [286][0008f0]
//     	FFMA.FTZ R8, R16, R8, R10;       # [287][0008f8]
//     	FADD.FTZ R17, R19, -R20;         # [288][000900]
//     	FFMA.FTZ R10, R16, R9, R18;      # [289][000908]
//     	FFMA.FTZ R16, R16, R17, R20;     # [290][000910]
//     	FADD.FTZ R9, -R1, R13;           # [291][000918]
//     	FADD.FTZ R13, -R8, R13;          # [292][000920]
//     	FADD.FTZ R17, -R0, R12;          # [293][000928]
//     	FADD.FTZ R12, -R10, R12;         # [294][000930]
//     	FFMA.FMZ R9, R15, R9, R1;        # [295][000938]
//     	FFMA.FMZ R1, R15, R13, R8;       # [296][000940]
//     	FADD.FTZ R18, -R2, R14;          # [297][000948]
//     	FFMA.FMZ R8, R15, R17, R0;       # [298][000950]
//     	FADD.FTZ R14, -R16, R14;         # [299][000958]
//     	FFMA.FMZ R0, R15, R12, R10;      # [300][000960]
//     	FFMA.FMZ R10, R15, R18, R2;      # [301][000968]
//     	FFMA.FMZ R2, R15, R14, R16;      # [302][000970]
//     	EXIT;                            # [303][000978]
//     	END
//     END_SECTION
// END_SHADER
// 
