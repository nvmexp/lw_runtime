// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0xcc96fd699ef41771
//         UCODE_HASH: 0x9ecf2523fbeee2cc
//         POOL: APP
//         VERSION: 20
//         # USES: 8529
//         // Time: 133.509ms [11.645 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 25
//         USED_TEXTURE_BITS: 0x3
//         TEXTURE_SLOTS: 2
//         SAMPLER_SLOTS: 2
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             COLOR_DIFFUSE_RED    PERSPECTIVE
//             COLOR_DIFFUSE_GREEN  PERSPECTIVE
//             COLOR_DIFFUSE_BLUE   PERSPECTIVE
//             COLOR_SPELWLAR_RED   PERSPECTIVE
//             COLOR_SPELWLAR_GREEN PERSPECTIVE
//             COLOR_SPELWLAR_BLUE  PERSPECTIVE
//             COLOR_SPELWLAR_ALPHA PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX01_R              PERSPECTIVE
//             TEX01_Q              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX02_R              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX03_R              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX04_R              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//             TEX07_S              PERSPECTIVE
//             TEX07_T              PERSPECTIVE
//             TEX07_R              PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00025462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x0000aa2a      0x2a2aaa0a
//         0x2a2a2a2a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_2_x
        def c0, -0.50000000, 1.00000000, 0.20000000, 0.50000000 ; 0xbf000000 0x3f800000 0x3e4ccccd 0x3f000000
        def c2, 0.00000000, 1.00000000, 2.00000000, 0.00000000 ; 0x000000 0x3f800000 0x40000000 0x000000
        dcl t2.rgb
        dcl t3.rgb
        dcl t4.rgb
        dcl t5.rgb
        dcl t6.rgb
        dcl t7.rgb
        dcl t0.rg
        dcl t1
        dcl v0.rgb
        dcl v1
        dcl_2d s0
        dcl_2d s1
        add r0.xyz, -t1, c19
        rcp r0.w, c19.w
        mul_pp r0.xyz, r0, r0.w
        dp3_sat_pp r0.x, r0, r0
        add r1.xyz, -t1, c20
        rcp r0.w, c20.w
        mul_pp r1.xyz, r1, r0.w
        dp3_sat_pp r0.y, r1, r1
        add r1.xyz, -t1, c21
        rcp r0.w, c21.w
        mul_pp r1.xyz, r1, r0.w
        dp3_sat_pp r0.z, r1, r1
        add_pp r0.xyz, -r0, c0.y
        nrm_pp r1.xyz, t5
        texld_pp r2, t0, s0
        texld_pp r3, t0, s1
        add r3.xyz, r3, c0.x
        add_pp r3.xyz, r3, r3
        nrm_pp r4.xyz, r3
        dp3_sat_pp r0.w, r4, r1
        log_pp r1.x, r0.w
        nrm_pp r3.xyz, t6
        dp3_sat_pp r0.w, r4, r3
        log_pp r1.y, r0.w
        nrm_pp r3.xyz, t7
        dp3_sat_pp r0.w, r4, r3
        log_pp r1.z, r0.w
        mul_pp r1.xyz, r1, c4.w
        exp_pp r3.x, r1.x
        exp_pp r3.y, r1.y
        exp_pp r3.z, r1.z
        mul_pp r1.xyz, r3.w, r3
        mul_pp r1.xyz, r0, r1
        dp3_pp r3.x, r4, t2
        dp3_pp r3.y, r4, t3
        dp3_pp r3.z, r4, t4
        add_sat_pp r5.xyz, r3, c0.w
        add r3.xyz, -r3, c0.z
        mul_pp r5.xyz, r1, r5
        cmp_pp r1.xyz, r3, r5, r1
        mul_pp r3.xyz, r1.x, c3
        mov r0.w, c3.w
        cmp_pp r3.xyz, -r0.w, c2.x, r3
        mad_pp r1.xyw, r1.y, c4.xyz, r3.xyz
        add r5.xy, -r0.w, c2.yzzw
        cmp_pp r1.xyw, r5.x, r3.xyz, r1
        mad_pp r3.xyz, r1.z, c5, r1.xyw
        cmp_pp r1.xyz, r5.y, r1.xyw, r3
        mul_pp r1.xyz, r1, t1.w
        nrm_pp r3.xyz, t2
        dp3_sat_pp r1.w, r4, r3
        mul_pp r3.xyz, r1.w, c3
        mul_pp r3.xyz, r0.x, r3
        cmp_pp r3.xyz, -r0.w, c2.x, r3
        nrm_pp r6.xyz, t3
        dp3_sat_pp r1.w, r4, r6
        mul_pp r6.xyz, r1.w, c4
        mad_pp r0.xyw, r6.xyz, r0.y, r3.xyz
        cmp_pp r0.xyw, r5.x, r3.xyz, r0
        nrm_pp r3.xyz, t4
        dp3_sat_pp r1.w, r4, r3
        mul_pp r3.xyz, r1.w, c5
        mad_pp r3.xyz, r3, r0.z, r0.xyw
        cmp_pp r0.xyz, r5.y, r0.xyw, r3
        add_pp r0.xyz, r0, c1
        max_pp r3.xyz, r0, c2.x
        mul_pp r0.xyz, r2, v0
        mul_pp r2.w, r2.w, c1.w
        mad_pp r0.xyz, r3, r0, r1
        lrp_pp r2.xyz, v1.w, v1, r0
        mov_pp oC0, r2
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0xbf000000 0x3f800000
//         0x3e4ccccd 0x3f000000 0x05000051 0xa00f0002
//         0x00000000 0x3f800000 0x40000000 0x00000000
//         0x0200001f 0x80000000 0xb0070002 0x0200001f
//         0x80000000 0xb0070003 0x0200001f 0x80000000
//         0xb0070004 0x0200001f 0x80000000 0xb0070005
//         0x0200001f 0x80000000 0xb0070006 0x0200001f
//         0x80000000 0xb0070007 0x0200001f 0x80000000
//         0xb0030000 0x0200001f 0x80000000 0xb00f0001
//         0x0200001f 0x80000000 0x90070000 0x0200001f
//         0x80000000 0x900f0001 0x0200001f 0x90000000
//         0xa00f0800 0x0200001f 0x90000000 0xa00f0801
//         0x03000002 0x80070000 0xb1e40001 0xa0e40013
//         0x02000006 0x80080000 0xa0ff0013 0x03000005
//         0x80270000 0x80e40000 0x80ff0000 0x03000008
//         0x80310000 0x80e40000 0x80e40000 0x03000002
//         0x80070001 0xb1e40001 0xa0e40014 0x02000006
//         0x80080000 0xa0ff0014 0x03000005 0x80270001
//         0x80e40001 0x80ff0000 0x03000008 0x80320000
//         0x80e40001 0x80e40001 0x03000002 0x80070001
//         0xb1e40001 0xa0e40015 0x02000006 0x80080000
//         0xa0ff0015 0x03000005 0x80270001 0x80e40001
//         0x80ff0000 0x03000008 0x80340000 0x80e40001
//         0x80e40001 0x03000002 0x80270000 0x81e40000
//         0xa0550000 0x02000024 0x80270001 0xb0e40005
//         0x03000042 0x802f0002 0xb0e40000 0xa0e40800
//         0x03000042 0x802f0003 0xb0e40000 0xa0e40801
//         0x03000002 0x80070003 0x80e40003 0xa0000000
//         0x03000002 0x80270003 0x80e40003 0x80e40003
//         0x02000024 0x80270004 0x80e40003 0x03000008
//         0x80380000 0x80e40004 0x80e40001 0x0200000f
//         0x80210001 0x80ff0000 0x02000024 0x80270003
//         0xb0e40006 0x03000008 0x80380000 0x80e40004
//         0x80e40003 0x0200000f 0x80220001 0x80ff0000
//         0x02000024 0x80270003 0xb0e40007 0x03000008
//         0x80380000 0x80e40004 0x80e40003 0x0200000f
//         0x80240001 0x80ff0000 0x03000005 0x80270001
//         0x80e40001 0xa0ff0004 0x0200000e 0x80210003
//         0x80000001 0x0200000e 0x80220003 0x80550001
//         0x0200000e 0x80240003 0x80aa0001 0x03000005
//         0x80270001 0x80ff0003 0x80e40003 0x03000005
//         0x80270001 0x80e40000 0x80e40001 0x03000008
//         0x80210003 0x80e40004 0xb0e40002 0x03000008
//         0x80220003 0x80e40004 0xb0e40003 0x03000008
//         0x80240003 0x80e40004 0xb0e40004 0x03000002
//         0x80370005 0x80e40003 0xa0ff0000 0x03000002
//         0x80070003 0x81e40003 0xa0aa0000 0x03000005
//         0x80270005 0x80e40001 0x80e40005 0x04000058
//         0x80270001 0x80e40003 0x80e40005 0x80e40001
//         0x03000005 0x80270003 0x80000001 0xa0e40003
//         0x02000001 0x80080000 0xa0ff0003 0x04000058
//         0x80270003 0x81ff0000 0xa0000002 0x80e40003
//         0x04000004 0x802b0001 0x80550001 0xa0a40004
//         0x80a40003 0x03000002 0x80030005 0x81ff0000
//         0xa0e90002 0x04000058 0x802b0001 0x80000005
//         0x80a40003 0x80e40001 0x04000004 0x80270003
//         0x80aa0001 0xa0e40005 0x80f40001 0x04000058
//         0x80270001 0x80550005 0x80f40001 0x80e40003
//         0x03000005 0x80270001 0x80e40001 0xb0ff0001
//         0x02000024 0x80270003 0xb0e40002 0x03000008
//         0x80380001 0x80e40004 0x80e40003 0x03000005
//         0x80270003 0x80ff0001 0xa0e40003 0x03000005
//         0x80270003 0x80000000 0x80e40003 0x04000058
//         0x80270003 0x81ff0000 0xa0000002 0x80e40003
//         0x02000024 0x80270006 0xb0e40003 0x03000008
//         0x80380001 0x80e40004 0x80e40006 0x03000005
//         0x80270006 0x80ff0001 0xa0e40004 0x04000004
//         0x802b0000 0x80a40006 0x80550000 0x80a40003
//         0x04000058 0x802b0000 0x80000005 0x80a40003
//         0x80e40000 0x02000024 0x80270003 0xb0e40004
//         0x03000008 0x80380001 0x80e40004 0x80e40003
//         0x03000005 0x80270003 0x80ff0001 0xa0e40005
//         0x04000004 0x80270003 0x80e40003 0x80aa0000
//         0x80f40000 0x04000058 0x80270000 0x80550005
//         0x80f40000 0x80e40003 0x03000002 0x80270000
//         0x80e40000 0xa0e40001 0x0300000b 0x80270003
//         0x80e40000 0xa0000002 0x03000005 0x80270000
//         0x80e40002 0x90e40000 0x03000005 0x80280002
//         0x80ff0002 0xa0ff0001 0x04000004 0x80270000
//         0x80e40003 0x80e40000 0x80e40001 0x04000012
//         0x80270002 0x90ff0001 0x90e40001 0x80e40000
//         0x02000001 0x802f0800 0x80e40002 0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         # USER FLOAT CONST: c[6][542] = 0x3d888889 // 0.06666667
//         # USER FLOAT CONST: c[6][543] = 0x3e088889 // 0.13333334
//         # USER FLOAT CONST: c[6][544] = 0x3e54d4d5 // 0.20784314
//         # USER FLOAT CONST: c[6][545] = 0x3f800000 // 1.00000000
//         ## USER CONST histogram
//         ##    ~c1.x -> c[6][542] = 100.00%@0.06666667
//         ##    ~c1.y -> c[6][543] = 100.00%@0.13333334
//         ##    ~c1.z -> c[6][544] = 100.00%@0.20784314
//         ##    ~c1.w -> c[6][545] = 100.00%@1.00000000
//         ##     c3.x -> c[6][550] = 69.50%@1.07411766 30.50%@1.10000002
//         ##     c3.y -> c[6][551] = 69.50%@1.08274508 30.50%@0.24588236
//         ##     c3.z -> c[6][552] = 69.50%@0.78941176 30.50%@0.20274510
//         ##     c3.w -> c[6][553] = 69.50%@2.00000000 30.50%@3.00000000
//         ##     c4.x -> c[6][554] = 97.56%@1.07411766 2.44%@1.10000002
//         ##     c4.y -> c[6][555] = 97.56%@1.08274508 2.44%@0.24588236
//         ##     c4.z -> c[6][556] = 97.56%@0.78941176 2.44%@0.20274510
//         ##     c4.w -> c[6][557] = 32.92%@40.00000000 15.86%@10.00000000 14.63%@100.00000000 12.19%@80.00000000 4.88%@20.00000000 2.44%@60.00000000 1.22%@75.00000000
//         ##     c5.x -> c[6][558] = 92.68%@1.07411766 7.32%@1.10000002
//         ##     c5.y -> c[6][559] = 92.68%@1.08274508 7.32%@0.24588236
//         ##     c5.z -> c[6][560] = 92.68%@0.78941176 7.32%@0.20274510
//         ##     c19.x -> c[6][614] = 2.44%@-407.28494262 1.23%@19.65551568 1.22%@-211.25669860 1.22%@5.85772656 1.22%@-383.99996952 1.22%@173.37123108 1.22%@1.62913500
//         ##     c19.y -> c[6][615] = 2.44%@-136.93870544 1.23%@256.42706300 1.22%@-142.06321717 1.22%@275.02658081 1.22%@527.99993896 1.22%@-562.17279052 1.22%@260.28390502
//         ##     c19.z -> c[6][616] = 2.45%@147.12107850 2.44%@727.56048584 2.44%@711.99993896 1.22%@703.99993896 1.22%@710.60931396 1.22%@108.21385956 1.22%@145.80760192
//         ##     c19.w -> c[6][617] = 37.80%@418.21655274 13.41%@209.12193298 12.19%@384.00000000 7.33%@211.02436829 4.88%@245.02636719 3.66%@339.75582888 1.22%@248.01087952
//         ##     c20.x -> c[6][618] = 1.23%@-146.29075622 1.22%@19.27380180 1.22%@-7.39892532 1.22%@-383.99996952 1.22%@647.99993896 1.22%@-535.99993896 1.22%@-238.54188536
//         ##     c20.y -> c[6][619] = 2.44%@-87.99999240 1.23%@247.85292056 1.22%@148.46775816 1.22%@109.40135956 1.22%@-463.99996952 1.22%@767.99993896 1.22%@131.98655704
//         ##     c20.z -> c[6][620] = 4.88%@711.99993896 2.44%@671.99993896 1.23%@140.51170348 1.22%@163.77439880 1.22%@139.19822692 1.22%@207.99998472 1.22%@108.51171112
//         ##     c20.w -> c[6][621] = 34.14%@418.21655274 17.07%@384.00000000 14.63%@236.40093996 9.75%@248.01087952 2.45%@245.02636719 2.44%@291.37365724 1.22%@209.12193298
//         ##     c21.x -> c[6][622] = 7.32%@344.26364136 2.45%@154.91185000 2.44%@-383.99996952 1.22%@-615.99993896 1.22%@407.99996952 1.22%@15.05969143 1.22%@-1963.95373536
//         ##     c21.y -> c[6][623] = 21.95%@-109.65404512 7.32%@-988.64984132 2.45%@20.10503960 2.44%@-87.99999240 2.44%@-423.99996952 1.22%@197.79124448 1.22%@748.02032471
//         ##     c21.z -> c[6][624] = 23.17%@175.99998472 13.41%@176.29393006 7.32%@674.13861084 4.88%@671.99993896 2.45%@108.51171112 1.22%@108.21385956 1.22%@58.21973420
//         ##     c21.w -> c[6][625] = 28.06%@248.01087952 20.73%@384.00000000 8.54%@211.02436829 3.66%@326.70181272 3.66%@236.40093996 2.44%@480.00000000 2.44%@272.53942872
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x512x0,11/0,DXT23_A8R8G8B8,0,0,0), 0x2fb0f338,0x000001a1
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x256x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x5b6df0b6,0x000001a1
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x213eb8ea,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xab847fb5,0x000001a0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x582d0713,0x00000a90
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x8862a74d,0x00000a90
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xa08538eb,0x00000410
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x562e4c0d,0x00000410
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x1a943c7a,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xc491cc76,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0xff2caa99,0x00000340
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x96657a9a,0x00000340
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x472dbd33,0x000001a0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x7573d455,0x000001a0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x3f5626f8,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x9dfa4ece,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xbfa53177,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xc7696e23,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x5c4c0596,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x2635c202,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xeed0580f,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x9c5fab5f,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xd088ae9f,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4bb8fb40,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x638c6175,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x7a6273b4,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0xf163527a,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,128x128x0,8/0,DXT45_A8R8G8B8,0,0,0), 0x79da3d78,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x128x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xd96a85da,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x64x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xb2aa8b0e,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x0c77d9ac,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xac1322ab,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0x6386c831,0x00000138
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3b8f4fe8,0x00000138
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x694a1bc1,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xb18d295b,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT1_A1R5G5B5,0,0,0), 0x06448080,0x00000068
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x6dc18c4c,0x00000068
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT1_A1R5G5B5,0,0,0), 0xf46121d0,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4f6ca060,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,1024x1024x0,11/0,DXT1_A1R5G5B5,0,0,0), 0x4bace612,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0xe10f5b20,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x5cde3b6f,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,512x512x0,10/0,DXT45_A8R8G8B8,0,0,0), 0x0333b287,0x000000d0
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         RENDERTARGETINFO: 1,5120x3200,A16B16G16R16
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0x6e766191,0x000000d0
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Wrap,0.00000000,256x256x0,9/0,DXT23_A8R8G8B8,0,0,0), 0x144ba56a,0x000000d0
//         DXTWARN! DXT23_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x10 0 4 "COL0")
//         (0x10 0 4 "COL1")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "TEX0")
//         (0x10 0 4 "TEX1")
//         (0x10 0 4 "TEX2")
//         (0x10 0 4 "TEX3")
//         (0x10 0 4 "TEX4")
//         (0x10 0 4 "TEX5")
//         (0x10 0 4 "TEX6")
//         (0x10 0 4 "TEX7")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 1 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 4 : 
//          (attr 0 1 4) (attr 1 2 4) (attr 3 1 4) (attr 4 10 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         addr r5.xyz, -v5, c[6][557]
//         rcpr r5.w, c[6][557].w
//         mulh r5.xyz, r5, r5.w
//         dp3h_sat r5.x, r5, r5
//         addr r6.xyz, -v5, c[6][558]
//         rcpr r5.w, c[6][558].w
//         mulh r6.xyz, r6, r5.w
//         dp3h_sat r5.y, r6, r6
//         addr r6.xyz, -v5, c[6][559]
//         rcpr r5.w, c[6][559].w
//         mulh r6.xyz, r6, r5.w
//         dp3h_sat r5.z, r6, r6
//         addh r5.xyz, -r5, constant(-0.50000000, 1.00000000, 0.20000000, 0.50000000).y
//         nrmh r6.xyz, v9
//         texh r7, v4.xyzz, #0, #0, 2D
//         texh r8, v4.xyzz, #1, #1, 2D
//         addr r8.xyz, r8, constant(-0.50000000, 1.00000000, 0.20000000, 0.50000000).x
//         addh r8.xyz, r8, r8
//         nrmh r9.xyz, r8
//         dp3h_sat r5.w, r9, r6
//         lg2h r6.x, |r5.w|
//         nrmh r8.xyz, v10
//         dp3h_sat r5.w, r9, r8
//         lg2h r6.y, |r5.w|
//         nrmh r8.xyz, v11
//         dp3h_sat r5.w, r9, r8
//         lg2h r6.z, |r5.w|
//         mulh r6.xyz, r6, c[6][542].w
//         ex2h r8.x, r6.x
//         ex2h r8.y, r6.y
//         ex2h r8.z, r6.z
//         mulh r6.xyz, r8.w, r8
//         mulh r6.xyz, r5, r6
//         dp3h r8.x, r9, v6
//         dp3h r8.y, r9, v7
//         dp3h r8.z, r9, v8
//         addh_sat r10.xyz, r8, constant(-0.50000000, 1.00000000, 0.20000000, 0.50000000).w
//         addr r8.xyz, -r8, constant(-0.50000000, 1.00000000, 0.20000000, 0.50000000).z
//         mulh r10.xyz, r6, r10
//         cmph r6.xyz, r8, r10, r6
//         mulh r8.xyz, r6.x, c[6][541]
//         movr r5.w, c[6][541].w
//         cmph r8.xyz, -r5.w, constant(0.00000000, 1.00000000, 2.00000000, 0.00000000).x, r8
//         madh r6.xyw, r6.y, c[6][542].xyzz, r8.xyzz
//         addr r10.xy, -r5.w, constant(0.00000000, 1.00000000, 2.00000000, 0.00000000).yzzw
//         cmph r6.xyw, r10.x, r8.xyzz, r6
//         madh r8.xyz, r6.z, c[6][543], r6.xyww
//         cmph r6.xyz, r10.y, r6.xyww, r8
//         mulh r6.xyz, r6, v5.w
//         nrmh r8.xyz, v6
//         dp3h_sat r6.w, r9, r8
//         mulh r8.xyz, r6.w, c[6][541]
//         mulh r8.xyz, r5.x, r8
//         cmph r8.xyz, -r5.w, constant(0.00000000, 1.00000000, 2.00000000, 0.00000000).x, r8
//         nrmh r11.xyz, v7
//         dp3h_sat r6.w, r9, r11
//         mulh r11.xyz, r6.w, c[6][542]
//         madh r5.xyw, r11.xyzz, r5.y, r8.xyzz
//         cmph r5.xyw, r10.x, r8.xyzz, r5
//         nrmh r8.xyz, v8
//         dp3h_sat r6.w, r9, r8
//         mulh r8.xyz, r6.w, c[6][543]
//         madh r8.xyz, r8, r5.z, r5.xyww
//         cmph r5.xyz, r10.y, r5.xyww, r8
//         movr r44, c[6][539]
//         movr r44.x, constant(0.06666667, 0.06666667, 0.06666667, 0.06666667).x
//         movr r44.y, constant(0.13333334, 0.13333334, 0.13333334, 0.13333334).x
//         movr r44.z, constant(0.20784314, 0.20784314, 0.20784314, 0.20784314).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         addh r5.xyz, r5, r44
//         maxh r8.xyz, r5, constant(0.00000000, 1.00000000, 2.00000000, 0.00000000).x
//         mulh r5.xyz, r7, v1
//         movr r44, c[6][539].w
//         movr r44.x, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.y, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.z, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         movr r44.w, constant(1.00000000, 1.00000000, 1.00000000, 1.00000000).x
//         mulh r7.w, r7.w, r44
//         madh r5.xyz, r8, r5, r6
//         lrph r7.xyz, v2.w, v2, r5
//         movh r0, r7
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R10, R0;                # [  1][000008]
//     	IPA.SC R5, a[0x304], R10;        # [  2][000010] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R4, a[0x300], R10;        # [  3][000018] TEX0
//     	TEX.NODEP.T R0, R4, 0x1, 0x1, 2D; # [  4][000020]
//     	IPA.SC R18, a[0x310], R10;       # [  5][000028] TEX1
//     	IPA.SC R19, a[0x314], R10;       # [  6][000030] FIXED_FNC_TEXTURE_1_T
//     	MOV R7, c[0x6][0x22fc];          # [  7][000038]
//     	IPA.SC R20, a[0x318], R10;       # [  8][000040] FIXED_FNC_TEXTURE_1_R
//     	MOV R6, c[0x6][0x22dc];          # [  9][000048]
//     	MUFU.RCP R9, R7;                 # [ 10][000050]
//     	FADD.FTZ R7, -R18, c[0x6][0x22d0]; # [ 11][000058]
//     	MUFU.RCP R6, R6;                 # [ 12][000060]
//     	FADD.FTZ R17, -R19, c[0x6][0x22d4]; # [ 13][000068]
//     	MOV R8, c[0x6][0x22ec];          # [ 14][000070]
//     	FADD.FTZ R21, -R20, c[0x6][0x22d8]; # [ 15][000078]
//     	FMUL.FMZ R14, R7, R6;            # [ 16][000080]
//     	FMUL.FMZ R7, R17, R6;            # [ 17][000088]
//     	MUFU.RCP R8, R8;                 # [ 18][000090]
//     	FADD.FTZ R13, -R19, c[0x6][0x22e4]; # [ 19][000098]
//     	FADD.FTZ R15, -R18, c[0x6][0x22e0]; # [ 20][0000a0]
//     	FMUL.FMZ R6, R21, R6;            # [ 21][0000a8]
//     	FADD.FTZ R21, -R20, c[0x6][0x22e8]; # [ 22][0000b0]
//     	FMUL.FMZ R17, R15, R8;           # [ 23][0000b8]
//     	FMUL.FMZ R13, R13, R8;           # [ 24][0000c0]
//     	FMUL.FMZ R8, R21, R8;            # [ 25][0000c8]
//     	FADD.FTZ R18, -R18, c[0x6][0x22f0]; # [ 26][0000d0]
//     	FADD.FTZ R21, -R19, c[0x6][0x22f4]; # [ 27][0000d8]
//     	FADD.FTZ R20, -R20, c[0x6][0x22f8]; # [ 28][0000e0]
//     	FMUL.FMZ R19, R18, R9;           # [ 29][0000e8]
//     	FMUL.FMZ R18, R21, R9;           # [ 30][0000f0]
//     	FMUL.FMZ R9, R20, R9;            # [ 31][0000f8]
//     	FMUL.FTZ R20, R14, R14;          # [ 32][000100]
//     	IPA.SC R12, a[0x350], R10;       # [ 33][000108] TEX5
//     	FMUL.FTZ R21, R17, R17;          # [ 34][000110]
//     	FFMA.FTZ R17, R7, R7, R20;       # [ 35][000118]
//     	IPA.SC R14, a[0x360], R10;       # [ 36][000120] TEX6
//     	IPA.SC R16, a[0x354], R10;       # [ 37][000128] FIXED_FNC_TEXTURE_5_T
//     	FFMA.FTZ R13, R13, R13, R21;     # [ 38][000130]
//     	FFMA.FTZ.SAT R6, R6, R6, R17;    # [ 39][000138]
//     	IPA.SC R15, a[0x364], R10;       # [ 40][000140] FIXED_FNC_TEXTURE_6_T
//     	FMUL.FTZ R20, R19, R19;          # [ 41][000148]
//     	FMUL.FTZ R17, R12, R12;          # [ 42][000150]
//     	IPA.SC R11, a[0x358], R10;       # [ 43][000158] FIXED_FNC_TEXTURE_5_R
//     	IPA.SC R22, a[0x370], R10;       # [ 44][000160] TEX7
//     	FFMA.FTZ.SAT R8, R8, R8, R13;    # [ 45][000168]
//     	FMUL.FTZ R21, R14, R14;          # [ 46][000170]
//     	IPA.SC R7, a[0x368], R10;        # [ 47][000178] FIXED_FNC_TEXTURE_6_R
//     	FFMA.FTZ R18, R18, R18, R20;     # [ 48][000180]
//     	FFMA.FTZ R13, R16, R16, R17;     # [ 49][000188]
//     	IPA.SC R19, a[0x374], R10;       # [ 50][000190] FIXED_FNC_TEXTURE_7_T
//     	FFMA.FTZ R17, R15, R15, R21;     # [ 51][000198]
//     	FFMA.FTZ.SAT R9, R9, R9, R18;    # [ 52][0001a0]
//     	FFMA.FTZ R13, R11, R11, R13;     # [ 53][0001a8]
//     	FMUL.FTZ R18, R22, R22;          # [ 54][0001b0]
//     	IPA.SC R20, a[0x378], R10;       # [ 55][0001b8] FIXED_FNC_TEXTURE_7_R
//     	FFMA.FTZ R17, R7, R7, R17;       # [ 56][0001c0]
//     	MUFU.RSQ R21, R13;               # [ 57][0001c8]
//     	FFMA.FTZ R18, R19, R19, R18;     # [ 58][0001d0]
//     	MUFU.RSQ R13, R17;               # [ 59][0001d8]
//     	FMUL.FTZ R17, R16, R21;          # [ 60][0001e0]
//     	FFMA.FTZ R16, R20, R20, R18;     # [ 61][0001e8]
//     	FMUL.FTZ R14, R14, R13;          # [ 62][0001f0]
//     	FMUL.FTZ R18, R15, R13;          # [ 63][0001f8]
//     	FMUL.FTZ R13, R7, R13;           # [ 64][000200]
//     	FMUL.FTZ R12, R12, R21;          # [ 65][000208]
//     	FMUL.FTZ R11, R11, R21;          # [ 66][000210]
//     	FADD.FTZ R0, R0, -0.5;           # [ 67][000218]
//     	FADD.FTZ R1, R1, -0.5;           # [ 68][000220]
//     	FADD.FTZ R2, R2, -0.5;           # [ 69][000228]
//     	FADD.FTZ R7, R0, R0;             # [ 70][000230]
//     	FADD.FTZ R15, R1, R1;            # [ 71][000238]
//     	FADD.FTZ R21, R2, R2;            # [ 72][000240]
//     	FMUL.FTZ R0, R7, R7;             # [ 73][000248]
//     	MUFU.RSQ R1, R16;                # [ 74][000250]
//     	IPA.SC R16, a[0x320], R10;       # [ 75][000258] TEX2
//     	FFMA.FTZ R2, R15, R15, R0;       # [ 76][000260]
//     	FMUL.FTZ R0, R22, R1;            # [ 77][000268]
//     	FMUL.FTZ R19, R19, R1;           # [ 78][000270]
//     	FFMA.FTZ R2, R21, R21, R2;       # [ 79][000278]
//     	FMUL.FTZ R22, R20, R1;           # [ 80][000280]
//     	IPA.SC R1, a[0x324], R10;        # [ 81][000288] FIXED_FNC_TEXTURE_2_T
//     	MUFU.RSQ R23, R2;                # [ 82][000290]
//     	FMUL.FTZ R20, R16, R16;          # [ 83][000298]
//     	IPA.SC R2, a[0x328], R10;        # [ 84][0002a0] FIXED_FNC_TEXTURE_2_R
//     	FMUL.FTZ R7, R7, R23;            # [ 85][0002a8]
//     	FMUL.FTZ R15, R15, R23;          # [ 86][0002b0]
//     	FFMA.FTZ R20, R1, R1, R20;       # [ 87][0002b8]
//     	FMUL.FTZ R24, R7, R12;           # [ 88][0002c0]
//     	FMUL.FTZ R12, R21, R23;          # [ 89][0002c8]
//     	FMUL.FTZ R21, R7, R14;           # [ 90][0002d0]
//     	FFMA.FTZ R14, R2, R2, R20;       # [ 91][0002d8]
//     	FMUL.FTZ R23, R7, R0;            # [ 92][0002e0]
//     	FFMA.FTZ R20, R15, R18, R21;     # [ 93][0002e8]
//     	MUFU.RSQ R0, R14;                # [ 94][0002f0]
//     	FFMA.FTZ R14, R15, R19, R23;     # [ 95][0002f8]
//     	FMUL.FTZ R21, R7, R16;           # [ 96][000300]
//     	FMUL.FTZ R19, R16, R0;           # [ 97][000308]
//     	IPA.SC R18, a[0x330], R10;       # [ 98][000310] TEX3
//     	FMUL.FTZ R16, R1, R0;            # [ 99][000318]
//     	FMUL.FTZ R19, R7, R19;           # [100][000320]
//     	FFMA.FTZ R1, R15, R1, R21;       # [101][000328]
//     	IPA.SC R21, a[0x334], R10;       # [102][000330] FIXED_FNC_TEXTURE_3_T
//     	FFMA.FTZ R23, R15, R16, R19;     # [103][000338]
//     	FMUL.FTZ R16, R18, R18;          # [104][000340]
//     	IPA.SC R19, a[0x338], R10;       # [105][000348] FIXED_FNC_TEXTURE_3_R
//     	FFMA.FTZ R17, R15, R17, R24;     # [106][000350]
//     	FMUL.FTZ R24, R7, R18;           # [107][000358]
//     	FFMA.FTZ R16, R21, R21, R16;     # [108][000360]
//     	FFMA.FTZ.SAT R17, R12, R11, R17; # [109][000368]
//     	FFMA.FTZ.SAT R14, R12, R22, R14; # [110][000370]
//     	FFMA.FTZ R16, R19, R19, R16;     # [111][000378]
//     	IPA.SC R22, a[0x344], R10;       # [112][000380] FIXED_FNC_TEXTURE_4_T
//     	FMUL.FTZ R0, R2, R0;             # [113][000388]
//     	MUFU.RSQ R16, R16;               # [114][000390]
//     	FFMA.FTZ R2, R12, R2, R1;        # [115][000398]
//     	FFMA.FTZ.SAT R20, R12, R13, R20; # [116][0003a0]
//     	FMUL.FTZ R11, R18, R16;          # [117][0003a8]
//     	FFMA.FTZ R18, R15, R21, R24;     # [118][0003b0]
//     	FMUL.FTZ R21, R21, R16;          # [119][0003b8]
//     	FMUL.FTZ R11, R7, R11;           # [120][0003c0]
//     	IPA.SC R13, a[0x348], R10;       # [121][0003c8] FIXED_FNC_TEXTURE_4_R
//     	FFMA.FTZ.SAT R0, R12, R0, R23;   # [122][0003d0]
//     	FFMA.FTZ R11, R15, R21, R11;     # [123][0003d8]
//     	IPA.SC R21, a[0x340], R10;       # [124][0003e0] TEX4
//     	FMUL.FTZ R16, R19, R16;          # [125][0003e8]
//     	FFMA.FTZ R18, R12, R19, R18;     # [126][0003f0]
//     	FADD.FTZ R19, -R6, 1;            # [127][0003f8]
//     	FMUL.FTZ R1, R21, R21;           # [128][000400]
//     	FMUL.FTZ R24, R7, R21;           # [129][000408]
//     	FFMA.FTZ R1, R22, R22, R1;       # [130][000410]
//     	FFMA.FTZ R1, R13, R13, R1;       # [131][000418]
//     	MUFU.RSQ R1, R1;                 # [132][000420]
//     	FMUL.FTZ R23, R21, R1;           # [133][000428]
//     	MUFU.LG2 R21, |R17|;             # [134][000430]
//     	FFMA.FTZ R17, R15, R22, R24;     # [135][000438]
//     	FMUL.FTZ R7, R7, R23;            # [136][000440]
//     	FMUL.FMZ R21, R21, c[0x6][0x21ec]; # [137][000448]
//     	FMUL.FTZ R22, R22, R1;           # [138][000450]
//     	RRO.EX2 R21, R21;                # [139][000458]
//     	FFMA.FTZ R15, R15, R22, R7;      # [140][000460]
//     	MUFU.LG2 R22, |R20|;             # [141][000468]
//     	MUFU.EX2 R7, R21;                # [142][000470]
//     	FADD.FTZ.SAT R21, R2, 0.5;       # [143][000478]
//     	FMUL.FMZ R6, R3, R7;             # [144][000480]
//     	FMUL.FMZ R20, R19, R6;           # [145][000488]
//     	TEX.NODEP.T R4, R4, 0x0, 0x0, 2D; # [146][000490]
//     	FMUL.FMZ R22, R22, c[0x6][0x21ec]; # [147][000498]
//     	FADD32I.FTZ R23, -R2, 0.2;       # [148][0004a0]
//     	FFMA.FTZ.SAT R2, R12, R16, R11;  # [149][0004a8]
//     	RRO.EX2 R16, R22;                # [150][0004b0]
//     	FMUL.FMZ R21, R20, R21;          # [151][0004b8]
//     	FADD.FTZ R8, -R8, 1;             # [152][0004c0]
//     	MUFU.EX2 R16, R16;               # [153][0004c8]
//     	FCMP.GE R11, R21, R20, R23;      # [154][0004d0]
//     	FADD.FTZ.SAT R22, R18, 0.5;      # [155][0004d8]
//     	FMUL.FMZ R20, R3, R16;           # [156][0004e0]
//     	FADD32I.FTZ R21, -R18, 0.2;      # [157][0004e8]
//     	FMUL.FMZ R18, R0, c[0x6][0x21d0]; # [158][0004f0]
//     	FMUL.FMZ R20, R8, R20;           # [159][0004f8]
//     	FMUL.FMZ R16, R0, c[0x6][0x21d8]; # [160][000500]
//     	FMUL.FMZ R0, R0, c[0x6][0x21d4]; # [161][000508]
//     	FMUL.FMZ R22, R20, R22;          # [162][000510]
//     	FMUL.FMZ R16, R19, R16;          # [163][000518]
//     	FMUL.FMZ R0, R19, R0;            # [164][000520]
//     	FMUL.FMZ R18, R19, R18;          # [165][000528]
//     	FCMP.GE R20, R22, R20, R21;      # [166][000530]
//     	FMUL.FMZ R21, R2, c[0x6][0x21e0]; # [167][000538]
//     	FMUL.FMZ R19, R2, c[0x6][0x21e4]; # [168][000540]
//     	FMUL.FMZ R2, R2, c[0x6][0x21e8]; # [169][000548]
//     	FCMP.LE R16, RZ, R16, c[0x6][0x21dc]; # [170][000550]
//     	FCMP.LE R0, RZ, R0, c[0x6][0x21dc]; # [171][000558]
//     	FCMP.LE R18, RZ, R18, c[0x6][0x21dc]; # [172][000560]
//     	MOV R22, c[0x6][0x21dc];         # [173][000568]
//     	FFMA.FMZ R2, R2, R8, R16;        # [174][000570]
//     	FFMA.FMZ R19, R19, R8, R0;       # [175][000578]
//     	FFMA.FMZ R21, R21, R8, R18;      # [176][000580]
//     	FADD.FTZ R8, -R22, 1;            # [177][000588]
//     	MUFU.LG2 R14, |R14|;             # [178][000590]
//     	FFMA.FTZ R17, R12, R13, R17;     # [179][000598]
//     	FCMP.GE R18, R18, R21, R8;       # [180][0005a0]
//     	FMUL.FMZ R21, R11, c[0x6][0x21d0]; # [181][0005a8]
//     	FCMP.GE R0, R0, R19, R8;         # [182][0005b0]
//     	FCMP.GE R2, R16, R2, R8;         # [183][0005b8]
//     	FCMP.LE R21, RZ, R21, c[0x6][0x21dc]; # [184][0005c0]
//     	FMUL.FMZ R14, R14, c[0x6][0x21ec]; # [185][0005c8]
//     	FADD.FTZ R9, -R9, 1;             # [186][0005d0]
//     	FFMA.FMZ R19, R20, c[0x6][0x21e0], R21; # [187][0005d8]
//     	RRO.EX2 R14, R14;                # [188][0005e0]
//     	FMUL.FTZ R1, R13, R1;            # [189][0005e8]
//     	FCMP.GE R16, R21, R19, R8;       # [190][0005f0]
//     	FMUL.FMZ R21, R11, c[0x6][0x21d8]; # [191][0005f8]
//     	FMUL.FMZ R19, R11, c[0x6][0x21d4]; # [192][000600]
//     	FFMA.FTZ.SAT R15, R12, R1, R15;  # [193][000608]
//     	FCMP.LE R11, RZ, R21, c[0x6][0x21dc]; # [194][000610]
//     	FCMP.LE R19, RZ, R19, c[0x6][0x21dc]; # [195][000618]
//     	IPA.SC R12, a[0x284], R10;       # [196][000620] COLOR_FRONT_DIFFUSE_GREEN
//     	FFMA.FMZ R21, R20, c[0x6][0x21e8], R11; # [197][000628]
//     	FFMA.FMZ R20, R20, c[0x6][0x21e4], R19; # [198][000630]
//     	IPA.SC R1, a[0x280], R10;        # [199][000638] COLOR_FRONT_DIFFUSE_RED
//     	FCMP.GE R11, R11, R21, R8;       # [200][000640]
//     	FCMP.GE R8, R19, R20, R8;        # [201][000648]
//     	MUFU.EX2 R20, R14;               # [202][000650]
//     	FADD.FTZ.SAT R21, R17, 0.5;      # [203][000658]
//     	FADD32I.FTZ R17, -R17, 0.2;      # [204][000660]
//     	FMUL.FMZ R20, R3, R20;           # [205][000668]
//     	FADD.FTZ R19, -R22, 2;           # [206][000670]
//     	IPA.SC R14, a[0x31c], R10;       # [207][000678] FIXED_FNC_TEXTURE_1_Q
//     	FMUL.FMZ R13, R9, R20;           # [208][000680]
//     	IPA.SC R3, a[0x288], R10;        # [209][000688] COLOR_FRONT_DIFFUSE_BLUE
//     	FMUL.FMZ R20, R13, R21;          # [210][000690]
//     	FCMP.GE R13, R20, R13, R17;      # [211][000698]
//     	FMUL.FMZ R17, R15, c[0x6][0x21f8]; # [212][0006a0]
//     	FMUL.FMZ R20, R15, c[0x6][0x21f4]; # [213][0006a8]
//     	FMUL.FMZ R15, R15, c[0x6][0x21f0]; # [214][0006b0]
//     	FFMA.FMZ R17, R17, R9, R2;       # [215][0006b8]
//     	FFMA.FMZ R21, R20, R9, R0;       # [216][0006c0]
//     	FFMA.FMZ R20, R15, R9, R18;      # [217][0006c8]
//     	FCMP.GE R17, R2, R17, R19;       # [218][0006d0]
//     	FCMP.GE R21, R0, R21, R19;       # [219][0006d8]
//     	IPA.SC R15, a[0x290], R10;       # [220][0006e0] COLOR_FRONT_SPELWLAR_RED
//     	IPA.SC R9, a[0x29c], R10;        # [221][0006e8] COLOR_FRONT_SPELWLAR_ALPHA
//     	IPA.SC R0, a[0x294], R10;        # [222][0006f0] COLOR_FRONT_SPELWLAR_GREEN
//     	IPA.SC R2, a[0x298], R10;        # [223][0006f8] COLOR_FRONT_SPELWLAR_BLUE
//     	FCMP.GE R10, R18, R20, R19;      # [224][000700]
//     	FFMA.FMZ R20, R13, c[0x6][0x21f0], R16; # [225][000708]
//     	FADD32I.FTZ R21, R21, 0x3e088889; # [226][000710]
//     	FADD32I.FTZ R18, R10, 0x3d888889; # [227][000718]
//     	FCMP.GE R16, R16, R20, R19;      # [228][000720]
//     	FMNMX.FTZ R10, R21, RZ, !PT;     # [229][000728]
//     	FFMA.FMZ R20, R13, c[0x6][0x21f4], R8; # [230][000730]
//     	FFMA.FMZ R21, R13, c[0x6][0x21f8], R11; # [231][000738]
//     	FMNMX.FTZ R13, R18, RZ, !PT;     # [232][000740]
//     	FCMP.GE R18, R8, R20, R19;       # [233][000748]
//     	FADD32I.FTZ R17, R17, 0x3e54d4d5; # [234][000750]
//     	FCMP.GE R19, R11, R21, R19;      # [235][000758]
//     	FMUL.FMZ R8, R16, R14;           # [236][000760]
//     	FMUL.FMZ R11, R18, R14;          # [237][000768]
//     	FMNMX.FTZ R17, R17, RZ, !PT;     # [238][000770]
//     	FMUL.FMZ R14, R19, R14;          # [239][000778]
//     	FMUL.FMZ R1, R4, R1;             # [240][000780]
//     	FMUL.FMZ R6, R6, R3;             # [241][000788]
//     	FMUL.FMZ R4, R5, R12;            # [242][000790]
//     	F2F.FTZ R3, R7;                  # [243][000798]
//     	FFMA.FMZ R1, R13, R1, R8;        # [244][0007a0]
//     	FFMA.FMZ R5, R10, R4, R11;       # [245][0007a8]
//     	FFMA.FMZ R7, R17, R6, R14;       # [246][0007b0]
//     	FADD.FTZ R4, R15, -R1;           # [247][0007b8]
//     	FADD.FTZ R6, R0, -R5;            # [248][0007c0]
//     	FADD.FTZ R2, R2, -R7;            # [249][0007c8]
//     	FFMA.FTZ R0, R9, R4, R1;         # [250][0007d0]
//     	FFMA.FTZ R1, R9, R6, R5;         # [251][0007d8]
//     	FFMA.FTZ R2, R9, R2, R7;         # [252][0007e0]
//     	EXIT;                            # [253][0007e8]
//     	END
//     END_SECTION
// END_SHADER
// 
