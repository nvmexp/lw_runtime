// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 11.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x93892f7c634c55fe
//         FINGERPRINTER_HASH: 0x0000000000000000
//         UCODE_HASH: 0x8ef4e55bd1e7498e
//         POOL: APP
//         VERSION: 20
//         # USES: 105
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 0
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 55
//         TEXTURE_SLOTS: 2
//         SAMPLER_SLOTS: 1
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             GENERIC01_X          PERSPECTIVE
//             GENERIC01_Y          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_5_0
        dcl_globalflags refactoringAllowed
        dcl_constantbuffer cb0[1].xyzw, immediateIndexed
        dcl_constantbuffer cb1[1].xyzw, immediateIndexed
        dcl_constantbuffer cb2[2].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t1, texture2dms (8), (float, float, float, float)
        dcl_input_ps v1.xy, linear
        dcl_output o0.xyzw
        dcl_temps 15 
        mul r0.xy, v1.xyxx, cb2[1].xyxx
        ftoi r0.xy, r0.xyxx
        mov r0.zw, l(0, 0, 0, 0)
        ldms (texture2dms) (float,float,float,float) r1.x, r0.xyww, t1.zxyw, l(0)
        ldms (texture2dms) (float,float,float,float) r1.y, r0.xyww, t1.xzyw, l(0x1)
        min r1.z, |r1.y|, |r1.x|
        max r1.w, |r1.y|, |r1.x|
        ldms (texture2dms) (float,float,float,float) r2.x, r0.xyww, t1.zxyw, l(0x2)
        min r1.z, r1.z, |r2.x|
        max r1.w, r1.w, |r2.x|
        ldms (texture2dms) (float,float,float,float) r2.y, r0.xyww, t1.xzyw, l(0x3)
        min r1.z, r1.z, |r2.y|
        max r1.w, r1.w, |r2.y|
        ldms (texture2dms) (float,float,float,float) r2.z, r0.xyww, t1.xyzw, l(0x4)
        min r1.z, r1.z, |r2.z|
        max r1.w, r1.w, |r2.z|
        ldms (texture2dms) (float,float,float,float) r2.w, r0.xyww, t1.xywz, l(0x5)
        min r1.z, r1.z, |r2.w|
        max r1.w, r1.w, |r2.w|
        ldms (texture2dms) (float,float,float,float) r3.x, r0.xyww, t1.zxyw, l(0x6)
        min r1.z, r1.z, |r3.x|
        max r1.w, r1.w, |r3.x|
        ldms (texture2dms) (float,float,float,float) r0.x, r0.xyzw, t1.zxyw, l(0x7)
        min r0.y, |r0.x|, r1.z
        max r0.z, |r0.x|, r1.w
        add r0.y, -r0.y, r0.z
        lt r0.y, l(0.00000100), r0.y
        if_nz r0.y
          mad r0.yz, -cb1[0].zzwz, l(0.00000000, 3.00000000, 3.00000000, 0.00000000), v1.xxyx
          gather4 (texture2d) (float,float,float,float) r4.xyzw, r0.yzyy, t0.xyzw, s0.x
          gather4 aoffimmi(0, 2, 0) (texture2d) (float,float,float,float) r5.xyzw, r0.yzyy, t0.xyzw, s0.x
          gather4 aoffimmi(2, 0, 0) (texture2d) (float,float,float,float) r6.xyzw, r0.yzyy, t0.xyzw, s0.x
          gather4 aoffimmi(2, 2, 0) (texture2d) (float,float,float,float) r7.xyzw, r0.yzyy, t0.xyzw, s0.x
          gather4 (texture2d) (float,float,float,float) r8.xyzw, r0.yzyy, t0.xyzw, s0.w
          gather4 aoffimmi(0, 2, 0) (texture2d) (float,float,float,float) r9.xyzw, r0.yzyy, t0.xyzw, s0.w
          gather4 aoffimmi(2, 0, 0) (texture2d) (float,float,float,float) r10.xyzw, r0.yzyy, t0.xyzw, s0.w
          gather4 aoffimmi(2, 2, 0) (texture2d) (float,float,float,float) r11.xyzw, r0.yzyy, t0.xyzw, s0.w
          add r12.xyzw, -|r1.xxxx|, r8.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r0.y, r4.xyzw, r12.xyzw
          dp4 r0.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          dp4 r0.w, r4.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
          add r12.xyzw, -|r1.xxxx|, r9.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r1.z, r5.xyzw, r12.xyzw
          add r0.y, r0.y, r1.z
          dp4 r1.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r0.z, r0.z, r1.z
          dp4 r1.z, r5.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
          add r0.w, r0.w, r1.z
          add r12.xyzw, -|r1.xxxx|, r10.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r1.z, r6.xyzw, r12.xyzw
          add r0.y, r0.y, r1.z
          dp4 r1.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r0.z, r0.z, r1.z
          dp4 r1.z, r6.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
          add r0.w, r0.w, r1.z
          add r12.xyzw, -|r1.xxxx|, r11.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r1.z, r7.xyzw, r12.xyzw
          add r0.y, r0.y, r1.z
          dp4 r1.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r0.z, r0.z, r1.z
          dp4 r1.z, r7.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
          add r0.w, r0.w, r1.z
          add r12.xyzw, -|r1.yyyy|, r8.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r1.z, r4.xyzw, r12.xyzw
          dp4 r1.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r12.xyzw, -|r1.yyyy|, r9.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.y, r5.xyzw, r12.xyzw
          add r1.z, r1.z, r3.y
          dp4 r3.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r1.w, r1.w, r3.y
          add r12.xyzw, -|r1.yyyy|, r10.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.y, r6.xyzw, r12.xyzw
          add r1.z, r1.z, r3.y
          dp4 r3.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r1.w, r1.w, r3.y
          add r12.xyzw, -|r1.yyyy|, r11.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r1.y, r7.xyzw, r12.xyzw
          add r1.y, r1.y, r1.z
          dp4 r1.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r1.z, r1.z, r1.w
          add r12.xyzw, -|r2.xxxx|, r8.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r1.w, r4.xyzw, r12.xyzw
          dp4 r3.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r12.xyzw, -|r2.xxxx|, r9.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.z, r5.xyzw, r12.xyzw
          add r1.w, r1.w, r3.z
          dp4 r3.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r3.y, r3.z, r3.y
          add r12.xyzw, -|r2.xxxx|, r10.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.z, r6.xyzw, r12.xyzw
          add r1.w, r1.w, r3.z
          dp4 r3.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r3.y, r3.z, r3.y
          add r12.xyzw, -|r2.xxxx|, r11.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r2.x, r7.xyzw, r12.xyzw
          add r1.w, r1.w, r2.x
          dp4 r2.x, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r2.x, r2.x, r3.y
          add r12.xyzw, -|r2.yyyy|, r8.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.y, r4.xyzw, r12.xyzw
          dp4 r3.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r12.xyzw, -|r2.yyyy|, r9.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.w, r5.xyzw, r12.xyzw
          add r3.y, r3.w, r3.y
          dp4 r3.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r3.z, r3.w, r3.z
          add r12.xyzw, -|r2.yyyy|, r10.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.w, r6.xyzw, r12.xyzw
          add r3.y, r3.w, r3.y
          dp4 r3.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r3.z, r3.w, r3.z
          add r12.xyzw, -|r2.yyyy|, r11.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r2.y, r7.xyzw, r12.xyzw
          add r2.y, r2.y, r3.y
          dp4 r3.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r3.y, r3.y, r3.z
          add r12.xyzw, -|r2.zzzz|, r8.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.z, r4.xyzw, r12.xyzw
          dp4 r3.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r12.xyzw, -|r2.zzzz|, r9.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r13.x, r5.xyzw, r12.xyzw
          add r3.z, r3.z, r13.x
          dp4 r12.x, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r3.w, r3.w, r12.x
          add r12.xyzw, -|r2.zzzz|, r10.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r13.x, r6.xyzw, r12.xyzw
          add r3.z, r3.z, r13.x
          dp4 r12.x, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r3.w, r3.w, r12.x
          add r12.xyzw, -|r2.zzzz|, r11.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r2.z, r7.xyzw, r12.xyzw
          add r2.z, r2.z, r3.z
          dp4 r3.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r3.z, r3.z, r3.w
          add r12.xyzw, -|r2.wwww|, r8.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.w, r4.xyzw, r12.xyzw
          dp4 r12.x, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r13.xyzw, -|r2.wwww|, r9.xyzw
          lt r13.xyzw, |r13.xyzw|, cb0[0].xxxx
          and r13.xyzw, r13.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r12.y, r5.xyzw, r13.xyzw
          add r3.w, r3.w, r12.y
          dp4 r12.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r13.xyzw
          add r12.x, r12.y, r12.x
          add r13.xyzw, -|r2.wwww|, r10.xyzw
          lt r13.xyzw, |r13.xyzw|, cb0[0].xxxx
          and r13.xyzw, r13.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r12.y, r6.xyzw, r13.xyzw
          add r3.w, r3.w, r12.y
          dp4 r12.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r13.xyzw
          add r12.x, r12.y, r12.x
          add r13.xyzw, -|r2.wwww|, r11.xyzw
          lt r13.xyzw, |r13.xyzw|, cb0[0].xxxx
          and r13.xyzw, r13.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r2.w, r7.xyzw, r13.xyzw
          add r2.w, r2.w, r3.w
          dp4 r3.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r13.xyzw
          add r3.w, r3.w, r12.x
          add r12.xyzw, -|r3.xxxx|, r8.xyzw
          lt r12.xyzw, |r12.xyzw|, cb0[0].xxxx
          and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r13.x, r4.xyzw, r12.xyzw
          dp4 r12.x, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r12.xyzw
          add r14.xyzw, -|r3.xxxx|, r9.xyzw
          lt r14.xyzw, |r14.xyzw|, cb0[0].xxxx
          and r14.xyzw, r14.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r12.y, r5.xyzw, r14.xyzw
          add r12.y, r12.y, r13.x
          dp4 r12.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r14.xyzw
          add r12.x, r12.z, r12.x
          add r13.xyzw, -|r3.xxxx|, r10.xyzw
          lt r13.xyzw, |r13.xyzw|, cb0[0].xxxx
          and r13.xyzw, r13.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r12.z, r6.xyzw, r13.xyzw
          add r12.y, r12.z, r12.y
          dp4 r12.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r13.xyzw
          add r12.x, r12.z, r12.x
          add r13.xyzw, -|r3.xxxx|, r11.xyzw
          lt r13.xyzw, |r13.xyzw|, cb0[0].xxxx
          and r13.xyzw, r13.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r3.x, r7.xyzw, r13.xyzw
          add r3.x, r3.x, r12.y
          dp4 r12.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r13.xyzw
          add r12.x, r12.y, r12.x
          add r8.xyzw, -|r0.xxxx|, r8.xyzw
          lt r8.xyzw, |r8.xyzw|, cb0[0].xxxx
          and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r4.x, r4.xyzw, r8.xyzw
          dp4 r4.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r8.xyzw
          add r8.xyzw, -|r0.xxxx|, r9.xyzw
          lt r8.xyzw, |r8.xyzw|, cb0[0].xxxx
          and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r4.z, r5.xyzw, r8.xyzw
          add r4.x, r4.z, r4.x
          dp4 r4.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r8.xyzw
          add r4.y, r4.z, r4.y
          add r5.xyzw, -|r0.xxxx|, r10.xyzw
          lt r5.xyzw, |r5.xyzw|, cb0[0].xxxx
          and r5.xyzw, r5.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r4.z, r6.xyzw, r5.xyzw
          add r4.x, r4.z, r4.x
          dp4 r4.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r5.xyzw
          add r4.y, r4.z, r4.y
          add r5.xyzw, -|r0.xxxx|, r11.xyzw
          lt r5.xyzw, |r5.xyzw|, cb0[0].xxxx
          and r5.xyzw, r5.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r0.x, r7.xyzw, r5.xyzw
          add r0.x, r0.x, r4.x
          dp4 r4.x, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r5.xyzw
          add r4.x, r4.x, r4.y
          lt r4.y, l(0.00000000), r0.z
          div r0.y, r0.y, r0.z
          mul r0.z, r0.w, l(0.06250000)
          movc r0.y, r4.y, r0.y, r0.z
          lt r0.z, l(0.00000000), r1.z
          div r1.y, r1.y, r1.z
          add r1.y, r0.y, r1.y
          mad r0.y, r0.w, l(0.06250000), r0.y
          movc r0.y, r0.z, r1.y, r0.y
          lt r0.z, l(0.00000000), r2.x
          div r1.y, r1.w, r2.x
          add r1.y, r0.y, r1.y
          mad r0.y, r0.w, l(0.06250000), r0.y
          movc r0.y, r0.z, r1.y, r0.y
          lt r0.z, l(0.00000000), r3.y
          div r1.y, r2.y, r3.y
          add r1.y, r0.y, r1.y
          mad r0.y, r0.w, l(0.06250000), r0.y
          movc r0.y, r0.z, r1.y, r0.y
          lt r0.z, l(0.00000000), r3.z
          div r1.y, r2.z, r3.z
          add r1.y, r0.y, r1.y
          mad r0.y, r0.w, l(0.06250000), r0.y
          movc r0.y, r0.z, r1.y, r0.y
          lt r0.z, l(0.00000000), r3.w
          div r1.y, r2.w, r3.w
          add r1.y, r0.y, r1.y
          mad r0.y, r0.w, l(0.06250000), r0.y
          movc r0.y, r0.z, r1.y, r0.y
          lt r0.z, l(0.00000000), r12.x
          div r1.y, r3.x, r12.x
          add r1.y, r0.y, r1.y
          mad r0.y, r0.w, l(0.06250000), r0.y
          movc r0.y, r0.z, r1.y, r0.y
          lt r0.z, l(0.00000000), r4.x
          div r0.x, r0.x, r4.x
          add r0.x, r0.x, r0.y
          mad r0.y, r0.w, l(0.06250000), r0.y
          movc r0.x, r0.z, r0.x, r0.y
          mul r0.x, r0.x, l(0.12500000)
        else 
          mad r0.yz, -cb1[0].zzwz, l(0.00000000, 3.00000000, 3.00000000, 0.00000000), v1.xxyx
          gather4 (texture2d) (float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0.x
          gather4 (texture2d) (float,float,float,float) r3.xyzw, r0.yzyy, t0.xyzw, s0.w
          add r3.xyzw, -|r1.xxxx|, r3.xyzw
          lt r3.xyzw, |r3.xyzw|, cb0[0].xxxx
          and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r0.w, r2.xyzw, r3.xyzw
          dp4 r1.y, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r3.xyzw
          dp4 r1.z, r2.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
          gather4 aoffimmi(0, 2, 0) (texture2d) (float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0.x
          gather4 aoffimmi(0, 2, 0) (texture2d) (float,float,float,float) r3.xyzw, r0.yzyy, t0.xyzw, s0.w
          add r3.xyzw, -|r1.xxxx|, r3.xyzw
          lt r3.xyzw, |r3.xyzw|, cb0[0].xxxx
          and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r1.w, r2.xyzw, r3.xyzw
          add r0.w, r0.w, r1.w
          dp4 r1.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r3.xyzw
          add r1.y, r1.w, r1.y
          dp4 r1.w, r2.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
          add r1.z, r1.w, r1.z
          gather4 aoffimmi(2, 0, 0) (texture2d) (float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0.x
          gather4 aoffimmi(2, 0, 0) (texture2d) (float,float,float,float) r3.xyzw, r0.yzyy, t0.xyzw, s0.w
          add r3.xyzw, -|r1.xxxx|, r3.xyzw
          lt r3.xyzw, |r3.xyzw|, cb0[0].xxxx
          and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r1.w, r2.xyzw, r3.xyzw
          add r0.w, r0.w, r1.w
          dp4 r1.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r3.xyzw
          add r1.y, r1.w, r1.y
          dp4 r1.w, r2.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
          add r1.z, r1.w, r1.z
          gather4 aoffimmi(2, 2, 0) (texture2d) (float,float,float,float) r2.xyzw, r0.yzyy, t0.xyzw, s0.x
          gather4 aoffimmi(2, 2, 0) (texture2d) (float,float,float,float) r3.xyzw, r0.yzyy, t0.xyzw, s0.w
          add r3.xyzw, -|r1.xxxx|, r3.xyzw
          lt r3.xyzw, |r3.xyzw|, cb0[0].xxxx
          and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
          dp4 r0.y, r2.xyzw, r3.xyzw
          add r0.y, r0.y, r0.w
          dp4 r0.z, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), r3.xyzw
          dp4 r0.w, r2.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
          add r0.zw, r0.zzzw, r1.yyyz
          lt r1.x, l(0.00000000), r0.z
          div r0.y, r0.y, r0.z
          mul r0.z, r0.w, l(0.06250000)
          movc r0.x, r1.x, r0.y, r0.z
        endif 
        add r0.y, -cb0[0].y, l(1.00000000)
        log r0.x, r0.x
        mul r0.x, r0.x, cb0[0].z
        exp r0.x, r0.x
        mad o0.xyzw, r0.yyyy, r0.xxxx, cb0[0].yyyy
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x358637bd // 0.000001
//         COP_CONST[1]: 0x3b0314a5 // 0.002000
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][0] = 0x3b0314a5 // 0.002000
//         USER_CONST: c[0][1] = 0x00000000 // 0.000000
//         USER_CONST: c[0][2] = 0x40800000 // 4.000000
//         USER_CONST: c[1][2] = 0x3a088889 // 0.000521
//         USER_CONST: c[1][3] = 0x3a5a740e // 0.000833
//         USER_CONST: c[2][4] = 0x44f00000 // 1920.000000
//         USER_CONST: c[2][5] = 0x44960000 // 1200.000000
//     END_SECTION
//     # Exelwtion Time: 201.478ms [9.385 percent]
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][0] = 100.00%@0.00200013
//                 ~c[0][1] = 100.00%@0.00000000
//                 ~c[0][2] = 100.00%@4.00000000
//                 ~c[1][2] = 100.00%@0.00052083
//                 ~c[1][3] = 100.00%@0.00083333
//                 ~c[2][4] = 100.00%@1920.00000000
//                 ~c[2][5] = 100.00%@1200.00000000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x3c0, height=0x258, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//         TEXTURE_SLOT 0x1
//         100.00% width=0x780, height=0x4b0, mips=0x1, DXGI_FORMAT_R16G16B16A16_FLOAT
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=0.000000, maxLOD=0.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=CLAMP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MOV32I R4, 0x1;                  # [  1][000008]
//     	MUFU.RCP R0, R0;                 # [  2][000010]
//     	IPA R1, a[0x94], R0;             # [  3][000018] GENERIC_ATTRIBUTE_01_Y
//     	IPA R2, a[0x90], R0;             # [  4][000020] ATTR1
//     	FMUL.FTZ R1, R1, 1200;           # [  5][000028]
//     	FMUL.FTZ R2, R2, 1920;           # [  6][000030]
//     	F2I.TRUNC R3, R1;                # [  7][000038]
//     	F2I.TRUNC R2, R2;                # [  8][000040]
//     	TLD.LZ.MS R39, R2, R4, 0x1, 2D, 0x4; # [  9][000048]
//     	MOV32I R1, 0x2;                  # [ 10][000050]
//     	TLD.LZ.MS R41, R2, R1, 0x1, 2D, 0x4; # [ 11][000058]
//     	MOV32I R1, 0x3;                  # [ 12][000060]
//     	TLD.LZ.MS R33, R2, R1, 0x1, 2D, 0x4; # [ 13][000068]
//     	TLD.LZ.MS.T R32, R2, 0x1, 2D, 0x4; # [ 14][000070]
//     	MOV32I R1, 0x4;                  # [ 15][000078]
//     	TLD.LZ.MS R37, R2, R1, 0x1, 2D, 0x4; # [ 16][000080]
//     	MOV32I R1, 0x5;                  # [ 17][000088]
//     	TLD.LZ.MS R40, R2, R1, 0x1, 2D, 0x4; # [ 18][000090]
//     	MOV32I R1, 0x6;                  # [ 19][000098]
//     	TLD.LZ.MS R38, R2, R1, 0x1, 2D, 0x4; # [ 20][0000a0]
//     	MOV32I R1, 0x7;                  # [ 21][0000a8]
//     	TLD.LZ.MS.T R42, R2, R1, 0x1, 2D, 0x4; # [ 22][0000b0]
//     	FMNMX.FTZ R2, |R39|, |R32|, PT;  # [ 23][0000b8]
//     	FMNMX.FTZ R1, |R39|, |R32|, !PT; # [ 24][0000c0]
//     	FMNMX.FTZ R2, R2, |R41|, PT;     # [ 25][0000c8]
//     	FMNMX.FTZ R1, R1, |R41|, !PT;    # [ 26][0000d0]
//     	FMNMX.FTZ R2, R2, |R33|, PT;     # [ 27][0000d8]
//     	FMNMX.FTZ R1, R1, |R33|, !PT;    # [ 28][0000e0]
//     	FMNMX.FTZ R2, R2, |R37|, PT;     # [ 29][0000e8]
//     	FMNMX.FTZ R1, R1, |R37|, !PT;    # [ 30][0000f0]
//     	FMNMX.FTZ R2, R2, |R40|, PT;     # [ 31][0000f8]
//     	FMNMX.FTZ R1, R1, |R40|, !PT;    # [ 32][000100]
//     	FMNMX.FTZ R2, R2, |R38|, PT;     # [ 33][000108]
//     	FMNMX.FTZ R1, R1, |R38|, !PT;    # [ 34][000110]
//     	FMNMX.FTZ R2, |R42|, R2, PT;     # [ 35][000118]
//     	FMNMX.FTZ R1, |R42|, R1, !PT;    # [ 36][000120]
//     	FADD.FTZ R1, -R2, R1;            # [ 37][000128]
//     	FSETP.GT.FTZ.AND P0, PT, R1, c[0x10][0x0], PT; # [ 38][000130]
//     	SSY L16e8;                       # [ 39][000138]
//     	@!P0 BRA L13c0;                  # [ 40][000140]
//     	IPA R1, a[0x90], R0;             # [ 41][000148] ATTR1
//     	IPA R0, a[0x94], R0;             # [ 42][000150] GENERIC_ATTRIBUTE_01_Y
//     	FADD32I.FTZ R28, R1, 0xbaccccce; # [ 43][000158]
//     	FADD32I.FTZ R29, R0, -0.0025;    # [ 44][000160]
//     	TLD4.A.NODEP.T R12, R28, 0x0, 0x0, 2D; # [ 45][000168]
//     	TLD4.R.NODEP R16, R28, 0x0, 0x0, 2D; # [ 46][000170]
//     	FADD.FTZ R5, -|R32|, R12;        # [ 47][000178]
//     	MOV32I R0, 0x200;                # [ 48][000180]
//     	TLD4.A.AOFFI.NODEP R8, R28, R0, 0x0, 0x0, 2D; # [ 49][000188]
//     	FADD.FTZ R25, -|R32|, R13;       # [ 50][000190]
//     	FADD.FTZ R26, -|R32|, R14;       # [ 51][000198]
//     	FADD.FTZ R27, -|R32|, R15;       # [ 52][0001a0]
//     	FADD.FTZ R4, -|R39|, R12;        # [ 53][0001a8]
//     	FADD.FTZ R6, -|R39|, R13;        # [ 54][0001b0]
//     	TLD4.R.AOFFI.NODEP.T R20, R28, R0, 0x0, 0x0, 2D; # [ 55][0001b8]
//     	FADD.FTZ R34, -|R39|, R15;       # [ 56][0001c0]
//     	FADD.FTZ R31, -|R41|, R13;       # [ 57][0001c8]
//     	FSET.BF.LT.FTZ.AND R24, |R5|, c[0x10][0x4], PT; # [ 58][0001d0]
//     	FADD.FTZ R30, -|R41|, R12;       # [ 59][0001d8]
//     	FADD.FTZ R36, -|R41|, R15;       # [ 60][0001e0]
//     	FSET.BF.LT.FTZ.AND R5, |R4|, c[0x10][0x4], PT; # [ 61][0001e8]
//     	FADD.FTZ R1, -|R33|, R12;        # [ 62][0001f0]
//     	FADD.FTZ R2, -|R33|, R13;        # [ 63][0001f8]
//     	FADD.FTZ R3, -|R33|, R14;        # [ 64][000200]
//     	FSET.BF.LT.FTZ.AND R4, |R34|, c[0x10][0x4], PT; # [ 65][000208]
//     	FSET.BF.LT.FTZ.AND R25, |R25|, c[0x10][0x4], PT; # [ 66][000210]
//     	FSET.BF.LT.FTZ.AND R34, |R31|, c[0x10][0x4], PT; # [ 67][000218]
//     	FADD.FTZ R0, -|R33|, R15;        # [ 68][000220]
//     	FSET.BF.LT.FTZ.AND R30, |R30|, c[0x10][0x4], PT; # [ 69][000228]
//     	FSET.BF.LT.FTZ.AND R31, |R36|, c[0x10][0x4], PT; # [ 70][000230]
//     	FSET.BF.LT.FTZ.AND R36, |R1|, c[0x10][0x4], PT; # [ 71][000238]
//     	FSET.BF.LT.FTZ.AND R44, |R2|, c[0x10][0x4], PT; # [ 72][000240]
//     	FSET.BF.LT.FTZ.AND R45, |R3|, c[0x10][0x4], PT; # [ 73][000248]
//     	FSET.BF.LT.FTZ.AND R6, |R6|, c[0x10][0x4], PT; # [ 74][000250]
//     	FADD.FTZ R3, R24, R25;           # [ 75][000258]
//     	FADD.FTZ R7, -|R39|, R14;        # [ 76][000260]
//     	FADD.FTZ R35, -|R41|, R14;       # [ 77][000268]
//     	FSET.BF.LT.FTZ.AND R43, |R0|, c[0x10][0x4], PT; # [ 78][000270]
//     	FADD.FTZ R1, R30, R34;           # [ 79][000278]
//     	FMUL.FTZ R24, R16, R24;          # [ 80][000280]
//     	FMUL.FTZ R46, R16, R5;           # [ 81][000288]
//     	FADD.FTZ R0, R36, R44;           # [ 82][000290]
//     	FMUL.FTZ R30, R16, R30;          # [ 83][000298]
//     	FADD.FTZ R2, R5, R6;             # [ 84][0002a0]
//     	FMUL.FTZ R36, R16, R36;          # [ 85][0002a8]
//     	FSET.BF.LT.FTZ.AND R7, |R7|, c[0x10][0x4], PT; # [ 86][0002b0]
//     	FSET.BF.LT.FTZ.AND R35, |R35|, c[0x10][0x4], PT; # [ 87][0002b8]
//     	FFMA.FTZ R5, R17, R25, R24;      # [ 88][0002c0]
//     	FFMA.FTZ R6, R17, R6, R46;       # [ 89][0002c8]
//     	FFMA.FTZ R24, R17, R34, R30;     # [ 90][0002d0]
//     	FFMA.FTZ R25, R17, R44, R36;     # [ 91][0002d8]
//     	FADD.FTZ R2, R2, R7;             # [ 92][0002e0]
//     	FADD.FTZ R1, R1, R35;            # [ 93][0002e8]
//     	FFMA.FTZ R6, R18, R7, R6;        # [ 94][0002f0]
//     	FFMA.FTZ R7, R18, R35, R24;      # [ 95][0002f8]
//     	FSET.BF.LT.FTZ.AND R26, |R26|, c[0x10][0x4], PT; # [ 96][000300]
//     	FFMA.FTZ R24, R18, R45, R25;     # [ 97][000308]
//     	FADD.FTZ R1, R1, R31;            # [ 98][000310]
//     	FFMA.FTZ R31, R19, R31, R7;      # [ 99][000318]
//     	FSET.BF.LT.FTZ.AND R27, |R27|, c[0x10][0x4], PT; # [100][000320]
//     	FFMA.FTZ R5, R18, R26, R5;       # [101][000328]
//     	FFMA.FTZ R30, R19, R43, R24;     # [102][000330]
//     	FADD.FTZ R2, R2, R4;             # [103][000338]
//     	FFMA.FTZ R48, R19, R27, R5;      # [104][000340]
//     	FFMA.FTZ R34, R19, R4, R6;       # [105][000348]
//     	FADD.FTZ R0, R0, R45;            # [106][000350]
//     	FADD.FTZ R3, R3, R26;            # [107][000358]
//     	FADD.FTZ R0, R0, R43;            # [108][000360]
//     	FADD.FTZ R3, R3, R27;            # [109][000368]
//     	FADD.FTZ R7, -|R32|, R8;         # [110][000370]
//     	FADD.FTZ R24, -|R32|, R9;        # [111][000378]
//     	FADD.FTZ R36, -|R32|, R10;       # [112][000380]
//     	FSET.BF.LT.FTZ.AND R49, |R7|, c[0x10][0x4], PT; # [113][000388]
//     	FADD.FTZ R4, -|R39|, R8;         # [114][000390]
//     	FADD.FTZ R5, -|R39|, R9;         # [115][000398]
//     	FSET.BF.LT.FTZ.AND R7, |R24|, c[0x10][0x4], PT; # [116][0003a0]
//     	FADD.FTZ R35, -|R39|, R10;       # [117][0003a8]
//     	FSET.BF.LT.FTZ.AND R24, |R36|, c[0x10][0x4], PT; # [118][0003b0]
//     	FADD.FTZ R45, -|R32|, R11;       # [119][0003b8]
//     	FSET.BF.LT.FTZ.AND R4, |R4|, c[0x10][0x4], PT; # [120][0003c0]
//     	FSET.BF.LT.FTZ.AND R5, |R5|, c[0x10][0x4], PT; # [121][0003c8]
//     	FADD.FTZ R36, R49, R7;           # [122][0003d0]
//     	FSET.BF.LT.FTZ.AND R46, |R35|, c[0x10][0x4], PT; # [123][0003d8]
//     	FADD.FTZ R25, -|R39|, R11;       # [124][0003e0]
//     	FSET.BF.LT.FTZ.AND R47, |R45|, c[0x10][0x4], PT; # [125][0003e8]
//     	FADD.FTZ R35, R4, R5;            # [126][0003f0]
//     	FADD.FTZ R36, R36, R24;          # [127][0003f8]
//     	FADD.FTZ R6, -|R41|, R8;         # [128][000400]
//     	FADD.FTZ R26, -|R41|, R9;        # [129][000408]
//     	FSET.BF.LT.FTZ.AND R45, |R25|, c[0x10][0x4], PT; # [130][000410]
//     	FADD.FTZ R35, R35, R46;          # [131][000418]
//     	FADD.FTZ R36, R36, R47;          # [132][000420]
//     	FADD.FTZ R27, -|R33|, R8;        # [133][000428]
//     	FADD.FTZ R25, -|R33|, R9;        # [134][000430]
//     	FADD.FTZ R44, -|R41|, R10;       # [135][000438]
//     	FSET.BF.LT.FTZ.AND R6, |R6|, c[0x10][0x4], PT; # [136][000440]
//     	FSET.BF.LT.FTZ.AND R26, |R26|, c[0x10][0x4], PT; # [137][000448]
//     	FADD.FTZ R35, R35, R45;          # [138][000450]
//     	FADD.FTZ R3, R3, R36;            # [139][000458]
//     	FADD.FTZ R36, -|R33|, R10;       # [140][000460]
//     	FSET.BF.LT.FTZ.AND R27, |R27|, c[0x10][0x4], PT; # [141][000468]
//     	FSET.BF.LT.FTZ.AND R25, |R25|, c[0x10][0x4], PT; # [142][000470]
//     	FADD.FTZ R43, -|R41|, R11;       # [143][000478]
//     	FSET.BF.LT.FTZ.AND R44, |R44|, c[0x10][0x4], PT; # [144][000480]
//     	FADD.FTZ R51, R6, R26;           # [145][000488]
//     	FADD.FTZ R2, R2, R35;            # [146][000490]
//     	FADD.FTZ R35, -|R33|, R11;       # [147][000498]
//     	FSET.BF.LT.FTZ.AND R36, |R36|, c[0x10][0x4], PT; # [148][0004a0]
//     	FADD.FTZ R50, R27, R25;          # [149][0004a8]
//     	FSET.BF.LT.FTZ.AND R43, |R43|, c[0x10][0x4], PT; # [150][0004b0]
//     	FADD.FTZ R51, R51, R44;          # [151][0004b8]
//     	FSET.BF.LT.FTZ.AND R35, |R35|, c[0x10][0x4], PT; # [152][0004c0]
//     	FADD.FTZ R50, R50, R36;          # [153][0004c8]
//     	FADD.FTZ R51, R51, R43;          # [154][0004d0]
//     	FMUL.FTZ R49, R20, R49;          # [155][0004d8]
//     	FADD.FTZ R50, R50, R35;          # [156][0004e0]
//     	FADD.FTZ R1, R51, R1;            # [157][0004e8]
//     	FMUL.FTZ R4, R20, R4;            # [158][0004f0]
//     	MOV32I R51, 0x2;                 # [159][0004f8]
//     	FADD.FTZ R0, R50, R0;            # [160][000500]
//     	FFMA.FTZ R49, R21, R7, R49;      # [161][000508]
//     	FMUL.FTZ R52, R20, R6;           # [162][000510]
//     	FFMA.FTZ R50, R21, R5, R4;       # [163][000518]
//     	FMUL.FTZ R27, R20, R27;          # [164][000520]
//     	TLD4.A.AOFFI.NODEP R4, R28, R51, 0x0, 0x0, 2D; # [165][000528]
//     	FFMA.FTZ R52, R21, R26, R52;     # [166][000530]
//     	FFMA.FTZ R53, R21, R25, R27;     # [167][000538]
//     	FFMA.FTZ R49, R22, R24, R49;     # [168][000540]
//     	TLD4.R.AOFFI.NODEP.T R24, R28, R51, 0x0, 0x0, 2D; # [169][000548]
//     	FFMA.FTZ R46, R22, R46, R50;     # [170][000550]
//     	FFMA.FTZ R50, R22, R44, R52;     # [171][000558]
//     	FFMA.FTZ R51, R22, R36, R53;     # [172][000560]
//     	FFMA.FTZ R44, R23, R45, R46;     # [173][000568]
//     	FFMA.FTZ R43, R23, R43, R50;     # [174][000570]
//     	FFMA.FTZ R35, R23, R35, R51;     # [175][000578]
//     	FFMA.FTZ R36, R23, R47, R49;     # [176][000580]
//     	FADD.FTZ R45, R31, R43;          # [177][000588]
//     	FADD.FTZ R47, R34, R44;          # [178][000590]
//     	FADD.FTZ R43, R35, R30;          # [179][000598]
//     	FADD.FTZ R48, R48, R36;          # [180][0005a0]
//     	FADD.FTZ R34, -|R32|, R4;        # [181][0005a8]
//     	FADD.FTZ R35, -|R32|, R5;        # [182][0005b0]
//     	FADD.FTZ R50, -|R32|, R6;        # [183][0005b8]
//     	FADD.FTZ R51, -|R32|, R7;        # [184][0005c0]
//     	FADD.FTZ R30, -|R39|, R4;        # [185][0005c8]
//     	FSET.BF.LT.FTZ.AND R36, |R34|, c[0x10][0x4], PT; # [186][0005d0]
//     	FSET.BF.LT.FTZ.AND R44, |R35|, c[0x10][0x4], PT; # [187][0005d8]
//     	FADD.FTZ R49, -|R39|, R5;        # [188][0005e0]
//     	FSET.BF.LT.FTZ.AND R35, |R50|, c[0x10][0x4], PT; # [189][0005e8]
//     	FSET.BF.LT.FTZ.AND R50, |R51|, c[0x10][0x4], PT; # [190][0005f0]
//     	FSET.BF.LT.FTZ.AND R34, |R30|, c[0x10][0x4], PT; # [191][0005f8]
//     	FADD.FTZ R51, R36, R44;          # [192][000600]
//     	FADD.FTZ R31, -|R39|, R6;        # [193][000608]
//     	FSET.BF.LT.FTZ.AND R30, |R49|, c[0x10][0x4], PT; # [194][000610]
//     	FADD.FTZ R51, R51, R35;          # [195][000618]
//     	FADD.FTZ R46, -|R39|, R7;        # [196][000620]
//     	FSET.BF.LT.FTZ.AND R31, |R31|, c[0x10][0x4], PT; # [197][000628]
//     	FADD.FTZ R49, R34, R30;          # [198][000630]
//     	FADD.FTZ R51, R51, R50;          # [199][000638]
//     	FSET.BF.LT.FTZ.AND R46, |R46|, c[0x10][0x4], PT; # [200][000640]
//     	FADD.FTZ R49, R49, R31;          # [201][000648]
//     	FMUL.FTZ R52, R24, R36;          # [202][000650]
//     	FADD.FTZ R36, R3, R51;           # [203][000658]
//     	FADD.FTZ R49, R49, R46;          # [204][000660]
//     	FFMA.FTZ R3, R25, R44, R52;      # [205][000668]
//     	FMUL.FTZ R44, R24, R34;          # [206][000670]
//     	FADD.FTZ R34, R2, R49;           # [207][000678]
//     	FADD.FTZ R2, -|R41|, R4;         # [208][000680]
//     	FFMA.FTZ R49, R25, R30, R44;     # [209][000688]
//     	FADD.FTZ R30, -|R41|, R5;        # [210][000690]
//     	FSET.BF.LT.FTZ.AND R51, |R2|, c[0x10][0x4], PT; # [211][000698]
//     	FADD.FTZ R44, -|R41|, R6;        # [212][0006a0]
//     	FSET.BF.LT.FTZ.AND R2, |R30|, c[0x10][0x4], PT; # [213][0006a8]
//     	FADD.FTZ R30, -|R41|, R7;        # [214][0006b0]
//     	FSET.BF.LT.FTZ.AND R44, |R44|, c[0x10][0x4], PT; # [215][0006b8]
//     	FADD.FTZ R52, R51, R2;           # [216][0006c0]
//     	FSET.BF.LT.FTZ.AND R30, |R30|, c[0x10][0x4], PT; # [217][0006c8]
//     	FMUL.FTZ R51, R24, R51;          # [218][0006d0]
//     	FADD.FTZ R52, R52, R44;          # [219][0006d8]
//     	FADD.FTZ R53, -|R33|, R7;        # [220][0006e0]
//     	FFMA.FTZ R51, R25, R2, R51;      # [221][0006e8]
//     	FADD.FTZ R52, R52, R30;          # [222][0006f0]
//     	FFMA.FTZ R2, R26, R35, R3;       # [223][0006f8]
//     	FFMA.FTZ R3, R26, R31, R49;      # [224][000700]
//     	FADD.FTZ R35, R52, R1;           # [225][000708]
//     	FFMA.FTZ R31, R26, R44, R51;     # [226][000710]
//     	FADD.FTZ R1, -|R33|, R4;         # [227][000718]
//     	FADD.FTZ R44, -|R33|, R5;        # [228][000720]
//     	FADD.FTZ R49, -|R33|, R6;        # [229][000728]
//     	FSET.BF.LT.FTZ.AND R1, |R1|, c[0x10][0x4], PT; # [230][000730]
//     	FSET.BF.LT.FTZ.AND R51, |R44|, c[0x10][0x4], PT; # [231][000738]
//     	FSET.BF.LT.FTZ.AND R52, |R49|, c[0x10][0x4], PT; # [232][000740]
//     	FSET.BF.LT.FTZ.AND R49, |R53|, c[0x10][0x4], PT; # [233][000748]
//     	FADD.FTZ R44, R1, R51;           # [234][000750]
//     	FMUL.FTZ R1, R24, R1;            # [235][000758]
//     	MOV32I R53, 0x202;               # [236][000760]
//     	FADD.FTZ R44, R44, R52;          # [237][000768]
//     	FADD.FTZ R44, R44, R49;          # [238][000770]
//     	FADD.FTZ R44, R44, R0;           # [239][000778]
//     	FFMA.FTZ R0, R25, R51, R1;       # [240][000780]
//     	FFMA.FTZ R51, R27, R50, R2;      # [241][000788]
//     	FFMA.FTZ R50, R27, R46, R3;      # [242][000790]
//     	FFMA.FTZ R52, R26, R52, R0;      # [243][000798]
//     	TLD4.A.AOFFI.NODEP R0, R28, R53, 0x0, 0x0, 2D; # [244][0007a0]
//     	FFMA.FTZ R46, R27, R30, R31;     # [245][0007a8]
//     	TLD4.R.AOFFI.NODEP.T R28, R28, R53, 0x0, 0x0, 2D; # [246][0007b0]
//     	FADD.FTZ R47, R47, R50;          # [247][0007b8]
//     	FADD.FTZ R45, R45, R46;          # [248][0007c0]
//     	FFMA.FTZ R49, R27, R49, R52;     # [249][0007c8]
//     	FADD.FTZ R48, R48, R51;          # [250][0007d0]
//     	FADD.FTZ R46, -|R32|, R0;        # [251][0007d8]
//     	FADD.FTZ R50, -|R32|, R1;        # [252][0007e0]
//     	FADD.FTZ R53, -|R32|, R2;        # [253][0007e8]
//     	FSET.BF.LT.FTZ.AND R52, |R46|, c[0x10][0x4], PT; # [254][0007f0]
//     	FSET.BF.LT.FTZ.AND R51, |R50|, c[0x10][0x4], PT; # [255][0007f8]
//     	FADD.FTZ R46, -|R32|, R3;        # [256][000800]
//     	FSET.BF.LT.FTZ.AND R50, |R53|, c[0x10][0x4], PT; # [257][000808]
//     	FADD.FTZ R32, R52, R51;          # [258][000810]
//     	FSET.BF.LT.FTZ.AND R46, |R46|, c[0x10][0x4], PT; # [259][000818]
//     	FADD.FTZ R54, -|R33|, R3;        # [260][000820]
//     	FADD.FTZ R32, R32, R50;          # [261][000828]
//     	FADD.FTZ R53, R32, R46;          # [262][000830]
//     	FADD.FTZ R32, R49, R43;          # [263][000838]
//     	FADD.FTZ R43, -|R39|, R0;        # [264][000840]
//     	FADD.FTZ R36, R36, R53;          # [265][000848]
//     	FMUL.FTZ R53, R28, R52;          # [266][000850]
//     	FADD.FTZ R49, -|R39|, R1;        # [267][000858]
//     	FSET.BF.LT.FTZ.AND R52, |R43|, c[0x10][0x4], PT; # [268][000860]
//     	FFMA.FTZ R43, R29, R51, R53;     # [269][000868]
//     	FSET.BF.LT.FTZ.AND R51, |R49|, c[0x10][0x4], PT; # [270][000870]
//     	FMUL.FTZ R49, R28, R52;          # [271][000878]
//     	FFMA.FTZ R43, R30, R50, R43;     # [272][000880]
//     	FADD.FTZ R52, R52, R51;          # [273][000888]
//     	FFMA.FTZ R49, R29, R51, R49;     # [274][000890]
//     	FADD.FTZ R51, -|R39|, R2;        # [275][000898]
//     	FADD.FTZ R39, -|R39|, R3;        # [276][0008a0]
//     	FADD.FTZ R50, -|R41|, R1;        # [277][0008a8]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [278][0008b0]
//     	FSET.BF.LT.FTZ.AND R39, |R39|, c[0x10][0x4], PT; # [279][0008b8]
//     	FFMA.FTZ R43, R31, R46, R43;     # [280][0008c0]
//     	FADD.FTZ R52, R52, R51;          # [281][0008c8]
//     	FFMA.FTZ R49, R30, R51, R49;     # [282][0008d0]
//     	FSET.BF.LT.FTZ.AND R51, |R50|, c[0x10][0x4], PT; # [283][0008d8]
//     	FADD.FTZ R52, R52, R39;          # [284][0008e0]
//     	FADD.FTZ R43, R48, R43;          # [285][0008e8]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R36, PT; # [286][0008f0]
//     	FADD.FTZ R34, R52, R34;          # [287][0008f8]
//     	FADD.FTZ R52, -|R41|, R0;        # [288][000900]
//     	FSETP.LT.FTZ.AND P1, PT, RZ, R34, PT; # [289][000908]
//     	FSET.BF.LT.FTZ.AND R52, |R52|, c[0x10][0x4], PT; # [290][000910]
//     	FMUL.FTZ R50, R28, R52;          # [291][000918]
//     	FFMA.FTZ R50, R29, R51, R50;     # [292][000920]
//     	FADD.FTZ R51, R52, R51;          # [293][000928]
//     	FADD.FTZ R52, -|R41|, R2;        # [294][000930]
//     	FADD.FTZ R41, -|R41|, R3;        # [295][000938]
//     	FSET.BF.LT.FTZ.AND R52, |R52|, c[0x10][0x4], PT; # [296][000940]
//     	FSET.BF.LT.FTZ.AND R41, |R41|, c[0x10][0x4], PT; # [297][000948]
//     	FADD.FTZ R51, R51, R52;          # [298][000950]
//     	FFMA.FTZ R50, R30, R52, R50;     # [299][000958]
//     	FADD.FTZ R52, R51, R41;          # [300][000960]
//     	FADD.FTZ R51, -|R33|, R0;        # [301][000968]
//     	FADD.FTZ R35, R52, R35;          # [302][000970]
//     	FADD.FTZ R52, -|R33|, R1;        # [303][000978]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [304][000980]
//     	FSETP.LT.FTZ.AND P2, PT, RZ, R35, PT; # [305][000988]
//     	FSET.BF.LT.FTZ.AND R52, |R52|, c[0x10][0x4], PT; # [306][000990]
//     	FMUL.FTZ R46, R28, R51;          # [307][000998]
//     	FADD.FTZ R51, R51, R52;          # [308][0009a0]
//     	FFMA.FTZ R46, R29, R52, R46;     # [309][0009a8]
//     	FADD.FTZ R52, -|R33|, R2;        # [310][0009b0]
//     	FSET.BF.LT.FTZ.AND R53, |R52|, c[0x10][0x4], PT; # [311][0009b8]
//     	FADD.FTZ R33, R51, R53;          # [312][0009c0]
//     	FSET.BF.LT.FTZ.AND R51, |R54|, c[0x10][0x4], PT; # [313][0009c8]
//     	FFMA.FTZ R52, R30, R53, R46;     # [314][0009d0]
//     	FADD.FTZ R46, -|R37|, R12;       # [315][0009d8]
//     	FADD.FTZ R33, R33, R51;          # [316][0009e0]
//     	FADD.FTZ R53, -|R37|, R13;       # [317][0009e8]
//     	FADD.FTZ R33, R33, R44;          # [318][0009f0]
//     	FSET.BF.LT.FTZ.AND R44, |R46|, c[0x10][0x4], PT; # [319][0009f8]
//     	FFMA.FTZ R46, R31, R39, R49;     # [320][000a00]
//     	FSET.BF.LT.FTZ.AND R39, |R53|, c[0x10][0x4], PT; # [321][000a08]
//     	FMUL.FTZ R49, R16, R44;          # [322][000a10]
//     	FADD.FTZ R46, R46, R47;          # [323][000a18]
//     	FSETP.LT.FTZ.AND P3, PT, RZ, R33, PT; # [324][000a20]
//     	FFMA.FTZ R49, R17, R39, R49;     # [325][000a28]
//     	FADD.FTZ R39, R44, R39;          # [326][000a30]
//     	FADD.FTZ R44, -|R37|, R14;       # [327][000a38]
//     	FSET.BF.LT.FTZ.AND R44, |R44|, c[0x10][0x4], PT; # [328][000a40]
//     	FFMA.FTZ R53, R18, R44, R49;     # [329][000a48]
//     	FADD.FTZ R39, R39, R44;          # [330][000a50]
//     	FADD.FTZ R44, -|R37|, R15;       # [331][000a58]
//     	FSET.BF.LT.FTZ.AND R49, |R44|, c[0x10][0x4], PT; # [332][000a60]
//     	FFMA.FTZ R44, R19, R49, R53;     # [333][000a68]
//     	FADD.FTZ R53, R39, R49;          # [334][000a70]
//     	FADD.FTZ R39, -|R37|, R8;        # [335][000a78]
//     	FFMA.FTZ R49, R31, R41, R50;     # [336][000a80]
//     	FADD.FTZ R50, -|R37|, R9;        # [337][000a88]
//     	FSET.BF.LT.FTZ.AND R41, |R39|, c[0x10][0x4], PT; # [338][000a90]
//     	FFMA.FTZ R39, R31, R51, R52;     # [339][000a98]
//     	FSET.BF.LT.FTZ.AND R50, |R50|, c[0x10][0x4], PT; # [340][000aa0]
//     	FMUL.FTZ R51, R20, R41;          # [341][000aa8]
//     	FADD.FTZ R45, R45, R49;          # [342][000ab0]
//     	FADD.FTZ R41, R41, R50;          # [343][000ab8]
//     	FFMA.FTZ R51, R21, R50, R51;     # [344][000ac0]
//     	FADD.FTZ R50, -|R37|, R10;       # [345][000ac8]
//     	FADD.FTZ R32, R39, R32;          # [346][000ad0]
//     	FSET.BF.LT.FTZ.AND R50, |R50|, c[0x10][0x4], PT; # [347][000ad8]
//     	FFMA.FTZ R52, R22, R50, R51;     # [348][000ae0]
//     	FADD.FTZ R50, R41, R50;          # [349][000ae8]
//     	FADD.FTZ R41, -|R37|, R11;       # [350][000af0]
//     	FSET.BF.LT.FTZ.AND R51, |R41|, c[0x10][0x4], PT; # [351][000af8]
//     	FFMA.FTZ R41, R23, R51, R52;     # [352][000b00]
//     	FADD.FTZ R50, R50, R51;          # [353][000b08]
//     	FADD.FTZ R51, -|R37|, R4;        # [354][000b10]
//     	FADD.FTZ R52, -|R37|, R5;        # [355][000b18]
//     	FADD.FTZ R41, R44, R41;          # [356][000b20]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [357][000b28]
//     	FSET.BF.LT.FTZ.AND R44, |R52|, c[0x10][0x4], PT; # [358][000b30]
//     	FADD.FTZ R50, R53, R50;          # [359][000b38]
//     	FMUL.FTZ R52, R24, R51;          # [360][000b40]
//     	FFMA.FTZ R52, R25, R44, R52;     # [361][000b48]
//     	FADD.FTZ R44, R51, R44;          # [362][000b50]
//     	FADD.FTZ R51, -|R37|, R6;        # [363][000b58]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [364][000b60]
//     	FFMA.FTZ R53, R26, R51, R52;     # [365][000b68]
//     	FADD.FTZ R51, R44, R51;          # [366][000b70]
//     	FADD.FTZ R44, -|R37|, R7;        # [367][000b78]
//     	FSET.BF.LT.FTZ.AND R52, |R44|, c[0x10][0x4], PT; # [368][000b80]
//     	FFMA.FTZ R44, R27, R52, R53;     # [369][000b88]
//     	FADD.FTZ R52, R51, R52;          # [370][000b90]
//     	FADD.FTZ R51, -|R37|, R0;        # [371][000b98]
//     	FADD.FTZ R41, R41, R44;          # [372][000ba0]
//     	FADD.FTZ R50, R50, R52;          # [373][000ba8]
//     	FADD.FTZ R52, -|R37|, R1;        # [374][000bb0]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [375][000bb8]
//     	FSET.BF.LT.FTZ.AND R52, |R52|, c[0x10][0x4], PT; # [376][000bc0]
//     	FMUL.FTZ R44, R28, R51;          # [377][000bc8]
//     	FADD.FTZ R51, R51, R52;          # [378][000bd0]
//     	FFMA.FTZ R44, R29, R52, R44;     # [379][000bd8]
//     	FADD.FTZ R52, -|R37|, R2;        # [380][000be0]
//     	FADD.FTZ R37, -|R37|, R3;        # [381][000be8]
//     	FSET.BF.LT.FTZ.AND R52, |R52|, c[0x10][0x4], PT; # [382][000bf0]
//     	FSET.BF.LT.FTZ.AND R37, |R37|, c[0x10][0x4], PT; # [383][000bf8]
//     	FFMA.FTZ R44, R30, R52, R44;     # [384][000c00]
//     	FADD.FTZ R52, R51, R52;          # [385][000c08]
//     	FADD.FTZ R51, -|R40|, R12;       # [386][000c10]
//     	FFMA.FTZ R44, R31, R37, R44;     # [387][000c18]
//     	FADD.FTZ R37, R52, R37;          # [388][000c20]
//     	FADD.FTZ R52, -|R40|, R13;       # [389][000c28]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [390][000c30]
//     	FADD.FTZ R37, R37, R50;          # [391][000c38]
//     	FSET.BF.LT.FTZ.AND R50, |R52|, c[0x10][0x4], PT; # [392][000c40]
//     	FMUL.FTZ R52, R16, R51;          # [393][000c48]
//     	FFMA.FTZ R52, R17, R50, R52;     # [394][000c50]
//     	FADD.FTZ R50, R51, R50;          # [395][000c58]
//     	FADD.FTZ R51, -|R40|, R14;       # [396][000c60]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [397][000c68]
//     	FFMA.FTZ R53, R18, R51, R52;     # [398][000c70]
//     	FADD.FTZ R51, R50, R51;          # [399][000c78]
//     	FADD.FTZ R50, -|R40|, R15;       # [400][000c80]
//     	FSET.BF.LT.FTZ.AND R52, |R50|, c[0x10][0x4], PT; # [401][000c88]
//     	FFMA.FTZ R50, R19, R52, R53;     # [402][000c90]
//     	FADD.FTZ R51, R51, R52;          # [403][000c98]
//     	FADD.FTZ R52, -|R40|, R8;        # [404][000ca0]
//     	FADD.FTZ R53, -|R40|, R9;        # [405][000ca8]
//     	FSET.BF.LT.FTZ.AND R48, |R52|, c[0x10][0x4], PT; # [406][000cb0]
//     	FSET.BF.LT.FTZ.AND R47, |R53|, c[0x10][0x4], PT; # [407][000cb8]
//     	FMUL.FTZ R52, R20, R48;          # [408][000cc0]
//     	FFMA.FTZ R52, R21, R47, R52;     # [409][000cc8]
//     	FADD.FTZ R47, R48, R47;          # [410][000cd0]
//     	FADD.FTZ R48, -|R40|, R10;       # [411][000cd8]
//     	FSET.BF.LT.FTZ.AND R48, |R48|, c[0x10][0x4], PT; # [412][000ce0]
//     	FFMA.FTZ R53, R22, R48, R52;     # [413][000ce8]
//     	FADD.FTZ R47, R47, R48;          # [414][000cf0]
//     	FADD.FTZ R48, -|R40|, R11;       # [415][000cf8]
//     	FSET.BF.LT.FTZ.AND R52, |R48|, c[0x10][0x4], PT; # [416][000d00]
//     	FFMA.FTZ R48, R23, R52, R53;     # [417][000d08]
//     	FADD.FTZ R47, R47, R52;          # [418][000d10]
//     	FADD.FTZ R52, -|R40|, R4;        # [419][000d18]
//     	FADD.FTZ R53, -|R40|, R5;        # [420][000d20]
//     	FADD.FTZ R47, R47, R51;          # [421][000d28]
//     	FSET.BF.LT.FTZ.AND R51, |R52|, c[0x10][0x4], PT; # [422][000d30]
//     	FADD.FTZ R48, R50, R48;          # [423][000d38]
//     	FSET.BF.LT.FTZ.AND R50, |R53|, c[0x10][0x4], PT; # [424][000d40]
//     	FMUL.FTZ R52, R24, R51;          # [425][000d48]
//     	FFMA.FTZ R52, R25, R50, R52;     # [426][000d50]
//     	FADD.FTZ R50, R51, R50;          # [427][000d58]
//     	FADD.FTZ R51, -|R40|, R6;        # [428][000d60]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [429][000d68]
//     	FFMA.FTZ R53, R26, R51, R52;     # [430][000d70]
//     	FADD.FTZ R50, R50, R51;          # [431][000d78]
//     	FADD.FTZ R51, -|R40|, R7;        # [432][000d80]
//     	FSET.BF.LT.FTZ.AND R52, |R51|, c[0x10][0x4], PT; # [433][000d88]
//     	FFMA.FTZ R51, R27, R52, R53;     # [434][000d90]
//     	FADD.FTZ R50, R50, R52;          # [435][000d98]
//     	FADD.FTZ R52, -|R40|, R0;        # [436][000da0]
//     	FADD.FTZ R53, -|R40|, R1;        # [437][000da8]
//     	FADD.FTZ R50, R50, R47;          # [438][000db0]
//     	FSET.BF.LT.FTZ.AND R52, |R52|, c[0x10][0x4], PT; # [439][000db8]
//     	FADD.FTZ R47, R48, R51;          # [440][000dc0]
//     	FSET.BF.LT.FTZ.AND R51, |R53|, c[0x10][0x4], PT; # [441][000dc8]
//     	FMUL.FTZ R48, R28, R52;          # [442][000dd0]
//     	FFMA.FTZ R48, R29, R51, R48;     # [443][000dd8]
//     	FADD.FTZ R51, R52, R51;          # [444][000de0]
//     	FADD.FTZ R52, -|R40|, R2;        # [445][000de8]
//     	FADD.FTZ R40, -|R40|, R3;        # [446][000df0]
//     	FSET.BF.LT.FTZ.AND R52, |R52|, c[0x10][0x4], PT; # [447][000df8]
//     	FSET.BF.LT.FTZ.AND R40, |R40|, c[0x10][0x4], PT; # [448][000e00]
//     	FFMA.FTZ R48, R30, R52, R48;     # [449][000e08]
//     	FADD.FTZ R52, R51, R52;          # [450][000e10]
//     	FADD.FTZ R51, -|R38|, R12;       # [451][000e18]
//     	FFMA.FTZ R48, R31, R40, R48;     # [452][000e20]
//     	FADD.FTZ R40, R52, R40;          # [453][000e28]
//     	FADD.FTZ R52, -|R38|, R13;       # [454][000e30]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [455][000e38]
//     	FADD.FTZ R40, R40, R50;          # [456][000e40]
//     	FSET.BF.LT.FTZ.AND R50, |R52|, c[0x10][0x4], PT; # [457][000e48]
//     	FMUL.FTZ R52, R16, R51;          # [458][000e50]
//     	FADD.FTZ R12, -|R42|, R12;       # [459][000e58]
//     	FFMA.FTZ R52, R17, R50, R52;     # [460][000e60]
//     	FADD.FTZ R50, R51, R50;          # [461][000e68]
//     	FADD.FTZ R51, -|R38|, R14;       # [462][000e70]
//     	FADD.FTZ R14, -|R42|, R14;       # [463][000e78]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [464][000e80]
//     	FFMA.FTZ R53, R18, R51, R52;     # [465][000e88]
//     	FADD.FTZ R51, R50, R51;          # [466][000e90]
//     	FADD.FTZ R50, -|R38|, R15;       # [467][000e98]
//     	FSET.BF.LT.FTZ.AND R52, |R50|, c[0x10][0x4], PT; # [468][000ea0]
//     	FFMA.FTZ R50, R19, R52, R53;     # [469][000ea8]
//     	FADD.FTZ R51, R51, R52;          # [470][000eb0]
//     	FADD.FTZ R52, -|R38|, R8;        # [471][000eb8]
//     	FADD.FTZ R53, -|R38|, R9;        # [472][000ec0]
//     	FADD.FTZ R8, -|R42|, R8;         # [473][000ec8]
//     	FSET.BF.LT.FTZ.AND R49, |R52|, c[0x10][0x4], PT; # [474][000ed0]
//     	FSET.BF.LT.FTZ.AND R39, |R53|, c[0x10][0x4], PT; # [475][000ed8]
//     	FADD.FTZ R9, -|R42|, R9;         # [476][000ee0]
//     	FMUL.FTZ R52, R20, R49;          # [477][000ee8]
//     	FSET.BF.LT.FTZ.AND R8, |R8|, c[0x10][0x4], PT; # [478][000ef0]
//     	FSET.BF.LT.FTZ.AND R9, |R9|, c[0x10][0x4], PT; # [479][000ef8]
//     	FFMA.FTZ R52, R21, R39, R52;     # [480][000f00]
//     	FADD.FTZ R39, R49, R39;          # [481][000f08]
//     	FADD.FTZ R49, -|R38|, R10;       # [482][000f10]
//     	FADD.FTZ R10, -|R42|, R10;       # [483][000f18]
//     	FSET.BF.LT.FTZ.AND R49, |R49|, c[0x10][0x4], PT; # [484][000f20]
//     	FFMA.FTZ R53, R22, R49, R52;     # [485][000f28]
//     	FADD.FTZ R39, R39, R49;          # [486][000f30]
//     	FADD.FTZ R49, -|R38|, R11;       # [487][000f38]
//     	FSET.BF.LT.FTZ.AND R52, |R49|, c[0x10][0x4], PT; # [488][000f40]
//     	FFMA.FTZ R49, R23, R52, R53;     # [489][000f48]
//     	FADD.FTZ R39, R39, R52;          # [490][000f50]
//     	FADD.FTZ R52, -|R38|, R4;        # [491][000f58]
//     	FADD.FTZ R53, -|R38|, R5;        # [492][000f60]
//     	FADD.FTZ R39, R39, R51;          # [493][000f68]
//     	FSET.BF.LT.FTZ.AND R51, |R52|, c[0x10][0x4], PT; # [494][000f70]
//     	FADD.FTZ R49, R49, R50;          # [495][000f78]
//     	FSET.BF.LT.FTZ.AND R50, |R53|, c[0x10][0x4], PT; # [496][000f80]
//     	FMUL.FTZ R52, R24, R51;          # [497][000f88]
//     	FADD.FTZ R5, -|R42|, R5;         # [498][000f90]
//     	FADD.FTZ R4, -|R42|, R4;         # [499][000f98]
//     	FFMA.FTZ R52, R25, R50, R52;     # [500][000fa0]
//     	FADD.FTZ R50, R51, R50;          # [501][000fa8]
//     	FADD.FTZ R51, -|R38|, R6;        # [502][000fb0]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [503][000fb8]
//     	FFMA.FTZ R53, R26, R51, R52;     # [504][000fc0]
//     	FADD.FTZ R51, R50, R51;          # [505][000fc8]
//     	FADD.FTZ R50, -|R38|, R7;        # [506][000fd0]
//     	FSET.BF.LT.FTZ.AND R52, |R50|, c[0x10][0x4], PT; # [507][000fd8]
//     	FFMA.FTZ R50, R27, R52, R53;     # [508][000fe0]
//     	FADD.FTZ R52, R51, R52;          # [509][000fe8]
//     	FADD.FTZ R51, -|R38|, R0;        # [510][000ff0]
//     	FADD.FTZ R49, R50, R49;          # [511][000ff8]
//     	FADD.FTZ R39, R52, R39;          # [512][001000]
//     	FADD.FTZ R52, -|R38|, R1;        # [513][001008]
//     	FSET.BF.LT.FTZ.AND R51, |R51|, c[0x10][0x4], PT; # [514][001010]
//     	FADD.FTZ R53, -|R42|, R13;       # [515][001018]
//     	FSET.BF.LT.FTZ.AND R52, |R52|, c[0x10][0x4], PT; # [516][001020]
//     	FMUL.FTZ R50, R28, R51;          # [517][001028]
//     	FFMA.FTZ R50, R29, R52, R50;     # [518][001030]
//     	FADD.FTZ R52, R51, R52;          # [519][001038]
//     	FADD.FTZ R51, -|R38|, R2;        # [520][001040]
//     	FADD.FTZ R2, -|R42|, R2;         # [521][001048]
//     	FADD.FTZ R38, -|R38|, R3;        # [522][001050]
//     	FSET.BF.LT.FTZ.AND R54, |R51|, c[0x10][0x4], PT; # [523][001058]
//     	FSET.BF.LT.FTZ.AND R51, |R12|, c[0x10][0x4], PT; # [524][001060]
//     	FSET.BF.LT.FTZ.AND R2, |R2|, c[0x10][0x4], PT; # [525][001068]
//     	FFMA.FTZ R13, R30, R54, R50;     # [526][001070]
//     	FADD.FTZ R12, R52, R54;          # [527][001078]
//     	FSET.BF.LT.FTZ.AND R50, |R53|, c[0x10][0x4], PT; # [528][001080]
//     	FMUL.FTZ R52, R16, R51;          # [529][001088]
//     	FADD.FTZ R16, R16, R17;          # [530][001090]
//     	FSET.BF.LT.FTZ.AND R38, |R38|, c[0x10][0x4], PT; # [531][001098]
//     	FFMA.FTZ R52, R17, R50, R52;     # [532][0010a0]
//     	FADD.FTZ R17, R44, R41;          # [533][0010a8]
//     	FADD.FTZ R44, -|R42|, R15;       # [534][0010b0]
//     	FSET.BF.LT.FTZ.AND R15, |R14|, c[0x10][0x4], PT; # [535][0010b8]
//     	FADD.FTZ R14, R51, R50;          # [536][0010c0]
//     	FADD.FTZ R41, R48, R47;          # [537][0010c8]
//     	FSET.BF.LT.FTZ.AND R44, |R44|, c[0x10][0x4], PT; # [538][0010d0]
//     	FADD.FTZ R14, R14, R15;          # [539][0010d8]
//     	FADD.FTZ R47, R16, R18;          # [540][0010e0]
//     	FFMA.FTZ R18, R18, R15, R52;     # [541][0010e8]
//     	FADD.FTZ R16, R14, R44;          # [542][0010f0]
//     	FADD.FTZ R15, R47, R19;          # [543][0010f8]
//     	FFMA.FTZ R14, R19, R44, R18;     # [544][001100]
//     	FADD.FTZ R18, -|R42|, R11;       # [545][001108]
//     	FSET.BF.LT.FTZ.AND R11, |R10|, c[0x10][0x4], PT; # [546][001110]
//     	FADD.FTZ R10, R8, R9;            # [547][001118]
//     	FADD.FTZ R19, R20, R21;          # [548][001120]
//     	FMUL.FTZ R20, R20, R8;           # [549][001128]
//     	FSET.BF.LT.FTZ.AND R18, |R18|, c[0x10][0x4], PT; # [550][001130]
//     	FADD.FTZ R8, R10, R11;           # [551][001138]
//     	FADD.FTZ R10, R19, R22;          # [552][001140]
//     	FFMA.FTZ R9, R21, R9, R20;       # [553][001148]
//     	FADD.FTZ R8, R8, R18;            # [554][001150]
//     	FADD.FTZ R10, R10, R23;          # [555][001158]
//     	FFMA.FTZ R11, R22, R11, R9;      # [556][001160]
//     	FADD.FTZ R9, R8, R16;            # [557][001168]
//     	FADD.FTZ R8, R15, R10;           # [558][001170]
//     	FFMA.FTZ R15, R23, R18, R11;     # [559][001178]
//     	FADD.FTZ R11, -|R42|, R6;        # [560][001180]
//     	FSET.BF.LT.FTZ.AND R10, |R5|, c[0x10][0x4], PT; # [561][001188]
//     	FSET.BF.LT.FTZ.AND R6, |R4|, c[0x10][0x4], PT; # [562][001190]
//     	FADD.FTZ R5, -|R42|, R7;         # [563][001198]
//     	FSET.BF.LT.FTZ.AND R11, |R11|, c[0x10][0x4], PT; # [564][0011a0]
//     	FADD.FTZ R7, R6, R10;            # [565][0011a8]
//     	FADD.FTZ R4, R15, R14;           # [566][0011b0]
//     	FSET.BF.LT.FTZ.AND R5, |R5|, c[0x10][0x4], PT; # [567][0011b8]
//     	FADD.FTZ R7, R7, R11;            # [568][0011c0]
//     	FMUL.FTZ R15, R24, R6;           # [569][0011c8]
//     	FADD.FTZ R14, R24, R25;          # [570][0011d0]
//     	FADD.FTZ R6, R7, R5;             # [571][0011d8]
//     	FFMA.FTZ R15, R25, R10, R15;     # [572][0011e0]
//     	FADD.FTZ R10, R14, R26;          # [573][0011e8]
//     	FADD.FTZ R7, R6, R9;             # [574][0011f0]
//     	FADD.FTZ R6, -|R42|, R1;         # [575][0011f8]
//     	FADD.FTZ R9, R10, R27;           # [576][001200]
//     	FADD.FTZ R1, -|R42|, R0;         # [577][001208]
//     	FFMA.FTZ R11, R26, R11, R15;     # [578][001210]
//     	FSET.BF.LT.FTZ.AND R0, |R6|, c[0x10][0x4], PT; # [579][001218]
//     	FSET.BF.LT.FTZ.AND R6, |R1|, c[0x10][0x4], PT; # [580][001220]
//     	FADD.FTZ R8, R8, R9;             # [581][001228]
//     	FFMA.FTZ R9, R27, R5, R11;       # [582][001230]
//     	FADD.FTZ R1, -|R42|, R3;         # [583][001238]
//     	FADD.FTZ R3, R6, R0;             # [584][001240]
//     	FADD.FTZ R14, R9, R4;            # [585][001248]
//     	FADD.FTZ R4, R28, R29;           # [586][001250]
//     	FSET.BF.LT.FTZ.AND R1, |R1|, c[0x10][0x4], PT; # [587][001258]
//     	FADD.FTZ R3, R3, R2;             # [588][001260]
//     	FADD.FTZ R4, R4, R30;            # [589][001268]
//     	MUFU.RCP R9, R34;                # [590][001270]
//     	FADD.FTZ R3, R3, R1;             # [591][001278]
//     	FADD.FTZ R4, R4, R31;            # [592][001280]
//     	MUFU.RCP R10, R35;               # [593][001288]
//     	FADD.FTZ R3, R3, R7;             # [594][001290]
//     	MUFU.RCP R7, R36;                # [595][001298]
//     	FADD.FTZ R4, R8, R4;             # [596][0012a0]
//     	MUFU.RCP R11, R33;               # [597][0012a8]
//     	FMUL.FTZ R7, R43, R7;            # [598][0012b0]
//     	@!P0 FMUL.FTZ R7, R4, 0.0625;    # [599][0012b8]
//     	FADD.FTZ R5, R12, R38;           # [600][0012c0]
//     	MUFU.RCP R12, R37;               # [601][0012c8]
//     	FFMA.FTZ R8, R46, R9, R7;        # [602][0012d0]
//     	@!P1 FFMA.FTZ R8, R4, 0.0625, R7; # [603][0012d8]
//     	FMUL.FTZ R9, R28, R6;            # [604][0012e0]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R37, PT; # [605][0012e8]
//     	FFMA.FTZ R6, R45, R10, R8;       # [606][0012f0]
//     	@!P2 FFMA.FTZ R6, R4, 0.0625, R8; # [607][0012f8]
//     	FFMA.FTZ R8, R29, R0, R9;        # [608][001300]
//     	FADD.FTZ R5, R5, R39;            # [609][001308]
//     	FFMA.FTZ R0, R32, R11, R6;       # [610][001310]
//     	@!P3 FFMA.FTZ R0, R4, 0.0625, R6; # [611][001318]
//     	FFMA.FTZ R6, R30, R2, R8;        # [612][001320]
//     	MUFU.RCP R7, R40;                # [613][001328]
//     	FFMA.FTZ R2, R17, R12, R0;       # [614][001330]
//     	@!P0 FFMA.FTZ R2, R4, 0.0625, R0; # [615][001338]
//     	FFMA.FTZ R13, R31, R38, R13;     # [616][001340]
//     	FSETP.LT.FTZ.AND P1, PT, RZ, R40, PT; # [617][001348]
//     	FSETP.LT.FTZ.AND P2, PT, RZ, R5, PT; # [618][001350]
//     	FFMA.FTZ R1, R31, R1, R6;        # [619][001358]
//     	FFMA.FTZ R0, R41, R7, R2;        # [620][001360]
//     	FADD.FTZ R13, R13, R49;          # [621][001368]
//     	MUFU.RCP R5, R5;                 # [622][001370]
//     	@!P1 FFMA.FTZ R0, R4, 0.0625, R2; # [623][001378]
//     	FADD.FTZ R2, R1, R14;            # [624][001380]
//     	MUFU.RCP R6, R3;                 # [625][001388]
//     	FFMA.FTZ R1, R13, R5, R0;        # [626][001390]
//     	@!P2 FFMA.FTZ R1, R4, 0.0625, R0; # [627][001398]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R3, PT; # [628][0013a0]
//     	FFMA.FTZ R0, R2, R6, R1;         # [629][0013a8]
//     	@!P0 FFMA.FTZ R0, R4, 0.0625, R1; # [630][0013b0]
//     	FMUL.FTZ.S R1, R0, 0.125;        # [631][0013b8]
//     L13c0:
//     	IPA R1, a[0x94], R0;             # [632][0013c0] GENERIC_ATTRIBUTE_01_Y
//     	IPA R0, a[0x90], R0;             # [633][0013c8] ATTR1
//     	FADD32I.FTZ R17, R1, -0.0025;    # [634][0013d0]
//     	FADD32I.FTZ R16, R0, 0xbaccccce; # [635][0013d8]
//     	TLD4.A.NODEP R12, R16, 0x0, 0x0, 2D; # [636][0013e0]
//     	TLD4.R.NODEP R28, R16, 0x0, 0x0, 2D; # [637][0013e8]
//     	MOV32I R0, 0x200;                # [638][0013f0]
//     	TLD4.A.AOFFI.NODEP R8, R16, R0, 0x0, 0x0, 2D; # [639][0013f8]
//     	TLD4.R.AOFFI.NODEP.T R24, R16, R0, 0x0, 0x0, 2D; # [640][001400]
//     	MOV32I R0, 0x2;                  # [641][001408]
//     	TLD4.A.AOFFI.NODEP R4, R16, R0, 0x0, 0x0, 2D; # [642][001410]
//     	TLD4.R.AOFFI.NODEP R20, R16, R0, 0x0, 0x0, 2D; # [643][001418]
//     	MOV32I R18, 0x202;               # [644][001420]
//     	TLD4.A.AOFFI.NODEP R0, R16, R18, 0x0, 0x0, 2D; # [645][001428]
//     	TLD4.R.AOFFI.NODEP.T R16, R16, R18, 0x0, 0x0, 2D; # [646][001430]
//     	FADD.FTZ R12, -|R32|, R12;       # [647][001438]
//     	FADD.FTZ R13, -|R32|, R13;       # [648][001440]
//     	FADD.FTZ R14, -|R32|, R14;       # [649][001448]
//     	FSET.BF.LT.FTZ.AND R12, |R12|, c[0x10][0x4], PT; # [650][001450]
//     	FSET.BF.LT.FTZ.AND R13, |R13|, c[0x10][0x4], PT; # [651][001458]
//     	FADD.FTZ R15, -|R32|, R15;       # [652][001460]
//     	FMUL.FTZ R33, R28, R12;          # [653][001468]
//     	FSET.BF.LT.FTZ.AND R14, |R14|, c[0x10][0x4], PT; # [654][001470]
//     	FADD.FTZ R12, R12, R13;          # [655][001478]
//     	FADD.FTZ R28, R28, R29;          # [656][001480]
//     	FFMA.FTZ R29, R29, R13, R33;     # [657][001488]
//     	FADD.FTZ R8, -|R32|, R8;         # [658][001490]
//     	FSET.BF.LT.FTZ.AND R15, |R15|, c[0x10][0x4], PT; # [659][001498]
//     	FADD.FTZ R12, R12, R14;          # [660][0014a0]
//     	FADD.FTZ R13, R28, R30;          # [661][0014a8]
//     	FADD.FTZ R9, -|R32|, R9;         # [662][0014b0]
//     	FFMA.FTZ R28, R30, R14, R29;     # [663][0014b8]
//     	FSET.BF.LT.FTZ.AND R8, |R8|, c[0x10][0x4], PT; # [664][0014c0]
//     	FADD.FTZ R12, R12, R15;          # [665][0014c8]
//     	FADD.FTZ R10, -|R32|, R10;       # [666][0014d0]
//     	FSET.BF.LT.FTZ.AND R9, |R9|, c[0x10][0x4], PT; # [667][0014d8]
//     	FFMA.FTZ R15, R31, R15, R28;     # [668][0014e0]
//     	FMUL.FTZ R28, R24, R8;           # [669][0014e8]
//     	FADD.FTZ R11, -|R32|, R11;       # [670][0014f0]
//     	FSET.BF.LT.FTZ.AND R10, |R10|, c[0x10][0x4], PT; # [671][0014f8]
//     	FADD.FTZ R8, R8, R9;             # [672][001500]
//     	FADD.FTZ R14, R13, R31;          # [673][001508]
//     	FADD.FTZ R13, R24, R25;          # [674][001510]
//     	FSET.BF.LT.FTZ.AND R11, |R11|, c[0x10][0x4], PT; # [675][001518]
//     	FADD.FTZ R8, R8, R10;            # [676][001520]
//     	FFMA.FTZ R24, R25, R9, R28;      # [677][001528]
//     	FADD.FTZ R9, R13, R26;           # [678][001530]
//     	FADD.FTZ R8, R8, R11;            # [679][001538]
//     	FADD.FTZ R5, -|R32|, R5;         # [680][001540]
//     	FADD.FTZ R4, -|R32|, R4;         # [681][001548]
//     	FFMA.FTZ R13, R26, R10, R24;     # [682][001550]
//     	FADD.FTZ R10, R9, R27;           # [683][001558]
//     	FADD.FTZ R6, -|R32|, R6;         # [684][001560]
//     	FADD.FTZ R9, R8, R12;            # [685][001568]
//     	FSET.BF.LT.FTZ.AND R5, |R5|, c[0x10][0x4], PT; # [686][001570]
//     	FSET.BF.LT.FTZ.AND R4, |R4|, c[0x10][0x4], PT; # [687][001578]
//     	FADD.FTZ R8, -|R32|, R7;         # [688][001580]
//     	FSET.BF.LT.FTZ.AND R7, |R6|, c[0x10][0x4], PT; # [689][001588]
//     	FADD.FTZ R6, R4, R5;             # [690][001590]
//     	FMUL.FTZ R12, R20, R4;           # [691][001598]
//     	FSET.BF.LT.FTZ.AND R8, |R8|, c[0x10][0x4], PT; # [692][0015a0]
//     	FADD.FTZ R4, R6, R7;             # [693][0015a8]
//     	FFMA.FTZ R5, R21, R5, R12;       # [694][0015b0]
//     	FADD.FTZ R6, R20, R21;           # [695][0015b8]
//     	FADD.FTZ R4, R4, R8;             # [696][0015c0]
//     	FFMA.FTZ R7, R22, R7, R5;        # [697][0015c8]
//     	FFMA.FTZ R11, R27, R11, R13;     # [698][0015d0]
//     	FADD.FTZ R5, R4, R9;             # [699][0015d8]
//     	FFMA.FTZ R8, R23, R8, R7;        # [700][0015e0]
//     	FADD.FTZ R6, R6, R22;            # [701][0015e8]
//     	FADD.FTZ R11, R15, R11;          # [702][0015f0]
//     	FADD.FTZ R10, R10, R14;          # [703][0015f8]
//     	FADD.FTZ R6, R6, R23;            # [704][001600]
//     	FADD.FTZ R8, R11, R8;            # [705][001608]
//     	FADD.FTZ R6, R6, R10;            # [706][001610]
//     	FADD.FTZ R1, -|R32|, R1;         # [707][001618]
//     	FADD.FTZ R0, -|R32|, R0;         # [708][001620]
//     	FADD.FTZ R2, -|R32|, R2;         # [709][001628]
//     	FSET.BF.LT.FTZ.AND R1, |R1|, c[0x10][0x4], PT; # [710][001630]
//     	FSET.BF.LT.FTZ.AND R0, |R0|, c[0x10][0x4], PT; # [711][001638]
//     	FADD.FTZ R4, -|R32|, R3;         # [712][001640]
//     	FSET.BF.LT.FTZ.AND R3, |R2|, c[0x10][0x4], PT; # [713][001648]
//     	FADD.FTZ R2, R0, R1;             # [714][001650]
//     	FSET.BF.LT.FTZ.AND R4, |R4|, c[0x10][0x4], PT; # [715][001658]
//     	FMUL.FTZ R7, R16, R0;            # [716][001660]
//     	FADD.FTZ R2, R2, R3;             # [717][001668]
//     	FADD.FTZ R0, R2, R4;             # [718][001670]
//     	FFMA.FTZ R2, R17, R1, R7;        # [719][001678]
//     	FADD.FTZ R1, R16, R17;           # [720][001680]
//     	FADD.FTZ R0, R0, R5;             # [721][001688]
//     	FFMA.FTZ R2, R18, R3, R2;        # [722][001690]
//     	FADD.FTZ R1, R1, R18;            # [723][001698]
//     	FSETP.LT.FTZ.AND P0, PT, RZ, R0, PT; # [724][0016a0]
//     	FFMA.FTZ R2, R19, R4, R2;        # [725][0016a8]
//     	FADD.FTZ R1, R1, R19;            # [726][0016b0]
//     	MUFU.RCP R3, R0;                 # [727][0016b8]
//     	FADD.FTZ R2, R2, R8;             # [728][0016c0]
//     	FADD.FTZ R0, R1, R6;             # [729][0016c8]
//     	FMUL.FTZ R1, R2, R3;             # [730][0016d0]
//     	@!P0 FMUL.FTZ R1, R0, 0.0625;    # [731][0016d8]
//     	NOP.S;                           # [732][0016e0]
//     L16e8:
//     	MUFU.LG2 R0, R1;                 # [733][0016e8]
//     	FMUL.FTZ R0, R0, 4;              # [734][0016f0]
//     	RRO.EX2 R0, R0;                  # [735][0016f8]
//     	MUFU.EX2 R0, R0;                 # [736][001700]
//     	MOV R3, R0;                      # [737][001708]
//     	MOV R2, R0;                      # [738][001710]
//     	MOV R1, R0;                      # [739][001718]
//     	EXIT;                            # [740][001720]
//     	END
//     END_SECTION
// END_SHADER
// 
