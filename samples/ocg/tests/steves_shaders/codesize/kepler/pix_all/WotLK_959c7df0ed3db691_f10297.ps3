// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 9.0
//         TYPE: PIXEL
//         SHADER_HASH: 0x959c7df0ed3db691
//         UCODE_HASH: 0x568303cb0a7ecc5e
//         POOL: APP
//         VERSION: 20
//         # USES: 35425
//         // Time: 465.282ms [51.440 percent]
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION UNIQUENESS
//         VERSIONINFO: 11
//         CLASS: FERMI
//         TEXINFO: SHADOWMAP:0x1e0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 22
//         USED_TEXTURE_BITS: 0x1ff
//         TEXTURE_SLOTS: 9
//         SAMPLER_SLOTS: 9
//         THREAD_STACK_SIZE: 0x24
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             COLOR_DIFFUSE_RED    PERSPECTIVE
//             COLOR_DIFFUSE_GREEN  PERSPECTIVE
//             COLOR_DIFFUSE_BLUE   PERSPECTIVE
//             COLOR_SPELWLAR_RED   PERSPECTIVE
//             COLOR_SPELWLAR_GREEN PERSPECTIVE
//             COLOR_SPELWLAR_BLUE  PERSPECTIVE
//             TEX00_S              PERSPECTIVE
//             TEX00_T              PERSPECTIVE
//             TEX01_S              PERSPECTIVE
//             TEX01_T              PERSPECTIVE
//             TEX02_S              PERSPECTIVE
//             TEX02_T              PERSPECTIVE
//             TEX03_S              PERSPECTIVE
//             TEX03_T              PERSPECTIVE
//             TEX04_S              PERSPECTIVE
//             TEX04_T              PERSPECTIVE
//             TEX05_S              PERSPECTIVE
//             TEX05_T              PERSPECTIVE
//             TEX05_R              PERSPECTIVE
//             TEX06_S              PERSPECTIVE
//             TEX06_T              PERSPECTIVE
//             TEX06_R              PERSPECTIVE
//             GENERIC10_X          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER_DUMP
//             # For debug purposes
//         0x00025462      0x00000000      0x00000000      0x00000000
//         0x00000000      0x80000000      0x00000000      0x00000000
//         0x00020000      0x00000000      0x00000000      0x00000000
//         0x00000000      0x00000000      0x00002a2a      0x0a0a0a0a
//         0x002a2a0a      0x00000000      0x0000000f      0x00000000
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
//         START DX9 APP LEVEL SHADER
        ps_3_0
        def c0, 1.00000000, 0.00000000, -3.44827580, 3.41379309 ; 0x3f800000 0x000000 0xc05cb08d 0x405a7b96
        def c1, 0.50000000, -0.50000000, 0.11111111, -1.00000000 ; 0x3f000000 0xbf000000 0x3de38e39 0xbf800000
        def c2, 0.20000000, 0.89999998, 11.11111069, -10.00000000 ; 0x3e4ccccd 0x3f666666 0x4131c71c 0xc1200000
        def c3, 0.20000000, -1.00000000, 0.30000001, 0.69999999 ; 0x3e4ccccd 0xbf800000 0x3e99999a 0x3f333333
        dcl_color0 v0.rgb
        dcl_color1 v1.rgb
        dcl_texcoord0 v2.rg
        dcl_texcoord1 v3.rg
        dcl_texcoord2 v4.rg
        dcl_texcoord3 v5.rg
        dcl_texcoord4 v6.rg
        dcl_texcoord5 v7.rgb
        dcl_texcoord6 v8.rgb
        dcl_fog0 v9.r
        dcl_2d s0
        dcl_2d s1
        dcl_2d s2
        dcl_2d s3
        dcl_2d s4
        dcl_2d s5
        dcl_2d s6
        dcl_2d s7
        dcl_2d s8
        texld r0, v2, s0
        texld r1, v3, s1
        texld r2, v4, s2
        texld r3, v5, s3
        texld r4, v6, s4
        dp3_sat r4.w, r4, c0.x
        add r4.w, -r4.w, c0.x
        mul r1, r1, r4.x
        mad r0, r0, r4.w, r1
        mad r0, r2, r4.y, r0
        mad r0, r3, r4.z, r0
        mad r1, v7.xyzx, c0.xxxy, c0.yyyx
        dp4 r2.x, r1, c7
        dp4 r2.y, r1, c8
        max r3.x, r2_abs.x, r2_abs.y
        mad_sat r2.z, r3.x, c0.z, c0.w
        cmp r2.w, -r2.z, c0.y, c0.x
        if_ne r2.w, -r2.w
        dp4 r2.w, r1, c9
        add r3.z, r2.w, c28.x
        mad r3.x, r2.x, c1.x, c1.x
        mad r3.y, r2.y, c1.y, c1.x
        mov r3.w, c0.y
        texldl r4, r3, s5
        add r5.xy, r3, c19
        mov r5.zw, r3
        texldl r6, r5, s5
        add r2.x, r4.x, r6.x
        add r5.xy, r3, c20
        texldl r4, r5, s5
        add r2.x, r2.x, r4.x
        add r5.xy, r3, c21
        texldl r4, r5, s5
        add r2.x, r2.x, r4.x
        add r5.xy, r3, c22
        texldl r4, r5, s5
        add r2.x, r2.x, r4.x
        add r5.xy, r3, c23
        texldl r4, r5, s5
        add r2.x, r2.x, r4.x
        add r5.xy, r3, c24
        texldl r4, r5, s5
        add r2.x, r2.x, r4.x
        add r5.xy, r3, c25
        texldl r4, r5, s5
        add r2.x, r2.x, r4.x
        add r5.xy, r3, c26
        texldl r3, r5, s5
        add r2.x, r2.x, r3.x
        mad r2.x, r2.x, c1.z, c1.w
        mad r2.x, r2.z, r2.x, c0.x
        else
        mov r2.x, c0.x
        endif
        dp4 r2.y, r1, c10
        dp4 r2.z, r1, c11
        max r3.x, r2_abs.y, r2_abs.z
        if_lt r3.x, c0.x
        dp4 r2.w, r1, c12
        add r3.z, r2.w, c28.y
        mad r3.x, r2.y, c1.x, c1.x
        mad r3.y, r2.z, c1.y, c1.x
        mov r3.w, c0.y
        texldl r4, r3, s6
        add r5.xy, r3, c19
        mov r5.zw, r3
        texldl r6, r5, s6
        add r2.y, r4.x, r6.x
        add r5.xy, r3, c21
        texldl r4, r5, s6
        add r2.y, r2.y, r4.x
        add r5.xy, r3, c23
        texldl r4, r5, s6
        add r2.y, r2.y, r4.x
        add r5.xy, r3, c25
        texldl r3, r5, s6
        add r2.y, r2.y, r3.x
        mul r2.y, r2.y, c2.x
        else
        dp4 r2.z, r1, c13
        dp4 r2.w, r1, c14
        max r3.x, r2_abs.z, r2_abs.w
        if_lt r3.x, c0.x
        dp4 r3.x, r1, c15
        add r3.z, r3.x, c28.z
        mad r3.x, r2.z, c1.x, c1.x
        mad r3.y, r2.w, c1.y, c1.x
        mov r3.w, c0.y
        texldl r4, r3, s7
        add r5.xy, r3, c19
        mov r5.zw, r3
        texldl r6, r5, s7
        add r2.z, r4.x, r6.x
        add r5.xy, r3, c21
        texldl r4, r5, s7
        add r2.z, r2.z, r4.x
        add r5.xy, r3, c23
        texldl r4, r5, s7
        add r2.z, r2.z, r4.x
        add r5.xy, r3, c25
        texldl r3, r5, s7
        add r2.z, r2.z, r3.x
        mul r2.y, r2.z, c2.x
        else
        dp4 r2.z, r1, c16
        dp4 r2.w, r1, c17
        dp4 r1.x, r1, c18
        add r1.z, r1.x, c28.w
        mad r1.x, r2.z, c1.x, c1.x
        mad r1.y, r2.w, c1.y, c1.x
        mov r1.w, c0.y
        texldl r3, r1, s8
        mov r4.x, c1.x
        mad r5.xy, c19, r4.x, r1
        mov r5.zw, r1
        texldl r6, r5, s8
        add r1.z, r3.x, r6.x
        mad r5.xy, c21, r4.x, r1
        texldl r3, r5, s8
        add r1.z, r1.z, r3.x
        mad r5.xy, c23, r4.x, r1
        texldl r3, r5, s8
        add r1.z, r1.z, r3.x
        mad r5.xy, c25, r4.x, r1
        texldl r3, r5, s8
        add r1.x, r1.z, r3.x
        add r1.y, -r2_abs.z, c2.y
        cmp r1.y, r1.y, c0.y, c0.x
        add r1.z, -r2_abs.w, c2.y
        cmp r1.z, r1.z, c0.y, c0.x
        add r1.y, r1.y, r1.z
        mad r1.z, r2_abs.z, c2.z, c2.w
        mad r1.w, r2_abs.w, c2.z, c2.w
        max r2.z, r1.z, r1.w
        add r1.z, -r2.z, c0.x
        cmp r1.y, -r1.y, c0.x, r1.z
        mad r1.x, r1.x, c3.x, c3.y
        mad r2.y, r1.y, r1.x, c0.x
        endif
        endif
        min r1.x, r2.y, r2.x
        dp3 r1.y, -c27, v8
        add r1.y, r1.y, c27.w
        max r2.x, r1.y, c0.y
        mul r1.y, r2.x, r2.x
        mul r1.y, r1.y, r1.y
        mul_sat r1.y, r1.y, r1.y
        lrp r2.x, r1.y, r1.x, c0.x
        mad r1.x, r2.x, c3.z, c3.w
        mul r0.xyz, r0, r1.x
        mul r0.xyz, r0, v0
        add r0.xyz, r0, r0
        mul r1.xyz, r0.w, v1
        mad r0.xyz, r1, r2.x, r0
        add r0.xyz, r0, -c6
        mad oC0.xyz, v9.x, r0, c6
        mov oC0.w, c0.x
//         end
//         END APP LEVEL SHADER
//         START APP LEVEL BYTECODE
//         0x05000051 0xa00f0000 0x3f800000 0x00000000
//         0xc05cb08d 0x405a7b96 0x05000051 0xa00f0001
//         0x3f000000 0xbf000000 0x3de38e39 0xbf800000
//         0x05000051 0xa00f0002 0x3e4ccccd 0x3f666666
//         0x4131c71c 0xc1200000 0x05000051 0xa00f0003
//         0x3e4ccccd 0xbf800000 0x3e99999a 0x3f333333
//         0x0200001f 0x8000000a 0x90070000 0x0200001f
//         0x8001000a 0x90070001 0x0200001f 0x80000005
//         0x90030002 0x0200001f 0x80010005 0x90030003
//         0x0200001f 0x80020005 0x90030004 0x0200001f
//         0x80030005 0x90030005 0x0200001f 0x80040005
//         0x90030006 0x0200001f 0x80050005 0x90070007
//         0x0200001f 0x80060005 0x90070008 0x0200001f
//         0x8000000b 0x90010009 0x0200001f 0x90000000
//         0xa00f0800 0x0200001f 0x90000000 0xa00f0801
//         0x0200001f 0x90000000 0xa00f0802 0x0200001f
//         0x90000000 0xa00f0803 0x0200001f 0x90000000
//         0xa00f0804 0x0200001f 0x90000000 0xa00f0805
//         0x0200001f 0x90000000 0xa00f0806 0x0200001f
//         0x90000000 0xa00f0807 0x0200001f 0x90000000
//         0xa00f0808 0x03000042 0x800f0000 0x90e40002
//         0xa0e40800 0x03000042 0x800f0001 0x90e40003
//         0xa0e40801 0x03000042 0x800f0002 0x90e40004
//         0xa0e40802 0x03000042 0x800f0003 0x90e40005
//         0xa0e40803 0x03000042 0x800f0004 0x90e40006
//         0xa0e40804 0x03000008 0x80180004 0x80e40004
//         0xa0000000 0x03000002 0x80080004 0x81ff0004
//         0xa0000000 0x03000005 0x800f0001 0x80e40001
//         0x80000004 0x04000004 0x800f0000 0x80e40000
//         0x80ff0004 0x80e40001 0x04000004 0x800f0000
//         0x80e40002 0x80550004 0x80e40000 0x04000004
//         0x800f0000 0x80e40003 0x80aa0004 0x80e40000
//         0x04000004 0x800f0001 0x90240007 0xa0400000
//         0xa0150000 0x03000009 0x80010002 0x80e40001
//         0xa0e40007 0x03000009 0x80020002 0x80e40001
//         0xa0e40008 0x0300000b 0x80010003 0x8b000002
//         0x8b550002 0x04000004 0x80140002 0x80000003
//         0xa0aa0000 0xa0ff0000 0x04000058 0x80080002
//         0x81aa0002 0xa0550000 0xa0000000 0x02050029
//         0x80ff0002 0x81ff0002 0x03000009 0x80080002
//         0x80e40001 0xa0e40009 0x03000002 0x80040003
//         0x80ff0002 0xa000001c 0x04000004 0x80010003
//         0x80000002 0xa0000001 0xa0000001 0x04000004
//         0x80020003 0x80550002 0xa0550001 0xa0000001
//         0x02000001 0x80080003 0xa0550000 0x0300005f
//         0x800f0004 0x80e40003 0xa0e40805 0x03000002
//         0x80030005 0x80e40003 0xa0e40013 0x02000001
//         0x800c0005 0x80e40003 0x0300005f 0x800f0006
//         0x80e40005 0xa0e40805 0x03000002 0x80010002
//         0x80000004 0x80000006 0x03000002 0x80030005
//         0x80e40003 0xa0e40014 0x0300005f 0x800f0004
//         0x80e40005 0xa0e40805 0x03000002 0x80010002
//         0x80000002 0x80000004 0x03000002 0x80030005
//         0x80e40003 0xa0e40015 0x0300005f 0x800f0004
//         0x80e40005 0xa0e40805 0x03000002 0x80010002
//         0x80000002 0x80000004 0x03000002 0x80030005
//         0x80e40003 0xa0e40016 0x0300005f 0x800f0004
//         0x80e40005 0xa0e40805 0x03000002 0x80010002
//         0x80000002 0x80000004 0x03000002 0x80030005
//         0x80e40003 0xa0e40017 0x0300005f 0x800f0004
//         0x80e40005 0xa0e40805 0x03000002 0x80010002
//         0x80000002 0x80000004 0x03000002 0x80030005
//         0x80e40003 0xa0e40018 0x0300005f 0x800f0004
//         0x80e40005 0xa0e40805 0x03000002 0x80010002
//         0x80000002 0x80000004 0x03000002 0x80030005
//         0x80e40003 0xa0e40019 0x0300005f 0x800f0004
//         0x80e40005 0xa0e40805 0x03000002 0x80010002
//         0x80000002 0x80000004 0x03000002 0x80030005
//         0x80e40003 0xa0e4001a 0x0300005f 0x800f0003
//         0x80e40005 0xa0e40805 0x03000002 0x80010002
//         0x80000002 0x80000003 0x04000004 0x80010002
//         0x80000002 0xa0aa0001 0xa0ff0001 0x04000004
//         0x80010002 0x80aa0002 0x80000002 0xa0000000
//         0x0000002a 0x02000001 0x80010002 0xa0000000
//         0x0000002b 0x03000009 0x80020002 0x80e40001
//         0xa0e4000a 0x03000009 0x80040002 0x80e40001
//         0xa0e4000b 0x0300000b 0x80010003 0x8b550002
//         0x8baa0002 0x02040029 0x80000003 0xa0000000
//         0x03000009 0x80080002 0x80e40001 0xa0e4000c
//         0x03000002 0x80040003 0x80ff0002 0xa055001c
//         0x04000004 0x80010003 0x80550002 0xa0000001
//         0xa0000001 0x04000004 0x80020003 0x80aa0002
//         0xa0550001 0xa0000001 0x02000001 0x80080003
//         0xa0550000 0x0300005f 0x800f0004 0x80e40003
//         0xa0e40806 0x03000002 0x80030005 0x80e40003
//         0xa0e40013 0x02000001 0x800c0005 0x80e40003
//         0x0300005f 0x800f0006 0x80e40005 0xa0e40806
//         0x03000002 0x80020002 0x80000004 0x80000006
//         0x03000002 0x80030005 0x80e40003 0xa0e40015
//         0x0300005f 0x800f0004 0x80e40005 0xa0e40806
//         0x03000002 0x80020002 0x80550002 0x80000004
//         0x03000002 0x80030005 0x80e40003 0xa0e40017
//         0x0300005f 0x800f0004 0x80e40005 0xa0e40806
//         0x03000002 0x80020002 0x80550002 0x80000004
//         0x03000002 0x80030005 0x80e40003 0xa0e40019
//         0x0300005f 0x800f0003 0x80e40005 0xa0e40806
//         0x03000002 0x80020002 0x80550002 0x80000003
//         0x03000005 0x80020002 0x80550002 0xa0000002
//         0x0000002a 0x03000009 0x80040002 0x80e40001
//         0xa0e4000d 0x03000009 0x80080002 0x80e40001
//         0xa0e4000e 0x0300000b 0x80010003 0x8baa0002
//         0x8bff0002 0x02040029 0x80000003 0xa0000000
//         0x03000009 0x80010003 0x80e40001 0xa0e4000f
//         0x03000002 0x80040003 0x80000003 0xa0aa001c
//         0x04000004 0x80010003 0x80aa0002 0xa0000001
//         0xa0000001 0x04000004 0x80020003 0x80ff0002
//         0xa0550001 0xa0000001 0x02000001 0x80080003
//         0xa0550000 0x0300005f 0x800f0004 0x80e40003
//         0xa0e40807 0x03000002 0x80030005 0x80e40003
//         0xa0e40013 0x02000001 0x800c0005 0x80e40003
//         0x0300005f 0x800f0006 0x80e40005 0xa0e40807
//         0x03000002 0x80040002 0x80000004 0x80000006
//         0x03000002 0x80030005 0x80e40003 0xa0e40015
//         0x0300005f 0x800f0004 0x80e40005 0xa0e40807
//         0x03000002 0x80040002 0x80aa0002 0x80000004
//         0x03000002 0x80030005 0x80e40003 0xa0e40017
//         0x0300005f 0x800f0004 0x80e40005 0xa0e40807
//         0x03000002 0x80040002 0x80aa0002 0x80000004
//         0x03000002 0x80030005 0x80e40003 0xa0e40019
//         0x0300005f 0x800f0003 0x80e40005 0xa0e40807
//         0x03000002 0x80040002 0x80aa0002 0x80000003
//         0x03000005 0x80020002 0x80aa0002 0xa0000002
//         0x0000002a 0x03000009 0x80040002 0x80e40001
//         0xa0e40010 0x03000009 0x80080002 0x80e40001
//         0xa0e40011 0x03000009 0x80010001 0x80e40001
//         0xa0e40012 0x03000002 0x80040001 0x80000001
//         0xa0ff001c 0x04000004 0x80010001 0x80aa0002
//         0xa0000001 0xa0000001 0x04000004 0x80020001
//         0x80ff0002 0xa0550001 0xa0000001 0x02000001
//         0x80080001 0xa0550000 0x0300005f 0x800f0003
//         0x80e40001 0xa0e40808 0x02000001 0x80010004
//         0xa0000001 0x04000004 0x80030005 0xa0e40013
//         0x80000004 0x80e40001 0x02000001 0x800c0005
//         0x80e40001 0x0300005f 0x800f0006 0x80e40005
//         0xa0e40808 0x03000002 0x80040001 0x80000003
//         0x80000006 0x04000004 0x80030005 0xa0e40015
//         0x80000004 0x80e40001 0x0300005f 0x800f0003
//         0x80e40005 0xa0e40808 0x03000002 0x80040001
//         0x80aa0001 0x80000003 0x04000004 0x80030005
//         0xa0e40017 0x80000004 0x80e40001 0x0300005f
//         0x800f0003 0x80e40005 0xa0e40808 0x03000002
//         0x80040001 0x80aa0001 0x80000003 0x04000004
//         0x80030005 0xa0e40019 0x80000004 0x80e40001
//         0x0300005f 0x800f0003 0x80e40005 0xa0e40808
//         0x03000002 0x80010001 0x80aa0001 0x80000003
//         0x03000002 0x80020001 0x8caa0002 0xa0550002
//         0x04000058 0x80020001 0x80550001 0xa0550000
//         0xa0000000 0x03000002 0x80040001 0x8cff0002
//         0xa0550002 0x04000058 0x80040001 0x80aa0001
//         0xa0550000 0xa0000000 0x03000002 0x80020001
//         0x80550001 0x80aa0001 0x04000004 0x80040001
//         0x8baa0002 0xa0aa0002 0xa0ff0002 0x04000004
//         0x80080001 0x8bff0002 0xa0aa0002 0xa0ff0002
//         0x0300000b 0x80040002 0x80aa0001 0x80ff0001
//         0x03000002 0x80040001 0x81aa0002 0xa0000000
//         0x04000058 0x80020001 0x81550001 0xa0000000
//         0x80aa0001 0x04000004 0x80010001 0x80000001
//         0xa0000003 0xa0550003 0x04000004 0x80020002
//         0x80550001 0x80000001 0xa0000000 0x0000002b
//         0x0000002b 0x0300000a 0x80010001 0x80550002
//         0x80000002 0x03000008 0x80020001 0xa1e4001b
//         0x90e40008 0x03000002 0x80020001 0x80550001
//         0xa0ff001b 0x0300000b 0x80010002 0x80550001
//         0xa0550000 0x03000005 0x80020001 0x80000002
//         0x80000002 0x03000005 0x80020001 0x80550001
//         0x80550001 0x03000005 0x80120001 0x80550001
//         0x80550001 0x04000012 0x80010002 0x80550001
//         0x80000001 0xa0000000 0x04000004 0x80010001
//         0x80000002 0xa0aa0003 0xa0ff0003 0x03000005
//         0x80070000 0x80e40000 0x80000001 0x03000005
//         0x80070000 0x80e40000 0x90e40000 0x03000002
//         0x80070000 0x80e40000 0x80e40000 0x03000005
//         0x80070001 0x80ff0000 0x90e40001 0x04000004
//         0x80070000 0x80e40001 0x80000002 0x80e40000
//         0x03000002 0x80070000 0x80e40000 0xa1e40006
//         0x04000004 0x80070800 0x90000009 0x80e40000
//         0xa0e40006 0x02000001 0x80080800 0xa0000000
//         0x0000ffff
//         END APP LEVEL BYTECODE
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0xc05cb08d // -3.44827580
//         COP_CONST[1]: 0x3de38e39 // 0.11111111
//         COP_CONST[2]: 0x4131c71c // 11.11111069
//         COP_CONST[3]: 0x3e4ccccd // 0.20000000
//         COP_CONST[4]: 0x3f800000 // 1.00000000
//         COP_CONST[5]: 0x3e99999a // 0.30000001
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//         ## USER CONST histogram
//         ##     c6.x -> c[6][562] = 100.00%@0.44705886
//         ##     c6.y -> c[6][563] = 100.00%@0.50980395
//         ##     c6.z -> c[6][564] = 100.00%@0.62745100
//         ##     c7.x -> c[6][566] = 100.00%@0.00323239
//         ##     c7.y -> c[6][567] = 100.00%@-0.03472891
//         ##     c7.z -> c[6][568] = 100.00%@-0.03582534
//         ##     c7.w -> c[6][569] = 100.00%@0.48969468
//         ##     c8.x -> c[6][570] = 100.00%@-0.04558593
//         ##     c8.y -> c[6][571] = 100.00%@-0.01665075
//         ##     c8.z -> c[6][572] = 100.00%@0.01202811
//         ##     c8.w -> c[6][573] = 100.00%@-0.21778198
//         ##     c9.x -> c[6][574] = 100.00%@0.00010142
//         ##     c9.y -> c[6][575] = 100.00%@-0.00015943
//         ##     c9.z -> c[6][576] = 100.00%@0.00016370
//         ##     c9.w -> c[6][577] = 100.00%@0.49716285
//         ##     c10.x -> c[6][578] = 100.00%@0.00161620
//         ##     c10.y -> c[6][579] = 100.00%@-0.01736446
//         ##     c10.z -> c[6][580] = 100.00%@-0.01791267
//         ##     c10.w -> c[6][581] = 100.00%@0.25189513
//         ##     c11.x -> c[6][582] = 100.00%@-0.02279297
//         ##     c11.y -> c[6][583] = 100.00%@-0.00832538
//         ##     c11.z -> c[6][584] = 100.00%@0.00601405
//         ##     c11.w -> c[6][585] = 100.00%@-0.11009132
//         ##     c12.x -> c[6][586] = 100.00%@0.00010142
//         ##     c12.y -> c[6][587] = 100.00%@-0.00015943
//         ##     c12.z -> c[6][588] = 100.00%@0.00016370
//         ##     c12.w -> c[6][589] = 100.00%@0.49712470
//         ##     c13.x -> c[6][590] = 100.00%@0.00040405
//         ##     c13.y -> c[6][591] = 100.00%@-0.00434111
//         ##     c13.z -> c[6][592] = 100.00%@-0.00447817
//         ##     c13.w -> c[6][593] = 100.00%@0.07489484
//         ##     c14.x -> c[6][594] = 100.00%@-0.00569824
//         ##     c14.y -> c[6][595] = 100.00%@-0.00208134
//         ##     c14.z -> c[6][596] = 100.00%@0.00150351
//         ##     c14.w -> c[6][597] = 100.00%@-0.03010285
//         ##     c15.x -> c[6][598] = 100.00%@0.00010142
//         ##     c15.y -> c[6][599] = 100.00%@-0.00015943
//         ##     c15.z -> c[6][600] = 100.00%@0.00016370
//         ##     c15.w -> c[6][601] = 100.00%@0.49687737
//         ##     c16.x -> c[6][602] = 100.00%@0.00010101
//         ##     c16.y -> c[6][603] = 100.00%@-0.00108528
//         ##     c16.z -> c[6][604] = 100.00%@-0.00111954
//         ##     c16.w -> c[6][605] = 100.00%@0.00563756
//         ##     c17.x -> c[6][606] = 100.00%@-0.00142456
//         ##     c17.y -> c[6][607] = 100.00%@-0.00052034
//         ##     c17.z -> c[6][608] = 100.00%@0.00037588
//         ##     c17.w -> c[6][609] = 100.00%@-0.01946014
//         ##     c18.x -> c[6][610] = 100.00%@0.00010142
//         ##     c18.y -> c[6][611] = 100.00%@-0.00015943
//         ##     c18.z -> c[6][612] = 100.00%@0.00016370
//         ##     c18.w -> c[6][613] = 100.00%@0.49911928
//         ##     c19.x -> c[6][614] = 100.00%@0.00078125
//         ##     c19.y -> c[6][615] = 100.00%@-0.00097656
//         ##     c20.x -> c[6][618] = 100.00%@-0.00019531
//         ##     c20.y -> c[6][619] = 100.00%@-0.00078125
//         ##     c21.x -> c[6][622] = 100.00%@0.00019531
//         ##     c21.y -> c[6][623] = 100.00%@-0.00058594
//         ##     c22.x -> c[6][626] = 100.00%@0.00097656
//         ##     c22.y -> c[6][627] = 100.00%@-0.00039063
//         ##     c23.x -> c[6][630] = 100.00%@-0.00058594
//         ##     c23.y -> c[6][631] = 100.00%@-0.00019531
//         ##     c24.x -> c[6][634] = 100.00%@0.00058594
//         ##     c24.y -> c[6][635] = 100.00%@0.00019531
//         ##     c25.x -> c[6][638] = 100.00%@-0.00097656
//         ##     c25.y -> c[6][639] = 100.00%@-0.00039063
//         ##     c26.x -> c[6][642] = 100.00%@-0.00039063
//         ##     c26.y -> c[6][643] = 100.00%@-0.00058594
//         ##     c27.x -> c[6][646] = 100.00%@0.40569672
//         ##     c27.y -> c[6][647] = 100.00%@-0.63770068
//         ##     c27.z -> c[6][648] = 100.00%@0.65478855
//         ##     c27.w -> c[6][649] = 100.00%@0.66000003
//         ##     c28.x -> c[6][650] = 100.00%@-0.00015460
//         ##     c28.y -> c[6][651] = 100.00%@-0.00025000
//         ##     c28.z -> c[6][652] = 100.00%@-0.00037500
//         ##     c28.w -> c[6][653] = 100.00%@-0.00090000
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STAGE_INFO
//         # There were more than 64 different filtering setups for this shader.
//         # Only the first 64 were saved, so only those will be printed.
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//         TEXTURESTAGEDATA:         (0x0,2D,1X)        , (0x1,2D,1X)        , (0x2,2D,1X)        , (0x3,2D,1X)        , (0x4,2D,1X)        , (0x5,2D,1X)        , (0x6,2D,1X)        , (0x7,2D,1X)        , (0x8,2D,1X)        
//     END_SECTION
//     BEGIN_SECTION SURFACE_STATE_INFO
//         There were more than 64 different filtering setups for this shader.
//         Only the first 64 were saved, so only those will be printed.
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x353f781f,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xf9480795,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xc773a6de,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xd4e647f9,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x43cf29ce,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x440566ca,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x322c55eb,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x85496e94,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xe50e9067,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x33e3aca4,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x50ef5261,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xc229eccd,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x3b60bbc3,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xb03b0d87,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x06666aac,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x1ff4ecec,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x92f37bf8,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xd9e48bbe,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x68bbba61,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x5eea6392,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x3e34f71d,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xad7026b0,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x2af7e368,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x183757bc,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xc491e9bd,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x1395d242,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x1811cabd,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x82b31037,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x8ca384c0,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xba517601,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xbde037a6,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x1776c7a7,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x356bb322,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x517ba2d5,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x630b83dc,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xd2740056,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4c048de7,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x48c4bd27,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x5038d623,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x1e1989cb,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x5654c86e,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x28b5fdb1,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xe3ef182d,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xf5aeafcc,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,64x64x0,1/0,A8R8G8B8,0,0,0), 0xcdd3aa30,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4c048de7,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x48c4bd27,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,64x64x0,1/0,A8R8G8B8,0,0,0), 0x2bc3a2ed,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x89c9a9df,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x1015d997,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x624f8dc7,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xa9671f65,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x96f1aacd,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x8aa5ad2f,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x0e1faab2,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x48c4bd27,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,64x64x0,1/0,A8R8G8B8,0,0,0), 0xef17ccf8,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x48c4bd27,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4c048de7,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd56f4e6e,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xa0644a47,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xbd6edcb0,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xce676d59,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x10f88027,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xb2d96e19,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xf1be8c7e,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4c048de7,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x48c4bd27,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,64x128x0,1/0,A8R8G8B8,0,0,0), 0xdb28dce3,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x50b5f57e,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0xf7672247,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x0fd84a1d,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x0a0cb035,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         RENDERTARGETINFO: 1,10240x3200,X8R8G8B8
//         STAGEINFO:(0x0,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xbdd51a28,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 0 when no alpha is required.
//         STAGEINFO:(0x1,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x3edb373a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 1 when no alpha is required.
//         STAGEINFO:(0x2,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0x4eb3632a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 2 when no alpha is required.
//         STAGEINFO:(0x3,2D,1X,Aniso/Linear/Linear,Wrap/Wrap/Clamp,0.00000000,256x256x0,9/0,DXT45_A8R8G8B8,0,0,0), 0xd698726a,0x0000006d
//         DXTWARN! DXT45_A8R8G8B8 used heavily in stage 3 when no alpha is required.
//         STAGEINFO:(0x4,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,128x64x0,1/0,A8R8G8B8,0,0,0), 0x818b8b22,0x0000006d
//         STAGEINFO:(0x5,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x6,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x7,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//         STAGEINFO:(0x8,2D,1X,Linear/Linear/None,Clamp/Clamp/Clamp,0.00000000,2048x2048x0,1/0,Z24X8,0,0,0), 0x00000000,0x0000006d
//     END_SECTION
//     BEGIN_SECTION COP_ARGS_INFO
//         shaderType: pixel
//         inputRegUsage: 16:
//         (0x11 0 4 "HPOS")
//         (0x18 0 4 "COL0")
//         (0x18 0 4 "TEX0")
//         (0x10 0 4 "ATTR03")
//         (0x10 0 4 "ATTR04")
//         (0x10 0 4 "ATTR05")
//         (0x10 0 4 "ATTR06")
//         (0x10 0 4 "ATTR07")
//         (0x10 0 4 "ATTR08")
//         (0x10 0 4 "ATTR09")
//         (0x10 0 4 "ATTR10")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x10 0 4 "ATTR00")
//         (0x30 0 1 "FACE")
//         (0x10 0 4 "ATTR00")
//         optFlags: 0x0
//         optLevel: 4
//         bAssume0: 0
//         bInitOutputs: 0
//         bCanPromoteFixed: 0
//         bCanPromoteHalf: 1
//         bCanReorderFixedWithCheck: 1
//         bCanReorderHalf: 1
//         bCanReorderFloat: 1
//         bCanIgnoreNan: 1
//         bCanDemoteNonFP32Targets: 0
//         bCanUseNrmhAlways: 0
//         bCanFudgeSqrtSign: 1
//         eOutputMode: R0
//         dwOutputMask: 0xf
//         bUseDepth: 0
//         bUseCoverage: 0
//         dwNumCombiners: 0
//         dwLevel: 0
//         dwSupportsSignedRemap: 0x0
//         dwTextureRange: 0x0
//         dwPartialTexType: 0x0
//         wTextureRemap:
//          12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 12816 
//         normalizationLwbemap: 
//          0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
//         bUsingLRPD: 0
//         dwConstIsInZeroOneRange: 0x0
//         bNeedsFogHoist: 0
//         bAssumeDemotedTXP: 0
//         bOptimizeBranches: 0
//         bUseDX10SAT: 0
//         bUseDX10AddressInRange: 0
//         maxCallDepthAllowed: 0
//         maxDivergenceLevelAllowed: 32
//         ApplyTXLLODWar: 0
//         AddDummyCRead: 0
//         iStartInst: 0
//         fmtFlags: 0x0
//         IsOGL: 0
//         paramFlags: 0x0
//         optimizerConstBank: 9
//         deadOutputMask: 0x0 0x0
//         mrtMask: 0x0
//         maxRRegsAllowed: 0
//         indexableRanges: 3 : 
//          (attr 1 2 4) (attr 3 7 4) (attr 10 1 4)
//         Force2IBUFSlots: 0
//         NoFloatMAD: 0
//         SFUFloatMUL: 1
//         (Fermi)ForceFMZ: 1
//     END_SECTION
//     BEGIN_SECTION LWINST_INFO
//         movr r2, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r3, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         movr r4, constant(0.00000000, 0.00000000, 0.00000000, 0.00000000)
//         texr r5, v3.xyzz, #0, #0, 2D
//         texr r6, v4.xyzz, #1, #1, 2D
//         texr r7, v5.xyzz, #2, #2, 2D
//         texr r8, v6.xyzz, #3, #3, 2D
//         texr r9, v7.xyzz, #4, #4, 2D
//         dp3r_sat r9.w, r9, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         addr r9.w, -r9.w, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         mulr r6, r6, r9.x
//         madr r5, r5, r9.w, r6
//         madr r5, r7, r9.y, r5
//         madr r5, r8, r9.z, r5
//         madr r6, v8.xyzx, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).xxxy, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).yyyx
//         dp4r r7.x, r6, c[6][545]
//         dp4r r7.y, r6, c[6][546]
//         maxr r8.x, |r7.x|, |r7.y|
//         madr_sat r7.z, r8.x, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).z, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).w
//         cmpr r7.w, -r7.z, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).y, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         sner.c1 rc.x, r7.w, -r7.w
//         ife GT1.x , l0, l1
//         dp4r r7.w, r6, c[6][547]
//         addr r8.z, r7.w, c[6][566].x
//         madr r8.x, r7.x, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x
//         madr r8.y, r7.y, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).y, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x
//         movr r8.w, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).y
//         txlr r9, r8.xyzz, r8.w, #5, #5, SHADOW2D
//         addr r10.xy, r8, c[6][557]
//         movr r10.zw, r8
//         txlr r11, r10.xyzz, r10.w, #5, #5, SHADOW2D
//         addr r7.x, r9.x, r11.x
//         addr r10.xy, r8, c[6][558]
//         txlr r9, r10.xyzz, r10.w, #5, #5, SHADOW2D
//         addr r7.x, r7.x, r9.x
//         addr r10.xy, r8, c[6][559]
//         txlr r9, r10.xyzz, r10.w, #5, #5, SHADOW2D
//         addr r7.x, r7.x, r9.x
//         addr r10.xy, r8, c[6][560]
//         txlr r9, r10.xyzz, r10.w, #5, #5, SHADOW2D
//         addr r7.x, r7.x, r9.x
//         addr r10.xy, r8, c[6][561]
//         txlr r9, r10.xyzz, r10.w, #5, #5, SHADOW2D
//         addr r7.x, r7.x, r9.x
//         addr r10.xy, r8, c[6][562]
//         txlr r9, r10.xyzz, r10.w, #5, #5, SHADOW2D
//         addr r7.x, r7.x, r9.x
//         addr r10.xy, r8, c[6][563]
//         txlr r9, r10.xyzz, r10.w, #5, #5, SHADOW2D
//         addr r7.x, r7.x, r9.x
//         addr r10.xy, r8, c[6][564]
//         txlr r8, r10.xyzz, r10.w, #5, #5, SHADOW2D
//         addr r7.x, r7.x, r8.x
//         madr r7.x, r7.x, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).z, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).w
//         madr r7.x, r7.z, r7.x, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         l0:
//         movr r7.x, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         l1:
//         dp4r r7.y, r6, c[6][548]
//         dp4r r7.z, r6, c[6][549]
//         maxr r8.x, |r7.y|, |r7.z|
//         sltr.c1 rc.x, r8.x, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         ife GT1.x , l2, l3
//         dp4r r7.w, r6, c[6][550]
//         addr r8.z, r7.w, c[6][566].y
//         madr r8.x, r7.y, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x
//         madr r8.y, r7.z, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).y, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x
//         movr r8.w, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).y
//         txlr r9, r8.xyzz, r8.w, #6, #6, SHADOW2D
//         addr r10.xy, r8, c[6][557]
//         movr r10.zw, r8
//         txlr r11, r10.xyzz, r10.w, #6, #6, SHADOW2D
//         addr r7.y, r9.x, r11.x
//         addr r10.xy, r8, c[6][559]
//         txlr r9, r10.xyzz, r10.w, #6, #6, SHADOW2D
//         addr r7.y, r7.y, r9.x
//         addr r10.xy, r8, c[6][561]
//         txlr r9, r10.xyzz, r10.w, #6, #6, SHADOW2D
//         addr r7.y, r7.y, r9.x
//         addr r10.xy, r8, c[6][563]
//         txlr r8, r10.xyzz, r10.w, #6, #6, SHADOW2D
//         addr r7.y, r7.y, r8.x
//         mulr r7.y, r7.y, constant(0.20000000, 0.89999998, 11.11111069, -10.00000000).x
//         l2:
//         dp4r r7.z, r6, c[6][551]
//         dp4r r7.w, r6, c[6][552]
//         maxr r8.x, |r7.z|, |r7.w|
//         sltr.c1 rc.x, r8.x, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         ife GT1.x , l4, l5
//         dp4r r8.x, r6, c[6][553]
//         addr r8.z, r8.x, c[6][566].z
//         madr r8.x, r7.z, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x
//         madr r8.y, r7.w, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).y, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x
//         movr r8.w, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).y
//         txlr r9, r8.xyzz, r8.w, #7, #7, SHADOW2D
//         addr r10.xy, r8, c[6][557]
//         movr r10.zw, r8
//         txlr r11, r10.xyzz, r10.w, #7, #7, SHADOW2D
//         addr r7.z, r9.x, r11.x
//         addr r10.xy, r8, c[6][559]
//         txlr r9, r10.xyzz, r10.w, #7, #7, SHADOW2D
//         addr r7.z, r7.z, r9.x
//         addr r10.xy, r8, c[6][561]
//         txlr r9, r10.xyzz, r10.w, #7, #7, SHADOW2D
//         addr r7.z, r7.z, r9.x
//         addr r10.xy, r8, c[6][563]
//         txlr r8, r10.xyzz, r10.w, #7, #7, SHADOW2D
//         addr r7.z, r7.z, r8.x
//         mulr r7.y, r7.z, constant(0.20000000, 0.89999998, 11.11111069, -10.00000000).x
//         l4:
//         dp4r r7.z, r6, c[6][554]
//         dp4r r7.w, r6, c[6][555]
//         dp4r r6.x, r6, c[6][556]
//         addr r6.z, r6.x, c[6][566].w
//         madr r6.x, r7.z, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x
//         madr r6.y, r7.w, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).y, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x
//         movr r6.w, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).y
//         txlr r8, r6.xyzz, r6.w, #8, #8, SHADOW2D
//         movr r9.x, constant(0.50000000, -0.50000000, 0.11111111, -1.00000000).x
//         madr r10.xy, c[6][557], r9.x, r6
//         movr r10.zw, r6
//         txlr r11, r10.xyzz, r10.w, #8, #8, SHADOW2D
//         addr r6.z, r8.x, r11.x
//         madr r10.xy, c[6][559], r9.x, r6
//         txlr r8, r10.xyzz, r10.w, #8, #8, SHADOW2D
//         addr r6.z, r6.z, r8.x
//         madr r10.xy, c[6][561], r9.x, r6
//         txlr r8, r10.xyzz, r10.w, #8, #8, SHADOW2D
//         addr r6.z, r6.z, r8.x
//         madr r10.xy, c[6][563], r9.x, r6
//         txlr r8, r10.xyzz, r10.w, #8, #8, SHADOW2D
//         addr r6.x, r6.z, r8.x
//         addr r6.y, -|r7.z|, constant(0.20000000, 0.89999998, 11.11111069, -10.00000000).y
//         cmpr r6.y, r6.y, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).y, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         addr r6.z, -|r7.w|, constant(0.20000000, 0.89999998, 11.11111069, -10.00000000).y
//         cmpr r6.z, r6.z, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).y, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         addr r6.y, r6.y, r6.z
//         madr r6.z, |r7.z|, constant(0.20000000, 0.89999998, 11.11111069, -10.00000000).z, constant(0.20000000, 0.89999998, 11.11111069, -10.00000000).w
//         madr r6.w, |r7.w|, constant(0.20000000, 0.89999998, 11.11111069, -10.00000000).z, constant(0.20000000, 0.89999998, 11.11111069, -10.00000000).w
//         maxr r7.z, r6.z, r6.w
//         addr r6.z, -r7.z, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         cmpr r6.y, -r6.y, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x, r6.z
//         madr r6.x, r6.x, constant(0.20000000, -1.00000000, 0.30000001, 0.69999999).x, constant(0.20000000, -1.00000000, 0.30000001, 0.69999999).y
//         madr r7.y, r6.y, r6.x, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         l5:
//         l3:
//         minr r6.x, r7.y, r7.x
//         dp3r r6.y, -c[6][565], v9
//         addr r6.y, r6.y, c[6][565].w
//         maxr r7.x, r6.y, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).y
//         mulr r6.y, r7.x, r7.x
//         mulr r6.y, r6.y, r6.y
//         mulr_sat r6.y, r6.y, r6.y
//         lrpr r7.x, r6.y, r6.x, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//         madr r6.x, r7.x, constant(0.20000000, -1.00000000, 0.30000001, 0.69999999).z, constant(0.20000000, -1.00000000, 0.30000001, 0.69999999).w
//         mulr r5.xyz, r5, r6.x
//         mulr r5.xyz, r5, v1
//         addr r5.xyz, r5, r5
//         mulr r6.xyz, r5.w, v2
//         madr r5.xyz, r6, r7.x, r5
//         addr r5.xyz, r5, -c[6][544]
//         madr r0.xyz, v10.x, r5, c[6][544]
//         movr r0.w, constant(1.00000000, 0.00000000, -3.44827580, 3.41379309).x
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MUFU.RCP R11, R0;                # [  1][000008]
//     	IPA.SC R1, a[0x344], R11;        # [  2][000010] FIXED_FNC_TEXTURE_4_T
//     	IPA.SC R0, a[0x340], R11;        # [  3][000018] TEX4
//     	TEX.NODEP.T R8, R0, 0x4, 0x4, 2D, 0x7; # [  4][000020]
//     	IPA.SC R1, a[0x314], R11;        # [  5][000028] FIXED_FNC_TEXTURE_1_T
//     	IPA.SC R0, a[0x310], R11;        # [  6][000030] TEX1
//     	TEX.NODEP.T R16, R0, 0x1, 0x1, 2D; # [  7][000038]
//     	IPA.SC R1, a[0x304], R11;        # [  8][000040] FIXED_FNC_TEXTURE_0_T
//     	IPA.SC R0, a[0x300], R11;        # [  9][000048] TEX0
//     	TEX.NODEP.T R12, R0, 0x0, 0x0, 2D; # [ 10][000050]
//     	IPA.SC R1, a[0x324], R11;        # [ 11][000058] FIXED_FNC_TEXTURE_2_T
//     	IPA.SC R0, a[0x320], R11;        # [ 12][000060] TEX2
//     	TEX.NODEP.T R4, R0, 0x2, 0x2, 2D; # [ 13][000068]
//     	IPA.SC R1, a[0x334], R11;        # [ 14][000070] FIXED_FNC_TEXTURE_3_T
//     	IPA.SC R0, a[0x330], R11;        # [ 15][000078] TEX3
//     	TEX.NODEP.T R0, R0, 0x3, 0x3, 2D; # [ 16][000080]
//     	FADD.FTZ R20, R8, R9;            # [ 17][000088]
//     	FADD.FTZ.SAT R21, R20, R10;      # [ 18][000090]
//     	FMUL.FMZ R20, R17, R8;           # [ 19][000098]
//     	FMUL.FMZ R16, R16, R8;           # [ 20][0000a0]
//     	FMUL.FMZ R19, R19, R8;           # [ 21][0000a8]
//     	FADD.FTZ R17, -R21, 1;           # [ 22][0000b0]
//     	FMUL.FMZ R18, R18, R8;           # [ 23][0000b8]
//     	IPA.SC R8, a[0x350], R11;        # [ 24][0000c0] TEX5
//     	FFMA.FMZ R14, R14, R17, R18;     # [ 25][0000c8]
//     	IPA.SC R18, a[0x354], R11;       # [ 26][0000d0] FIXED_FNC_TEXTURE_5_T
//     	FFMA.FMZ R15, R15, R17, R19;     # [ 27][0000d8]
//     	FFMA.FMZ R21, R13, R17, R20;     # [ 28][0000e0]
//     	FMUL.FTZ R19, R8, c[0x6][0x2210]; # [ 29][0000e8]
//     	FMUL.FTZ R20, R8, c[0x6][0x2220]; # [ 30][0000f0]
//     	IPA.SC R13, a[0x358], R11;       # [ 31][0000f8] FIXED_FNC_TEXTURE_5_R
//     	FFMA.FTZ R19, R18, c[0x6][0x2214], R19; # [ 32][000100]
//     	FFMA.FTZ R20, R18, c[0x6][0x2224], R20; # [ 33][000108]
//     	FFMA.FMZ R16, R12, R17, R16;     # [ 34][000110]
//     	MOV32I R17, 0x405a7b96;          # [ 35][000118]
//     	FFMA.FMZ R14, R6, R9, R14;       # [ 36][000120]
//     	FFMA.FTZ R19, R13, c[0x6][0x2218], R19; # [ 37][000128]
//     	FFMA.FTZ R20, R13, c[0x6][0x2228], R20; # [ 38][000130]
//     	F2F.FTZ R6, R8;                  # [ 39][000138]
//     	FADD.FTZ R19, R19, c[0x6][0x221c]; # [ 40][000140]
//     	FADD.FTZ R20, R20, c[0x6][0x222c]; # [ 41][000148]
//     	F2F.FTZ R8, R13;                 # [ 42][000150]
//     	FFMA.FMZ R15, R7, R9, R15;       # [ 43][000158]
//     	FMNMX.FTZ R12, |R19|, |R20|, !PT; # [ 44][000160]
//     	FFMA.FMZ R13, R5, R9, R21;       # [ 45][000168]
//     	FFMA.FMZ R16, R4, R9, R16;       # [ 46][000170]
//     	FFMA.FMZ.SAT R12, R12, c[0x9][0x0], R17; # [ 47][000178]
//     	FFMA.FMZ R5, R3, R10, R15;       # [ 48][000180]
//     	FFMA.FMZ R9, R2, R10, R14;       # [ 49][000188]
//     	FCMP.LE R17, RZ, 0x3f800, R12;   # [ 50][000190]
//     	FFMA.FMZ R13, R1, R10, R13;      # [ 51][000198]
//     	F2F.FTZ R7, R18;                 # [ 52][0001a0]
//     	FSETP.NEU.FTZ.AND P0, PT, R17, -R17, PT; # [ 53][0001a8]
//     	IPA.PASS.CENTROID R17, a[0x7c];  # [ 54][0001b0] POSITION_W
//     	FFMA.FMZ R10, R0, R10, R16;      # [ 55][0001b8]
//     	MUFU.RCP R4, R17;                # [ 56][0001c0]
//     	@!P0 BRA.U L0330;                # [ 57][0001c8]
//     	@P0 FMUL.FTZ R0, R6, c[0x6][0x2230]; # [ 58][0001d0]
//     	@P0 MOV32I R3, 0x3f000000;       # [ 59][0001d8]
//     	@P0 FFMA.FTZ R0, R7, c[0x6][0x2234], R0; # [ 60][0001e0]
//     	@P0 FFMA.FMZ R1, R20, -0.5, R3;  # [ 61][0001e8]
//     	@P0 FFMA.FTZ R2, R8, c[0x6][0x2238], R0; # [ 62][0001f0]
//     	@P0 FFMA.FMZ R0, R19, 0.5, R3;   # [ 63][0001f8]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x22d4]; # [ 64][000200]
//     	@P0 FADD.FTZ R14, R2, c[0x6][0x223c]; # [ 65][000208]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x22d0]; # [ 66][000210]
//     	@P0 FADD.FTZ R16, R14, c[0x6][0x2360]; # [ 67][000218]
//     	@P0 TEX.LZ.DC.NODEP.T R14, R2, R16, 0x5, 0x5, 2D, 0x1; # [ 68][000220]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x22e4]; # [ 69][000228]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x22e0]; # [ 70][000230]
//     	@P0 TEX.LZ.DC.NODEP.T R15, R2, R16, 0x5, 0x5, 2D, 0x1; # [ 71][000238]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x22f4]; # [ 72][000240]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x22f0]; # [ 73][000248]
//     	@P0 TEX.LZ.DC.NODEP.T R17, R2, R16, 0x5, 0x5, 2D, 0x1; # [ 74][000250]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x2304]; # [ 75][000258]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x2300]; # [ 76][000260]
//     	@P0 TEX.LZ.DC.NODEP.T R18, R2, R16, 0x5, 0x5, 2D, 0x1; # [ 77][000268]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x2314]; # [ 78][000270]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x2310]; # [ 79][000278]
//     	@P0 TEX.LZ.DC.NODEP.T R19, R2, R16, 0x5, 0x5, 2D, 0x1; # [ 80][000280]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x2324]; # [ 81][000288]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x2320]; # [ 82][000290]
//     	@P0 TEX.LZ.DC.NODEP.T R20, R2, R16, 0x5, 0x5, 2D, 0x1; # [ 83][000298]
//     	@P0 TEX.LZ.DC.NODEP.T R21, R0, R16, 0x5, 0x5, 2D, 0x1; # [ 84][0002a0]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x2334]; # [ 85][0002a8]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x2330]; # [ 86][0002b0]
//     	@P0 TEX.LZ.DC.NODEP.T R2, R2, R16, 0x5, 0x5, 2D, 0x1; # [ 87][0002b8]
//     	@P0 FADD.FTZ R1, R1, c[0x6][0x2344]; # [ 88][0002c0]
//     	@P0 FADD.FTZ R0, R0, c[0x6][0x2340]; # [ 89][0002c8]
//     	@P0 TEX.LZ.DC.NODEP.T R0, R0, R16, 0x5, 0x5, 2D, 0x1; # [ 90][0002d0]
//     	@P0 FADD.FTZ R1, R21, R14;       # [ 91][0002d8]
//     	@P0 FADD.FTZ R1, R1, R15;        # [ 92][0002e0]
//     	@P0 FADD.FTZ R1, R1, R17;        # [ 93][0002e8]
//     	@P0 FADD.FTZ R1, R1, R18;        # [ 94][0002f0]
//     	@P0 FADD.FTZ R1, R1, R19;        # [ 95][0002f8]
//     	@P0 FADD.FTZ R1, R1, R20;        # [ 96][000300]
//     	@P0 FADD.FTZ R1, R1, R2;         # [ 97][000308]
//     	@P0 MOV32I R2, -0x40800000;      # [ 98][000310]
//     	@P0 FADD.FTZ R0, R1, R0;         # [ 99][000318]
//     	@P0 FFMA.FMZ R0, R0, c[0x9][0x4], R2; # [100][000320]
//     	@P0 FFMA.FMZ R12, R12, R0, -R2;  # [101][000328]
//     L0330:
//     	@!P0 MOV32I R12, 0x3f800000;     # [102][000330]
//     	FMUL.FTZ R0, R6, c[0x6][0x2240]; # [103][000338]
//     	FMUL.FTZ R1, R6, c[0x6][0x2250]; # [104][000340]
//     	FFMA.FTZ R0, R7, c[0x6][0x2244], R0; # [105][000348]
//     	FFMA.FTZ R1, R7, c[0x6][0x2254], R1; # [106][000350]
//     	FFMA.FTZ R0, R8, c[0x6][0x2248], R0; # [107][000358]
//     	FFMA.FTZ R1, R8, c[0x6][0x2258], R1; # [108][000360]
//     	FADD.FTZ R0, R0, c[0x6][0x224c]; # [109][000368]
//     	FADD.FTZ R1, R1, c[0x6][0x225c]; # [110][000370]
//     	FMNMX.FTZ R2, |R0|, |R1|, !PT;   # [111][000378]
//     	FSETP.LT.FTZ.AND P0, PT, R2, 1, PT; # [112][000380]
//     	SSY L0730;                       # [113][000388]
//     	@!P0 BRA L0470;                  # [114][000390]
//     	FMUL.FTZ R2, R6, c[0x6][0x2260]; # [115][000398]
//     	MOV32I R3, 0x3f000000;           # [116][0003a0]
//     	FFMA.FTZ R2, R7, c[0x6][0x2264], R2; # [117][0003a8]
//     	FFMA.FMZ R1, R1, -0.5, R3;       # [118][0003b0]
//     	FFMA.FMZ R0, R0, 0.5, R3;        # [119][0003b8]
//     	FFMA.FTZ R2, R8, c[0x6][0x2268], R2; # [120][0003c0]
//     	FADD.FTZ R3, R1, c[0x6][0x22d4]; # [121][0003c8]
//     	FADD.FTZ R6, R2, c[0x6][0x226c]; # [122][0003d0]
//     	FADD.FTZ R2, R0, c[0x6][0x22d0]; # [123][0003d8]
//     	FADD.FTZ R14, R6, c[0x6][0x2364]; # [124][0003e0]
//     	TEX.LZ.DC.NODEP.T R7, R2, R14, 0x6, 0x6, 2D, 0x1; # [125][0003e8]
//     	TEX.LZ.DC.NODEP.T R6, R0, R14, 0x6, 0x6, 2D, 0x1; # [126][0003f0]
//     	FADD.FTZ R3, R1, c[0x6][0x22f4]; # [127][0003f8]
//     	FADD.FTZ R2, R0, c[0x6][0x22f0]; # [128][000400]
//     	TEX.LZ.DC.NODEP.T R8, R2, R14, 0x6, 0x6, 2D, 0x1; # [129][000408]
//     	FADD.FTZ R3, R1, c[0x6][0x2314]; # [130][000410]
//     	FADD.FTZ R2, R0, c[0x6][0x2310]; # [131][000418]
//     	TEX.LZ.DC.NODEP.T R2, R2, R14, 0x6, 0x6, 2D, 0x1; # [132][000420]
//     	FADD.FTZ R1, R1, c[0x6][0x2334]; # [133][000428]
//     	FADD.FTZ R0, R0, c[0x6][0x2330]; # [134][000430]
//     	TEX.LZ.DC.NODEP.T R0, R0, R14, 0x6, 0x6, 2D, 0x1; # [135][000438]
//     	FADD.FTZ R1, R6, R7;             # [136][000440]
//     	FADD.FTZ R1, R1, R8;             # [137][000448]
//     	FADD.FTZ R1, R1, R2;             # [138][000450]
//     	FADD.FTZ R0, R1, R0;             # [139][000458]
//     	FMUL32I.FMZ R3, R0, 0.2;         # [140][000460]
//     	BRA L0728;                       # [141][000468]
//     L0470:
//     	FMUL.FTZ R0, R6, c[0x6][0x2270]; # [142][000470]
//     	FMUL.FTZ R1, R6, c[0x6][0x2280]; # [143][000478]
//     	FFMA.FTZ R0, R7, c[0x6][0x2274], R0; # [144][000480]
//     	FFMA.FTZ R1, R7, c[0x6][0x2284], R1; # [145][000488]
//     	FFMA.FTZ R0, R8, c[0x6][0x2278], R0; # [146][000490]
//     	FFMA.FTZ R1, R8, c[0x6][0x2288], R1; # [147][000498]
//     	FADD.FTZ R0, R0, c[0x6][0x227c]; # [148][0004a0]
//     	FADD.FTZ R1, R1, c[0x6][0x228c]; # [149][0004a8]
//     	FMNMX.FTZ R2, |R0|, |R1|, !PT;   # [150][0004b0]
//     	FSETP.LT.FTZ.AND P0, PT, R2, 1, PT; # [151][0004b8]
//     	@!P0 BRA.U L05a0;                # [152][0004c0]
//     	@P0 FMUL.FTZ R2, R6, c[0x6][0x2290]; # [153][0004c8]
//     	@P0 MOV32I R3, 0x3f000000;       # [154][0004d0]
//     	@P0 FFMA.FTZ R2, R7, c[0x6][0x2294], R2; # [155][0004d8]
//     	@P0 FFMA.FMZ R1, R1, -0.5, R3;   # [156][0004e0]
//     	@P0 FFMA.FMZ R0, R0, 0.5, R3;    # [157][0004e8]
//     	@P0 FFMA.FTZ R2, R8, c[0x6][0x2298], R2; # [158][0004f0]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x22d4]; # [159][0004f8]
//     	@P0 FADD.FTZ R6, R2, c[0x6][0x229c]; # [160][000500]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x22d0]; # [161][000508]
//     	@P0 FADD.FTZ R14, R6, c[0x6][0x2368]; # [162][000510]
//     	@P0 TEX.LZ.DC.NODEP.T R7, R2, R14, 0x7, 0x7, 2D, 0x1; # [163][000518]
//     	@P0 TEX.LZ.DC.NODEP.T R6, R0, R14, 0x7, 0x7, 2D, 0x1; # [164][000520]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x22f4]; # [165][000528]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x22f0]; # [166][000530]
//     	@P0 TEX.LZ.DC.NODEP.T R8, R2, R14, 0x7, 0x7, 2D, 0x1; # [167][000538]
//     	@P0 FADD.FTZ R3, R1, c[0x6][0x2314]; # [168][000540]
//     	@P0 FADD.FTZ R2, R0, c[0x6][0x2310]; # [169][000548]
//     	@P0 TEX.LZ.DC.NODEP.T R2, R2, R14, 0x7, 0x7, 2D, 0x1; # [170][000550]
//     	@P0 FADD.FTZ R1, R1, c[0x6][0x2334]; # [171][000558]
//     	@P0 FADD.FTZ R0, R0, c[0x6][0x2330]; # [172][000560]
//     	@P0 TEX.LZ.DC.NODEP.T R0, R0, R14, 0x7, 0x7, 2D, 0x1; # [173][000568]
//     	@P0 FADD.FTZ R1, R6, R7;         # [174][000570]
//     	@P0 FADD.FTZ R1, R1, R8;         # [175][000578]
//     	@P0 FADD.FTZ R1, R1, R2;         # [176][000580]
//     	@P0 FADD.FTZ R0, R1, R0;         # [177][000588]
//     	@P0 FMUL32I.FMZ R3, R0, 0.2;     # [178][000590]
//     	@P0 BRA.U L0728;                 # [179][000598]
//     L05a0:
//     	@!P0 FMUL.FTZ R2, R6, c[0x6][0x22a0]; # [180][0005a0]
//     	@!P0 FMUL.FTZ R1, R6, c[0x6][0x22b0]; # [181][0005a8]
//     	@!P0 FMUL.FTZ R0, R6, c[0x6][0x22c0]; # [182][0005b0]
//     	@!P0 FFMA.FTZ R2, R7, c[0x6][0x22a4], R2; # [183][0005b8]
//     	@!P0 FFMA.FTZ R1, R7, c[0x6][0x22b4], R1; # [184][0005c0]
//     	@!P0 FFMA.FTZ R0, R7, c[0x6][0x22c4], R0; # [185][0005c8]
//     	@!P0 FFMA.FTZ R2, R8, c[0x6][0x22a8], R2; # [186][0005d0]
//     	@!P0 FFMA.FTZ R1, R8, c[0x6][0x22b8], R1; # [187][0005d8]
//     	@!P0 FFMA.FTZ R0, R8, c[0x6][0x22c8], R0; # [188][0005e0]
//     	@!P0 MOV32I R6, 0x3f000000;      # [189][0005e8]
//     	@!P0 FADD.FTZ R8, R1, c[0x6][0x22bc]; # [190][0005f0]
//     	@!P0 FADD.FTZ R7, R2, c[0x6][0x22ac]; # [191][0005f8]
//     	@!P0 FADD.FTZ R2, R0, c[0x6][0x22cc]; # [192][000600]
//     	@!P0 FFMA.FMZ R1, R8, -0.5, R6;  # [193][000608]
//     	@!P0 FFMA.FMZ R0, R7, 0.5, R6;   # [194][000610]
//     	@!P0 FADD.FTZ R14, R2, c[0x6][0x236c]; # [195][000618]
//     	@!P0 FFMA.FMZ R3, R6, c[0x6][0x22d4], R1; # [196][000620]
//     	@!P0 FFMA.FMZ R2, R6, c[0x6][0x22d0], R0; # [197][000628]
//     	@!P0 TEX.LZ.DC.NODEP.T R15, R2, R14, 0x8, 0x8, 2D, 0x1; # [198][000630]
//     	@!P0 TEX.LZ.DC.NODEP.T R16, R0, R14, 0x8, 0x8, 2D, 0x1; # [199][000638]
//     	@!P0 FFMA.FMZ R2, R6, c[0x6][0x22f0], R0; # [200][000640]
//     	@!P0 FFMA.FMZ R3, R6, c[0x6][0x22f4], R1; # [201][000648]
//     	@!P0 TEX.LZ.DC.NODEP.T R17, R2, R14, 0x8, 0x8, 2D, 0x1; # [202][000650]
//     	@!P0 FFMA.FMZ R3, R6, c[0x6][0x2314], R1; # [203][000658]
//     	@!P0 FFMA.FMZ R2, R6, c[0x6][0x2310], R0; # [204][000660]
//     	@!P0 TEX.LZ.DC.NODEP.T R2, R2, R14, 0x8, 0x8, 2D, 0x1; # [205][000668]
//     	@!P0 FFMA.FMZ R1, R6, c[0x6][0x2334], R1; # [206][000670]
//     	@!P0 FFMA.FMZ R0, R6, c[0x6][0x2330], R0; # [207][000678]
//     	@!P0 TEX.LZ.DC.NODEP.T R0, R0, R14, 0x8, 0x8, 2D, 0x1; # [208][000680]
//     	@!P0 FADD32I.FTZ R14, -|R7|, 0.9; # [209][000688]
//     	@!P0 F2F R6, |R7|;               # [210][000690]
//     	@!P0 MOV32I R18, -0x3ee00000;    # [211][000698]
//     	@!P0 F2F R7, |R8|;               # [212][0006a0]
//     	@!P0 FADD32I.FTZ R3, -|R8|, 0.9; # [213][0006a8]
//     	@!P0 FFMA.FMZ R6, R6, c[0x9][0x8], R18; # [214][0006b0]
//     	@!P0 FFMA.FMZ R7, R7, c[0x9][0x8], R18; # [215][0006b8]
//     	@!P0 FCMP.GE R8, RZ, 0x3f800, R14; # [216][0006c0]
//     	@!P0 FCMP.GE R14, RZ, 0x3f800, R3; # [217][0006c8]
//     	@!P0 FMNMX.FTZ R3, R6, R7, !PT;  # [218][0006d0]
//     	@!P0 MOV32I R1, -0x40800000;     # [219][0006d8]
//     	@!P0 FADD.FTZ R3, -R3, 1;        # [220][0006e0]
//     	@!P0 FADD.FTZ R15, R16, R15;     # [221][0006e8]
//     	@!P0 FADD.FTZ R15, R15, R17;     # [222][0006f0]
//     	@!P0 FADD.FTZ R6, R15, R2;       # [223][0006f8]
//     	@!P0 FADD.FTZ R2, R8, R14;       # [224][000700]
//     	@!P0 FADD.FTZ R6, R6, R0;        # [225][000708]
//     	@!P0 FCMP.GTU R0, R3, 0x3f800, R2; # [226][000710]
//     	@!P0 FFMA.FMZ R2, R6, c[0x9][0xc], R1; # [227][000718]
//     	@!P0 FFMA.FMZ R3, R0, R2, -R1;   # [228][000720]
//     L0728:
//     	IPA.SC.S R0, a[0x360], R11;      # [229][000728] TEX6
//     L0730:
//     	IPA.SC R1, a[0x364], R11;        # [230][000730] FIXED_FNC_TEXTURE_6_T
//     	IPA.SC R2, a[0x368], R11;        # [231][000738] FIXED_FNC_TEXTURE_6_R
//     	FMNMX.FTZ R6, R3, R12, PT;       # [232][000740]
//     	IPA.SC.CENTROID R7, a[0x298], R4; # [233][000748] COLOR_FRONT_SPELWLAR_BLUE
//     	IPA.SC.CENTROID R8, a[0x294], R4; # [234][000750] COLOR_FRONT_SPELWLAR_GREEN
//     	FMUL.FTZ R0, R0, -c[0x6][0x2350]; # [235][000758]
//     	FADD.FTZ R6, R6, -1;             # [236][000760]
//     	IPA.SC.CENTROID R12, a[0x290], R4; # [237][000768] COLOR_FRONT_SPELWLAR_RED
//     	FFMA.FTZ R0, R1, -c[0x6][0x2354], R0; # [238][000770]
//     	FMUL.FMZ R7, R5, R7;             # [239][000778]
//     	FMUL.FMZ R8, R5, R8;             # [240][000780]
//     	FFMA.FTZ R0, R2, -c[0x6][0x2358], R0; # [241][000788]
//     	IPA.SC.CENTROID R2, a[0x288], R4; # [242][000790] COLOR_FRONT_DIFFUSE_BLUE
//     	FMUL.FMZ R5, R5, R12;            # [243][000798]
//     	FADD.FTZ R1, R0, c[0x6][0x235c]; # [244][0007a0]
//     	IPA.SC.CENTROID R0, a[0x280], R4; # [245][0007a8] COLOR_FRONT_DIFFUSE_RED
//     	FMNMX.FTZ R3, R1, RZ, !PT;       # [246][0007b0]
//     	IPA.SC.CENTROID R1, a[0x284], R4; # [247][0007b8] COLOR_FRONT_DIFFUSE_GREEN
//     	IPA.SC R4, a[0x120], R11;        # [248][0007c0] ATTR10
//     	FMUL.FMZ R3, R3, R3;             # [249][0007c8]
//     	MOV32I R11, 0x3f333333;          # [250][0007d0]
//     	FMUL.FMZ R3, R3, R3;             # [251][0007d8]
//     	FMUL.FMZ.SAT R3, R3, R3;         # [252][0007e0]
//     	FFMA.FTZ R6, R3, R6, c[0x9][0x10]; # [253][0007e8]
//     	MOV32I R3, 0x3f800000;           # [254][0007f0]
//     	FFMA.FMZ R11, R6, c[0x9][0x14], R11; # [255][0007f8]
//     	FMUL.FMZ R10, R10, R11;          # [256][000800]
//     	FMUL.FMZ R12, R13, R11;          # [257][000808]
//     	FMUL.FMZ R9, R9, R11;            # [258][000810]
//     	FMUL.FMZ R0, R10, R0;            # [259][000818]
//     	FMUL.FMZ R1, R12, R1;            # [260][000820]
//     	FMUL.FMZ R2, R9, R2;             # [261][000828]
//     	FADD.FTZ R0, R0, R0;             # [262][000830]
//     	FADD.FTZ R1, R1, R1;             # [263][000838]
//     	FADD.FTZ R2, R2, R2;             # [264][000840]
//     	FFMA.FMZ R0, R5, R6, R0;         # [265][000848]
//     	FFMA.FMZ R1, R8, R6, R1;         # [266][000850]
//     	FFMA.FMZ R2, R7, R6, R2;         # [267][000858]
//     	FADD.FTZ R0, R0, -c[0x6][0x2200]; # [268][000860]
//     	FADD.FTZ R1, R1, -c[0x6][0x2204]; # [269][000868]
//     	FADD.FTZ R2, R2, -c[0x6][0x2208]; # [270][000870]
//     	FFMA.FMZ R0, R4, R0, c[0x6][0x2200]; # [271][000878]
//     	FFMA.FMZ R1, R4, R1, c[0x6][0x2204]; # [272][000880]
//     	FFMA.FMZ R2, R4, R2, c[0x6][0x2208]; # [273][000888]
//     	EXIT;                            # [274][000890]
//     	END
//     END_SECTION
// END_SHADER
// 
