// BEGIN_SHADER
//     BEGIN_SECTION SHADER_ID
//         DIRECTX: 10.0
//         TYPE: PIXEL 
//         SHADER_HASH: 0x07dcf2b545edb7a6
//         FINGERPRINTER_HASH: 0x7a7e2e705224ce7e
//         UCODE_HASH: 0x486ca89196259d76
//         POOL: APP
//         VERSION: 20
//         # USES: 105
//         # Constant Folding: 1
//         # Disable 595261: 0
//         # Reduction Hack: 0
//         # Tex / Tld vectorized: 0
//         # Texture Filtering: 0
//     END_SECTION
//     BEGIN_SECTION CHIP_ID
//         CLASS: FERMI
//         CHIP_ID: GF100
//         SM_VERSION: SMClassic  // SM 2.0
//     END_SECTION
//     BEGIN_SECTION RESOURCES
//         REGISTER_COUNT: 16
//         TEXTURE_SLOTS: 3
//         SAMPLER_SLOTS: 3
//     END_SECTION
//     BEGIN_SECTION FERMI_SHADER_HEADER
//         SPHType: TYPE_02_PS
//         Version: 3
//         ShaderType: PIXEL
//         SassVersion: 1
//         PROPERTIES:
//             MRT_ENABLE
//         IMAP:
//             POSITION_W
//             GENERIC01_X          PERSPECTIVE
//             GENERIC01_Y          PERSPECTIVE
//         OMAP:
//             TARGET00_R
//             TARGET00_G
//             TARGET00_B
//             TARGET00_A
//     END_SECTION
//     BEGIN_SECTION APP_SHADER_INFO
        ps_4_0
        dcl_input_ps v1.xy, linear
        dcl_output o0.xyzw
        dcl_constantbuffer cb0[9].xyzw, immediateIndexed
        dcl_sampler s0, mode_default
        dcl_sampler s2, mode_default
        dcl_sampler s1, mode_default
        dcl_resource t0, texture2d, (float, float, float, float)
        dcl_resource t1, texture2d, (float, float, float, float)
        dcl_resource t2, texture2d, (float, float, float, float)
        dcl_temps 5 
        mul r0.xy, v1.xyxx, cb0[0].xyxx
        div r0.zw, cb0[2].zzzw, cb0[0].xxxy
        mad r0.xy, r0.xyxx, l(0.01562500, 0.01562500, 0.00000000, 0.00000000), r0.zwzz
        sample r0.xyzw, r0.xyxx, t2.xyzw, s1
        dp2 r0.z, v1.xyxx, l(1.00000000, 1.00000000, 0.00000000, 0.00000000)
        mad r0.xy, r0.zzzz, l(65535.00000000, 65535.00000000, 0.00000000, 0.00000000), r0.xyxx
        frc r0.xy, r0.xyxx
        mad r0.xy, r0.xyxx, l(2.00000000, 2.00000000, 0.00000000, 0.00000000), l(-1.00000000, -1.00000000, 0.00000000, 0.00000000)
        dp2 r0.x, r0.xyxx, l(0.10000000, 0.10000000, 0.00000000, 0.00000000)
        sample r1.xyzw, v1.xyxx, t0.xyzw, s0
        mov r1.w, l(0x3f800000)
        sample r2.xyzw, v1.xyxx, t1.xyzw, s2
        add r1.xyzw, r1.xyzw, -r2.xyzw
        mad r1.xyzw, cb0[4].wwww, r1.xyzw, r2.xyzw
        mad r0.xyz, r0.xxxx, cb0[2].yyyy, r1.xyzx
        mad r0.xyz, r0.xyzx, l(255.00000000, 255.00000000, 255.00000000, 0.00000000), -cb0[1].xxxx
        add r0.w, -cb0[1].x, cb0[1].z
        div r0.xyz, r0.xyzx, r0.wwww
        max r0.xyz, r0.xyzx, l(0.00000000, 0.00000000, 0.00000000, 0.00000000)
        log r0.xyz, r0.xyzx
        div r0.w, l(1.00000000, 1.00000000, 1.00000000, 1.00000000), cb0[1].y
        mul r0.xyz, r0.xyzx, r0.wwww
        exp r0.xyz, r0.xyzx
        add r0.w, -cb0[1].w, cb0[2].x
        mad r0.xyz, r0.xyzx, r0.wwww, cb0[1].wwww
        mul r2.xyz, r0.xyzx, l(0.00392157, 0.00392157, 0.00392157, 0.00000000)
        dp3 r0.w, r2.xyzx, l(0.33000001, 0.58999997, 0.11000000, 0.00000000)
        add_sat r2.w, r0.w, l(-0.50000000)
        add r2.w, r2.w, r2.w
        add_sat r3.x, r0.w, r0.w
        mul_sat r0.w, r0.w, cb0[3].w
        mul r3.yzw, r3.xxxx, cb0[3].xxyz
        mad r4.xyz, -r3.xxxx, cb0[3].xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
        mad r3.xyz, r2.wwww, r4.xyzx, r3.yzwy
        mad r0.xyz, -r0.xyzx, l(0.00392157, 0.00392157, 0.00392157, 0.00000000), r3.xyzx
        mad r1.xyz, r0.wwww, r0.xyzx, r2.xyzx
        dp4 r0.x, r1.xyzw, cb0[6].xyzw
        dp4 r0.y, r1.xyzw, cb0[7].xyzw
        dp4 r0.z, r1.xyzw, cb0[8].xyzw
        add r1.xyz, -r0.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
        min r0.w, r1.y, r1.x
        min_sat r2.w, r1.z, r0.w
        add r1.xyz, r1.xyzx, -r2.wwww
        add r0.w, -r2.w, l(1.00000000)
        div_sat r2.xyz, r1.xyzx, r0.wwww
        add r1.xyzw, r2.xyzw, cb0[5].xyzw
        max r1.xyzw, r1.xyzw, l(-1.00000000, -1.00000000, -1.00000000, -1.00000000)
        min r1.xyzw, r1.xyzw, l(1.00000000, 1.00000000, 1.00000000, 1.00000000)
        add r1.xyzw, -r2.xyzw, r1.xyzw
        add r3.xyz, r0.xyzx, -cb0[4].xyzx
        dp3 r0.w, r3.xyzx, r3.xyzx
        sqrt r0.w, r0.w
        add r0.w, -r0.w, l(1.00000000)
        max r0.w, r0.w, l(0.00000000)
        mad r1.xyzw, r0.wwww, r1.xyzw, r2.xyzw
        add r2.x, -r1.w, l(1.00000000)
        mad r1.xyz, r1.xyzx, r2.xxxx, r1.wwww
        min r1.xyz, r1.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
        add r1.xyz, -r0.xyzx, -r1.xyzx
        add r1.xyz, r1.xyzx, l(1.00000000, 1.00000000, 1.00000000, 0.00000000)
        mad o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
        mov o0.w, l(0)
        ret 
//     END_SECTION
//     BEGIN_SECTION COP_CONSTANTS
//         COP_CONST[0]: 0x3f0c5f93 // 0.548333
//         COP_CONST[1]: 0x3e766666 // 0.240625
//         COP_CONST[2]: 0x477fff00 // 65535.000000
//         COP_CONST[3]: 0x3dcccccd // 0.100000
//         COP_CONST[4]: 0x3f95a9f5 // 1.169249
//         COP_CONST[5]: 0x3d4c0da0 // 0.049818
//         COP_CONST[6]: 0x3f170a3d // 0.590000
//         COP_CONST[7]: 0x3de147ae // 0.110000
//         COP_CONST[8]: 0x3ea40095 // 0.320317
//         COP_CONST[9]: 0x3f0dcd65 // 0.553915
//         COP_CONST[10]: 0x3f5ce5b9 // 0.862880
//         COP_CONST[11]: 0x3b808081 // 0.003922
//         COP_CONST[12]: 0x3f895ae2 // 1.073086
//         COP_CONST[13]: 0x3a68d49b // 0.000888
//         COP_CONST[14]: 0xbcc8fdc7 // -0.024535
//         COP_CONST[15]: 0x3f89c5a5 // 1.076344
//         COP_CONST[16]: 0x3f890a75 // 1.070632
//     END_SECTION
//     BEGIN_SECTION USER_CONSTANTS
//         USER_CONST: c[0][0] = 0x44c80000 // 1600.000000
//         USER_CONST: c[0][1] = 0x44960000 // 1200.000000
//         USER_CONST: c[0][4] = 0x00000000 // 0.000000
//         USER_CONST: c[0][5] = 0x3f881b4e // 1.063333
//         USER_CONST: c[0][6] = 0x43699ff4 // 233.624817
//         USER_CONST: c[0][7] = 0x00000000 // 0.000000
//         USER_CONST: c[0][8] = 0x4375aa44 // 245.665100
//         USER_CONST: c[0][9] = 0x3d4c0da0 // 0.049818
//         USER_CONST: c[0][10] = 0x43c08000 // 385.000000
//         USER_CONST: c[0][11] = 0x44248000 // 658.000000
//         USER_CONST: c[0][12] = 0x3f5ce5b9 // 0.862880
//         USER_CONST: c[0][13] = 0x3f0dcd65 // 0.553915
//         USER_CONST: c[0][14] = 0x3ea40095 // 0.320317
//         USER_CONST: c[0][15] = 0x3e5c3c1a // 0.215073
//         USER_CONST: c[0][16] = 0x00000000 // 0.000000
//         USER_CONST: c[0][17] = 0x00000000 // 0.000000
//         USER_CONST: c[0][18] = 0x3c43cab4 // 0.011950
//         USER_CONST: c[0][19] = 0x3f95a9f5 // 1.169249
//         USER_CONST: c[0][20] = 0x3ef5c20f // 0.479996
//         USER_CONST: c[0][21] = 0x3e99995c // 0.299998
//         USER_CONST: c[0][22] = 0x3e19991c // 0.149998
//         USER_CONST: c[0][23] = 0x3cfae0e7 // 0.030625
//         USER_CONST: c[0][24] = 0x3f895ae2 // 1.073086
//         USER_CONST: c[0][25] = 0x3bd84a7f // 0.006601
//         USER_CONST: c[0][26] = 0x3a68d49b // 0.000888
//         USER_CONST: c[0][27] = 0xbcc8fdc7 // -0.024535
//         USER_CONST: c[0][28] = 0x3b5b0f36 // 0.003343
//         USER_CONST: c[0][29] = 0x3f89c5a5 // 1.076344
//         USER_CONST: c[0][30] = 0x3a68d49b // 0.000888
//         USER_CONST: c[0][31] = 0xbcc8fdc7 // -0.024535
//         USER_CONST: c[0][32] = 0x3b5b0f36 // 0.003343
//         USER_CONST: c[0][33] = 0x3bd84a7f // 0.006601
//         USER_CONST: c[0][34] = 0x3f890a75 // 1.070632
//         USER_CONST: c[0][35] = 0xbcc8fdc7 // -0.024535
//     END_SECTION
//     # Exelwtion Time: 44.750ms [1.407 percent]
//     BEGIN_SECTION USER_CONSTANT_HISTOGRAM_INFO
//                 ~c[0][0] = 100.00%@1600.00000000
//                 ~c[0][1] = 100.00%@1200.00000000
//                 ~c[0][4] = 100.00%@0.00000000
//                 ~c[0][5] = 100.00%@1.06333327
//                 ~c[0][6] = 100.00%@233.62481689
//                 ~c[0][7] = 100.00%@0.00000000
//                 ~c[0][8] = 100.00%@245.66510010
//                 ~c[0][9] = 100.00%@0.04981768
//                 ~c[0][10] = 100.00%@385.00000000
//                 ~c[0][11] = 100.00%@658.00000000
//                 ~c[0][12] = 100.00%@0.86288029
//                 ~c[0][13] = 100.00%@0.55391532
//                 ~c[0][14] = 100.00%@0.32031694
//                 ~c[0][15] = 100.00%@0.21507302
//                 ~c[0][16] = 100.00%@0.00000000
//                 ~c[0][17] = 100.00%@0.00000000
//                 ~c[0][18] = 100.00%@0.01195018
//                 ~c[0][19] = 100.00%@1.16924918
//                 ~c[0][20] = 100.00%@0.47999617
//                 ~c[0][21] = 100.00%@0.29999816
//                 ~c[0][22] = 100.00%@0.14999813
//                 ~c[0][23] = 100.00%@0.03062482
//                 ~c[0][24] = 100.00%@1.07308602
//                 ~c[0][25] = 100.00%@0.00660068
//                 ~c[0][26] = 100.00%@0.00088818
//                 ~c[0][27] = 100.00%@-0.02453507
//                 ~c[0][28] = 100.00%@0.00334258
//                 ~c[0][29] = 100.00%@1.07634413
//                 ~c[0][30] = 100.00%@0.00088818
//                 ~c[0][31] = 100.00%@-0.02453507
//                 ~c[0][32] = 100.00%@0.00334258
//                 ~c[0][33] = 100.00%@0.00660068
//                 ~c[0][34] = 100.00%@1.07063162
//                 ~c[0][35] = 100.00%@-0.02453507
//     END_SECTION
//     BEGIN_SECTION TEXTURE_STATE_HISTOGRAM_INFO
//         TEXTURE_SLOT 0x0
//         100.00% width=0x640, height=0x4b0, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x1
//         100.00% width=0x320, height=0x258, mips=0x1, DXGI_FORMAT_R8G8B8A8_UNORM
//         TEXTURE_SLOT 0x2
//         100.00% width=0x40, height=0x40, mips=0x7, DXGI_FORMAT_R8G8B8A8_UNORM
//     END_SECTION
//     BEGIN_SECTION SAMPLER_STATE_INFO
//         SAMPLER_SLOT 0x0
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=0.000000, maxLOD=0.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=WRAP
//         SAMPLER_SLOT 0x1
//         100.00%  min=Point, mag=Point, mip=Point aniso=1, minLOD=0.000000, maxLOD=0.000000
//         addressU=WRAP, addressV=WRAP, addressW=WRAP
//         SAMPLER_SLOT 0x2
//         100.00%  min=Linear, mag=Linear, mip=Point aniso=1, minLOD=0.000000, maxLOD=100.000000
//         addressU=CLAMP, addressV=CLAMP, addressW=WRAP
//     END_SECTION
//     BEGIN_SECTION UCODE
//     	!!SPA2.1
//     	.THREAD_TYPE PIXEL
//     	IPA.PASS R0, a[0x7c];            # [  0][000000] POSITION_W
//     	MOV32I R2, 0x3c800000;           # [  1][000008]
//     	MUFU.RCP R0, R0;                 # [  2][000010]
//     	IPA R11, a[0x94], R0;            # [  3][000018] GENERIC_ATTRIBUTE_01_Y
//     	IPA R10, a[0x90], R0;            # [  4][000020] ATTR1
//     	FMUL.FTZ R1, R11, 1200;          # [  5][000028]
//     	FMUL.FTZ R0, R10, 1600;          # [  6][000030]
//     	FFMA.FTZ R1, R1, R2, c[0x10][0x0]; # [  7][000038]
//     	FFMA.FTZ R0, R0, R2, c[0x10][0x4]; # [  8][000040]
//     	TEX.NODEP.T R8, R0, 0x2, 0x1, 2D, 0x3; # [  9][000048]
//     	TEX.NODEP.T R4, R10, 0x0, 0x0, 2D, 0x7; # [ 10][000050]
//     	TEX.NODEP.T R0, R10, 0x1, 0x2, 2D; # [ 11][000058]
//     	FADD.FTZ R7, R10, R11;           # [ 12][000060]
//     	FFMA.FTZ R8, R7, c[0x10][0x8], R8; # [ 13][000068]
//     	FFMA.FTZ R10, R7, c[0x10][0x8], R9; # [ 14][000070]
//     	MOV32I R7, -0x40800000;          # [ 15][000078]
//     	F2F.FTZ.FLOOR R9, R8;            # [ 16][000080]
//     	F2F.FTZ.FLOOR R11, R10;          # [ 17][000088]
//     	FADD.FTZ R8, R8, -R9;            # [ 18][000090]
//     	FADD.FTZ R9, R10, -R11;          # [ 19][000098]
//     	FFMA.FTZ R8, R8, 2, R7;          # [ 20][0000a0]
//     	FFMA.FTZ R9, R9, 2, R7;          # [ 21][0000a8]
//     	FMUL32I.FTZ R8, R8, 0.1;         # [ 22][0000b0]
//     	FADD.FTZ R10, R4, -R0;           # [ 23][0000b8]
//     	FADD.FTZ R5, R5, -R1;            # [ 24][0000c0]
//     	FFMA.FTZ R4, R9, c[0x10][0xc], R8; # [ 25][0000c8]
//     	FFMA.FTZ R0, R10, c[0x10][0x10], R0; # [ 26][0000d0]
//     	FFMA.FTZ R1, R5, c[0x10][0x10], R1; # [ 27][0000d8]
//     	FADD.FTZ R6, R6, -R2;            # [ 28][0000e0]
//     	FFMA.FTZ R0, R4, c[0x10][0x14], R0; # [ 29][0000e8]
//     	FFMA.FTZ R1, R4, c[0x10][0x14], R1; # [ 30][0000f0]
//     	FFMA.FTZ R2, R6, c[0x10][0x10], R2; # [ 31][0000f8]
//     	FMUL.FTZ R0, R0, 255;            # [ 32][000100]
//     	FMUL.FTZ R1, R1, 255;            # [ 33][000108]
//     	FFMA.FTZ R2, R4, c[0x10][0x14], R2; # [ 34][000110]
//     	FMUL32I.FTZ R0, R0, 0x3b8c4253;  # [ 35][000118]
//     	FMUL32I.FTZ R1, R1, 0x3b8c4253;  # [ 36][000120]
//     	FMUL.FTZ R2, R2, 255;            # [ 37][000128]
//     	FMNMX.FTZ R0, R0, RZ, !PT;       # [ 38][000130]
//     	FMNMX.FTZ R1, R1, RZ, !PT;       # [ 39][000138]
//     	FMUL32I.FTZ R2, R2, 0x3b8c4253;  # [ 40][000140]
//     	MUFU.LG2 R0, R0;                 # [ 41][000148]
//     	FADD.FTZ R9, -R3, 1;             # [ 42][000150]
//     	MUFU.LG2 R1, R1;                 # [ 43][000158]
//     	FMNMX.FTZ R2, R2, RZ, !PT;       # [ 44][000160]
//     	FMUL32I.FTZ R0, R0, 0x3f70c09b;  # [ 45][000168]
//     	FMUL32I.FTZ R1, R1, 0x3f70c09b;  # [ 46][000170]
//     	MUFU.LG2 R2, R2;                 # [ 47][000178]
//     	RRO.EX2 R0, R0;                  # [ 48][000180]
//     	RRO.EX2 R1, R1;                  # [ 49][000188]
//     	FMUL32I.FTZ R2, R2, 0x3f70c09b;  # [ 50][000190]
//     	MUFU.EX2 R0, R0;                 # [ 51][000198]
//     	FFMA.FTZ R3, R9, c[0x10][0x10], R3; # [ 52][0001a0]
//     	MUFU.EX2 R1, R1;                 # [ 53][0001a8]
//     	RRO.EX2 R2, R2;                  # [ 54][0001b0]
//     	FMUL32I.FTZ R0, R0, 0x4375aa44;  # [ 55][0001b8]
//     	FMUL32I.FTZ R6, R1, 0x4375aa44;  # [ 56][0001c0]
//     	MUFU.EX2 R2, R2;                 # [ 57][0001c8]
//     	FMUL32I.FTZ R1, R0, 0x3b808081;  # [ 58][0001d0]
//     	FMUL32I.FTZ R5, R6, 0x3b808081;  # [ 59][0001d8]
//     	FMUL32I.FTZ R4, R2, 0x4375aa44;  # [ 60][0001e0]
//     	FMUL32I.FTZ R8, R1, 0.33;        # [ 61][0001e8]
//     	FMUL32I.FTZ R2, R4, 0x3b808081;  # [ 62][0001f0]
//     	FFMA.FTZ R8, R5, c[0x10][0x18], R8; # [ 63][0001f8]
//     	FFMA.FTZ R8, R2, c[0x10][0x1c], R8; # [ 64][000200]
//     	FADD.FTZ.SAT R9, R8, -0.5;       # [ 65][000208]
//     	FADD.FTZ.SAT R10, R8, R8;        # [ 66][000210]
//     	FMUL32I.FTZ.SAT R8, R8, 0x3e5c3c1a; # [ 67][000218]
//     	FADD.FTZ R9, R9, R9;             # [ 68][000220]
//     	FMUL32I.FTZ R14, R10, 0x3f0dcd65; # [ 69][000228]
//     	FFMA.FTZ R13, R10, -c[0x10][0x24], -R7; # [ 70][000230]
//     	FMUL32I.FTZ R12, R10, 0x3f5ce5b9; # [ 71][000238]
//     	FFMA.FTZ R11, R10, -c[0x10][0x28], -R7; # [ 72][000240]
//     	FFMA.FTZ R15, R10, -c[0x10][0x20], -R7; # [ 73][000248]
//     	FFMA.FTZ R13, R9, R13, R14;      # [ 74][000250]
//     	FFMA.FTZ R7, R9, R11, R12;       # [ 75][000258]
//     	FMUL32I.FTZ R10, R10, 0x3ea40095; # [ 76][000260]
//     	FFMA.FTZ R6, R6, -c[0x10][0x2c], R13; # [ 77][000268]
//     	FFMA.FTZ R0, R0, -c[0x10][0x2c], R7; # [ 78][000270]
//     	FFMA.FTZ R7, R9, R15, R10;       # [ 79][000278]
//     	FFMA.FTZ R5, R8, R6, R5;         # [ 80][000280]
//     	FFMA.FTZ R0, R8, R0, R1;         # [ 81][000288]
//     	FFMA.FTZ R4, R4, -c[0x10][0x2c], R7; # [ 82][000290]
//     	FMUL32I.FTZ R1, R5, 0x3bd84a7f;  # [ 83][000298]
//     	FMUL32I.FTZ R6, R0, 0x3b5b0f36;  # [ 84][0002a0]
//     	FFMA.FTZ R2, R8, R4, R2;         # [ 85][0002a8]
//     	FFMA.FTZ R0, R0, c[0x10][0x30], R1; # [ 86][0002b0]
//     	FFMA.FTZ R4, R5, c[0x10][0x3c], R6; # [ 87][0002b8]
//     	FADD.FTZ R5, R6, R1;             # [ 88][0002c0]
//     	FFMA.FTZ R0, R2, c[0x10][0x34], R0; # [ 89][0002c8]
//     	FFMA.FTZ R1, R2, c[0x10][0x34], R4; # [ 90][0002d0]
//     	FFMA.FTZ R2, R2, c[0x10][0x40], R5; # [ 91][0002d8]
//     	FFMA.FTZ R0, R3, c[0x10][0x38], R0; # [ 92][0002e0]
//     	FFMA.FTZ R1, R3, c[0x10][0x38], R1; # [ 93][0002e8]
//     	FFMA.FTZ R2, R3, c[0x10][0x38], R2; # [ 94][0002f0]
//     	FADD.FTZ R6, -R0, 1;             # [ 95][0002f8]
//     	FADD.FTZ R8, -R1, 1;             # [ 96][000300]
//     	FMUL.FTZ R3, R0, R0;             # [ 97][000308]
//     	FADD.FTZ R7, -R2, 1;             # [ 98][000310]
//     	FMNMX.FTZ R5, R8, R6, PT;        # [ 99][000318]
//     	FADD32I.FTZ R4, R2, 0xbc43cab4;  # [100][000320]
//     	FFMA.FTZ R3, R1, R1, R3;         # [101][000328]
//     	FMNMX.FTZ R9, R7, R5, PT;        # [102][000330]
//     	FFMA.FTZ R5, R4, R4, R3;         # [103][000338]
//     	F2F.SAT R4, R9;                  # [104][000340]
//     	MOV R3, RZ;                      # [105][000348]
//     	MUFU.RSQ R5, R5;                 # [106][000350]
//     	FADD.FTZ R11, R7, -R4;           # [107][000358]
//     	FADD.FTZ R7, R6, -R4;            # [108][000360]
//     	FADD32I.FTZ R9, R4, 0x3cfae0e7;  # [109][000368]
//     	FADD.FTZ R6, -R4, 1;             # [110][000370]
//     	FADD.FTZ R10, R8, -R4;           # [111][000378]
//     	MUFU.RCP R5, R5;                 # [112][000380]
//     	FMNMX.FTZ R9, R9, -1, !PT;       # [113][000388]
//     	MUFU.RCP R8, R6;                 # [114][000390]
//     	FADD.FTZ R6, -R5, 1;             # [115][000398]
//     	FMNMX.FTZ R9, R9, 1, PT;         # [116][0003a0]
//     	FMUL.FTZ.SAT R5, R10, R8;        # [117][0003a8]
//     	FMUL.FTZ.SAT R7, R7, R8;         # [118][0003b0]
//     	FMUL.FTZ.SAT R8, R11, R8;        # [119][0003b8]
//     	FMNMX.FTZ R6, R6, RZ, !PT;       # [120][0003c0]
//     	FADD.FTZ R10, -R4, R9;           # [121][0003c8]
//     	FADD32I.FTZ R11, R5, 0x3e99995c; # [122][0003d0]
//     	FADD32I.FTZ R9, R7, 0x3ef5c20f;  # [123][0003d8]
//     	FFMA.FTZ R4, R6, R10, R4;        # [124][0003e0]
//     	FADD32I.FTZ R12, R8, 0x3e19991c; # [125][0003e8]
//     	FMNMX.FTZ R10, R11, -1, !PT;     # [126][0003f0]
//     	FMNMX.FTZ R9, R9, -1, !PT;       # [127][0003f8]
//     	FMNMX.FTZ R12, R12, -1, !PT;     # [128][000400]
//     	FMNMX.FTZ R11, R10, 1, PT;       # [129][000408]
//     	FMNMX.FTZ R10, R9, 1, PT;        # [130][000410]
//     	FMNMX.FTZ R12, R12, 1, PT;       # [131][000418]
//     	FADD.FTZ R11, -R5, R11;          # [132][000420]
//     	FADD.FTZ R10, -R7, R10;          # [133][000428]
//     	FADD.FTZ R12, -R8, R12;          # [134][000430]
//     	FADD.FTZ R9, -R4, 1;             # [135][000438]
//     	FFMA.FTZ R7, R6, R10, R7;        # [136][000440]
//     	FFMA.FTZ R10, R6, R11, R5;       # [137][000448]
//     	FFMA.FTZ R8, R6, R12, R8;        # [138][000450]
//     	FFMA.FTZ R5, R7, R9, R4;         # [139][000458]
//     	FFMA.FTZ R7, R10, R9, R4;        # [140][000460]
//     	FFMA.FTZ R8, R8, R9, R4;         # [141][000468]
//     	FMNMX.FTZ R4, R5, 1, PT;         # [142][000470]
//     	FMNMX.FTZ R5, R7, 1, PT;         # [143][000478]
//     	FMNMX.FTZ R7, R8, 1, PT;         # [144][000480]
//     	FADD.FTZ R4, -R0, -R4;           # [145][000488]
//     	FADD.FTZ R5, -R1, -R5;           # [146][000490]
//     	FADD.FTZ R7, -R2, -R7;           # [147][000498]
//     	FADD.FTZ R4, R4, 1;              # [148][0004a0]
//     	FADD.FTZ R5, R5, 1;              # [149][0004a8]
//     	FADD.FTZ R7, R7, 1;              # [150][0004b0]
//     	FFMA.FTZ R0, R6, R4, R0;         # [151][0004b8]
//     	FFMA.FTZ R1, R6, R5, R1;         # [152][0004c0]
//     	FFMA.FTZ R2, R6, R7, R2;         # [153][0004c8]
//     	EXIT;                            # [154][0004d0]
//     	END
//     END_SECTION
// END_SHADER
// 
